
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021348  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08021618  08021618  00031618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000030  080218ec  080218ec  000318ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  0802191c  0802191c  0003191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  0802194c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001590  2400007c  080219c8  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400160c  080219c8  0004160c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c6be8  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000add6  00000000  00000000  00106c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00005948  00000000  00000000  00111a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005a90  00000000  00000000  001173b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f774  00000000  00000000  0011ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003bdf3  00000000  00000000  0015c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d80f6  00000000  00000000  001983a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0037049d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0001a378  00000000  00000000  003704f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08021600 	.word	0x08021600

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08021600 	.word	0x08021600

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e fea3 	bl	801f1e8 <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f016 f9fc 	bl	80168d8 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	08021870 	.word	0x08021870

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	08021870 	.word	0x08021870

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f ffee 	bl	80210bc <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f fde6 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08021618 	.word	0x08021618

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01f fb0e 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01f f8aa 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01f f897 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01f f8a7 	bl	8021258 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e fe3f 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e fe2c 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01e fd7c 	bl	80210c0 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01e fd4c 	bl	80210bc <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01e fd16 	bl	80210bc <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01e fcee 	bl	80210c4 <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01e fc12 	bl	80210c4 <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01e fbb2 	bl	80210c4 <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01e fc29 	bl	802136c <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01e f9c9 	bl	80210c0 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01e f9b7 	bl	80210c0 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01e fa69 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01e f99a 	bl	80210c4 <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01e fa0e 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01e f942 	bl	80210c4 <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01e fa55 	bl	8021338 <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01e f9b0 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01e f8e1 	bl	80210c4 <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01c f90a 	bl	801f510 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08021870 	.word	0x08021870

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01d fc04 	bl	80210bc <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08021634 	.word	0x08021634

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01d f996 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01d f994 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c ff3b 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c ff28 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c fe90 	bl	80210c0 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c fe60 	bl	80210bc <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c fe25 	bl	80210c4 <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c fdc5 	bl	80210c4 <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01c fc6c 	bl	80210c0 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01c fd1e 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01c fc52 	bl	80210c4 <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01c fd65 	bl	8021338 <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01c fcc0 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01c fbf1 	bl	80210c4 <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01c fc53 	bl	8021298 <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb54 	bl	8005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb5f 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb33 	bl	8005174 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb3b 	bl	800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb3e 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb58 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb2c 	bl	80051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001ac 	.word	0x240001ac

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb33 	bl	800520e <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 faf4 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 faff 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f015 fd81 	bl	801a7ac <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 ff6e 	bl	801ab94 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f959 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fac5 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fad2 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f015 fd4d 	bl	801a802 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f902 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa6e 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa7b 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f015 fd0a 	bl	801a802 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f8bb 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa27 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa30 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01c fa71 	bl	802136c <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f015 fc9e 	bl	801a802 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <_ZN3Can15send_ok_messageEv>:

void Can::send_ok_message(){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	char ok_message[] = "Ok";
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <_ZN3Can15send_ok_messageEv+0x3c>)
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	8019      	strh	r1, [r3, #0]
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	0c12      	lsrs	r2, r2, #16
 8004ee8:	701a      	strb	r2, [r3, #0]
	send_message(INFO_MESSAGE,(uint8_t*) ok_message, strlen(ok_message));
 8004eea:	f107 030c 	add.w	r3, r7, #12
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fa0e 	bl	8000310 <strlen>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f107 020c 	add.w	r2, r7, #12
 8004efa:	2110      	movs	r1, #16
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fedf 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	08021650 	.word	0x08021650

08004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004f26:	b590      	push	{r4, r7, lr}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ffed 	bl	8004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004f36:	4603      	mov	r3, r0
 8004f38:	681c      	ldr	r4, [r3, #0]
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	f7ff ffe8 	bl	8004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004f40:	4603      	mov	r3, r0
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}

08004f56 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f103 0208 	add.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
	return *this;
 8004f6a:	687b      	ldr	r3, [r7, #4]
      }
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa2:	f000 f993 	bl	80052cc <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fac:	f000 f99e 	bl	80052ec <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	f107 0214 	add.w	r2, r7, #20
 8004fb8:	f107 0318 	add.w	r3, r7, #24
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ffb1 	bl	8004f26 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f083 0301 	eor.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01d      	beq.n	800500c <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004fd0:	f107 0318 	add.w	r3, r7, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffcf 	bl	8004f78 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	f107 031c 	add.w	r3, r7, #28
 8004fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fe4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d807      	bhi.n	8005000 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f988 	bl	800530e <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004ffe:	e006      	b.n	800500e <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8005000:	f107 0318 	add.w	r3, r7, #24
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ffa6 	bl	8004f56 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 800500a:	e7d3      	b.n	8004fb4 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 800500c:	bf00      	nop
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	24000104 	.word	0x24000104

0800501c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	6978      	ldr	r0, [r7, #20]
 800502c:	f000 f900 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8005030:	4603      	mov	r3, r0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f000 f90b 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 800503a:	4603      	mov	r3, r0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	f107 0208 	add.w	r2, r7, #8
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fdc0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800504e:	4603      	mov	r3, r0
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fddd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005064:	4603      	mov	r3, r0
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d103      	bne.n	800507c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6938      	ldr	r0, [r7, #16]
 8005078:	f000 f80c 	bl	8005094 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fdbc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005086:	e7da      	b.n	800503e <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005088:	bf00      	nop
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	240000f8 	.word	0x240000f8

08005094 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3390      	adds	r3, #144	; 0x90
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	f015 fbfe 	bl	801a8b8 <HAL_FDCAN_GetRxMessage>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3390      	adds	r3, #144	; 0x90
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7ff fd0d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f931 	bl	8005356 <_ZNSaIP3CanED1Ev>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f914 	bl	8005336 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ffeb 	bl	80050fe <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f97e 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f96d 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f970 	bl	8005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005184:	4603      	mov	r3, r0
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f974 	bl	8005486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f01b ffd9 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
	return *this;
 80051e8:	687b      	ldr	r3, [r7, #4]
      }
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f952 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005218:	6838      	ldr	r0, [r7, #0]
 800521a:	f000 f953 	bl	80054c4 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 800521e:	4603      	mov	r3, r0
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f959 	bl	80054da <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f97c 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f96b 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f805 	bl	800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005280:	4603      	mov	r3, r0
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffed 	bl	800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 80052b0:	4603      	mov	r3, r0
	  ? this->_M_get()
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <_ZNRSt8optionalImE5valueEv+0x1e>
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f951 	bl	800555e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 80052bc:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 80052be:	e001      	b.n	80052c4 <_ZNRSt8optionalImE5valueEv+0x22>
 80052c0:	f7ff fb93 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f94b 	bl	8005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f93a 	bl	8005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 800530e:	b5b0      	push	{r4, r5, r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8005318:	687c      	ldr	r4, [r7, #4]
 800531a:	6838      	ldr	r0, [r7, #0]
 800531c:	f000 f93c 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	4629      	mov	r1, r5
 8005326:	4620      	mov	r0, r4
 8005328:	f000 f952 	bl	80055d0 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bdb0      	pop	{r4, r5, r7, pc}

08005336 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f95b 	bl	80055fa <_ZNSaIP3CanEC1Ev>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f963 	bl	8005612 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005384:	461a      	mov	r2, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f957 	bl	800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fea9 	bl	80050e6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f95a 	bl	8005660 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	1d38      	adds	r0, r7, #4
 80053d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80053da:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f954 	bl	800568e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f978 	bl	80056de <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ee:	4604      	mov	r4, r0
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f97f 	bl	80056f6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053f8:	4602      	mov	r2, r0
 80053fa:	462b      	mov	r3, r5
 80053fc:	4621      	mov	r1, r4
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f99f 	bl	8005742 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bdb0      	pop	{r4, r5, r7, pc}

0800540e <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800540e:	b5b0      	push	{r4, r5, r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f9c7 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005426:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005428:	461a      	mov	r2, r3
 800542a:	4629      	mov	r1, r5
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f9cc 	bl	80057ca <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f939 	bl	80056ac <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bdb0      	pop	{r4, r5, r7, pc}

08005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f9b5 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f9a4 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3310      	adds	r3, #16
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f9a5 	bl	8005804 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80054da:	b5b0      	push	{r4, r5, r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d011      	beq.n	8005514 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054f0:	687c      	ldr	r4, [r7, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685d      	ldr	r5, [r3, #4]
 80054f6:	6838      	ldr	r0, [r7, #0]
 80054f8:	f000 f990 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f9aa 	bl	800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	e00c      	b.n	800552e <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fe9b 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 800551a:	4604      	mov	r4, r0
 800551c:	6838      	ldr	r0, [r7, #0]
 800551e:	f000 f97d 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	4621      	mov	r1, r4
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9a9 	bl	8005880 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa22 	bl	8005978 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 8005534:	4603      	mov	r3, r0
      }
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bdb0      	pop	{r4, r5, r7, pc}

0800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa20 	bl	80059ae <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800556e:	4603      	mov	r3, r0
      }
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	7239      	strb	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4621      	mov	r1, r4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fa11 	bl	80059e8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	7239      	strb	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 80055dc:	68fc      	ldr	r4, [r7, #12]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ffda 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff ffdf 	bl	80055ae <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bdb0      	pop	{r4, r5, r7, pc}

080055fa <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa08 	bl	8005a18 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	609a      	str	r2, [r3, #8]
	{ }
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
	if (__p)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9eb 	bl	8005a2e <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fe99 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f000 f9e5 	bl	8005a6c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80056c4:	461a      	mov	r2, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9e2 	bl	8005a90 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff ffd1 	bl	8005676 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056f6:	b590      	push	{r4, r7, lr}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff ffed 	bl	80056de <_ZNKSt16initializer_listI3DLCE5beginEv>
 8005704:	4604      	mov	r4, r0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9d5 	bl	8005ab6 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 800570c:	4603      	mov	r3, r0
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4423      	add	r3, r4
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bd90      	pop	{r4, r7, pc}

0800571a <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800571a:	b5b0      	push	{r4, r5, r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8005724:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f9d0 	bl	8005ace <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 800572e:	462a      	mov	r2, r5
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f9d5 	bl	8005ae2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8005738:	4603      	mov	r3, r0
    }
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bdb0      	pop	{r4, r5, r7, pc}

08005742 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005742:	b590      	push	{r4, r7, lr}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f7ff ffe1 	bl	800571a <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005758:	4603      	mov	r3, r0
 800575a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800575c:	68fc      	ldr	r4, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 f827 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005766:	4603      	mov	r3, r0
 8005768:	4619      	mov	r1, r3
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f000 f9ca 	bl	8005b04 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005770:	4603      	mov	r3, r0
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f9ed 	bl	8005b54 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800577a:	4602      	mov	r2, r0
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f80d 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800579a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800579c:	4622      	mov	r2, r4
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68b8      	ldr	r0, [r7, #8]
 80057a2:	f000 f9eb 	bl	8005b7c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 80057a6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	605a      	str	r2, [r3, #4]
	}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd90      	pop	{r4, r7, pc}

080057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f9e0 	bl	8005b9e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9dc 	bl	8005bca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8005812:	4603      	mov	r3, r0
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8005832:	b590      	push	{r4, r7, lr}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800583c:	6838      	ldr	r0, [r7, #0]
 800583e:	f7ff ffed 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005842:	4603      	mov	r3, r0
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4619      	mov	r1, r3
 800584a:	2004      	movs	r0, #4
 800584c:	f7fa fd70 	bl	8000330 <_ZnwjPv>
 8005850:	4603      	mov	r3, r0
 8005852:	601c      	str	r4, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}

0800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ffd7 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800586e:	4603      	mov	r3, r0
 8005870:	4619      	mov	r1, r3
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	f7ff ffdd 	bl	8005832 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005880:	b5b0      	push	{r4, r5, r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800588e:	2101      	movs	r1, #1
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f9a5 	bl	8005be0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005896:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fcc3 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 80058aa:	4603      	mov	r3, r0
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	f107 0214 	add.w	r2, r7, #20
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f9d8 	bl	8005c6e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80058be:	4603      	mov	r3, r0
 80058c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f9e6 	bl	8005c98 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 80058cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80058d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	18d5      	adds	r5, r2, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff9d 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	4629      	mov	r1, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff ffb7 	bl	800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f95e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 f9f0 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005908:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	4621      	mov	r1, r4
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 f9d6 	bl	8005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005914:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3304      	adds	r3, #4
 800591a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800591c:	f107 0308 	add.w	r3, r7, #8
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f949 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005926:	4603      	mov	r3, r0
 8005928:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f9db 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005932:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f9c1 	bl	8005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800593e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005940:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800594c:	461a      	mov	r2, r3
 800594e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005950:	f7ff fe73 	bl	800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
    }
 800596c:	bf00      	nop
 800596e:	3730      	adds	r7, #48	; 0x30
 8005970:	46bd      	mov	sp, r7
 8005972:	bdb0      	pop	{r4, r5, r7, pc}
 8005974:	08021654 	.word	0x08021654

08005978 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fc65 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005986:	4603      	mov	r3, r0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f9c2 	bl	8005d1a <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005996:	4603      	mov	r3, r0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f93d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 80059a4:	4603      	mov	r3, r0
      }
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	7239      	strb	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff fde1 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059d6:	4603      	mov	r3, r0
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	    { }
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	7239      	strb	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059f4:	68fc      	ldr	r4, [r7, #12]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fdce 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4629      	mov	r1, r5
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff ffde 	bl	80059c4 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	711a      	strb	r2, [r3, #4]
	{ }
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bdb0      	pop	{r4, r5, r7, pc}

08005a18 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a46:	f7fa fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a50:	69b8      	ldr	r0, [r7, #24]
 8005a52:	f01b fb33 	bl	80210bc <_ZdlPv>
	    return;
 8005a56:	e005      	b.n	8005a64 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	69b9      	ldr	r1, [r7, #24]
 8005a5c:	69f8      	ldr	r0, [r7, #28]
 8005a5e:	f000 faa4 	bl	8005faa <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f967 	bl	8005d4c <_ZNSaI3DLCEC1ERKS0_>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f971 	bl	8005d68 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f971 	bl	8005d90 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	10db      	asrs	r3, r3, #3
    }
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f919 	bl	8005d4c <_ZNSaI3DLCEC1ERKS0_>
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f961 	bl	8005de6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bf8c      	ite	hi
 8005b2c:	2301      	movhi	r3, #1
 8005b2e:	2300      	movls	r3, #0
 8005b30:	b2dc      	uxtb	r4, r3
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fc3d 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8005b3c:	2c00      	cmp	r4, #0
 8005b3e:	d002      	beq.n	8005b46 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b40:	4803      	ldr	r0, [pc, #12]	; (8005b50 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b42:	f01b fb89 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b46:	687b      	ldr	r3, [r7, #4]
      }
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd90      	pop	{r4, r7, pc}
 8005b50:	08021670 	.word	0x08021670

08005b54 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d006      	beq.n	8005b72 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f956 	bl	8005e1a <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e000      	b.n	8005b74 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b72:	2300      	movs	r3, #0
      }
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f963 	bl	8005e5a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b94:	4603      	mov	r3, r0
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005ba8:	f7fa fbba 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f962 	bl	8005e7e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005bba:	e003      	b.n	8005bc4 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f975 	bl	8005eae <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f969 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f976 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	1ae2      	subs	r2, r4, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	bf34      	ite	cc
 8005c04:	2301      	movcc	r3, #1
 8005c06:	2300      	movcs	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f01b fb22 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f966 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f962 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fc fe0e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005c36:	4603      	mov	r3, r0
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4423      	add	r3, r4
 8005c3c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f951 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c44:	4602      	mov	r2, r0
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d306      	bcc.n	8005c5a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f939 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c52:	4602      	mov	r2, r0
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d904      	bls.n	8005c64 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f932 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c60:	4603      	mov	r3, r0
 8005c62:	e000      	b.n	8005c66 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c64:	697b      	ldr	r3, [r7, #20]
      }
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c6e:	b590      	push	{r4, r7, lr}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fe ff9d 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	681c      	ldr	r4, [r3, #0]
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f7fe ff98 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1ae3      	subs	r3, r4, r3
 8005c8e:	109b      	asrs	r3, r3, #2
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}

08005c98 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f92a 	bl	8005f06 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	e000      	b.n	8005cb8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005cb6:	2300      	movs	r3, #0
      }
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005cce:	f88d 4000 	strb.w	r4, [sp]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f934 	bl	8005f46 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005cde:	4603      	mov	r3, r0
      }
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd90      	pop	{r4, r7, pc}

08005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f936 	bl	8005f7e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	f107 020c 	add.w	r2, r7, #12
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fbfe 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f935 	bl	8005fc8 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
	{ }
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005da8:	f7fa faba 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f01b f982 	bl	80210bc <_ZdlPv>
	    return;
 8005db8:	e005      	b.n	8005dc6 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	69f8      	ldr	r0, [r7, #28]
 8005dc0:	f000 f9a5 	bl	800610e <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005dd6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dee:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005df2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ffea 	bl	8005dce <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dfe:	f107 0208 	add.w	r2, r7, #8
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4611      	mov	r1, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fc ffec 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	681b      	ldr	r3, [r3, #0]
      }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005e2c:	f7fa fa78 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f01b f942 	bl	80210c4 <_Znwj>
 8005e40:	4603      	mov	r3, r0
 8005e42:	e006      	b.n	8005e52 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e44:	2200      	movs	r2, #0
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f96f 	bl	800612c <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	bf00      	nop
      { return __a.allocate(__n); }
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f8b6 	bl	8005fe0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e74:	4603      	mov	r3, r0
    }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d00a      	beq.n	8005ea6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8b5 	bl	8006000 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f8bc 	bl	8006016 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	e7f0      	b.n	8005e88 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f8d2 	bl	8006078 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f8b4 	bl	8006044 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	109b      	asrs	r3, r3, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005f18:	f7fa fa02 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f01b f8cc 	bl	80210c4 <_Znwj>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	e006      	b.n	8005f3e <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005f30:	2200      	movs	r2, #0
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f93a 	bl	80061ae <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	bf00      	nop
      { return __a.allocate(__n); }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f897 	bl	800608e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f60:	4603      	mov	r3, r0
      }
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
    }
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f88:	f7fa f9ca 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f897 	bl	80060c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f9a:	e003      	b.n	8005fa4 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8aa 	bl	80060f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f01b f87f 	bl	80210c0 <_ZdlPvj>
      }
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8ba 	bl	800616a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8bb 	bl	800619a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8006034:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800604c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006050:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ffea 	bl	800602c <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006058:	4603      	mov	r3, r0
 800605a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800605c:	f107 0208 	add.w	r2, r7, #8
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc febd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800606c:	4603      	mov	r3, r0
 800606e:	681b      	ldr	r3, [r3, #0]
      }
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800608e:	b5b0      	push	{r4, r5, r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f8a5 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060a2:	4604      	mov	r4, r0
 80060a4:	68b8      	ldr	r0, [r7, #8]
 80060a6:	f000 f8a1 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060aa:	4605      	mov	r5, r0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f89d 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	4629      	mov	r1, r5
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f8a2 	bl	8006202 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80060be:	4603      	mov	r3, r0
    }
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bdb0      	pop	{r4, r5, r7, pc}

080060c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d00a      	beq.n	80060f0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8af 	bl	800623e <_ZSt11__addressofIP3CanEPT_RS2_>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f8b6 	bl	8006254 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	e7f0      	b.n	80060d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4619      	mov	r1, r3
 8006120:	68b8      	ldr	r0, [r7, #8]
 8006122:	f01a ffcd 	bl	80210c0 <_ZdlPvj>
      }
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f896 	bl	800626a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4293      	cmp	r3, r2
 8006144:	bf8c      	ite	hi
 8006146:	2301      	movhi	r3, #1
 8006148:	2300      	movls	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006150:	f01b f87f 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4618      	mov	r0, r3
 800615a:	f01a ffb3 	bl	80210c4 <_Znwj>
 800615e:	4603      	mov	r3, r0
 8006160:	bf00      	nop
      }
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800616a:	b590      	push	{r4, r7, lr}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f883 	bl	8006282 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800617c:	4604      	mov	r4, r0
 800617e:	68b8      	ldr	r0, [r7, #8]
 8006180:	f000 f87f 	bl	8006282 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006184:	4603      	mov	r3, r0
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4619      	mov	r1, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f000 f884 	bl	8006298 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006190:	4603      	mov	r3, r0
    }
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}

0800619a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    }
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f88f 	bl	80062de <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf8c      	ite	hi
 80061c8:	2301      	movhi	r3, #1
 80061ca:	2300      	movls	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80061d2:	f01b f83e 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f01a ff72 	bl	80210c4 <_Znwj>
 80061e0:	4603      	mov	r3, r0
 80061e2:	bf00      	nop
      }
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	109b      	asrs	r3, r3, #2
 8006218:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd06      	ble.n	800622e <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	461a      	mov	r2, r3
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f01b f885 	bl	8021338 <memmove>
      return __result + __count;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
    }
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe84 	bl	8005f6a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006272:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
    { return __it; }
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f826 	bl	80062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 80062aa:	4604      	mov	r4, r0
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f000 f822 	bl	80062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 80062b2:	4605      	mov	r5, r0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f828 	bl	800630c <_ZSt12__niter_baseIP3DLCET_S2_>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	4629      	mov	r1, r5
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f82d 	bl	8006322 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062c8:	4602      	mov	r2, r0
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f837 	bl	8006342 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 80062d4:	4603      	mov	r3, r0
    }
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}

080062de <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062e6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f811 	bl	800635a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006338:	4603      	mov	r3, r0
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006366:	f7f9 ffdb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f80d 	bl	8006394 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800637a:	4603      	mov	r3, r0
 800637c:	e006      	b.n	800638c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f82b 	bl	80063de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006388:	4603      	mov	r3, r0
 800638a:	bf00      	nop
    }
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	10db      	asrs	r3, r3, #3
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd0f      	ble.n	80063d0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063b8:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3308      	adds	r3, #8
 80063c0:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3308      	adds	r3, #8
 80063c6:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e7ec      	b.n	80063aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 80063d0:	687b      	ldr	r3, [r7, #4]
	}
 80063d2:	4618      	mov	r0, r3
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	10db      	asrs	r3, r3, #3
 80063f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	461a      	mov	r2, r3
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f01a ff98 	bl	8021338 <memmove>
	  return __result + _Num;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
	}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 8006418:	b580      	push	{r7, lr}
 800641a:	b0a6      	sub	sp, #152	; 0x98
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d126      	bne.n	8006476 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800642e:	4293      	cmp	r3, r2
 8006430:	d121      	bne.n	8006476 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 8006432:	481a      	ldr	r0, [pc, #104]	; (800649c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006434:	f7fe fe70 	bl	8005118 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800643a:	f107 0314 	add.w	r3, r7, #20
 800643e:	4611      	mov	r1, r2
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	4618      	mov	r0, r3
 8006444:	f01a ff6a 	bl	802131c <memcpy>
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	2310      	movs	r3, #16
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe ffa1 	bl	800539e <_ZNSaI3DLCEC1Ev>
 800645c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006460:	f107 020c 	add.w	r2, r7, #12
 8006464:	ca06      	ldmia	r2, {r1, r2}
 8006466:	480f      	ldr	r0, [pc, #60]	; (80064a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006468:	f7fe ffb0 	bl	80053cc <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800646c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ffa0 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006482:	4293      	cmp	r3, r2
 8006484:	d105      	bne.n	8006492 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006486:	4807      	ldr	r0, [pc, #28]	; (80064a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006488:	f7fe ffc1 	bl	800540e <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800648e:	f000 f80b 	bl	80064a8 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006492:	bf00      	nop
 8006494:	3798      	adds	r7, #152	; 0x98
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	240000f8 	.word	0x240000f8
 80064a0:	080216a4 	.word	0x080216a4
 80064a4:	24000104 	.word	0x24000104

080064a8 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681c      	ldr	r4, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fc14 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80064c0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80064c2:	461a      	mov	r2, r3
 80064c4:	4629      	mov	r1, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fc19 	bl	8005cfe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe ff4c 	bl	800536c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}

080064de <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064de:	b580      	push	{r7, lr}
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7ff ff96 	bl	8006418 <_Z41__static_initialization_and_destruction_0ii>
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ee:	b580      	push	{r7, lr}
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064f6:	2000      	movs	r0, #0
 80064f8:	f7ff ff8e 	bl	8006418 <_Z41__static_initialization_and_destruction_0ii>
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f89e 	bl	8006648 <_ZNSaIP9DigitalInED1Ev>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f881 	bl	8006628 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ffeb 	bl	8006516 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8b1 	bl	80066ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f88f 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ffeb 	bl	8006562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	4619      	mov	r1, r3
 80065b8:	4809      	ldr	r0, [pc, #36]	; (80065e0 <_ZN9DigitalInC1EP3Pin+0x48>)
 80065ba:	f000 f89e 	bl	80066fa <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 80065be:	687c      	ldr	r4, [r7, #4]
 80065c0:	463b      	mov	r3, r7
 80065c2:	4619      	mov	r1, r3
 80065c4:	4807      	ldr	r0, [pc, #28]	; (80065e4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 80065c6:	f000 f8a9 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80065ca:	4603      	mov	r3, r0
 80065cc:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2205      	movs	r2, #5
 80065d2:	719a      	strb	r2, [r3, #6]
}
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	24000110 	.word	0x24000110
 80065e4:	2400011c 	.word	0x2400011c

080065e8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	889b      	ldrh	r3, [r3, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f015 f9f8 	bl	801b9f4 <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d103      	bne.n	8006616 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	721a      	strb	r2, [r3, #8]
 8006614:	e002      	b.n	800661c <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	721a      	strb	r2, [r3, #8]
	return state;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7a1b      	ldrb	r3, [r3, #8]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8d1 	bl	80067d8 <_ZNSaIP9DigitalInEC1Ev>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f8d9 	bl	80067f0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8cd 	bl	8006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff3c 	bl	80064fe <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8d0 	bl	800683e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fa faa1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 fe4c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8db 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80066de:	4603      	mov	r3, r0
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8b7 	bl	8006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff ff2d 	bl	800654a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8006704:	6838      	ldr	r0, [r7, #0]
 8006706:	f000 f8d1 	bl	80068ac <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 800670a:	4603      	mov	r3, r0
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8d7 	bl	80068c2 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8fc 	bl	8006926 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 800672e:	4603      	mov	r3, r0
 8006730:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f906 	bl	8006944 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8006738:	4603      	mov	r3, r0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	f107 020c 	add.w	r2, r7, #12
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f909 	bl	800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d114      	bne.n	800677c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f917 	bl	8006986 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681c      	ldr	r4, [r3, #0]
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f91d 	bl	80069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006766:	4603      	mov	r3, r0
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	4621      	mov	r1, r4
 8006770:	4618      	mov	r0, r3
 8006772:	f7fa fbb2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01b      	beq.n	80067be <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006786:	687c      	ldr	r4, [r7, #4]
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f912 	bl	80069bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006798:	f107 0318 	add.w	r3, r7, #24
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa fbae 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80067a4:	f107 0218 	add.w	r2, r7, #24
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80067b2:	6979      	ldr	r1, [r7, #20]
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 f911 	bl	80069dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80067ba:	4603      	mov	r3, r0
 80067bc:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80067be:	f107 0308 	add.w	r3, r7, #8
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f8ec 	bl	80069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 80067c8:	4603      	mov	r3, r0
 80067ca:	3304      	adds	r3, #4
      }
 80067cc:	4618      	mov	r0, r3
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}
 80067d4:	08021870 	.word	0x08021870

080067d8 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f939 	bl	8006a58 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
	{ }
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
	if (__p)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f91c 	bl	8006a6e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f930 	bl	8006aac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d012      	beq.n	800688c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006866:	6838      	ldr	r0, [r7, #0]
 8006868:	f000 f92b 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800686c:	4603      	mov	r3, r0
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fff0 	bl	8006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006876:	6838      	ldr	r0, [r7, #0]
 8006878:	f000 f92f 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800687c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f936 	bl	8006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800688a:	e7e9      	b.n	8006860 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80068c2:	b5b0      	push	{r4, r5, r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d011      	beq.n	80068fc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80068d8:	687c      	ldr	r4, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685d      	ldr	r5, [r3, #4]
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	f000 f918 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	4629      	mov	r1, r5
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f932 	bl	8006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e00c      	b.n	8006916 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f93b 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006902:	4604      	mov	r4, r0
 8006904:	6838      	ldr	r0, [r7, #0]
 8006906:	f000 f905 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	4621      	mov	r1, r4
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f943 	bl	8006b9c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9bc 	bl	8006c94 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 800691c:	4603      	mov	r3, r0
      }
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bdb0      	pop	{r4, r5, r7, pc}

08006926 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f9c8 	bl	8006cca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 800693a:	4603      	mov	r3, r0
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f9d2 	bl	8006cf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006954:	4603      	mov	r3, r0
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006986:	b590      	push	{r4, r7, lr}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f9c2 	bl	8006d1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006996:	bf00      	nop
 8006998:	4620      	mov	r0, r4
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 f9bf 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80069dc:	b5b0      	push	{r4, r5, r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fc3b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069f0:	4604      	mov	r4, r0
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f7fa ff25 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069f8:	4605      	mov	r5, r0
 80069fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fc:	f7fa fc49 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006a00:	4603      	mov	r3, r0
 8006a02:	462a      	mov	r2, r5
 8006a04:	4621      	mov	r1, r4
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f9a0 	bl	8006d4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8006a0c:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8006a0e:	69f8      	ldr	r0, [r7, #28]
 8006a10:	f000 faee 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f107 0010 	add.w	r0, r7, #16
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	f000 f9b8 	bl	8006d92 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 faf1 	bl	8007016 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8006a34:	4603      	mov	r3, r0
 8006a36:	e00b      	b.n	8006a50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f859 	bl	8006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	f107 0318 	add.w	r3, r7, #24
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fb23 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bdb0      	pop	{r4, r5, r7, pc}

08006a58 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b088      	sub	sp, #32
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a86:	f7f9 fc4b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a90:	69b8      	ldr	r0, [r7, #24]
 8006a92:	f01a fb13 	bl	80210bc <_ZdlPv>
	    return;
 8006a96:	e005      	b.n	8006aa4 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	69b9      	ldr	r1, [r7, #24]
 8006a9c:	69f8      	ldr	r0, [r7, #28]
 8006a9e:	f000 fdac 	bl	80075fa <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fad7 	bl	80070b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fae8 	bl	80070dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006b2a:	b590      	push	{r4, r7, lr}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006b34:	6838      	ldr	r0, [r7, #0]
 8006b36:	f7ff ffed 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	681c      	ldr	r4, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4619      	mov	r1, r3
 8006b42:	2004      	movs	r0, #4
 8006b44:	f7f9 fbf4 	bl	8000330 <_ZnwjPv>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	601c      	str	r4, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd90      	pop	{r4, r7, pc}

08006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ffd7 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b66:	4603      	mov	r3, r0
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68b8      	ldr	r0, [r7, #8]
 8006b6c:	f7ff ffdd 	bl	8006b2a <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fab8 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b9c:	b5b0      	push	{r4, r5, r7, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006ba8:	4a39      	ldr	r2, [pc, #228]	; (8006c90 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006baa:	2101      	movs	r1, #1
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fab7 	bl	8007120 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 faf4 	bl	80071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	f107 0214 	add.w	r2, r7, #20
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fafa 	bl	80071ce <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fb08 	bl	80071f8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006be8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	18d5      	adds	r5, r2, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff8b 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	4629      	mov	r1, r5
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff ffa5 	bl	8006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fb18 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fb1d 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c24:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	4621      	mov	r1, r4
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	f000 faf8 	bl	8007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c30:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3304      	adds	r3, #4
 8006c36:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c38:	f107 0308 	add.w	r3, r7, #8
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fb03 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c42:	4603      	mov	r3, r0
 8006c44:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb08 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c4e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fae3 	bl	8007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c5a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c5c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c6c:	f7ff fdd4 	bl	8006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	441a      	add	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
    }
 8006c88:	bf00      	nop
 8006c8a:	3730      	adds	r7, #48	; 0x30
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c90:	08021724 	.word	0x08021724

08006c94 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff6b 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 faef 	bl	8007290 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fb01 	bl	80072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006cc0:	4603      	mov	r3, r0
      }
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006cca:	b590      	push	{r4, r7, lr}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fddd 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fafc 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb02 	bl	80072f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9c2 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006d22:	bf00      	nop
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3310      	adds	r3, #16
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fb0b 	bl	8007358 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d4c:	b5b0      	push	{r4, r5, r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fb08 	bl	8007370 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d60:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f7fa fa7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fd69 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d70:	4605      	mov	r5, r0
 8006d72:	6838      	ldr	r0, [r7, #0]
 8006d74:	f7fa fa8d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	4622      	mov	r2, r4
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fb05 	bl	8007392 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d88:	697b      	ldr	r3, [r7, #20]
	}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bdb0      	pop	{r4, r5, r7, pc}

08006d92 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d92:	b5b0      	push	{r4, r5, r7, lr}
 8006d94:	b08c      	sub	sp, #48	; 0x30
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fb22 	bl	80073ec <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006da8:	4603      	mov	r3, r0
 8006daa:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006dac:	69bc      	ldr	r4, [r7, #24]
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	f000 fa93 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006db4:	4603      	mov	r3, r0
 8006db6:	429c      	cmp	r4, r3
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d032      	beq.n	8006e2a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006dc4:	68b8      	ldr	r0, [r7, #8]
 8006dc6:	f000 fb22 	bl	800740e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006dca:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006dd0:	68bc      	ldr	r4, [r7, #8]
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f000 fb27 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fb2e 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006de2:	4603      	mov	r3, r0
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7fa f874 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dfc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00c      	beq.n	8006e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	68b8      	ldr	r0, [r7, #8]
 8006e08:	f000 fb0d 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f107 031c 	add.w	r3, r7, #28
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7fb f847 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e1a:	e0e5      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fb17 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006e28:	e0de      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006e2a:	68bc      	ldr	r4, [r7, #8]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681d      	ldr	r5, [r3, #0]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb03 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7fa f84a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d059      	beq.n	8006f00 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e50:	69bc      	ldr	r4, [r7, #24]
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f000 fb89 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e6a:	68b8      	ldr	r0, [r7, #8]
 8006e6c:	f000 fb7d 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e70:	4604      	mov	r4, r0
 8006e72:	68b8      	ldr	r0, [r7, #8]
 8006e74:	f000 fb79 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7fb f8be 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e84:	e0b0      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e86:	68bc      	ldr	r4, [r7, #8]
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb78 	bl	8007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e92:	4603      	mov	r3, r0
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fad1 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7fa f817 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01f      	beq.n	8006ef2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fe04 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
 8006ece:	f107 0214 	add.w	r2, r7, #20
 8006ed2:	f107 0320 	add.w	r3, r7, #32
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7fa ffe5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006ede:	e083      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ee0:	f107 0218 	add.w	r2, r7, #24
 8006ee4:	f107 0318 	add.w	r3, r7, #24
 8006ee8:	4619      	mov	r1, r3
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7fb f888 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006ef0:	e07a      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 faac 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006efe:	e073      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006f00:	68bc      	ldr	r4, [r7, #8]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fa9a 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6819      	ldr	r1, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7f9 ffe0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d059      	beq.n	8006fd4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006f24:	69bc      	ldr	r4, [r7, #24]
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fa7d 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	68b8      	ldr	r0, [r7, #8]
 8006f44:	f000 fa6f 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7fa ffa9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f56:	e047      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f58:	68bc      	ldr	r4, [r7, #8]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681d      	ldr	r5, [r3, #0]
 8006f5e:	f107 0310 	add.w	r3, r7, #16
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fb1e 	bl	80075a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fa66 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f72:	4603      	mov	r3, r0
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7f9 ffad 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01f      	beq.n	8006fc6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff fd9a 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa2:	f107 0218 	add.w	r2, r7, #24
 8006fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fa ff7b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006fb2:	e019      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006fb4:	f107 0210 	add.w	r2, r7, #16
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7fb f81e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006fc4:	e010      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa42 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006fd2:	e009      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006fdc:	f107 0318 	add.w	r3, r7, #24
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fb f847 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	3730      	adds	r7, #48	; 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bdb0      	pop	{r4, r5, r7, pc}

08006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fae4 	bl	80075c6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006ffe:	4602      	mov	r2, r0
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f000 faeb 	bl	80075e2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 800700c:	4603      	mov	r3, r0
      }
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007016:	b5b0      	push	{r4, r5, r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f955 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4293      	cmp	r3, r2
 8007036:	d012      	beq.n	800705e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8007038:	68fc      	ldr	r4, [r7, #12]
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f7ff ffd8 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007040:	4603      	mov	r3, r0
 8007042:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f9fa 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800704a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	4629      	mov	r1, r5
 8007052:	4620      	mov	r0, r4
 8007054:	f7f9 ff41 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007062:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007064:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800706a:	7df8      	ldrb	r0, [r7, #23]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	f01a f894 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800707e:	f107 0310 	add.w	r3, r7, #16
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f805 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800708a:	693b      	ldr	r3, [r7, #16]
    }
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bdb0      	pop	{r4, r5, r7, pc}

08007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80070b2:	b590      	push	{r4, r7, lr}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 faab 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070c2:	4604      	mov	r4, r0
 80070c4:	6838      	ldr	r0, [r7, #0]
 80070c6:	f7ff fe33 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4619      	mov	r1, r3
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 faad 	bl	800762e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa96 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2201      	movs	r2, #1
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 faa7 	bl	8007646 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007120:	b590      	push	{r4, r7, lr}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 faa9 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007132:	4604      	mov	r4, r0
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fab6 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800713a:	4603      	mov	r3, r0
 800713c:	1ae2      	subs	r2, r4, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	bf34      	ite	cc
 8007144:	2301      	movcc	r3, #1
 8007146:	2300      	movcs	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f01a f882 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 faa6 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800715a:	4604      	mov	r4, r0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 faa2 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007162:	4603      	mov	r3, r0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	f107 0310 	add.w	r3, r7, #16
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fb fb6e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007176:	4603      	mov	r3, r0
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4423      	add	r3, r4
 800717c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fa91 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4293      	cmp	r3, r2
 800718a:	d306      	bcc.n	800719a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fa79 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007192:	4602      	mov	r2, r0
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	4293      	cmp	r3, r2
 8007198:	d904      	bls.n	80071a4 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fa72 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80071a0:	4603      	mov	r3, r0
 80071a2:	e000      	b.n	80071a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 80071a4:	697b      	ldr	r3, [r7, #20]
      }
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}

080071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff9e 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80071ce:	b590      	push	{r4, r7, lr}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f835 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071de:	4603      	mov	r3, r0
 80071e0:	681c      	ldr	r4, [r3, #0]
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f000 f830 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071e8:	4603      	mov	r3, r0
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1ae3      	subs	r3, r4, r3
 80071ee:	109b      	asrs	r3, r3, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}

080071f8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fa5a 	bl	80076c6 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 8007212:	4603      	mov	r3, r0
 8007214:	e000      	b.n	8007218 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 8007216:	2300      	movs	r3, #0
      }
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b087      	sub	sp, #28
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800722e:	f88d 4000 	strb.w	r4, [sp]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fa64 	bl	8007706 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800723e:	4603      	mov	r3, r0
      }
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bd90      	pop	{r4, r7, pc}

08007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa5b 	bl	800773e <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	425b      	negs	r3, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	f107 020c 	add.w	r2, r7, #12
 80072ac:	f107 0308 	add.w	r3, r7, #8
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff ff24 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072f2:	b590      	push	{r4, r7, lr}
 80072f4:	b087      	sub	sp, #28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01d      	beq.n	8007342 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8007306:	68fc      	ldr	r4, [r7, #12]
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f7ff fe71 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800730e:	4603      	mov	r3, r0
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4620      	mov	r0, r4
 800731a:	f7f9 fdde 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800731e:	4603      	mov	r3, r0
 8007320:	f083 0301 	eor.w	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	68b8      	ldr	r0, [r7, #8]
 8007330:	f7ff fbd3 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007334:	60b8      	str	r0, [r7, #8]
 8007336:	e7e3      	b.n	8007300 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8007338:	68b8      	ldr	r0, [r7, #8]
 800733a:	f7ff fbc2 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800733e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007340:	e7de      	b.n	8007300 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007342:	f107 0314 	add.w	r3, r7, #20
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fea3 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800734e:	697b      	ldr	r3, [r7, #20]
    }
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa02 	bl	800776a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f94d 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800737e:	4603      	mov	r3, r0
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f9fc 	bl	8007780 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007388:	4603      	mov	r3, r0
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4619      	mov	r1, r3
 80073a6:	2018      	movs	r0, #24
 80073a8:	f7f8 ffc2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f933 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80073b2:	4604      	mov	r4, r0
 80073b4:	68b8      	ldr	r0, [r7, #8]
 80073b6:	f7ff fcbb 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80073ba:	4605      	mov	r5, r0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7f9 ff52 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80073c2:	4606      	mov	r6, r0
 80073c4:	6838      	ldr	r0, [r7, #0]
 80073c6:	f7fa fa3c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80073ca:	4680      	mov	r8, r0
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f7f9 ff60 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80073d2:	4603      	mov	r3, r0
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4643      	mov	r3, r8
 80073d8:	4632      	mov	r2, r6
 80073da:	4629      	mov	r1, r5
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fa1c 	bl	800781a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ec <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fe48 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3310      	adds	r3, #16
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fdd2 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800744c:	4603      	mov	r3, r0
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007456:	b5b0      	push	{r4, r5, r7, lr}
 8007458:	b08a      	sub	sp, #40	; 0x28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f7ff fa16 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007468:	4603      	mov	r3, r0
 800746a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800746c:	68b8      	ldr	r0, [r7, #8]
 800746e:	f7ff ff34 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007472:	4603      	mov	r3, r0
 8007474:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d023      	beq.n	80074ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007486:	68bc      	ldr	r4, [r7, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681d      	ldr	r5, [r3, #0]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fdae 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007494:	4603      	mov	r3, r0
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	4629      	mov	r1, r5
 800749c:	4620      	mov	r0, r4
 800749e:	f7f9 fd1c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80074a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fb11 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80074b8:	4603      	mov	r3, r0
 80074ba:	e004      	b.n	80074c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff faff 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80074c4:	4603      	mov	r3, r0
 80074c6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80074c8:	e7d8      	b.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fdde 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80074d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01d      	beq.n	800751c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 f9b6 	bl	8007852 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	f107 021c 	add.w	r2, r7, #28
 80074ee:	f107 0310 	add.w	r3, r7, #16
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fa32 	bl	800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8007500:	f107 0214 	add.w	r2, r7, #20
 8007504:	f107 0318 	add.w	r3, r7, #24
 8007508:	4619      	mov	r1, r3
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f9b2 	bl	8007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 8007510:	e027      	b.n	8007562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4618      	mov	r0, r3
 8007518:	f000 f833 	bl	8007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800751c:	68bc      	ldr	r4, [r7, #8]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff ff8c 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007526:	4603      	mov	r3, r0
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	4620      	mov	r0, r4
 8007532:	f7f9 fcd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800753c:	f107 0214 	add.w	r2, r7, #20
 8007540:	f107 0318 	add.w	r3, r7, #24
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f994 	bl	8007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800754c:	e009      	b.n	8007562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800754e:	2300      	movs	r3, #0
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	f107 0220 	add.w	r2, r7, #32
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7fa fd8a 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bdb0      	pop	{r4, r5, r7, pc}

0800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	330c      	adds	r3, #12
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f019 fe02 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007594:	4602      	mov	r2, r0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
	return *this;
 800759a:	687b      	ldr	r3, [r7, #4]
      }
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f019 fdef 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80075b6:	4602      	mov	r2, r0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
	return *this;
 80075bc:	687b      	ldr	r3, [r7, #4]
      }
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3310      	adds	r3, #16
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f967 	bl	80078a6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 80075d8:	4603      	mov	r3, r0
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4619      	mov	r1, r3
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	f019 fd57 	bl	80210c0 <_ZdlPvj>
      }
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8007638:	6838      	ldr	r0, [r7, #0]
 800763a:	f000 f940 	bl	80078be <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007646:	b580      	push	{r7, lr}
 8007648:	b088      	sub	sp, #32
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800765e:	f7f8 fe5f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007668:	69b8      	ldr	r0, [r7, #24]
 800766a:	f019 fd27 	bl	80210bc <_ZdlPv>
	    return;
 800766e:	e005      	b.n	800767c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	69b9      	ldr	r1, [r7, #24]
 8007674:	69f8      	ldr	r0, [r7, #28]
 8007676:	f000 f9e1 	bl	8007a3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f945 	bl	800791e <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007694:	4603      	mov	r3, r0
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f927 	bl	80078ea <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800769c:	4603      	mov	r3, r0
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	109b      	asrs	r3, r3, #2
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80076d8:	f7f8 fe22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d006      	beq.n	80076f0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f019 fcec 	bl	80210c4 <_Znwj>
 80076ec:	4603      	mov	r3, r0
 80076ee:	e006      	b.n	80076fe <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076f0:	2200      	movs	r2, #0
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f9b3 	bl	8007a60 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	bf00      	nop
      { return __a.allocate(__n); }
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f90a 	bl	8007934 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007720:	4603      	mov	r3, r0
      }
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
    }
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007748:	f7f8 fdea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f90a 	bl	800796e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800775a:	e003      	b.n	8007764 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f91d 	bl	800799e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007792:	f7f8 fdc5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	4413      	add	r3, r2
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f019 fc8c 	bl	80210c4 <_Znwj>
 80077ac:	4603      	mov	r3, r0
 80077ae:	e006      	b.n	80077be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80077b0:	2200      	movs	r2, #0
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f9b1 	bl	8007b1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 80077ba:	4603      	mov	r3, r0
 80077bc:	bf00      	nop
      { return __a.allocate(__n); }
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80077c6:	b5b0      	push	{r4, r5, r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
 80077d2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80077d4:	68b8      	ldr	r0, [r7, #8]
 80077d6:	f7f9 fd46 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fa f831 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077e0:	4602      	mov	r2, r0
 80077e2:	f107 0318 	add.w	r3, r7, #24
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fb f8c6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ee:	f107 0418 	add.w	r4, r7, #24
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f7f9 fd4d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4619      	mov	r1, r3
 80077fc:	2008      	movs	r0, #8
 80077fe:	f7f8 fd97 	bl	8000330 <_ZnwjPv>
 8007802:	4605      	mov	r5, r0
 8007804:	7f3b      	ldrb	r3, [r7, #28]
 8007806:	4622      	mov	r2, r4
 8007808:	7d39      	ldrb	r1, [r7, #20]
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f8ec 	bl	80079e8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8007810:	462b      	mov	r3, r5
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bdb0      	pop	{r4, r5, r7, pc}

0800781a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800781a:	b5b0      	push	{r4, r5, r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7f9 fd1c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800782e:	4604      	mov	r4, r0
 8007830:	6838      	ldr	r0, [r7, #0]
 8007832:	f7fa f806 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007836:	4605      	mov	r5, r0
 8007838:	6a38      	ldr	r0, [r7, #32]
 800783a:	f7f9 fd2a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800783e:	4603      	mov	r3, r0
 8007840:	462a      	mov	r2, r5
 8007842:	4621      	mov	r1, r4
 8007844:	68b8      	ldr	r0, [r7, #8]
 8007846:	f7ff ffbe 	bl	80077c6 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bdb0      	pop	{r4, r5, r7, pc}

08007852 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fc15 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007880:	68b8      	ldr	r0, [r7, #8]
 8007882:	f000 f8c5 	bl	8007a10 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007886:	4603      	mov	r3, r0
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7fa ff8d 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007894:	4603      	mov	r3, r0
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	605a      	str	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8b9 	bl	8007a26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
    }
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80078da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078f6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ffea 	bl	80078d2 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078fe:	4603      	mov	r3, r0
 8007900:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7fb fa6a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8007912:	4603      	mov	r3, r0
 8007914:	681b      	ldr	r3, [r3, #0]
      }
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007934:	b5b0      	push	{r4, r5, r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f8ab 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007948:	4604      	mov	r4, r0
 800794a:	68b8      	ldr	r0, [r7, #8]
 800794c:	f000 f8a7 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007950:	4605      	mov	r5, r0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8a3 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007958:	4602      	mov	r2, r0
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	4629      	mov	r1, r5
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f8a8 	bl	8007ab4 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007964:	4603      	mov	r3, r0
    }
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bdb0      	pop	{r4, r5, r7, pc}

0800796e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d00a      	beq.n	8007996 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f8b5 	bl	8007af0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007986:	4603      	mov	r3, r0
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f8bc 	bl	8007b06 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	607b      	str	r3, [r7, #4]
 8007994:	e7f0      	b.n	8007978 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80079c2:	68b8      	ldr	r0, [r7, #8]
 80079c4:	f7fb fabb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80079c8:	4603      	mov	r3, r0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb faac 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 80079d0:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
      { }
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079e8:	b5b0      	push	{r4, r5, r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	7239      	strb	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079f6:	463a      	mov	r2, r7
 80079f8:	f88d 4000 	strb.w	r4, [sp]
 80079fc:	462b      	mov	r3, r5
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff ffd7 	bl	80079b4 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bdb0      	pop	{r4, r5, r7, pc}

08007a10 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4619      	mov	r1, r3
 8007a54:	68b8      	ldr	r0, [r7, #8]
 8007a56:	f019 fb33 	bl	80210c0 <_ZdlPvj>
      }
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f877 	bl	8007b60 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bf8c      	ite	hi
 8007a7a:	2301      	movhi	r3, #1
 8007a7c:	2300      	movls	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a84:	f019 fbe5 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f019 fb19 	bl	80210c4 <_Znwj>
 8007a92:	4603      	mov	r3, r0
 8007a94:	bf00      	nop
      }
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	109b      	asrs	r3, r3, #2
 8007aca:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd06      	ble.n	8007ae0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f019 fc2c 	bl	8021338 <memmove>
      return __result + __count;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4413      	add	r3, r2
    }
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fe0b 	bl	800772a <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f825 	bl	8007b78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bf8c      	ite	hi
 8007b36:	2301      	movhi	r3, #1
 8007b38:	2300      	movls	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b40:	f019 fb87 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f019 fab8 	bl	80210c4 <_Znwj>
 8007b54:	4603      	mov	r3, r0
 8007b56:	bf00      	nop
      }
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b68:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	05555555 	.word	0x05555555

08007b94 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd96 	bl	80066d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <_Z41__static_initialization_and_destruction_0ii>:
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10a      	bne.n	8007bd6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d105      	bne.n	8007bd6 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bca:	480c      	ldr	r0, [pc, #48]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bcc:	f7fe fcb0 	bl	8006530 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007bd0:	480b      	ldr	r0, [pc, #44]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007bd2:	f7fe fcd3 	bl	800657c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d105      	bne.n	8007bf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007be8:	f7ff ffd4 	bl	8007b94 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bec:	4803      	ldr	r0, [pc, #12]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bee:	f000 f809 	bl	8007c04 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	24000110 	.word	0x24000110
 8007c00:	2400011c 	.word	0x2400011c

08007c04 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007c04:	b5b0      	push	{r4, r5, r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fb21 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c1c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4629      	mov	r1, r5
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7ff fb26 	bl	8007274 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fd17 	bl	800665e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bdb0      	pop	{r4, r5, r7, pc}

08007c3a <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c42:	2001      	movs	r0, #1
 8007c44:	f7ff ffb4 	bl	8007bb0 <_Z41__static_initialization_and_destruction_0ii>
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c52:	2000      	movs	r0, #0
 8007c54:	f7ff ffac 	bl	8007bb0 <_Z41__static_initialization_and_destruction_0ii>
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8b6 	bl	8007dd4 <_ZNSaIP10DigitalOutED1Ev>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f899 	bl	8007db4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ffeb 	bl	8007c72 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8c9 	bl	8007e46 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f8a7 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff ffeb 	bl	8007cbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4619      	mov	r1, r3
 8007d14:	4809      	ldr	r0, [pc, #36]	; (8007d3c <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007d16:	f000 f8b6 	bl	8007e86 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007d1a:	687c      	ldr	r4, [r7, #4]
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4807      	ldr	r0, [pc, #28]	; (8007d40 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007d22:	f000 f8c1 	bl	8007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007d26:	4603      	mov	r3, r0
 8007d28:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	719a      	strb	r2, [r3, #6]
}
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd90      	pop	{r4, r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	24000134 	.word	0x24000134
 8007d40:	24000140 	.word	0x24000140

08007d44 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d103      	bne.n	8007d5e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f808 	bl	8007d6c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d5c:	e002      	b.n	8007d64 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f816 	bl	8007d90 <_ZN10DigitalOut8turn_lowEv>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	889b      	ldrh	r3, [r3, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	4619      	mov	r1, r3
 8007d84:	f013 fe4e 	bl	801ba24 <HAL_GPIO_WritePin>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	889b      	ldrh	r3, [r3, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	4619      	mov	r1, r3
 8007da8:	f013 fe3c 	bl	801ba24 <HAL_GPIO_WritePin>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8d1 	bl	8007f64 <_ZNSaIP10DigitalOutEC1Ev>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f8d9 	bl	8007f7c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007e02:	461a      	mov	r2, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f8cd 	bl	8007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff ff24 	bl	8007c5a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8d0 	bl	8007fca <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7f8 fedb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fa86 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f8db 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f8b7 	bl	8007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff ff15 	bl	8007ca6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e90:	6838      	ldr	r0, [r7, #0]
 8007e92:	f000 f8d1 	bl	8008038 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e96:	4603      	mov	r3, r0
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8d7 	bl	800804e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b08b      	sub	sp, #44	; 0x2c
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8fc 	bl	80080b2 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f906 	bl	80080d0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	f107 020c 	add.w	r2, r7, #12
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f909 	bl	80080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d114      	bne.n	8007f08 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f917 	bl	8008112 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681c      	ldr	r4, [r3, #0]
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 f91d 	bl	800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4621      	mov	r1, r4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 ffec 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01b      	beq.n	8007f4a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007f12:	687c      	ldr	r4, [r7, #4]
 8007f14:	f107 0208 	add.w	r2, r7, #8
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f912 	bl	8008148 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007f24:	f107 0318 	add.w	r3, r7, #24
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 ffe8 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007f30:	f107 0218 	add.w	r2, r7, #24
 8007f34:	f107 031c 	add.w	r3, r7, #28
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007f3e:	6979      	ldr	r1, [r7, #20]
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 f911 	bl	8008168 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f46:	4603      	mov	r3, r0
 8007f48:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f8ec 	bl	800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	3304      	adds	r3, #4
      }
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}
 8007f60:	08021870 	.word	0x08021870

08007f64 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f939 	bl	80081e4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	609a      	str	r2, [r3, #8]
	{ }
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
	if (__p)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f91c 	bl	80081fa <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f930 	bl	8008238 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d012      	beq.n	8008018 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f000 f92b 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fff0 	bl	8007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8008002:	6838      	ldr	r0, [r7, #0]
 8008004:	f000 f92f 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008008:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f936 	bl	800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008016:	e7e9      	b.n	8007fec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800804e:	b5b0      	push	{r4, r5, r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	429a      	cmp	r2, r3
 8008062:	d011      	beq.n	8008088 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008064:	687c      	ldr	r4, [r7, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685d      	ldr	r5, [r3, #4]
 800806a:	6838      	ldr	r0, [r7, #0]
 800806c:	f000 f918 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	4629      	mov	r1, r5
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f932 	bl	80082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	e00c      	b.n	80080a2 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f93b 	bl	8008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800808e:	4604      	mov	r4, r0
 8008090:	6838      	ldr	r0, [r7, #0]
 8008092:	f000 f905 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	4621      	mov	r1, r4
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f943 	bl	8008328 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9bc 	bl	8008420 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 80080a8:	4603      	mov	r3, r0
      }
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bdb0      	pop	{r4, r5, r7, pc}

080080b2 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f9c8 	bl	8008456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f9d2 	bl	8008484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8008112:	b590      	push	{r4, r7, lr}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f9c2 	bl	80084a6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8008122:	bf00      	nop
 8008124:	4620      	mov	r0, r4
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bd90      	pop	{r4, r7, pc}

0800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f9bf 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800813e:	4603      	mov	r3, r0
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f9 f875 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800817c:	4604      	mov	r4, r0
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f7f9 fb5f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008184:	4605      	mov	r5, r0
 8008186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008188:	f7f9 f883 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800818c:	4603      	mov	r3, r0
 800818e:	462a      	mov	r2, r5
 8008190:	4621      	mov	r1, r4
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f9a0 	bl	80084d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008198:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800819a:	69f8      	ldr	r0, [r7, #28]
 800819c:	f000 faee 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f107 0010 	add.w	r0, r7, #16
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	68f9      	ldr	r1, [r7, #12]
 80081aa:	f000 f9b8 	bl	800851e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80081b4:	6939      	ldr	r1, [r7, #16]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 faf1 	bl	80087a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e00b      	b.n	80081dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f859 	bl	800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	4611      	mov	r1, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fb23 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80081da:	69bb      	ldr	r3, [r7, #24]
      }
 80081dc:	4618      	mov	r0, r3
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bdb0      	pop	{r4, r5, r7, pc}

080081e4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008212:	f7f8 f885 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800821c:	69b8      	ldr	r0, [r7, #24]
 800821e:	f018 ff4d 	bl	80210bc <_ZdlPv>
	    return;
 8008222:	e005      	b.n	8008230 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	69b9      	ldr	r1, [r7, #24]
 8008228:	69f8      	ldr	r0, [r7, #28]
 800822a:	f000 fdac 	bl	8008d86 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fad7 	bl	800883e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fae8 	bl	8008868 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80082b6:	b590      	push	{r4, r7, lr}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80082c0:	6838      	ldr	r0, [r7, #0]
 80082c2:	f7ff ffed 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082c6:	4603      	mov	r3, r0
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4619      	mov	r1, r3
 80082ce:	2004      	movs	r0, #4
 80082d0:	f7f8 f82e 	bl	8000330 <_ZnwjPv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	601c      	str	r4, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd90      	pop	{r4, r7, pc}

080082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ffd7 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4619      	mov	r1, r3
 80082f6:	68b8      	ldr	r0, [r7, #8]
 80082f8:	f7ff ffdd 	bl	80082b6 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fab8 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b08c      	sub	sp, #48	; 0x30
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008334:	4a39      	ldr	r2, [pc, #228]	; (800841c <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8008336:	2101      	movs	r1, #1
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fab7 	bl	80088ac <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 800833e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 faf4 	bl	800893a <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008352:	4603      	mov	r3, r0
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	f107 0214 	add.w	r2, r7, #20
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fafa 	bl	800895a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008366:	4603      	mov	r3, r0
 8008368:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fb08 	bl	8008984 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008374:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800837a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	18d5      	adds	r5, r2, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff8b 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	4629      	mov	r1, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff ffa5 	bl	80082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fb18 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fb1d 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80083b0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	4621      	mov	r1, r4
 80083b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b8:	f000 faf8 	bl	80089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083bc:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3304      	adds	r3, #4
 80083c2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fb03 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 80083ce:	4603      	mov	r3, r0
 80083d0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb08 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80083da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fae3 	bl	80089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083e6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083e8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083f4:	461a      	mov	r2, r3
 80083f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f8:	f7ff fdd4 	bl	8007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	609a      	str	r2, [r3, #8]
    }
 8008414:	bf00      	nop
 8008416:	3730      	adds	r7, #48	; 0x30
 8008418:	46bd      	mov	sp, r7
 800841a:	bdb0      	pop	{r4, r5, r7, pc}
 800841c:	08021740 	.word	0x08021740

08008420 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ff6b 	bl	8008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800842e:	4603      	mov	r3, r0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	2101      	movs	r1, #1
 8008438:	4618      	mov	r0, r3
 800843a:	f000 faef 	bl	8008a1c <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 800843e:	4603      	mov	r3, r0
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb01 	bl	8008a4e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800844c:	4603      	mov	r3, r0
      }
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008456:	b590      	push	{r4, r7, lr}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fddd 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008466:	4604      	mov	r4, r0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fafc 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800846e:	4602      	mov	r2, r0
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	4621      	mov	r1, r4
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb02 	bl	8008a7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800847a:	4603      	mov	r3, r0
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f9c2 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80084ae:	bf00      	nop
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3310      	adds	r3, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fb0b 	bl	8008ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80084d8:	b5b0      	push	{r4, r5, r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fb08 	bl	8008afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ec:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	f7f8 feb9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084f4:	4604      	mov	r4, r0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7f9 f9a3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084fc:	4605      	mov	r5, r0
 80084fe:	6838      	ldr	r0, [r7, #0]
 8008500:	f7f8 fec7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008504:	4603      	mov	r3, r0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462b      	mov	r3, r5
 800850a:	4622      	mov	r2, r4
 800850c:	6979      	ldr	r1, [r7, #20]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fb05 	bl	8008b1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8008514:	697b      	ldr	r3, [r7, #20]
	}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bdb0      	pop	{r4, r5, r7, pc}

0800851e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800851e:	b5b0      	push	{r4, r5, r7, lr}
 8008520:	b08c      	sub	sp, #48	; 0x30
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fb22 	bl	8008b78 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 8008534:	4603      	mov	r3, r0
 8008536:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8008538:	69bc      	ldr	r4, [r7, #24]
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f000 fa93 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008540:	4603      	mov	r3, r0
 8008542:	429c      	cmp	r4, r3
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d032      	beq.n	80085b6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f000 fb22 	bl	8008b9a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008556:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008558:	2b00      	cmp	r3, #0
 800855a:	d015      	beq.n	8008588 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800855c:	68bc      	ldr	r4, [r7, #8]
 800855e:	68b8      	ldr	r0, [r7, #8]
 8008560:	f000 fb27 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008564:	4603      	mov	r3, r0
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fb2e 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800856e:	4603      	mov	r3, r0
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	4620      	mov	r0, r4
 800857a:	f7f8 fcae 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008588:	2300      	movs	r3, #0
	  if (size() > 0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	68b8      	ldr	r0, [r7, #8]
 8008594:	f000 fb0d 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008598:	4602      	mov	r2, r0
 800859a:	f107 031c 	add.w	r3, r7, #28
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7f9 fc81 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80085a6:	e0e5      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb17 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80085b4:	e0de      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80085b6:	68bc      	ldr	r4, [r7, #8]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681d      	ldr	r5, [r3, #0]
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fb03 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085c4:	4603      	mov	r3, r0
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	4629      	mov	r1, r5
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7f8 fc84 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d059      	beq.n	800868c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80085dc:	69bc      	ldr	r4, [r7, #24]
 80085de:	68b8      	ldr	r0, [r7, #8]
 80085e0:	f000 fb89 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085e4:	4603      	mov	r3, r0
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429c      	cmp	r4, r3
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085f6:	68b8      	ldr	r0, [r7, #8]
 80085f8:	f000 fb7d 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085fc:	4604      	mov	r4, r0
 80085fe:	68b8      	ldr	r0, [r7, #8]
 8008600:	f000 fb79 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	4621      	mov	r1, r4
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7f9 fcf8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008610:	e0b0      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8008612:	68bc      	ldr	r4, [r7, #8]
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fb78 	bl	8008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 800861e:	4603      	mov	r3, r0
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fad1 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008628:	4603      	mov	r3, r0
 800862a:	6819      	ldr	r1, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f7f8 fc51 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01f      	beq.n	800867e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff fe04 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008656:	2300      	movs	r3, #0
 8008658:	623b      	str	r3, [r7, #32]
 800865a:	f107 0214 	add.w	r2, r7, #20
 800865e:	f107 0320 	add.w	r3, r7, #32
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7f9 fc1f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800866a:	e083      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800866c:	f107 0218 	add.w	r2, r7, #24
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7f9 fcc2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800867c:	e07a      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 faac 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800868a:	e073      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800868c:	68bc      	ldr	r4, [r7, #8]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fa9a 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008696:	4603      	mov	r3, r0
 8008698:	6819      	ldr	r1, [r3, #0]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	4620      	mov	r0, r4
 80086a2:	f7f8 fc1a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d059      	beq.n	8008760 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80086b0:	69bc      	ldr	r4, [r7, #24]
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f000 fa7d 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80086b8:	4603      	mov	r3, r0
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429c      	cmp	r4, r3
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	f000 fa6f 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80086d4:	4602      	mov	r2, r0
 80086d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7f9 fbe3 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086e2:	e047      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086e4:	68bc      	ldr	r4, [r7, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	f107 0310 	add.w	r3, r7, #16
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fb1e 	bl	8008d30 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086f4:	4603      	mov	r3, r0
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fa66 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086fe:	4603      	mov	r3, r0
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	4629      	mov	r1, r5
 8008706:	4620      	mov	r0, r4
 8008708:	f7f8 fbe7 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01f      	beq.n	8008752 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fd9a 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800872a:	2300      	movs	r3, #0
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
 800872e:	f107 0218 	add.w	r2, r7, #24
 8008732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7f9 fbb5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800873e:	e019      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008740:	f107 0210 	add.w	r2, r7, #16
 8008744:	f107 0310 	add.w	r3, r7, #16
 8008748:	4619      	mov	r1, r3
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7f9 fc58 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008750:	e010      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fa42 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800875e:	e009      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008760:	2300      	movs	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008764:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008768:	f107 0318 	add.w	r3, r7, #24
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7f9 fc81 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	3730      	adds	r7, #48	; 0x30
 8008778:	46bd      	mov	sp, r7
 800877a:	bdb0      	pop	{r4, r5, r7, pc}

0800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fae4 	bl	8008d52 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800878a:	4602      	mov	r2, r0
 800878c:	f107 030c 	add.w	r3, r7, #12
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f000 faeb 	bl	8008d6e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008798:	4603      	mov	r3, r0
      }
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80087a2:	b5b0      	push	{r4, r5, r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d119      	bne.n	80087ea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f955 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d012      	beq.n	80087ea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 80087c4:	68fc      	ldr	r4, [r7, #12]
 80087c6:	6838      	ldr	r0, [r7, #0]
 80087c8:	f7ff ffd8 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80087cc:	4603      	mov	r3, r0
 80087ce:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9fa 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80087d6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4629      	mov	r1, r5
 80087de:	4620      	mov	r0, r4
 80087e0:	f7f8 fb7b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ee:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087f0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087f6:	7df8      	ldrb	r0, [r7, #23]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	f018 fcce 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800880a:	f107 0310 	add.w	r3, r7, #16
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 f805 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008816:	693b      	ldr	r3, [r7, #16]
    }
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 faab 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800884e:	4604      	mov	r4, r0
 8008850:	6838      	ldr	r0, [r7, #0]
 8008852:	f7ff fe33 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008856:	4603      	mov	r3, r0
 8008858:	4619      	mov	r1, r3
 800885a:	4620      	mov	r0, r4
 800885c:	f000 faad 	bl	8008dba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bd90      	pop	{r4, r7, pc}

08008868 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa96 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008878:	4603      	mov	r3, r0
 800887a:	2201      	movs	r2, #1
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 faa7 	bl	8008dd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 faa9 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088be:	4604      	mov	r4, r0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fab6 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088c6:	4603      	mov	r3, r0
 80088c8:	1ae2      	subs	r2, r4, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	bf34      	ite	cc
 80088d0:	2301      	movcc	r3, #1
 80088d2:	2300      	movcs	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f018 fcbc 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 faa6 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088e6:	4604      	mov	r4, r0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 faa2 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ee:	4603      	mov	r3, r0
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	f107 0208 	add.w	r2, r7, #8
 80088f6:	f107 0310 	add.w	r3, r7, #16
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f9 ffa8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8008902:	4603      	mov	r3, r0
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4423      	add	r3, r4
 8008908:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fa91 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008910:	4602      	mov	r2, r0
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	4293      	cmp	r3, r2
 8008916:	d306      	bcc.n	8008926 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fa79 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800891e:	4602      	mov	r2, r0
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4293      	cmp	r3, r2
 8008924:	d904      	bls.n	8008930 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fa72 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800892c:	4603      	mov	r3, r0
 800892e:	e000      	b.n	8008932 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8008930:	697b      	ldr	r3, [r7, #20]
      }
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}

0800893a <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff ff9e 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800895a:	b590      	push	{r4, r7, lr}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f835 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800896a:	4603      	mov	r3, r0
 800896c:	681c      	ldr	r4, [r3, #0]
 800896e:	6838      	ldr	r0, [r7, #0]
 8008970:	f000 f830 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008974:	4603      	mov	r3, r0
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	1ae3      	subs	r3, r4, r3
 800897a:	109b      	asrs	r3, r3, #2
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fa5a 	bl	8008e52 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800899e:	4603      	mov	r3, r0
 80089a0:	e000      	b.n	80089a4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 80089a2:	2300      	movs	r3, #0
      }
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80089ac:	b590      	push	{r4, r7, lr}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80089ba:	f88d 4000 	strb.w	r4, [sp]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fa64 	bl	8008e92 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80089ca:	4603      	mov	r3, r0
      }
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd90      	pop	{r4, r7, pc}

080089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fa5b 	bl	8008eca <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	425b      	negs	r3, r3
 8008a30:	4413      	add	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	f107 020c 	add.w	r2, r7, #12
 8008a38:	f107 0308 	add.w	r3, r7, #8
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff ff24 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a7e:	b590      	push	{r4, r7, lr}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01d      	beq.n	8008ace <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a92:	68fc      	ldr	r4, [r7, #12]
 8008a94:	68b8      	ldr	r0, [r7, #8]
 8008a96:	f7ff fe71 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6819      	ldr	r1, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7f8 fa18 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f083 0301 	eor.w	r3, r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d006      	beq.n	8008ac4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f7ff fbd3 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008ac0:	60b8      	str	r0, [r7, #8]
 8008ac2:	e7e3      	b.n	8008a8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f7ff fbc2 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008aca:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008acc:	e7de      	b.n	8008a8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fea3 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008ada:	697b      	ldr	r3, [r7, #20]
    }
 8008adc:	4618      	mov	r0, r3
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa02 	bl	8008ef6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f94d 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f9fc 	bl	8008f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4619      	mov	r1, r3
 8008b32:	2018      	movs	r0, #24
 8008b34:	f7f7 fbfc 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f933 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008b3e:	4604      	mov	r4, r0
 8008b40:	68b8      	ldr	r0, [r7, #8]
 8008b42:	f7ff fcbb 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b46:	4605      	mov	r5, r0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7f8 fb8c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	6838      	ldr	r0, [r7, #0]
 8008b52:	f7f8 fe76 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b56:	4680      	mov	r8, r0
 8008b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5a:	f7f8 fb9a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4643      	mov	r3, r8
 8008b64:	4632      	mov	r2, r6
 8008b66:	4629      	mov	r1, r5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fa1c 	bl	8008fa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b78 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fe48 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3310      	adds	r3, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fdd2 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008be2:	b5b0      	push	{r4, r5, r7, lr}
 8008be4:	b08a      	sub	sp, #40	; 0x28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bee:	68b8      	ldr	r0, [r7, #8]
 8008bf0:	f7ff fa16 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bf8:	68b8      	ldr	r0, [r7, #8]
 8008bfa:	f7ff ff34 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d023      	beq.n	8008c56 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008c12:	68bc      	ldr	r4, [r7, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681d      	ldr	r5, [r3, #0]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fdae 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008c20:	4603      	mov	r3, r0
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7f8 f956 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fb11 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c44:	4603      	mov	r3, r0
 8008c46:	e004      	b.n	8008c52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff faff 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c50:	4603      	mov	r3, r0
 8008c52:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c54:	e7d8      	b.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	f107 0310 	add.w	r3, r7, #16
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff fdde 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01d      	beq.n	8008ca8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c6c:	68b8      	ldr	r0, [r7, #8]
 8008c6e:	f000 f9b6 	bl	8008fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c72:	4603      	mov	r3, r0
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	f107 021c 	add.w	r2, r7, #28
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fa32 	bl	80080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c8c:	f107 0214 	add.w	r2, r7, #20
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 f9b2 	bl	8009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c9c:	e027      	b.n	8008cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f833 	bl	8008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008ca8:	68bc      	ldr	r4, [r7, #8]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff ff8c 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6819      	ldr	r1, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7f8 f90c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008cc8:	f107 0214 	add.w	r2, r7, #20
 8008ccc:	f107 0318 	add.w	r3, r7, #24
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f994 	bl	8009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008cd8:	e009      	b.n	8008cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	f107 0220 	add.w	r2, r7, #32
 8008ce2:	f107 0310 	add.w	r3, r7, #16
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7f9 f9c4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	3728      	adds	r7, #40	; 0x28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bdb0      	pop	{r4, r5, r7, pc}

08008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	330c      	adds	r3, #12
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f018 fa3c 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008d20:	4602      	mov	r2, r0
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	601a      	str	r2, [r3, #0]
	return *this;
 8008d26:	687b      	ldr	r3, [r7, #4]
      }
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f018 fa29 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d42:	4602      	mov	r2, r0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]
	return *this;
 8008d48:	687b      	ldr	r3, [r7, #4]
      }
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f967 	bl	8009032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4619      	mov	r1, r3
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f018 f991 	bl	80210c0 <_ZdlPvj>
      }
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008dc4:	6838      	ldr	r0, [r7, #0]
 8008dc6:	f000 f940 	bl	800904a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	61fb      	str	r3, [r7, #28]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008dea:	f7f7 fa99 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008df4:	69b8      	ldr	r0, [r7, #24]
 8008df6:	f018 f961 	bl	80210bc <_ZdlPv>
	    return;
 8008dfa:	e005      	b.n	8008e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	69b9      	ldr	r1, [r7, #24]
 8008e00:	69f8      	ldr	r0, [r7, #28]
 8008e02:	f000 f9e1 	bl	80091c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f945 	bl	80090aa <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008e20:	4603      	mov	r3, r0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f927 	bl	8009076 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	109b      	asrs	r3, r3, #2
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e64:	f7f7 fa5c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d006      	beq.n	8008e7c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f018 f926 	bl	80210c4 <_Znwj>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	e006      	b.n	8008e8a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f9b3 	bl	80091ec <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e86:	4603      	mov	r3, r0
 8008e88:	bf00      	nop
      { return __a.allocate(__n); }
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f90a 	bl	80090c0 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008eac:	4603      	mov	r3, r0
      }
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
    }
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008ed4:	f7f7 fa24 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f90a 	bl	80090fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ee6:	e003      	b.n	8008ef0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f91d 	bl	800912a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008f1e:	f7f7 f9ff 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f018 f8c6 	bl	80210c4 <_Znwj>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	e006      	b.n	8008f4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 f9b1 	bl	80092a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f46:	4603      	mov	r3, r0
 8008f48:	bf00      	nop
      { return __a.allocate(__n); }
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f52:	b5b0      	push	{r4, r5, r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f60:	68b8      	ldr	r0, [r7, #8]
 8008f62:	f7f8 f980 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f8 fc6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	f107 0318 	add.w	r3, r7, #24
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f9 fd00 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f7a:	f107 0418 	add.w	r4, r7, #24
 8008f7e:	6838      	ldr	r0, [r7, #0]
 8008f80:	f7f8 f987 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4619      	mov	r1, r3
 8008f88:	2008      	movs	r0, #8
 8008f8a:	f7f7 f9d1 	bl	8000330 <_ZnwjPv>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	7f3b      	ldrb	r3, [r7, #28]
 8008f92:	4622      	mov	r2, r4
 8008f94:	7d39      	ldrb	r1, [r7, #20]
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 f8ec 	bl	8009174 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bdb0      	pop	{r4, r5, r7, pc}

08008fa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008fa6:	b5b0      	push	{r4, r5, r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7f8 f956 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	6838      	ldr	r0, [r7, #0]
 8008fbe:	f7f8 fc40 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	6a38      	ldr	r0, [r7, #32]
 8008fc6:	f7f8 f964 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4621      	mov	r1, r4
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f7ff ffbe 	bl	8008f52 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bdb0      	pop	{r4, r5, r7, pc}

08008fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fc15 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f000 f8c5 	bl	800919c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009012:	4603      	mov	r3, r0
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7f9 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8009020:	4603      	mov	r3, r0
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8b9 	bl	80091b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009040:	4603      	mov	r3, r0
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
    }
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009066:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800907e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009082:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ffea 	bl	800905e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800908a:	4603      	mov	r3, r0
 800908c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800908e:	f107 0208 	add.w	r2, r7, #8
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f9 fea4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800909e:	4603      	mov	r3, r0
 80090a0:	681b      	ldr	r3, [r3, #0]
      }
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80090c0:	b5b0      	push	{r4, r5, r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f8ab 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090d4:	4604      	mov	r4, r0
 80090d6:	68b8      	ldr	r0, [r7, #8]
 80090d8:	f000 f8a7 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090dc:	4605      	mov	r5, r0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8a3 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090e4:	4602      	mov	r2, r0
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	4629      	mov	r1, r5
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f8a8 	bl	8009240 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090f0:	4603      	mov	r3, r0
    }
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bdb0      	pop	{r4, r5, r7, pc}

080090fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d00a      	beq.n	8009122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8b5 	bl	800927c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 8009112:	4603      	mov	r3, r0
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f8bc 	bl	8009292 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e7f0      	b.n	8009104 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f7f9 fef5 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009154:	4603      	mov	r3, r0
 8009156:	4618      	mov	r0, r3
 8009158:	f7f9 fee6 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800915c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	605a      	str	r2, [r3, #4]
      { }
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009174:	b5b0      	push	{r4, r5, r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	7239      	strb	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009182:	463a      	mov	r2, r7
 8009184:	f88d 4000 	strb.w	r4, [sp]
 8009188:	462b      	mov	r3, r5
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff ffd7 	bl	8009140 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bdb0      	pop	{r4, r5, r7, pc}

0800919c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4413      	add	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4619      	mov	r1, r3
 80091e0:	68b8      	ldr	r0, [r7, #8]
 80091e2:	f017 ff6d 	bl	80210c0 <_ZdlPvj>
      }
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f877 	bl	80092ec <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091fe:	4602      	mov	r2, r0
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4293      	cmp	r3, r2
 8009204:	bf8c      	ite	hi
 8009206:	2301      	movhi	r3, #1
 8009208:	2300      	movls	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009210:	f018 f81f 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f017 ff53 	bl	80210c4 <_Znwj>
 800921e:	4603      	mov	r3, r0
 8009220:	bf00      	nop
      }
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	109b      	asrs	r3, r3, #2
 8009256:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd06      	ble.n	800926c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	461a      	mov	r2, r3
 8009264:	68f9      	ldr	r1, [r7, #12]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f018 f866 	bl	8021338 <memmove>
      return __result + __count;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	4413      	add	r3, r2
    }
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fe0b 	bl	8008eb6 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f825 	bl	8009304 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4293      	cmp	r3, r2
 80092c0:	bf8c      	ite	hi
 80092c2:	2301      	movhi	r3, #1
 80092c4:	2300      	movls	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80092cc:	f017 ffc1 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	4413      	add	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4618      	mov	r0, r3
 80092dc:	f017 fef2 	bl	80210c4 <_Znwj>
 80092e0:	4603      	mov	r3, r0
 80092e2:	bf00      	nop
      }
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	05555555 	.word	0x05555555

08009320 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fd96 	bl	8007e5c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <_Z41__static_initialization_and_destruction_0ii>:
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10a      	bne.n	8009362 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009352:	4293      	cmp	r3, r2
 8009354:	d105      	bne.n	8009362 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009356:	480c      	ldr	r0, [pc, #48]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009358:	f7fe fc98 	bl	8007c8c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800935c:	480b      	ldr	r0, [pc, #44]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800935e:	f7fe fcbb 	bl	8007cd8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800936e:	4293      	cmp	r3, r2
 8009370:	d105      	bne.n	800937e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009372:	4806      	ldr	r0, [pc, #24]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009374:	f7ff ffd4 	bl	8009320 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009378:	4803      	ldr	r0, [pc, #12]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800937a:	f000 f809 	bl	8009390 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	24000134 	.word	0x24000134
 800938c:	24000140 	.word	0x24000140

08009390 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009390:	b5b0      	push	{r4, r5, r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681c      	ldr	r4, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fb21 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80093a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80093aa:	461a      	mov	r2, r3
 80093ac:	4629      	mov	r1, r5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fb26 	bl	8008a00 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd17 	bl	8007dea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bdb0      	pop	{r4, r5, r7, pc}

080093c6 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 80093c6:	b580      	push	{r7, lr}
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7ff ffb4 	bl	800933c <_Z41__static_initialization_and_destruction_0ii>
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 80093d6:	b580      	push	{r7, lr}
 80093d8:	af00      	add	r7, sp, #0
 80093da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093de:	2000      	movs	r0, #0
 80093e0:	f7ff ffac 	bl	800933c <_Z41__static_initialization_and_destruction_0ii>
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa98 	bl	8009924 <_ZNSaIP12InputCaptureED1Ev>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fa7b 	bl	8009904 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ffeb 	bl	80093fe <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 faab 	bl	8009996 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fa89 	bl	800996c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff ffeb 	bl	800944a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <_ZN13MovingAverageILm3EfEC1Ev>:
#include "Mini-STLIB/DataStructures/RingBuffer.hpp"
#include <stdint.h>
#include <cmath>

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 faa4 	bl	80099d6 <_ZN10RingBufferILm3EfEC1Ev>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff ffe8 	bl	800947e <_ZN13MovingAverageILm3EfEC1Ev>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	331c      	adds	r3, #28
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff ffe3 	bl	800947e <_ZN13MovingAverageILm3EfEC1Ev>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295
 80094be:	639a      	str	r2, [r3, #56]	; 0x38
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	641a      	str	r2, [r3, #64]	; 0x40
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	645a      	str	r2, [r3, #68]	; 0x44
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	649a      	str	r2, [r3, #72]	; 0x48
	all_input_captures.push_back(this);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	4619      	mov	r1, r3
 80094e4:	4809      	ldr	r0, [pc, #36]	; (800950c <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x74>)
 80094e6:	f000 fa9c 	bl	8009a22 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 80094ea:	68fc      	ldr	r4, [r7, #12]
 80094ec:	463b      	mov	r3, r7
 80094ee:	4619      	mov	r1, r3
 80094f0:	4807      	ldr	r0, [pc, #28]	; (8009510 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x78>)
 80094f2:	f000 faa7 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80094f6:	4603      	mov	r3, r0
 80094f8:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2203      	movs	r2, #3
 80094fe:	719a      	strb	r2, [r3, #6]
}
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	bf00      	nop
 800950c:	24000158 	.word	0x24000158
 8009510:	24000164 	.word	0x24000164

08009514 <_ZN12InputCapture19absolute_differenceEmm>:

uint32_t InputCapture::absolute_difference(uint32_t a, uint32_t b){
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
	int result = a - b;
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	617b      	str	r3, [r7, #20]
	if(result < 0)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2b00      	cmp	r3, #0
 800952c:	da09      	bge.n	8009542 <_ZN12InputCapture19absolute_differenceEmm+0x2e>
		result = a + (timer->Instance->ARR - b) + 1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	1ad2      	subs	r2, r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	3301      	adds	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
	return result;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <_ZN12InputCapture17channel_is_activeEv>:

bool InputCapture::channel_is_active(){
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
	if(channel == TIM_CHANNEL_1)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <_ZN12InputCapture17channel_is_activeEv+0x22>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	7f1b      	ldrb	r3, [r3, #28]
 8009566:	2b01      	cmp	r3, #1
 8009568:	bf0c      	ite	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	2300      	movne	r3, #0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	e027      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_2)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009576:	2b04      	cmp	r3, #4
 8009578:	d108      	bne.n	800958c <_ZN12InputCapture17channel_is_activeEv+0x3c>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	7f1b      	ldrb	r3, [r3, #28]
 8009580:	2b02      	cmp	r3, #2
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	e01a      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_3)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009590:	2b08      	cmp	r3, #8
 8009592:	d108      	bne.n	80095a6 <_ZN12InputCapture17channel_is_activeEv+0x56>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_3;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	7f1b      	ldrb	r3, [r3, #28]
 800959a:	2b04      	cmp	r3, #4
 800959c:	bf0c      	ite	eq
 800959e:	2301      	moveq	r3, #1
 80095a0:	2300      	movne	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	e00d      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_4)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	2b0c      	cmp	r3, #12
 80095ac:	d108      	bne.n	80095c0 <_ZN12InputCapture17channel_is_activeEv+0x70>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	7f1b      	ldrb	r3, [r3, #28]
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	bf0c      	ite	eq
 80095b8:	2301      	moveq	r3, #1
 80095ba:	2300      	movne	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	e000      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	return false;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <_ZN12InputCapture9interruptEv>:

float InputCapture::interrupt() {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	if(channel_is_active()){
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff ffb9 	bl	8009550 <_ZN12InputCapture17channel_is_activeEv>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80c6 	beq.w	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
		GPIO_PinState state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	889b      	ldrh	r3, [r3, #4]
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f012 f9fd 	bl	801b9f4 <HAL_GPIO_ReadPin>
 80095fa:	4603      	mov	r3, r0
 80095fc:	77fb      	strb	r3, [r7, #31]

		// Capture first rising edge
		if(rising_edge == -1 && falling_edge == -1 && state ==  GPIO_PIN_SET){
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d116      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d111      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d10e      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
			rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f016 fe18 	bl	8020258 <HAL_TIM_ReadCapturedValue>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
			return frequency;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009634:	e09f      	b.n	8009776 <_ZN12InputCapture9interruptEv+0x1a6>
		}

		// Capture falling edge
		if(rising_edge != -1 && falling_edge == -1 && state ==  GPIO_PIN_RESET){
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d016      	beq.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d111      	bne.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
 800964a:	7ffb      	ldrb	r3, [r7, #31]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10e      	bne.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
			falling_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f016 fdfc 	bl	8020258 <HAL_TIM_ReadCapturedValue>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	63da      	str	r2, [r3, #60]	; 0x3c
			return frequency;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	e083      	b.n	8009776 <_ZN12InputCapture9interruptEv+0x1a6>
		}

		// Capture second rising edge
		if(rising_edge != -1 && falling_edge != -1 && state ==  GPIO_PIN_SET){
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	d07c      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d077      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 8009682:	7ffb      	ldrb	r3, [r7, #31]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d174      	bne.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
			uint32_t duty_count = absolute_difference(falling_edge, rising_edge);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968c:	4619      	mov	r1, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	461a      	mov	r2, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff3d 	bl	8009514 <_ZN12InputCapture19absolute_differenceEmm>
 800969a:	61b8      	str	r0, [r7, #24]
			uint32_t new_rising_edge	= HAL_TIM_ReadCapturedValue(timer, channel);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f016 fdd6 	bl	8020258 <HAL_TIM_ReadCapturedValue>
 80096ac:	6178      	str	r0, [r7, #20]
			uint32_t freq_count = absolute_difference(new_rising_edge, rising_edge);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	461a      	mov	r2, r3
 80096b4:	6979      	ldr	r1, [r7, #20]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff2c 	bl	8009514 <_ZN12InputCapture19absolute_differenceEmm>
 80096bc:	6138      	str	r0, [r7, #16]

			if(freq_count != 0 && duty_count != 0){
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d056      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d053      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
				float new_duty = ((float) duty_count) / freq_count * 100;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009784 <_ZN12InputCapture9interruptEv+0x1b4>
 80096e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096ea:	edc7 7a03 	vstr	s15, [r7, #12]
				float new_freq = ((float) 277777777) / freq_count;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096f8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009788 <_ZN12InputCapture9interruptEv+0x1b8>
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	edc7 7a02 	vstr	s15, [r7, #8]

				DutyAverage.add_value(new_duty);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	ed97 0a03 	vldr	s0, [r7, #12]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 f9f8 	bl	8009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>
				FrequencyAverage.add_value(new_freq);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	331c      	adds	r3, #28
 8009714:	ed97 0a02 	vldr	s0, [r7, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f9f1 	bl	8009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>
				frequency		= FrequencyAverage.current_value;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	64da      	str	r2, [r3, #76]	; 0x4c
				duty			= DutyAverage.current_value;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	651a      	str	r2, [r3, #80]	; 0x50

				frequency_i		= frequency * 10000;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009734:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800978c <_ZN12InputCapture9interruptEv+0x1bc>
 8009738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800973c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009740:	ee17 2a90 	vmov	r2, s15
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	655a      	str	r2, [r3, #84]	; 0x54
				duty_i			= duty * 10000;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800974e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800978c <_ZN12InputCapture9interruptEv+0x1bc>
 8009752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975a:	ee17 2a90 	vmov	r2, s15
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	659a      	str	r2, [r3, #88]	; 0x58

				rising_edge		= -1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
				falling_edge	= -1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
	}

	return frequency;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eeb0 0a67 	vmov.f32	s0, s15
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	42c80000 	.word	0x42c80000
 8009788:	4d84746c 	.word	0x4d84746c
 800978c:	461c4000 	.word	0x461c4000

08009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80097a6:	b590      	push	{r4, r7, lr}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff ffed 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	681c      	ldr	r4, [r3, #0]
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f7ff ffe8 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80097c0:	4603      	mov	r3, r0
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf0c      	ite	eq
 80097c8:	2301      	moveq	r3, #1
 80097ca:	2300      	movne	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd90      	pop	{r4, r7, pc}

080097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
	++_M_current;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1d1a      	adds	r2, r3, #4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]
	return *this;
 80097e8:	687b      	ldr	r3, [r7, #4]
      }
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 8009816:	4b15      	ldr	r3, [pc, #84]	; (800986c <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f9a6 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009820:	4603      	mov	r3, r0
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f9b1 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800982a:	4603      	mov	r3, r0
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	463a      	mov	r2, r7
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff ffb6 	bl	80097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800983a:	4603      	mov	r3, r0
 800983c:	f083 0301 	eor.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00e      	beq.n	8009864 <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 8009846:	1d3b      	adds	r3, r7, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff ffd4 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800984e:	4603      	mov	r3, r0
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f000 f845 	bl	80098e4 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff ffba 	bl	80097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009862:	e7e4      	b.n	800982e <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	24000158 	.word	0x24000158

08009870 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x70>)
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	6978      	ldr	r0, [r7, #20]
 800987e:	f000 f975 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009882:	4603      	mov	r3, r0
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f000 f980 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800988c:	4603      	mov	r3, r0
 800988e:	60bb      	str	r3, [r7, #8]
 8009890:	f107 0208 	add.w	r2, r7, #8
 8009894:	f107 030c 	add.w	r3, r7, #12
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ff83 	bl	80097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f083 0301 	eor.w	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d015      	beq.n	80098d8 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x68>
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ffa0 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d102      	bne.n	80098cc <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5c>
			input_capture->interrupt();
 80098c6:	6938      	ldr	r0, [r7, #16]
 80098c8:	f7ff fe82 	bl	80095d0 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff80 	bl	80097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80098d6:	e7db      	b.n	8009890 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80098d8:	bf00      	nop
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	24000158 	.word	0x24000158

080098e4 <_ZN12InputCapture5startEv>:
void InputCapture::reset(){
	frequency = 0;
	duty = 0;
}

void InputCapture::start(){
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, channel);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f015 ff88 	bl	801f80c <HAL_TIM_IC_Start_IT>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f94e 	bl	8009bae <_ZNSaIP12InputCaptureEC1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f956 	bl	8009bc6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009952:	461a      	mov	r2, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f94a 	bl	8009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fd42 	bl	80093e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f94d 	bl	8009c14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4618      	mov	r0, r3
 800997e:	f7f7 f933 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3304      	adds	r3, #4
 8009986:	4618      	mov	r0, r3
 8009988:	f7f6 fcde 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f958 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f934 	bl	8009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fd33 	bl	8009432 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZN10RingBufferILm3EfEC1Ev>:
		return value;
	}

public:

	RingBuffer(){
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	dc0c      	bgt.n	8009a14 <_ZN10RingBufferILm3EfEC1Ev+0x3e>
			buffer[i] = 0;
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3302      	adds	r3, #2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	3304      	adds	r3, #4
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e7ef      	b.n	80099f4 <_ZN10RingBufferILm3EfEC1Ev+0x1e>
		}
	}
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009a2c:	6838      	ldr	r0, [r7, #0]
 8009a2e:	f000 f928 	bl	8009c82 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f92e 	bl	8009c98 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b08b      	sub	sp, #44	; 0x2c
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f953 	bl	8009cfc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8009a56:	4603      	mov	r3, r0
 8009a58:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f95d 	bl	8009d1a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009a60:	4603      	mov	r3, r0
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	f107 020c 	add.w	r2, r7, #12
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f960 	bl	8009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d114      	bne.n	8009aa4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f96e 	bl	8009d5c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681c      	ldr	r4, [r3, #0]
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f974 	bl	8009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	f107 0310 	add.w	r3, r7, #16
 8009a96:	4621      	mov	r1, r4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7f7 fa1e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01b      	beq.n	8009ae6 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009aae:	687c      	ldr	r4, [r7, #4]
 8009ab0:	f107 0208 	add.w	r2, r7, #8
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 f969 	bl	8009d92 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8009ac0:	f107 0318 	add.w	r3, r7, #24
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f7 fa1a 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009acc:	f107 0218 	add.w	r2, r7, #24
 8009ad0:	f107 031c 	add.w	r3, r7, #28
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 f968 	bl	8009db2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f943 	bl	8009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009af0:	4603      	mov	r3, r0
 8009af2:	3304      	adds	r3, #4
      }
 8009af4:	4618      	mov	r0, r3
 8009af6:	3724      	adds	r7, #36	; 0x24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}
 8009afc:	08021870 	.word	0x08021870

08009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>:
private:
	RingBuffer<BUFFER_SIZE, BUFFER_TYPE> ring;

public:
	float current_value;
	float add_value(BUFFER_TYPE value){
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	ed87 0a00 	vstr	s0, [r7]
		BUFFER_TYPE old_value = ring.add_new_value(value);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	ed97 0a00 	vldr	s0, [r7]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 f98b 	bl	8009e2e <_ZN10RingBufferILm3EfE13add_new_valueEf>
 8009b18:	ed87 0a03 	vstr	s0, [r7, #12]
		float temp_value = current_value;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	60bb      	str	r3, [r7, #8]
		current_value -= ((float) old_value) / BUFFER_SIZE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b28:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b2c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8009b30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	edc3 7a06 	vstr	s15, [r3, #24]
		current_value += ((float) value) / BUFFER_SIZE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b44:	edd7 6a00 	vldr	s13, [r7]
 8009b48:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8009b4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	edc3 7a06 	vstr	s15, [r3, #24]
		return current_value;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	ee07 3a90 	vmov	s15, r3
	}
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f975 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f964 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f968 	bl	8009e8c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	609a      	str	r2, [r3, #8]
	{ }
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
	if (__p)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f94b 	bl	8009ea2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f95f 	bl	8009ee0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f000 f95a 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009c42:	4603      	mov	r3, r0
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fff0 	bl	8009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009c4c:	6838      	ldr	r0, [r7, #0]
 8009c4e:	f000 f95e 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009c52:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f965 	bl	8009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009c60:	e7e9      	b.n	8009c36 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009c98:	b5b0      	push	{r4, r5, r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d011      	beq.n	8009cd2 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009cae:	687c      	ldr	r4, [r7, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685d      	ldr	r5, [r3, #4]
 8009cb4:	6838      	ldr	r0, [r7, #0]
 8009cb6:	f000 f947 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 f961 	bl	8009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	e00c      	b.n	8009cec <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ff5a 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009cd8:	4604      	mov	r4, r0
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	f000 f934 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f960 	bl	8009fac <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f9d9 	bl	800a0a4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009cf2:	4603      	mov	r3, r0
      }
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bdb0      	pop	{r4, r5, r7, pc}

08009cfc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f9e5 	bl	800a0da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f9ef 	bl	800a108 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	bf0c      	ite	eq
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	2300      	movne	r3, #0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f9df 	bl	800a12a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009d6c:	bf00      	nop
 8009d6e:	4620      	mov	r0, r4
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd90      	pop	{r4, r7, pc}

08009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f9dc 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009db2:	b5b0      	push	{r4, r5, r7, lr}
 8009db4:	b088      	sub	sp, #32
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7f7 fa50 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	6838      	ldr	r0, [r7, #0]
 8009dca:	f7f7 fd3a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009dce:	4605      	mov	r5, r0
 8009dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd2:	f7f7 fa5e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4621      	mov	r1, r4
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f9bd 	bl	800a15c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009de2:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009de4:	69f8      	ldr	r0, [r7, #28]
 8009de6:	f000 fb0b 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f107 0010 	add.w	r0, r7, #16
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	f000 f9d5 	bl	800a1a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009dfe:	6939      	ldr	r1, [r7, #16]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fb0e 	bl	800a426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e00b      	b.n	8009e26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009e0e:	69f9      	ldr	r1, [r7, #28]
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f888 	bl	8009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	f107 0318 	add.w	r3, r7, #24
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fb40 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009e24:	69bb      	ldr	r3, [r7, #24]
      }
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bdb0      	pop	{r4, r5, r7, pc}

08009e2e <_ZN10RingBufferILm3EfE13add_new_valueEf>:

	BUFFER_TYPE add_new_value(BUFFER_TYPE value){
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	ed87 0a00 	vstr	s0, [r7]
		BUFFER_TYPE old_value = 0;
 8009e3a:	f04f 0300 	mov.w	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
	    if(count == BUFFER_SIZE){
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d104      	bne.n	8009e52 <_ZN10RingBufferILm3EfE13add_new_valueEf+0x24>
	        old_value = pop_value();
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fb3b 	bl	800a4c4 <_ZN10RingBufferILm3EfE9pop_valueEv>
 8009e4e:	ed87 0a03 	vstr	s0, [r7, #12]
	    }
		push_value(value);
 8009e52:	ed97 0a00 	vldr	s0, [r7]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fb6c 	bl	800a534 <_ZN10RingBufferILm3EfE10push_valueEf>
		return old_value;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	ee07 3a90 	vmov	s15, r3
	}
 8009e62:	eeb0 0a67 	vmov.f32	s0, s15
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b088      	sub	sp, #32
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009eba:	f7f6 fa31 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f017 f8f9 	bl	80210bc <_ZdlPv>
	    return;
 8009eca:	e005      	b.n	8009ed8 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	69b9      	ldr	r1, [r7, #24]
 8009ed0:	69f8      	ldr	r0, [r7, #28]
 8009ed2:	f000 fdd0 	bl	800aa76 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb32 	bl	800a59c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb43 	bl	800a5c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009f5e:	b590      	push	{r4, r7, lr}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009f68:	6838      	ldr	r0, [r7, #0]
 8009f6a:	f7ff ffed 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	681c      	ldr	r4, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4619      	mov	r1, r3
 8009f76:	2004      	movs	r0, #4
 8009f78:	f7f6 f9da 	bl	8000330 <_ZnwjPv>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	601c      	str	r4, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd90      	pop	{r4, r7, pc}

08009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ffd7 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f7ff ffdd 	bl	8009f5e <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009fac:	b5b0      	push	{r4, r5, r7, lr}
 8009fae:	b08c      	sub	sp, #48	; 0x30
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009fb8:	4a39      	ldr	r2, [pc, #228]	; (800a0a0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009fba:	2101      	movs	r1, #1
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fb14 	bl	800a5ea <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fdcb 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	f107 0214 	add.w	r2, r7, #20
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fb47 	bl	800a678 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009fea:	4603      	mov	r3, r0
 8009fec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 fb55 	bl	800a6a2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009ff8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009ffe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	18d5      	adds	r5, r2, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff9d 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	f7ff ffb7 	bl	8009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800a01a:	2300      	movs	r3, #0
 800a01c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a01e:	f107 0308 	add.w	r3, r7, #8
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fbb4 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a028:	4603      	mov	r3, r0
 800a02a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb5f 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a034:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	4621      	mov	r1, r4
 800a03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03c:	f000 fb45 	bl	800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a040:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	3304      	adds	r3, #4
 800a046:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a048:	f107 0308 	add.w	r3, r7, #8
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff fb9f 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a052:	4603      	mov	r3, r0
 800a054:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fb4a 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a05e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fb30 	bl	800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a06a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800a06c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800a078:	461a      	mov	r2, r3
 800a07a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a07c:	f7ff fdb7 	bl	8009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	441a      	add	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	609a      	str	r2, [r3, #8]
    }
 800a098:	bf00      	nop
 800a09a:	3730      	adds	r7, #48	; 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a0:	0802175c 	.word	0x0802175c

0800a0a4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fd6d 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	f107 030c 	add.w	r3, r7, #12
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fb31 	bl	800a724 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	60bb      	str	r3, [r7, #8]
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fb93 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800a0d0:	4603      	mov	r3, r0
      }
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 800a0da:	b590      	push	{r4, r7, lr}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fdc0 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb32 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb38 	bl	800a76e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800a0fe:	4603      	mov	r3, r0
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bd90      	pop	{r4, r7, pc}

0800a108 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	1d1a      	adds	r2, r3, #4
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f9c2 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800a132:	bf00      	nop
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3310      	adds	r3, #16
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fb41 	bl	800a7d4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a152:	4603      	mov	r3, r0
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fb3e 	bl	800a7ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800a170:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a172:	68b8      	ldr	r0, [r7, #8]
 800a174:	f7f7 f877 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a178:	4604      	mov	r4, r0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7f7 fb61 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a180:	4605      	mov	r5, r0
 800a182:	6838      	ldr	r0, [r7, #0]
 800a184:	f7f7 f885 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a188:	4603      	mov	r3, r0
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	462b      	mov	r3, r5
 800a18e:	4622      	mov	r2, r4
 800a190:	6979      	ldr	r1, [r7, #20]
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 fb3b 	bl	800a80e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800a198:	697b      	ldr	r3, [r7, #20]
	}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a1a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a1a2:	b5b0      	push	{r4, r5, r7, lr}
 800a1a4:	b08c      	sub	sp, #48	; 0x30
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fb58 	bl	800a868 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800a1bc:	69bc      	ldr	r4, [r7, #24]
 800a1be:	68b8      	ldr	r0, [r7, #8]
 800a1c0:	f000 fac9 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	429c      	cmp	r4, r3
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d032      	beq.n	800a23a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 800a1d4:	68b8      	ldr	r0, [r7, #8]
 800a1d6:	f000 fb58 	bl	800a88a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 800a1da:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d015      	beq.n	800a20c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a1e0:	68bc      	ldr	r4, [r7, #8]
 800a1e2:	68b8      	ldr	r0, [r7, #8]
 800a1e4:	f000 fb5d 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fb64 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7f6 fe6c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 800a20c:	2300      	movs	r3, #0
	  if (size() > 0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f000 fb43 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a21c:	4602      	mov	r2, r0
 800a21e:	f107 031c 	add.w	r3, r7, #28
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7f7 fe3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a22a:	e0e5      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fb4d 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a238:	e0de      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800a23a:	68bc      	ldr	r4, [r7, #8]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681d      	ldr	r5, [r3, #0]
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fb39 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a248:	4603      	mov	r3, r0
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4629      	mov	r1, r5
 800a250:	4620      	mov	r0, r4
 800a252:	f7f6 fe42 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d059      	beq.n	800a310 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a260:	69bc      	ldr	r4, [r7, #24]
 800a262:	68b8      	ldr	r0, [r7, #8]
 800a264:	f000 fbbf 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a268:	4603      	mov	r3, r0
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	429c      	cmp	r4, r3
 800a26e:	bf0c      	ite	eq
 800a270:	2301      	moveq	r3, #1
 800a272:	2300      	movne	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a27a:	68b8      	ldr	r0, [r7, #8]
 800a27c:	f000 fbb3 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a280:	4604      	mov	r4, r0
 800a282:	68b8      	ldr	r0, [r7, #8]
 800a284:	f000 fbaf 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	4621      	mov	r1, r4
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7f7 feb6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a294:	e0b0      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a296:	68bc      	ldr	r4, [r7, #8]
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fbae 	bl	800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fb07 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7f6 fe0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01f      	beq.n	800a302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff fe16 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2301      	moveq	r3, #1
 800a2d2:	2300      	movne	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	623b      	str	r3, [r7, #32]
 800a2de:	f107 0214 	add.w	r2, r7, #20
 800a2e2:	f107 0320 	add.w	r3, r7, #32
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7f7 fddd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a2ee:	e083      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a2f0:	f107 0218 	add.w	r2, r7, #24
 800a2f4:	f107 0318 	add.w	r3, r7, #24
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7f7 fe80 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a300:	e07a      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fae2 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a30e:	e073      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a310:	68bc      	ldr	r4, [r7, #8]
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fad0 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a31a:	4603      	mov	r3, r0
 800a31c:	6819      	ldr	r1, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	4620      	mov	r0, r4
 800a326:	f7f6 fdd8 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d059      	beq.n	800a3e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a334:	69bc      	ldr	r4, [r7, #24]
 800a336:	68b8      	ldr	r0, [r7, #8]
 800a338:	f000 fab3 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a33c:	4603      	mov	r3, r0
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429c      	cmp	r4, r3
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
 800a352:	68b8      	ldr	r0, [r7, #8]
 800a354:	f000 faa5 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a358:	4602      	mov	r2, r0
 800a35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a35e:	4619      	mov	r1, r3
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7f7 fda1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a366:	e047      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a368:	68bc      	ldr	r4, [r7, #8]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681d      	ldr	r5, [r3, #0]
 800a36e:	f107 0310 	add.w	r3, r7, #16
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fb54 	bl	800aa20 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a378:	4603      	mov	r3, r0
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fa9c 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a382:	4603      	mov	r3, r0
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	4629      	mov	r1, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7f6 fda5 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01f      	beq.n	800a3d6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fdac 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2301      	moveq	r3, #1
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3b2:	f107 0218 	add.w	r2, r7, #24
 800a3b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7f7 fd73 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a3c2:	e019      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a3c4:	f107 0210 	add.w	r2, r7, #16
 800a3c8:	f107 0310 	add.w	r3, r7, #16
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7f7 fe16 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a3d4:	e010      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fa78 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a3e2:	e009      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a3ec:	f107 0318 	add.w	r3, r7, #24
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7f7 fe3f 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	3730      	adds	r7, #48	; 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fb1a 	bl	800aa42 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a40e:	4602      	mov	r2, r0
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fb21 	bl	800aa5e <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a41c:	4603      	mov	r3, r0
      }
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a426:	b5b0      	push	{r4, r5, r7, lr}
 800a428:	b086      	sub	sp, #24
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
 800a432:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d119      	bne.n	800a46e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f98b 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a440:	4602      	mov	r2, r0
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4293      	cmp	r3, r2
 800a446:	d012      	beq.n	800a46e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a448:	68fc      	ldr	r4, [r7, #12]
 800a44a:	6838      	ldr	r0, [r7, #0]
 800a44c:	f7ff ffd8 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a450:	4603      	mov	r3, r0
 800a452:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa30 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a45a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	4629      	mov	r1, r5
 800a462:	4620      	mov	r0, r4
 800a464:	f7f6 fd39 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a472:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a474:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a47a:	7df8      	ldrb	r0, [r7, #23]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	f016 fe8c 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a48e:	f107 0310 	add.w	r3, r7, #16
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f805 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a49a:	693b      	ldr	r3, [r7, #16]
    }
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <_ZN10RingBufferILm3EfE9pop_valueEv>:
	BUFFER_TYPE pop_value(){
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
		if(count == 0)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <_ZN10RingBufferILm3EfE9pop_valueEv+0x16>
			return 0;				// Trying to pop with buffer empty
 800a4d4:	f04f 0300 	mov.w	r3, #0
 800a4d8:	e020      	b.n	800a51c <_ZN10RingBufferILm3EfE9pop_valueEv+0x58>
		BUFFER_TYPE value = buffer[initial_pointer];
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
		initial_pointer ++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
		initial_pointer %= BUFFER_SIZE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <_ZN10RingBufferILm3EfE9pop_valueEv+0x6c>)
 800a4fe:	fba3 2301 	umull	r2, r3, r3, r1
 800a502:	085a      	lsrs	r2, r3, #1
 800a504:	4613      	mov	r3, r2
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4413      	add	r3, r2
 800a50a:	1aca      	subs	r2, r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	601a      	str	r2, [r3, #0]
		count --;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	609a      	str	r2, [r3, #8]
		return value;
 800a51a:	68fb      	ldr	r3, [r7, #12]
	}
 800a51c:	ee07 3a90 	vmov	s15, r3
 800a520:	eeb0 0a67 	vmov.f32	s0, s15
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	aaaaaaab 	.word	0xaaaaaaab

0800a534 <_ZN10RingBufferILm3EfE10push_valueEf>:
	void push_value(BUFFER_TYPE value){
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	ed87 0a00 	vstr	s0, [r7]
		if(count == BUFFER_SIZE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d020      	beq.n	800a58a <_ZN10RingBufferILm3EfE10push_valueEf+0x56>
		buffer[end_pointer] = value;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	3302      	adds	r3, #2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	601a      	str	r2, [r3, #0]
		end_pointer ++;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]
    	end_pointer %= BUFFER_SIZE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4619      	mov	r1, r3
 800a56a:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <_ZN10RingBufferILm3EfE10push_valueEf+0x64>)
 800a56c:	fba3 2301 	umull	r2, r3, r3, r1
 800a570:	085a      	lsrs	r2, r3, #1
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	1aca      	subs	r2, r1, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	605a      	str	r2, [r3, #4]
		count ++;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	e000      	b.n	800a58c <_ZN10RingBufferILm3EfE10push_valueEf+0x58>
			return;					// Trying to push with buffer full
 800a58a:	bf00      	nop
	}
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	aaaaaaab 	.word	0xaaaaaaab

0800a59c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa74 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	6838      	ldr	r0, [r7, #0]
 800a5b0:	f7ff fdc6 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fa76 	bl	800aaaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}

0800a5c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fa5f 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2201      	movs	r2, #1
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fa70 	bl	800aac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a5ea:	b590      	push	{r4, r7, lr}
 800a5ec:	b087      	sub	sp, #28
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fa82 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fa8f 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a604:	4603      	mov	r3, r0
 800a606:	1ae2      	subs	r2, r4, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	bf34      	ite	cc
 800a60e:	2301      	movcc	r3, #1
 800a610:	2300      	movcs	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f016 fe1d 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fa7f 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a624:	4604      	mov	r4, r0
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 fa7b 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a62c:	4603      	mov	r3, r0
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	f107 0208 	add.w	r2, r7, #8
 800a634:	f107 0310 	add.w	r3, r7, #16
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 f909 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a640:	4603      	mov	r3, r0
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4423      	add	r3, r4
 800a646:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa6a 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a64e:	4602      	mov	r2, r0
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4293      	cmp	r3, r2
 800a654:	d306      	bcc.n	800a664 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fa52 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a65c:	4602      	mov	r2, r0
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	4293      	cmp	r3, r2
 800a662:	d904      	bls.n	800a66e <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fa4b 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e000      	b.n	800a670 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a66e:	697b      	ldr	r3, [r7, #20]
      }
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}

0800a678 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff f884 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a688:	4603      	mov	r3, r0
 800a68a:	681c      	ldr	r4, [r3, #0]
 800a68c:	6838      	ldr	r0, [r7, #0]
 800a68e:	f7ff f87f 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a692:	4603      	mov	r3, r0
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	1ae3      	subs	r3, r4, r3
 800a698:	109b      	asrs	r3, r3, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}

0800a6a2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fa43 	bl	800ab42 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	e000      	b.n	800a6c2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a6c0:	2300      	movs	r3, #0
      }
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a6ca:	b590      	push	{r4, r7, lr}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af02      	add	r7, sp, #8
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
 800a6d6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a6d8:	f88d 4000 	strb.w	r4, [sp]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fa4d 	bl	800ab82 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a6e8:	4603      	mov	r3, r0
      }
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd90      	pop	{r4, r7, pc}

0800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fa4f 	bl	800abba <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	425b      	negs	r3, r3
 800a738:	4413      	add	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	f107 020c 	add.w	r2, r7, #12
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fb90 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3304      	adds	r3, #4
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a76e:	b590      	push	{r4, r7, lr}
 800a770:	b087      	sub	sp, #28
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	607a      	str	r2, [r7, #4]
 800a77a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01d      	beq.n	800a7be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a782:	68fc      	ldr	r4, [r7, #12]
 800a784:	68b8      	ldr	r0, [r7, #8]
 800a786:	f7ff fe3b 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a78a:	4603      	mov	r3, r0
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	4620      	mov	r0, r4
 800a796:	f7f6 fba0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f083 0301 	eor.w	r3, r3, #1
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	607b      	str	r3, [r7, #4]
 800a7aa:	68b8      	ldr	r0, [r7, #8]
 800a7ac:	f7ff fbaf 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a7b0:	60b8      	str	r0, [r7, #8]
 800a7b2:	e7e3      	b.n	800a77c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a7b4:	68b8      	ldr	r0, [r7, #8]
 800a7b6:	f7ff fb9e 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a7ba:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a7bc:	e7de      	b.n	800a77c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a7be:	f107 0314 	add.w	r3, r7, #20
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fe6d 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a7ca:	697b      	ldr	r3, [r7, #20]
    }
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd90      	pop	{r4, r7, pc}

0800a7d4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa02 	bl	800abe6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f94d 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f9fc 	bl	800abfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a804:	4603      	mov	r3, r0
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	4619      	mov	r1, r3
 800a822:	2018      	movs	r0, #24
 800a824:	f7f5 fd84 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f933 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a82e:	4604      	mov	r4, r0
 800a830:	68b8      	ldr	r0, [r7, #8]
 800a832:	f7ff fc85 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a836:	4605      	mov	r5, r0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7f6 fd14 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a83e:	4606      	mov	r6, r0
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f7f6 fffe 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a846:	4680      	mov	r8, r0
 800a848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84a:	f7f6 fd22 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a84e:	4603      	mov	r3, r0
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	4643      	mov	r3, r8
 800a854:	4632      	mov	r2, r6
 800a856:	4629      	mov	r1, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fa1c 	bl	800ac96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a868 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fe12 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3310      	adds	r3, #16
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7ff fd9c 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a8d2:	b5b0      	push	{r4, r5, r7, lr}
 800a8d4:	b08a      	sub	sp, #40	; 0x28
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a8de:	68b8      	ldr	r0, [r7, #8]
 800a8e0:	f7ff f9c3 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a8e8:	68b8      	ldr	r0, [r7, #8]
 800a8ea:	f7ff ff34 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d023      	beq.n	800a946 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a902:	68bc      	ldr	r4, [r7, #8]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681d      	ldr	r5, [r3, #0]
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7ff fd78 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a910:	4603      	mov	r3, r0
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	4629      	mov	r1, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f7f6 fade 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a91e:	4603      	mov	r3, r0
 800a920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff faed 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a934:	4603      	mov	r3, r0
 800a936:	e004      	b.n	800a942 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff fadb 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a940:	4603      	mov	r3, r0
 800a942:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a944:	e7d8      	b.n	800a8f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	f107 0310 	add.w	r3, r7, #16
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fda8 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01d      	beq.n	800a998 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a95c:	68b8      	ldr	r0, [r7, #8]
 800a95e:	f000 f9b6 	bl	800acce <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a962:	4603      	mov	r3, r0
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	f107 021c 	add.w	r2, r7, #28
 800a96a:	f107 0310 	add.w	r3, r7, #16
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7ff f9df 	bl	8009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d008      	beq.n	800a98e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a97c:	f107 0214 	add.w	r2, r7, #20
 800a980:	f107 0318 	add.w	r3, r7, #24
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 f9b2 	bl	800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a98c:	e027      	b.n	800a9de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a98e:	f107 0310 	add.w	r3, r7, #16
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f833 	bl	800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a998:	68bc      	ldr	r4, [r7, #8]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff8c 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f7f6 fa94 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d008      	beq.n	800a9ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a9b8:	f107 0214 	add.w	r2, r7, #20
 800a9bc:	f107 0318 	add.w	r3, r7, #24
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f994 	bl	800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a9c8:	e009      	b.n	800a9de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	f107 0220 	add.w	r2, r7, #32
 800a9d2:	f107 0310 	add.w	r3, r7, #16
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7f7 fb4c 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bdb0      	pop	{r4, r5, r7, pc}

0800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	330c      	adds	r3, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f016 fbc4 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	return *this;
 800aa16:	687b      	ldr	r3, [r7, #4]
      }
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f016 fbb1 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800aa32:	4602      	mov	r2, r0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
	return *this;
 800aa38:	687b      	ldr	r3, [r7, #4]
      }
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3310      	adds	r3, #16
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 f967 	bl	800ad22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800aa54:	4603      	mov	r3, r0
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4619      	mov	r1, r3
 800aa88:	68b8      	ldr	r0, [r7, #8]
 800aa8a:	f016 fb19 	bl	80210c0 <_ZdlPvj>
      }
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800aab4:	6838      	ldr	r0, [r7, #0]
 800aab6:	f000 f940 	bl	800ad3a <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800aaba:	bf00      	nop
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b088      	sub	sp, #32
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	61fb      	str	r3, [r7, #28]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800aada:	f7f5 fc21 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800aae4:	69b8      	ldr	r0, [r7, #24]
 800aae6:	f016 fae9 	bl	80210bc <_ZdlPv>
	    return;
 800aaea:	e005      	b.n	800aaf8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	69b9      	ldr	r1, [r7, #24]
 800aaf0:	69f8      	ldr	r0, [r7, #28]
 800aaf2:	f000 f9e1 	bl	800aeb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f945 	bl	800ad9a <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab10:	4603      	mov	r3, r0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f927 	bl	800ad66 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	109b      	asrs	r3, r3, #2
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ab54:	f7f5 fbe4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f016 faae 	bl	80210c4 <_Znwj>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	e006      	b.n	800ab7a <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f9b3 	bl	800aedc <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800ab76:	4603      	mov	r3, r0
 800ab78:	bf00      	nop
      { return __a.allocate(__n); }
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 f90a 	bl	800adb0 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab9c:	4603      	mov	r3, r0
      }
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
    }
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800abc4:	f7f5 fbac 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f90a 	bl	800adea <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800abd6:	e003      	b.n	800abe0 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f91d 	bl	800ae1a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ac0e:	f7f5 fb87 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d009      	beq.n	800ac2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	4413      	add	r3, r2
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	4618      	mov	r0, r3
 800ac24:	f016 fa4e 	bl	80210c4 <_Znwj>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	e006      	b.n	800ac3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f9b1 	bl	800af98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800ac36:	4603      	mov	r3, r0
 800ac38:	bf00      	nop
      { return __a.allocate(__n); }
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800ac42:	b5b0      	push	{r4, r5, r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
 800ac4e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f7f6 fb08 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f6 fdf3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7f7 fe88 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800ac6a:	f107 0418 	add.w	r4, r7, #24
 800ac6e:	6838      	ldr	r0, [r7, #0]
 800ac70:	f7f6 fb0f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4619      	mov	r1, r3
 800ac78:	2008      	movs	r0, #8
 800ac7a:	f7f5 fb59 	bl	8000330 <_ZnwjPv>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	7f3b      	ldrb	r3, [r7, #28]
 800ac82:	4622      	mov	r2, r4
 800ac84:	7d39      	ldrb	r1, [r7, #20]
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f8ec 	bl	800ae64 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bdb0      	pop	{r4, r5, r7, pc}

0800ac96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ac96:	b5b0      	push	{r4, r5, r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7f6 fade 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800acaa:	4604      	mov	r4, r0
 800acac:	6838      	ldr	r0, [r7, #0]
 800acae:	f7f6 fdc8 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800acb2:	4605      	mov	r5, r0
 800acb4:	6a38      	ldr	r0, [r7, #32]
 800acb6:	f7f6 faec 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800acba:	4603      	mov	r3, r0
 800acbc:	462a      	mov	r2, r5
 800acbe:	4621      	mov	r1, r4
 800acc0:	68b8      	ldr	r0, [r7, #8]
 800acc2:	f7ff ffbe 	bl	800ac42 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bdb0      	pop	{r4, r5, r7, pc}

0800acce <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	f107 030c 	add.w	r3, r7, #12
 800acde:	4611      	mov	r1, r2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fbdf 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800acfc:	68b8      	ldr	r0, [r7, #8]
 800acfe:	f000 f8c5 	bl	800ae8c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ad02:	4603      	mov	r3, r0
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7f7 fd4f 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ad10:	4603      	mov	r3, r0
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	605a      	str	r2, [r3, #4]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8b9 	bl	800aea2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
    }
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ad56:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ad6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ad72:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff ffea 	bl	800ad4e <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ad7e:	f107 0208 	add.w	r2, r7, #8
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f8 f82c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	681b      	ldr	r3, [r3, #0]
      }
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800adb0:	b5b0      	push	{r4, r5, r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f8ab 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800adc4:	4604      	mov	r4, r0
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f000 f8a7 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800adcc:	4605      	mov	r5, r0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f8a3 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800add4:	4602      	mov	r2, r0
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	4629      	mov	r1, r5
 800adda:	4620      	mov	r0, r4
 800addc:	f000 f8a8 	bl	800af30 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ade0:	4603      	mov	r3, r0
    }
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bdb0      	pop	{r4, r5, r7, pc}

0800adea <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d00a      	beq.n	800ae12 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f8b5 	bl	800af6c <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800ae02:	4603      	mov	r3, r0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f8bc 	bl	800af82 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	607b      	str	r3, [r7, #4]
 800ae10:	e7f0      	b.n	800adf4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800ae3e:	68b8      	ldr	r0, [r7, #8]
 800ae40:	f7f8 f87d 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ae44:	4603      	mov	r3, r0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f8 f86e 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800ae4c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
      { }
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ae64:	b5b0      	push	{r4, r5, r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	7239      	strb	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800ae72:	463a      	mov	r2, r7
 800ae74:	f88d 4000 	strb.w	r4, [sp]
 800ae78:	462b      	mov	r3, r5
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff ffd7 	bl	800ae30 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae8c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	4413      	add	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4619      	mov	r1, r3
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	f016 f8f5 	bl	80210c0 <_ZdlPvj>
      }
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f877 	bl	800afdc <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800aeee:	4602      	mov	r2, r0
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4293      	cmp	r3, r2
 800aef4:	bf8c      	ite	hi
 800aef6:	2301      	movhi	r3, #1
 800aef8:	2300      	movls	r3, #0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800af00:	f016 f9a7 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4618      	mov	r0, r3
 800af0a:	f016 f8db 	bl	80210c4 <_Znwj>
 800af0e:	4603      	mov	r3, r0
 800af10:	bf00      	nop
      }
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
    { return __it; }
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	109b      	asrs	r3, r3, #2
 800af46:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd06      	ble.n	800af5c <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	461a      	mov	r2, r3
 800af54:	68f9      	ldr	r1, [r7, #12]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f016 f9ee 	bl	8021338 <memmove>
      return __result + __count;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	4413      	add	r3, r2
    }
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fe0b 	bl	800aba6 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f825 	bl	800aff4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800afaa:	4602      	mov	r2, r0
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4293      	cmp	r3, r2
 800afb0:	bf8c      	ite	hi
 800afb2:	2301      	movhi	r3, #1
 800afb4:	2300      	movls	r3, #0
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800afbc:	f016 f949 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4618      	mov	r0, r3
 800afcc:	f016 f87a 	bl	80210c4 <_Znwj>
 800afd0:	4603      	mov	r3, r0
 800afd2:	bf00      	nop
      }
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800afe4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	05555555 	.word	0x05555555

0800b010 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fcc6 	bl	80099ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <_Z41__static_initialization_and_destruction_0ii>:

void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d10a      	bne.n	800b052 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b042:	4293      	cmp	r3, r2
 800b044:	d105      	bne.n	800b052 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800b046:	480c      	ldr	r0, [pc, #48]	; (800b078 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800b048:	f7fe f9e6 	bl	8009418 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800b04c:	480b      	ldr	r0, [pc, #44]	; (800b07c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b04e:	f7fe fa09 	bl	8009464 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b05e:	4293      	cmp	r3, r2
 800b060:	d105      	bne.n	800b06e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800b062:	4806      	ldr	r0, [pc, #24]	; (800b07c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b064:	f7ff ffd4 	bl	800b010 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800b068:	4803      	ldr	r0, [pc, #12]	; (800b078 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800b06a:	f000 f809 	bl	800b080 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	24000158 	.word	0x24000158
 800b07c:	24000164 	.word	0x24000164

0800b080 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800b080:	b5b0      	push	{r4, r5, r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681c      	ldr	r4, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fb2d 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800b098:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b09a:	461a      	mov	r2, r3
 800b09c:	4629      	mov	r1, r5
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f7ff fb32 	bl	800a708 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fc47 	bl	800993a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bdb0      	pop	{r4, r5, r7, pc}

0800b0b6 <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7ff ffb4 	bl	800b02c <_Z41__static_initialization_and_destruction_0ii>
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f7ff ffac 	bl	800b02c <_Z41__static_initialization_and_destruction_0ii>
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f83c 	bl	800b15c <_ZNSaIP6StreamED1Ev>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f81f 	bl	800b13c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff ffeb 	bl	800b0ee <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f88c 	bl	800b24a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f8ce 	bl	800b2e6 <_ZNSaIP6StreamEC1Ev>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 f8d6 	bl	800b2fe <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689a      	ldr	r2, [r3, #8]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800b18a:	461a      	mov	r2, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f8ca 	bl	800b326 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff ff9e 	bl	800b0d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f8cd 	bl	800b34c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800b1d2:	b5b0      	push	{r4, r5, r7, lr}
 800b1d4:	b086      	sub	sp, #24
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	1d38      	adds	r0, r7, #4
 800b1dc:	e880 0006 	stmia.w	r0, {r1, r2}
 800b1e0:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800b1e2:	68fc      	ldr	r4, [r7, #12]
 800b1e4:	f107 0314 	add.w	r3, r7, #20
 800b1e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 f8b9 	bl	800b362 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 f8c0 	bl	800b37e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800b1fe:	f107 0314 	add.w	r3, r7, #20
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff ffda 	bl	800b1bc <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b208:	68fc      	ldr	r4, [r7, #12]
 800b20a:	1d3b      	adds	r3, r7, #4
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 f8d4 	bl	800b3ba <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b212:	4605      	mov	r5, r0
 800b214:	1d3b      	adds	r3, r7, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f8db 	bl	800b3d2 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800b21c:	4603      	mov	r3, r0
 800b21e:	461a      	mov	r2, r3
 800b220:	4629      	mov	r1, r5
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f8e7 	bl	800b3f6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4618      	mov	r0, r3
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bdb0      	pop	{r4, r5, r7, pc}

0800b232 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f907 	bl	800b44e <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f925 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b258:	4603      	mov	r3, r0
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f901 	bl	800b464 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff ffe4 	bl	800b232 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	bf0c      	ite	eq
 800b28a:	2301      	moveq	r3, #1
 800b28c:	2300      	movne	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	bf34      	ite	cc
 800b2b4:	2301      	movcc	r3, #1
 800b2b6:	2300      	movcs	r3, #0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa58 	bl	800b7a4 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	605a      	str	r2, [r3, #4]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	609a      	str	r2, [r3, #8]
	{ }
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	607a      	str	r2, [r7, #4]
	if (__p)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fa3b 	bl	800b7ba <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b344:	bf00      	nop
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa42 	bl	800b7f8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b37e:	b590      	push	{r4, r7, lr}
 800b380:	b087      	sub	sp, #28
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b38a:	68fc      	ldr	r4, [r7, #12]
 800b38c:	f107 0314 	add.w	r3, r7, #20
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fa3c 	bl	800b810 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b398:	f107 0314 	add.w	r3, r7, #20
 800b39c:	461a      	mov	r2, r3
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fa42 	bl	800b82a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b3a6:	f107 0314 	add.w	r3, r7, #20
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 f84f 	bl	800b44e <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd90      	pop	{r4, r7, pc}

0800b3ba <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b3d2:	b590      	push	{r4, r7, lr}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff ffed 	bl	800b3ba <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa3e 	bl	800b864 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	4423      	add	r3, r4
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd90      	pop	{r4, r7, pc}

0800b3f6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b088      	sub	sp, #32
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b402:	f107 0314 	add.w	r3, r7, #20
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fa37 	bl	800b87c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	429a      	cmp	r2, r3
 800b414:	d017      	beq.n	800b446 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f84f 	bl	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b41c:	4603      	mov	r3, r0
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	f107 021c 	add.w	r2, r7, #28
 800b424:	f107 0318 	add.w	r3, r7, #24
 800b428:	4611      	mov	r1, r2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff ff4b 	bl	800b2c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b430:	f107 0314 	add.w	r3, r7, #20
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	69b9      	ldr	r1, [r7, #24]
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fa2e 	bl	800b89a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3308      	adds	r3, #8
 800b442:	60bb      	str	r3, [r7, #8]
 800b444:	e7e3      	b.n	800b40e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b446:	bf00      	nop
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d012      	beq.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b474:	6838      	ldr	r0, [r7, #0]
 800b476:	f000 fa43 	bl	800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff fff0 	bl	800b464 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b484:	6838      	ldr	r0, [r7, #0]
 800b486:	f000 fa47 	bl	800b918 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b48a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f968 	bl	800b764 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b498:	e7e9      	b.n	800b46e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	f107 030c 	add.w	r3, r7, #12
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 f95a 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fa2d 	bl	800b948 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b08d      	sub	sp, #52	; 0x34
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b506:	1d3b      	adds	r3, r7, #4
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fa3a 	bl	800b982 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b50e:	4603      	mov	r3, r0
 800b510:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b512:	69bc      	ldr	r4, [r7, #24]
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f000 fa0b 	bl	800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b51a:	4603      	mov	r3, r0
 800b51c:	429c      	cmp	r4, r3
 800b51e:	bf0c      	ite	eq
 800b520:	2301      	moveq	r3, #1
 800b522:	2300      	movne	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d030      	beq.n	800b58c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b52a:	68b8      	ldr	r0, [r7, #8]
 800b52c:	f000 fa3a 	bl	800b9a4 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b530:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b532:	2b00      	cmp	r3, #0
 800b534:	d013      	beq.n	800b55e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b536:	68bc      	ldr	r4, [r7, #8]
 800b538:	68b8      	ldr	r0, [r7, #8]
 800b53a:	f000 fa3f 	bl	800b9bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b53e:	4603      	mov	r3, r0
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fa46 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b548:	4603      	mov	r3, r0
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4619      	mov	r1, r3
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff fea4 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e000      	b.n	800b560 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b55e:	2300      	movs	r3, #0
	  if (size() > 0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00c      	beq.n	800b57e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b564:	2300      	movs	r3, #0
 800b566:	61fb      	str	r3, [r7, #28]
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	f000 fa27 	bl	800b9bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b56e:	4602      	mov	r2, r0
 800b570:	f107 031c 	add.w	r3, r7, #28
 800b574:	4619      	mov	r1, r3
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7f6 fc96 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b57c:	e0db      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	68b9      	ldr	r1, [r7, #8]
 800b584:	4618      	mov	r0, r3
 800b586:	f000 fa31 	bl	800b9ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b58a:	e0d4      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b58c:	68bc      	ldr	r4, [r7, #8]
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 fa1f 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b596:	4603      	mov	r3, r0
 800b598:	461a      	mov	r2, r3
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff fe7d 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d057      	beq.n	800b658 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b5ac:	69bc      	ldr	r4, [r7, #24]
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f000 faa1 	bl	800baf6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	bf0c      	ite	eq
 800b5bc:	2301      	moveq	r3, #1
 800b5be:	2300      	movne	r3, #0
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00d      	beq.n	800b5e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b5c6:	68b8      	ldr	r0, [r7, #8]
 800b5c8:	f000 fa95 	bl	800baf6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	68b8      	ldr	r0, [r7, #8]
 800b5d0:	f000 fa91 	bl	800baf6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4621      	mov	r1, r4
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7f6 fd10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b5e0:	e0a9      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b5e2:	68bc      	ldr	r4, [r7, #8]
 800b5e4:	f107 0314 	add.w	r3, r7, #20
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fa90 	bl	800bb0e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 f9ee 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	f7ff fe4c 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01f      	beq.n	800b64a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 f977 	bl	800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	bf0c      	ite	eq
 800b618:	2301      	moveq	r3, #1
 800b61a:	2300      	movne	r3, #0
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b622:	2300      	movs	r3, #0
 800b624:	623b      	str	r3, [r7, #32]
 800b626:	f107 0214 	add.w	r2, r7, #20
 800b62a:	f107 0320 	add.w	r3, r7, #32
 800b62e:	4619      	mov	r1, r3
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7f6 fc39 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b636:	e07e      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b638:	f107 0218 	add.w	r2, r7, #24
 800b63c:	f107 0318 	add.w	r3, r7, #24
 800b640:	4619      	mov	r1, r3
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7f6 fcdc 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b648:	e075      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f9cb 	bl	800b9ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b656:	e06e      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b658:	68bc      	ldr	r4, [r7, #8]
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 f9b9 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b662:	4603      	mov	r3, r0
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	4619      	mov	r1, r3
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff fe17 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d056      	beq.n	800b722 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b678:	69bc      	ldr	r4, [r7, #24]
 800b67a:	68b8      	ldr	r0, [r7, #8]
 800b67c:	f000 f99e 	bl	800b9bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b680:	4603      	mov	r3, r0
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	429c      	cmp	r4, r3
 800b686:	bf0c      	ite	eq
 800b688:	2301      	moveq	r3, #1
 800b68a:	2300      	movne	r3, #0
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b692:	2300      	movs	r3, #0
 800b694:	627b      	str	r3, [r7, #36]	; 0x24
 800b696:	68b8      	ldr	r0, [r7, #8]
 800b698:	f000 f990 	bl	800b9bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b69c:	4602      	mov	r2, r0
 800b69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7f6 fbff 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b6aa:	e044      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b6ac:	68bc      	ldr	r4, [r7, #8]
 800b6ae:	f107 0310 	add.w	r3, r7, #16
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 fa3c 	bl	800bb30 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f989 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff fde7 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01f      	beq.n	800b714 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f912 	bl	800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bf0c      	ite	eq
 800b6e2:	2301      	moveq	r3, #1
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00a      	beq.n	800b702 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6f0:	f107 0218 	add.w	r2, r7, #24
 800b6f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f7f6 fbd4 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b700:	e019      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b702:	f107 0210 	add.w	r2, r7, #16
 800b706:	f107 0310 	add.w	r3, r7, #16
 800b70a:	4619      	mov	r1, r3
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7f6 fc77 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b712:	e010      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 f966 	bl	800b9ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b720:	e009      	b.n	800b736 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b722:	2300      	movs	r3, #0
 800b724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b726:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b72a:	f107 0318 	add.w	r3, r7, #24
 800b72e:	4619      	mov	r1, r3
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7f6 fca0 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	3734      	adds	r7, #52	; 0x34
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd90      	pop	{r4, r7, pc}

0800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa03 	bl	800bb52 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b74c:	4602      	mov	r2, r0
 800b74e:	f107 030c 	add.w	r3, r7, #12
 800b752:	4611      	mov	r1, r2
 800b754:	4618      	mov	r0, r3
 800b756:	f000 fa0a 	bl	800bb6e <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b75a:	4603      	mov	r3, r0
      }
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fa08 	bl	800bb86 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa19 	bl	800bbb0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b088      	sub	sp, #32
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	61fb      	str	r3, [r7, #28]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	61bb      	str	r3, [r7, #24]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b7d2:	f7f4 fda5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b7dc:	69b8      	ldr	r0, [r7, #24]
 800b7de:	f015 fc6d 	bl	80210bc <_ZdlPv>
	    return;
 800b7e2:	e005      	b.n	800b7f0 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	69b9      	ldr	r1, [r7, #24]
 800b7e8:	69f8      	ldr	r0, [r7, #28]
 800b7ea:	f000 fb4a 	bl	800be82 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9f3 	bl	800bc06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9f0 	bl	800bc1c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b83c:	4603      	mov	r3, r0
 800b83e:	4619      	mov	r1, r3
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f9f6 	bl	800bc32 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f9ff 	bl	800bc4e <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3304      	adds	r3, #4
 800b854:	4618      	mov	r0, r3
 800b856:	f7f4 fd77 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b89a:	b5b0      	push	{r4, r5, r7, lr}
 800b89c:	b08a      	sub	sp, #40	; 0x28
 800b89e:	af02      	add	r7, sp, #8
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b8a8:	f107 0318 	add.w	r3, r7, #24
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 f95d 	bl	800bb6e <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f107 0010 	add.w	r0, r7, #16
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	f7ff fe1b 	bl	800b4f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00f      	beq.n	800b8e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b8c8:	693c      	ldr	r4, [r7, #16]
 800b8ca:	697d      	ldr	r5, [r7, #20]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f9ca 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4621      	mov	r1, r4
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 f9cc 	bl	800bc7c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b8e4:	4603      	mov	r3, r0
			  __node_gen);
 800b8e6:	e007      	b.n	800b8f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	f107 031c 	add.w	r3, r7, #28
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ff48 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b8f6:	69fb      	ldr	r3, [r7, #28]
    }
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bdb0      	pop	{r4, r5, r7, pc}

0800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3304      	adds	r3, #4
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f9dc 	bl	800bd0e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b956:	4603      	mov	r3, r0
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f9db 	bl	800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b96e:	4603      	mov	r3, r0
 800b970:	2101      	movs	r1, #1
 800b972:	4618      	mov	r0, r3
 800b974:	f000 f9e1 	bl	800bd3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b978:	4603      	mov	r3, r0
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	f107 030c 	add.w	r3, r7, #12
 800b992:	4611      	mov	r1, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fef6 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3310      	adds	r3, #16
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff feae 	bl	800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b08b      	sub	sp, #44	; 0x2c
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b9f8:	68b8      	ldr	r0, [r7, #8]
 800b9fa:	f7ff fd52 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800ba02:	68b8      	ldr	r0, [r7, #8]
 800ba04:	f7ff ff94 	bl	800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d020      	beq.n	800ba5a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800ba1c:	68bc      	ldr	r4, [r7, #8]
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff fe8c 	bl	800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800ba26:	4603      	mov	r3, r0
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff fc35 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800ba38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff ff68 	bl	800b918 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	e004      	b.n	800ba56 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff ff56 	bl	800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800ba54:	4603      	mov	r3, r0
 800ba56:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800ba58:	e7db      	b.n	800ba12 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	f107 0310 	add.w	r3, r7, #16
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fe8f 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800ba68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01d      	beq.n	800baac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800ba70:	68b8      	ldr	r0, [r7, #8]
 800ba72:	f000 f985 	bl	800bd80 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800ba76:	4603      	mov	r3, r0
 800ba78:	61fb      	str	r3, [r7, #28]
 800ba7a:	f107 021c 	add.w	r2, r7, #28
 800ba7e:	f107 0310 	add.w	r3, r7, #16
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff fbf5 	bl	800b274 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d008      	beq.n	800baa2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800ba90:	f107 0214 	add.w	r2, r7, #20
 800ba94:	f107 0318 	add.w	r3, r7, #24
 800ba98:	4619      	mov	r1, r3
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f000 f981 	bl	800bda2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800baa0:	e025      	b.n	800baee <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800baa2:	f107 0310 	add.w	r3, r7, #16
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f831 	bl	800bb0e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800baac:	68bc      	ldr	r4, [r7, #8]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff ff8f 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800bab6:	4603      	mov	r3, r0
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	4619      	mov	r1, r3
 800babc:	4620      	mov	r0, r4
 800babe:	f7ff fbed 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d008      	beq.n	800bada <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800bac8:	f107 0214 	add.w	r2, r7, #20
 800bacc:	f107 0318 	add.w	r3, r7, #24
 800bad0:	4619      	mov	r1, r3
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f965 	bl	800bda2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800bad8:	e009      	b.n	800baee <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800bada:	2300      	movs	r3, #0
 800badc:	623b      	str	r3, [r7, #32]
 800bade:	f107 0220 	add.w	r2, r7, #32
 800bae2:	f107 0310 	add.w	r3, r7, #16
 800bae6:	4619      	mov	r1, r3
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7f6 fac4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	372c      	adds	r7, #44	; 0x2c
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd90      	pop	{r4, r7, pc}

0800baf6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	330c      	adds	r3, #12
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f015 fb3c 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800bb20:	4602      	mov	r2, r0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
	return *this;
 800bb26:	687b      	ldr	r3, [r7, #4]
      }
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f015 fb29 	bl	8021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800bb42:	4602      	mov	r2, r0
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	601a      	str	r2, [r3, #0]
	return *this;
 800bb48:	687b      	ldr	r3, [r7, #4]
      }
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3310      	adds	r3, #16
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 f938 	bl	800bdd4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800bb64:	4603      	mov	r3, r0
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800bb86:	b590      	push	{r4, r7, lr}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8c7 	bl	800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bb96:	4604      	mov	r4, r0
 800bb98:	6838      	ldr	r0, [r7, #0]
 800bb9a:	f7ff fc9f 	bl	800b4dc <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4619      	mov	r1, r3
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f922 	bl	800bdec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd90      	pop	{r4, r7, pc}

0800bbb0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f8b2 	bl	800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f91c 	bl	800be04 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f92c 	bl	800be56 <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f92e 	bl	800bea0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
      { }
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800bc7c:	b5b0      	push	{r4, r5, r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d11a      	bne.n	800bcc6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f7ff fe4d 	bl	800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800bc96:	4602      	mov	r2, r0
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d013      	beq.n	800bcc6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800bc9e:	68fc      	ldr	r4, [r7, #12]
 800bca0:	f107 0310 	add.w	r3, r7, #16
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff ff61 	bl	800bb6e <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800bcac:	4605      	mov	r5, r0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fe90 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f7ff faee 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800bcca:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800bccc:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800bcce:	6838      	ldr	r0, [r7, #0]
 800bcd0:	f7ff ffc9 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcda:	f000 f8ed 	bl	800beb8 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800bcde:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800bce4:	7ff8      	ldrb	r0, [r7, #31]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	69b9      	ldr	r1, [r7, #24]
 800bcea:	f015 fa57 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800bcf8:	f107 0314 	add.w	r3, r7, #20
 800bcfc:	69b9      	ldr	r1, [r7, #24]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fd41 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bd04:	697b      	ldr	r3, [r7, #20]
      }
 800bd06:	4618      	mov	r0, r3
 800bd08:	3720      	adds	r7, #32
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bdb0      	pop	{r4, r5, r7, pc}

0800bd0e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800bd4c:	f7f4 fae8 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d009      	beq.n	800bd6a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	4413      	add	r3, r2
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f015 f9af 	bl	80210c4 <_Znwj>
 800bd66:	4603      	mov	r3, r0
 800bd68:	e006      	b.n	800bd78 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	68b9      	ldr	r1, [r7, #8]
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 f910 	bl	800bf94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800bd74:	4603      	mov	r3, r0
 800bd76:	bf00      	nop
      { return __a.allocate(__n); }
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68da      	ldr	r2, [r3, #12]
 800bd8c:	f107 030c 	add.w	r3, r7, #12
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fcf7 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bdae:	68b8      	ldr	r0, [r7, #8]
 800bdb0:	f000 f896 	bl	800bee0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7f6 fcf6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	605a      	str	r2, [r3, #4]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f88a 	bl	800bef6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800bde2:	4603      	mov	r3, r0
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800bdf6:	6838      	ldr	r0, [r7, #0]
 800bdf8:	f000 f888 	bl	800bf0c <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	61bb      	str	r3, [r7, #24]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800be1c:	f7f4 fa80 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800be26:	69b8      	ldr	r0, [r7, #24]
 800be28:	f015 f948 	bl	80210bc <_ZdlPv>
	    return;
 800be2c:	e005      	b.n	800be3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	69b9      	ldr	r1, [r7, #24]
 800be32:	69f8      	ldr	r0, [r7, #28]
 800be34:	f000 f8d0 	bl	800bfd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	3720      	adds	r7, #32
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
    }
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800be60:	f7f4 fa5e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f857 	bl	800bf20 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800be72:	e003      	b.n	800be7c <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f86a 	bl	800bf50 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4619      	mov	r1, r3
 800be94:	68b8      	ldr	r0, [r7, #8]
 800be96:	f015 f913 	bl	80210c0 <_ZdlPvj>
      }
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681c      	ldr	r4, [r3, #0]
 800bec6:	6838      	ldr	r0, [r7, #0]
 800bec8:	f7ff fecd 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800becc:	4603      	mov	r3, r0
 800bece:	4619      	mov	r1, r3
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f848 	bl	800bf66 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bed6:	4603      	mov	r3, r0
 800bed8:	4618      	mov	r0, r3
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd90      	pop	{r4, r7, pc}

0800bee0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
    }
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d00a      	beq.n	800bf48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f862 	bl	800bffc <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 f869 	bl	800c012 <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3304      	adds	r3, #4
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	e7f0      	b.n	800bf2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	bf00      	nop
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b084      	sub	sp, #16
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff fcf5 	bl	800b960 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bf76:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bf78:	6838      	ldr	r0, [r7, #0]
 800bf7a:	f7ff fe74 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	461a      	mov	r2, r3
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f84f 	bl	800c028 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
	}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f000 f861 	bl	800c068 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	bf8c      	ite	hi
 800bfae:	2301      	movhi	r3, #1
 800bfb0:	2300      	movls	r3, #0
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bfb8:	f015 f94b 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f015 f87c 	bl	80210c4 <_Znwj>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	bf00      	nop
      }
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	4413      	add	r3, r2
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	4619      	mov	r1, r3
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f015 f865 	bl	80210c0 <_ZdlPvj>
      }
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff ff11 	bl	800be42 <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800c028:	b5b0      	push	{r4, r5, r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	4619      	mov	r1, r3
 800c038:	2018      	movs	r0, #24
 800c03a:	f7f4 f979 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff fe70 	bl	800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800c044:	4604      	mov	r4, r0
 800c046:	68b8      	ldr	r0, [r7, #8]
 800c048:	f7ff fa48 	bl	800b4dc <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800c04c:	4605      	mov	r5, r0
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff fe09 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	4629      	mov	r1, r5
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f82c 	bl	800c0b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800c060:	bf00      	nop
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bdb0      	pop	{r4, r5, r7, pc}

0800c068 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c070:	4b03      	ldr	r3, [pc, #12]	; (800c080 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800c072:	4618      	mov	r0, r3
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	05555555 	.word	0x05555555

0800c084 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c084:	b5b0      	push	{r4, r5, r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c08e:	6838      	ldr	r0, [r7, #0]
 800c090:	f7ff fde9 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c094:	4605      	mov	r5, r0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4619      	mov	r1, r3
 800c09a:	2008      	movs	r0, #8
 800c09c:	f7f4 f948 	bl	8000330 <_ZnwjPv>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4623      	mov	r3, r4
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800c0ae:	4623      	mov	r3, r4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c0b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff fdce 	bl	800bc66 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	68b8      	ldr	r0, [r7, #8]
 800c0d0:	f7ff ffd8 	bl	800c084 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b090      	sub	sp, #64	; 0x40
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d13e      	bne.n	800c16a <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d139      	bne.n	800c16a <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800c0f6:	4826      	ldr	r0, [pc, #152]	; (800c190 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800c0f8:	f7ff f806 	bl	800b108 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800c0fc:	f107 0310 	add.w	r3, r7, #16
 800c100:	2220      	movs	r2, #32
 800c102:	2100      	movs	r1, #0
 800c104:	4618      	mov	r0, r3
 800c106:	f015 f931 	bl	802136c <memset>
 800c10a:	2301      	movs	r3, #1
 800c10c:	743b      	strb	r3, [r7, #16]
 800c10e:	23ff      	movs	r3, #255	; 0xff
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	2302      	movs	r3, #2
 800c114:	763b      	strb	r3, [r7, #24]
 800c116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c11a:	61fb      	str	r3, [r7, #28]
 800c11c:	2303      	movs	r3, #3
 800c11e:	f887 3020 	strb.w	r3, [r7, #32]
 800c122:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
 800c128:	2304      	movs	r3, #4
 800c12a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800c12e:	f04f 33ff 	mov.w	r3, #4294967295
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c134:	f107 0310 	add.w	r3, r7, #16
 800c138:	60bb      	str	r3, [r7, #8]
 800c13a:	2304      	movs	r3, #4
 800c13c:	60fb      	str	r3, [r7, #12]
 800c13e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff f82e 	bl	800b1a4 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800c148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c14c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	4613      	mov	r3, r2
 800c154:	f107 0208 	add.w	r2, r7, #8
 800c158:	ca06      	ldmia	r2, {r1, r2}
 800c15a:	480e      	ldr	r0, [pc, #56]	; (800c194 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800c15c:	f7ff f839 	bl	800b1d2 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800c160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff f829 	bl	800b1bc <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c176:	4293      	cmp	r3, r2
 800c178:	d105      	bne.n	800c186 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800c17a:	4806      	ldr	r0, [pc, #24]	; (800c194 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800c17c:	f7fe ffd1 	bl	800b122 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800c180:	4803      	ldr	r0, [pc, #12]	; (800c190 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800c182:	f000 f809 	bl	800c198 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800c186:	bf00      	nop
 800c188:	3738      	adds	r7, #56	; 0x38
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	2400017c 	.word	0x2400017c
 800c194:	24000188 	.word	0x24000188

0800c198 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c198:	b5b0      	push	{r4, r5, r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681c      	ldr	r4, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff fd12 	bl	800bbd4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800c1b0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f7ff fd17 	bl	800bbea <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe ffd7 	bl	800b172 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bdb0      	pop	{r4, r5, r7, pc}

0800c1ce <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	f7ff ff80 	bl	800c0dc <_Z41__static_initialization_and_destruction_0ii>
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7ff ff78 	bl	800c0dc <_Z41__static_initialization_and_destruction_0ii>
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f82f 	bl	800c25a <_ZNSaIP5TimerED1Ev>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f812 	bl	800c23a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff ffeb 	bl	800c206 <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f82d 	bl	800c2a2 <_ZNSaIP5TimerEC1Ev>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 f835 	bl	800c2ba <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c288:	461a      	mov	r2, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f829 	bl	800c2e2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff ffab 	bl	800c1ee <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f82c 	bl	800c308 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	605a      	str	r2, [r3, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	609a      	str	r2, [r3, #8]
	{ }
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
	if (__p)
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f80f 	bl	800c31e <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800c300:	bf00      	nop
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c31e:	b580      	push	{r7, lr}
 800c320:	b088      	sub	sp, #32
 800c322:	af00      	add	r7, sp, #0
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	61fb      	str	r3, [r7, #28]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c336:	f7f3 fff3 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c340:	69b8      	ldr	r0, [r7, #24]
 800c342:	f014 febb 	bl	80210bc <_ZdlPv>
	    return;
 800c346:	e005      	b.n	800c354 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	69b9      	ldr	r1, [r7, #24]
 800c34c:	69f8      	ldr	r0, [r7, #28]
 800c34e:	f000 f83e 	bl	800c3ce <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c37e:	68b9      	ldr	r1, [r7, #8]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 f80e 	bl	800c3a2 <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
    }
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b082      	sub	sp, #8
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c3ac:	f7f3 ffb8 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c3b6:	6839      	ldr	r1, [r7, #0]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f817 	bl	800c3ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c3be:	e003      	b.n	800c3c8 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f82a 	bl	800c41c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4619      	mov	r1, r3
 800c3e0:	68b8      	ldr	r0, [r7, #8]
 800c3e2:	f014 fe6d 	bl	80210c0 <_ZdlPvj>
      }
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d00a      	beq.n	800c414 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f817 	bl	800c432 <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c404:	4603      	mov	r3, r0
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f81e 	bl	800c448 <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3304      	adds	r3, #4
 800c410:	607b      	str	r3, [r7, #4]
 800c412:	e7f0      	b.n	800c3f6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c414:	bf00      	nop
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	bf00      	nop
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff ff9c 	bl	800c38e <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c456:	bf00      	nop
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d107      	bne.n	800c480 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c476:	4293      	cmp	r3, r2
 800c478:	d102      	bne.n	800c480 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c47a:	4809      	ldr	r0, [pc, #36]	; (800c4a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c47c:	f7ff fed0 	bl	800c220 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d107      	bne.n	800c496 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d102      	bne.n	800c496 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c490:	4803      	ldr	r0, [pc, #12]	; (800c4a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c492:	f000 f807 	bl	800c4a4 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	240001a0 	.word	0x240001a0

0800c4a4 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c4a4:	b5b0      	push	{r4, r5, r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681c      	ldr	r4, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff ff50 	bl	800c35c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c4bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ff55 	bl	800c372 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fed0 	bl	800c270 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bdb0      	pop	{r4, r5, r7, pc}

0800c4da <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	f7ff ffbc 	bl	800c460 <_Z41__static_initialization_and_destruction_0ii>
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	f7ff ffb4 	bl	800c460 <_Z41__static_initialization_and_destruction_0ii>
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f834 	bl	800c570 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c512:	b580      	push	{r7, lr}
 800c514:	b082      	sub	sp, #8
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 f812 	bl	800c546 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff ffeb 	bl	800c512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f82e 	bl	800c5b0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f836 	bl	800c5c8 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3304      	adds	r3, #4
 800c560:	4618      	mov	r0, r3
 800c562:	f7f3 fef1 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f844 	bl	800c61c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c594:	4603      	mov	r3, r0
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f820 	bl	800c5de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff ffaa 	bl	800c4fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f83b 	bl	800c634 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
      { }
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d012      	beq.n	800c614 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c5ee:	6838      	ldr	r0, [r7, #0]
 800c5f0:	f000 f82b 	bl	800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff fff0 	bl	800c5de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c5fe:	6838      	ldr	r0, [r7, #0]
 800c600:	f000 f82f 	bl	800c662 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c604:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f836 	bl	800c67a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c612:	e7e9      	b.n	800c5e8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c64a:	b480      	push	{r7}
 800c64c:	b083      	sub	sp, #12
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f808 	bl	800c69c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f819 	bl	800c6c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c69c:	b590      	push	{r4, r7, lr}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f81f 	bl	800c6ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	6838      	ldr	r0, [r7, #0]
 800c6b0:	f7f8 fefa 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 f821 	bl	800c700 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c6be:	bf00      	nop
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd90      	pop	{r4, r7, pc}

0800c6c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f80a 	bl	800c6ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2201      	movs	r2, #1
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 f81b 	bl	800c718 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c70a:	6838      	ldr	r0, [r7, #0]
 800c70c:	f000 f823 	bl	800c756 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	61fb      	str	r3, [r7, #28]
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c730:	f7f3 fdf6 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c73a:	69b8      	ldr	r0, [r7, #24]
 800c73c:	f014 fcbe 	bl	80210bc <_ZdlPv>
	    return;
 800c740:	e005      	b.n	800c74e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	69b9      	ldr	r1, [r7, #24]
 800c746:	69f8      	ldr	r0, [r7, #28]
 800c748:	f000 f80f 	bl	800c76a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	3720      	adds	r7, #32
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
    }
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	4613      	mov	r3, r2
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	4413      	add	r3, r2
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	4619      	mov	r1, r3
 800c782:	68b8      	ldr	r0, [r7, #8]
 800c784:	f014 fc9c 	bl	80210c0 <_ZdlPvj>
      }
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff fef4 	bl	800c586 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d107      	bne.n	800c7c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d102      	bne.n	800c7c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c7c2:	4809      	ldr	r0, [pc, #36]	; (800c7e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c7c4:	f7ff feb2 	bl	800c52c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d102      	bne.n	800c7de <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c7d8:	4803      	ldr	r0, [pc, #12]	; (800c7e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c7da:	f7ff ffd8 	bl	800c78e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	240001ac 	.word	0x240001ac

0800c7ec <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	f7ff ffd7 	bl	800c7a8 <_Z41__static_initialization_and_destruction_0ii>
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c804:	2000      	movs	r0, #0
 800c806:	f7ff ffcf 	bl	800c7a8 <_Z41__static_initialization_and_destruction_0ii>
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f86f 	bl	800c8f8 <_ZNSaIP3PinED1Ev>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f852 	bl	800c8d8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	f7ff ffeb 	bl	800c824 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	80fb      	strh	r3, [r7, #6]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	88fa      	ldrh	r2, [r7, #6]
 800c870:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	617b      	str	r3, [r7, #20]
 800c876:	f107 0314 	add.w	r3, r7, #20
 800c87a:	4619      	mov	r1, r3
 800c87c:	4803      	ldr	r0, [pc, #12]	; (800c88c <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c87e:	f000 f85f 	bl	800c940 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4618      	mov	r0, r3
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	240001c4 	.word	0x240001c4

0800c890 <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c890:	b590      	push	{r4, r7, lr}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c89c:	887c      	ldrh	r4, [r7, #2]
 800c89e:	480d      	ldr	r0, [pc, #52]	; (800c8d4 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c8a0:	f000 f85f 	bl	800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	429c      	cmp	r4, r3
 800c8a8:	bf34      	ite	cc
 800c8aa:	2301      	movcc	r3, #1
 800c8ac:	2300      	movcs	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00a      	beq.n	800c8ca <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c8b4:	887b      	ldrh	r3, [r7, #2]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4806      	ldr	r0, [pc, #24]	; (800c8d4 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c8ba:	f000 f862 	bl	800c982 <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f86d 	bl	800c9a2 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c8c8:	e000      	b.n	800c8cc <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c8ca:	bf00      	nop
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd90      	pop	{r4, r7, pc}
 800c8d4:	240001c4 	.word	0x240001c4

0800c8d8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f872 	bl	800c9ca <_ZNSaIP3PinEC1Ev>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 f87a 	bl	800c9e2 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c926:	461a      	mov	r2, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f86e 	bl	800ca0a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff ff6b 	bl	800c80c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4618      	mov	r0, r3
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c94a:	6838      	ldr	r0, [r7, #0]
 800c94c:	f000 f870 	bl	800ca30 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c950:	4603      	mov	r3, r0
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f876 	bl	800ca46 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	109b      	asrs	r3, r3, #2
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
      }
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c9a2:	b5b0      	push	{r4, r5, r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c9ac:	687c      	ldr	r4, [r7, #4]
 800c9ae:	6838      	ldr	r0, [r7, #0]
 800c9b0:	f000 f87b 	bl	800caaa <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 f891 	bl	800cae2 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bdb0      	pop	{r4, r5, r7, pc}

0800c9ca <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f89a 	bl	800cb0c <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c9e2:	b480      	push	{r7}
 800c9e4:	b083      	sub	sp, #12
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	605a      	str	r2, [r3, #4]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	609a      	str	r2, [r3, #8]
	{ }
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	607a      	str	r2, [r7, #4]
	if (__p)
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 f87d 	bl	800cb22 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800ca28:	bf00      	nop
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800ca46:	b5b0      	push	{r4, r5, r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d011      	beq.n	800ca80 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ca5c:	687c      	ldr	r4, [r7, #4]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685d      	ldr	r5, [r3, #4]
 800ca62:	6838      	ldr	r0, [r7, #0]
 800ca64:	f000 f87c 	bl	800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 f896 	bl	800cba0 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	1d1a      	adds	r2, r3, #4
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	e00c      	b.n	800ca9a <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f89f 	bl	800cbc4 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ca86:	4604      	mov	r4, r0
 800ca88:	6838      	ldr	r0, [r7, #0]
 800ca8a:	f000 f869 	bl	800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	4621      	mov	r1, r4
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f8a7 	bl	800cbe8 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f920 	bl	800cce0 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800caa0:	4603      	mov	r3, r0
      }
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bdb0      	pop	{r4, r5, r7, pc}

0800caaa <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800caaa:	b480      	push	{r7}
 800caac:	b083      	sub	sp, #12
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	7239      	strb	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4621      	mov	r1, r4
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f931 	bl	800cd3a <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd90      	pop	{r4, r7, pc}

0800cae2 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800cae2:	b5b0      	push	{r4, r5, r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	7239      	strb	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800caee:	68fc      	ldr	r4, [r7, #12]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff ffda 	bl	800caaa <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800caf6:	4603      	mov	r3, r0
 800caf8:	461a      	mov	r2, r3
 800cafa:	4629      	mov	r1, r5
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff ffdf 	bl	800cac0 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bdb0      	pop	{r4, r5, r7, pc}

0800cb0c <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b088      	sub	sp, #32
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	607a      	str	r2, [r7, #4]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	61fb      	str	r3, [r7, #28]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	61bb      	str	r3, [r7, #24]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800cb3a:	f7f3 fbf1 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800cb44:	69b8      	ldr	r0, [r7, #24]
 800cb46:	f014 fab9 	bl	80210bc <_ZdlPv>
	    return;
 800cb4a:	e005      	b.n	800cb58 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	69b9      	ldr	r1, [r7, #24]
 800cb50:	69f8      	ldr	r0, [r7, #28]
 800cb52:	f000 f9f7 	bl	800cf44 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	3720      	adds	r7, #32
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800cb76:	b590      	push	{r4, r7, lr}
 800cb78:	b083      	sub	sp, #12
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800cb80:	6838      	ldr	r0, [r7, #0]
 800cb82:	f7ff ffed 	bl	800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800cb86:	4603      	mov	r3, r0
 800cb88:	681c      	ldr	r4, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	2004      	movs	r0, #4
 800cb90:	f7f3 fbce 	bl	8000330 <_ZnwjPv>
 800cb94:	4603      	mov	r3, r0
 800cb96:	601c      	str	r4, [r3, #0]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd90      	pop	{r4, r7, pc}

0800cba0 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff ffd7 	bl	800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68b8      	ldr	r0, [r7, #8]
 800cbb8:	f7ff ffdd 	bl	800cb76 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	1d1a      	adds	r2, r3, #4
 800cbd0:	f107 030c 	add.w	r3, r7, #12
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f8c7 	bl	800cd6a <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
	...

0800cbe8 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800cbe8:	b5b0      	push	{r4, r5, r7, lr}
 800cbea:	b08c      	sub	sp, #48	; 0x30
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800cbf4:	4a39      	ldr	r2, [pc, #228]	; (800ccdc <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f000 f8c6 	bl	800cd8a <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800cbfe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f903 	bl	800ce18 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800cc12:	4603      	mov	r3, r0
 800cc14:	617b      	str	r3, [r7, #20]
 800cc16:	f107 0214 	add.w	r2, r7, #20
 800cc1a:	f107 0308 	add.w	r3, r7, #8
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 f909 	bl	800ce38 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cc26:	4603      	mov	r3, r0
 800cc28:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 f917 	bl	800ce62 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800cc34:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800cc3a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800cc40:	69fa      	ldr	r2, [r7, #28]
 800cc42:	18d5      	adds	r5, r2, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff ff8b 	bl	800cb60 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4629      	mov	r1, r5
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7ff ffa5 	bl	800cba0 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800cc56:	2300      	movs	r3, #0
 800cc58:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 f927 	bl	800ceb2 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cc64:	4603      	mov	r3, r0
 800cc66:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 f92c 	bl	800cec8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800cc70:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cc72:	69fa      	ldr	r2, [r7, #28]
 800cc74:	4621      	mov	r1, r4
 800cc76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc78:	f000 f907 	bl	800ce8a <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cc7c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	3304      	adds	r3, #4
 800cc82:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cc84:	f107 0308 	add.w	r3, r7, #8
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 f912 	bl	800ceb2 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f917 	bl	800cec8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800cc9a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cc9c:	69ba      	ldr	r2, [r7, #24]
 800cc9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f8f2 	bl	800ce8a <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cca6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800cca8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccb8:	f7ff fea7 	bl	800ca0a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	69fa      	ldr	r2, [r7, #28]
 800ccc0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	69fa      	ldr	r2, [r7, #28]
 800ccce:	441a      	add	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	609a      	str	r2, [r3, #8]
    }
 800ccd4:	bf00      	nop
 800ccd6:	3730      	adds	r7, #48	; 0x30
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bdb0      	pop	{r4, r5, r7, pc}
 800ccdc:	08021778 	.word	0x08021778

0800cce0 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7ff ff6b 	bl	800cbc4 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	60fb      	str	r3, [r7, #12]
 800ccf2:	f107 030c 	add.w	r3, r7, #12
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f8fe 	bl	800cefa <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	60bb      	str	r3, [r7, #8]
 800cd02:	f107 0308 	add.w	r3, r7, #8
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 f910 	bl	800cf2c <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800cd0c:	4603      	mov	r3, r0
      }
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	7239      	strb	r1, [r7, #8]
 800cd20:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff fec1 	bl	800caaa <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	601a      	str	r2, [r3, #0]
	    { }
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800cd3a:	b5b0      	push	{r4, r5, r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	7239      	strb	r1, [r7, #8]
 800cd44:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800cd46:	68fc      	ldr	r4, [r7, #12]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff feae 	bl	800caaa <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	461a      	mov	r2, r3
 800cd52:	4629      	mov	r1, r5
 800cd54:	4620      	mov	r0, r4
 800cd56:	f7ff ffde 	bl	800cd16 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	711a      	strb	r2, [r3, #4]
	{ }
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bdb0      	pop	{r4, r5, r7, pc}

0800cd6a <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cd8a:	b590      	push	{r4, r7, lr}
 800cd8c:	b087      	sub	sp, #28
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 f8e3 	bl	800cf62 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f7ff fddf 	bl	800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cda4:	4603      	mov	r3, r0
 800cda6:	1ae2      	subs	r2, r4, r3
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	bf34      	ite	cc
 800cdae:	2301      	movcc	r3, #1
 800cdb0:	2300      	movcs	r3, #0
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f014 fa4d 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7ff fdcf 	bl	800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fdcb 	bl	800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	613b      	str	r3, [r7, #16]
 800cdd0:	f107 0208 	add.w	r2, r7, #8
 800cdd4:	f107 0310 	add.w	r3, r7, #16
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f5 fd39 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cde0:	4603      	mov	r3, r0
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4423      	add	r3, r4
 800cde6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f7ff fdba 	bl	800c962 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d306      	bcc.n	800ce04 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 f8b3 	bl	800cf62 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d904      	bls.n	800ce0e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f8ac 	bl	800cf62 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	e000      	b.n	800ce10 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ce0e:	697b      	ldr	r3, [r7, #20]
      }
 800ce10:	4618      	mov	r0, r3
 800ce12:	371c      	adds	r7, #28
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd90      	pop	{r4, r7, pc}

0800ce18 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	f107 030c 	add.w	r3, r7, #12
 800ce26:	4611      	mov	r1, r2
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff ff9e 	bl	800cd6a <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f835 	bl	800ceb2 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	681c      	ldr	r4, [r3, #0]
 800ce4c:	6838      	ldr	r0, [r7, #0]
 800ce4e:	f000 f830 	bl	800ceb2 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800ce52:	4603      	mov	r3, r0
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	1ae3      	subs	r3, r4, r3
 800ce58:	109b      	asrs	r3, r3, #2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd90      	pop	{r4, r7, pc}

0800ce62 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d006      	beq.n	800ce80 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f884 	bl	800cf84 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	e000      	b.n	800ce82 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800ce80:	2300      	movs	r3, #0
      }
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800ce8a:	b590      	push	{r4, r7, lr}
 800ce8c:	b087      	sub	sp, #28
 800ce8e:	af02      	add	r7, sp, #8
 800ce90:	60f8      	str	r0, [r7, #12]
 800ce92:	60b9      	str	r1, [r7, #8]
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800ce98:	f88d 4000 	strb.w	r4, [sp]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	68b9      	ldr	r1, [r7, #8]
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 f88e 	bl	800cfc4 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cea8:	4603      	mov	r3, r0
      }
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd90      	pop	{r4, r7, pc}

0800ceb2 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cede:	b580      	push	{r7, lr}
 800cee0:	b084      	sub	sp, #16
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ceea:	68b9      	ldr	r1, [r7, #8]
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f000 f885 	bl	800cffc <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	425b      	negs	r3, r3
 800cf0e:	4413      	add	r3, r2
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	f107 020c 	add.w	r2, r7, #12
 800cf16:	f107 0308 	add.w	r3, r7, #8
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff ff24 	bl	800cd6a <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4619      	mov	r1, r3
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f014 f8b2 	bl	80210c0 <_ZdlPvj>
      }
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f881 	bl	800d074 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 f863 	bl	800d040 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800cf96:	f7f3 f9c3 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f014 f88d 	bl	80210c4 <_Znwj>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	e006      	b.n	800cfbc <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cfae:	2200      	movs	r2, #0
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 f8a9 	bl	800d10a <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	bf00      	nop
      { return __a.allocate(__n); }
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f856 	bl	800d08a <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cfde:	4603      	mov	r3, r0
      }
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
    }
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d006:	f7f3 f98b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d004      	beq.n	800d01a <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f856 	bl	800d0c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800d018:	e003      	b.n	800d022 <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f869 	bl	800d0f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800d030:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d048:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d04c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7ff ffea 	bl	800d028 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800d054:	4603      	mov	r3, r0
 800d056:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d058:	f107 0208 	add.w	r2, r7, #8
 800d05c:	f107 030c 	add.w	r3, r7, #12
 800d060:	4611      	mov	r1, r2
 800d062:	4618      	mov	r0, r3
 800d064:	f7f5 febf 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800d068:	4603      	mov	r3, r0
 800d06a:	681b      	ldr	r3, [r3, #0]
      }
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d08a:	b5b0      	push	{r4, r5, r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
 800d096:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f000 f855 	bl	800d148 <_ZSt12__niter_baseIPP3PinET_S3_>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	68b8      	ldr	r0, [r7, #8]
 800d0a2:	f000 f851 	bl	800d148 <_ZSt12__niter_baseIPP3PinET_S3_>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f84d 	bl	800d148 <_ZSt12__niter_baseIPP3PinET_S3_>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 f852 	bl	800d15e <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d0ba:	4603      	mov	r3, r0
    }
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bdb0      	pop	{r4, r5, r7, pc}

0800d0c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d00a      	beq.n	800d0ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f85f 	bl	800d19a <_ZSt11__addressofIP3PinEPT_RS2_>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 f866 	bl	800d1b0 <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	e7f0      	b.n	800d0ce <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800d0ec:	bf00      	nop
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	bf00      	nop
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	60f8      	str	r0, [r7, #12]
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 f855 	bl	800d1c6 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800d11c:	4602      	mov	r2, r0
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	4293      	cmp	r3, r2
 800d122:	bf8c      	ite	hi
 800d124:	2301      	movhi	r3, #1
 800d126:	2300      	movls	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d12e:	f014 f890 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4618      	mov	r0, r3
 800d138:	f013 ffc4 	bl	80210c4 <_Znwj>
 800d13c:	4603      	mov	r3, r0
 800d13e:	bf00      	nop
      }
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4618      	mov	r0, r3
 800d154:	370c      	adds	r7, #12
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d15e:	b580      	push	{r7, lr}
 800d160:	b086      	sub	sp, #24
 800d162:	af00      	add	r7, sp, #0
 800d164:	60f8      	str	r0, [r7, #12]
 800d166:	60b9      	str	r1, [r7, #8]
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	109b      	asrs	r3, r3, #2
 800d174:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd06      	ble.n	800d18a <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	461a      	mov	r2, r3
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f014 f8d7 	bl	8021338 <memmove>
      return __result + __count;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	4413      	add	r3, r2
    }
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ff15 	bl	800cfe8 <_ZSt10destroy_atIP3PinEvPT_>
    }
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d1c6:	b480      	push	{r7}
 800d1c8:	b083      	sub	sp, #12
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d1ce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	370c      	adds	r7, #12
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	f040 82ad 	bne.w	800d74c <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	f040 82a7 	bne.w	800d74c <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800d1fe:	48ba      	ldr	r0, [pc, #744]	; (800d4e8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800d200:	f7ff fb1d 	bl	800c83e <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800d204:	2201      	movs	r2, #1
 800d206:	49b9      	ldr	r1, [pc, #740]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d208:	48b9      	ldr	r0, [pc, #740]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800d20a:	f7ff fb25 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800d20e:	2202      	movs	r2, #2
 800d210:	49b6      	ldr	r1, [pc, #728]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d212:	48b8      	ldr	r0, [pc, #736]	; (800d4f4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800d214:	f7ff fb20 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800d218:	2204      	movs	r2, #4
 800d21a:	49b4      	ldr	r1, [pc, #720]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d21c:	48b6      	ldr	r0, [pc, #728]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800d21e:	f7ff fb1b 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800d222:	2208      	movs	r2, #8
 800d224:	49b1      	ldr	r1, [pc, #708]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d226:	48b5      	ldr	r0, [pc, #724]	; (800d4fc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800d228:	f7ff fb16 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800d22c:	2210      	movs	r2, #16
 800d22e:	49af      	ldr	r1, [pc, #700]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d230:	48b3      	ldr	r0, [pc, #716]	; (800d500 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800d232:	f7ff fb11 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800d236:	2220      	movs	r2, #32
 800d238:	49ac      	ldr	r1, [pc, #688]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d23a:	48b2      	ldr	r0, [pc, #712]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800d23c:	f7ff fb0c 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800d240:	2240      	movs	r2, #64	; 0x40
 800d242:	49aa      	ldr	r1, [pc, #680]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d244:	48b0      	ldr	r0, [pc, #704]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800d246:	f7ff fb07 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800d24a:	2280      	movs	r2, #128	; 0x80
 800d24c:	49a7      	ldr	r1, [pc, #668]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d24e:	48af      	ldr	r0, [pc, #700]	; (800d50c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800d250:	f7ff fb02 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800d254:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d258:	49a4      	ldr	r1, [pc, #656]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d25a:	48ad      	ldr	r0, [pc, #692]	; (800d510 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800d25c:	f7ff fafc 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800d260:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d264:	49a1      	ldr	r1, [pc, #644]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d266:	48ab      	ldr	r0, [pc, #684]	; (800d514 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800d268:	f7ff faf6 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800d26c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d270:	499e      	ldr	r1, [pc, #632]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d272:	48a9      	ldr	r0, [pc, #676]	; (800d518 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800d274:	f7ff faf0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800d278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d27c:	499b      	ldr	r1, [pc, #620]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d27e:	48a7      	ldr	r0, [pc, #668]	; (800d51c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800d280:	f7ff faea 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800d284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d288:	4998      	ldr	r1, [pc, #608]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d28a:	48a5      	ldr	r0, [pc, #660]	; (800d520 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800d28c:	f7ff fae4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800d290:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d294:	4995      	ldr	r1, [pc, #596]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d296:	48a3      	ldr	r0, [pc, #652]	; (800d524 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800d298:	f7ff fade 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800d29c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d2a0:	4992      	ldr	r1, [pc, #584]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d2a2:	48a1      	ldr	r0, [pc, #644]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d2a4:	f7ff fad8 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d2a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d2ac:	498f      	ldr	r1, [pc, #572]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d2ae:	489f      	ldr	r0, [pc, #636]	; (800d52c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d2b0:	f7ff fad2 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	499e      	ldr	r1, [pc, #632]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2b8:	489e      	ldr	r0, [pc, #632]	; (800d534 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d2ba:	f7ff facd 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d2be:	2202      	movs	r2, #2
 800d2c0:	499b      	ldr	r1, [pc, #620]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2c2:	489d      	ldr	r0, [pc, #628]	; (800d538 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d2c4:	f7ff fac8 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	4999      	ldr	r1, [pc, #612]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2cc:	489b      	ldr	r0, [pc, #620]	; (800d53c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d2ce:	f7ff fac3 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d2d2:	2208      	movs	r2, #8
 800d2d4:	4996      	ldr	r1, [pc, #600]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2d6:	489a      	ldr	r0, [pc, #616]	; (800d540 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d2d8:	f7ff fabe 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d2dc:	2210      	movs	r2, #16
 800d2de:	4994      	ldr	r1, [pc, #592]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2e0:	4898      	ldr	r0, [pc, #608]	; (800d544 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d2e2:	f7ff fab9 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d2e6:	2220      	movs	r2, #32
 800d2e8:	4991      	ldr	r1, [pc, #580]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2ea:	4897      	ldr	r0, [pc, #604]	; (800d548 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d2ec:	f7ff fab4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d2f0:	2240      	movs	r2, #64	; 0x40
 800d2f2:	498f      	ldr	r1, [pc, #572]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2f4:	4895      	ldr	r0, [pc, #596]	; (800d54c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d2f6:	f7ff faaf 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d2fa:	2280      	movs	r2, #128	; 0x80
 800d2fc:	498c      	ldr	r1, [pc, #560]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d2fe:	4894      	ldr	r0, [pc, #592]	; (800d550 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d300:	f7ff faaa 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d304:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d308:	4989      	ldr	r1, [pc, #548]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d30a:	4892      	ldr	r0, [pc, #584]	; (800d554 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d30c:	f7ff faa4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d310:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d314:	4986      	ldr	r1, [pc, #536]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d316:	4890      	ldr	r0, [pc, #576]	; (800d558 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d318:	f7ff fa9e 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d31c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d320:	4983      	ldr	r1, [pc, #524]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d322:	488e      	ldr	r0, [pc, #568]	; (800d55c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d324:	f7ff fa98 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d32c:	4980      	ldr	r1, [pc, #512]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d32e:	488c      	ldr	r0, [pc, #560]	; (800d560 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d330:	f7ff fa92 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d338:	497d      	ldr	r1, [pc, #500]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d33a:	488a      	ldr	r0, [pc, #552]	; (800d564 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d33c:	f7ff fa8c 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d344:	497a      	ldr	r1, [pc, #488]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d346:	4888      	ldr	r0, [pc, #544]	; (800d568 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d348:	f7ff fa86 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d34c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d350:	4977      	ldr	r1, [pc, #476]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d352:	4886      	ldr	r0, [pc, #536]	; (800d56c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d354:	f7ff fa80 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d35c:	4974      	ldr	r1, [pc, #464]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d35e:	4884      	ldr	r0, [pc, #528]	; (800d570 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d360:	f7ff fa7a 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d364:	2201      	movs	r2, #1
 800d366:	4983      	ldr	r1, [pc, #524]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d368:	4883      	ldr	r0, [pc, #524]	; (800d578 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d36a:	f7ff fa75 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d36e:	2202      	movs	r2, #2
 800d370:	4980      	ldr	r1, [pc, #512]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d372:	4882      	ldr	r0, [pc, #520]	; (800d57c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d374:	f7ff fa70 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d378:	2204      	movs	r2, #4
 800d37a:	497e      	ldr	r1, [pc, #504]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d37c:	4880      	ldr	r0, [pc, #512]	; (800d580 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d37e:	f7ff fa6b 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d382:	2208      	movs	r2, #8
 800d384:	497b      	ldr	r1, [pc, #492]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d386:	487f      	ldr	r0, [pc, #508]	; (800d584 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d388:	f7ff fa66 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d38c:	2210      	movs	r2, #16
 800d38e:	4979      	ldr	r1, [pc, #484]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d390:	487d      	ldr	r0, [pc, #500]	; (800d588 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d392:	f7ff fa61 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d396:	2220      	movs	r2, #32
 800d398:	4976      	ldr	r1, [pc, #472]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d39a:	487c      	ldr	r0, [pc, #496]	; (800d58c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d39c:	f7ff fa5c 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d3a0:	2240      	movs	r2, #64	; 0x40
 800d3a2:	4974      	ldr	r1, [pc, #464]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3a4:	487a      	ldr	r0, [pc, #488]	; (800d590 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d3a6:	f7ff fa57 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d3aa:	2280      	movs	r2, #128	; 0x80
 800d3ac:	4971      	ldr	r1, [pc, #452]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3ae:	4879      	ldr	r0, [pc, #484]	; (800d594 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d3b0:	f7ff fa52 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d3b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3b8:	496e      	ldr	r1, [pc, #440]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3ba:	4877      	ldr	r0, [pc, #476]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d3bc:	f7ff fa4c 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3c4:	496b      	ldr	r1, [pc, #428]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3c6:	4875      	ldr	r0, [pc, #468]	; (800d59c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d3c8:	f7ff fa46 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d3cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3d0:	4968      	ldr	r1, [pc, #416]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3d2:	4873      	ldr	r0, [pc, #460]	; (800d5a0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d3d4:	f7ff fa40 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d3d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3dc:	4965      	ldr	r1, [pc, #404]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3de:	4871      	ldr	r0, [pc, #452]	; (800d5a4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d3e0:	f7ff fa3a 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d3e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3e8:	4962      	ldr	r1, [pc, #392]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3ea:	486f      	ldr	r0, [pc, #444]	; (800d5a8 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d3ec:	f7ff fa34 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d3f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3f4:	495f      	ldr	r1, [pc, #380]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d3f6:	486d      	ldr	r0, [pc, #436]	; (800d5ac <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d3f8:	f7ff fa2e 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d3fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d400:	495c      	ldr	r1, [pc, #368]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d402:	486b      	ldr	r0, [pc, #428]	; (800d5b0 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d404:	f7ff fa28 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d408:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d40c:	4959      	ldr	r1, [pc, #356]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d40e:	4869      	ldr	r0, [pc, #420]	; (800d5b4 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d410:	f7ff fa22 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d414:	2201      	movs	r2, #1
 800d416:	4968      	ldr	r1, [pc, #416]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d418:	4868      	ldr	r0, [pc, #416]	; (800d5bc <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d41a:	f7ff fa1d 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d41e:	2202      	movs	r2, #2
 800d420:	4965      	ldr	r1, [pc, #404]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d422:	4867      	ldr	r0, [pc, #412]	; (800d5c0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d424:	f7ff fa18 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d428:	2204      	movs	r2, #4
 800d42a:	4963      	ldr	r1, [pc, #396]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d42c:	4865      	ldr	r0, [pc, #404]	; (800d5c4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d42e:	f7ff fa13 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d432:	2208      	movs	r2, #8
 800d434:	4960      	ldr	r1, [pc, #384]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d436:	4864      	ldr	r0, [pc, #400]	; (800d5c8 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d438:	f7ff fa0e 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d43c:	2210      	movs	r2, #16
 800d43e:	495e      	ldr	r1, [pc, #376]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d440:	4862      	ldr	r0, [pc, #392]	; (800d5cc <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d442:	f7ff fa09 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d446:	2220      	movs	r2, #32
 800d448:	495b      	ldr	r1, [pc, #364]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d44a:	4861      	ldr	r0, [pc, #388]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d44c:	f7ff fa04 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d450:	2240      	movs	r2, #64	; 0x40
 800d452:	4959      	ldr	r1, [pc, #356]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d454:	485f      	ldr	r0, [pc, #380]	; (800d5d4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d456:	f7ff f9ff 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d45a:	2280      	movs	r2, #128	; 0x80
 800d45c:	4956      	ldr	r1, [pc, #344]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d45e:	485e      	ldr	r0, [pc, #376]	; (800d5d8 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d460:	f7ff f9fa 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d464:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d468:	4953      	ldr	r1, [pc, #332]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d46a:	485c      	ldr	r0, [pc, #368]	; (800d5dc <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d46c:	f7ff f9f4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d470:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d474:	4950      	ldr	r1, [pc, #320]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d476:	485a      	ldr	r0, [pc, #360]	; (800d5e0 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d478:	f7ff f9ee 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d47c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d480:	494d      	ldr	r1, [pc, #308]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d482:	4858      	ldr	r0, [pc, #352]	; (800d5e4 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d484:	f7ff f9e8 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d48c:	494a      	ldr	r1, [pc, #296]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d48e:	4856      	ldr	r0, [pc, #344]	; (800d5e8 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d490:	f7ff f9e2 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d498:	4947      	ldr	r1, [pc, #284]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d49a:	4854      	ldr	r0, [pc, #336]	; (800d5ec <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d49c:	f7ff f9dc 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d4a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d4a4:	4944      	ldr	r1, [pc, #272]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d4a6:	4852      	ldr	r0, [pc, #328]	; (800d5f0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d4a8:	f7ff f9d6 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d4ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4b0:	4941      	ldr	r1, [pc, #260]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d4b2:	4850      	ldr	r0, [pc, #320]	; (800d5f4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d4b4:	f7ff f9d0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d4b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4bc:	493e      	ldr	r1, [pc, #248]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d4be:	484e      	ldr	r0, [pc, #312]	; (800d5f8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d4c0:	f7ff f9ca 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	494d      	ldr	r1, [pc, #308]	; (800d5fc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d4c8:	484d      	ldr	r0, [pc, #308]	; (800d600 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d4ca:	f7ff f9c5 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	494a      	ldr	r1, [pc, #296]	; (800d5fc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d4d2:	484c      	ldr	r0, [pc, #304]	; (800d604 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d4d4:	f7ff f9c0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d4d8:	2204      	movs	r2, #4
 800d4da:	4948      	ldr	r1, [pc, #288]	; (800d5fc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d4dc:	484a      	ldr	r0, [pc, #296]	; (800d608 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d4de:	f7ff f9bb 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d4e2:	2208      	movs	r2, #8
 800d4e4:	e092      	b.n	800d60c <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d4e6:	bf00      	nop
 800d4e8:	240001c4 	.word	0x240001c4
 800d4ec:	58020000 	.word	0x58020000
 800d4f0:	240001d0 	.word	0x240001d0
 800d4f4:	240001d8 	.word	0x240001d8
 800d4f8:	240001e0 	.word	0x240001e0
 800d4fc:	240001e8 	.word	0x240001e8
 800d500:	240001f0 	.word	0x240001f0
 800d504:	240001f8 	.word	0x240001f8
 800d508:	24000200 	.word	0x24000200
 800d50c:	24000208 	.word	0x24000208
 800d510:	24000210 	.word	0x24000210
 800d514:	24000218 	.word	0x24000218
 800d518:	24000220 	.word	0x24000220
 800d51c:	24000228 	.word	0x24000228
 800d520:	24000230 	.word	0x24000230
 800d524:	24000238 	.word	0x24000238
 800d528:	24000240 	.word	0x24000240
 800d52c:	24000248 	.word	0x24000248
 800d530:	58020400 	.word	0x58020400
 800d534:	24000250 	.word	0x24000250
 800d538:	24000258 	.word	0x24000258
 800d53c:	24000260 	.word	0x24000260
 800d540:	24000268 	.word	0x24000268
 800d544:	24000270 	.word	0x24000270
 800d548:	24000278 	.word	0x24000278
 800d54c:	24000280 	.word	0x24000280
 800d550:	24000288 	.word	0x24000288
 800d554:	24000290 	.word	0x24000290
 800d558:	24000298 	.word	0x24000298
 800d55c:	240002a0 	.word	0x240002a0
 800d560:	240002a8 	.word	0x240002a8
 800d564:	240002b0 	.word	0x240002b0
 800d568:	240002b8 	.word	0x240002b8
 800d56c:	240002c0 	.word	0x240002c0
 800d570:	240002c8 	.word	0x240002c8
 800d574:	58020800 	.word	0x58020800
 800d578:	240002d0 	.word	0x240002d0
 800d57c:	240002d8 	.word	0x240002d8
 800d580:	240002e0 	.word	0x240002e0
 800d584:	240002e8 	.word	0x240002e8
 800d588:	240002f0 	.word	0x240002f0
 800d58c:	240002f8 	.word	0x240002f8
 800d590:	24000300 	.word	0x24000300
 800d594:	24000308 	.word	0x24000308
 800d598:	24000310 	.word	0x24000310
 800d59c:	24000318 	.word	0x24000318
 800d5a0:	24000320 	.word	0x24000320
 800d5a4:	24000328 	.word	0x24000328
 800d5a8:	24000330 	.word	0x24000330
 800d5ac:	24000338 	.word	0x24000338
 800d5b0:	24000340 	.word	0x24000340
 800d5b4:	24000348 	.word	0x24000348
 800d5b8:	58020c00 	.word	0x58020c00
 800d5bc:	24000350 	.word	0x24000350
 800d5c0:	24000358 	.word	0x24000358
 800d5c4:	24000360 	.word	0x24000360
 800d5c8:	24000368 	.word	0x24000368
 800d5cc:	24000370 	.word	0x24000370
 800d5d0:	24000378 	.word	0x24000378
 800d5d4:	24000380 	.word	0x24000380
 800d5d8:	24000388 	.word	0x24000388
 800d5dc:	24000390 	.word	0x24000390
 800d5e0:	24000398 	.word	0x24000398
 800d5e4:	240003a0 	.word	0x240003a0
 800d5e8:	240003a8 	.word	0x240003a8
 800d5ec:	240003b0 	.word	0x240003b0
 800d5f0:	240003b8 	.word	0x240003b8
 800d5f4:	240003c0 	.word	0x240003c0
 800d5f8:	240003c8 	.word	0x240003c8
 800d5fc:	58021000 	.word	0x58021000
 800d600:	240003d0 	.word	0x240003d0
 800d604:	240003d8 	.word	0x240003d8
 800d608:	240003e0 	.word	0x240003e0
 800d60c:	4957      	ldr	r1, [pc, #348]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d60e:	4858      	ldr	r0, [pc, #352]	; (800d770 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d610:	f7ff f922 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d614:	2210      	movs	r2, #16
 800d616:	4955      	ldr	r1, [pc, #340]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d618:	4856      	ldr	r0, [pc, #344]	; (800d774 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d61a:	f7ff f91d 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d61e:	2220      	movs	r2, #32
 800d620:	4952      	ldr	r1, [pc, #328]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d622:	4855      	ldr	r0, [pc, #340]	; (800d778 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d624:	f7ff f918 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d628:	2240      	movs	r2, #64	; 0x40
 800d62a:	4950      	ldr	r1, [pc, #320]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d62c:	4853      	ldr	r0, [pc, #332]	; (800d77c <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d62e:	f7ff f913 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d632:	2280      	movs	r2, #128	; 0x80
 800d634:	494d      	ldr	r1, [pc, #308]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d636:	4852      	ldr	r0, [pc, #328]	; (800d780 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d638:	f7ff f90e 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d63c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d640:	494a      	ldr	r1, [pc, #296]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d642:	4850      	ldr	r0, [pc, #320]	; (800d784 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d644:	f7ff f908 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d64c:	4947      	ldr	r1, [pc, #284]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d64e:	484e      	ldr	r0, [pc, #312]	; (800d788 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d650:	f7ff f902 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d658:	4944      	ldr	r1, [pc, #272]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d65a:	484c      	ldr	r0, [pc, #304]	; (800d78c <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d65c:	f7ff f8fc 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d664:	4941      	ldr	r1, [pc, #260]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d666:	484a      	ldr	r0, [pc, #296]	; (800d790 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d668:	f7ff f8f6 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d66c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d670:	493e      	ldr	r1, [pc, #248]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d672:	4848      	ldr	r0, [pc, #288]	; (800d794 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d674:	f7ff f8f0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d67c:	493b      	ldr	r1, [pc, #236]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d67e:	4846      	ldr	r0, [pc, #280]	; (800d798 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d680:	f7ff f8ea 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d684:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d688:	4938      	ldr	r1, [pc, #224]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d68a:	4844      	ldr	r0, [pc, #272]	; (800d79c <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d68c:	f7ff f8e4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d694:	4935      	ldr	r1, [pc, #212]	; (800d76c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d696:	4842      	ldr	r0, [pc, #264]	; (800d7a0 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d698:	f7ff f8de 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d69c:	2201      	movs	r2, #1
 800d69e:	4941      	ldr	r1, [pc, #260]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6a0:	4841      	ldr	r0, [pc, #260]	; (800d7a8 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d6a2:	f7ff f8d9 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	493e      	ldr	r1, [pc, #248]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6aa:	4840      	ldr	r0, [pc, #256]	; (800d7ac <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d6ac:	f7ff f8d4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d6b0:	2204      	movs	r2, #4
 800d6b2:	493c      	ldr	r1, [pc, #240]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6b4:	483e      	ldr	r0, [pc, #248]	; (800d7b0 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d6b6:	f7ff f8cf 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d6ba:	2208      	movs	r2, #8
 800d6bc:	4939      	ldr	r1, [pc, #228]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6be:	483d      	ldr	r0, [pc, #244]	; (800d7b4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d6c0:	f7ff f8ca 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d6c4:	2210      	movs	r2, #16
 800d6c6:	4937      	ldr	r1, [pc, #220]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6c8:	483b      	ldr	r0, [pc, #236]	; (800d7b8 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d6ca:	f7ff f8c5 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	4934      	ldr	r1, [pc, #208]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6d2:	483a      	ldr	r0, [pc, #232]	; (800d7bc <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d6d4:	f7ff f8c0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d6d8:	2240      	movs	r2, #64	; 0x40
 800d6da:	4932      	ldr	r1, [pc, #200]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6dc:	4838      	ldr	r0, [pc, #224]	; (800d7c0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d6de:	f7ff f8bb 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d6e2:	2280      	movs	r2, #128	; 0x80
 800d6e4:	492f      	ldr	r1, [pc, #188]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6e6:	4837      	ldr	r0, [pc, #220]	; (800d7c4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d6e8:	f7ff f8b6 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d6ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6f0:	492c      	ldr	r1, [pc, #176]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6f2:	4835      	ldr	r0, [pc, #212]	; (800d7c8 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d6f4:	f7ff f8b0 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d6f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6fc:	4929      	ldr	r1, [pc, #164]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d6fe:	4833      	ldr	r0, [pc, #204]	; (800d7cc <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d700:	f7ff f8aa 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d708:	4926      	ldr	r1, [pc, #152]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d70a:	4831      	ldr	r0, [pc, #196]	; (800d7d0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d70c:	f7ff f8a4 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d714:	4923      	ldr	r1, [pc, #140]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d716:	482f      	ldr	r0, [pc, #188]	; (800d7d4 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d718:	f7ff f89e 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d71c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d720:	4920      	ldr	r1, [pc, #128]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d722:	482d      	ldr	r0, [pc, #180]	; (800d7d8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d724:	f7ff f898 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d72c:	491d      	ldr	r1, [pc, #116]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d72e:	482b      	ldr	r0, [pc, #172]	; (800d7dc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d730:	f7ff f892 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d738:	491a      	ldr	r1, [pc, #104]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d73a:	4829      	ldr	r0, [pc, #164]	; (800d7e0 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d73c:	f7ff f88c 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d740:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d744:	4917      	ldr	r1, [pc, #92]	; (800d7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d746:	4827      	ldr	r0, [pc, #156]	; (800d7e4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d748:	f7ff f886 	bl	800c858 <_ZN3PinC1EP12GPIO_TypeDeft>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d107      	bne.n	800d762 <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d758:	4293      	cmp	r3, r2
 800d75a:	d102      	bne.n	800d762 <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d75c:	4822      	ldr	r0, [pc, #136]	; (800d7e8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d75e:	f000 f845 	bl	800d7ec <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d762:	bf00      	nop
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	58021000 	.word	0x58021000
 800d770:	240003e8 	.word	0x240003e8
 800d774:	240003f0 	.word	0x240003f0
 800d778:	240003f8 	.word	0x240003f8
 800d77c:	24000400 	.word	0x24000400
 800d780:	24000408 	.word	0x24000408
 800d784:	24000410 	.word	0x24000410
 800d788:	24000418 	.word	0x24000418
 800d78c:	24000420 	.word	0x24000420
 800d790:	24000428 	.word	0x24000428
 800d794:	24000430 	.word	0x24000430
 800d798:	24000438 	.word	0x24000438
 800d79c:	24000440 	.word	0x24000440
 800d7a0:	24000448 	.word	0x24000448
 800d7a4:	58021400 	.word	0x58021400
 800d7a8:	24000450 	.word	0x24000450
 800d7ac:	24000458 	.word	0x24000458
 800d7b0:	24000460 	.word	0x24000460
 800d7b4:	24000468 	.word	0x24000468
 800d7b8:	24000470 	.word	0x24000470
 800d7bc:	24000478 	.word	0x24000478
 800d7c0:	24000480 	.word	0x24000480
 800d7c4:	24000488 	.word	0x24000488
 800d7c8:	24000490 	.word	0x24000490
 800d7cc:	24000498 	.word	0x24000498
 800d7d0:	240004a0 	.word	0x240004a0
 800d7d4:	240004a8 	.word	0x240004a8
 800d7d8:	240004b0 	.word	0x240004b0
 800d7dc:	240004b8 	.word	0x240004b8
 800d7e0:	240004c0 	.word	0x240004c0
 800d7e4:	240004c8 	.word	0x240004c8
 800d7e8:	240001c4 	.word	0x240001c4

0800d7ec <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d7ec:	b5b0      	push	{r4, r5, r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681c      	ldr	r4, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fb62 	bl	800cec8 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d804:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d806:	461a      	mov	r2, r3
 800d808:	4629      	mov	r1, r5
 800d80a:	4620      	mov	r0, r4
 800d80c:	f7ff fb67 	bl	800cede <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff f87b 	bl	800c90e <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bdb0      	pop	{r4, r5, r7, pc}

0800d822 <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d822:	b580      	push	{r7, lr}
 800d824:	af00      	add	r7, sp, #0
 800d826:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d82a:	2001      	movs	r0, #1
 800d82c:	f7ff fcd8 	bl	800d1e0 <_Z41__static_initialization_and_destruction_0ii>
 800d830:	bd80      	pop	{r7, pc}

0800d832 <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d832:	b580      	push	{r7, lr}
 800d834:	af00      	add	r7, sp, #0
 800d836:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d83a:	2000      	movs	r0, #0
 800d83c:	f7ff fcd0 	bl	800d1e0 <_Z41__static_initialization_and_destruction_0ii>
 800d840:	bd80      	pop	{r7, pc}

0800d842 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	609a      	str	r2, [r3, #8]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4618      	mov	r0, r3
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b082      	sub	sp, #8
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d005      	beq.n	800d8a6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	6879      	ldr	r1, [r7, #4]
 800d8a2:	2203      	movs	r2, #3
 800d8a4:	4798      	blx	r3
    }
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bf0c      	ite	eq
 800d8c0:	2301      	moveq	r3, #1
 800d8c2:	2300      	movne	r3, #0
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	ed87 0a02 	vstr	s0, [r7, #8]
 800d8de:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d8e2:	ed97 7a02 	vldr	s14, [r7, #8]
 800d8e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f2:	d501      	bpl.n	800d8f8 <_ZN5Timer3minEff+0x26>
			return n1;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	e000      	b.n	800d8fa <_ZN5Timer3minEff+0x28>
		return n2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
	}
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <_ZN5Timer9interruptEv+0x16>
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d003      	beq.n	800d928 <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d920:	e008      	b.n	800d934 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f96a 	bl	800dbfc <_ZN5Timer5resetEv>
			current_func();
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3308      	adds	r3, #8
 800d92c:	4618      	mov	r0, r3
 800d92e:	f002 fc14 	bl	801015a <_ZNKSt8functionIFvvEEclEv>
			break;
 800d932:	bf00      	nop
	}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e010      	b.n	800d972 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d950:	79fb      	ldrb	r3, [r7, #7]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d102      	bne.n	800d95c <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d95a:	e00a      	b.n	800d972 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d101      	bne.n	800d966 <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d964:	e005      	b.n	800d972 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d966:	79fb      	ldrb	r3, [r7, #7]
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d101      	bne.n	800d970 <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d96c:	4b05      	ldr	r3, [pc, #20]	; (800d984 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d96e:	e000      	b.n	800d972 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d970:	2300      	movs	r3, #0
	}
 800d972:	4618      	mov	r0, r3
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	000f4240 	.word	0x000f4240
 800d984:	3b9aca00 	.word	0x3b9aca00

0800d988 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff ff79 	bl	800d88a <_ZNSt14_Function_baseD1Ev>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f002 fbe7 	bl	8010186 <_ZNSt8functionIFvvEEC1Ev>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	60fb      	str	r3, [r7, #12]
 800d9c2:	f107 030c 	add.w	r3, r7, #12
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4803      	ldr	r0, [pc, #12]	; (800d9d8 <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d9ca:	f002 fbe9 	bl	80101a0 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	240001a0 	.word	0x240001a0

0800d9dc <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	; 0x28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d9f4:	79fb      	ldrb	r3, [r7, #7]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff ffa0 	bl	800d93c <_ZN5Timer10to_secondsENS_5UNITSE>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	fbb2 f3f3 	udiv	r3, r2, r3
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800da10:	eddf 6a27 	vldr	s13, [pc, #156]	; 800dab0 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800da14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800da18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800da20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da24:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800da28:	eddf 0a22 	vldr	s1, [pc, #136]	; 800dab4 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800da2c:	ed97 0a08 	vldr	s0, [r7, #32]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7ff ff4e 	bl	800d8d2 <_ZN5Timer3minEff>
 800da36:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800da3a:	edd7 7a07 	vldr	s15, [r7, #28]
 800da3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da42:	ee17 2a90 	vmov	r2, s15
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3a01      	subs	r2, #1
 800da4e:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da58:	3301      	adds	r3, #1
 800da5a:	ee07 3a90 	vmov	s15, r3
 800da5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da62:	eddf 6a13 	vldr	s13, [pc, #76]	; 800dab0 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800da66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da6a:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800da6e:	edd7 6a06 	vldr	s13, [r7, #24]
 800da72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800da76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da7a:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800da7e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800dab4 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800da82:	ed97 0a05 	vldr	s0, [r7, #20]
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f7ff ff23 	bl	800d8d2 <_ZN5Timer3minEff>
 800da8c:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800da90:	edd7 7a04 	vldr	s15, [r7, #16]
 800da94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da98:	ee17 2a90 	vmov	r2, s15
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3a01      	subs	r2, #1
 800daa4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800daa6:	bf00      	nop
 800daa8:	3728      	adds	r7, #40	; 0x28
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	4d832156 	.word	0x4d832156
 800dab4:	47800000 	.word	0x47800000

0800dab8 <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2200      	movs	r2, #0
 800daca:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	ee07 3a90 	vmov	s15, r3
 800dad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dad6:	eddf 6a28 	vldr	s13, [pc, #160]	; 800db78 <_ZN5Timer13set_frequencyEm+0xc0>
 800dada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dade:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800dae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dae6:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800daea:	eddf 0a24 	vldr	s1, [pc, #144]	; 800db7c <_ZN5Timer13set_frequencyEm+0xc4>
 800daee:	ed97 0a07 	vldr	s0, [r7, #28]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff feed 	bl	800d8d2 <_ZN5Timer3minEff>
 800daf8:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800dafc:	edd7 7a06 	vldr	s15, [r7, #24]
 800db00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db04:	ee17 2a90 	vmov	r2, s15
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3a01      	subs	r2, #1
 800db10:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	3301      	adds	r3, #1
 800db1c:	ee07 3a90 	vmov	s15, r3
 800db20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db24:	eddf 6a14 	vldr	s13, [pc, #80]	; 800db78 <_ZN5Timer13set_frequencyEm+0xc0>
 800db28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db2c:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	ee07 3a90 	vmov	s15, r3
 800db36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db3a:	edd7 6a05 	vldr	s13, [r7, #20]
 800db3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db42:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800db46:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800db7c <_ZN5Timer13set_frequencyEm+0xc4>
 800db4a:	ed97 0a04 	vldr	s0, [r7, #16]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff febf 	bl	800d8d2 <_ZN5Timer3minEff>
 800db54:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800db58:	edd7 7a03 	vldr	s15, [r7, #12]
 800db5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db60:	ee17 2a90 	vmov	r2, s15
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3a01      	subs	r2, #1
 800db6c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800db6e:	bf00      	nop
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	4d832156 	.word	0x4d832156
 800db7c:	47800000 	.word	0x47800000

0800db80 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2201      	movs	r2, #1
 800db92:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	78fa      	ldrb	r2, [r7, #3]
 800db98:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3308      	adds	r3, #8
 800db9e:	68b9      	ldr	r1, [r7, #8]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f002 fb0e 	bl	80101c2 <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800dba6:	78fb      	ldrb	r3, [r7, #3]
 800dba8:	461a      	mov	r2, r3
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f7ff ff15 	bl	800d9dc <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f011 fb94 	bl	801f2e4 <HAL_TIM_Base_Start_IT>
	}
 800dbbc:	bf00      	nop
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3308      	adds	r3, #8
 800dbda:	68b9      	ldr	r1, [r7, #8]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f002 faf0 	bl	80101c2 <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff ff67 	bl	800dab8 <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f011 fb78 	bl	801f2e4 <HAL_TIM_Base_Start_IT>
	}
 800dbf4:	bf00      	nop
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZN5Timer5resetEv>:

	void reset(){
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	699b      	ldr	r3, [r3, #24]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f011 fbf1 	bl	801f3f0 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	701a      	strb	r2, [r3, #0]
	}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <_ZN5Timer14stop_interruptEv>:

	void stop_interrupt(){
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f011 fbe1 	bl	801f3f0 <HAL_TIM_Base_Stop_IT>
	}
 800dc2e:	bf00      	nop
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <_ZN5Timer15start_interruptEv>:

	void start_interrupt(){
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Start_IT(timer);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f011 fb4e 	bl	801f2e4 <HAL_TIM_Base_Start_IT>
	}
 800dc48:	bf00      	nop
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800dc66:	b590      	push	{r4, r7, lr}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff ffed 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800dc76:	4603      	mov	r3, r0
 800dc78:	681c      	ldr	r4, [r3, #0]
 800dc7a:	6838      	ldr	r0, [r7, #0]
 800dc7c:	f7ff ffe8 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800dc80:	4603      	mov	r3, r0
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	429c      	cmp	r4, r3
 800dc86:	bf0c      	ite	eq
 800dc88:	2301      	moveq	r3, #1
 800dc8a:	2300      	movne	r3, #0
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd90      	pop	{r4, r7, pc}

0800dc96 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800dc96:	b480      	push	{r7}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	1d1a      	adds	r2, r3, #4
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	601a      	str	r2, [r3, #0]
	return *this;
 800dca8:	687b      	ldr	r3, [r7, #4]
      }
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
	...

0800dcd0 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800dcd8:	4b19      	ldr	r3, [pc, #100]	; (800dd40 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	6978      	ldr	r0, [r7, #20]
 800dcde:	f002 fa8b 	bl	80101f8 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800dce2:	4603      	mov	r3, r0
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	6978      	ldr	r0, [r7, #20]
 800dce8:	f002 fa96 	bl	8010218 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800dcec:	4603      	mov	r3, r0
 800dcee:	60bb      	str	r3, [r7, #8]
 800dcf0:	f107 0208 	add.w	r2, r7, #8
 800dcf4:	f107 030c 	add.w	r3, r7, #12
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7ff ffb3 	bl	800dc66 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800dd00:	4603      	mov	r3, r0
 800dd02:	f083 0301 	eor.w	r3, r3, #1
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d015      	beq.n	800dd38 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800dd0c:	f107 030c 	add.w	r3, r7, #12
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff ffd0 	bl	800dcb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800dd16:	4603      	mov	r3, r0
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d102      	bne.n	800dd2c <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800dd26:	6938      	ldr	r0, [r7, #16]
 800dd28:	f7ff fdf0 	bl	800d90c <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800dd2c:	f107 030c 	add.w	r3, r7, #12
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff ffb0 	bl	800dc96 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800dd36:	e7db      	b.n	800dcf0 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800dd38:	bf00      	nop
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	240001a0 	.word	0x240001a0

0800dd44 <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	ed87 0a01 	vstr	s0, [r7, #4]
 800dd52:	edc7 0a00 	vstr	s1, [r7]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	605a      	str	r2, [r3, #4]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	609a      	str	r2, [r3, #8]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	60da      	str	r2, [r3, #12]
		do_scale = true;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	741a      	strb	r2, [r3, #16]
		size = precision_mode;
 800dd6e:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <_ZN13StreamMessageC1EPfff+0x44>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	601a      	str	r2, [r3, #0]
	}
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	24000001 	.word	0x24000001

0800dd8c <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	60da      	str	r2, [r3, #12]
		do_scale = false;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	741a      	strb	r2, [r3, #16]
		size = 1;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	601a      	str	r2, [r3, #0]
	}
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr
	...

0800ddb8 <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	7c1b      	ldrb	r3, [r3, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d036      	beq.n	800de38 <_ZN13StreamMessage7unparseEPh+0x80>
			float scale = (*((float*) ptr) - min) / (max - min);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	ed93 7a00 	vldr	s14, [r3]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ddd8:	ee77 6a67 	vsub.f32	s13, s14, s15
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	ed93 7a02 	vldr	s14, [r3, #8]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	edd3 7a01 	vldr	s15, [r3, #4]
 800dde8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddf0:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	74fb      	strb	r3, [r7, #19]
 800ddfc:	f107 0313 	add.w	r3, r7, #19
 800de00:	4619      	mov	r1, r3
 800de02:	4813      	ldr	r0, [pc, #76]	; (800de50 <_ZN13StreamMessage7unparseEPh+0x98>)
 800de04:	f002 fa1a 	bl	801023c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800de08:	4603      	mov	r3, r0
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	ee07 3a90 	vmov	s15, r3
 800de10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800de14:	edd7 7a05 	vldr	s15, [r7, #20]
 800de18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de20:	ee17 3a90 	vmov	r3, s15
 800de24:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	4619      	mov	r1, r3
 800de30:	6838      	ldr	r0, [r7, #0]
 800de32:	f013 fa73 	bl	802131c <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800de36:	e007      	b.n	800de48 <_ZN13StreamMessage7unparseEPh+0x90>
			memcpy(d, ptr, size);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	68d9      	ldr	r1, [r3, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	461a      	mov	r2, r3
 800de42:	6838      	ldr	r0, [r7, #0]
 800de44:	f013 fa6a 	bl	802131c <memcpy>
	}
 800de48:	bf00      	nop
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	24000188 	.word	0x24000188

0800de54 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800de54:	b590      	push	{r4, r7, lr}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800de5c:	2014      	movs	r0, #20
 800de5e:	f013 f931 	bl	80210c4 <_Znwj>
 800de62:	4603      	mov	r3, r0
 800de64:	461c      	mov	r4, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3314      	adds	r3, #20
 800de6a:	eddf 0a06 	vldr	s1, [pc, #24]	; 800de84 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800de6e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800de88 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800de72:	4619      	mov	r1, r3
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff ff65 	bl	800dd44 <_ZN13StreamMessageC1EPfff>
 800de7a:	4623      	mov	r3, r4
	}
 800de7c:	4618      	mov	r0, r3
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	bd90      	pop	{r4, r7, pc}
 800de84:	40533333 	.word	0x40533333
 800de88:	00000000 	.word	0x00000000

0800de8c <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800de94:	2014      	movs	r0, #20
 800de96:	f013 f915 	bl	80210c4 <_Znwj>
 800de9a:	4603      	mov	r3, r0
 800de9c:	461c      	mov	r4, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	3308      	adds	r3, #8
 800dea2:	4619      	mov	r1, r3
 800dea4:	4620      	mov	r0, r4
 800dea6:	f7ff ff71 	bl	800dd8c <_ZN13StreamMessageC1EPh>
 800deaa:	4623      	mov	r3, r4
	}
 800deac:	4618      	mov	r0, r3
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd90      	pop	{r4, r7, pc}

0800deb4 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->duty, 0, 100);
 800debc:	2014      	movs	r0, #20
 800debe:	f013 f901 	bl	80210c4 <_Znwj>
 800dec2:	4603      	mov	r3, r0
 800dec4:	461c      	mov	r4, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3350      	adds	r3, #80	; 0x50
 800deca:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dee4 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x30>
 800dece:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dee8 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x34>
 800ded2:	4619      	mov	r1, r3
 800ded4:	4620      	mov	r0, r4
 800ded6:	f7ff ff35 	bl	800dd44 <_ZN13StreamMessageC1EPfff>
 800deda:	4623      	mov	r3, r4
	}
 800dedc:	4618      	mov	r0, r3
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd90      	pop	{r4, r7, pc}
 800dee4:	42c80000 	.word	0x42c80000
 800dee8:	00000000 	.word	0x00000000

0800deec <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	799b      	ldrb	r3, [r3, #6]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d112      	bne.n	800df24 <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800defe:	463b      	mov	r3, r7
 800df00:	4619      	mov	r1, r3
 800df02:	4822      	ldr	r0, [pc, #136]	; (800df8c <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800df04:	f7f2 fd2c 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800df08:	4603      	mov	r3, r0
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff ffa1 	bl	800de54 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800df12:	4603      	mov	r3, r0
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	f107 030c 	add.w	r3, r7, #12
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f002 f9ed 	bl	80102fc <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800df22:	e02e      	b.n	800df82 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	799b      	ldrb	r3, [r3, #6]
 800df28:	2b05      	cmp	r3, #5
 800df2a:	d112      	bne.n	800df52 <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800df2c:	463b      	mov	r3, r7
 800df2e:	4619      	mov	r1, r3
 800df30:	4817      	ldr	r0, [pc, #92]	; (800df90 <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800df32:	f7f8 fbf3 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800df36:	4603      	mov	r3, r0
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ffa6 	bl	800de8c <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800df40:	4603      	mov	r3, r0
 800df42:	613b      	str	r3, [r7, #16]
 800df44:	f107 0310 	add.w	r3, r7, #16
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f002 f9d6 	bl	80102fc <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800df50:	e017      	b.n	800df82 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	799b      	ldrb	r3, [r3, #6]
 800df56:	2b03      	cmp	r3, #3
 800df58:	d112      	bne.n	800df80 <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800df5a:	463b      	mov	r3, r7
 800df5c:	4619      	mov	r1, r3
 800df5e:	480d      	ldr	r0, [pc, #52]	; (800df94 <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800df60:	f7fb fd70 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800df64:	4603      	mov	r3, r0
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7ff ffa3 	bl	800deb4 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800df6e:	4603      	mov	r3, r0
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	f107 0314 	add.w	r3, r7, #20
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f002 f9bf 	bl	80102fc <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800df7e:	e000      	b.n	800df82 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800df80:	bf00      	nop
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	240000bc 	.word	0x240000bc
 800df90:	2400011c 	.word	0x2400011c
 800df94:	24000164 	.word	0x24000164

0800df98 <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4603      	mov	r3, r0
 800dfa0:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800dfa2:	79fb      	ldrb	r3, [r7, #7]
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	d901      	bls.n	800dfac <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	e003      	b.n	800dfb4 <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800dfac:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	7013      	strb	r3, [r2, #0]
		return true;
 800dfb2:	2301      	movs	r3, #1
	}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	24000001 	.word	0x24000001

0800dfc4 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dfc4:	b480      	push	{r7}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	bf0c      	ite	eq
 800dfd8:	2301      	moveq	r3, #1
 800dfda:	2300      	movne	r3, #0
 800dfdc:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	695a      	ldr	r2, [r3, #20]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	2b40      	cmp	r3, #64	; 0x40
 800dfe8:	bf8c      	ite	hi
 800dfea:	2301      	movhi	r3, #1
 800dfec:	2300      	movls	r3, #0
 800dfee:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	bf0c      	ite	eq
 800dffa:	2301      	moveq	r3, #1
 800dffc:	2300      	movne	r3, #0
 800dffe:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	f083 0301 	eor.w	r3, r3, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d108      	bne.n	800e01e <_ZN6Stream12is_availableEjj+0x5a>
 800e00c:	7d7b      	ldrb	r3, [r7, #21]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <_ZN6Stream12is_availableEjj+0x5e>
 800e012:	7dbb      	ldrb	r3, [r7, #22]
 800e014:	f083 0301 	eor.w	r3, r3, #1
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <_ZN6Stream12is_availableEjj+0x5e>
 800e01e:	2301      	movs	r3, #1
 800e020:	e000      	b.n	800e024 <_ZN6Stream12is_availableEjj+0x60>
 800e022:	2300      	movs	r3, #0
	}
 800e024:	4618      	mov	r0, r3
 800e026:	371c      	adds	r7, #28
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <_ZN6Stream16send_ok_responseEh>:

	void send_ok_response(uint8_t offset){
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
		can->TxData[0] = Can::Ok;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a1b      	ldr	r3, [r3, #32]
 800e040:	2200      	movs	r2, #0
 800e042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	7e12      	ldrb	r2, [r2, #24]
 800e04e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	78fa      	ldrb	r2, [r7, #3]
 800e058:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(READ_STREAM_ID, 3);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a1b      	ldr	r3, [r3, #32]
 800e060:	2203      	movs	r2, #3
 800e062:	2105      	movs	r1, #5
 800e064:	4618      	mov	r0, r3
 800e066:	f7f6 fe83 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <_ZN6Stream5emptyEh>:

	bool empty(uint8_t offset){
 800e072:	b590      	push	{r4, r7, lr}
 800e074:	b08b      	sub	sp, #44	; 0x2c
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]
		bool success = false;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		timer->stop_interrupt();
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	4618      	mov	r0, r3
 800e08a:	f7ff fdc7 	bl	800dc1c <_ZN5Timer14stop_interruptEv>
		uint8_t current_offset = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		size_t i = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	623b      	str	r3, [r7, #32]

		while(i < messages.size()){
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3308      	adds	r3, #8
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 f941 	bl	8010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	bf34      	ite	cc
 800e0aa:	2301      	movcc	r3, #1
 800e0ac:	2300      	movcs	r3, #0
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d04e      	beq.n	800e152 <_ZN6Stream5emptyEh+0xe0>
			StreamMessage* message = messages[i];
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	6a39      	ldr	r1, [r7, #32]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f002 f942 	bl	8010344 <_ZNSt6vectorIP13StreamMessageSaIS1_EEixEj>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	61fb      	str	r3, [r7, #28]
			size_t message_size = message->size;
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	61bb      	str	r3, [r7, #24]

			if(current_offset == offset || offset == 255){
 800e0cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d002      	beq.n	800e0dc <_ZN6Stream5emptyEh+0x6a>
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	2bff      	cmp	r3, #255	; 0xff
 800e0da:	d12f      	bne.n	800e13c <_ZN6Stream5emptyEh+0xca>
				messages.erase(messages.begin() + i);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f103 0408 	add.w	r4, r3, #8
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f002 f93c 	bl	8010364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	6a3a      	ldr	r2, [r7, #32]
 800e0f2:	f107 0314 	add.w	r3, r7, #20
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f002 f943 	bl	8010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 800e0fe:	4603      	mov	r3, r0
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	f107 0210 	add.w	r2, r7, #16
 800e106:	f107 030c 	add.w	r3, r7, #12
 800e10a:	4611      	mov	r1, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f002 f951 	bl	80103b4 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800e112:	68f9      	ldr	r1, [r7, #12]
 800e114:	4620      	mov	r0, r4
 800e116:	f002 f95e 	bl	80103d6 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
				this->size -= message_size;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	695a      	ldr	r2, [r3, #20]
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	1ad2      	subs	r2, r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	615a      	str	r2, [r3, #20]
				delete message;
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <_ZN6Stream5emptyEh+0xc2>
 800e12c:	2114      	movs	r1, #20
 800e12e:	4618      	mov	r0, r3
 800e130:	f012 ffc6 	bl	80210c0 <_ZdlPvj>
				success = true;
 800e134:	2301      	movs	r3, #1
 800e136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e13a:	e002      	b.n	800e142 <_ZN6Stream5emptyEh+0xd0>
			}else{
				i++;
 800e13c:	6a3b      	ldr	r3, [r7, #32]
 800e13e:	3301      	adds	r3, #1
 800e140:	623b      	str	r3, [r7, #32]
			}
			current_offset += message_size;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	b2da      	uxtb	r2, r3
 800e146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e14a:	4413      	add	r3, r2
 800e14c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(i < messages.size()){
 800e150:	e7a2      	b.n	800e098 <_ZN6Stream5emptyEh+0x26>
		}

		if(this->size != 0){
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d005      	beq.n	800e166 <_ZN6Stream5emptyEh+0xf4>
			timer->start_interrupt();
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff fd69 	bl	800dc36 <_ZN5Timer15start_interruptEv>
 800e164:	e00d      	b.n	800e182 <_ZN6Stream5emptyEh+0x110>
		}else{
			timer->reset();
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	69db      	ldr	r3, [r3, #28]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff fd46 	bl	800dbfc <_ZN5Timer5resetEv>
			state = FREE;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	701a      	strb	r2, [r3, #0]
			frequency = 0;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	605a      	str	r2, [r3, #4]
			size = 0;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	615a      	str	r2, [r3, #20]
		}

		return success;
 800e182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	}
 800e186:	4618      	mov	r0, r3
 800e188:	372c      	adds	r7, #44	; 0x2c
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd90      	pop	{r4, r7, pc}

0800e18e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f002 f954 	bl	8010444 <_ZNSaIP13StreamMessageED1Ev>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f002 f937 	bl	8010424 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7ff ffeb 	bl	800e1a6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
	...

0800e1dc <_ZN6StreamC1EP5TimerP3Can>:

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff ffe4 	bl	800e1c0 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	615a      	str	r2, [r3, #20]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	61da      	str	r2, [r3, #28]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	617b      	str	r3, [r7, #20]
 800e20e:	f107 0314 	add.w	r3, r7, #20
 800e212:	4619      	mov	r1, r3
 800e214:	4808      	ldr	r0, [pc, #32]	; (800e238 <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800e216:	f002 f954 	bl	80104c2 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800e21a:	4b08      	ldr	r3, [pc, #32]	; (800e23c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800e21c:	781a      	ldrb	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800e222:	4b06      	ldr	r3, [pc, #24]	; (800e23c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	3301      	adds	r3, #1
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b04      	ldr	r3, [pc, #16]	; (800e23c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800e22c:	701a      	strb	r2, [r3, #0]
	}
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2400017c 	.word	0x2400017c
 800e23c:	24000000 	.word	0x24000000

0800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e256:	b590      	push	{r4, r7, lr}
 800e258:	b083      	sub	sp, #12
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff ffed 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800e266:	4603      	mov	r3, r0
 800e268:	681c      	ldr	r4, [r3, #0]
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f7ff ffe8 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800e270:	4603      	mov	r3, r0
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	429c      	cmp	r4, r3
 800e276:	bf0c      	ite	eq
 800e278:	2301      	moveq	r3, #1
 800e27a:	2300      	movne	r3, #0
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	4618      	mov	r0, r3
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	bd90      	pop	{r4, r7, pc}

0800e286 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e286:	b480      	push	{r7}
 800e288:	b083      	sub	sp, #12
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	1d1a      	adds	r2, r3, #4
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	601a      	str	r2, [r3, #0]
	return *this;
 800e298:	687b      	ldr	r3, [r7, #4]
      }
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e2a6:	b480      	push	{r7}
 800e2a8:	b083      	sub	sp, #12
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b088      	sub	sp, #32
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	3350      	adds	r3, #80	; 0x50
 800e2d0:	2240      	movs	r2, #64	; 0x40
 800e2d2:	21ff      	movs	r1, #255	; 0xff
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f013 f849 	bl	802136c <memset>
		for(auto message : messages){
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3308      	adds	r3, #8
 800e2de:	61bb      	str	r3, [r7, #24]
 800e2e0:	69b8      	ldr	r0, [r7, #24]
 800e2e2:	f002 f83f 	bl	8010364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	613b      	str	r3, [r7, #16]
 800e2ea:	69b8      	ldr	r0, [r7, #24]
 800e2ec:	f002 f8fa 	bl	80104e4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	f107 020c 	add.w	r2, r7, #12
 800e2f8:	f107 0310 	add.w	r3, r7, #16
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffa9 	bl	800e256 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e304:	4603      	mov	r3, r0
 800e306:	f083 0301 	eor.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01b      	beq.n	800e348 <_ZN6Stream17send_all_messagesEv+0x8a>
 800e310:	f107 0310 	add.w	r3, r7, #16
 800e314:	4618      	mov	r0, r3
 800e316:	f7ff ffc6 	bl	800e2a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800e31a:	4603      	mov	r3, r0
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a1a      	ldr	r2, [r3, #32]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	3350      	adds	r3, #80	; 0x50
 800e328:	4413      	add	r3, r2
 800e32a:	4619      	mov	r1, r3
 800e32c:	6978      	ldr	r0, [r7, #20]
 800e32e:	f7ff fd43 	bl	800ddb8 <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	69fa      	ldr	r2, [r7, #28]
 800e338:	4413      	add	r3, r2
 800e33a:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800e33c:	f107 0310 	add.w	r3, r7, #16
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff ffa0 	bl	800e286 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800e346:	e7d5      	b.n	800e2f4 <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, size);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a18      	ldr	r0, [r3, #32]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7e1b      	ldrb	r3, [r3, #24]
 800e350:	b299      	uxth	r1, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	461a      	mov	r2, r3
 800e358:	f7f6 fd0a 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800e35c:	bf00      	nop
 800e35e:	3720      	adds	r7, #32
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <_ZZN6Stream11add_messageEmP13StreamMessageENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ffa4 	bl	800e2be <_ZN6Stream17send_all_messagesEv>
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <_ZN6Stream11add_messageEmP13StreamMessage>:
	void add_message(uint32_t frequency, StreamMessage* message){
 800e37e:	b590      	push	{r4, r7, lr}
 800e380:	b089      	sub	sp, #36	; 0x24
 800e382:	af00      	add	r7, sp, #0
 800e384:	60f8      	str	r0, [r7, #12]
 800e386:	60b9      	str	r1, [r7, #8]
 800e388:	607a      	str	r2, [r7, #4]
		messages.push_back(message);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3308      	adds	r3, #8
 800e38e:	1d3a      	adds	r2, r7, #4
 800e390:	4611      	mov	r1, r2
 800e392:	4618      	mov	r0, r3
 800e394:	f002 f8b7 	bl	8010506 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d117      	bne.n	800e3d0 <_ZN6Stream11add_messageEmP13StreamMessage+0x52>
			state = OCCUPIED;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	69dc      	ldr	r4, [r3, #28]
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	f107 0310 	add.w	r3, r7, #16
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f002 f8cc 	bl	8010550 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_>
 800e3b8:	f107 0310 	add.w	r3, r7, #16
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f7ff fbff 	bl	800dbc4 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e3c6:	f107 0310 	add.w	r3, r7, #16
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff fadc 	bl	800d988 <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	605a      	str	r2, [r3, #4]
		send_ok_response(size);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	4619      	mov	r1, r3
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f7ff fe26 	bl	800e030 <_ZN6Stream16send_ok_responseEh>
 		size += message->size;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	695a      	ldr	r2, [r3, #20]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	441a      	add	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	615a      	str	r2, [r3, #20]
	}
 800e3f2:	bf00      	nop
 800e3f4:	3724      	adds	r7, #36	; 0x24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd90      	pop	{r4, r7, pc}

0800e3fa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e3fa:	b480      	push	{r7}
 800e3fc:	b083      	sub	sp, #12
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	791b      	ldrb	r3, [r3, #4]
 800e406:	4618      	mov	r0, r3
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e412:	b580      	push	{r7, lr}
 800e414:	b082      	sub	sp, #8
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff ffed 	bl	800e3fa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e420:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e422:	2b00      	cmp	r3, #0
 800e424:	d004      	beq.n	800e430 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f002 f8c8 	bl	80105bc <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e42c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e42e:	e001      	b.n	800e434 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e430:	f7f6 fadb 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	4618      	mov	r0, r3
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e452:	b590      	push	{r4, r7, lr}
 800e454:	b083      	sub	sp, #12
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7ff ffed 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e462:	4603      	mov	r3, r0
 800e464:	681c      	ldr	r4, [r3, #0]
 800e466:	6838      	ldr	r0, [r7, #0]
 800e468:	f7ff ffe8 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e46c:	4603      	mov	r3, r0
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	429c      	cmp	r4, r3
 800e472:	bf0c      	ite	eq
 800e474:	2301      	moveq	r3, #1
 800e476:	2300      	movne	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	4618      	mov	r0, r3
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd90      	pop	{r4, r7, pc}

0800e482 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	1d1a      	adds	r2, r3, #4
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	601a      	str	r2, [r3, #0]
	return *this;
 800e494:	687b      	ldr	r3, [r7, #4]
      }
 800e496:	4618      	mov	r0, r3
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e4a2:	b480      	push	{r7}
 800e4a4:	b083      	sub	sp, #12
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
	...

0800e4bc <_ZN6Stream10add_streamEjP3Pin>:

	static bool add_stream(unsigned int frequency, Pin* pin) {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08a      	sub	sp, #40	; 0x28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e4c6:	f107 0314 	add.w	r3, r7, #20
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7ff fd0d 	bl	800deec <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e4d2:	f107 0314 	add.w	r3, r7, #20
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f002 f864 	bl	80105a4 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d040      	beq.n	800e564 <_ZN6Stream10add_streamEjP3Pin+0xa8>
			StreamMessage* message = message_optional.value();
 800e4e2:	f107 0314 	add.w	r3, r7, #20
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff ff93 	bl	800e412 <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
			for(auto s : streams){
 800e4f2:	4b1f      	ldr	r3, [pc, #124]	; (800e570 <_ZN6Stream10add_streamEjP3Pin+0xb4>)
 800e4f4:	623b      	str	r3, [r7, #32]
 800e4f6:	6a38      	ldr	r0, [r7, #32]
 800e4f8:	f002 f86d 	bl	80105d6 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	613b      	str	r3, [r7, #16]
 800e500:	6a38      	ldr	r0, [r7, #32]
 800e502:	f002 f878 	bl	80105f6 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e506:	4603      	mov	r3, r0
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	f107 020c 	add.w	r2, r7, #12
 800e50e:	f107 0310 	add.w	r3, r7, #16
 800e512:	4611      	mov	r1, r2
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff ff9c 	bl	800e452 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e51a:	4603      	mov	r3, r0
 800e51c:	f083 0301 	eor.w	r3, r3, #1
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d01e      	beq.n	800e564 <_ZN6Stream10add_streamEjP3Pin+0xa8>
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff ffb9 	bl	800e4a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e530:	4603      	mov	r3, r0
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	61fb      	str	r3, [r7, #28]
				if(s->is_available(frequency, message->size)){
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	69f8      	ldr	r0, [r7, #28]
 800e540:	f7ff fd40 	bl	800dfc4 <_ZN6Stream12is_availableEjj>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d006      	beq.n	800e558 <_ZN6Stream10add_streamEjP3Pin+0x9c>
					s->add_message(frequency, message);
 800e54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54c:	6879      	ldr	r1, [r7, #4]
 800e54e:	69f8      	ldr	r0, [r7, #28]
 800e550:	f7ff ff15 	bl	800e37e <_ZN6Stream11add_messageEmP13StreamMessage>
					return true;
 800e554:	2301      	movs	r3, #1
 800e556:	e006      	b.n	800e566 <_ZN6Stream10add_streamEjP3Pin+0xaa>
			for(auto s : streams){
 800e558:	f107 0310 	add.w	r3, r7, #16
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff ff90 	bl	800e482 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e562:	e7d2      	b.n	800e50a <_ZN6Stream10add_streamEjP3Pin+0x4e>
				}

			}
		}
		return false;
 800e564:	2300      	movs	r3, #0
	}
 800e566:	4618      	mov	r0, r3
 800e568:	3728      	adds	r7, #40	; 0x28
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	2400017c 	.word	0x2400017c

0800e574 <_ZN6Stream5emptyEhh>:

	static bool empty(uint8_t id, uint8_t offset) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	460a      	mov	r2, r1
 800e57e:	71fb      	strb	r3, [r7, #7]
 800e580:	4613      	mov	r3, r2
 800e582:	71bb      	strb	r3, [r7, #6]
		int succes_count = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	61fb      	str	r3, [r7, #28]
		for(auto stream : streams) {
 800e588:	4b21      	ldr	r3, [pc, #132]	; (800e610 <_ZN6Stream5emptyEhh+0x9c>)
 800e58a:	61bb      	str	r3, [r7, #24]
 800e58c:	69b8      	ldr	r0, [r7, #24]
 800e58e:	f002 f822 	bl	80105d6 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e592:	4603      	mov	r3, r0
 800e594:	613b      	str	r3, [r7, #16]
 800e596:	69b8      	ldr	r0, [r7, #24]
 800e598:	f002 f82d 	bl	80105f6 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e59c:	4603      	mov	r3, r0
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	f107 020c 	add.w	r2, r7, #12
 800e5a4:	f107 0310 	add.w	r3, r7, #16
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff ff51 	bl	800e452 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f083 0301 	eor.w	r3, r3, #1
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d01f      	beq.n	800e5fc <_ZN6Stream5emptyEhh+0x88>
 800e5bc:	f107 0310 	add.w	r3, r7, #16
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff ff6e 	bl	800e4a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	617b      	str	r3, [r7, #20]
			if(stream->id == id || id ==  255) {
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	7e1b      	ldrb	r3, [r3, #24]
 800e5d0:	79fa      	ldrb	r2, [r7, #7]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d002      	beq.n	800e5dc <_ZN6Stream5emptyEhh+0x68>
 800e5d6:	79fb      	ldrb	r3, [r7, #7]
 800e5d8:	2bff      	cmp	r3, #255	; 0xff
 800e5da:	d109      	bne.n	800e5f0 <_ZN6Stream5emptyEhh+0x7c>
				succes_count += stream->empty(offset);
 800e5dc:	79bb      	ldrb	r3, [r7, #6]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6978      	ldr	r0, [r7, #20]
 800e5e2:	f7ff fd46 	bl	800e072 <_ZN6Stream5emptyEh>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	61fb      	str	r3, [r7, #28]
		for(auto stream : streams) {
 800e5f0:	f107 0310 	add.w	r3, r7, #16
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7ff ff44 	bl	800e482 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e5fa:	e7d1      	b.n	800e5a0 <_ZN6Stream5emptyEhh+0x2c>
			}
		}
		return succes_count > 0;
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	bfcc      	ite	gt
 800e602:	2301      	movgt	r3, #1
 800e604:	2300      	movle	r3, #0
 800e606:	b2db      	uxtb	r3, r3
	}
 800e608:	4618      	mov	r0, r3
 800e60a:	3720      	adds	r7, #32
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	2400017c 	.word	0x2400017c

0800e614 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e618:	f7fb f8fa 	bl	8009810 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e61c:	f7f4 feb2 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e620:	f7f2 f83c 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e624:	f7f6 fb08 	bl	8004c38 <_ZN3Can14start_all_cansEv>
	Stream::add_stream(1000, &PA6);
 800e628:	4903      	ldr	r1, [pc, #12]	; (800e638 <_Z5startv+0x24>)
 800e62a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e62e:	f7ff ff45 	bl	800e4bc <_ZN6Stream10add_streamEjP3Pin>
}
 800e632:	bf00      	nop
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	24000200 	.word	0x24000200

0800e63c <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7fb f913 	bl	8009870 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e65a:	f7f2 f84f 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e65e:	bf00      	nop
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e666:	b580      	push	{r7, lr}
 800e668:	b082      	sub	sp, #8
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff fb2e 	bl	800dcd0 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7f6 fcc7 	bl	800501c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e68e:	bf00      	nop
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	791b      	ldrb	r3, [r3, #4]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff ffed 	bl	800e696 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e6bc:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f002 f888 	bl	80107d8 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e6c8:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e6ca:	e001      	b.n	800e6d0 <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e6cc:	f7f6 f98d 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <_Z18read_once_callbackv>:

// MESSAGE CALLBACKS

void read_once_callback() {
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e6de:	4b35      	ldr	r3, [pc, #212]	; (800e7b4 <_Z18read_once_callbackv+0xdc>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	1d3b      	adds	r3, r7, #4
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe f8d1 	bl	800c890 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e6ee:	1d3b      	adds	r3, r7, #4
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f002 f865 	bl	80107c0 <_ZNKSt8optionalIP3PinEcvbEv>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d057      	beq.n	800e7ac <_Z18read_once_callbackv+0xd4>
		Pin* pin = pin_optional.value();
 800e6fc:	1d3b      	adds	r3, r7, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff ffd5 	bl	800e6ae <_ZNRSt8optionalIP3PinE5valueEv>
 800e704:	4603      	mov	r3, r0
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	603b      	str	r3, [r7, #0]
		uint32_t size;
		uint8_t* ptr;

		if(pin->mode == ANALOG_INPUT){
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	799b      	ldrb	r3, [r3, #6]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d114      	bne.n	800e73c <_Z18read_once_callbackv+0x64>
			if(AnalogIn::analog_in_from_pin.contains(pin)){
 800e712:	463b      	mov	r3, r7
 800e714:	4619      	mov	r1, r3
 800e716:	4828      	ldr	r0, [pc, #160]	; (800e7b8 <_Z18read_once_callbackv+0xe0>)
 800e718:	f002 f86b 	bl	80107f2 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00c      	beq.n	800e73c <_Z18read_once_callbackv+0x64>
				AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e722:	463b      	mov	r3, r7
 800e724:	4619      	mov	r1, r3
 800e726:	4824      	ldr	r0, [pc, #144]	; (800e7b8 <_Z18read_once_callbackv+0xe0>)
 800e728:	f7f2 f91a 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e72c:	4603      	mov	r3, r0
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	617b      	str	r3, [r7, #20]
				ptr = (uint8_t*) &in->voltage;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	3314      	adds	r3, #20
 800e736:	61bb      	str	r3, [r7, #24]
				size = sizeof(float);
 800e738:	2304      	movs	r3, #4
 800e73a:	61fb      	str	r3, [r7, #28]
			}
		}

		if(pin->mode == DIGITAL_INPUT){
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	799b      	ldrb	r3, [r3, #6]
 800e740:	2b05      	cmp	r3, #5
 800e742:	d114      	bne.n	800e76e <_Z18read_once_callbackv+0x96>
			if(DigitalIn::pin_to_digital_in.contains(pin)){
 800e744:	463b      	mov	r3, r7
 800e746:	4619      	mov	r1, r3
 800e748:	481c      	ldr	r0, [pc, #112]	; (800e7bc <_Z18read_once_callbackv+0xe4>)
 800e74a:	f002 f874 	bl	8010836 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00c      	beq.n	800e76e <_Z18read_once_callbackv+0x96>
				DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e754:	463b      	mov	r3, r7
 800e756:	4619      	mov	r1, r3
 800e758:	4818      	ldr	r0, [pc, #96]	; (800e7bc <_Z18read_once_callbackv+0xe4>)
 800e75a:	f7f7 ffdf 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e75e:	4603      	mov	r3, r0
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	613b      	str	r3, [r7, #16]
				ptr = (uint8_t*) &in->state;
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	3308      	adds	r3, #8
 800e768:	61bb      	str	r3, [r7, #24]
				size = sizeof(uint8_t);
 800e76a:	2301      	movs	r3, #1
 800e76c:	61fb      	str	r3, [r7, #28]
			}
		}

		if(pin->mode == INPUT_CAPTURE){
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	799b      	ldrb	r3, [r3, #6]
 800e772:	2b03      	cmp	r3, #3
 800e774:	d114      	bne.n	800e7a0 <_Z18read_once_callbackv+0xc8>
			if(InputCapture::pin_to_input_capture.contains(pin)){
 800e776:	463b      	mov	r3, r7
 800e778:	4619      	mov	r1, r3
 800e77a:	4811      	ldr	r0, [pc, #68]	; (800e7c0 <_Z18read_once_callbackv+0xe8>)
 800e77c:	f002 f87d 	bl	801087a <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00c      	beq.n	800e7a0 <_Z18read_once_callbackv+0xc8>
				InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e786:	463b      	mov	r3, r7
 800e788:	4619      	mov	r1, r3
 800e78a:	480d      	ldr	r0, [pc, #52]	; (800e7c0 <_Z18read_once_callbackv+0xe8>)
 800e78c:	f7fb f95a 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e790:	4603      	mov	r3, r0
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	60fb      	str	r3, [r7, #12]
				ptr = (uint8_t*) &in->frequency;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	334c      	adds	r3, #76	; 0x4c
 800e79a:	61bb      	str	r3, [r7, #24]
				size = sizeof(float) * 2;
 800e79c:	2308      	movs	r3, #8
 800e79e:	61fb      	str	r3, [r7, #28]
			}
		}

		main_can.send_message(READ_ONCE_ID, ptr, size);
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	69ba      	ldr	r2, [r7, #24]
 800e7a4:	2104      	movs	r1, #4
 800e7a6:	4807      	ldr	r0, [pc, #28]	; (800e7c4 <_Z18read_once_callbackv+0xec>)
 800e7a8:	f7f6 fa8a 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
	}

}
 800e7ac:	bf00      	nop
 800e7ae:	3720      	adds	r7, #32
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	24000e90 	.word	0x24000e90
 800e7b8:	240000bc 	.word	0x240000bc
 800e7bc:	2400011c 	.word	0x2400011c
 800e7c0:	24000164 	.word	0x24000164
 800e7c4:	24000dc0 	.word	0x24000dc0

0800e7c8 <_Z20read_stream_callbackv>:

void read_stream_callback() {
 800e7c8:	b590      	push	{r4, r7, lr}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
	optional<Pin*> pin = Pin::get_pin_from_id(read_stream_pin);
 800e7ce:	4b15      	ldr	r3, [pc, #84]	; (800e824 <_Z20read_stream_callbackv+0x5c>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	463b      	mov	r3, r7
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe f859 	bl	800c890 <_ZN3Pin15get_pin_from_idEt>
	if(pin){
 800e7de:	463b      	mov	r3, r7
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f001 ffed 	bl	80107c0 <_ZNKSt8optionalIP3PinEcvbEv>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d017      	beq.n	800e81c <_Z20read_stream_callbackv+0x54>
		if(!Stream::add_stream(read_stream_freq, pin.value()))
 800e7ec:	4b0e      	ldr	r3, [pc, #56]	; (800e828 <_Z20read_stream_callbackv+0x60>)
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	461c      	mov	r4, r3
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff ff5a 	bl	800e6ae <_ZNRSt8optionalIP3PinE5valueEv>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4619      	mov	r1, r3
 800e800:	4620      	mov	r0, r4
 800e802:	f7ff fe5b 	bl	800e4bc <_ZN6Stream10add_streamEjP3Pin>
 800e806:	4603      	mov	r3, r0
 800e808:	f083 0301 	eor.w	r3, r3, #1
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d004      	beq.n	800e81c <_Z20read_stream_callbackv+0x54>
			main_can.send_error_message(READ_STREAM_ID, "ERROR: all streams are full");
 800e812:	4a06      	ldr	r2, [pc, #24]	; (800e82c <_Z20read_stream_callbackv+0x64>)
 800e814:	2105      	movs	r1, #5
 800e816:	4806      	ldr	r0, [pc, #24]	; (800e830 <_Z20read_stream_callbackv+0x68>)
 800e818:	f7f6 faed 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
	}
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	bd90      	pop	{r4, r7, pc}
 800e824:	24000e98 	.word	0x24000e98
 800e828:	24000e9a 	.word	0x24000e9a
 800e82c:	08021794 	.word	0x08021794
 800e830:	24000dc0 	.word	0x24000dc0

0800e834 <_Z19write_once_callbackv>:

void write_once_callback(){
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e83a:	4b34      	ldr	r3, [pc, #208]	; (800e90c <_Z19write_once_callbackv+0xd8>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	b29a      	uxth	r2, r3
 800e840:	f107 0308 	add.w	r3, r7, #8
 800e844:	4611      	mov	r1, r2
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f822 	bl	800c890 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e84c:	f107 0308 	add.w	r3, r7, #8
 800e850:	4618      	mov	r0, r3
 800e852:	f001 ffb5 	bl	80107c0 <_ZNKSt8optionalIP3PinEcvbEv>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d04f      	beq.n	800e8fc <_Z19write_once_callbackv+0xc8>
		Pin* pin = pin_optional.value();
 800e85c:	f107 0308 	add.w	r3, r7, #8
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff ff24 	bl	800e6ae <_ZNRSt8optionalIP3PinE5valueEv>
 800e866:	4603      	mov	r3, r0
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)){
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	799b      	ldrb	r3, [r3, #6]
 800e870:	2b04      	cmp	r3, #4
 800e872:	d109      	bne.n	800e888 <_Z19write_once_callbackv+0x54>
 800e874:	1d3b      	adds	r3, r7, #4
 800e876:	4619      	mov	r1, r3
 800e878:	4825      	ldr	r0, [pc, #148]	; (800e910 <_Z19write_once_callbackv+0xdc>)
 800e87a:	f002 f820 	bl	80108be <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <_Z19write_once_callbackv+0x54>
 800e884:	2301      	movs	r3, #1
 800e886:	e000      	b.n	800e88a <_Z19write_once_callbackv+0x56>
 800e888:	2300      	movs	r3, #0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e88e:	1d3b      	adds	r3, r7, #4
 800e890:	4619      	mov	r1, r3
 800e892:	481f      	ldr	r0, [pc, #124]	; (800e910 <_Z19write_once_callbackv+0xdc>)
 800e894:	f7f9 fb08 	bl	8007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e898:	4603      	mov	r3, r0
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e89e:	4b1d      	ldr	r3, [pc, #116]	; (800e914 <_Z19write_once_callbackv+0xe0>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	6938      	ldr	r0, [r7, #16]
 800e8a8:	f7f9 fa4c 	bl	8007d44 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800e8ac:	e02b      	b.n	800e906 <_Z19write_once_callbackv+0xd2>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)){
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	799b      	ldrb	r3, [r3, #6]
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d109      	bne.n	800e8ca <_Z19write_once_callbackv+0x96>
 800e8b6:	1d3b      	adds	r3, r7, #4
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4817      	ldr	r0, [pc, #92]	; (800e918 <_Z19write_once_callbackv+0xe4>)
 800e8bc:	f002 f821 	bl	8010902 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <_Z19write_once_callbackv+0x96>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e000      	b.n	800e8cc <_Z19write_once_callbackv+0x98>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d015      	beq.n	800e8fc <_Z19write_once_callbackv+0xc8>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e8d0:	1d3b      	adds	r3, r7, #4
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4810      	ldr	r0, [pc, #64]	; (800e918 <_Z19write_once_callbackv+0xe4>)
 800e8d6:	f7f4 fdff 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e8e0:	4b0c      	ldr	r3, [pc, #48]	; (800e914 <_Z19write_once_callbackv+0xe0>)
 800e8e2:	edd3 7a00 	vldr	s15, [r3]
 800e8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ea:	6978      	ldr	r0, [r7, #20]
 800e8ec:	f7f4 fc82 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			main_can.send_message(WRITE_ONCE_ID,  0);
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2106      	movs	r1, #6
 800e8f4:	4809      	ldr	r0, [pc, #36]	; (800e91c <_Z19write_once_callbackv+0xe8>)
 800e8f6:	f7f6 fa3b 	bl	8004d70 <_ZN3Can12send_messageEtm>
			return;
 800e8fa:	e004      	b.n	800e906 <_Z19write_once_callbackv+0xd2>
		}

	}

	main_can.send_error_message(WRITE_ONCE_ID, "ERROR: Pin not found...");
 800e8fc:	4a08      	ldr	r2, [pc, #32]	; (800e920 <_Z19write_once_callbackv+0xec>)
 800e8fe:	2106      	movs	r1, #6
 800e900:	4806      	ldr	r0, [pc, #24]	; (800e91c <_Z19write_once_callbackv+0xe8>)
 800e902:	f7f6 fa78 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	24000e91 	.word	0x24000e91
 800e910:	24000140 	.word	0x24000140
 800e914:	24000e94 	.word	0x24000e94
 800e918:	240000e0 	.word	0x240000e0
 800e91c:	24000dc0 	.word	0x24000dc0
 800e920:	080217b0 	.word	0x080217b0

0800e924 <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e924:	b580      	push	{r7, lr}
 800e926:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e928:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <_Z22set_precision_callbackv+0x34>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7ff fb33 	bl	800df98 <_ZN13StreamMessage18set_precision_modeEh>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d009      	beq.n	800e94c <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e938:	4b08      	ldr	r3, [pc, #32]	; (800e95c <_Z22set_precision_callbackv+0x38>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(SET_PRECISION_ID,1);
 800e940:	2201      	movs	r2, #1
 800e942:	2107      	movs	r1, #7
 800e944:	4805      	ldr	r0, [pc, #20]	; (800e95c <_Z22set_precision_callbackv+0x38>)
 800e946:	f7f6 fa13 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e94a:	e004      	b.n	800e956 <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(SET_PRECISION_ID, "Error: cannot change precision");
 800e94c:	4a04      	ldr	r2, [pc, #16]	; (800e960 <_Z22set_precision_callbackv+0x3c>)
 800e94e:	2107      	movs	r1, #7
 800e950:	4802      	ldr	r0, [pc, #8]	; (800e95c <_Z22set_precision_callbackv+0x38>)
 800e952:	f7f6 fa50 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e956:	bd80      	pop	{r7, pc}
 800e958:	24000e9c 	.word	0x24000e9c
 800e95c:	24000dc0 	.word	0x24000dc0
 800e960:	080217c8 	.word	0x080217c8

0800e964 <_Z22cancel_stream_callbackv>:

void cancel_stream_callback(){
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
	if(Stream::empty(cancel_stream_id, cancel_stream_offset))
 800e968:	4b08      	ldr	r3, [pc, #32]	; (800e98c <_Z22cancel_stream_callbackv+0x28>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	4a08      	ldr	r2, [pc, #32]	; (800e990 <_Z22cancel_stream_callbackv+0x2c>)
 800e96e:	7812      	ldrb	r2, [r2, #0]
 800e970:	4611      	mov	r1, r2
 800e972:	4618      	mov	r0, r3
 800e974:	f7ff fdfe 	bl	800e574 <_ZN6Stream5emptyEhh>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d004      	beq.n	800e988 <_Z22cancel_stream_callbackv+0x24>
		main_can.send_error_message(CANCEL_STREAM_ID, "Error: cannot delete message");
 800e97e:	4a05      	ldr	r2, [pc, #20]	; (800e994 <_Z22cancel_stream_callbackv+0x30>)
 800e980:	2108      	movs	r1, #8
 800e982:	4805      	ldr	r0, [pc, #20]	; (800e998 <_Z22cancel_stream_callbackv+0x34>)
 800e984:	f7f6 fa37 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e988:	bf00      	nop
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	24000e9d 	.word	0x24000e9d
 800e990:	24000e9e 	.word	0x24000e9e
 800e994:	080217e8 	.word	0x080217e8
 800e998:	24000dc0 	.word	0x24000dc0

0800e99c <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			main_can.send_ok_message();
 800e9a4:	4803      	ldr	r0, [pc, #12]	; (800e9b4 <_ZZN8TUDTests5setupEvENKUlvE_clEv+0x18>)
 800e9a6:	f7f6 fa93 	bl	8004ed0 <_ZN3Can15send_ok_messageEv>
		}, 1000, Timer::MICROSEONDS);
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	24000dc0 	.word	0x24000dc0

0800e9b8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e9c0:	4b17      	ldr	r3, [pc, #92]	; (800ea20 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e9c2:	617b      	str	r3, [r7, #20]
 800e9c4:	6978      	ldr	r0, [r7, #20]
 800e9c6:	f7f8 fbf2 	bl	80071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	6978      	ldr	r0, [r7, #20]
 800e9d0:	f7f8 f8d2 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	60bb      	str	r3, [r7, #8]
 800e9d8:	f107 0208 	add.w	r2, r7, #8
 800e9dc:	f107 030c 	add.w	r3, r7, #12
 800e9e0:	4611      	mov	r1, r2
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 f81e 	bl	800ea24 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	f083 0301 	eor.w	r3, r3, #1
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d010      	beq.n	800ea16 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e9f4:	f107 030c 	add.w	r3, r7, #12
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f8 fc62 	bl	80072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	613b      	str	r3, [r7, #16]
				in->get_value();
 800ea04:	6938      	ldr	r0, [r7, #16]
 800ea06:	f7f7 fdef 	bl	80065e8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800ea0a:	f107 030c 	add.w	r3, r7, #12
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 f820 	bl	800ea54 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800ea14:	e7e0      	b.n	800e9d8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800ea16:	bf00      	nop
 800ea18:	3718      	adds	r7, #24
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	24000110 	.word	0x24000110

0800ea24 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7f8 fc0a 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800ea34:	4603      	mov	r3, r0
 800ea36:	681c      	ldr	r4, [r3, #0]
 800ea38:	6838      	ldr	r0, [r7, #0]
 800ea3a:	f7f8 fc05 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	429c      	cmp	r4, r3
 800ea44:	bf0c      	ite	eq
 800ea46:	2301      	moveq	r3, #1
 800ea48:	2300      	movne	r3, #0
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd90      	pop	{r4, r7, pc}

0800ea54 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	1d1a      	adds	r2, r3, #4
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
	return *this;
 800ea66:	687b      	ldr	r3, [r7, #4]
      }
 800ea68:	4618      	mov	r0, r3
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800ea74:	b5b0      	push	{r4, r5, r7, lr}
 800ea76:	b088      	sub	sp, #32
 800ea78:	af00      	add	r7, sp, #0
		start();
 800ea7a:	f7ff fdcb 	bl	800e614 <_Z5startv>
		timer_7.execute_every([](){
 800ea7e:	463b      	mov	r3, r7
 800ea80:	4629      	mov	r1, r5
 800ea82:	4618      	mov	r0, r3
 800ea84:	f001 ff60 	bl	8010948 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800ea88:	4639      	mov	r1, r7
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea90:	480e      	ldr	r0, [pc, #56]	; (800eacc <_ZN8TUDTests5setupEv+0x58>)
 800ea92:	f7ff f875 	bl	800db80 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800ea96:	463b      	mov	r3, r7
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe ff75 	bl	800d988 <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800ea9e:	f107 0310 	add.w	r3, r7, #16
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f001 ff79 	bl	801099c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800eaaa:	f107 0110 	add.w	r1, r7, #16
 800eaae:	2302      	movs	r3, #2
 800eab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eab4:	4806      	ldr	r0, [pc, #24]	; (800ead0 <_ZN8TUDTests5setupEv+0x5c>)
 800eab6:	f7ff f863 	bl	800db80 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800eaba:	f107 0310 	add.w	r3, r7, #16
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fe ff62 	bl	800d988 <_ZNSt8functionIFvvEED1Ev>
	}
 800eac4:	bf00      	nop
 800eac6:	3720      	adds	r7, #32
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bdb0      	pop	{r4, r5, r7, pc}
 800eacc:	24000d00 	.word	0x24000d00
 800ead0:	24000d20 	.word	0x24000d20

0800ead4 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800ead4:	b480      	push	{r7}
 800ead6:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800ead8:	bf00      	nop
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800eae6:	f007 f971 	bl	8015dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800eaea:	f000 f82f 	bl	800eb4c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800eaee:	f000 f8b5 	bl	800ec5c <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800eaf2:	f001 fa17 	bl	800ff24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800eaf6:	f001 f9f5 	bl	800fee4 <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800eafa:	f000 fef5 	bl	800f8e8 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800eafe:	f001 f871 	bl	800fbe4 <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800eb02:	f000 f9d5 	bl	800eeb0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800eb06:	f000 fa93 	bl	800f030 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800eb0a:	f000 fb4b 	bl	800f1a4 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800eb0e:	f001 f929 	bl	800fd64 <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800eb12:	f000 f963 	bl	800eddc <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800eb16:	f000 fbff 	bl	800f318 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800eb1a:	f000 f8d7 	bl	800eccc <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800eb1e:	f000 fde5 	bl	800f6ec <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800eb22:	f000 fd63 	bl	800f5ec <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800eb26:	f000 fcb1 	bl	800f48c <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800eb2a:	f000 fd9f 	bl	800f66c <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800eb2e:	f000 ff51 	bl	800f9d4 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800eb32:	f000 ff77 	bl	800fa24 <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800eb36:	f000 ff9d 	bl	800fa74 <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800eb3a:	f000 fffb 	bl	800fb34 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800eb3e:	f001 f825 	bl	800fb8c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800eb42:	f7ff ff97 	bl	800ea74 <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800eb46:	f7ff ffc5 	bl	800ead4 <_ZN8TUDTests4loopEv>
 800eb4a:	e7fc      	b.n	800eb46 <main+0x64>

0800eb4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b09c      	sub	sp, #112	; 0x70
 800eb50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb56:	224c      	movs	r2, #76	; 0x4c
 800eb58:	2100      	movs	r1, #0
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f012 fc06 	bl	802136c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eb60:	1d3b      	adds	r3, r7, #4
 800eb62:	2220      	movs	r2, #32
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f012 fc00 	bl	802136c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800eb6c:	2002      	movs	r0, #2
 800eb6e:	f00c ff73 	bl	801ba58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800eb72:	2300      	movs	r3, #0
 800eb74:	603b      	str	r3, [r7, #0]
 800eb76:	4b37      	ldr	r3, [pc, #220]	; (800ec54 <_Z18SystemClock_Configv+0x108>)
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	4a36      	ldr	r2, [pc, #216]	; (800ec54 <_Z18SystemClock_Configv+0x108>)
 800eb7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800eb80:	6193      	str	r3, [r2, #24]
 800eb82:	4b34      	ldr	r3, [pc, #208]	; (800ec54 <_Z18SystemClock_Configv+0x108>)
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eb8a:	603b      	str	r3, [r7, #0]
 800eb8c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800eb8e:	4b31      	ldr	r3, [pc, #196]	; (800ec54 <_Z18SystemClock_Configv+0x108>)
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb9a:	bf14      	ite	ne
 800eb9c:	2301      	movne	r3, #1
 800eb9e:	2300      	moveq	r3, #0
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d000      	beq.n	800eba8 <_Z18SystemClock_Configv+0x5c>
 800eba6:	e7f2      	b.n	800eb8e <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800eba8:	4b2b      	ldr	r3, [pc, #172]	; (800ec58 <_Z18SystemClock_Configv+0x10c>)
 800ebaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebac:	f023 0303 	bic.w	r3, r3, #3
 800ebb0:	4a29      	ldr	r2, [pc, #164]	; (800ec58 <_Z18SystemClock_Configv+0x10c>)
 800ebb2:	f043 0302 	orr.w	r3, r3, #2
 800ebb6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ebbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ebc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ebc2:	2302      	movs	r3, #2
 800ebc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ebca:	2304      	movs	r3, #4
 800ebcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800ebce:	f240 1313 	movw	r3, #275	; 0x113
 800ebd2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ebd8:	2304      	movs	r3, #4
 800ebda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ebdc:	2302      	movs	r3, #2
 800ebde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800ebe0:	2304      	movs	r3, #4
 800ebe2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ebec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f00c ff6b 	bl	801bacc <HAL_RCC_OscConfig>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	bf14      	ite	ne
 800ebfc:	2301      	movne	r3, #1
 800ebfe:	2300      	moveq	r3, #0
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800ec06:	f001 faa3 	bl	8010150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ec0a:	233f      	movs	r3, #63	; 0x3f
 800ec0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ec12:	2300      	movs	r3, #0
 800ec14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ec16:	2308      	movs	r3, #8
 800ec18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ec1a:	2340      	movs	r3, #64	; 0x40
 800ec1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ec1e:	2340      	movs	r3, #64	; 0x40
 800ec20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ec22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ec28:	2340      	movs	r3, #64	; 0x40
 800ec2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800ec2c:	1d3b      	adds	r3, r7, #4
 800ec2e:	2103      	movs	r1, #3
 800ec30:	4618      	mov	r0, r3
 800ec32:	f00d fb25 	bl	801c280 <HAL_RCC_ClockConfig>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bf14      	ite	ne
 800ec3c:	2301      	movne	r3, #1
 800ec3e:	2300      	moveq	r3, #0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800ec46:	f001 fa83 	bl	8010150 <Error_Handler>
  }
}
 800ec4a:	bf00      	nop
 800ec4c:	3770      	adds	r7, #112	; 0x70
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	58024800 	.word	0x58024800
 800ec58:	58024400 	.word	0x58024400

0800ec5c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b0ae      	sub	sp, #184	; 0xb8
 800ec60:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ec62:	463b      	mov	r3, r7
 800ec64:	22b8      	movs	r2, #184	; 0xb8
 800ec66:	2100      	movs	r1, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f012 fb7f 	bl	802136c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800ec6e:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800ec72:	f04f 0300 	mov.w	r3, #0
 800ec76:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800ec7e:	231e      	movs	r3, #30
 800ec80:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800ec82:	2304      	movs	r3, #4
 800ec84:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800ec86:	2304      	movs	r3, #4
 800ec88:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800ec8a:	2302      	movs	r3, #2
 800ec8c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800ec8e:	23c0      	movs	r3, #192	; 0xc0
 800ec90:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800ec92:	2300      	movs	r3, #0
 800ec94:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800ec9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ec9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800eca0:	2300      	movs	r3, #0
 800eca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eca6:	463b      	mov	r3, r7
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f00d fe5f 	bl	801c96c <HAL_RCCEx_PeriphCLKConfig>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bf14      	ite	ne
 800ecb4:	2301      	movne	r3, #1
 800ecb6:	2300      	moveq	r3, #0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800ecbe:	f001 fa47 	bl	8010150 <Error_Handler>
  }
}
 800ecc2:	bf00      	nop
 800ecc4:	37b8      	adds	r7, #184	; 0xb8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
	...

0800eccc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b08c      	sub	sp, #48	; 0x30
 800ecd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800ecd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	605a      	str	r2, [r3, #4]
 800ecdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ecde:	463b      	mov	r3, r7
 800ece0:	2224      	movs	r2, #36	; 0x24
 800ece2:	2100      	movs	r1, #0
 800ece4:	4618      	mov	r0, r3
 800ece6:	f012 fb41 	bl	802136c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800ecea:	4b39      	ldr	r3, [pc, #228]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ecec:	4a39      	ldr	r2, [pc, #228]	; (800edd4 <_ZL12MX_ADC1_Initv+0x108>)
 800ecee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800ecf0:	4b37      	ldr	r3, [pc, #220]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800ecf6:	4b36      	ldr	r3, [pc, #216]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ecfc:	4b34      	ldr	r3, [pc, #208]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800ed02:	4b33      	ldr	r3, [pc, #204]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed04:	2208      	movs	r2, #8
 800ed06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ed08:	4b31      	ldr	r3, [pc, #196]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ed0e:	4b30      	ldr	r3, [pc, #192]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800ed14:	4b2e      	ldr	r3, [pc, #184]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed16:	2201      	movs	r2, #1
 800ed18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ed1a:	4b2d      	ldr	r3, [pc, #180]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800ed22:	4b2b      	ldr	r3, [pc, #172]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed24:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800ed28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ed2a:	4b29      	ldr	r3, [pc, #164]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800ed32:	4b27      	ldr	r3, [pc, #156]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed34:	2203      	movs	r2, #3
 800ed36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ed38:	4b25      	ldr	r3, [pc, #148]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800ed3e:	4b24      	ldr	r3, [pc, #144]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800ed44:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ed4c:	4820      	ldr	r0, [pc, #128]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed4e:	f007 fbbb 	bl	80164c8 <HAL_ADC_Init>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	bf14      	ite	ne
 800ed58:	2301      	movne	r3, #1
 800ed5a:	2300      	moveq	r3, #0
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800ed62:	f001 f9f5 	bl	8010150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ed66:	2300      	movs	r3, #0
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ed6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4817      	ldr	r0, [pc, #92]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800ed72:	f009 f875 	bl	8017e60 <HAL_ADCEx_MultiModeConfigChannel>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bf14      	ite	ne
 800ed7c:	2301      	movne	r3, #1
 800ed7e:	2300      	moveq	r3, #0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800ed86:	f001 f9e3 	bl	8010150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ed8a:	4b13      	ldr	r3, [pc, #76]	; (800edd8 <_ZL12MX_ADC1_Initv+0x10c>)
 800ed8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ed8e:	2306      	movs	r3, #6
 800ed90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ed92:	2300      	movs	r3, #0
 800ed94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ed96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ed9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ed9c:	2304      	movs	r3, #4
 800ed9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800eda0:	2300      	movs	r3, #0
 800eda2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800eda4:	2300      	movs	r3, #0
 800eda6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800edaa:	463b      	mov	r3, r7
 800edac:	4619      	mov	r1, r3
 800edae:	4808      	ldr	r0, [pc, #32]	; (800edd0 <_ZL12MX_ADC1_Initv+0x104>)
 800edb0:	f008 f8c6 	bl	8016f40 <HAL_ADC_ConfigChannel>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	bf14      	ite	ne
 800edba:	2301      	movne	r3, #1
 800edbc:	2300      	moveq	r3, #0
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800edc4:	f001 f9c4 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800edc8:	bf00      	nop
 800edca:	3730      	adds	r7, #48	; 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	24000fa8 	.word	0x24000fa8
 800edd4:	40022000 	.word	0x40022000
 800edd8:	0c900008 	.word	0x0c900008

0800eddc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ede0:	4b31      	ldr	r3, [pc, #196]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ede2:	4a32      	ldr	r2, [pc, #200]	; (800eeac <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ede4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ede6:	4b30      	ldr	r3, [pc, #192]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ede8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800edec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800edf0:	2200      	movs	r2, #0
 800edf2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800edf4:	4b2c      	ldr	r3, [pc, #176]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800edfa:	4b2b      	ldr	r3, [pc, #172]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800ee00:	4b29      	ldr	r3, [pc, #164]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 800ee06:	4b28      	ldr	r3, [pc, #160]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee08:	2205      	movs	r2, #5
 800ee0a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800ee0c:	4b26      	ldr	r3, [pc, #152]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee0e:	2203      	movs	r2, #3
 800ee10:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 800ee12:	4b25      	ldr	r3, [pc, #148]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee14:	2208      	movs	r2, #8
 800ee16:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800ee18:	4b23      	ldr	r3, [pc, #140]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee1a:	2203      	movs	r2, #3
 800ee1c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800ee1e:	4b22      	ldr	r3, [pc, #136]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee20:	2203      	movs	r2, #3
 800ee22:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800ee24:	4b20      	ldr	r3, [pc, #128]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee26:	2201      	movs	r2, #1
 800ee28:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800ee2a:	4b1f      	ldr	r3, [pc, #124]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800ee30:	4b1d      	ldr	r3, [pc, #116]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee32:	2201      	movs	r2, #1
 800ee34:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800ee36:	4b1c      	ldr	r3, [pc, #112]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800ee3c:	4b1a      	ldr	r3, [pc, #104]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800ee42:	4b19      	ldr	r3, [pc, #100]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800ee48:	4b17      	ldr	r3, [pc, #92]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee4a:	2220      	movs	r2, #32
 800ee4c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800ee4e:	4b16      	ldr	r3, [pc, #88]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee50:	2212      	movs	r2, #18
 800ee52:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800ee54:	4b14      	ldr	r3, [pc, #80]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee56:	2200      	movs	r2, #0
 800ee58:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800ee5a:	4b13      	ldr	r3, [pc, #76]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee5c:	2204      	movs	r2, #4
 800ee5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800ee60:	4b11      	ldr	r3, [pc, #68]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800ee66:	4b10      	ldr	r3, [pc, #64]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee68:	2204      	movs	r2, #4
 800ee6a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800ee6c:	4b0e      	ldr	r3, [pc, #56]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee6e:	2200      	movs	r2, #0
 800ee70:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800ee72:	4b0d      	ldr	r3, [pc, #52]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800ee78:	4b0b      	ldr	r3, [pc, #44]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800ee7e:	4b0a      	ldr	r3, [pc, #40]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800ee84:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee86:	2212      	movs	r2, #18
 800ee88:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800ee8a:	4807      	ldr	r0, [pc, #28]	; (800eea8 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ee8c:	f00b fab0 	bl	801a3f0 <HAL_FDCAN_Init>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bf14      	ite	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	2300      	moveq	r3, #0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800eea0:	f001 f956 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800eea4:	bf00      	nop
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	24001090 	.word	0x24001090
 800eeac:	4000a000 	.word	0x4000a000

0800eeb0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08c      	sub	sp, #48	; 0x30
 800eeb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eeb6:	f107 0320 	add.w	r3, r7, #32
 800eeba:	2200      	movs	r2, #0
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	605a      	str	r2, [r3, #4]
 800eec0:	609a      	str	r2, [r3, #8]
 800eec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eec4:	f107 0314 	add.w	r3, r7, #20
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]
 800eecc:	605a      	str	r2, [r3, #4]
 800eece:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eed0:	1d3b      	adds	r3, r7, #4
 800eed2:	2200      	movs	r2, #0
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	605a      	str	r2, [r3, #4]
 800eed8:	609a      	str	r2, [r3, #8]
 800eeda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800eedc:	4b52      	ldr	r3, [pc, #328]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eede:	4a53      	ldr	r2, [pc, #332]	; (800f02c <_ZL12MX_TIM1_Initv+0x17c>)
 800eee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800eee2:	4b51      	ldr	r3, [pc, #324]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eee8:	4b4f      	ldr	r3, [pc, #316]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800eeee:	4b4e      	ldr	r3, [pc, #312]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eef0:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eef4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eef6:	4b4c      	ldr	r3, [pc, #304]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800eefc:	4b4a      	ldr	r3, [pc, #296]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef02:	4b49      	ldr	r3, [pc, #292]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ef08:	4847      	ldr	r0, [pc, #284]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800ef0a:	f010 f915 	bl	801f138 <HAL_TIM_Base_Init>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	bf14      	ite	ne
 800ef14:	2301      	movne	r3, #1
 800ef16:	2300      	moveq	r3, #0
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800ef1e:	f001 f917 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ef22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef26:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ef28:	f107 0320 	add.w	r3, r7, #32
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	483e      	ldr	r0, [pc, #248]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800ef30:	f011 f89a 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bf14      	ite	ne
 800ef3a:	2301      	movne	r3, #1
 800ef3c:	2300      	moveq	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800ef44:	f001 f904 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800ef48:	4837      	ldr	r0, [pc, #220]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800ef4a:	f010 fbfd 	bl	801f748 <HAL_TIM_IC_Init>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	bf14      	ite	ne
 800ef54:	2301      	movne	r3, #1
 800ef56:	2300      	moveq	r3, #0
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d001      	beq.n	800ef62 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800ef5e:	f001 f8f7 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef62:	2300      	movs	r3, #0
 800ef64:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ef66:	2300      	movs	r3, #0
 800ef68:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ef6e:	f107 0314 	add.w	r3, r7, #20
 800ef72:	4619      	mov	r1, r3
 800ef74:	482c      	ldr	r0, [pc, #176]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800ef76:	f011 ff47 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bf14      	ite	ne
 800ef80:	2301      	movne	r3, #1
 800ef82:	2300      	moveq	r3, #0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ef8a:	f001 f8e1 	bl	8010150 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ef8e:	230a      	movs	r3, #10
 800ef90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ef92:	2301      	movs	r3, #1
 800ef94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ef96:	2300      	movs	r3, #0
 800ef98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ef9e:	1d3b      	adds	r3, r7, #4
 800efa0:	2200      	movs	r2, #0
 800efa2:	4619      	mov	r1, r3
 800efa4:	4820      	ldr	r0, [pc, #128]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800efa6:	f010 feae 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	bf14      	ite	ne
 800efb0:	2301      	movne	r3, #1
 800efb2:	2300      	moveq	r3, #0
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800efba:	f001 f8c9 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800efbe:	1d3b      	adds	r3, r7, #4
 800efc0:	2204      	movs	r2, #4
 800efc2:	4619      	mov	r1, r3
 800efc4:	4818      	ldr	r0, [pc, #96]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800efc6:	f010 fe9e 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	bf14      	ite	ne
 800efd0:	2301      	movne	r3, #1
 800efd2:	2300      	moveq	r3, #0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800efda:	f001 f8b9 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800efde:	1d3b      	adds	r3, r7, #4
 800efe0:	2208      	movs	r2, #8
 800efe2:	4619      	mov	r1, r3
 800efe4:	4810      	ldr	r0, [pc, #64]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800efe6:	f010 fe8e 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	bf14      	ite	ne
 800eff0:	2301      	movne	r3, #1
 800eff2:	2300      	moveq	r3, #0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800effa:	f001 f8a9 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800effe:	1d3b      	adds	r3, r7, #4
 800f000:	220c      	movs	r2, #12
 800f002:	4619      	mov	r1, r3
 800f004:	4808      	ldr	r0, [pc, #32]	; (800f028 <_ZL12MX_TIM1_Initv+0x178>)
 800f006:	f010 fe7e 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	bf14      	ite	ne
 800f010:	2301      	movne	r3, #1
 800f012:	2300      	moveq	r3, #0
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800f01a:	f001 f899 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800f01e:	bf00      	nop
 800f020:	3730      	adds	r7, #48	; 0x30
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	24001130 	.word	0x24001130
 800f02c:	40010000 	.word	0x40010000

0800f030 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b08c      	sub	sp, #48	; 0x30
 800f034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f036:	f107 0320 	add.w	r3, r7, #32
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	605a      	str	r2, [r3, #4]
 800f040:	609a      	str	r2, [r3, #8]
 800f042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f044:	f107 0314 	add.w	r3, r7, #20
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	605a      	str	r2, [r3, #4]
 800f04e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f050:	1d3b      	adds	r3, r7, #4
 800f052:	2200      	movs	r2, #0
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	605a      	str	r2, [r3, #4]
 800f058:	609a      	str	r2, [r3, #8]
 800f05a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f05c:	4b50      	ldr	r3, [pc, #320]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f05e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800f064:	4b4e      	ldr	r3, [pc, #312]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f066:	2200      	movs	r2, #0
 800f068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f06a:	4b4d      	ldr	r3, [pc, #308]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27500-1;
 800f070:	4b4b      	ldr	r3, [pc, #300]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f072:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f078:	4b49      	ldr	r3, [pc, #292]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f07e:	4b48      	ldr	r3, [pc, #288]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f080:	2200      	movs	r2, #0
 800f082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f084:	4846      	ldr	r0, [pc, #280]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f086:	f010 f857 	bl	801f138 <HAL_TIM_Base_Init>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	bf14      	ite	ne
 800f090:	2301      	movne	r3, #1
 800f092:	2300      	moveq	r3, #0
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800f09a:	f001 f859 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f09e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f0a4:	f107 0320 	add.w	r3, r7, #32
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	483d      	ldr	r0, [pc, #244]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f0ac:	f010 ffdc 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	bf14      	ite	ne
 800f0b6:	2301      	movne	r3, #1
 800f0b8:	2300      	moveq	r3, #0
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800f0c0:	f001 f846 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800f0c4:	4836      	ldr	r0, [pc, #216]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f0c6:	f010 fb3f 	bl	801f748 <HAL_TIM_IC_Init>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	bf14      	ite	ne
 800f0d0:	2301      	movne	r3, #1
 800f0d2:	2300      	moveq	r3, #0
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800f0da:	f001 f839 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f0e6:	f107 0314 	add.w	r3, r7, #20
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	482c      	ldr	r0, [pc, #176]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f0ee:	f011 fe8b 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bf14      	ite	ne
 800f0f8:	2301      	movne	r3, #1
 800f0fa:	2300      	moveq	r3, #0
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800f102:	f001 f825 	bl	8010150 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f106:	230a      	movs	r3, #10
 800f108:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f10a:	2301      	movs	r3, #1
 800f10c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f10e:	2300      	movs	r3, #0
 800f110:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f116:	1d3b      	adds	r3, r7, #4
 800f118:	2200      	movs	r2, #0
 800f11a:	4619      	mov	r1, r3
 800f11c:	4820      	ldr	r0, [pc, #128]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f11e:	f010 fdf2 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	bf14      	ite	ne
 800f128:	2301      	movne	r3, #1
 800f12a:	2300      	moveq	r3, #0
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800f132:	f001 f80d 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f136:	1d3b      	adds	r3, r7, #4
 800f138:	2204      	movs	r2, #4
 800f13a:	4619      	mov	r1, r3
 800f13c:	4818      	ldr	r0, [pc, #96]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f13e:	f010 fde2 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	bf14      	ite	ne
 800f148:	2301      	movne	r3, #1
 800f14a:	2300      	moveq	r3, #0
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d001      	beq.n	800f156 <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 800f152:	f000 fffd 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f156:	1d3b      	adds	r3, r7, #4
 800f158:	2208      	movs	r2, #8
 800f15a:	4619      	mov	r1, r3
 800f15c:	4810      	ldr	r0, [pc, #64]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f15e:	f010 fdd2 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	bf14      	ite	ne
 800f168:	2301      	movne	r3, #1
 800f16a:	2300      	moveq	r3, #0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 800f172:	f000 ffed 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f176:	1d3b      	adds	r3, r7, #4
 800f178:	220c      	movs	r2, #12
 800f17a:	4619      	mov	r1, r3
 800f17c:	4808      	ldr	r0, [pc, #32]	; (800f1a0 <_ZL12MX_TIM2_Initv+0x170>)
 800f17e:	f010 fdc2 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	bf14      	ite	ne
 800f188:	2301      	movne	r3, #1
 800f18a:	2300      	moveq	r3, #0
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d001      	beq.n	800f196 <_ZL12MX_TIM2_Initv+0x166>
  {
    Error_Handler();
 800f192:	f000 ffdd 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800f196:	bf00      	nop
 800f198:	3730      	adds	r7, #48	; 0x30
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	2400117c 	.word	0x2400117c

0800f1a4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f1aa:	f107 0320 	add.w	r3, r7, #32
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	605a      	str	r2, [r3, #4]
 800f1b4:	609a      	str	r2, [r3, #8]
 800f1b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f1b8:	f107 0314 	add.w	r3, r7, #20
 800f1bc:	2200      	movs	r2, #0
 800f1be:	601a      	str	r2, [r3, #0]
 800f1c0:	605a      	str	r2, [r3, #4]
 800f1c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f1c4:	1d3b      	adds	r3, r7, #4
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	605a      	str	r2, [r3, #4]
 800f1cc:	609a      	str	r2, [r3, #8]
 800f1ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f1d0:	4b4f      	ldr	r3, [pc, #316]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1d2:	4a50      	ldr	r2, [pc, #320]	; (800f314 <_ZL12MX_TIM3_Initv+0x170>)
 800f1d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f1d6:	4b4e      	ldr	r3, [pc, #312]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1dc:	4b4c      	ldr	r3, [pc, #304]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800f1e2:	4b4b      	ldr	r3, [pc, #300]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1e4:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f1e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1ea:	4b49      	ldr	r3, [pc, #292]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1f0:	4b47      	ldr	r3, [pc, #284]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f1f6:	4846      	ldr	r0, [pc, #280]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f1f8:	f00f ff9e 	bl	801f138 <HAL_TIM_Base_Init>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	bf14      	ite	ne
 800f202:	2301      	movne	r3, #1
 800f204:	2300      	moveq	r3, #0
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800f20c:	f000 ffa0 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f214:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f216:	f107 0320 	add.w	r3, r7, #32
 800f21a:	4619      	mov	r1, r3
 800f21c:	483c      	ldr	r0, [pc, #240]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f21e:	f010 ff23 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	bf14      	ite	ne
 800f228:	2301      	movne	r3, #1
 800f22a:	2300      	moveq	r3, #0
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800f232:	f000 ff8d 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800f236:	4836      	ldr	r0, [pc, #216]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f238:	f010 fa86 	bl	801f748 <HAL_TIM_IC_Init>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	bf14      	ite	ne
 800f242:	2301      	movne	r3, #1
 800f244:	2300      	moveq	r3, #0
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800f24c:	f000 ff80 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f250:	2300      	movs	r3, #0
 800f252:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f254:	2300      	movs	r3, #0
 800f256:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f258:	f107 0314 	add.w	r3, r7, #20
 800f25c:	4619      	mov	r1, r3
 800f25e:	482c      	ldr	r0, [pc, #176]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f260:	f011 fdd2 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	bf14      	ite	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	2300      	moveq	r3, #0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800f274:	f000 ff6c 	bl	8010150 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f278:	230a      	movs	r3, #10
 800f27a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f27c:	2301      	movs	r3, #1
 800f27e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f280:	2300      	movs	r3, #0
 800f282:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f288:	1d3b      	adds	r3, r7, #4
 800f28a:	2200      	movs	r2, #0
 800f28c:	4619      	mov	r1, r3
 800f28e:	4820      	ldr	r0, [pc, #128]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f290:	f010 fd39 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	bf14      	ite	ne
 800f29a:	2301      	movne	r3, #1
 800f29c:	2300      	moveq	r3, #0
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800f2a4:	f000 ff54 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f2a8:	1d3b      	adds	r3, r7, #4
 800f2aa:	2204      	movs	r2, #4
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	4818      	ldr	r0, [pc, #96]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f2b0:	f010 fd29 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bf14      	ite	ne
 800f2ba:	2301      	movne	r3, #1
 800f2bc:	2300      	moveq	r3, #0
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800f2c4:	f000 ff44 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f2c8:	1d3b      	adds	r3, r7, #4
 800f2ca:	2208      	movs	r2, #8
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4810      	ldr	r0, [pc, #64]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f2d0:	f010 fd19 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	bf14      	ite	ne
 800f2da:	2301      	movne	r3, #1
 800f2dc:	2300      	moveq	r3, #0
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800f2e4:	f000 ff34 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f2e8:	1d3b      	adds	r3, r7, #4
 800f2ea:	220c      	movs	r2, #12
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4808      	ldr	r0, [pc, #32]	; (800f310 <_ZL12MX_TIM3_Initv+0x16c>)
 800f2f0:	f010 fd09 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bf14      	ite	ne
 800f2fa:	2301      	movne	r3, #1
 800f2fc:	2300      	moveq	r3, #0
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800f304:	f000 ff24 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f308:	bf00      	nop
 800f30a:	3730      	adds	r7, #48	; 0x30
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	240011c8 	.word	0x240011c8
 800f314:	40000400 	.word	0x40000400

0800f318 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b08c      	sub	sp, #48	; 0x30
 800f31c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f31e:	f107 0320 	add.w	r3, r7, #32
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	605a      	str	r2, [r3, #4]
 800f328:	609a      	str	r2, [r3, #8]
 800f32a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f32c:	f107 0314 	add.w	r3, r7, #20
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	605a      	str	r2, [r3, #4]
 800f336:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f338:	1d3b      	adds	r3, r7, #4
 800f33a:	2200      	movs	r2, #0
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	605a      	str	r2, [r3, #4]
 800f340:	609a      	str	r2, [r3, #8]
 800f342:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f344:	4b4f      	ldr	r3, [pc, #316]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f346:	4a50      	ldr	r2, [pc, #320]	; (800f488 <_ZL12MX_TIM4_Initv+0x170>)
 800f348:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f34a:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f350:	4b4c      	ldr	r3, [pc, #304]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f352:	2200      	movs	r2, #0
 800f354:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800f356:	4b4b      	ldr	r3, [pc, #300]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f358:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f35c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f35e:	4b49      	ldr	r3, [pc, #292]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f360:	2200      	movs	r2, #0
 800f362:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f364:	4b47      	ldr	r3, [pc, #284]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f366:	2200      	movs	r2, #0
 800f368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800f36a:	4846      	ldr	r0, [pc, #280]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f36c:	f00f fee4 	bl	801f138 <HAL_TIM_Base_Init>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	bf14      	ite	ne
 800f376:	2301      	movne	r3, #1
 800f378:	2300      	moveq	r3, #0
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800f380:	f000 fee6 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f388:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800f38a:	f107 0320 	add.w	r3, r7, #32
 800f38e:	4619      	mov	r1, r3
 800f390:	483c      	ldr	r0, [pc, #240]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f392:	f010 fe69 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	bf14      	ite	ne
 800f39c:	2301      	movne	r3, #1
 800f39e:	2300      	moveq	r3, #0
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d001      	beq.n	800f3aa <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800f3a6:	f000 fed3 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800f3aa:	4836      	ldr	r0, [pc, #216]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f3ac:	f010 f9cc 	bl	801f748 <HAL_TIM_IC_Init>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bf14      	ite	ne
 800f3b6:	2301      	movne	r3, #1
 800f3b8:	2300      	moveq	r3, #0
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800f3c0:	f000 fec6 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f3cc:	f107 0314 	add.w	r3, r7, #20
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	482c      	ldr	r0, [pc, #176]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f3d4:	f011 fd18 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	bf14      	ite	ne
 800f3de:	2301      	movne	r3, #1
 800f3e0:	2300      	moveq	r3, #0
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d001      	beq.n	800f3ec <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800f3e8:	f000 feb2 	bl	8010150 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f3ec:	230a      	movs	r3, #10
 800f3ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f3fc:	1d3b      	adds	r3, r7, #4
 800f3fe:	2200      	movs	r2, #0
 800f400:	4619      	mov	r1, r3
 800f402:	4820      	ldr	r0, [pc, #128]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f404:	f010 fc7f 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	bf14      	ite	ne
 800f40e:	2301      	movne	r3, #1
 800f410:	2300      	moveq	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800f418:	f000 fe9a 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f41c:	1d3b      	adds	r3, r7, #4
 800f41e:	2204      	movs	r2, #4
 800f420:	4619      	mov	r1, r3
 800f422:	4818      	ldr	r0, [pc, #96]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f424:	f010 fc6f 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	bf14      	ite	ne
 800f42e:	2301      	movne	r3, #1
 800f430:	2300      	moveq	r3, #0
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800f438:	f000 fe8a 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f43c:	1d3b      	adds	r3, r7, #4
 800f43e:	2208      	movs	r2, #8
 800f440:	4619      	mov	r1, r3
 800f442:	4810      	ldr	r0, [pc, #64]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f444:	f010 fc5f 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bf14      	ite	ne
 800f44e:	2301      	movne	r3, #1
 800f450:	2300      	moveq	r3, #0
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800f458:	f000 fe7a 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f45c:	1d3b      	adds	r3, r7, #4
 800f45e:	220c      	movs	r2, #12
 800f460:	4619      	mov	r1, r3
 800f462:	4808      	ldr	r0, [pc, #32]	; (800f484 <_ZL12MX_TIM4_Initv+0x16c>)
 800f464:	f010 fc4f 	bl	801fd06 <HAL_TIM_IC_ConfigChannel>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	bf14      	ite	ne
 800f46e:	2301      	movne	r3, #1
 800f470:	2300      	moveq	r3, #0
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800f478:	f000 fe6a 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f47c:	bf00      	nop
 800f47e:	3730      	adds	r7, #48	; 0x30
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	24001214 	.word	0x24001214
 800f488:	40000800 	.word	0x40000800

0800f48c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08e      	sub	sp, #56	; 0x38
 800f490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f496:	2200      	movs	r2, #0
 800f498:	601a      	str	r2, [r3, #0]
 800f49a:	605a      	str	r2, [r3, #4]
 800f49c:	609a      	str	r2, [r3, #8]
 800f49e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4a0:	f107 031c 	add.w	r3, r7, #28
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	601a      	str	r2, [r3, #0]
 800f4a8:	605a      	str	r2, [r3, #4]
 800f4aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
 800f4b2:	605a      	str	r2, [r3, #4]
 800f4b4:	609a      	str	r2, [r3, #8]
 800f4b6:	60da      	str	r2, [r3, #12]
 800f4b8:	611a      	str	r2, [r3, #16]
 800f4ba:	615a      	str	r2, [r3, #20]
 800f4bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f4be:	4b49      	ldr	r3, [pc, #292]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4c0:	4a49      	ldr	r2, [pc, #292]	; (800f5e8 <_ZL12MX_TIM5_Initv+0x15c>)
 800f4c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f4c4:	4b47      	ldr	r3, [pc, #284]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f4ca:	4b46      	ldr	r3, [pc, #280]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f4d0:	4b44      	ldr	r3, [pc, #272]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4d2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f4d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f4d8:	4b42      	ldr	r3, [pc, #264]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f4de:	4b41      	ldr	r3, [pc, #260]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f4e4:	483f      	ldr	r0, [pc, #252]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f4e6:	f00f fe27 	bl	801f138 <HAL_TIM_Base_Init>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	bf14      	ite	ne
 800f4f0:	2301      	movne	r3, #1
 800f4f2:	2300      	moveq	r3, #0
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f4fa:	f000 fe29 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f4fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f508:	4619      	mov	r1, r3
 800f50a:	4836      	ldr	r0, [pc, #216]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f50c:	f010 fdac 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	bf14      	ite	ne
 800f516:	2301      	movne	r3, #1
 800f518:	2300      	moveq	r3, #0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f520:	f000 fe16 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f524:	482f      	ldr	r0, [pc, #188]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f526:	f00f ff92 	bl	801f44e <HAL_TIM_PWM_Init>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	bf14      	ite	ne
 800f530:	2301      	movne	r3, #1
 800f532:	2300      	moveq	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f53a:	f000 fe09 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f53e:	2300      	movs	r3, #0
 800f540:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f542:	2300      	movs	r3, #0
 800f544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f546:	f107 031c 	add.w	r3, r7, #28
 800f54a:	4619      	mov	r1, r3
 800f54c:	4825      	ldr	r0, [pc, #148]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f54e:	f011 fc5b 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	bf14      	ite	ne
 800f558:	2301      	movne	r3, #1
 800f55a:	2300      	moveq	r3, #0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f562:	f000 fdf5 	bl	8010150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f566:	2360      	movs	r3, #96	; 0x60
 800f568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f56e:	2300      	movs	r3, #0
 800f570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f572:	2300      	movs	r3, #0
 800f574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f576:	463b      	mov	r3, r7
 800f578:	2200      	movs	r2, #0
 800f57a:	4619      	mov	r1, r3
 800f57c:	4819      	ldr	r0, [pc, #100]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f57e:	f010 fc5f 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	bf14      	ite	ne
 800f588:	2301      	movne	r3, #1
 800f58a:	2300      	moveq	r3, #0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f592:	f000 fddd 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f596:	463b      	mov	r3, r7
 800f598:	2208      	movs	r2, #8
 800f59a:	4619      	mov	r1, r3
 800f59c:	4811      	ldr	r0, [pc, #68]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f59e:	f010 fc4f 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	bf14      	ite	ne
 800f5a8:	2301      	movne	r3, #1
 800f5aa:	2300      	moveq	r3, #0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f5b2:	f000 fdcd 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f5b6:	463b      	mov	r3, r7
 800f5b8:	220c      	movs	r2, #12
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4809      	ldr	r0, [pc, #36]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f5be:	f010 fc3f 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	bf14      	ite	ne
 800f5c8:	2301      	movne	r3, #1
 800f5ca:	2300      	moveq	r3, #0
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f5d2:	f000 fdbd 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f5d6:	4803      	ldr	r0, [pc, #12]	; (800f5e4 <_ZL12MX_TIM5_Initv+0x158>)
 800f5d8:	f006 f932 	bl	8015840 <HAL_TIM_MspPostInit>

}
 800f5dc:	bf00      	nop
 800f5de:	3738      	adds	r7, #56	; 0x38
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	24001260 	.word	0x24001260
 800f5e8:	40000c00 	.word	0x40000c00

0800f5ec <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f5f2:	1d3b      	adds	r3, r7, #4
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	601a      	str	r2, [r3, #0]
 800f5f8:	605a      	str	r2, [r3, #4]
 800f5fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f5fc:	4b19      	ldr	r3, [pc, #100]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f5fe:	4a1a      	ldr	r2, [pc, #104]	; (800f668 <_ZL12MX_TIM6_Initv+0x7c>)
 800f600:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f602:	4b18      	ldr	r3, [pc, #96]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f604:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f608:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f60a:	4b16      	ldr	r3, [pc, #88]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f610:	4b14      	ldr	r3, [pc, #80]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f612:	22c7      	movs	r2, #199	; 0xc7
 800f614:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f616:	4b13      	ldr	r3, [pc, #76]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f618:	2200      	movs	r2, #0
 800f61a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f61c:	4811      	ldr	r0, [pc, #68]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f61e:	f00f fd8b 	bl	801f138 <HAL_TIM_Base_Init>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	bf14      	ite	ne
 800f628:	2301      	movne	r3, #1
 800f62a:	2300      	moveq	r3, #0
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f632:	f000 fd8d 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f636:	2320      	movs	r3, #32
 800f638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f63a:	2300      	movs	r3, #0
 800f63c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f63e:	1d3b      	adds	r3, r7, #4
 800f640:	4619      	mov	r1, r3
 800f642:	4808      	ldr	r0, [pc, #32]	; (800f664 <_ZL12MX_TIM6_Initv+0x78>)
 800f644:	f011 fbe0 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bf14      	ite	ne
 800f64e:	2301      	movne	r3, #1
 800f650:	2300      	moveq	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f658:	f000 fd7a 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	240012ac 	.word	0x240012ac
 800f668:	40001000 	.word	0x40001000

0800f66c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f672:	1d3b      	adds	r3, r7, #4
 800f674:	2200      	movs	r2, #0
 800f676:	601a      	str	r2, [r3, #0]
 800f678:	605a      	str	r2, [r3, #4]
 800f67a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f67c:	4b19      	ldr	r3, [pc, #100]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f67e:	4a1a      	ldr	r2, [pc, #104]	; (800f6e8 <_ZL12MX_TIM7_Initv+0x7c>)
 800f680:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f682:	4b18      	ldr	r3, [pc, #96]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f684:	2200      	movs	r2, #0
 800f686:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f688:	4b16      	ldr	r3, [pc, #88]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f68e:	4b15      	ldr	r3, [pc, #84]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f694:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f696:	4b13      	ldr	r3, [pc, #76]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f698:	2200      	movs	r2, #0
 800f69a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f69c:	4811      	ldr	r0, [pc, #68]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f69e:	f00f fd4b 	bl	801f138 <HAL_TIM_Base_Init>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	bf14      	ite	ne
 800f6a8:	2301      	movne	r3, #1
 800f6aa:	2300      	moveq	r3, #0
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f6b2:	f000 fd4d 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f6be:	1d3b      	adds	r3, r7, #4
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4808      	ldr	r0, [pc, #32]	; (800f6e4 <_ZL12MX_TIM7_Initv+0x78>)
 800f6c4:	f011 fba0 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	bf14      	ite	ne
 800f6ce:	2301      	movne	r3, #1
 800f6d0:	2300      	moveq	r3, #0
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f6d8:	f000 fd3a 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f6dc:	bf00      	nop
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	240012f8 	.word	0x240012f8
 800f6e8:	40001400 	.word	0x40001400

0800f6ec <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b09c      	sub	sp, #112	; 0x70
 800f6f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f6f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	605a      	str	r2, [r3, #4]
 800f6fc:	609a      	str	r2, [r3, #8]
 800f6fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f700:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f704:	2200      	movs	r2, #0
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	605a      	str	r2, [r3, #4]
 800f70a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f70c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f710:	2200      	movs	r2, #0
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	605a      	str	r2, [r3, #4]
 800f716:	609a      	str	r2, [r3, #8]
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	611a      	str	r2, [r3, #16]
 800f71c:	615a      	str	r2, [r3, #20]
 800f71e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f720:	1d3b      	adds	r3, r7, #4
 800f722:	2234      	movs	r2, #52	; 0x34
 800f724:	2100      	movs	r1, #0
 800f726:	4618      	mov	r0, r3
 800f728:	f011 fe20 	bl	802136c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f72c:	4b6c      	ldr	r3, [pc, #432]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f72e:	4a6d      	ldr	r2, [pc, #436]	; (800f8e4 <_ZL12MX_TIM8_Initv+0x1f8>)
 800f730:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f732:	4b6b      	ldr	r3, [pc, #428]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f734:	2200      	movs	r2, #0
 800f736:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f738:	4b69      	ldr	r3, [pc, #420]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f73e:	4b68      	ldr	r3, [pc, #416]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f740:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f744:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f746:	4b66      	ldr	r3, [pc, #408]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f748:	2200      	movs	r2, #0
 800f74a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f74c:	4b64      	ldr	r3, [pc, #400]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f74e:	2200      	movs	r2, #0
 800f750:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f752:	4b63      	ldr	r3, [pc, #396]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f754:	2200      	movs	r2, #0
 800f756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f758:	4861      	ldr	r0, [pc, #388]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f75a:	f00f fced 	bl	801f138 <HAL_TIM_Base_Init>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	bf14      	ite	ne
 800f764:	2301      	movne	r3, #1
 800f766:	2300      	moveq	r3, #0
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f76e:	f000 fcef 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f776:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f77c:	4619      	mov	r1, r3
 800f77e:	4858      	ldr	r0, [pc, #352]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f780:	f010 fc72 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	bf14      	ite	ne
 800f78a:	2301      	movne	r3, #1
 800f78c:	2300      	moveq	r3, #0
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f794:	f000 fcdc 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f798:	4851      	ldr	r0, [pc, #324]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f79a:	f00f fe58 	bl	801f44e <HAL_TIM_PWM_Init>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bf14      	ite	ne
 800f7a4:	2301      	movne	r3, #1
 800f7a6:	2300      	moveq	r3, #0
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f7ae:	f000 fccf 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f7be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4846      	ldr	r0, [pc, #280]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f7c6:	f011 fb1f 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bf14      	ite	ne
 800f7d0:	2301      	movne	r3, #1
 800f7d2:	2300      	moveq	r3, #0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f7da:	f000 fcb9 	bl	8010150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f7de:	2360      	movs	r3, #96	; 0x60
 800f7e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f7fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f7fe:	2200      	movs	r2, #0
 800f800:	4619      	mov	r1, r3
 800f802:	4837      	ldr	r0, [pc, #220]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f804:	f010 fb1c 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bf14      	ite	ne
 800f80e:	2301      	movne	r3, #1
 800f810:	2300      	moveq	r3, #0
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f818:	f000 fc9a 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f81c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f820:	2204      	movs	r2, #4
 800f822:	4619      	mov	r1, r3
 800f824:	482e      	ldr	r0, [pc, #184]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f826:	f010 fb0b 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bf14      	ite	ne
 800f830:	2301      	movne	r3, #1
 800f832:	2300      	moveq	r3, #0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d001      	beq.n	800f83e <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f83a:	f000 fc89 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f83e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f842:	2208      	movs	r2, #8
 800f844:	4619      	mov	r1, r3
 800f846:	4826      	ldr	r0, [pc, #152]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f848:	f010 fafa 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bf14      	ite	ne
 800f852:	2301      	movne	r3, #1
 800f854:	2300      	moveq	r3, #0
 800f856:	b2db      	uxtb	r3, r3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f85c:	f000 fc78 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f860:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f864:	220c      	movs	r2, #12
 800f866:	4619      	mov	r1, r3
 800f868:	481d      	ldr	r0, [pc, #116]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f86a:	f010 fae9 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	bf14      	ite	ne
 800f874:	2301      	movne	r3, #1
 800f876:	2300      	moveq	r3, #0
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f87e:	f000 fc67 	bl	8010150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f882:	2300      	movs	r3, #0
 800f884:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f886:	2300      	movs	r3, #0
 800f888:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f892:	2300      	movs	r3, #0
 800f894:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f89a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f8a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f8a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f8b2:	1d3b      	adds	r3, r7, #4
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	480a      	ldr	r0, [pc, #40]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f8b8:	f011 fb42 	bl	8020f40 <HAL_TIMEx_ConfigBreakDeadTime>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	bf14      	ite	ne
 800f8c2:	2301      	movne	r3, #1
 800f8c4:	2300      	moveq	r3, #0
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f8cc:	f000 fc40 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f8d0:	4803      	ldr	r0, [pc, #12]	; (800f8e0 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f8d2:	f005 ffb5 	bl	8015840 <HAL_TIM_MspPostInit>

}
 800f8d6:	bf00      	nop
 800f8d8:	3770      	adds	r7, #112	; 0x70
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	24001344 	.word	0x24001344
 800f8e4:	40010400 	.word	0x40010400

0800f8e8 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08c      	sub	sp, #48	; 0x30
 800f8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f8ee:	f107 0320 	add.w	r3, r7, #32
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	601a      	str	r2, [r3, #0]
 800f8f6:	605a      	str	r2, [r3, #4]
 800f8f8:	609a      	str	r2, [r3, #8]
 800f8fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f8fc:	1d3b      	adds	r3, r7, #4
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]
 800f902:	605a      	str	r2, [r3, #4]
 800f904:	609a      	str	r2, [r3, #8]
 800f906:	60da      	str	r2, [r3, #12]
 800f908:	611a      	str	r2, [r3, #16]
 800f90a:	615a      	str	r2, [r3, #20]
 800f90c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f90e:	4b2f      	ldr	r3, [pc, #188]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f910:	4a2f      	ldr	r2, [pc, #188]	; (800f9d0 <_ZL13MX_TIM12_Initv+0xe8>)
 800f912:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f914:	4b2d      	ldr	r3, [pc, #180]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f916:	2200      	movs	r2, #0
 800f918:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f91a:	4b2c      	ldr	r3, [pc, #176]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f920:	4b2a      	ldr	r3, [pc, #168]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f922:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f926:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f928:	4b28      	ldr	r3, [pc, #160]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f92e:	4b27      	ldr	r3, [pc, #156]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f930:	2200      	movs	r2, #0
 800f932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f934:	4825      	ldr	r0, [pc, #148]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f936:	f00f fbff 	bl	801f138 <HAL_TIM_Base_Init>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	bf14      	ite	ne
 800f940:	2301      	movne	r3, #1
 800f942:	2300      	moveq	r3, #0
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800f94a:	f000 fc01 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f952:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f954:	f107 0320 	add.w	r3, r7, #32
 800f958:	4619      	mov	r1, r3
 800f95a:	481c      	ldr	r0, [pc, #112]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f95c:	f010 fb84 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	bf14      	ite	ne
 800f966:	2301      	movne	r3, #1
 800f968:	2300      	moveq	r3, #0
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800f970:	f000 fbee 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f974:	4815      	ldr	r0, [pc, #84]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f976:	f00f fd6a 	bl	801f44e <HAL_TIM_PWM_Init>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf14      	ite	ne
 800f980:	2301      	movne	r3, #1
 800f982:	2300      	moveq	r3, #0
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800f98a:	f000 fbe1 	bl	8010150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f98e:	2360      	movs	r3, #96	; 0x60
 800f990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f992:	2300      	movs	r3, #0
 800f994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f996:	2300      	movs	r3, #0
 800f998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f99a:	2300      	movs	r3, #0
 800f99c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f99e:	1d3b      	adds	r3, r7, #4
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	4809      	ldr	r0, [pc, #36]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f9a6:	f010 fa4b 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bf14      	ite	ne
 800f9b0:	2301      	movne	r3, #1
 800f9b2:	2300      	moveq	r3, #0
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800f9ba:	f000 fbc9 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f9be:	4803      	ldr	r0, [pc, #12]	; (800f9cc <_ZL13MX_TIM12_Initv+0xe4>)
 800f9c0:	f005 ff3e 	bl	8015840 <HAL_TIM_MspPostInit>

}
 800f9c4:	bf00      	nop
 800f9c6:	3730      	adds	r7, #48	; 0x30
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	24001390 	.word	0x24001390
 800f9d0:	40001800 	.word	0x40001800

0800f9d4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f9d8:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9da:	4a11      	ldr	r2, [pc, #68]	; (800fa20 <_ZL13MX_TIM13_Initv+0x4c>)
 800f9dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f9de:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f9e4:	4b0d      	ldr	r3, [pc, #52]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9f0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9f2:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f9f8:	4b08      	ldr	r3, [pc, #32]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f9fe:	4807      	ldr	r0, [pc, #28]	; (800fa1c <_ZL13MX_TIM13_Initv+0x48>)
 800fa00:	f00f fb9a 	bl	801f138 <HAL_TIM_Base_Init>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	bf14      	ite	ne
 800fa0a:	2301      	movne	r3, #1
 800fa0c:	2300      	moveq	r3, #0
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800fa14:	f000 fb9c 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800fa18:	bf00      	nop
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	240013dc 	.word	0x240013dc
 800fa20:	40001c00 	.word	0x40001c00

0800fa24 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800fa28:	4b10      	ldr	r3, [pc, #64]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa2a:	4a11      	ldr	r2, [pc, #68]	; (800fa70 <_ZL13MX_TIM14_Initv+0x4c>)
 800fa2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800fa2e:	4b0f      	ldr	r3, [pc, #60]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa34:	4b0d      	ldr	r3, [pc, #52]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800fa3a:	4b0c      	ldr	r3, [pc, #48]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa40:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fa42:	4b0a      	ldr	r3, [pc, #40]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fa48:	4b08      	ldr	r3, [pc, #32]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800fa4e:	4807      	ldr	r0, [pc, #28]	; (800fa6c <_ZL13MX_TIM14_Initv+0x48>)
 800fa50:	f00f fb72 	bl	801f138 <HAL_TIM_Base_Init>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	bf14      	ite	ne
 800fa5a:	2301      	movne	r3, #1
 800fa5c:	2300      	moveq	r3, #0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800fa64:	f000 fb74 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800fa68:	bf00      	nop
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	24001428 	.word	0x24001428
 800fa70:	40002000 	.word	0x40002000

0800fa74 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b088      	sub	sp, #32
 800fa78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa7a:	f107 0310 	add.w	r3, r7, #16
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	605a      	str	r2, [r3, #4]
 800fa84:	609a      	str	r2, [r3, #8]
 800fa86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa88:	1d3b      	adds	r3, r7, #4
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	605a      	str	r2, [r3, #4]
 800fa90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800fa92:	4b26      	ldr	r3, [pc, #152]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fa94:	4a26      	ldr	r2, [pc, #152]	; (800fb30 <_ZL13MX_TIM15_Initv+0xbc>)
 800fa96:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800fa98:	4b24      	ldr	r3, [pc, #144]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa9e:	4b23      	ldr	r3, [pc, #140]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800faa4:	4b21      	ldr	r3, [pc, #132]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800faa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faaa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800faac:	4b1f      	ldr	r3, [pc, #124]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800faae:	2200      	movs	r2, #0
 800fab0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800fab2:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fab8:	4b1c      	ldr	r3, [pc, #112]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800faba:	2200      	movs	r2, #0
 800fabc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800fabe:	481b      	ldr	r0, [pc, #108]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fac0:	f00f fb3a 	bl	801f138 <HAL_TIM_Base_Init>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bf14      	ite	ne
 800faca:	2301      	movne	r3, #1
 800facc:	2300      	moveq	r3, #0
 800face:	b2db      	uxtb	r3, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d001      	beq.n	800fad8 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800fad4:	f000 fb3c 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fadc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800fade:	f107 0310 	add.w	r3, r7, #16
 800fae2:	4619      	mov	r1, r3
 800fae4:	4811      	ldr	r0, [pc, #68]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fae6:	f010 fabf 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	bf14      	ite	ne
 800faf0:	2301      	movne	r3, #1
 800faf2:	2300      	moveq	r3, #0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800fafa:	f000 fb29 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fafe:	2300      	movs	r3, #0
 800fb00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb02:	2300      	movs	r3, #0
 800fb04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800fb06:	1d3b      	adds	r3, r7, #4
 800fb08:	4619      	mov	r1, r3
 800fb0a:	4808      	ldr	r0, [pc, #32]	; (800fb2c <_ZL13MX_TIM15_Initv+0xb8>)
 800fb0c:	f011 f97c 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	bf14      	ite	ne
 800fb16:	2301      	movne	r3, #1
 800fb18:	2300      	moveq	r3, #0
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800fb20:	f000 fb16 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800fb24:	bf00      	nop
 800fb26:	3720      	adds	r7, #32
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	24001474 	.word	0x24001474
 800fb30:	40014000 	.word	0x40014000

0800fb34 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800fb38:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb3a:	4a13      	ldr	r2, [pc, #76]	; (800fb88 <_ZL13MX_TIM16_Initv+0x54>)
 800fb3c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800fb3e:	4b11      	ldr	r3, [pc, #68]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fb44:	4b0f      	ldr	r3, [pc, #60]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800fb4a:	4b0e      	ldr	r3, [pc, #56]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb50:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fb52:	4b0c      	ldr	r3, [pc, #48]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800fb58:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fb5e:	4b09      	ldr	r3, [pc, #36]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800fb64:	4807      	ldr	r0, [pc, #28]	; (800fb84 <_ZL13MX_TIM16_Initv+0x50>)
 800fb66:	f00f fae7 	bl	801f138 <HAL_TIM_Base_Init>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	bf14      	ite	ne
 800fb70:	2301      	movne	r3, #1
 800fb72:	2300      	moveq	r3, #0
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800fb7a:	f000 fae9 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800fb7e:	bf00      	nop
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	240014c0 	.word	0x240014c0
 800fb88:	40014400 	.word	0x40014400

0800fb8c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800fb90:	4b12      	ldr	r3, [pc, #72]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fb92:	4a13      	ldr	r2, [pc, #76]	; (800fbe0 <_ZL13MX_TIM17_Initv+0x54>)
 800fb94:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800fb96:	4b11      	ldr	r3, [pc, #68]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fb9c:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800fba2:	4b0e      	ldr	r3, [pc, #56]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fba8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fbaa:	4b0c      	ldr	r3, [pc, #48]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800fbb0:	4b0a      	ldr	r3, [pc, #40]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fbb6:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800fbbc:	4807      	ldr	r0, [pc, #28]	; (800fbdc <_ZL13MX_TIM17_Initv+0x50>)
 800fbbe:	f00f fabb 	bl	801f138 <HAL_TIM_Base_Init>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	bf14      	ite	ne
 800fbc8:	2301      	movne	r3, #1
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800fbd2:	f000 fabd 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800fbd6:	bf00      	nop
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	2400150c 	.word	0x2400150c
 800fbe0:	40014800 	.word	0x40014800

0800fbe4 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08e      	sub	sp, #56	; 0x38
 800fbe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fbea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbee:	2200      	movs	r2, #0
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	605a      	str	r2, [r3, #4]
 800fbf4:	609a      	str	r2, [r3, #8]
 800fbf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fbf8:	f107 031c 	add.w	r3, r7, #28
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	601a      	str	r2, [r3, #0]
 800fc00:	605a      	str	r2, [r3, #4]
 800fc02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fc04:	463b      	mov	r3, r7
 800fc06:	2200      	movs	r2, #0
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	605a      	str	r2, [r3, #4]
 800fc0c:	609a      	str	r2, [r3, #8]
 800fc0e:	60da      	str	r2, [r3, #12]
 800fc10:	611a      	str	r2, [r3, #16]
 800fc12:	615a      	str	r2, [r3, #20]
 800fc14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800fc16:	4b51      	ldr	r3, [pc, #324]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc18:	4a51      	ldr	r2, [pc, #324]	; (800fd60 <_ZL13MX_TIM23_Initv+0x17c>)
 800fc1a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800fc1c:	4b4f      	ldr	r3, [pc, #316]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc22:	4b4e      	ldr	r3, [pc, #312]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800fc28:	4b4c      	ldr	r3, [pc, #304]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc2a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800fc2e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc30:	4b4a      	ldr	r3, [pc, #296]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc36:	4b49      	ldr	r3, [pc, #292]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800fc3c:	4847      	ldr	r0, [pc, #284]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc3e:	f00f fa7b 	bl	801f138 <HAL_TIM_Base_Init>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	bf14      	ite	ne
 800fc48:	2301      	movne	r3, #1
 800fc4a:	2300      	moveq	r3, #0
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800fc52:	f000 fa7d 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fc56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800fc5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc60:	4619      	mov	r1, r3
 800fc62:	483e      	ldr	r0, [pc, #248]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc64:	f010 fa00 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	bf14      	ite	ne
 800fc6e:	2301      	movne	r3, #1
 800fc70:	2300      	moveq	r3, #0
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800fc78:	f000 fa6a 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800fc7c:	4837      	ldr	r0, [pc, #220]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fc7e:	f00f fbe6 	bl	801f44e <HAL_TIM_PWM_Init>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bf14      	ite	ne
 800fc88:	2301      	movne	r3, #1
 800fc8a:	2300      	moveq	r3, #0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800fc92:	f000 fa5d 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc96:	2300      	movs	r3, #0
 800fc98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800fc9e:	f107 031c 	add.w	r3, r7, #28
 800fca2:	4619      	mov	r1, r3
 800fca4:	482d      	ldr	r0, [pc, #180]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fca6:	f011 f8af 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	bf14      	ite	ne
 800fcb0:	2301      	movne	r3, #1
 800fcb2:	2300      	moveq	r3, #0
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d001      	beq.n	800fcbe <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800fcba:	f000 fa49 	bl	8010150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fcbe:	2360      	movs	r3, #96	; 0x60
 800fcc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fcca:	2300      	movs	r3, #0
 800fccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fcce:	463b      	mov	r3, r7
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	4821      	ldr	r0, [pc, #132]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fcd6:	f010 f8b3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	bf14      	ite	ne
 800fce0:	2301      	movne	r3, #1
 800fce2:	2300      	moveq	r3, #0
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800fcea:	f000 fa31 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fcee:	463b      	mov	r3, r7
 800fcf0:	2204      	movs	r2, #4
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	4819      	ldr	r0, [pc, #100]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fcf6:	f010 f8a3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	bf14      	ite	ne
 800fd00:	2301      	movne	r3, #1
 800fd02:	2300      	moveq	r3, #0
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800fd0a:	f000 fa21 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fd0e:	463b      	mov	r3, r7
 800fd10:	2208      	movs	r2, #8
 800fd12:	4619      	mov	r1, r3
 800fd14:	4811      	ldr	r0, [pc, #68]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fd16:	f010 f893 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bf14      	ite	ne
 800fd20:	2301      	movne	r3, #1
 800fd22:	2300      	moveq	r3, #0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800fd2a:	f000 fa11 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fd2e:	463b      	mov	r3, r7
 800fd30:	220c      	movs	r2, #12
 800fd32:	4619      	mov	r1, r3
 800fd34:	4809      	ldr	r0, [pc, #36]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fd36:	f010 f883 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	bf14      	ite	ne
 800fd40:	2301      	movne	r3, #1
 800fd42:	2300      	moveq	r3, #0
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d001      	beq.n	800fd4e <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800fd4a:	f000 fa01 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800fd4e:	4803      	ldr	r0, [pc, #12]	; (800fd5c <_ZL13MX_TIM23_Initv+0x178>)
 800fd50:	f005 fd76 	bl	8015840 <HAL_TIM_MspPostInit>

}
 800fd54:	bf00      	nop
 800fd56:	3738      	adds	r7, #56	; 0x38
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	24001558 	.word	0x24001558
 800fd60:	4000e000 	.word	0x4000e000

0800fd64 <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b08e      	sub	sp, #56	; 0x38
 800fd68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd6e:	2200      	movs	r2, #0
 800fd70:	601a      	str	r2, [r3, #0]
 800fd72:	605a      	str	r2, [r3, #4]
 800fd74:	609a      	str	r2, [r3, #8]
 800fd76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fd78:	f107 031c 	add.w	r3, r7, #28
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	605a      	str	r2, [r3, #4]
 800fd82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fd84:	463b      	mov	r3, r7
 800fd86:	2200      	movs	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	605a      	str	r2, [r3, #4]
 800fd8c:	609a      	str	r2, [r3, #8]
 800fd8e:	60da      	str	r2, [r3, #12]
 800fd90:	611a      	str	r2, [r3, #16]
 800fd92:	615a      	str	r2, [r3, #20]
 800fd94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800fd96:	4b51      	ldr	r3, [pc, #324]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fd98:	4a51      	ldr	r2, [pc, #324]	; (800fee0 <_ZL13MX_TIM24_Initv+0x17c>)
 800fd9a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800fd9c:	4b4f      	ldr	r3, [pc, #316]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fda2:	4b4e      	ldr	r3, [pc, #312]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800fda8:	4b4c      	ldr	r3, [pc, #304]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fdaa:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800fdae:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fdb0:	4b4a      	ldr	r3, [pc, #296]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fdb6:	4b49      	ldr	r3, [pc, #292]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800fdbc:	4847      	ldr	r0, [pc, #284]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fdbe:	f00f f9bb 	bl	801f138 <HAL_TIM_Base_Init>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	bf14      	ite	ne
 800fdc8:	2301      	movne	r3, #1
 800fdca:	2300      	moveq	r3, #0
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800fdd2:	f000 f9bd 	bl	8010150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fdd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fdda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fde0:	4619      	mov	r1, r3
 800fde2:	483e      	ldr	r0, [pc, #248]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fde4:	f010 f940 	bl	8020068 <HAL_TIM_ConfigClockSource>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	bf14      	ite	ne
 800fdee:	2301      	movne	r3, #1
 800fdf0:	2300      	moveq	r3, #0
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d001      	beq.n	800fdfc <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800fdf8:	f000 f9aa 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800fdfc:	4837      	ldr	r0, [pc, #220]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fdfe:	f00f fb26 	bl	801f44e <HAL_TIM_PWM_Init>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	bf14      	ite	ne
 800fe08:	2301      	movne	r3, #1
 800fe0a:	2300      	moveq	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fe12:	f000 f99d 	bl	8010150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe16:	2300      	movs	r3, #0
 800fe18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fe1e:	f107 031c 	add.w	r3, r7, #28
 800fe22:	4619      	mov	r1, r3
 800fe24:	482d      	ldr	r0, [pc, #180]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fe26:	f010 ffef 	bl	8020e08 <HAL_TIMEx_MasterConfigSynchronization>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	bf14      	ite	ne
 800fe30:	2301      	movne	r3, #1
 800fe32:	2300      	moveq	r3, #0
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fe3a:	f000 f989 	bl	8010150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fe3e:	2360      	movs	r3, #96	; 0x60
 800fe40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fe46:	2300      	movs	r3, #0
 800fe48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fe4e:	463b      	mov	r3, r7
 800fe50:	2200      	movs	r2, #0
 800fe52:	4619      	mov	r1, r3
 800fe54:	4821      	ldr	r0, [pc, #132]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fe56:	f00f fff3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	bf14      	ite	ne
 800fe60:	2301      	movne	r3, #1
 800fe62:	2300      	moveq	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d001      	beq.n	800fe6e <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800fe6a:	f000 f971 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fe6e:	463b      	mov	r3, r7
 800fe70:	2204      	movs	r2, #4
 800fe72:	4619      	mov	r1, r3
 800fe74:	4819      	ldr	r0, [pc, #100]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fe76:	f00f ffe3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bf14      	ite	ne
 800fe80:	2301      	movne	r3, #1
 800fe82:	2300      	moveq	r3, #0
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d001      	beq.n	800fe8e <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800fe8a:	f000 f961 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fe8e:	463b      	mov	r3, r7
 800fe90:	2208      	movs	r2, #8
 800fe92:	4619      	mov	r1, r3
 800fe94:	4811      	ldr	r0, [pc, #68]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fe96:	f00f ffd3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	bf14      	ite	ne
 800fea0:	2301      	movne	r3, #1
 800fea2:	2300      	moveq	r3, #0
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800feaa:	f000 f951 	bl	8010150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800feae:	463b      	mov	r3, r7
 800feb0:	220c      	movs	r2, #12
 800feb2:	4619      	mov	r1, r3
 800feb4:	4809      	ldr	r0, [pc, #36]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800feb6:	f00f ffc3 	bl	801fe40 <HAL_TIM_PWM_ConfigChannel>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	bf14      	ite	ne
 800fec0:	2301      	movne	r3, #1
 800fec2:	2300      	moveq	r3, #0
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800feca:	f000 f941 	bl	8010150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fece:	4803      	ldr	r0, [pc, #12]	; (800fedc <_ZL13MX_TIM24_Initv+0x178>)
 800fed0:	f005 fcb6 	bl	8015840 <HAL_TIM_MspPostInit>

}
 800fed4:	bf00      	nop
 800fed6:	3738      	adds	r7, #56	; 0x38
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	240015a4 	.word	0x240015a4
 800fee0:	4000e400 	.word	0x4000e400

0800fee4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800feea:	4b0d      	ldr	r3, [pc, #52]	; (800ff20 <_ZL11MX_DMA_Initv+0x3c>)
 800feec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fef0:	4a0b      	ldr	r2, [pc, #44]	; (800ff20 <_ZL11MX_DMA_Initv+0x3c>)
 800fef2:	f043 0301 	orr.w	r3, r3, #1
 800fef6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fefa:	4b09      	ldr	r3, [pc, #36]	; (800ff20 <_ZL11MX_DMA_Initv+0x3c>)
 800fefc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	607b      	str	r3, [r7, #4]
 800ff06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	200c      	movs	r0, #12
 800ff0e:	f008 f964 	bl	80181da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800ff12:	200c      	movs	r0, #12
 800ff14:	f008 f97b 	bl	801820e <HAL_NVIC_EnableIRQ>

}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	58024400 	.word	0x58024400

0800ff24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08c      	sub	sp, #48	; 0x30
 800ff28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff2a:	f107 031c 	add.w	r3, r7, #28
 800ff2e:	2200      	movs	r2, #0
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	605a      	str	r2, [r3, #4]
 800ff34:	609a      	str	r2, [r3, #8]
 800ff36:	60da      	str	r2, [r3, #12]
 800ff38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ff3a:	4b7e      	ldr	r3, [pc, #504]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff40:	4a7c      	ldr	r2, [pc, #496]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff42:	f043 0304 	orr.w	r3, r3, #4
 800ff46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ff4a:	4b7a      	ldr	r3, [pc, #488]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff50:	f003 0304 	and.w	r3, r3, #4
 800ff54:	61bb      	str	r3, [r7, #24]
 800ff56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ff58:	4b76      	ldr	r3, [pc, #472]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff5e:	4a75      	ldr	r2, [pc, #468]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff60:	f043 0320 	orr.w	r3, r3, #32
 800ff64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ff68:	4b72      	ldr	r3, [pc, #456]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff6e:	f003 0320 	and.w	r3, r3, #32
 800ff72:	617b      	str	r3, [r7, #20]
 800ff74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ff76:	4b6f      	ldr	r3, [pc, #444]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff7c:	4a6d      	ldr	r2, [pc, #436]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ff86:	4b6b      	ldr	r3, [pc, #428]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff90:	613b      	str	r3, [r7, #16]
 800ff92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff94:	4b67      	ldr	r3, [pc, #412]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff9a:	4a66      	ldr	r2, [pc, #408]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ff9c:	f043 0301 	orr.w	r3, r3, #1
 800ffa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ffa4:	4b63      	ldr	r3, [pc, #396]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffaa:	f003 0301 	and.w	r3, r3, #1
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ffb2:	4b60      	ldr	r3, [pc, #384]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffb8:	4a5e      	ldr	r2, [pc, #376]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffba:	f043 0302 	orr.w	r3, r3, #2
 800ffbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ffc2:	4b5c      	ldr	r3, [pc, #368]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffc8:	f003 0302 	and.w	r3, r3, #2
 800ffcc:	60bb      	str	r3, [r7, #8]
 800ffce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ffd0:	4b58      	ldr	r3, [pc, #352]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffd6:	4a57      	ldr	r2, [pc, #348]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffd8:	f043 0310 	orr.w	r3, r3, #16
 800ffdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ffe0:	4b54      	ldr	r3, [pc, #336]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800ffe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffe6:	f003 0310 	and.w	r3, r3, #16
 800ffea:	607b      	str	r3, [r7, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ffee:	4b51      	ldr	r3, [pc, #324]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800fff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fff4:	4a4f      	ldr	r2, [pc, #316]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 800fff6:	f043 0308 	orr.w	r3, r3, #8
 800fffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fffe:	4b4d      	ldr	r3, [pc, #308]	; (8010134 <_ZL12MX_GPIO_Initv+0x210>)
 8010000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010004:	f003 0308 	and.w	r3, r3, #8
 8010008:	603b      	str	r3, [r7, #0]
 801000a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 801000c:	2200      	movs	r2, #0
 801000e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8010012:	4849      	ldr	r0, [pc, #292]	; (8010138 <_ZL12MX_GPIO_Initv+0x214>)
 8010014:	f00b fd06 	bl	801ba24 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 8010018:	2200      	movs	r2, #0
 801001a:	21c0      	movs	r1, #192	; 0xc0
 801001c:	4847      	ldr	r0, [pc, #284]	; (801013c <_ZL12MX_GPIO_Initv+0x218>)
 801001e:	f00b fd01 	bl	801ba24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8010022:	2200      	movs	r2, #0
 8010024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010028:	4845      	ldr	r0, [pc, #276]	; (8010140 <_ZL12MX_GPIO_Initv+0x21c>)
 801002a:	f00b fcfb 	bl	801ba24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 801002e:	2200      	movs	r2, #0
 8010030:	2180      	movs	r1, #128	; 0x80
 8010032:	4844      	ldr	r0, [pc, #272]	; (8010144 <_ZL12MX_GPIO_Initv+0x220>)
 8010034:	f00b fcf6 	bl	801ba24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8010038:	2201      	movs	r2, #1
 801003a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801003e:	4841      	ldr	r0, [pc, #260]	; (8010144 <_ZL12MX_GPIO_Initv+0x220>)
 8010040:	f00b fcf0 	bl	801ba24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8010044:	2200      	movs	r2, #0
 8010046:	2102      	movs	r1, #2
 8010048:	483f      	ldr	r0, [pc, #252]	; (8010148 <_ZL12MX_GPIO_Initv+0x224>)
 801004a:	f00b fceb 	bl	801ba24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 801004e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8010052:	61fb      	str	r3, [r7, #28]
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010054:	2301      	movs	r3, #1
 8010056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010058:	2302      	movs	r3, #2
 801005a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801005c:	2300      	movs	r3, #0
 801005e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010060:	f107 031c 	add.w	r3, r7, #28
 8010064:	4619      	mov	r1, r3
 8010066:	4834      	ldr	r0, [pc, #208]	; (8010138 <_ZL12MX_GPIO_Initv+0x214>)
 8010068:	f00b fb1c 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 801006c:	2340      	movs	r3, #64	; 0x40
 801006e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010070:	2301      	movs	r3, #1
 8010072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010074:	2300      	movs	r3, #0
 8010076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010078:	2300      	movs	r3, #0
 801007a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801007c:	f107 031c 	add.w	r3, r7, #28
 8010080:	4619      	mov	r1, r3
 8010082:	482e      	ldr	r0, [pc, #184]	; (801013c <_ZL12MX_GPIO_Initv+0x218>)
 8010084:	f00b fb0e 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 8010088:	2380      	movs	r3, #128	; 0x80
 801008a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801008c:	2301      	movs	r3, #1
 801008e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010090:	2302      	movs	r3, #2
 8010092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010094:	2300      	movs	r3, #0
 8010096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 8010098:	f107 031c 	add.w	r3, r7, #28
 801009c:	4619      	mov	r1, r3
 801009e:	4827      	ldr	r0, [pc, #156]	; (801013c <_ZL12MX_GPIO_Initv+0x218>)
 80100a0:	f00b fb00 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 80100a4:	230e      	movs	r3, #14
 80100a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80100a8:	2300      	movs	r3, #0
 80100aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80100ac:	2302      	movs	r3, #2
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80100b0:	f107 031c 	add.w	r3, r7, #28
 80100b4:	4619      	mov	r1, r3
 80100b6:	4820      	ldr	r0, [pc, #128]	; (8010138 <_ZL12MX_GPIO_Initv+0x214>)
 80100b8:	f00b faf4 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80100bc:	2340      	movs	r3, #64	; 0x40
 80100be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80100c0:	2303      	movs	r3, #3
 80100c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100c4:	2300      	movs	r3, #0
 80100c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100c8:	f107 031c 	add.w	r3, r7, #28
 80100cc:	4619      	mov	r1, r3
 80100ce:	481f      	ldr	r0, [pc, #124]	; (801014c <_ZL12MX_GPIO_Initv+0x228>)
 80100d0:	f00b fae8 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80100d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80100da:	2301      	movs	r3, #1
 80100dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80100de:	2302      	movs	r3, #2
 80100e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80100e2:	2300      	movs	r3, #0
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80100e6:	f107 031c 	add.w	r3, r7, #28
 80100ea:	4619      	mov	r1, r3
 80100ec:	4814      	ldr	r0, [pc, #80]	; (8010140 <_ZL12MX_GPIO_Initv+0x21c>)
 80100ee:	f00b fad9 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 80100f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80100f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80100f8:	2301      	movs	r3, #1
 80100fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80100fc:	2302      	movs	r3, #2
 80100fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010100:	2300      	movs	r3, #0
 8010102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010104:	f107 031c 	add.w	r3, r7, #28
 8010108:	4619      	mov	r1, r3
 801010a:	480e      	ldr	r0, [pc, #56]	; (8010144 <_ZL12MX_GPIO_Initv+0x220>)
 801010c:	f00b faca 	bl	801b6a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8010110:	2302      	movs	r3, #2
 8010112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010114:	2301      	movs	r3, #1
 8010116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010118:	2300      	movs	r3, #0
 801011a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801011c:	2300      	movs	r3, #0
 801011e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8010120:	f107 031c 	add.w	r3, r7, #28
 8010124:	4619      	mov	r1, r3
 8010126:	4808      	ldr	r0, [pc, #32]	; (8010148 <_ZL12MX_GPIO_Initv+0x224>)
 8010128:	f00b fabc 	bl	801b6a4 <HAL_GPIO_Init>

}
 801012c:	bf00      	nop
 801012e:	3730      	adds	r7, #48	; 0x30
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	58024400 	.word	0x58024400
 8010138:	58020800 	.word	0x58020800
 801013c:	58021400 	.word	0x58021400
 8010140:	58020c00 	.word	0x58020c00
 8010144:	58020400 	.word	0x58020400
 8010148:	58021000 	.word	0x58021000
 801014c:	58020000 	.word	0x58020000

08010150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010150:	b480      	push	{r7}
 8010152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010154:	b672      	cpsid	i
}
 8010156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010158:	e7fe      	b.n	8010158 <Error_Handler+0x8>

0801015a <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	f7fd fba3 	bl	800d8b0 <_ZNKSt14_Function_base8_M_emptyEv>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8010170:	f011 f875 	bl	802125e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	4610      	mov	r0, r2
 801017c:	4798      	blx	r3
 801017e:	bf00      	nop
    }
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 8010186:	b580      	push	{r7, lr}
 8010188:	b082      	sub	sp, #8
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4618      	mov	r0, r3
 8010192:	f7fd fb6c 	bl	800d86e <_ZNSt14_Function_baseC1Ev>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80101aa:	6838      	ldr	r0, [r7, #0]
 80101ac:	f000 fc20 	bl	80109f0 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 80101b0:	4603      	mov	r3, r0
 80101b2:	4619      	mov	r1, r3
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 fc26 	bl	8010a06 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80101ba:	bf00      	nop
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b086      	sub	sp, #24
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80101cc:	f107 0308 	add.w	r3, r7, #8
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fc49 	bl	8010a6a <_ZNSt8functionIFvvEEC1ERKS1_>
 80101d8:	f107 0308 	add.w	r3, r7, #8
 80101dc:	6879      	ldr	r1, [r7, #4]
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 fc65 	bl	8010aae <_ZNSt8functionIFvvEE4swapERS1_>
 80101e4:	f107 0308 	add.w	r3, r7, #8
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fd fbcd 	bl	800d988 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 80101ee:	687b      	ldr	r3, [r7, #4]
      }
 80101f0:	4618      	mov	r0, r3
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	f107 030c 	add.w	r3, r7, #12
 8010206:	4611      	mov	r1, r2
 8010208:	4618      	mov	r0, r3
 801020a:	f000 fc71 	bl	8010af0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	1d1a      	adds	r2, r3, #4
 8010224:	f107 030c 	add.w	r3, r7, #12
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f000 fc60 	bl	8010af0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 801023c:	b590      	push	{r4, r7, lr}
 801023e:	b08b      	sub	sp, #44	; 0x2c
 8010240:	af02      	add	r7, sp, #8
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 fc61 	bl	8010b10 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 801024e:	4603      	mov	r3, r0
 8010250:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fc6b 	bl	8010b2e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 8010258:	4603      	mov	r3, r0
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	f107 020c 	add.w	r2, r7, #12
 8010260:	f107 0308 	add.w	r3, r7, #8
 8010264:	4611      	mov	r1, r2
 8010266:	4618      	mov	r0, r3
 8010268:	f7fb f804 	bl	800b274 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d112      	bne.n	8010298 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fc68 	bl	8010b48 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 8010278:	f107 0308 	add.w	r3, r7, #8
 801027c:	4618      	mov	r0, r3
 801027e:	f000 fc70 	bl	8010b62 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 8010282:	4603      	mov	r3, r0
 8010284:	461a      	mov	r2, r3
 8010286:	f107 0310 	add.w	r3, r7, #16
 801028a:	6839      	ldr	r1, [r7, #0]
 801028c:	4618      	mov	r0, r3
 801028e:	f7fb f805 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 8010298:	2301      	movs	r3, #1
 801029a:	e000      	b.n	801029e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 801029c:	2300      	movs	r3, #0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d01f      	beq.n	80102e2 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80102a2:	687c      	ldr	r4, [r7, #4]
 80102a4:	f107 0208 	add.w	r2, r7, #8
 80102a8:	f107 0314 	add.w	r3, r7, #20
 80102ac:	4611      	mov	r1, r2
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fb f809 	bl	800b2c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 80102b4:	6838      	ldr	r0, [r7, #0]
 80102b6:	f000 fc62 	bl	8010b7e <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 80102ba:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80102bc:	f107 0318 	add.w	r3, r7, #24
 80102c0:	4611      	mov	r1, r2
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 fc66 	bl	8010b94 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 80102c8:	f107 0218 	add.w	r2, r7, #24
 80102cc:	f107 031c 	add.w	r3, r7, #28
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	4613      	mov	r3, r2
 80102d4:	4a08      	ldr	r2, [pc, #32]	; (80102f8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 80102d6:	6979      	ldr	r1, [r7, #20]
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fc6c 	bl	8010bb6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 80102de:	4603      	mov	r3, r0
 80102e0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80102e2:	f107 0308 	add.w	r3, r7, #8
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fc3b 	bl	8010b62 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 80102ec:	4603      	mov	r3, r0
 80102ee:	3304      	adds	r3, #4
      }
 80102f0:	4618      	mov	r0, r3
 80102f2:	3724      	adds	r7, #36	; 0x24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd90      	pop	{r4, r7, pc}
 80102f8:	08021870 	.word	0x08021870

080102fc <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 80102fc:	b5b0      	push	{r4, r5, r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8010306:	687c      	ldr	r4, [r7, #4]
 8010308:	6838      	ldr	r0, [r7, #0]
 801030a:	f000 fc92 	bl	8010c32 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	4629      	mov	r1, r5
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fca8 	bl	8010c6a <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bdb0      	pop	{r4, r5, r7, pc}

08010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	109b      	asrs	r3, r3, #2
 8010338:	4618      	mov	r0, r3
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <_ZNSt6vectorIP13StreamMessageSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4413      	add	r3, r2
      }
 8010358:	4618      	mov	r0, r3
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	f107 030c 	add.w	r3, r7, #12
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f000 fc8d 	bl	8010c94 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	4618      	mov	r0, r3
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	4413      	add	r3, r2
 8010398:	60fb      	str	r3, [r7, #12]
 801039a:	f107 020c 	add.w	r2, r7, #12
 801039e:	f107 0308 	add.w	r3, r7, #8
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f000 fc75 	bl	8010c94 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80103be:	6838      	ldr	r0, [r7, #0]
 80103c0:	f7fd ff3e 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 80103c4:	4603      	mov	r3, r0
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
 80103de:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f7ff ffbf 	bl	8010364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 80103e6:	4603      	mov	r3, r0
 80103e8:	60bb      	str	r3, [r7, #8]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fc62 	bl	8010cb4 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE6cbeginEv>
 80103f0:	4603      	mov	r3, r0
 80103f2:	60fb      	str	r3, [r7, #12]
 80103f4:	f107 020c 	add.w	r2, r7, #12
 80103f8:	463b      	mov	r3, r7
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 fc69 	bl	8010cd4 <_ZN9__gnu_cxxmiIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8010402:	4602      	mov	r2, r0
 8010404:	f107 0308 	add.w	r3, r7, #8
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff ffba 	bl	8010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8010410:	4603      	mov	r3, r0
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 fc8a 	bl	8010d2e <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 801041a:	4603      	mov	r3, r0
 801041c:	4618      	mov	r0, r3
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fcbd 	bl	8010dac <_ZNSaIP13StreamMessageEC1Ev>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f000 fcc5 	bl	8010dc4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4618      	mov	r0, r3
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801045a:	b580      	push	{r7, lr}
 801045c:	b082      	sub	sp, #8
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	689a      	ldr	r2, [r3, #8]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010472:	461a      	mov	r2, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fcb9 	bl	8010dec <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	f7fd fe86 	bl	800e18e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801048c:	b5b0      	push	{r4, r5, r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681c      	ldr	r4, [r3, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 fcb7 	bl	8010e12 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 80104a4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80104a6:	461a      	mov	r2, r3
 80104a8:	4629      	mov	r1, r5
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 fcbc 	bl	8010e28 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff ffd1 	bl	801045a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4618      	mov	r0, r3
 80104bc:	3708      	adds	r7, #8
 80104be:	46bd      	mov	sp, r7
 80104c0:	bdb0      	pop	{r4, r5, r7, pc}

080104c2 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b082      	sub	sp, #8
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80104cc:	6838      	ldr	r0, [r7, #0]
 80104ce:	f000 fcb9 	bl	8010e44 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 80104d2:	4603      	mov	r3, r0
 80104d4:	4619      	mov	r1, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 fcbf 	bl	8010e5a <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80104dc:	bf00      	nop
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	1d1a      	adds	r2, r3, #4
 80104f0:	f107 030c 	add.w	r3, r7, #12
 80104f4:	4611      	mov	r1, r2
 80104f6:	4618      	mov	r0, r3
 80104f8:	f000 fbcc 	bl	8010c94 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8010506:	b580      	push	{r7, lr}
 8010508:	b082      	sub	sp, #8
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	429a      	cmp	r2, r3
 801051a:	d00c      	beq.n	8010536 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	f000 fcdf 	bl	8010ee8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	1d1a      	adds	r2, r3, #4
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	605a      	str	r2, [r3, #4]
      }
 8010534:	e008      	b.n	8010548 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff ffd4 	bl	80104e4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 801053c:	4603      	mov	r3, r0
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 fce2 	bl	8010f0c <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010548:	bf00      	nop
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010550:	b590      	push	{r4, r7, lr}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
      : _Function_base()
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	f7fd f986 	bl	800d86e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010562:	463b      	mov	r3, r7
 8010564:	4618      	mov	r0, r3
 8010566:	f000 fd4d 	bl	8011004 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00f      	beq.n	8010590 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010570:	687c      	ldr	r4, [r7, #4]
 8010572:	463b      	mov	r3, r7
 8010574:	4618      	mov	r0, r3
 8010576:	f000 fd50 	bl	801101a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 801057a:	4603      	mov	r3, r0
 801057c:	4619      	mov	r1, r3
 801057e:	4620      	mov	r0, r4
 8010580:	f000 fd56 	bl	8011030 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4a05      	ldr	r2, [pc, #20]	; (801059c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x4c>)
 8010588:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4a04      	ldr	r2, [pc, #16]	; (80105a0 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x50>)
 801058e:	609a      	str	r2, [r3, #8]
      }
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	370c      	adds	r7, #12
 8010596:	46bd      	mov	sp, r7
 8010598:	bd90      	pop	{r4, r7, pc}
 801059a:	bf00      	nop
 801059c:	08011055 	.word	0x08011055
 80105a0:	08011073 	.word	0x08011073

080105a4 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7fd ff24 	bl	800e3fa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 80105b2:	4603      	mov	r3, r0
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f000 fd72 	bl	80110b0 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 80105cc:	4603      	mov	r3, r0
      }
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	f107 030c 	add.w	r3, r7, #12
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 fd6d 	bl	80110c6 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b084      	sub	sp, #16
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	1d1a      	adds	r2, r3, #4
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f000 fd5c 	bl	80110c6 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 fd70 	bl	8011106 <_ZNSaIP5FieldIJEEED1Ev>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	f000 fd53 	bl	80110e6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 801064a:	b580      	push	{r7, lr}
 801064c:	b082      	sub	sp, #8
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff ffeb 	bl	8010630 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010664:	b590      	push	{r4, r7, lr}
 8010666:	b085      	sub	sp, #20
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	607a      	str	r2, [r7, #4]
 801066e:	603b      	str	r3, [r7, #0]
 8010670:	460b      	mov	r3, r1
 8010672:	817b      	strh	r3, [r7, #10]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2200      	movs	r2, #0
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	897a      	ldrh	r2, [r7, #10]
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	809a      	strh	r2, [r3, #4]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	3308      	adds	r3, #8
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff ffe0 	bl	801064a <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010690:	6a3a      	ldr	r2, [r7, #32]
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f000 fd75 	bl	8011184 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801069a:	68fc      	ldr	r4, [r7, #12]
 801069c:	f107 030a 	add.w	r3, r7, #10
 80106a0:	4619      	mov	r1, r3
 80106a2:	4805      	ldr	r0, [pc, #20]	; (80106b8 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 80106a4:	f000 fd96 	bl	80111d4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80106a8:	4603      	mov	r3, r0
 80106aa:	601c      	str	r4, [r3, #0]
    }
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	4618      	mov	r0, r3
 80106b0:	3714      	adds	r7, #20
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd90      	pop	{r4, r7, pc}
 80106b6:	bf00      	nop
 80106b8:	240001ac 	.word	0x240001ac

080106bc <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80106bc:	b590      	push	{r4, r7, lr}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	607a      	str	r2, [r7, #4]
 80106c6:	603b      	str	r3, [r7, #0]
 80106c8:	460b      	mov	r3, r1
 80106ca:	817b      	strh	r3, [r7, #10]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2200      	movs	r2, #0
 80106d0:	601a      	str	r2, [r3, #0]
 80106d2:	897a      	ldrh	r2, [r7, #10]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	809a      	strh	r2, [r3, #4]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	3308      	adds	r3, #8
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff ffb4 	bl	801064a <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	615a      	str	r2, [r3, #20]
        build(fields...);
 80106e8:	6a3a      	ldr	r2, [r7, #32]
 80106ea:	6839      	ldr	r1, [r7, #0]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 fdcd 	bl	801128c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80106f2:	68fc      	ldr	r4, [r7, #12]
 80106f4:	f107 030a 	add.w	r3, r7, #10
 80106f8:	4619      	mov	r1, r3
 80106fa:	4805      	ldr	r0, [pc, #20]	; (8010710 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 80106fc:	f000 fd6a 	bl	80111d4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010700:	4603      	mov	r3, r0
 8010702:	601c      	str	r4, [r3, #0]
    }
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4618      	mov	r0, r3
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	bd90      	pop	{r4, r7, pc}
 801070e:	bf00      	nop
 8010710:	240001ac 	.word	0x240001ac

08010714 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010714:	b590      	push	{r4, r7, lr}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	607a      	str	r2, [r7, #4]
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	460b      	mov	r3, r1
 8010722:	817b      	strh	r3, [r7, #10]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
 801072a:	897a      	ldrh	r2, [r7, #10]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	809a      	strh	r2, [r3, #4]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	3308      	adds	r3, #8
 8010734:	4618      	mov	r0, r3
 8010736:	f7ff ff88 	bl	801064a <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010740:	6a3a      	ldr	r2, [r7, #32]
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f000 fdc9 	bl	80112dc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801074a:	68fc      	ldr	r4, [r7, #12]
 801074c:	f107 030a 	add.w	r3, r7, #10
 8010750:	4619      	mov	r1, r3
 8010752:	4805      	ldr	r0, [pc, #20]	; (8010768 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 8010754:	f000 fd3e 	bl	80111d4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010758:	4603      	mov	r3, r0
 801075a:	601c      	str	r4, [r3, #0]
    }
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	4618      	mov	r0, r3
 8010760:	3714      	adds	r7, #20
 8010762:	46bd      	mov	sp, r7
 8010764:	bd90      	pop	{r4, r7, pc}
 8010766:	bf00      	nop
 8010768:	240001ac 	.word	0x240001ac

0801076c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	607a      	str	r2, [r7, #4]
 8010776:	603b      	str	r3, [r7, #0]
 8010778:	460b      	mov	r3, r1
 801077a:	817b      	strh	r3, [r7, #10]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	897a      	ldrh	r2, [r7, #10]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	809a      	strh	r2, [r3, #4]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	3308      	adds	r3, #8
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff ff5c 	bl	801064a <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010798:	6839      	ldr	r1, [r7, #0]
 801079a:	68f8      	ldr	r0, [r7, #12]
 801079c:	f000 fdc6 	bl	801132c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80107a0:	68fc      	ldr	r4, [r7, #12]
 80107a2:	f107 030a 	add.w	r3, r7, #10
 80107a6:	4619      	mov	r1, r3
 80107a8:	4804      	ldr	r0, [pc, #16]	; (80107bc <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 80107aa:	f000 fd13 	bl	80111d4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80107ae:	4603      	mov	r3, r0
 80107b0:	601c      	str	r4, [r3, #0]
    }
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	4618      	mov	r0, r3
 80107b6:	3714      	adds	r7, #20
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd90      	pop	{r4, r7, pc}
 80107bc:	240001ac 	.word	0x240001ac

080107c0 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7fd ff64 	bl	800e696 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 80107ce:	4603      	mov	r3, r0
 80107d0:	4618      	mov	r0, r3
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f000 fdc5 	bl	8011372 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 80107e8:	4603      	mov	r3, r0
      }
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b084      	sub	sp, #16
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6839      	ldr	r1, [r7, #0]
 8010800:	4618      	mov	r0, r3
 8010802:	f000 fdc1 	bl	8011388 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8010806:	4603      	mov	r3, r0
 8010808:	60bb      	str	r3, [r7, #8]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	f000 fdfa 	bl	8011406 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010812:	4603      	mov	r3, r0
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	f107 020c 	add.w	r2, r7, #12
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	4611      	mov	r1, r2
 8010820:	4618      	mov	r0, r3
 8010822:	f000 fe01 	bl	8011428 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8010826:	4603      	mov	r3, r0
 8010828:	f083 0301 	eor.w	r3, r3, #1
 801082c:	b2db      	uxtb	r3, r3
 801082e:	4618      	mov	r0, r3
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
 801083e:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	4618      	mov	r0, r3
 8010846:	f000 fe03 	bl	8011450 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 801084a:	4603      	mov	r3, r0
 801084c:	60bb      	str	r3, [r7, #8]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	f000 fe3c 	bl	80114ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010856:	4603      	mov	r3, r0
 8010858:	60fb      	str	r3, [r7, #12]
 801085a:	f107 020c 	add.w	r2, r7, #12
 801085e:	f107 0308 	add.w	r3, r7, #8
 8010862:	4611      	mov	r1, r2
 8010864:	4618      	mov	r0, r3
 8010866:	f000 fe43 	bl	80114f0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 801086a:	4603      	mov	r3, r0
 801086c:	f083 0301 	eor.w	r3, r3, #1
 8010870:	b2db      	uxtb	r3, r3
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 801087a:	b580      	push	{r7, lr}
 801087c:	b084      	sub	sp, #16
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6839      	ldr	r1, [r7, #0]
 8010888:	4618      	mov	r0, r3
 801088a:	f000 fe45 	bl	8011518 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 801088e:	4603      	mov	r3, r0
 8010890:	60bb      	str	r3, [r7, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4618      	mov	r0, r3
 8010896:	f000 fe7e 	bl	8011596 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801089a:	4603      	mov	r3, r0
 801089c:	60fb      	str	r3, [r7, #12]
 801089e:	f107 020c 	add.w	r2, r7, #12
 80108a2:	f107 0308 	add.w	r3, r7, #8
 80108a6:	4611      	mov	r1, r2
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 fe85 	bl	80115b8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 80108ae:	4603      	mov	r3, r0
 80108b0:	f083 0301 	eor.w	r3, r3, #1
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	4618      	mov	r0, r3
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80108be:	b580      	push	{r7, lr}
 80108c0:	b084      	sub	sp, #16
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6839      	ldr	r1, [r7, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 fe87 	bl	80115e0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80108d2:	4603      	mov	r3, r0
 80108d4:	60bb      	str	r3, [r7, #8]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	4618      	mov	r0, r3
 80108da:	f000 fec0 	bl	801165e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80108de:	4603      	mov	r3, r0
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	f107 020c 	add.w	r2, r7, #12
 80108e6:	f107 0308 	add.w	r3, r7, #8
 80108ea:	4611      	mov	r1, r2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f000 fec7 	bl	8011680 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f083 0301 	eor.w	r3, r3, #1
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 8010902:	b580      	push	{r7, lr}
 8010904:	b084      	sub	sp, #16
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6839      	ldr	r1, [r7, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	f000 fec9 	bl	80116a8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8010916:	4603      	mov	r3, r0
 8010918:	60bb      	str	r3, [r7, #8]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 ff02 	bl	8011726 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010922:	4603      	mov	r3, r0
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	f107 020c 	add.w	r2, r7, #12
 801092a:	f107 0308 	add.w	r3, r7, #8
 801092e:	4611      	mov	r1, r2
 8010930:	4618      	mov	r0, r3
 8010932:	f000 ff09 	bl	8011748 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010936:	4603      	mov	r3, r0
 8010938:	f083 0301 	eor.w	r3, r3, #1
 801093c:	b2db      	uxtb	r3, r3
 801093e:	4618      	mov	r0, r3
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
	...

08010948 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010948:	b590      	push	{r4, r7, lr}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	f7fc ff8a 	bl	800d86e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 801095a:	463b      	mov	r3, r7
 801095c:	4618      	mov	r0, r3
 801095e:	f000 ff07 	bl	8011770 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00f      	beq.n	8010988 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010968:	687c      	ldr	r4, [r7, #4]
 801096a:	463b      	mov	r3, r7
 801096c:	4618      	mov	r0, r3
 801096e:	f000 ff0a 	bl	8011786 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8010972:	4603      	mov	r3, r0
 8010974:	4619      	mov	r1, r3
 8010976:	4620      	mov	r0, r4
 8010978:	f000 ff10 	bl	801179c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4a05      	ldr	r2, [pc, #20]	; (8010994 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 8010980:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4a04      	ldr	r2, [pc, #16]	; (8010998 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 8010986:	609a      	str	r2, [r3, #8]
      }
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	bd90      	pop	{r4, r7, pc}
 8010992:	bf00      	nop
 8010994:	080117c1 	.word	0x080117c1
 8010998:	080117df 	.word	0x080117df

0801099c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 801099c:	b590      	push	{r4, r7, lr}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fc ff60 	bl	800d86e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80109ae:	463b      	mov	r3, r7
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 ff33 	bl	801181c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00f      	beq.n	80109dc <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80109bc:	687c      	ldr	r4, [r7, #4]
 80109be:	463b      	mov	r3, r7
 80109c0:	4618      	mov	r0, r3
 80109c2:	f000 ff36 	bl	8011832 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80109c6:	4603      	mov	r3, r0
 80109c8:	4619      	mov	r1, r3
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 ff3c 	bl	8011848 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4a05      	ldr	r2, [pc, #20]	; (80109e8 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 80109d4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a04      	ldr	r2, [pc, #16]	; (80109ec <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 80109da:	609a      	str	r2, [r3, #8]
      }
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd90      	pop	{r4, r7, pc}
 80109e6:	bf00      	nop
 80109e8:	0801186d 	.word	0x0801186d
 80109ec:	0801188b 	.word	0x0801188b

080109f0 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010a06:	b5b0      	push	{r4, r5, r7, lr}
 8010a08:	b082      	sub	sp, #8
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d011      	beq.n	8010a40 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010a1c:	687c      	ldr	r4, [r7, #4]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	685d      	ldr	r5, [r3, #4]
 8010a22:	6838      	ldr	r0, [r7, #0]
 8010a24:	f000 ff50 	bl	80118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 ff6a 	bl	8011908 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	1d1a      	adds	r2, r3, #4
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	605a      	str	r2, [r3, #4]
 8010a3e:	e00c      	b.n	8010a5a <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff fbe9 	bl	8010218 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 8010a46:	4604      	mov	r4, r0
 8010a48:	6838      	ldr	r0, [r7, #0]
 8010a4a:	f000 ff3d 	bl	80118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	461a      	mov	r2, r3
 8010a52:	4621      	mov	r1, r4
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 ff69 	bl	801192c <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 ffe2 	bl	8011a24 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 8010a60:	4603      	mov	r3, r0
      }
 8010a62:	4618      	mov	r0, r3
 8010a64:	3708      	adds	r7, #8
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bdb0      	pop	{r4, r5, r7, pc}

08010a6a <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fc fef9 	bl	800d86e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010a7c:	6838      	ldr	r0, [r7, #0]
 8010a7e:	f000 ffec 	bl	8011a5a <_ZNKSt8functionIFvvEEcvbEv>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00d      	beq.n	8010aa4 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	6839      	ldr	r1, [r7, #0]
 8010a90:	2202      	movs	r2, #2
 8010a92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	68da      	ldr	r2, [r3, #12]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	689a      	ldr	r2, [r3, #8]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	609a      	str	r2, [r3, #8]
    }
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f000 ffdb 	bl	8011a7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f103 0208 	add.w	r2, r3, #8
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	3308      	adds	r3, #8
 8010ace:	4619      	mov	r1, r3
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	f000 fff9 	bl	8011ac8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f103 020c 	add.w	r2, r3, #12
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	330c      	adds	r3, #12
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	f001 f80f 	bl	8011b06 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6839      	ldr	r1, [r7, #0]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f001 f810 	bl	8011b44 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 8010b24:	4603      	mov	r3, r0
 8010b26:	4618      	mov	r0, r3
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b082      	sub	sp, #8
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fa fcbe 	bl	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	4618      	mov	r0, r3
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010b48:	b590      	push	{r4, r7, lr}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f001 f80d 	bl	8011b72 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010b58:	bf00      	nop
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	370c      	adds	r7, #12
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd90      	pop	{r4, r7, pc}

08010b62 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b082      	sub	sp, #8
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fa fcb4 	bl	800b4dc <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 8010b74:	4603      	mov	r3, r0
 8010b76:	4618      	mov	r0, r3
 8010b78:	3708      	adds	r7, #8
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010b7e:	b480      	push	{r7}
 8010b80:	b083      	sub	sp, #12
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	370c      	adds	r7, #12
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8010b9e:	6838      	ldr	r0, [r7, #0]
 8010ba0:	f000 fff2 	bl	8011b88 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fff8 	bl	8011b9e <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010bb6:	b5b0      	push	{r4, r5, r7, lr}
 8010bb8:	b088      	sub	sp, #32
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	60f8      	str	r0, [r7, #12]
 8010bbe:	60b9      	str	r1, [r7, #8]
 8010bc0:	607a      	str	r2, [r7, #4]
 8010bc2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7f0 fb4e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010bca:	4604      	mov	r4, r0
 8010bcc:	6838      	ldr	r0, [r7, #0]
 8010bce:	f000 fff9 	bl	8011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010bd2:	4605      	mov	r5, r0
 8010bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bd6:	f7f0 fb5c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	462a      	mov	r2, r5
 8010bde:	4621      	mov	r1, r4
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f000 fffa 	bl	8011bda <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8010be6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010be8:	69f8      	ldr	r0, [r7, #28]
 8010bea:	f7fa fda8 	bl	800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	f107 0010 	add.w	r0, r7, #16
 8010bf4:	68ba      	ldr	r2, [r7, #8]
 8010bf6:	68f9      	ldr	r1, [r7, #12]
 8010bf8:	f7fa fc7e 	bl	800b4f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d007      	beq.n	8010c12 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010c02:	6939      	ldr	r1, [r7, #16]
 8010c04:	697a      	ldr	r2, [r7, #20]
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f001 f809 	bl	8011c20 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	e00b      	b.n	8010c2a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010c12:	69f9      	ldr	r1, [r7, #28]
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7fa fda5 	bl	800b764 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8010c1a:	693a      	ldr	r2, [r7, #16]
 8010c1c:	f107 0318 	add.w	r3, r7, #24
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fa fdaf 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8010c28:	69bb      	ldr	r3, [r7, #24]
      }
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3720      	adds	r7, #32
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bdb0      	pop	{r4, r5, r7, pc}

08010c32 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c32:	b480      	push	{r7}
 8010c34:	b083      	sub	sp, #12
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010c48:	b590      	push	{r4, r7, lr}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	7239      	strb	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	4621      	mov	r1, r4
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f001 f82f 	bl	8011cbe <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd90      	pop	{r4, r7, pc}

08010c6a <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010c6a:	b5b0      	push	{r4, r5, r7, lr}
 8010c6c:	b084      	sub	sp, #16
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	60f8      	str	r0, [r7, #12]
 8010c72:	7239      	strb	r1, [r7, #8]
 8010c74:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8010c76:	68fc      	ldr	r4, [r7, #12]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff ffda 	bl	8010c32 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	461a      	mov	r2, r3
 8010c82:	4629      	mov	r1, r5
 8010c84:	4620      	mov	r0, r4
 8010c86:	f7ff ffdf 	bl	8010c48 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bdb0      	pop	{r4, r5, r7, pc}

08010c94 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	601a      	str	r2, [r3, #0]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	f107 030c 	add.w	r3, r7, #12
 8010cc2:	4611      	mov	r1, r2
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f001 f812 	bl	8011cee <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <_ZN9__gnu_cxxmiIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f001 f815 	bl	8011d0e <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	681c      	ldr	r4, [r3, #0]
 8010ce8:	6838      	ldr	r0, [r7, #0]
 8010cea:	f001 f810 	bl	8011d0e <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	1ae3      	subs	r3, r4, r3
 8010cf4:	109b      	asrs	r3, r3, #2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	370c      	adds	r7, #12
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd90      	pop	{r4, r7, pc}

08010cfe <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8010cfe:	b590      	push	{r4, r7, lr}
 8010d00:	b085      	sub	sp, #20
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	60f8      	str	r0, [r7, #12]
 8010d06:	60b9      	str	r1, [r7, #8]
 8010d08:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f001 f80a 	bl	8011d24 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010d10:	4604      	mov	r4, r0
 8010d12:	68b8      	ldr	r0, [r7, #8]
 8010d14:	f001 f806 	bl	8011d24 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f001 f80b 	bl	8011d3a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8010d24:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8010d26:	4618      	mov	r0, r3
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd90      	pop	{r4, r7, pc}

08010d2e <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 8010d2e:	b590      	push	{r4, r7, lr}
 8010d30:	b085      	sub	sp, #20
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8010d38:	463b      	mov	r3, r7
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fb21 	bl	8010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8010d42:	4603      	mov	r3, r0
 8010d44:	60bb      	str	r3, [r7, #8]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff fbcc 	bl	80104e4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	60fb      	str	r3, [r7, #12]
 8010d50:	f107 020c 	add.w	r2, r7, #12
 8010d54:	f107 0308 	add.w	r3, r7, #8
 8010d58:	4611      	mov	r1, r2
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fd fa7b 	bl	800e256 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8010d60:	4603      	mov	r3, r0
 8010d62:	f083 0301 	eor.w	r3, r3, #1
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00e      	beq.n	8010d8a <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x5c>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8010d6c:	463b      	mov	r3, r7
 8010d6e:	2101      	movs	r1, #1
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff fb07 	bl	8010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8010d76:	4604      	mov	r4, r0
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7ff fbb3 	bl	80104e4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	4619      	mov	r1, r3
 8010d84:	4620      	mov	r0, r4
 8010d86:	f7ff ffba 	bl	8010cfe <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	1f1a      	subs	r2, r3, #4
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	4610      	mov	r0, r2
 8010d9e:	f000 ffed 	bl	8011d7c <_ZNSt16allocator_traitsISaIP13StreamMessageEE7destroyIS1_EEvRS2_PT_>
      return __position;
 8010da2:	683b      	ldr	r3, [r7, #0]
    }
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}

08010dac <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 ffed 	bl	8011d94 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	601a      	str	r2, [r3, #0]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	605a      	str	r2, [r3, #4]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	609a      	str	r2, [r3, #8]
	{ }
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	607a      	str	r2, [r7, #4]
	if (__p)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d005      	beq.n	8010e0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	68b9      	ldr	r1, [r7, #8]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f000 ffd0 	bl	8011daa <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 8010e0a:	bf00      	nop
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010e12:	b480      	push	{r7}
 8010e14:	b083      	sub	sp, #12
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010e34:	68b9      	ldr	r1, [r7, #8]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f000 ffd6 	bl	8011de8 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 8010e3c:	bf00      	nop
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010e5a:	b5b0      	push	{r4, r5, r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d011      	beq.n	8010e94 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010e70:	687c      	ldr	r4, [r7, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	685d      	ldr	r5, [r3, #4]
 8010e76:	6838      	ldr	r0, [r7, #0]
 8010e78:	f000 ffcc 	bl	8011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	461a      	mov	r2, r3
 8010e80:	4629      	mov	r1, r5
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 ffe6 	bl	8011e54 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	1d1a      	adds	r2, r3, #4
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	605a      	str	r2, [r3, #4]
 8010e92:	e00c      	b.n	8010eae <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7ff fbae 	bl	80105f6 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	6838      	ldr	r0, [r7, #0]
 8010e9e:	f000 ffb9 	bl	8011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 ffe5 	bl	8011e78 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f001 f85e 	bl	8011f70 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 8010eb4:	4603      	mov	r3, r0
      }
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bdb0      	pop	{r4, r5, r7, pc}

08010ebe <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8010ebe:	b590      	push	{r4, r7, lr}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010ec8:	6838      	ldr	r0, [r7, #0]
 8010eca:	f001 f86c 	bl	8011fa6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	681c      	ldr	r4, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	2004      	movs	r0, #4
 8010ed8:	f7ef fa2a 	bl	8000330 <_ZnwjPv>
 8010edc:	4603      	mov	r3, r0
 8010ede:	601c      	str	r4, [r3, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd90      	pop	{r4, r7, pc}

08010ee8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f001 f856 	bl	8011fa6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010efa:	4603      	mov	r3, r0
 8010efc:	4619      	mov	r1, r3
 8010efe:	68b8      	ldr	r0, [r7, #8]
 8010f00:	f7ff ffdd 	bl	8010ebe <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 8010f04:	bf00      	nop
 8010f06:	3710      	adds	r7, #16
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010f0c:	b5b0      	push	{r4, r5, r7, lr}
 8010f0e:	b08c      	sub	sp, #48	; 0x30
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010f18:	4a39      	ldr	r2, [pc, #228]	; (8011000 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8010f1a:	2101      	movs	r1, #1
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f001 f84d 	bl	8011fbc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 8010f22:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7ff fa17 	bl	8010364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 8010f36:	4603      	mov	r3, r0
 8010f38:	617b      	str	r3, [r7, #20]
 8010f3a:	f107 0214 	add.w	r2, r7, #20
 8010f3e:	f107 0308 	add.w	r3, r7, #8
 8010f42:	4611      	mov	r1, r2
 8010f44:	4618      	mov	r0, r3
 8010f46:	f001 f880 	bl	801204a <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f52:	4618      	mov	r0, r3
 8010f54:	f001 f88e 	bl	8012074 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 8010f58:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010f5e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010f64:	69fa      	ldr	r2, [r7, #28]
 8010f66:	18d5      	adds	r5, r2, r3
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f001 f81c 	bl	8011fa6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	4629      	mov	r1, r5
 8010f74:	4620      	mov	r0, r4
 8010f76:	f7ff ffb7 	bl	8010ee8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010f7e:	f107 0308 	add.w	r3, r7, #8
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fd f95c 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7ff ff3f 	bl	8010e12 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010f94:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010f96:	69fa      	ldr	r2, [r7, #28]
 8010f98:	4621      	mov	r1, r4
 8010f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f9c:	f001 f87e 	bl	801209c <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010fa0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010fa8:	f107 0308 	add.w	r3, r7, #8
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fd f947 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff ff2a 	bl	8010e12 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010fbe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010fc0:	69ba      	ldr	r2, [r7, #24]
 8010fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f001 f869 	bl	801209c <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010fca:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010fcc:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	689a      	ldr	r2, [r3, #8]
 8010fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8010fd8:	461a      	mov	r2, r3
 8010fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010fdc:	f7ff ff06 	bl	8010dec <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	69fa      	ldr	r2, [r7, #28]
 8010fe4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	69ba      	ldr	r2, [r7, #24]
 8010fea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	69fa      	ldr	r2, [r7, #28]
 8010ff2:	441a      	add	r2, r3
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	609a      	str	r2, [r3, #8]
    }
 8010ff8:	bf00      	nop
 8010ffa:	3730      	adds	r7, #48	; 0x30
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8011000:	08021808 	.word	0x08021808

08011004 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
	  { return true; }
 801100c:	2301      	movs	r3, #1
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr

0801101a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801101a:	b480      	push	{r7}
 801101c:	b083      	sub	sp, #12
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8011030:	b590      	push	{r4, r7, lr}
 8011032:	b083      	sub	sp, #12
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 801103a:	6838      	ldr	r0, [r7, #0]
 801103c:	f7ff ffed 	bl	801101a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8011040:	4603      	mov	r3, r0
 8011042:	4622      	mov	r2, r4
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f001 f83c 	bl	80120c4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 801104c:	bf00      	nop
 801104e:	370c      	adds	r7, #12
 8011050:	46bd      	mov	sp, r7
 8011052:	bd90      	pop	{r4, r7, pc}

08011054 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f001 f84a 	bl	80120f6 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011062:	4603      	mov	r3, r0
 8011064:	4618      	mov	r0, r3
 8011066:	f001 f856 	bl	8012116 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 801106a:	bf00      	nop
      }
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}

08011072 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011072:	b590      	push	{r4, r7, lr}
 8011074:	b085      	sub	sp, #20
 8011076:	af00      	add	r7, sp, #0
 8011078:	60f8      	str	r0, [r7, #12]
 801107a:	60b9      	str	r1, [r7, #8]
 801107c:	4613      	mov	r3, r2
 801107e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011080:	79fb      	ldrb	r3, [r7, #7]
 8011082:	2b01      	cmp	r3, #1
 8011084:	d109      	bne.n	801109a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011086:	68b8      	ldr	r0, [r7, #8]
 8011088:	f001 f835 	bl	80120f6 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 801108c:	4604      	mov	r4, r0
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f001 f851 	bl	8012136 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
 8011094:	4603      	mov	r3, r0
 8011096:	601c      	str	r4, [r3, #0]
	    break;
 8011098:	e005      	b.n	80110a6 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 801109a:	79fb      	ldrb	r3, [r7, #7]
 801109c:	461a      	mov	r2, r3
 801109e:	68b9      	ldr	r1, [r7, #8]
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f001 f854 	bl	801214e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 80110a6:	2300      	movs	r3, #0
      }
 80110a8:	4618      	mov	r0, r3
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd90      	pop	{r4, r7, pc}

080110b0 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4618      	mov	r0, r3
 80110bc:	370c      	adds	r7, #12
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80110c6:	b480      	push	{r7}
 80110c8:	b083      	sub	sp, #12
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	601a      	str	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4618      	mov	r0, r3
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b082      	sub	sp, #8
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f001 f858 	bl	80121a4 <_ZNSaIP5FieldIJEEEC1Ev>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f001 f860 	bl	80121bc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4618      	mov	r0, r3
 8011100:	3708      	adds	r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011106:	b480      	push	{r7}
 8011108:	b083      	sub	sp, #12
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	689a      	ldr	r2, [r3, #8]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8011134:	461a      	mov	r2, r3
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f001 f854 	bl	80121e4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4618      	mov	r0, r3
 8011140:	f7ff fa6a 	bl	8010618 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4618      	mov	r0, r3
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801114e:	b5b0      	push	{r4, r5, r7, lr}
 8011150:	b082      	sub	sp, #8
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681c      	ldr	r4, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	f001 f852 	bl	801220a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8011166:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011168:	461a      	mov	r2, r3
 801116a:	4629      	mov	r1, r5
 801116c:	4620      	mov	r0, r4
 801116e:	f001 f857 	bl	8012220 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff ffd1 	bl	801111c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bdb0      	pop	{r4, r5, r7, pc}

08011184 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011184:	b590      	push	{r4, r7, lr}
 8011186:	b087      	sub	sp, #28
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 801119a:	2008      	movs	r0, #8
 801119c:	f00f ff92 	bl	80210c4 <_Znwj>
 80111a0:	4603      	mov	r3, r0
 80111a2:	461c      	mov	r4, r3
 80111a4:	68b9      	ldr	r1, [r7, #8]
 80111a6:	4620      	mov	r0, r4
 80111a8:	f001 f858 	bl	801225c <_ZN5FieldIJhEEC1EPh>
 80111ac:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f103 0208 	add.w	r2, r3, #8
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	613b      	str	r3, [r7, #16]
 80111b8:	f107 0310 	add.w	r3, r7, #16
 80111bc:	4619      	mov	r1, r3
 80111be:	4610      	mov	r0, r2
 80111c0:	f001 f862 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 80111c4:	6879      	ldr	r1, [r7, #4]
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f001 f86f 	bl	80122aa <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 80111cc:	bf00      	nop
 80111ce:	371c      	adds	r7, #28
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd90      	pop	{r4, r7, pc}

080111d4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 80111d4:	b590      	push	{r4, r7, lr}
 80111d6:	b08b      	sub	sp, #44	; 0x2c
 80111d8:	af02      	add	r7, sp, #8
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f001 f885 	bl	80122f0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 80111e6:	4603      	mov	r3, r0
 80111e8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7f3 ffcf 	bl	800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 80111f0:	4603      	mov	r3, r0
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	f107 020c 	add.w	r2, r7, #12
 80111f8:	f107 0308 	add.w	r3, r7, #8
 80111fc:	4611      	mov	r1, r2
 80111fe:	4618      	mov	r0, r3
 8011200:	f7f3 ffd2 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d112      	bne.n	8011230 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f001 f87f 	bl	801230e <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8011210:	f107 0308 	add.w	r3, r7, #8
 8011214:	4618      	mov	r0, r3
 8011216:	f7f3 ffec 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 801121a:	4603      	mov	r3, r0
 801121c:	461a      	mov	r2, r3
 801121e:	f107 0310 	add.w	r3, r7, #16
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f001 f87f 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d001      	beq.n	8011234 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8011230:	2301      	movs	r3, #1
 8011232:	e000      	b.n	8011236 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8011234:	2300      	movs	r3, #0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d01b      	beq.n	8011272 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801123a:	687c      	ldr	r4, [r7, #4]
 801123c:	f107 0208 	add.w	r2, r7, #8
 8011240:	f107 0314 	add.w	r3, r7, #20
 8011244:	4611      	mov	r1, r2
 8011246:	4618      	mov	r0, r3
 8011248:	f001 f892 	bl	8012370 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 801124c:	f107 0318 	add.w	r3, r7, #24
 8011250:	6839      	ldr	r1, [r7, #0]
 8011252:	4618      	mov	r0, r3
 8011254:	f001 f87d 	bl	8012352 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8011258:	f107 0218 	add.w	r2, r7, #24
 801125c:	f107 031c 	add.w	r3, r7, #28
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	4613      	mov	r3, r2
 8011264:	4a08      	ldr	r2, [pc, #32]	; (8011288 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8011266:	6979      	ldr	r1, [r7, #20]
 8011268:	4620      	mov	r0, r4
 801126a:	f001 f891 	bl	8012390 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 801126e:	4603      	mov	r3, r0
 8011270:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8011272:	f107 0308 	add.w	r3, r7, #8
 8011276:	4618      	mov	r0, r3
 8011278:	f7f3 ffbb 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 801127c:	4603      	mov	r3, r0
 801127e:	3304      	adds	r3, #4
      }
 8011280:	4618      	mov	r0, r3
 8011282:	3724      	adds	r7, #36	; 0x24
 8011284:	46bd      	mov	sp, r7
 8011286:	bd90      	pop	{r4, r7, pc}
 8011288:	08021870 	.word	0x08021870

0801128c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 801128c:	b590      	push	{r4, r7, lr}
 801128e:	b087      	sub	sp, #28
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	1c5a      	adds	r2, r3, #1
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 80112a2:	2008      	movs	r0, #8
 80112a4:	f00f ff0e 	bl	80210c4 <_Znwj>
 80112a8:	4603      	mov	r3, r0
 80112aa:	461c      	mov	r4, r3
 80112ac:	68b9      	ldr	r1, [r7, #8]
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 ffd4 	bl	801225c <_ZN5FieldIJhEEC1EPh>
 80112b4:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f103 0208 	add.w	r2, r3, #8
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	613b      	str	r3, [r7, #16]
 80112c0:	f107 0310 	add.w	r3, r7, #16
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f000 ffde 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 80112cc:	6879      	ldr	r1, [r7, #4]
 80112ce:	68f8      	ldr	r0, [r7, #12]
 80112d0:	f000 f82c 	bl	801132c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 80112d4:	bf00      	nop
 80112d6:	371c      	adds	r7, #28
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd90      	pop	{r4, r7, pc}

080112dc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 80112dc:	b590      	push	{r4, r7, lr}
 80112de:	b087      	sub	sp, #28
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	1c5a      	adds	r2, r3, #1
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 80112f2:	2008      	movs	r0, #8
 80112f4:	f00f fee6 	bl	80210c4 <_Znwj>
 80112f8:	4603      	mov	r3, r0
 80112fa:	461c      	mov	r4, r3
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	4620      	mov	r0, r4
 8011300:	f000 ffac 	bl	801225c <_ZN5FieldIJhEEC1EPh>
 8011304:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f103 0208 	add.w	r2, r3, #8
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	613b      	str	r3, [r7, #16]
 8011310:	f107 0310 	add.w	r3, r7, #16
 8011314:	4619      	mov	r1, r3
 8011316:	4610      	mov	r0, r2
 8011318:	f000 ffb6 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f001 f874 	bl	801240c <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8011324:	bf00      	nop
 8011326:	371c      	adds	r7, #28
 8011328:	46bd      	mov	sp, r7
 801132a:	bd90      	pop	{r4, r7, pc}

0801132c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 801132c:	b590      	push	{r4, r7, lr}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	1c5a      	adds	r2, r3, #1
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011340:	2008      	movs	r0, #8
 8011342:	f00f febf 	bl	80210c4 <_Znwj>
 8011346:	4603      	mov	r3, r0
 8011348:	461c      	mov	r4, r3
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	4620      	mov	r0, r4
 801134e:	f000 ff85 	bl	801225c <_ZN5FieldIJhEEC1EPh>
 8011352:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f103 0208 	add.w	r2, r3, #8
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	60bb      	str	r3, [r7, #8]
 801135e:	f107 0308 	add.w	r3, r7, #8
 8011362:	4619      	mov	r1, r3
 8011364:	4610      	mov	r0, r2
 8011366:	f000 ff8f 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 801136a:	bf00      	nop
    }
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	bd90      	pop	{r4, r7, pc}

08011372 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8011372:	b480      	push	{r7}
 8011374:	b083      	sub	sp, #12
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011388:	b5b0      	push	{r4, r5, r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f001 f85d 	bl	8012452 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8011398:	4604      	mov	r4, r0
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f001 f865 	bl	801246a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80113a0:	4602      	mov	r2, r0
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	4621      	mov	r1, r4
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f001 f86b 	bl	8012482 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 80113ac:	4603      	mov	r3, r0
 80113ae:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 f828 	bl	8011406 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80113b6:	4603      	mov	r3, r0
 80113b8:	60fb      	str	r3, [r7, #12]
 80113ba:	f107 020c 	add.w	r2, r7, #12
 80113be:	f107 0308 	add.w	r3, r7, #8
 80113c2:	4611      	mov	r1, r2
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 f82f 	bl	8011428 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 80113ca:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d110      	bne.n	80113f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80113d0:	687c      	ldr	r4, [r7, #4]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f0 fff3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80113de:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	4629      	mov	r1, r5
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7ef fd77 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d004      	beq.n	80113fc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 f807 	bl	8011406 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80113f8:	4603      	mov	r3, r0
 80113fa:	e000      	b.n	80113fe <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 80113fc:	68bb      	ldr	r3, [r7, #8]
    }
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bdb0      	pop	{r4, r5, r7, pc}

08011406 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8011406:	b580      	push	{r7, lr}
 8011408:	b084      	sub	sp, #16
 801140a:	af00      	add	r7, sp, #0
 801140c:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	1d1a      	adds	r2, r3, #4
 8011412:	f107 030c 	add.w	r3, r7, #12
 8011416:	4611      	mov	r1, r2
 8011418:	4618      	mov	r0, r3
 801141a:	f001 f865 	bl	80124e8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	429a      	cmp	r2, r3
 801143c:	bf0c      	ite	eq
 801143e:	2301      	moveq	r3, #1
 8011440:	2300      	movne	r3, #0
 8011442:	b2db      	uxtb	r3, r3
 8011444:	4618      	mov	r0, r3
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011450:	b5b0      	push	{r4, r5, r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f001 f853 	bl	8012506 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8011460:	4604      	mov	r4, r0
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f001 f85b 	bl	801251e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8011468:	4602      	mov	r2, r0
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	4621      	mov	r1, r4
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f001 f861 	bl	8012536 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8011474:	4603      	mov	r3, r0
 8011476:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f000 f828 	bl	80114ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801147e:	4603      	mov	r3, r0
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	f107 020c 	add.w	r2, r7, #12
 8011486:	f107 0308 	add.w	r3, r7, #8
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f000 f82f 	bl	80114f0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 8011492:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8011494:	2b00      	cmp	r3, #0
 8011496:	d110      	bne.n	80114ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8011498:	687c      	ldr	r4, [r7, #4]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f5 ffcc 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80114a6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	461a      	mov	r2, r3
 80114ac:	4629      	mov	r1, r5
 80114ae:	4620      	mov	r0, r4
 80114b0:	f7ef fd13 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d004      	beq.n	80114c4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 f807 	bl	80114ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80114c0:	4603      	mov	r3, r0
 80114c2:	e000      	b.n	80114c6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 80114c4:	68bb      	ldr	r3, [r7, #8]
    }
 80114c6:	4618      	mov	r0, r3
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bdb0      	pop	{r4, r5, r7, pc}

080114ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b084      	sub	sp, #16
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	1d1a      	adds	r2, r3, #4
 80114da:	f107 030c 	add.w	r3, r7, #12
 80114de:	4611      	mov	r1, r2
 80114e0:	4618      	mov	r0, r3
 80114e2:	f001 f85b 	bl	801259c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	429a      	cmp	r2, r3
 8011504:	bf0c      	ite	eq
 8011506:	2301      	moveq	r3, #1
 8011508:	2300      	movne	r3, #0
 801150a:	b2db      	uxtb	r3, r3
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011518:	b5b0      	push	{r4, r5, r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f001 f849 	bl	80125ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8011528:	4604      	mov	r4, r0
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f001 f851 	bl	80125d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8011530:	4602      	mov	r2, r0
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	4621      	mov	r1, r4
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f001 f857 	bl	80125ea <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 801153c:	4603      	mov	r3, r0
 801153e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f828 	bl	8011596 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011546:	4603      	mov	r3, r0
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	f107 020c 	add.w	r2, r7, #12
 801154e:	f107 0308 	add.w	r3, r7, #8
 8011552:	4611      	mov	r1, r2
 8011554:	4618      	mov	r0, r3
 8011556:	f000 f82f 	bl	80115b8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 801155a:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801155c:	2b00      	cmp	r3, #0
 801155e:	d110      	bne.n	8011582 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8011560:	687c      	ldr	r4, [r7, #4]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	4618      	mov	r0, r3
 801156a:	f7f9 f9a6 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801156e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	461a      	mov	r2, r3
 8011574:	4629      	mov	r1, r5
 8011576:	4620      	mov	r0, r4
 8011578:	f7ef fcaf 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d004      	beq.n	801158c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f807 	bl	8011596 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011588:	4603      	mov	r3, r0
 801158a:	e000      	b.n	801158e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 801158c:	68bb      	ldr	r3, [r7, #8]
    }
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bdb0      	pop	{r4, r5, r7, pc}

08011596 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	1d1a      	adds	r2, r3, #4
 80115a2:	f107 030c 	add.w	r3, r7, #12
 80115a6:	4611      	mov	r1, r2
 80115a8:	4618      	mov	r0, r3
 80115aa:	f001 f851 	bl	8012650 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	bf0c      	ite	eq
 80115ce:	2301      	moveq	r3, #1
 80115d0:	2300      	movne	r3, #0
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80115e0:	b5b0      	push	{r4, r5, r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f001 f83f 	bl	801266e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80115f0:	4604      	mov	r4, r0
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f001 f847 	bl	8012686 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80115f8:	4602      	mov	r2, r0
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	4621      	mov	r1, r4
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f001 f84d 	bl	801269e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8011604:	4603      	mov	r3, r0
 8011606:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 f828 	bl	801165e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801160e:	4603      	mov	r3, r0
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	f107 020c 	add.w	r2, r7, #12
 8011616:	f107 0308 	add.w	r3, r7, #8
 801161a:	4611      	mov	r1, r2
 801161c:	4618      	mov	r0, r3
 801161e:	f000 f82f 	bl	8011680 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8011622:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8011624:	2b00      	cmp	r3, #0
 8011626:	d110      	bne.n	801164a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8011628:	687c      	ldr	r4, [r7, #4]
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	4618      	mov	r0, r3
 8011632:	f7f7 faca 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011636:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	461a      	mov	r2, r3
 801163c:	4629      	mov	r1, r5
 801163e:	4620      	mov	r0, r4
 8011640:	f7ef fc4b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f807 	bl	801165e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011650:	4603      	mov	r3, r0
 8011652:	e000      	b.n	8011656 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8011654:	68bb      	ldr	r3, [r7, #8]
    }
 8011656:	4618      	mov	r0, r3
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bdb0      	pop	{r4, r5, r7, pc}

0801165e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 801165e:	b580      	push	{r7, lr}
 8011660:	b084      	sub	sp, #16
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	1d1a      	adds	r2, r3, #4
 801166a:	f107 030c 	add.w	r3, r7, #12
 801166e:	4611      	mov	r1, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f001 f847 	bl	8012704 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	4618      	mov	r0, r3
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	429a      	cmp	r2, r3
 8011694:	bf0c      	ite	eq
 8011696:	2301      	moveq	r3, #1
 8011698:	2300      	movne	r3, #0
 801169a:	b2db      	uxtb	r3, r3
 801169c:	4618      	mov	r0, r3
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80116a8:	b5b0      	push	{r4, r5, r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f001 f835 	bl	8012722 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80116b8:	4604      	mov	r4, r0
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f001 f83d 	bl	801273a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80116c0:	4602      	mov	r2, r0
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	4621      	mov	r1, r4
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f001 f843 	bl	8012752 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 80116cc:	4603      	mov	r3, r0
 80116ce:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 f828 	bl	8011726 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80116d6:	4603      	mov	r3, r0
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	f107 020c 	add.w	r2, r7, #12
 80116de:	f107 0308 	add.w	r3, r7, #8
 80116e2:	4611      	mov	r1, r2
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 f82f 	bl	8011748 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 80116ea:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d110      	bne.n	8011712 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80116f0:	687c      	ldr	r4, [r7, #4]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f2 fd67 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80116fe:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	461a      	mov	r2, r3
 8011704:	4629      	mov	r1, r5
 8011706:	4620      	mov	r0, r4
 8011708:	f7ef fbe7 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d004      	beq.n	801171c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 f807 	bl	8011726 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011718:	4603      	mov	r3, r0
 801171a:	e000      	b.n	801171e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 801171c:	68bb      	ldr	r3, [r7, #8]
    }
 801171e:	4618      	mov	r0, r3
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bdb0      	pop	{r4, r5, r7, pc}

08011726 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8011726:	b580      	push	{r7, lr}
 8011728:	b084      	sub	sp, #16
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	1d1a      	adds	r2, r3, #4
 8011732:	f107 030c 	add.w	r3, r7, #12
 8011736:	4611      	mov	r1, r2
 8011738:	4618      	mov	r0, r3
 801173a:	f001 f83d 	bl	80127b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	4618      	mov	r0, r3
 8011742:	3710      	adds	r7, #16
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8011748:	b480      	push	{r7}
 801174a:	b083      	sub	sp, #12
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	429a      	cmp	r2, r3
 801175c:	bf0c      	ite	eq
 801175e:	2301      	moveq	r3, #1
 8011760:	2300      	movne	r3, #0
 8011762:	b2db      	uxtb	r3, r3
 8011764:	4618      	mov	r0, r3
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011778:	2301      	movs	r3, #1
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011786:	b480      	push	{r7}
 8011788:	b083      	sub	sp, #12
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4618      	mov	r0, r3
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801179c:	b590      	push	{r4, r7, lr}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80117a6:	6838      	ldr	r0, [r7, #0]
 80117a8:	f7ff ffed 	bl	8011786 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 80117ac:	4603      	mov	r3, r0
 80117ae:	4622      	mov	r2, r4
 80117b0:	4619      	mov	r1, r3
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f001 f80f 	bl	80127d6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80117b8:	bf00      	nop
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd90      	pop	{r4, r7, pc}

080117c0 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 f819 	bl	8012800 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80117ce:	4603      	mov	r3, r0
 80117d0:	4618      	mov	r0, r3
 80117d2:	f001 f825 	bl	8012820 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80117d6:	bf00      	nop
      }
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80117de:	b590      	push	{r4, r7, lr}
 80117e0:	b085      	sub	sp, #20
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	60f8      	str	r0, [r7, #12]
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	4613      	mov	r3, r2
 80117ea:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80117ec:	79fb      	ldrb	r3, [r7, #7]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d109      	bne.n	8011806 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80117f2:	68b8      	ldr	r0, [r7, #8]
 80117f4:	f001 f804 	bl	8012800 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80117f8:	4604      	mov	r4, r0
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f001 f820 	bl	8012840 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8011800:	4603      	mov	r3, r0
 8011802:	601c      	str	r4, [r3, #0]
	    break;
 8011804:	e005      	b.n	8011812 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	461a      	mov	r2, r3
 801180a:	68b9      	ldr	r1, [r7, #8]
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f001 f823 	bl	8012858 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8011812:	2300      	movs	r3, #0
      }
 8011814:	4618      	mov	r0, r3
 8011816:	3714      	adds	r7, #20
 8011818:	46bd      	mov	sp, r7
 801181a:	bd90      	pop	{r4, r7, pc}

0801181c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011824:	2301      	movs	r3, #1
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4618      	mov	r0, r3
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011852:	6838      	ldr	r0, [r7, #0]
 8011854:	f7ff ffed 	bl	8011832 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8011858:	4603      	mov	r3, r0
 801185a:	4622      	mov	r2, r4
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f001 f825 	bl	80128ae <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011864:	bf00      	nop
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	bd90      	pop	{r4, r7, pc}

0801186c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f001 f82f 	bl	80128d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801187a:	4603      	mov	r3, r0
 801187c:	4618      	mov	r0, r3
 801187e:	f001 f83b 	bl	80128f8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011882:	bf00      	nop
      }
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801188a:	b590      	push	{r4, r7, lr}
 801188c:	b085      	sub	sp, #20
 801188e:	af00      	add	r7, sp, #0
 8011890:	60f8      	str	r0, [r7, #12]
 8011892:	60b9      	str	r1, [r7, #8]
 8011894:	4613      	mov	r3, r2
 8011896:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011898:	79fb      	ldrb	r3, [r7, #7]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d109      	bne.n	80118b2 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 801189e:	68b8      	ldr	r0, [r7, #8]
 80118a0:	f001 f81a 	bl	80128d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80118a4:	4604      	mov	r4, r0
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f001 f836 	bl	8012918 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 80118ac:	4603      	mov	r3, r0
 80118ae:	601c      	str	r4, [r3, #0]
	    break;
 80118b0:	e005      	b.n	80118be <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80118b2:	79fb      	ldrb	r3, [r7, #7]
 80118b4:	461a      	mov	r2, r3
 80118b6:	68b9      	ldr	r1, [r7, #8]
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f001 f839 	bl	8012930 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80118be:	2300      	movs	r3, #0
      }
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd90      	pop	{r4, r7, pc}

080118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4618      	mov	r0, r3
 80118d4:	370c      	adds	r7, #12
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80118de:	b590      	push	{r4, r7, lr}
 80118e0:	b083      	sub	sp, #12
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
 80118e6:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80118e8:	6838      	ldr	r0, [r7, #0]
 80118ea:	f7ff ffed 	bl	80118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80118ee:	4603      	mov	r3, r0
 80118f0:	681c      	ldr	r4, [r3, #0]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4619      	mov	r1, r3
 80118f6:	2004      	movs	r0, #4
 80118f8:	f7ee fd1a 	bl	8000330 <_ZnwjPv>
 80118fc:	4603      	mov	r3, r0
 80118fe:	601c      	str	r4, [r3, #0]
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	bd90      	pop	{r4, r7, pc}

08011908 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7ff ffd7 	bl	80118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801191a:	4603      	mov	r3, r0
 801191c:	4619      	mov	r1, r3
 801191e:	68b8      	ldr	r0, [r7, #8]
 8011920:	f7ff ffdd 	bl	80118de <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801192c:	b5b0      	push	{r4, r5, r7, lr}
 801192e:	b08c      	sub	sp, #48	; 0x30
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011938:	4a39      	ldr	r2, [pc, #228]	; (8011a20 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801193a:	2101      	movs	r1, #1
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f001 f822 	bl	8012986 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 8011942:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7fe fc51 	bl	80101f8 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 8011956:	4603      	mov	r3, r0
 8011958:	617b      	str	r3, [r7, #20]
 801195a:	f107 0214 	add.w	r2, r7, #20
 801195e:	f107 0308 	add.w	r3, r7, #8
 8011962:	4611      	mov	r1, r2
 8011964:	4618      	mov	r0, r3
 8011966:	f001 f855 	bl	8012a14 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801196a:	4603      	mov	r3, r0
 801196c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011972:	4618      	mov	r0, r3
 8011974:	f001 f863 	bl	8012a3e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 8011978:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801197e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011980:	6a3b      	ldr	r3, [r7, #32]
 8011982:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011984:	69fa      	ldr	r2, [r7, #28]
 8011986:	18d5      	adds	r5, r2, r3
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7ff ff9d 	bl	80118c8 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801198e:	4603      	mov	r3, r0
 8011990:	461a      	mov	r2, r3
 8011992:	4629      	mov	r1, r5
 8011994:	4620      	mov	r0, r4
 8011996:	f7ff ffb7 	bl	8011908 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801199a:	2300      	movs	r3, #0
 801199c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801199e:	f107 0308 	add.w	r3, r7, #8
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fc f954 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 80119a8:	4603      	mov	r3, r0
 80119aa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fa fcd4 	bl	800c35c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 80119b4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80119b6:	69fa      	ldr	r2, [r7, #28]
 80119b8:	4621      	mov	r1, r4
 80119ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119bc:	f001 f853 	bl	8012a66 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80119c0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	3304      	adds	r3, #4
 80119c6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80119c8:	f107 0308 	add.w	r3, r7, #8
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fc f93f 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 80119d2:	4603      	mov	r3, r0
 80119d4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fa fcbf 	bl	800c35c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 80119de:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80119e0:	69ba      	ldr	r2, [r7, #24]
 80119e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119e4:	4620      	mov	r0, r4
 80119e6:	f001 f83e 	bl	8012a66 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80119ea:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80119ec:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	689a      	ldr	r2, [r3, #8]
 80119f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80119f8:	461a      	mov	r2, r3
 80119fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119fc:	f7fa fc71 	bl	800c2e2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	69fa      	ldr	r2, [r7, #28]
 8011a04:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	69ba      	ldr	r2, [r7, #24]
 8011a0a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	69fa      	ldr	r2, [r7, #28]
 8011a12:	441a      	add	r2, r3
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	609a      	str	r2, [r3, #8]
    }
 8011a18:	bf00      	nop
 8011a1a:	3730      	adds	r7, #48	; 0x30
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011a20:	08021808 	.word	0x08021808

08011a24 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7fe fbf3 	bl	8010218 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 8011a32:	4603      	mov	r3, r0
 8011a34:	60fb      	str	r3, [r7, #12]
 8011a36:	f107 030c 	add.w	r3, r7, #12
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f001 f826 	bl	8012a8e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 8011a42:	4603      	mov	r3, r0
 8011a44:	60bb      	str	r3, [r7, #8]
 8011a46:	f107 0308 	add.w	r3, r7, #8
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fc f933 	bl	800dcb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 8011a50:	4603      	mov	r3, r0
      }
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7fb ff23 	bl	800d8b0 <_ZNKSt14_Function_base8_M_emptyEv>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	f083 0301 	eor.w	r3, r3, #1
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b084      	sub	sp, #16
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f001 f81b 	bl	8012ac0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	f107 0308 	add.w	r3, r7, #8
 8011a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a94:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8011a98:	6838      	ldr	r0, [r7, #0]
 8011a9a:	f001 f811 	bl	8012ac0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011aa6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8011aaa:	f107 0308 	add.w	r3, r7, #8
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f001 f806 	bl	8012ac0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011abc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011ac0:	bf00      	nop
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 ffff 	bl	8012ad6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011ade:	6838      	ldr	r0, [r7, #0]
 8011ae0:	f000 fff9 	bl	8012ad6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011aec:	f107 030c 	add.w	r3, r7, #12
 8011af0:	4618      	mov	r0, r3
 8011af2:	f000 fff0 	bl	8012ad6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011af6:	4603      	mov	r3, r0
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	601a      	str	r2, [r3, #0]
    }
 8011afe:	bf00      	nop
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 ffeb 	bl	8012aec <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8011b16:	4603      	mov	r3, r0
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011b1c:	6838      	ldr	r0, [r7, #0]
 8011b1e:	f000 ffe5 	bl	8012aec <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8011b22:	4603      	mov	r3, r0
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011b2a:	f107 030c 	add.w	r3, r7, #12
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f000 ffdc 	bl	8012aec <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8011b34:	4603      	mov	r3, r0
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	601a      	str	r2, [r3, #0]
    }
 8011b3c:	bf00      	nop
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7f9 fca7 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 8011b54:	4604      	mov	r4, r0
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7f9 feea 	bl	800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	4621      	mov	r1, r4
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 ffcd 	bl	8012b02 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	370c      	adds	r7, #12
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd90      	pop	{r4, r7, pc}

08011b72 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 8011b72:	b480      	push	{r7}
 8011b74:	b083      	sub	sp, #12
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8011b7a:	bf00      	nop
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8011b9e:	b590      	push	{r4, r7, lr}
 8011ba0:	b083      	sub	sp, #12
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8011ba8:	687c      	ldr	r4, [r7, #4]
 8011baa:	6838      	ldr	r0, [r7, #0]
 8011bac:	f7ff ffec 	bl	8011b88 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f000 ffd5 	bl	8012b64 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd90      	pop	{r4, r7, pc}

08011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	370c      	adds	r7, #12
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011bda:	b5b0      	push	{r4, r5, r7, lr}
 8011bdc:	b088      	sub	sp, #32
 8011bde:	af02      	add	r7, sp, #8
 8011be0:	60f8      	str	r0, [r7, #12]
 8011be2:	60b9      	str	r1, [r7, #8]
 8011be4:	607a      	str	r2, [r7, #4]
 8011be6:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f7f9 feb9 	bl	800b960 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 8011bee:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8011bf0:	68b8      	ldr	r0, [r7, #8]
 8011bf2:	f7ef fb38 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7ff ffe3 	bl	8011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011bfe:	4605      	mov	r5, r0
 8011c00:	6838      	ldr	r0, [r7, #0]
 8011c02:	f7ef fb46 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c06:	4603      	mov	r3, r0
 8011c08:	9300      	str	r3, [sp, #0]
 8011c0a:	462b      	mov	r3, r5
 8011c0c:	4622      	mov	r2, r4
 8011c0e:	6979      	ldr	r1, [r7, #20]
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f000 ffba 	bl	8012b8a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8011c16:	697b      	ldr	r3, [r7, #20]
	}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3718      	adds	r7, #24
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bdb0      	pop	{r4, r5, r7, pc}

08011c20 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011c20:	b5b0      	push	{r4, r5, r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
 8011c2c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d117      	bne.n	8011c64 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011c34:	68f8      	ldr	r0, [r7, #12]
 8011c36:	f7f9 fe7b 	bl	800b930 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d010      	beq.n	8011c64 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8011c42:	68fc      	ldr	r4, [r7, #12]
 8011c44:	6838      	ldr	r0, [r7, #0]
 8011c46:	f7f9 fd7a 	bl	800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7f9 fec1 	bl	800b9d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
 8011c56:	4629      	mov	r1, r5
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7f9 fb1f 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d001      	beq.n	8011c68 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e000      	b.n	8011c6a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8011c68:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011c6a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011c70:	7df8      	ldrb	r0, [r7, #23]
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	6839      	ldr	r1, [r7, #0]
 8011c76:	f00f fa91 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011c84:	f107 0310 	add.w	r3, r7, #16
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7f9 fd7b 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8011c90:	693b      	ldr	r3, [r7, #16]
    }
 8011c92:	4618      	mov	r0, r3
 8011c94:	3718      	adds	r7, #24
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bdb0      	pop	{r4, r5, r7, pc}

08011c9a <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b084      	sub	sp, #16
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	7239      	strb	r1, [r7, #8]
 8011ca4:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7fe ffc3 	bl	8010c32 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011cac:	4603      	mov	r3, r0
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	601a      	str	r2, [r3, #0]
	    { }
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8011cbe:	b5b0      	push	{r4, r5, r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	7239      	strb	r1, [r7, #8]
 8011cc8:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8011cca:	68fc      	ldr	r4, [r7, #12]
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7fe ffb0 	bl	8010c32 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f7ff ffde 	bl	8011c9a <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	711a      	strb	r2, [r3, #4]
	{ }
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bdb0      	pop	{r4, r5, r7, pc}

08011cee <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011cee:	b480      	push	{r7}
 8011cf0:	b083      	sub	sp, #12
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	601a      	str	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4618      	mov	r0, r3
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011d0e:	b480      	push	{r7}
 8011d10:	b083      	sub	sp, #12
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	370c      	adds	r7, #12
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011d3a:	b5b0      	push	{r4, r5, r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	60b9      	str	r1, [r7, #8]
 8011d44:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f000 ff4c 	bl	8012be4 <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	68b8      	ldr	r0, [r7, #8]
 8011d50:	f000 ff48 	bl	8012be4 <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011d54:	4605      	mov	r5, r0
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 ff44 	bl	8012be4 <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	461a      	mov	r2, r3
 8011d60:	4629      	mov	r1, r5
 8011d62:	4620      	mov	r0, r4
 8011d64:	f000 ff4c 	bl	8012c00 <_ZSt14__copy_move_a1ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 ff57 	bl	8012c20 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8011d72:	4603      	mov	r3, r0
    }
 8011d74:	4618      	mov	r0, r3
 8011d76:	3710      	adds	r7, #16
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bdb0      	pop	{r4, r5, r7, pc}

08011d7c <_ZNSt16allocator_traitsISaIP13StreamMessageEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8011d86:	6838      	ldr	r0, [r7, #0]
 8011d88:	f000 ff61 	bl	8012c4e <_ZSt10destroy_atIP13StreamMessageEvPT_>
	}
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	370c      	adds	r7, #12
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr

08011daa <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b088      	sub	sp, #32
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	60f8      	str	r0, [r7, #12]
 8011db2:	60b9      	str	r1, [r7, #8]
 8011db4:	607a      	str	r2, [r7, #4]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	61fb      	str	r3, [r7, #28]
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	61bb      	str	r3, [r7, #24]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011dc2:	f7ee faad 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d003      	beq.n	8011dd4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8011dcc:	69b8      	ldr	r0, [r7, #24]
 8011dce:	f00f f975 	bl	80210bc <_ZdlPv>
	    return;
 8011dd2:	e005      	b.n	8011de0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	69b9      	ldr	r1, [r7, #24]
 8011dd8:	69f8      	ldr	r0, [r7, #28]
 8011dda:	f001 fd0b 	bl	80137f4 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8011dde:	bf00      	nop
 8011de0:	bf00      	nop
 8011de2:	3720      	adds	r7, #32
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8011df2:	f7ee fa95 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d004      	beq.n	8011e06 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 ff2f 	bl	8012c62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 8011e04:	e003      	b.n	8011e0e <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 ff42 	bl	8012c92 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011e2a:	b590      	push	{r4, r7, lr}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
 8011e32:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011e34:	6838      	ldr	r0, [r7, #0]
 8011e36:	f7ff ffed 	bl	8011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	681c      	ldr	r4, [r3, #0]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4619      	mov	r1, r3
 8011e42:	2004      	movs	r0, #4
 8011e44:	f7ee fa74 	bl	8000330 <_ZnwjPv>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	601c      	str	r4, [r3, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd90      	pop	{r4, r7, pc}

08011e54 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff ffd7 	bl	8011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e66:	4603      	mov	r3, r0
 8011e68:	4619      	mov	r1, r3
 8011e6a:	68b8      	ldr	r0, [r7, #8]
 8011e6c:	f7ff ffdd 	bl	8011e2a <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011e70:	bf00      	nop
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011e78:	b5b0      	push	{r4, r5, r7, lr}
 8011e7a:	b08c      	sub	sp, #48	; 0x30
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011e84:	4a39      	ldr	r2, [pc, #228]	; (8011f6c <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011e86:	2101      	movs	r1, #1
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 ff0d 	bl	8012ca8 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 8011e8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7fe fb9a 	bl	80105d6 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	617b      	str	r3, [r7, #20]
 8011ea6:	f107 0214 	add.w	r2, r7, #20
 8011eaa:	f107 0308 	add.w	r3, r7, #8
 8011eae:	4611      	mov	r1, r2
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f000 ff40 	bl	8012d36 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f000 ff4e 	bl	8012d60 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 8011ec4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011eca:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011ecc:	6a3b      	ldr	r3, [r7, #32]
 8011ece:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011ed0:	69fa      	ldr	r2, [r7, #28]
 8011ed2:	18d5      	adds	r5, r2, r3
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff ff9d 	bl	8011e14 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011eda:	4603      	mov	r3, r0
 8011edc:	461a      	mov	r2, r3
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f7ff ffb7 	bl	8011e54 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011eea:	f107 0308 	add.w	r3, r7, #8
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fc faa4 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7f9 fe6a 	bl	800bbd4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011f00:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	4621      	mov	r1, r4
 8011f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f08:	f000 ff3e 	bl	8012d88 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011f0c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	3304      	adds	r3, #4
 8011f12:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011f14:	f107 0308 	add.w	r3, r7, #8
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7fc fa8f 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7f9 fe55 	bl	800bbd4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011f2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011f2c:	69ba      	ldr	r2, [r7, #24]
 8011f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f30:	4620      	mov	r0, r4
 8011f32:	f000 ff29 	bl	8012d88 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011f36:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011f38:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	689a      	ldr	r2, [r3, #8]
 8011f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f40:	1ad3      	subs	r3, r2, r3
 8011f42:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011f44:	461a      	mov	r2, r3
 8011f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f48:	f7f9 f9ed 	bl	800b326 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	69fa      	ldr	r2, [r7, #28]
 8011f50:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	69ba      	ldr	r2, [r7, #24]
 8011f56:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	69fa      	ldr	r2, [r7, #28]
 8011f5e:	441a      	add	r2, r3
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	609a      	str	r2, [r3, #8]
    }
 8011f64:	bf00      	nop
 8011f66:	3730      	adds	r7, #48	; 0x30
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8011f6c:	08021808 	.word	0x08021808

08011f70 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7fe fb3c 	bl	80105f6 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	60fb      	str	r3, [r7, #12]
 8011f82:	f107 030c 	add.w	r3, r7, #12
 8011f86:	2101      	movs	r1, #1
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f000 ff11 	bl	8012db0 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	60bb      	str	r3, [r7, #8]
 8011f92:	f107 0308 	add.w	r3, r7, #8
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fc fa83 	bl	800e4a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8011f9c:	4603      	mov	r3, r0
      }
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}

08011fa6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011fa6:	b480      	push	{r7}
 8011fa8:	b083      	sub	sp, #12
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011fbc:	b590      	push	{r4, r7, lr}
 8011fbe:	b087      	sub	sp, #28
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f000 ff0a 	bl	8012de2 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011fce:	4604      	mov	r4, r0
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f7fe f9a7 	bl	8010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	1ae2      	subs	r2, r4, r3
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	bf34      	ite	cc
 8011fe0:	2301      	movcc	r3, #1
 8011fe2:	2300      	movcs	r3, #0
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d002      	beq.n	8011ff0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f00f f934 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f7fe f997 	bl	8010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f7fe f993 	bl	8010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011ffe:	4603      	mov	r3, r0
 8012000:	613b      	str	r3, [r7, #16]
 8012002:	f107 0208 	add.w	r2, r7, #8
 8012006:	f107 0310 	add.w	r3, r7, #16
 801200a:	4611      	mov	r1, r2
 801200c:	4618      	mov	r0, r3
 801200e:	f7f0 fc20 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012012:	4603      	mov	r3, r0
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4423      	add	r3, r4
 8012018:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f7fe f982 	bl	8010324 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8012020:	4602      	mov	r2, r0
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	4293      	cmp	r3, r2
 8012026:	d306      	bcc.n	8012036 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f000 feda 	bl	8012de2 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 801202e:	4602      	mov	r2, r0
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	4293      	cmp	r3, r2
 8012034:	d904      	bls.n	8012040 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 fed3 	bl	8012de2 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 801203c:	4603      	mov	r3, r0
 801203e:	e000      	b.n	8012042 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8012040:	697b      	ldr	r3, [r7, #20]
      }
 8012042:	4618      	mov	r0, r3
 8012044:	371c      	adds	r7, #28
 8012046:	46bd      	mov	sp, r7
 8012048:	bd90      	pop	{r4, r7, pc}

0801204a <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801204a:	b590      	push	{r4, r7, lr}
 801204c:	b083      	sub	sp, #12
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7fc f8f3 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801205a:	4603      	mov	r3, r0
 801205c:	681c      	ldr	r4, [r3, #0]
 801205e:	6838      	ldr	r0, [r7, #0]
 8012060:	f7fc f8ee 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8012064:	4603      	mov	r3, r0
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	1ae3      	subs	r3, r4, r3
 801206a:	109b      	asrs	r3, r3, #2
 801206c:	4618      	mov	r0, r3
 801206e:	370c      	adds	r7, #12
 8012070:	46bd      	mov	sp, r7
 8012072:	bd90      	pop	{r4, r7, pc}

08012074 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d006      	beq.n	8012092 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6839      	ldr	r1, [r7, #0]
 8012088:	4618      	mov	r0, r3
 801208a:	f000 febb 	bl	8012e04 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 801208e:	4603      	mov	r3, r0
 8012090:	e000      	b.n	8012094 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 8012092:	2300      	movs	r3, #0
      }
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801209c:	b590      	push	{r4, r7, lr}
 801209e:	b087      	sub	sp, #28
 80120a0:	af02      	add	r7, sp, #8
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80120aa:	f88d 4000 	strb.w	r4, [sp]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	68b9      	ldr	r1, [r7, #8]
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f000 fec5 	bl	8012e44 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80120ba:	4603      	mov	r3, r0
      }
 80120bc:	4618      	mov	r0, r3
 80120be:	3714      	adds	r7, #20
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd90      	pop	{r4, r7, pc}

080120c4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80120d0:	68b8      	ldr	r0, [r7, #8]
 80120d2:	f7fe ffa2 	bl	801101a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 80120d6:	4604      	mov	r4, r0
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f7fb fbb2 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 80120de:	4603      	mov	r3, r0
 80120e0:	4619      	mov	r1, r3
 80120e2:	2004      	movs	r0, #4
 80120e4:	f7ee f924 	bl	8000330 <_ZnwjPv>
 80120e8:	4602      	mov	r2, r0
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	6013      	str	r3, [r2, #0]
 80120ee:	bf00      	nop
 80120f0:	3714      	adds	r7, #20
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd90      	pop	{r4, r7, pc}

080120f6 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b084      	sub	sp, #16
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 feb2 	bl	8012e68 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>
 8012104:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f000 feba 	bl	8012e80 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessageEUlvE_EPT_RS5_>
 801210c:	4603      	mov	r3, r0
	}
 801210e:	4618      	mov	r0, r3
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8012116:	b590      	push	{r4, r7, lr}
 8012118:	b083      	sub	sp, #12
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 feb9 	bl	8012e96 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8012124:	4603      	mov	r3, r0
 8012126:	4619      	mov	r1, r3
 8012128:	4620      	mov	r0, r4
 801212a:	f000 febf 	bl	8012eac <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 801212e:	bf00      	nop
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	bd90      	pop	{r4, r7, pc}

08012136 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>:
      _M_access()
 8012136:	b580      	push	{r7, lr}
 8012138:	b082      	sub	sp, #8
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7fb fb7f 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8012144:	4603      	mov	r3, r0
 8012146:	4618      	mov	r0, r3
 8012148:	3708      	adds	r7, #8
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}

0801214e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801214e:	b5b0      	push	{r4, r5, r7, lr}
 8012150:	b084      	sub	sp, #16
 8012152:	af00      	add	r7, sp, #0
 8012154:	60f8      	str	r0, [r7, #12]
 8012156:	60b9      	str	r1, [r7, #8]
 8012158:	4613      	mov	r3, r2
 801215a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801215c:	79fb      	ldrb	r3, [r7, #7]
 801215e:	2b03      	cmp	r3, #3
 8012160:	d016      	beq.n	8012190 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8012162:	2b03      	cmp	r3, #3
 8012164:	dc19      	bgt.n	801219a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8012166:	2b01      	cmp	r3, #1
 8012168:	d002      	beq.n	8012170 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 801216a:	2b02      	cmp	r3, #2
 801216c:	d00a      	beq.n	8012184 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 801216e:	e014      	b.n	801219a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8012170:	68b8      	ldr	r0, [r7, #8]
 8012172:	f7ff ffc0 	bl	80120f6 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8012176:	4604      	mov	r4, r0
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f7ff ffdc 	bl	8012136 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
 801217e:	4603      	mov	r3, r0
 8012180:	601c      	str	r4, [r3, #0]
	      break;
 8012182:	e00a      	b.n	801219a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8012184:	462a      	mov	r2, r5
 8012186:	68b9      	ldr	r1, [r7, #8]
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f000 fe9f 	bl	8012ecc <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 801218e:	e004      	b.n	801219a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8012190:	4621      	mov	r1, r4
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f000 feb3 	bl	8012efe <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8012198:	bf00      	nop
	  return false;
 801219a:	2300      	movs	r3, #0
	}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bdb0      	pop	{r4, r5, r7, pc}

080121a4 <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 feb2 	bl	8012f16 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4618      	mov	r0, r3
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	601a      	str	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	605a      	str	r2, [r3, #4]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	609a      	str	r2, [r3, #8]
	{ }
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
	if (__p)
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d005      	beq.n	8012202 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	68b9      	ldr	r1, [r7, #8]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 fe95 	bl	8012f2c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 8012202:	bf00      	nop
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801220a:	b480      	push	{r7}
 801220c:	b083      	sub	sp, #12
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801222c:	68b9      	ldr	r1, [r7, #8]
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f000 fe9b 	bl	8012f6a <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8012234:	bf00      	nop
 8012236:	3710      	adds	r7, #16
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <_ZN5FieldIJEEC1Ev>:
class Field<> {
 801223c:	b480      	push	{r7}
 801223e:	b083      	sub	sp, #12
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	4a04      	ldr	r2, [pc, #16]	; (8012258 <_ZN5FieldIJEEC1Ev+0x1c>)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	601a      	str	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4618      	mov	r0, r3
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr
 8012258:	080218b8 	.word	0x080218b8

0801225c <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	6039      	str	r1, [r7, #0]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	f7ff ffe7 	bl	801223c <_ZN5FieldIJEEC1Ev>
 801226e:	4a05      	ldr	r2, [pc, #20]	; (8012284 <_ZN5FieldIJhEEC1EPh+0x28>)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	601a      	str	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	683a      	ldr	r2, [r7, #0]
 8012278:	605a      	str	r2, [r3, #4]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4618      	mov	r0, r3
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	080218a4 	.word	0x080218a4

08012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8012292:	6838      	ldr	r0, [r7, #0]
 8012294:	f000 fe7f 	bl	8012f96 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8012298:	4603      	mov	r3, r0
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 fe85 	bl	8012fac <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 80122a2:	bf00      	nop
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 80122aa:	b590      	push	{r4, r7, lr}
 80122ac:	b085      	sub	sp, #20
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	1c9a      	adds	r2, r3, #2
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 80122be:	2008      	movs	r0, #8
 80122c0:	f00e ff00 	bl	80210c4 <_Znwj>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461c      	mov	r4, r3
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	4620      	mov	r0, r4
 80122cc:	f000 fea0 	bl	8013010 <_ZN5FieldIJtEEC1EPt>
 80122d0:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f103 0208 	add.w	r2, r3, #8
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	60bb      	str	r3, [r7, #8]
 80122dc:	f107 0308 	add.w	r3, r7, #8
 80122e0:	4619      	mov	r1, r3
 80122e2:	4610      	mov	r0, r2
 80122e4:	f7ff ffd0 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 80122e8:	bf00      	nop
    }
 80122ea:	3714      	adds	r7, #20
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd90      	pop	{r4, r7, pc}

080122f0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	4618      	mov	r0, r3
 8012300:	f000 fe9c 	bl	801303c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 8012304:	4603      	mov	r3, r0
 8012306:	4618      	mov	r0, r3
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 801230e:	b590      	push	{r4, r7, lr}
 8012310:	b083      	sub	sp, #12
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	4618      	mov	r0, r3
 801231a:	f000 fea6 	bl	801306a <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 801231e:	bf00      	nop
 8012320:	4620      	mov	r0, r4
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	bd90      	pop	{r4, r7, pc}

08012328 <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	881a      	ldrh	r2, [r3, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	881b      	ldrh	r3, [r3, #0]
 801233c:	429a      	cmp	r2, r3
 801233e:	bf34      	ite	cc
 8012340:	2301      	movcc	r3, #1
 8012342:	2300      	movcs	r3, #0
 8012344:	b2db      	uxtb	r3, r3
 8012346:	4618      	mov	r0, r3
 8012348:	3714      	adds	r7, #20
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr

08012352 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8012352:	b580      	push	{r7, lr}
 8012354:	b082      	sub	sp, #8
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	4618      	mov	r0, r3
 8012362:	f000 fe8d 	bl	8013080 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4618      	mov	r0, r3
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	681a      	ldr	r2, [r3, #0]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012390:	b5b0      	push	{r4, r5, r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7ee ff61 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80123a4:	4604      	mov	r4, r0
 80123a6:	6838      	ldr	r0, [r7, #0]
 80123a8:	f000 fe79 	bl	801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80123ac:	4605      	mov	r5, r0
 80123ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b0:	f7ee ff6f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80123b4:	4603      	mov	r3, r0
 80123b6:	462a      	mov	r2, r5
 80123b8:	4621      	mov	r1, r4
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	f000 fe7a 	bl	80130b4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80123c0:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80123c2:	69f8      	ldr	r0, [r7, #28]
 80123c4:	f000 ffbc 	bl	8013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80123c8:	4603      	mov	r3, r0
 80123ca:	f107 0010 	add.w	r0, r7, #16
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	68f9      	ldr	r1, [r7, #12]
 80123d2:	f000 fe92 	bl	80130fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d007      	beq.n	80123ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80123dc:	6939      	ldr	r1, [r7, #16]
 80123de:	697a      	ldr	r2, [r7, #20]
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f000 ffbf 	bl	8013366 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80123e8:	4603      	mov	r3, r0
 80123ea:	e00b      	b.n	8012404 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 80123ec:	69f9      	ldr	r1, [r7, #28]
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f7fa f943 	bl	800c67a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 80123f4:	693a      	ldr	r2, [r7, #16]
 80123f6:	f107 0318 	add.w	r3, r7, #24
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f3 f9f2 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012402:	69bb      	ldr	r3, [r7, #24]
      }
 8012404:	4618      	mov	r0, r3
 8012406:	3720      	adds	r7, #32
 8012408:	46bd      	mov	sp, r7
 801240a:	bdb0      	pop	{r4, r5, r7, pc}

0801240c <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b085      	sub	sp, #20
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	1d1a      	adds	r2, r3, #4
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8012420:	2008      	movs	r0, #8
 8012422:	f00e fe4f 	bl	80210c4 <_Znwj>
 8012426:	4603      	mov	r3, r0
 8012428:	461c      	mov	r4, r3
 801242a:	6839      	ldr	r1, [r7, #0]
 801242c:	4620      	mov	r0, r4
 801242e:	f000 ffd7 	bl	80133e0 <_ZN5FieldIJmEEC1EPm>
 8012432:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f103 0208 	add.w	r2, r3, #8
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	60bb      	str	r3, [r7, #8]
 801243e:	f107 0308 	add.w	r3, r7, #8
 8012442:	4619      	mov	r1, r3
 8012444:	4610      	mov	r0, r2
 8012446:	f7ff ff1f 	bl	8012288 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 801244a:	bf00      	nop
    }
 801244c:	3714      	adds	r7, #20
 801244e:	46bd      	mov	sp, r7
 8012450:	bd90      	pop	{r4, r7, pc}

08012452 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8012452:	b480      	push	{r7}
 8012454:	b083      	sub	sp, #12
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	689b      	ldr	r3, [r3, #8]
      }
 801245e:	4618      	mov	r0, r3
 8012460:	370c      	adds	r7, #12
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801246a:	b480      	push	{r7}
 801246c:	b083      	sub	sp, #12
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	3304      	adds	r3, #4
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012482:	b590      	push	{r4, r7, lr}
 8012484:	b087      	sub	sp, #28
 8012486:	af00      	add	r7, sp, #0
 8012488:	60f8      	str	r0, [r7, #12]
 801248a:	60b9      	str	r1, [r7, #8]
 801248c:	607a      	str	r2, [r7, #4]
 801248e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d01d      	beq.n	80124d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012496:	68fc      	ldr	r4, [r7, #12]
 8012498:	68b8      	ldr	r0, [r7, #8]
 801249a:	f7ef fb2f 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801249e:	4603      	mov	r3, r0
 80124a0:	6819      	ldr	r1, [r3, #0]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	461a      	mov	r2, r3
 80124a8:	4620      	mov	r0, r4
 80124aa:	f7ee fd16 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80124ae:	4603      	mov	r3, r0
 80124b0:	f083 0301 	eor.w	r3, r3, #1
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d006      	beq.n	80124c8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	607b      	str	r3, [r7, #4]
 80124be:	68b8      	ldr	r0, [r7, #8]
 80124c0:	f000 ffa4 	bl	801340c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80124c4:	60b8      	str	r0, [r7, #8]
 80124c6:	e7e3      	b.n	8012490 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80124c8:	68b8      	ldr	r0, [r7, #8]
 80124ca:	f000 ffab 	bl	8013424 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80124ce:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80124d0:	e7de      	b.n	8012490 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80124d2:	f107 0314 	add.w	r3, r7, #20
 80124d6:	6879      	ldr	r1, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 f805 	bl	80124e8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>
 80124de:	697b      	ldr	r3, [r7, #20]
    }
 80124e0:	4618      	mov	r0, r3
 80124e2:	371c      	adds	r7, #28
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd90      	pop	{r4, r7, pc}

080124e8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	683a      	ldr	r2, [r7, #0]
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	4618      	mov	r0, r3
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	689b      	ldr	r3, [r3, #8]
      }
 8012512:	4618      	mov	r0, r3
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801251e:	b480      	push	{r7}
 8012520:	b083      	sub	sp, #12
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	3304      	adds	r3, #4
 801252a:	4618      	mov	r0, r3
 801252c:	370c      	adds	r7, #12
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012536:	b590      	push	{r4, r7, lr}
 8012538:	b087      	sub	sp, #28
 801253a:	af00      	add	r7, sp, #0
 801253c:	60f8      	str	r0, [r7, #12]
 801253e:	60b9      	str	r1, [r7, #8]
 8012540:	607a      	str	r2, [r7, #4]
 8012542:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d01d      	beq.n	8012586 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801254a:	68fc      	ldr	r4, [r7, #12]
 801254c:	68b8      	ldr	r0, [r7, #8]
 801254e:	f7f4 fd4f 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8012552:	4603      	mov	r3, r0
 8012554:	6819      	ldr	r1, [r3, #0]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	461a      	mov	r2, r3
 801255c:	4620      	mov	r0, r4
 801255e:	f7ee fcbc 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8012562:	4603      	mov	r3, r0
 8012564:	f083 0301 	eor.w	r3, r3, #1
 8012568:	b2db      	uxtb	r3, r3
 801256a:	2b00      	cmp	r3, #0
 801256c:	d006      	beq.n	801257c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	607b      	str	r3, [r7, #4]
 8012572:	68b8      	ldr	r0, [r7, #8]
 8012574:	f000 ff62 	bl	801343c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8012578:	60b8      	str	r0, [r7, #8]
 801257a:	e7e3      	b.n	8012544 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 801257c:	68b8      	ldr	r0, [r7, #8]
 801257e:	f000 ff69 	bl	8013454 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8012582:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012584:	e7de      	b.n	8012544 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8012586:	f107 0314 	add.w	r3, r7, #20
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	f000 f805 	bl	801259c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>
 8012592:	697b      	ldr	r3, [r7, #20]
    }
 8012594:	4618      	mov	r0, r3
 8012596:	371c      	adds	r7, #28
 8012598:	46bd      	mov	sp, r7
 801259a:	bd90      	pop	{r4, r7, pc}

0801259c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	683a      	ldr	r2, [r7, #0]
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4618      	mov	r0, r3
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr

080125ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80125ba:	b480      	push	{r7}
 80125bc:	b083      	sub	sp, #12
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	689b      	ldr	r3, [r3, #8]
      }
 80125c6:	4618      	mov	r0, r3
 80125c8:	370c      	adds	r7, #12
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr

080125d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80125d2:	b480      	push	{r7}
 80125d4:	b083      	sub	sp, #12
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3304      	adds	r3, #4
 80125de:	4618      	mov	r0, r3
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr

080125ea <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80125ea:	b590      	push	{r4, r7, lr}
 80125ec:	b087      	sub	sp, #28
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	60f8      	str	r0, [r7, #12]
 80125f2:	60b9      	str	r1, [r7, #8]
 80125f4:	607a      	str	r2, [r7, #4]
 80125f6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d01d      	beq.n	801263a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80125fe:	68fc      	ldr	r4, [r7, #12]
 8012600:	68b8      	ldr	r0, [r7, #8]
 8012602:	f7f7 fefd 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8012606:	4603      	mov	r3, r0
 8012608:	6819      	ldr	r1, [r3, #0]
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	461a      	mov	r2, r3
 8012610:	4620      	mov	r0, r4
 8012612:	f7ee fc62 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8012616:	4603      	mov	r3, r0
 8012618:	f083 0301 	eor.w	r3, r3, #1
 801261c:	b2db      	uxtb	r3, r3
 801261e:	2b00      	cmp	r3, #0
 8012620:	d006      	beq.n	8012630 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	607b      	str	r3, [r7, #4]
 8012626:	68b8      	ldr	r0, [r7, #8]
 8012628:	f000 ff20 	bl	801346c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801262c:	60b8      	str	r0, [r7, #8]
 801262e:	e7e3      	b.n	80125f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8012630:	68b8      	ldr	r0, [r7, #8]
 8012632:	f000 ff27 	bl	8013484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8012636:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012638:	e7de      	b.n	80125f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 801263a:	f107 0314 	add.w	r3, r7, #20
 801263e:	6879      	ldr	r1, [r7, #4]
 8012640:	4618      	mov	r0, r3
 8012642:	f000 f805 	bl	8012650 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>
 8012646:	697b      	ldr	r3, [r7, #20]
    }
 8012648:	4618      	mov	r0, r3
 801264a:	371c      	adds	r7, #28
 801264c:	46bd      	mov	sp, r7
 801264e:	bd90      	pop	{r4, r7, pc}

08012650 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	683a      	ldr	r2, [r7, #0]
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4618      	mov	r0, r3
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	689b      	ldr	r3, [r3, #8]
      }
 801267a:	4618      	mov	r0, r3
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3304      	adds	r3, #4
 8012692:	4618      	mov	r0, r3
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr

0801269e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801269e:	b590      	push	{r4, r7, lr}
 80126a0:	b087      	sub	sp, #28
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	60f8      	str	r0, [r7, #12]
 80126a6:	60b9      	str	r1, [r7, #8]
 80126a8:	607a      	str	r2, [r7, #4]
 80126aa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d01d      	beq.n	80126ee <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80126b2:	68fc      	ldr	r4, [r7, #12]
 80126b4:	68b8      	ldr	r0, [r7, #8]
 80126b6:	f7f6 f861 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80126ba:	4603      	mov	r3, r0
 80126bc:	6819      	ldr	r1, [r3, #0]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	461a      	mov	r2, r3
 80126c4:	4620      	mov	r0, r4
 80126c6:	f7ee fc08 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80126ca:	4603      	mov	r3, r0
 80126cc:	f083 0301 	eor.w	r3, r3, #1
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d006      	beq.n	80126e4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	607b      	str	r3, [r7, #4]
 80126da:	68b8      	ldr	r0, [r7, #8]
 80126dc:	f000 fede 	bl	801349c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80126e0:	60b8      	str	r0, [r7, #8]
 80126e2:	e7e3      	b.n	80126ac <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80126e4:	68b8      	ldr	r0, [r7, #8]
 80126e6:	f000 fee5 	bl	80134b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80126ea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80126ec:	e7de      	b.n	80126ac <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80126ee:	f107 0314 	add.w	r3, r7, #20
 80126f2:	6879      	ldr	r1, [r7, #4]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f000 f805 	bl	8012704 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 80126fa:	697b      	ldr	r3, [r7, #20]
    }
 80126fc:	4618      	mov	r0, r3
 80126fe:	371c      	adds	r7, #28
 8012700:	46bd      	mov	sp, r7
 8012702:	bd90      	pop	{r4, r7, pc}

08012704 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	683a      	ldr	r2, [r7, #0]
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	4618      	mov	r0, r3
 8012718:	370c      	adds	r7, #12
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr

08012722 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8012722:	b480      	push	{r7}
 8012724:	b083      	sub	sp, #12
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	689b      	ldr	r3, [r3, #8]
      }
 801272e:	4618      	mov	r0, r3
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr

0801273a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801273a:	b480      	push	{r7}
 801273c:	b083      	sub	sp, #12
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3304      	adds	r3, #4
 8012746:	4618      	mov	r0, r3
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012752:	b590      	push	{r4, r7, lr}
 8012754:	b087      	sub	sp, #28
 8012756:	af00      	add	r7, sp, #0
 8012758:	60f8      	str	r0, [r7, #12]
 801275a:	60b9      	str	r1, [r7, #8]
 801275c:	607a      	str	r2, [r7, #4]
 801275e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d01d      	beq.n	80127a2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012766:	68fc      	ldr	r4, [r7, #12]
 8012768:	68b8      	ldr	r0, [r7, #8]
 801276a:	f7f1 fb3f 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801276e:	4603      	mov	r3, r0
 8012770:	6819      	ldr	r1, [r3, #0]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	461a      	mov	r2, r3
 8012778:	4620      	mov	r0, r4
 801277a:	f7ee fbae 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 801277e:	4603      	mov	r3, r0
 8012780:	f083 0301 	eor.w	r3, r3, #1
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d006      	beq.n	8012798 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	607b      	str	r3, [r7, #4]
 801278e:	68b8      	ldr	r0, [r7, #8]
 8012790:	f000 fe9c 	bl	80134cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8012794:	60b8      	str	r0, [r7, #8]
 8012796:	e7e3      	b.n	8012760 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8012798:	68b8      	ldr	r0, [r7, #8]
 801279a:	f000 fea3 	bl	80134e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801279e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80127a0:	e7de      	b.n	8012760 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80127a2:	f107 0314 	add.w	r3, r7, #20
 80127a6:	6879      	ldr	r1, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f000 f805 	bl	80127b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 80127ae:	697b      	ldr	r3, [r7, #20]
    }
 80127b0:	4618      	mov	r0, r3
 80127b2:	371c      	adds	r7, #28
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd90      	pop	{r4, r7, pc}

080127b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	683a      	ldr	r2, [r7, #0]
 80127c6:	601a      	str	r2, [r3, #0]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	370c      	adds	r7, #12
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr

080127d6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b084      	sub	sp, #16
 80127da:	af00      	add	r7, sp, #0
 80127dc:	60f8      	str	r0, [r7, #12]
 80127de:	60b9      	str	r1, [r7, #8]
 80127e0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80127e2:	68b8      	ldr	r0, [r7, #8]
 80127e4:	f7fe ffcf 	bl	8011786 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f7fb f82a 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 80127ee:	4603      	mov	r3, r0
 80127f0:	4619      	mov	r1, r3
 80127f2:	2001      	movs	r0, #1
 80127f4:	f7ed fd9c 	bl	8000330 <_ZnwjPv>
 80127f8:	bf00      	nop
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 fe77 	bl	80134fc <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 801280e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f000 fe7f 	bl	8013514 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 8012816:	4603      	mov	r3, r0
	}
 8012818:	4618      	mov	r0, r3
 801281a:	3710      	adds	r7, #16
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8012820:	b590      	push	{r4, r7, lr}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fe7e 	bl	801352a <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 801282e:	4603      	mov	r3, r0
 8012830:	4619      	mov	r1, r3
 8012832:	4620      	mov	r0, r4
 8012834:	f000 fe84 	bl	8013540 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8012838:	bf00      	nop
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	bd90      	pop	{r4, r7, pc}

08012840 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7fa fffa 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 801284e:	4603      	mov	r3, r0
 8012850:	4618      	mov	r0, r3
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8012858:	b5b0      	push	{r4, r5, r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	4613      	mov	r3, r2
 8012864:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8012866:	79fb      	ldrb	r3, [r7, #7]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d016      	beq.n	801289a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 801286c:	2b03      	cmp	r3, #3
 801286e:	dc19      	bgt.n	80128a4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8012870:	2b01      	cmp	r3, #1
 8012872:	d002      	beq.n	801287a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8012874:	2b02      	cmp	r3, #2
 8012876:	d00a      	beq.n	801288e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8012878:	e014      	b.n	80128a4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801287a:	68b8      	ldr	r0, [r7, #8]
 801287c:	f7ff ffc0 	bl	8012800 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8012880:	4604      	mov	r4, r0
 8012882:	68f8      	ldr	r0, [r7, #12]
 8012884:	f7ff ffdc 	bl	8012840 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8012888:	4603      	mov	r3, r0
 801288a:	601c      	str	r4, [r3, #0]
	      break;
 801288c:	e00a      	b.n	80128a4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 801288e:	462a      	mov	r2, r5
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f000 fe64 	bl	8013560 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8012898:	e004      	b.n	80128a4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 801289a:	4621      	mov	r1, r4
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f000 fe74 	bl	801358a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80128a2:	bf00      	nop
	  return false;
 80128a4:	2300      	movs	r3, #0
	}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bdb0      	pop	{r4, r5, r7, pc}

080128ae <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b084      	sub	sp, #16
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	60f8      	str	r0, [r7, #12]
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80128ba:	68b8      	ldr	r0, [r7, #8]
 80128bc:	f7fe ffb9 	bl	8011832 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f7fa ffbe 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 80128c6:	4603      	mov	r3, r0
 80128c8:	4619      	mov	r1, r3
 80128ca:	2001      	movs	r0, #1
 80128cc:	f7ed fd30 	bl	8000330 <_ZnwjPv>
 80128d0:	bf00      	nop
 80128d2:	3710      	adds	r7, #16
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 fe5e 	bl	80135a2 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 80128e6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f000 fe66 	bl	80135ba <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 80128ee:	4603      	mov	r3, r0
	}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80128f8:	b590      	push	{r4, r7, lr}
 80128fa:	b083      	sub	sp, #12
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 fe65 	bl	80135d0 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012906:	4603      	mov	r3, r0
 8012908:	4619      	mov	r1, r3
 801290a:	4620      	mov	r0, r4
 801290c:	f000 fe6b 	bl	80135e6 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	bd90      	pop	{r4, r7, pc}

08012918 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7fa ff8e 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8012926:	4603      	mov	r3, r0
 8012928:	4618      	mov	r0, r3
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}

08012930 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8012930:	b5b0      	push	{r4, r5, r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	4613      	mov	r3, r2
 801293c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801293e:	79fb      	ldrb	r3, [r7, #7]
 8012940:	2b03      	cmp	r3, #3
 8012942:	d016      	beq.n	8012972 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8012944:	2b03      	cmp	r3, #3
 8012946:	dc19      	bgt.n	801297c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8012948:	2b01      	cmp	r3, #1
 801294a:	d002      	beq.n	8012952 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 801294c:	2b02      	cmp	r3, #2
 801294e:	d00a      	beq.n	8012966 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8012950:	e014      	b.n	801297c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8012952:	68b8      	ldr	r0, [r7, #8]
 8012954:	f7ff ffc0 	bl	80128d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8012958:	4604      	mov	r4, r0
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff ffdc 	bl	8012918 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8012960:	4603      	mov	r3, r0
 8012962:	601c      	str	r4, [r3, #0]
	      break;
 8012964:	e00a      	b.n	801297c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8012966:	462a      	mov	r2, r5
 8012968:	68b9      	ldr	r1, [r7, #8]
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f000 fe4b 	bl	8013606 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8012970:	e004      	b.n	801297c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8012972:	4621      	mov	r1, r4
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f000 fe5b 	bl	8013630 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 801297a:	bf00      	nop
	  return false;
 801297c:	2300      	movs	r3, #0
	}
 801297e:	4618      	mov	r0, r3
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bdb0      	pop	{r4, r5, r7, pc}

08012986 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012986:	b590      	push	{r4, r7, lr}
 8012988:	b087      	sub	sp, #28
 801298a:	af00      	add	r7, sp, #0
 801298c:	60f8      	str	r0, [r7, #12]
 801298e:	60b9      	str	r1, [r7, #8]
 8012990:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f000 fe58 	bl	8013648 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8012998:	4604      	mov	r4, r0
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	f000 fe65 	bl	801366a <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80129a0:	4603      	mov	r3, r0
 80129a2:	1ae2      	subs	r2, r4, r3
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	bf34      	ite	cc
 80129aa:	2301      	movcc	r3, #1
 80129ac:	2300      	movcs	r3, #0
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d002      	beq.n	80129ba <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f00e fc4f 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f000 fe55 	bl	801366a <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80129c0:	4604      	mov	r4, r0
 80129c2:	68f8      	ldr	r0, [r7, #12]
 80129c4:	f000 fe51 	bl	801366a <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80129c8:	4603      	mov	r3, r0
 80129ca:	613b      	str	r3, [r7, #16]
 80129cc:	f107 0208 	add.w	r2, r7, #8
 80129d0:	f107 0310 	add.w	r3, r7, #16
 80129d4:	4611      	mov	r1, r2
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7ef ff3b 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80129dc:	4603      	mov	r3, r0
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4423      	add	r3, r4
 80129e2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f000 fe40 	bl	801366a <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80129ea:	4602      	mov	r2, r0
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d306      	bcc.n	8012a00 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	f000 fe28 	bl	8013648 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 80129f8:	4602      	mov	r2, r0
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d904      	bls.n	8012a0a <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012a00:	68f8      	ldr	r0, [r7, #12]
 8012a02:	f000 fe21 	bl	8013648 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8012a06:	4603      	mov	r3, r0
 8012a08:	e000      	b.n	8012a0c <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8012a0a:	697b      	ldr	r3, [r7, #20]
      }
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	371c      	adds	r7, #28
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd90      	pop	{r4, r7, pc}

08012a14 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012a14:	b590      	push	{r4, r7, lr}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7fb f916 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8012a24:	4603      	mov	r3, r0
 8012a26:	681c      	ldr	r4, [r3, #0]
 8012a28:	6838      	ldr	r0, [r7, #0]
 8012a2a:	f7fb f911 	bl	800dc50 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	1ae3      	subs	r3, r4, r3
 8012a34:	109b      	asrs	r3, r3, #2
 8012a36:	4618      	mov	r0, r3
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}

08012a3e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b082      	sub	sp, #8
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d006      	beq.n	8012a5c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 fe19 	bl	801368a <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	e000      	b.n	8012a5e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8012a5c:	2300      	movs	r3, #0
      }
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012a66:	b590      	push	{r4, r7, lr}
 8012a68:	b087      	sub	sp, #28
 8012a6a:	af02      	add	r7, sp, #8
 8012a6c:	60f8      	str	r0, [r7, #12]
 8012a6e:	60b9      	str	r1, [r7, #8]
 8012a70:	607a      	str	r2, [r7, #4]
 8012a72:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012a74:	f88d 4000 	strb.w	r4, [sp]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	68b9      	ldr	r1, [r7, #8]
 8012a7e:	68f8      	ldr	r0, [r7, #12]
 8012a80:	f000 fe23 	bl	80136ca <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012a84:	4603      	mov	r3, r0
      }
 8012a86:	4618      	mov	r0, r3
 8012a88:	3714      	adds	r7, #20
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd90      	pop	{r4, r7, pc}

08012a8e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b084      	sub	sp, #16
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	6078      	str	r0, [r7, #4]
 8012a96:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	425b      	negs	r3, r3
 8012aa2:	4413      	add	r3, r2
 8012aa4:	60fb      	str	r3, [r7, #12]
 8012aa6:	f107 020c 	add.w	r2, r7, #12
 8012aaa:	f107 0308 	add.w	r3, r7, #8
 8012aae:	4611      	mov	r1, r2
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fe f81d 	bl	8010af0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4618      	mov	r0, r3
 8012acc:	370c      	adds	r7, #12
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr

08012ad6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8012ad6:	b480      	push	{r7}
 8012ad8:	b083      	sub	sp, #12
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012b02:	b590      	push	{r4, r7, lr}
 8012b04:	b087      	sub	sp, #28
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	60f8      	str	r0, [r7, #12]
 8012b0a:	60b9      	str	r1, [r7, #8]
 8012b0c:	607a      	str	r2, [r7, #4]
 8012b0e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d01b      	beq.n	8012b4e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012b16:	68fc      	ldr	r4, [r7, #12]
 8012b18:	68b8      	ldr	r0, [r7, #8]
 8012b1a:	f7f8 fe10 	bl	800b73e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	683a      	ldr	r2, [r7, #0]
 8012b22:	4619      	mov	r1, r3
 8012b24:	4620      	mov	r0, r4
 8012b26:	f7f8 fbb9 	bl	800b29c <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f083 0301 	eor.w	r3, r3, #1
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d006      	beq.n	8012b44 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	607b      	str	r3, [r7, #4]
 8012b3a:	68b8      	ldr	r0, [r7, #8]
 8012b3c:	f7f8 feec 	bl	800b918 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012b40:	60b8      	str	r0, [r7, #8]
 8012b42:	e7e5      	b.n	8012b10 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8012b44:	68b8      	ldr	r0, [r7, #8]
 8012b46:	f7f8 fedb 	bl	800b900 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012b4a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012b4c:	e7e0      	b.n	8012b10 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8012b4e:	f107 0314 	add.w	r3, r7, #20
 8012b52:	6879      	ldr	r1, [r7, #4]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7f8 fe16 	bl	800b786 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8012b5a:	697b      	ldr	r3, [r7, #20]
    }
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	371c      	adds	r7, #28
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd90      	pop	{r4, r7, pc}

08012b64 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8012b64:	b590      	push	{r4, r7, lr}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8012b6e:	687c      	ldr	r4, [r7, #4]
 8012b70:	6838      	ldr	r0, [r7, #0]
 8012b72:	f7ff f809 	bl	8011b88 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012b76:	4603      	mov	r3, r0
 8012b78:	4619      	mov	r1, r3
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f000 fdb7 	bl	80136ee <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4618      	mov	r0, r3
 8012b84:	370c      	adds	r7, #12
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd90      	pop	{r4, r7, pc}

08012b8a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8e:	b086      	sub	sp, #24
 8012b90:	af02      	add	r7, sp, #8
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	2018      	movs	r0, #24
 8012ba0:	f7ed fbc6 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	f7f9 f8bd 	bl	800bd24 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8012baa:	4604      	mov	r4, r0
 8012bac:	68b8      	ldr	r0, [r7, #8]
 8012bae:	f7f8 fc95 	bl	800b4dc <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 8012bb2:	4605      	mov	r5, r0
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f7ee fb56 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012bba:	4606      	mov	r6, r0
 8012bbc:	6838      	ldr	r0, [r7, #0]
 8012bbe:	f7ff f801 	bl	8011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012bc2:	4680      	mov	r8, r0
 8012bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bc6:	f7ee fb64 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	9300      	str	r3, [sp, #0]
 8012bce:	4643      	mov	r3, r8
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	4629      	mov	r1, r5
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	f000 fdd4 	bl	8013782 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8012bda:	bf00      	nop
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012be4 <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8012bec:	1d3b      	adds	r3, r7, #4
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fb fb26 	bl	800e240 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <_ZSt14__copy_move_a1ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	60b9      	str	r1, [r7, #8]
 8012c0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	68b9      	ldr	r1, [r7, #8]
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f000 fdd2 	bl	80137ba <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>
 8012c16:	4603      	mov	r3, r0
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff ffda 	bl	8012be4 <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8012c30:	4602      	mov	r2, r0
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	1a9b      	subs	r3, r3, r2
 8012c36:	109b      	asrs	r3, r3, #2
 8012c38:	461a      	mov	r2, r3
 8012c3a:	1d3b      	adds	r3, r7, #4
 8012c3c:	4611      	mov	r1, r2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fd fba0 	bl	8010384 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8012c44:	4603      	mov	r3, r0
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
    }
 8012c56:	bf00      	nop
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr

08012c62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b082      	sub	sp, #8
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d00a      	beq.n	8012c8a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f000 fdcc 	bl	8013812 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f000 fdd3 	bl	8013828 <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	3304      	adds	r3, #4
 8012c86:	607b      	str	r3, [r7, #4]
 8012c88:	e7f0      	b.n	8012c6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 8012c8a:	bf00      	nop
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012c92:	b480      	push	{r7}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
 8012c9a:	6039      	str	r1, [r7, #0]
 8012c9c:	bf00      	nop
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012ca8:	b590      	push	{r4, r7, lr}
 8012caa:	b087      	sub	sp, #28
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f000 fdc2 	bl	801383e <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012cba:	4604      	mov	r4, r0
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f000 fdcf 	bl	8013860 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	1ae2      	subs	r2, r4, r3
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	bf34      	ite	cc
 8012ccc:	2301      	movcc	r3, #1
 8012cce:	2300      	movcs	r3, #0
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f00e fabe 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f000 fdbf 	bl	8013860 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f000 fdbb 	bl	8013860 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012cea:	4603      	mov	r3, r0
 8012cec:	613b      	str	r3, [r7, #16]
 8012cee:	f107 0208 	add.w	r2, r7, #8
 8012cf2:	f107 0310 	add.w	r3, r7, #16
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7ef fdaa 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4423      	add	r3, r4
 8012d04:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f000 fdaa 	bl	8013860 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d306      	bcc.n	8012d22 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	f000 fd92 	bl	801383e <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d904      	bls.n	8012d2c <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f000 fd8b 	bl	801383e <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	e000      	b.n	8012d2e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 8012d2c:	697b      	ldr	r3, [r7, #20]
      }
 8012d2e:	4618      	mov	r0, r3
 8012d30:	371c      	adds	r7, #28
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd90      	pop	{r4, r7, pc}

08012d36 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012d36:	b590      	push	{r4, r7, lr}
 8012d38:	b083      	sub	sp, #12
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
 8012d3e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7fb fb7b 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8012d46:	4603      	mov	r3, r0
 8012d48:	681c      	ldr	r4, [r3, #0]
 8012d4a:	6838      	ldr	r0, [r7, #0]
 8012d4c:	f7fb fb76 	bl	800e43c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8012d50:	4603      	mov	r3, r0
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	1ae3      	subs	r3, r4, r3
 8012d56:	109b      	asrs	r3, r3, #2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd90      	pop	{r4, r7, pc}

08012d60 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d006      	beq.n	8012d7e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6839      	ldr	r1, [r7, #0]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 fd83 	bl	8013880 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	e000      	b.n	8012d80 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 8012d7e:	2300      	movs	r3, #0
      }
 8012d80:	4618      	mov	r0, r3
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012d88:	b590      	push	{r4, r7, lr}
 8012d8a:	b087      	sub	sp, #28
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	607a      	str	r2, [r7, #4]
 8012d94:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012d96:	f88d 4000 	strb.w	r4, [sp]
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	68b9      	ldr	r1, [r7, #8]
 8012da0:	68f8      	ldr	r0, [r7, #12]
 8012da2:	f000 fd8d 	bl	80138c0 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012da6:	4603      	mov	r3, r0
      }
 8012da8:	4618      	mov	r0, r3
 8012daa:	3714      	adds	r7, #20
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd90      	pop	{r4, r7, pc}

08012db0 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	009b      	lsls	r3, r3, #2
 8012dc2:	425b      	negs	r3, r3
 8012dc4:	4413      	add	r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
 8012dc8:	f107 020c 	add.w	r2, r7, #12
 8012dcc:	f107 0308 	add.w	r3, r7, #8
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe f977 	bl	80110c6 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}

08012de2 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b082      	sub	sp, #8
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f000 fd9f 	bl	8013930 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8012df2:	4603      	mov	r3, r0
 8012df4:	4618      	mov	r0, r3
 8012df6:	f000 fd81 	bl	80138fc <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	60fb      	str	r3, [r7, #12]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012e16:	f7ed fa83 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d006      	beq.n	8012e2e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	4618      	mov	r0, r3
 8012e26:	f00e f94d 	bl	80210c4 <_Znwj>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	e006      	b.n	8012e3c <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012e2e:	2200      	movs	r2, #0
 8012e30:	68b9      	ldr	r1, [r7, #8]
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	f001 f952 	bl	80140dc <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	bf00      	nop
      { return __a.allocate(__n); }
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3710      	adds	r7, #16
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
 8012e50:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	68b9      	ldr	r1, [r7, #8]
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 fd74 	bl	8013946 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012e5e:	4603      	mov	r3, r0
      }
 8012e60:	4618      	mov	r0, r3
 8012e62:	3710      	adds	r7, #16
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>:
      _M_access() const
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7fa fcf1 	bl	800d858 <_ZNKSt9_Any_data9_M_accessEv>
 8012e76:	4603      	mov	r3, r0
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessageEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	370c      	adds	r7, #12
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e94:	4770      	bx	lr

08012e96 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012e96:	b480      	push	{r7}
 8012e98:	b083      	sub	sp, #12
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr

08012eac <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	7138      	strb	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012eb6:	6838      	ldr	r0, [r7, #0]
 8012eb8:	f7ff ffed 	bl	8012e96 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fb fa50 	bl	800e364 <_ZZN6Stream11add_messageEmP13StreamMessageENKUlvE_clEv>
 8012ec4:	bf00      	nop
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012ecc:	b590      	push	{r4, r7, lr}
 8012ece:	b085      	sub	sp, #20
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012ed8:	68b8      	ldr	r0, [r7, #8]
 8012eda:	f7ff ffc5 	bl	8012e68 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>
 8012ede:	4604      	mov	r4, r0
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f7fa fcae 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	4619      	mov	r1, r3
 8012eea:	2004      	movs	r0, #4
 8012eec:	f7ed fa20 	bl	8000330 <_ZnwjPv>
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	6823      	ldr	r3, [r4, #0]
 8012ef4:	6013      	str	r3, [r2, #0]
	}
 8012ef6:	bf00      	nop
 8012ef8:	3714      	adds	r7, #20
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd90      	pop	{r4, r7, pc}

08012efe <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b082      	sub	sp, #8
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f000 fd39 	bl	8013980 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
	}
 8012f0e:	bf00      	nop
 8012f10:	3708      	adds	r7, #8
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 8012f16:	b480      	push	{r7}
 8012f18:	b083      	sub	sp, #12
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4618      	mov	r0, r3
 8012f22:	370c      	adds	r7, #12
 8012f24:	46bd      	mov	sp, r7
 8012f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2a:	4770      	bx	lr

08012f2c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b088      	sub	sp, #32
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	61fb      	str	r3, [r7, #28]
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	61bb      	str	r3, [r7, #24]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012f44:	f7ed f9ec 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d003      	beq.n	8012f56 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 8012f4e:	69b8      	ldr	r0, [r7, #24]
 8012f50:	f00e f8b4 	bl	80210bc <_ZdlPv>
	    return;
 8012f54:	e005      	b.n	8012f62 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012f56:	697a      	ldr	r2, [r7, #20]
 8012f58:	69b9      	ldr	r1, [r7, #24]
 8012f5a:	69f8      	ldr	r0, [r7, #28]
 8012f5c:	f001 f906 	bl	801416c <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 8012f60:	bf00      	nop
 8012f62:	bf00      	nop
 8012f64:	3720      	adds	r7, #32
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b082      	sub	sp, #8
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
 8012f72:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8012f74:	f7ed f9d4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d004      	beq.n	8012f88 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 fd09 	bl	8013998 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 8012f86:	e003      	b.n	8012f90 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 8012f88:	6839      	ldr	r1, [r7, #0]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 fd1c 	bl	80139c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012f96:	b480      	push	{r7}
 8012f98:	b083      	sub	sp, #12
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 8012fac:	b5b0      	push	{r4, r5, r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	685a      	ldr	r2, [r3, #4]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d011      	beq.n	8012fe6 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012fc2:	687c      	ldr	r4, [r7, #4]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685d      	ldr	r5, [r3, #4]
 8012fc8:	6838      	ldr	r0, [r7, #0]
 8012fca:	f000 fd08 	bl	80139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f000 fd22 	bl	8013a1e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	1d1a      	adds	r2, r3, #4
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	605a      	str	r2, [r3, #4]
 8012fe4:	e00c      	b.n	8013000 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7f2 f8b3 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012fec:	4604      	mov	r4, r0
 8012fee:	6838      	ldr	r0, [r7, #0]
 8012ff0:	f000 fcf5 	bl	80139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	461a      	mov	r2, r3
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 fd22 	bl	8013a44 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f000 fd9b 	bl	8013b3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 8013006:	4603      	mov	r3, r0
      }
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bdb0      	pop	{r4, r5, r7, pc}

08013010 <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff f90d 	bl	801223c <_ZN5FieldIJEEC1Ev>
 8013022:	4a05      	ldr	r2, [pc, #20]	; (8013038 <_ZN5FieldIJtEEC1EPt+0x28>)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	601a      	str	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	683a      	ldr	r2, [r7, #0]
 801302c:	605a      	str	r2, [r3, #4]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	4618      	mov	r0, r3
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	08021890 	.word	0x08021890

0801303c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7f9 fae8 	bl	800c61c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801304c:	4604      	mov	r4, r0
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f000 fd8f 	bl	8013b72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013054:	4602      	mov	r2, r0
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	4621      	mov	r1, r4
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 fd95 	bl	8013b8a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8013060:	4603      	mov	r3, r0
 8013062:	4618      	mov	r0, r3
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	bd90      	pop	{r4, r7, pc}

0801306a <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 801306a:	b480      	push	{r7}
 801306c:	b083      	sub	sp, #12
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8013072:	bf00      	nop
 8013074:	4618      	mov	r0, r3
 8013076:	370c      	adds	r7, #12
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6839      	ldr	r1, [r7, #0]
 801308e:	4618      	mov	r0, r3
 8013090:	f000 fdac 	bl	8013bec <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	4618      	mov	r0, r3
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801309e:	b480      	push	{r7}
 80130a0:	b083      	sub	sp, #12
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr

080130b4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80130b4:	b5b0      	push	{r4, r5, r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af02      	add	r7, sp, #8
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f000 fda1 	bl	8013c0a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 80130c8:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80130ca:	68b8      	ldr	r0, [r7, #8]
 80130cc:	f7ee f8cb 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80130d0:	4604      	mov	r4, r0
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff ffe3 	bl	801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80130d8:	4605      	mov	r5, r0
 80130da:	6838      	ldr	r0, [r7, #0]
 80130dc:	f7ee f8d9 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80130e0:	4603      	mov	r3, r0
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	462b      	mov	r3, r5
 80130e6:	4622      	mov	r2, r4
 80130e8:	6979      	ldr	r1, [r7, #20]
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f000 fd9e 	bl	8013c2c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 80130f0:	697b      	ldr	r3, [r7, #20]
	}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3718      	adds	r7, #24
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bdb0      	pop	{r4, r5, r7, pc}

080130fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80130fa:	b590      	push	{r4, r7, lr}
 80130fc:	b08d      	sub	sp, #52	; 0x34
 80130fe:	af00      	add	r7, sp, #0
 8013100:	60f8      	str	r0, [r7, #12]
 8013102:	60b9      	str	r1, [r7, #8]
 8013104:	607a      	str	r2, [r7, #4]
 8013106:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8013108:	1d3b      	adds	r3, r7, #4
 801310a:	4618      	mov	r0, r3
 801310c:	f000 fdbb 	bl	8013c86 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 8013110:	4603      	mov	r3, r0
 8013112:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8013114:	69bc      	ldr	r4, [r7, #24]
 8013116:	68b8      	ldr	r0, [r7, #8]
 8013118:	f000 fd2b 	bl	8013b72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801311c:	4603      	mov	r3, r0
 801311e:	429c      	cmp	r4, r3
 8013120:	bf0c      	ite	eq
 8013122:	2301      	moveq	r3, #1
 8013124:	2300      	movne	r3, #0
 8013126:	b2db      	uxtb	r3, r3
 8013128:	2b00      	cmp	r3, #0
 801312a:	d030      	beq.n	801318e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 801312c:	68b8      	ldr	r0, [r7, #8]
 801312e:	f000 fdbb 	bl	8013ca8 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8013132:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8013134:	2b00      	cmp	r3, #0
 8013136:	d013      	beq.n	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8013138:	68bc      	ldr	r4, [r7, #8]
 801313a:	68b8      	ldr	r0, [r7, #8]
 801313c:	f000 fdc0 	bl	8013cc0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8013140:	4603      	mov	r3, r0
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fdc7 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801314a:	4603      	mov	r3, r0
 801314c:	683a      	ldr	r2, [r7, #0]
 801314e:	4619      	mov	r1, r3
 8013150:	4620      	mov	r0, r4
 8013152:	f7ff f8e9 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801315c:	2301      	movs	r3, #1
 801315e:	e000      	b.n	8013162 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8013160:	2300      	movs	r3, #0
	  if (size() > 0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d00c      	beq.n	8013180 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8013166:	2300      	movs	r3, #0
 8013168:	61fb      	str	r3, [r7, #28]
 801316a:	68b8      	ldr	r0, [r7, #8]
 801316c:	f000 fda8 	bl	8013cc0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8013170:	4602      	mov	r2, r0
 8013172:	f107 031c 	add.w	r3, r7, #28
 8013176:	4619      	mov	r1, r3
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f7ee fe95 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801317e:	e0db      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	68b9      	ldr	r1, [r7, #8]
 8013186:	4618      	mov	r0, r3
 8013188:	f000 fdb2 	bl	8013cf0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 801318c:	e0d4      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801318e:	68bc      	ldr	r4, [r7, #8]
 8013190:	69bb      	ldr	r3, [r7, #24]
 8013192:	4618      	mov	r0, r3
 8013194:	f000 fda0 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013198:	4603      	mov	r3, r0
 801319a:	461a      	mov	r2, r3
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	4620      	mov	r0, r4
 80131a0:	f7ff f8c2 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d057      	beq.n	801325a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80131ae:	69bc      	ldr	r4, [r7, #24]
 80131b0:	68b8      	ldr	r0, [r7, #8]
 80131b2:	f000 fe22 	bl	8013dfa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80131b6:	4603      	mov	r3, r0
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	429c      	cmp	r4, r3
 80131bc:	bf0c      	ite	eq
 80131be:	2301      	moveq	r3, #1
 80131c0:	2300      	movne	r3, #0
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00d      	beq.n	80131e4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80131c8:	68b8      	ldr	r0, [r7, #8]
 80131ca:	f000 fe16 	bl	8013dfa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80131ce:	4604      	mov	r4, r0
 80131d0:	68b8      	ldr	r0, [r7, #8]
 80131d2:	f000 fe12 	bl	8013dfa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80131d6:	4603      	mov	r3, r0
 80131d8:	461a      	mov	r2, r3
 80131da:	4621      	mov	r1, r4
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f7ee ff0f 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80131e2:	e0a9      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80131e4:	68bc      	ldr	r4, [r7, #8]
 80131e6:	f107 0314 	add.w	r3, r7, #20
 80131ea:	4618      	mov	r0, r3
 80131ec:	f000 fe11 	bl	8013e12 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 80131f0:	4603      	mov	r3, r0
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f000 fd6f 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80131fa:	4603      	mov	r3, r0
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	4619      	mov	r1, r3
 8013200:	4620      	mov	r0, r4
 8013202:	f7ff f891 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d01f      	beq.n	801324c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	4618      	mov	r0, r3
 8013210:	f7f9 fa1b 	bl	800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013214:	4603      	mov	r3, r0
 8013216:	2b00      	cmp	r3, #0
 8013218:	bf0c      	ite	eq
 801321a:	2301      	moveq	r3, #1
 801321c:	2300      	movne	r3, #0
 801321e:	b2db      	uxtb	r3, r3
 8013220:	2b00      	cmp	r3, #0
 8013222:	d00a      	beq.n	801323a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8013224:	2300      	movs	r3, #0
 8013226:	623b      	str	r3, [r7, #32]
 8013228:	f107 0214 	add.w	r2, r7, #20
 801322c:	f107 0320 	add.w	r3, r7, #32
 8013230:	4619      	mov	r1, r3
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f7ee fe38 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8013238:	e07e      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801323a:	f107 0218 	add.w	r2, r7, #24
 801323e:	f107 0318 	add.w	r3, r7, #24
 8013242:	4619      	mov	r1, r3
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f7ee fedb 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801324a:	e075      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	683a      	ldr	r2, [r7, #0]
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	4618      	mov	r0, r3
 8013254:	f000 fd4c 	bl	8013cf0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8013258:	e06e      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801325a:	68bc      	ldr	r4, [r7, #8]
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	4618      	mov	r0, r3
 8013260:	f000 fd3a 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013264:	4603      	mov	r3, r0
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	4619      	mov	r1, r3
 801326a:	4620      	mov	r0, r4
 801326c:	f7ff f85c 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d056      	beq.n	8013324 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801327a:	69bc      	ldr	r4, [r7, #24]
 801327c:	68b8      	ldr	r0, [r7, #8]
 801327e:	f000 fd1f 	bl	8013cc0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8013282:	4603      	mov	r3, r0
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	429c      	cmp	r4, r3
 8013288:	bf0c      	ite	eq
 801328a:	2301      	moveq	r3, #1
 801328c:	2300      	movne	r3, #0
 801328e:	b2db      	uxtb	r3, r3
 8013290:	2b00      	cmp	r3, #0
 8013292:	d00c      	beq.n	80132ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8013294:	2300      	movs	r3, #0
 8013296:	627b      	str	r3, [r7, #36]	; 0x24
 8013298:	68b8      	ldr	r0, [r7, #8]
 801329a:	f000 fd11 	bl	8013cc0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801329e:	4602      	mov	r2, r0
 80132a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132a4:	4619      	mov	r1, r3
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f7ee fdfe 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80132ac:	e044      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80132ae:	68bc      	ldr	r4, [r7, #8]
 80132b0:	f107 0310 	add.w	r3, r7, #16
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f1 ff8b 	bl	80051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 80132ba:	4603      	mov	r3, r0
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	4618      	mov	r0, r3
 80132c0:	f000 fd0a 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80132c4:	4603      	mov	r3, r0
 80132c6:	461a      	mov	r2, r3
 80132c8:	6839      	ldr	r1, [r7, #0]
 80132ca:	4620      	mov	r0, r4
 80132cc:	f7ff f82c 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 80132d0:	4603      	mov	r3, r0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d01f      	beq.n	8013316 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7f9 f9b6 	bl	800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bf0c      	ite	eq
 80132e4:	2301      	moveq	r3, #1
 80132e6:	2300      	movne	r3, #0
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00a      	beq.n	8013304 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80132ee:	2300      	movs	r3, #0
 80132f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80132f2:	f107 0218 	add.w	r2, r7, #24
 80132f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80132fa:	4619      	mov	r1, r3
 80132fc:	68f8      	ldr	r0, [r7, #12]
 80132fe:	f7ee fdd3 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8013302:	e019      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8013304:	f107 0210 	add.w	r2, r7, #16
 8013308:	f107 0310 	add.w	r3, r7, #16
 801330c:	4619      	mov	r1, r3
 801330e:	68f8      	ldr	r0, [r7, #12]
 8013310:	f7ee fe76 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8013314:	e010      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	683a      	ldr	r2, [r7, #0]
 801331a:	68b9      	ldr	r1, [r7, #8]
 801331c:	4618      	mov	r0, r3
 801331e:	f000 fce7 	bl	8013cf0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8013322:	e009      	b.n	8013338 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8013324:	2300      	movs	r3, #0
 8013326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013328:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801332c:	f107 0318 	add.w	r3, r7, #24
 8013330:	4619      	mov	r1, r3
 8013332:	68f8      	ldr	r0, [r7, #12]
 8013334:	f7ee fe9f 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	3734      	adds	r7, #52	; 0x34
 801333c:	46bd      	mov	sp, r7
 801333e:	bd90      	pop	{r4, r7, pc}

08013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f000 fd73 	bl	8013e34 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 801334e:	4602      	mov	r2, r0
 8013350:	f107 030c 	add.w	r3, r7, #12
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f000 fd7a 	bl	8013e50 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 801335c:	4603      	mov	r3, r0
      }
 801335e:	4618      	mov	r0, r3
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013366:	b5b0      	push	{r4, r5, r7, lr}
 8013368:	b086      	sub	sp, #24
 801336a:	af00      	add	r7, sp, #0
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
 8013372:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d117      	bne.n	80133aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801337a:	68f8      	ldr	r0, [r7, #12]
 801337c:	f000 fbf9 	bl	8013b72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013380:	4602      	mov	r2, r0
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	4293      	cmp	r3, r2
 8013386:	d010      	beq.n	80133aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8013388:	68fc      	ldr	r4, [r7, #12]
 801338a:	6838      	ldr	r0, [r7, #0]
 801338c:	f7ff ffd8 	bl	8013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013390:	4605      	mov	r5, r0
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f000 fca0 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013398:	4603      	mov	r3, r0
 801339a:	461a      	mov	r2, r3
 801339c:	4629      	mov	r1, r5
 801339e:	4620      	mov	r0, r4
 80133a0:	f7fe ffc2 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80133aa:	2301      	movs	r3, #1
 80133ac:	e000      	b.n	80133b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 80133ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80133b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80133b6:	7df8      	ldrb	r0, [r7, #23]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	f00d feee 	bl	802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	695b      	ldr	r3, [r3, #20]
 80133c4:	1c5a      	adds	r2, r3, #1
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80133ca:	f107 0310 	add.w	r3, r7, #16
 80133ce:	6839      	ldr	r1, [r7, #0]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7f2 fa08 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 80133d6:	693b      	ldr	r3, [r7, #16]
    }
 80133d8:	4618      	mov	r0, r3
 80133da:	3718      	adds	r7, #24
 80133dc:	46bd      	mov	sp, r7
 80133de:	bdb0      	pop	{r4, r5, r7, pc}

080133e0 <_ZN5FieldIJmEEC1EPm>:
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe ff25 	bl	801223c <_ZN5FieldIJEEC1Ev>
 80133f2:	4a05      	ldr	r2, [pc, #20]	; (8013408 <_ZN5FieldIJmEEC1EPm+0x28>)
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	683a      	ldr	r2, [r7, #0]
 80133fc:	605a      	str	r2, [r3, #4]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4618      	mov	r0, r3
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}
 8013408:	0802187c 	.word	0x0802187c

0801340c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801340c:	b480      	push	{r7}
 801340e:	b083      	sub	sp, #12
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	4618      	mov	r0, r3
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	4618      	mov	r0, r3
 801344a:	370c      	adds	r7, #12
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013454:	b480      	push	{r7}
 8013456:	b083      	sub	sp, #12
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	689b      	ldr	r3, [r3, #8]
 8013478:	4618      	mov	r0, r3
 801347a:	370c      	adds	r7, #12
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	4618      	mov	r0, r3
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	4618      	mov	r0, r3
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	4618      	mov	r0, r3
 80134c2:	370c      	adds	r7, #12
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	4618      	mov	r0, r3
 80134da:	370c      	adds	r7, #12
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	4618      	mov	r0, r3
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f7fa f9a7 	bl	800d858 <_ZNKSt9_Any_data9_M_accessEv>
 801350a:	4603      	mov	r3, r0
 801350c:	4618      	mov	r0, r3
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	370c      	adds	r7, #12
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801352a:	b480      	push	{r7}
 801352c:	b083      	sub	sp, #12
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	370c      	adds	r7, #12
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr

08013540 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	7138      	strb	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801354a:	6838      	ldr	r0, [r7, #0]
 801354c:	f7ff ffed 	bl	801352a <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8013550:	4603      	mov	r3, r0
 8013552:	4618      	mov	r0, r3
 8013554:	f7fb fa22 	bl	800e99c <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8013558:	bf00      	nop
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 801356c:	68b8      	ldr	r0, [r7, #8]
 801356e:	f7ff ffc5 	bl	80134fc <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f7fa f965 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8013578:	4603      	mov	r3, r0
 801357a:	4619      	mov	r1, r3
 801357c:	2001      	movs	r0, #1
 801357e:	f7ec fed7 	bl	8000330 <_ZnwjPv>
	}
 8013582:	bf00      	nop
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}

0801358a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 801358a:	b580      	push	{r7, lr}
 801358c:	b082      	sub	sp, #8
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 fc67 	bl	8013e68 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 801359a:	bf00      	nop
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b082      	sub	sp, #8
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7fa f954 	bl	800d858 <_ZNKSt9_Any_data9_M_accessEv>
 80135b0:	4603      	mov	r3, r0
 80135b2:	4618      	mov	r0, r3
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80135ba:	b480      	push	{r7}
 80135bc:	b083      	sub	sp, #12
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4618      	mov	r0, r3
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr

080135e6 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b082      	sub	sp, #8
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	7138      	strb	r0, [r7, #4]
 80135ee:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80135f0:	6838      	ldr	r0, [r7, #0]
 80135f2:	f7ff ffed 	bl	80135d0 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 80135f6:	4603      	mov	r3, r0
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fb f9dd 	bl	800e9b8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 80135fe:	bf00      	nop
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8013606:	b580      	push	{r7, lr}
 8013608:	b084      	sub	sp, #16
 801360a:	af00      	add	r7, sp, #0
 801360c:	60f8      	str	r0, [r7, #12]
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8013612:	68b8      	ldr	r0, [r7, #8]
 8013614:	f7ff ffc5 	bl	80135a2 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7fa f912 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 801361e:	4603      	mov	r3, r0
 8013620:	4619      	mov	r1, r3
 8013622:	2001      	movs	r0, #1
 8013624:	f7ec fe84 	bl	8000330 <_ZnwjPv>
	}
 8013628:	bf00      	nop
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 fc20 	bl	8013e80 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8013640:	bf00      	nop
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f000 fc46 	bl	8013ee4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8013658:	4603      	mov	r3, r0
 801365a:	4618      	mov	r0, r3
 801365c:	f000 fc28 	bl	8013eb0 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8013660:	4603      	mov	r3, r0
 8013662:	4618      	mov	r0, r3
 8013664:	3708      	adds	r7, #8
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801366a:	b480      	push	{r7}
 801366c:	b083      	sub	sp, #12
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	685a      	ldr	r2, [r3, #4]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	1ad3      	subs	r3, r2, r3
 801367c:	109b      	asrs	r3, r3, #2
 801367e:	4618      	mov	r0, r3
 8013680:	370c      	adds	r7, #12
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr

0801368a <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801368a:	b580      	push	{r7, lr}
 801368c:	b084      	sub	sp, #16
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
 8013692:	6039      	str	r1, [r7, #0]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	60fb      	str	r3, [r7, #12]
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801369c:	f7ec fe40 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80136a0:	4603      	mov	r3, r0
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d006      	beq.n	80136b4 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f00d fd0a 	bl	80210c4 <_Znwj>
 80136b0:	4603      	mov	r3, r0
 80136b2:	e006      	b.n	80136c2 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80136b4:	2200      	movs	r2, #0
 80136b6:	68b9      	ldr	r1, [r7, #8]
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	f000 feb7 	bl	801442c <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 80136be:	4603      	mov	r3, r0
 80136c0:	bf00      	nop
      { return __a.allocate(__n); }
 80136c2:	4618      	mov	r0, r3
 80136c4:	3710      	adds	r7, #16
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b084      	sub	sp, #16
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	60f8      	str	r0, [r7, #12]
 80136d2:	60b9      	str	r1, [r7, #8]
 80136d4:	607a      	str	r2, [r7, #4]
 80136d6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	68b9      	ldr	r1, [r7, #8]
 80136de:	68f8      	ldr	r0, [r7, #12]
 80136e0:	f000 fc0b 	bl	8013efa <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80136e4:	4603      	mov	r3, r0
      }
 80136e6:	4618      	mov	r0, r3
 80136e8:	3710      	adds	r7, #16
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}

080136ee <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80136ee:	b580      	push	{r7, lr}
 80136f0:	b082      	sub	sp, #8
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	6078      	str	r0, [r7, #4]
 80136f6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80136f8:	6838      	ldr	r0, [r7, #0]
 80136fa:	f7fe fa45 	bl	8011b88 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 80136fe:	4602      	mov	r2, r0
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 801370e:	b580      	push	{r7, lr}
 8013710:	b082      	sub	sp, #8
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	6039      	str	r1, [r7, #0]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	4611      	mov	r1, r2
 801371e:	4618      	mov	r0, r3
 8013720:	f000 fc08 	bl	8013f34 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	4618      	mov	r0, r3
 8013728:	3708      	adds	r7, #8
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801372e:	b5b0      	push	{r4, r5, r7, lr}
 8013730:	b088      	sub	sp, #32
 8013732:	af00      	add	r7, sp, #0
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
 801373a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801373c:	68b8      	ldr	r0, [r7, #8]
 801373e:	f7ed fd92 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7fe fa3e 	bl	8011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013748:	4602      	mov	r2, r0
 801374a:	f107 0318 	add.w	r3, r7, #24
 801374e:	4611      	mov	r1, r2
 8013750:	4618      	mov	r0, r3
 8013752:	f7ff ffdc 	bl	801370e <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 8013756:	f107 0418 	add.w	r4, r7, #24
 801375a:	6838      	ldr	r0, [r7, #0]
 801375c:	f7ed fd99 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	4619      	mov	r1, r3
 8013764:	2008      	movs	r0, #8
 8013766:	f7ec fde3 	bl	8000330 <_ZnwjPv>
 801376a:	4605      	mov	r5, r0
 801376c:	7f3b      	ldrb	r3, [r7, #28]
 801376e:	4622      	mov	r2, r4
 8013770:	7d39      	ldrb	r1, [r7, #20]
 8013772:	4628      	mov	r0, r5
 8013774:	f000 fc0f 	bl	8013f96 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8013778:	462b      	mov	r3, r5
 801377a:	4618      	mov	r0, r3
 801377c:	3720      	adds	r7, #32
 801377e:	46bd      	mov	sp, r7
 8013780:	bdb0      	pop	{r4, r5, r7, pc}

08013782 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013782:	b5b0      	push	{r4, r5, r7, lr}
 8013784:	b084      	sub	sp, #16
 8013786:	af00      	add	r7, sp, #0
 8013788:	60f8      	str	r0, [r7, #12]
 801378a:	60b9      	str	r1, [r7, #8]
 801378c:	607a      	str	r2, [r7, #4]
 801378e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7ed fd68 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013796:	4604      	mov	r4, r0
 8013798:	6838      	ldr	r0, [r7, #0]
 801379a:	f7fe fa13 	bl	8011bc4 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801379e:	4605      	mov	r5, r0
 80137a0:	6a38      	ldr	r0, [r7, #32]
 80137a2:	f7ed fd76 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80137a6:	4603      	mov	r3, r0
 80137a8:	462a      	mov	r2, r5
 80137aa:	4621      	mov	r1, r4
 80137ac:	68b8      	ldr	r0, [r7, #8]
 80137ae:	f7ff ffbe 	bl	801372e <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 80137b2:	bf00      	nop
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bdb0      	pop	{r4, r5, r7, pc}

080137ba <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80137ba:	b580      	push	{r7, lr}
 80137bc:	b084      	sub	sp, #16
 80137be:	af00      	add	r7, sp, #0
 80137c0:	60f8      	str	r0, [r7, #12]
 80137c2:	60b9      	str	r1, [r7, #8]
 80137c4:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80137c6:	f7ec fdab 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d006      	beq.n	80137de <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	68b9      	ldr	r1, [r7, #8]
 80137d4:	68f8      	ldr	r0, [r7, #12]
 80137d6:	f000 fbf2 	bl	8013fbe <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_>
 80137da:	4603      	mov	r3, r0
 80137dc:	e006      	b.n	80137ec <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	68b9      	ldr	r1, [r7, #8]
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	f000 fc0f 	bl	8014006 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_>
 80137e8:	4603      	mov	r3, r0
 80137ea:	bf00      	nop
    }
 80137ec:	4618      	mov	r0, r3
 80137ee:	3710      	adds	r7, #16
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	4619      	mov	r1, r3
 8013806:	68b8      	ldr	r0, [r7, #8]
 8013808:	f00d fc5a 	bl	80210c0 <_ZdlPvj>
      }
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013812:	b480      	push	{r7}
 8013814:	b083      	sub	sp, #12
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4618      	mov	r0, r3
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7ff fa0c 	bl	8012c4e <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8013836:	bf00      	nop
 8013838:	3708      	adds	r7, #8
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}

0801383e <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801383e:	b580      	push	{r7, lr}
 8013840:	b082      	sub	sp, #8
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4618      	mov	r0, r3
 801384a:	f000 fc1f 	bl	801408c <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 801384e:	4603      	mov	r3, r0
 8013850:	4618      	mov	r0, r3
 8013852:	f000 fc01 	bl	8014058 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8013856:	4603      	mov	r3, r0
 8013858:	4618      	mov	r0, r3
 801385a:	3708      	adds	r7, #8
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685a      	ldr	r2, [r3, #4]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	109b      	asrs	r3, r3, #2
 8013874:	4618      	mov	r0, r3
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8013880:	b580      	push	{r7, lr}
 8013882:	b084      	sub	sp, #16
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	6039      	str	r1, [r7, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	60fb      	str	r3, [r7, #12]
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013892:	f7ec fd45 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d006      	beq.n	80138aa <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	4618      	mov	r0, r3
 80138a2:	f00d fc0f 	bl	80210c4 <_Znwj>
 80138a6:	4603      	mov	r3, r0
 80138a8:	e006      	b.n	80138b8 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80138aa:	2200      	movs	r2, #0
 80138ac:	68b9      	ldr	r1, [r7, #8]
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f000 fe34 	bl	801451c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 80138b4:	4603      	mov	r3, r0
 80138b6:	bf00      	nop
      { return __a.allocate(__n); }
 80138b8:	4618      	mov	r0, r3
 80138ba:	3710      	adds	r7, #16
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	68b9      	ldr	r1, [r7, #8]
 80138d4:	68f8      	ldr	r0, [r7, #12]
 80138d6:	f000 fbe4 	bl	80140a2 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 80138da:	4603      	mov	r3, r0
      }
 80138dc:	4618      	mov	r0, r3
 80138de:	3710      	adds	r7, #16
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80138ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80138f0:	4618      	mov	r0, r3
 80138f2:	370c      	adds	r7, #12
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr

080138fc <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b084      	sub	sp, #16
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013904:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013908:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff ffea 	bl	80138e4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8013910:	4603      	mov	r3, r0
 8013912:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013914:	f107 0208 	add.w	r2, r7, #8
 8013918:	f107 030c 	add.w	r3, r7, #12
 801391c:	4611      	mov	r1, r2
 801391e:	4618      	mov	r0, r3
 8013920:	f7ef fa61 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013924:	4603      	mov	r3, r0
 8013926:	681b      	ldr	r3, [r3, #0]
      }
 8013928:	4618      	mov	r0, r3
 801392a:	3710      	adds	r7, #16
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013930:	b480      	push	{r7}
 8013932:	b083      	sub	sp, #12
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013946:	b5b0      	push	{r4, r5, r7, lr}
 8013948:	b084      	sub	sp, #16
 801394a:	af00      	add	r7, sp, #0
 801394c:	60f8      	str	r0, [r7, #12]
 801394e:	60b9      	str	r1, [r7, #8]
 8013950:	607a      	str	r2, [r7, #4]
 8013952:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f000 fbe0 	bl	801411a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 801395a:	4604      	mov	r4, r0
 801395c:	68b8      	ldr	r0, [r7, #8]
 801395e:	f000 fbdc 	bl	801411a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8013962:	4605      	mov	r5, r0
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fbd8 	bl	801411a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 801396a:	4602      	mov	r2, r0
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	4629      	mov	r1, r5
 8013970:	4620      	mov	r0, r4
 8013972:	f000 fbdd 	bl	8014130 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013976:	4603      	mov	r3, r0
    }
 8013978:	4618      	mov	r0, r3
 801397a:	3710      	adds	r7, #16
 801397c:	46bd      	mov	sp, r7
 801397e:	bdb0      	pop	{r4, r5, r7, pc}

08013980 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>:
      _M_access()
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f7f9 ff5a 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 801398e:	4603      	mov	r3, r0
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d00a      	beq.n	80139c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 fbed 	bl	801418a <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 80139b0:	4603      	mov	r3, r0
 80139b2:	4618      	mov	r0, r3
 80139b4:	f000 fbf4 	bl	80141a0 <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3304      	adds	r3, #4
 80139bc:	607b      	str	r3, [r7, #4]
 80139be:	e7f0      	b.n	80139a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 80139c0:	bf00      	nop
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
 80139d2:	bf00      	nop
 80139d4:	370c      	adds	r7, #12
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr

080139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80139de:	b480      	push	{r7}
 80139e0:	b083      	sub	sp, #12
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	370c      	adds	r7, #12
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80139f4:	b590      	push	{r4, r7, lr}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80139fe:	6838      	ldr	r0, [r7, #0]
 8013a00:	f7ff ffed 	bl	80139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a04:	4603      	mov	r3, r0
 8013a06:	681c      	ldr	r4, [r3, #0]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	2004      	movs	r0, #4
 8013a0e:	f7ec fc8f 	bl	8000330 <_ZnwjPv>
 8013a12:	4603      	mov	r3, r0
 8013a14:	601c      	str	r4, [r3, #0]
 8013a16:	4618      	mov	r0, r3
 8013a18:	370c      	adds	r7, #12
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd90      	pop	{r4, r7, pc}

08013a1e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013a1e:	b580      	push	{r7, lr}
 8013a20:	b084      	sub	sp, #16
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7ff ffd7 	bl	80139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a30:	4603      	mov	r3, r0
 8013a32:	4619      	mov	r1, r3
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	f7ff ffdd 	bl	80139f4 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8013a3a:	bf00      	nop
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
	...

08013a44 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8013a44:	b5b0      	push	{r4, r5, r7, lr}
 8013a46:	b08c      	sub	sp, #48	; 0x30
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	60f8      	str	r0, [r7, #12]
 8013a4c:	60b9      	str	r1, [r7, #8]
 8013a4e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013a50:	4a39      	ldr	r2, [pc, #228]	; (8013b38 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8013a52:	2101      	movs	r1, #1
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f000 fbae 	bl	80141b6 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8013a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f7f1 fb62 	bl	8005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	617b      	str	r3, [r7, #20]
 8013a72:	f107 0214 	add.w	r2, r7, #20
 8013a76:	f107 0308 	add.w	r3, r7, #8
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f000 fbe1 	bl	8014244 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8013a82:	4603      	mov	r3, r0
 8013a84:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f000 fbef 	bl	801426e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8013a90:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8013a96:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8013a98:	6a3b      	ldr	r3, [r7, #32]
 8013a9a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8013a9c:	69fa      	ldr	r2, [r7, #28]
 8013a9e:	18d5      	adds	r5, r2, r3
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f7ff ff9c 	bl	80139de <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	4629      	mov	r1, r5
 8013aac:	4620      	mov	r0, r4
 8013aae:	f7ff ffb6 	bl	8013a1e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8013ab6:	f107 0308 	add.w	r3, r7, #8
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7f0 ff99 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fe fb9f 	bl	801220a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8013acc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8013ace:	69fa      	ldr	r2, [r7, #28]
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ad4:	f000 fbdf 	bl	8014296 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8013ad8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	3304      	adds	r3, #4
 8013ade:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013ae0:	f107 0308 	add.w	r3, r7, #8
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7f0 ff84 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013aea:	4603      	mov	r3, r0
 8013aec:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7fe fb8a 	bl	801220a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8013af6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013af8:	69ba      	ldr	r2, [r7, #24]
 8013afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013afc:	4620      	mov	r0, r4
 8013afe:	f000 fbca 	bl	8014296 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8013b02:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8013b04:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	689a      	ldr	r2, [r3, #8]
 8013b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8013b10:	461a      	mov	r2, r3
 8013b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b14:	f7fe fb66 	bl	80121e4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	69fa      	ldr	r2, [r7, #28]
 8013b1c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	69ba      	ldr	r2, [r7, #24]
 8013b22:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	69fa      	ldr	r2, [r7, #28]
 8013b2a:	441a      	add	r2, r3
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	609a      	str	r2, [r3, #8]
    }
 8013b30:	bf00      	nop
 8013b32:	3730      	adds	r7, #48	; 0x30
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bdb0      	pop	{r4, r5, r7, pc}
 8013b38:	08021808 	.word	0x08021808

08013b3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7f1 fb04 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	60fb      	str	r3, [r7, #12]
 8013b4e:	f107 030c 	add.w	r3, r7, #12
 8013b52:	2101      	movs	r1, #1
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 fbb2 	bl	80142be <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	60bb      	str	r3, [r7, #8]
 8013b5e:	f107 0308 	add.w	r3, r7, #8
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f0 ff78 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8013b68:	4603      	mov	r3, r0
      }
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8013b72:	b480      	push	{r7}
 8013b74:	b083      	sub	sp, #12
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	4618      	mov	r0, r3
 8013b80:	370c      	adds	r7, #12
 8013b82:	46bd      	mov	sp, r7
 8013b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b88:	4770      	bx	lr

08013b8a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013b8a:	b590      	push	{r4, r7, lr}
 8013b8c:	b087      	sub	sp, #28
 8013b8e:	af00      	add	r7, sp, #0
 8013b90:	60f8      	str	r0, [r7, #12]
 8013b92:	60b9      	str	r1, [r7, #8]
 8013b94:	607a      	str	r2, [r7, #4]
 8013b96:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d01b      	beq.n	8013bd6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8013b9e:	68fc      	ldr	r4, [r7, #12]
 8013ba0:	68b8      	ldr	r0, [r7, #8]
 8013ba2:	f7ff fbcd 	bl	8013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	683a      	ldr	r2, [r7, #0]
 8013baa:	4619      	mov	r1, r3
 8013bac:	4620      	mov	r0, r4
 8013bae:	f7fe fbbb 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	f083 0301 	eor.w	r3, r3, #1
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d006      	beq.n	8013bcc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	607b      	str	r3, [r7, #4]
 8013bc2:	68b8      	ldr	r0, [r7, #8]
 8013bc4:	f7f8 fd4d 	bl	800c662 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013bc8:	60b8      	str	r0, [r7, #8]
 8013bca:	e7e5      	b.n	8013b98 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8013bcc:	68b8      	ldr	r0, [r7, #8]
 8013bce:	f7f8 fd3c 	bl	800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013bd2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8013bd4:	e7e0      	b.n	8013b98 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8013bd6:	f107 0314 	add.w	r3, r7, #20
 8013bda:	6879      	ldr	r1, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7f1 fe02 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8013be2:	697b      	ldr	r3, [r7, #20]
    }
 8013be4:	4618      	mov	r0, r3
 8013be6:	371c      	adds	r7, #28
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd90      	pop	{r4, r7, pc}

08013bec <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	683a      	ldr	r2, [r7, #0]
 8013bfa:	601a      	str	r2, [r3, #0]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	370c      	adds	r7, #12
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr

08013c0a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b082      	sub	sp, #8
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f7f8 fd69 	bl	800c6ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2101      	movs	r1, #1
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f000 fb67 	bl	80142f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 8013c22:	4603      	mov	r3, r0
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8013c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c30:	b086      	sub	sp, #24
 8013c32:	af02      	add	r7, sp, #8
 8013c34:	60f8      	str	r0, [r7, #12]
 8013c36:	60b9      	str	r1, [r7, #8]
 8013c38:	607a      	str	r2, [r7, #4]
 8013c3a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	4619      	mov	r1, r3
 8013c40:	2018      	movs	r0, #24
 8013c42:	f7ec fb75 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7f8 fd4f 	bl	800c6ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	68b8      	ldr	r0, [r7, #8]
 8013c50:	f7f1 fc2a 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8013c54:	4605      	mov	r5, r0
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7ed fb05 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	6838      	ldr	r0, [r7, #0]
 8013c60:	f7ff fa1d 	bl	801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013c64:	4680      	mov	r8, r0
 8013c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c68:	f7ed fb13 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4643      	mov	r3, r8
 8013c72:	4632      	mov	r2, r6
 8013c74:	4629      	mov	r1, r5
 8013c76:	4620      	mov	r0, r4
 8013c78:	f000 fb97 	bl	80143aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8013c7c:	bf00      	nop
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c86 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b084      	sub	sp, #16
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	f107 030c 	add.w	r3, r7, #12
 8013c96:	4611      	mov	r1, r2
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7f1 fda4 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	695b      	ldr	r3, [r3, #20]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8013cc0:	b480      	push	{r7}
 8013cc2:	b083      	sub	sp, #12
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	3310      	adds	r3, #16
 8013ccc:	4618      	mov	r0, r3
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7ff fb2d 	bl	8013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013cf0:	b590      	push	{r4, r7, lr}
 8013cf2:	b08b      	sub	sp, #44	; 0x2c
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8013cfc:	68b8      	ldr	r0, [r7, #8]
 8013cfe:	f7f8 fc8d 	bl	800c61c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8013d02:	4603      	mov	r3, r0
 8013d04:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8013d06:	68b8      	ldr	r0, [r7, #8]
 8013d08:	f7ff ff33 	bl	8013b72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8013d10:	2301      	movs	r3, #1
 8013d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d020      	beq.n	8013d5e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8013d20:	68bc      	ldr	r4, [r7, #8]
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7ff fb0b 	bl	8013340 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	6879      	ldr	r1, [r7, #4]
 8013d30:	4620      	mov	r0, r4
 8013d32:	f7fe faf9 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013d36:	4603      	mov	r3, r0
 8013d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8013d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d005      	beq.n	8013d50 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f8 fc8b 	bl	800c662 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	e004      	b.n	8013d5a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7f8 fc79 	bl	800c64a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8013d5c:	e7db      	b.n	8013d16 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8013d5e:	697a      	ldr	r2, [r7, #20]
 8013d60:	f107 0310 	add.w	r3, r7, #16
 8013d64:	4611      	mov	r1, r2
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7f1 fd3d 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8013d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d01d      	beq.n	8013db0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8013d74:	68b8      	ldr	r0, [r7, #8]
 8013d76:	f7f1 fb75 	bl	8005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	61fb      	str	r3, [r7, #28]
 8013d7e:	f107 021c 	add.w	r2, r7, #28
 8013d82:	f107 0310 	add.w	r3, r7, #16
 8013d86:	4611      	mov	r1, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f1 fa0d 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d008      	beq.n	8013da6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8013d94:	f107 0214 	add.w	r2, r7, #20
 8013d98:	f107 0318 	add.w	r3, r7, #24
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	68f8      	ldr	r0, [r7, #12]
 8013da0:	f000 fb1f 	bl	80143e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013da4:	e025      	b.n	8013df2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8013da6:	f107 0310 	add.w	r3, r7, #16
 8013daa:	4618      	mov	r0, r3
 8013dac:	f000 f831 	bl	8013e12 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8013db0:	68bc      	ldr	r4, [r7, #8]
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7ff ff8f 	bl	8013cd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f7fe fab1 	bl	8012328 <_ZNKSt4lessItEclERKtS2_>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d008      	beq.n	8013dde <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8013dcc:	f107 0214 	add.w	r2, r7, #20
 8013dd0:	f107 0318 	add.w	r3, r7, #24
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f000 fb03 	bl	80143e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013ddc:	e009      	b.n	8013df2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8013dde:	2300      	movs	r3, #0
 8013de0:	623b      	str	r3, [r7, #32]
 8013de2:	f107 0220 	add.w	r2, r7, #32
 8013de6:	f107 0310 	add.w	r3, r7, #16
 8013dea:	4619      	mov	r1, r3
 8013dec:	68f8      	ldr	r0, [r7, #12]
 8013dee:	f7ee f942 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	372c      	adds	r7, #44	; 0x2c
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd90      	pop	{r4, r7, pc}

08013dfa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8013dfa:	b480      	push	{r7}
 8013dfc:	b083      	sub	sp, #12
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	330c      	adds	r3, #12
 8013e06:	4618      	mov	r0, r3
 8013e08:	370c      	adds	r7, #12
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr

08013e12 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b082      	sub	sp, #8
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f00d f9ba 	bl	8021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8013e24:	4602      	mov	r2, r0
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	601a      	str	r2, [r3, #0]
	return *this;
 8013e2a:	687b      	ldr	r3, [r7, #4]
      }
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3310      	adds	r3, #16
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fae7 	bl	8014414 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 8013e46:	4603      	mov	r3, r0
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7f9 fce6 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8013e76:	4603      	mov	r3, r0
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3708      	adds	r7, #8
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7f9 fcda 	bl	800d842 <_ZNSt9_Any_data9_M_accessEv>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	4618      	mov	r0, r3
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013e98:	b480      	push	{r7}
 8013e9a:	b083      	sub	sp, #12
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013ea0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	370c      	adds	r7, #12
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eae:	4770      	bx	lr

08013eb0 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013eb8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013ebc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7ff ffea 	bl	8013e98 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013ec8:	f107 0208 	add.w	r2, r7, #8
 8013ecc:	f107 030c 	add.w	r3, r7, #12
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ee ff87 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	681b      	ldr	r3, [r3, #0]
      }
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr

08013efa <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013efa:	b5b0      	push	{r4, r5, r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	60f8      	str	r0, [r7, #12]
 8013f02:	60b9      	str	r1, [r7, #8]
 8013f04:	607a      	str	r2, [r7, #4]
 8013f06:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013f08:	68f8      	ldr	r0, [r7, #12]
 8013f0a:	f000 faae 	bl	801446a <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013f0e:	4604      	mov	r4, r0
 8013f10:	68b8      	ldr	r0, [r7, #8]
 8013f12:	f000 faaa 	bl	801446a <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013f16:	4605      	mov	r5, r0
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f000 faa6 	bl	801446a <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	4629      	mov	r1, r5
 8013f24:	4620      	mov	r0, r4
 8013f26:	f000 faab 	bl	8014480 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013f2a:	4603      	mov	r3, r0
    }
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3710      	adds	r7, #16
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bdb0      	pop	{r4, r5, r7, pc}

08013f34 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013f3e:	687c      	ldr	r4, [r7, #4]
 8013f40:	6838      	ldr	r0, [r7, #0]
 8013f42:	f000 fabb 	bl	80144bc <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013f46:	4603      	mov	r3, r0
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f000 fac4 	bl	80144d6 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	4619      	mov	r1, r3
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7ff fbcb 	bl	80136ee <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	370c      	adds	r7, #12
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd90      	pop	{r4, r7, pc}

08013f62 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b084      	sub	sp, #16
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	60f8      	str	r0, [r7, #12]
 8013f6a:	60b9      	str	r1, [r7, #8]
 8013f6c:	607a      	str	r2, [r7, #4]
 8013f6e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013f70:	68b8      	ldr	r0, [r7, #8]
 8013f72:	f000 fabb 	bl	80144ec <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013f76:	4603      	mov	r3, r0
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f000 faac 	bl	80144d6 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013f7e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013f80:	781a      	ldrb	r2, [r3, #0]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	701a      	strb	r2, [r3, #0]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	605a      	str	r2, [r3, #4]
      { }
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}

08013f96 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013f96:	b5b0      	push	{r4, r5, r7, lr}
 8013f98:	b086      	sub	sp, #24
 8013f9a:	af02      	add	r7, sp, #8
 8013f9c:	60f8      	str	r0, [r7, #12]
 8013f9e:	7239      	strb	r1, [r7, #8]
 8013fa0:	607a      	str	r2, [r7, #4]
 8013fa2:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013fa4:	463a      	mov	r2, r7
 8013fa6:	f88d 4000 	strb.w	r4, [sp]
 8013faa:	462b      	mov	r3, r5
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f7ff ffd7 	bl	8013f62 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bdb0      	pop	{r4, r5, r7, pc}

08013fbe <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8013fbe:	b580      	push	{r7, lr}
 8013fc0:	b086      	sub	sp, #24
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	60f8      	str	r0, [r7, #12]
 8013fc6:	60b9      	str	r1, [r7, #8]
 8013fc8:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8013fca:	68ba      	ldr	r2, [r7, #8]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	1ad3      	subs	r3, r2, r3
 8013fd0:	109b      	asrs	r3, r3, #2
 8013fd2:	617b      	str	r3, [r7, #20]
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	dd10      	ble.n	8013ffc <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_+0x3e>
	      *__result = std::move(*__first);
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	f000 fa93 	bl	8014506 <_ZSt4moveIRP13StreamMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	601a      	str	r2, [r3, #0]
	      ++__first;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	3304      	adds	r3, #4
 8013fec:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	617b      	str	r3, [r7, #20]
 8013ffa:	e7eb      	b.n	8013fd4 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_+0x16>
	  return __result;
 8013ffc:	687b      	ldr	r3, [r7, #4]
	}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3718      	adds	r7, #24
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8014006:	b580      	push	{r7, lr}
 8014008:	b086      	sub	sp, #24
 801400a:	af00      	add	r7, sp, #0
 801400c:	60f8      	str	r0, [r7, #12]
 801400e:	60b9      	str	r1, [r7, #8]
 8014010:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8014012:	68ba      	ldr	r2, [r7, #8]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	109b      	asrs	r3, r3, #2
 801401a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d006      	beq.n	8014030 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	461a      	mov	r2, r3
 8014028:	68f9      	ldr	r1, [r7, #12]
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f00d f984 	bl	8021338 <memmove>
	  return __result + _Num;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	009b      	lsls	r3, r3, #2
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	4413      	add	r3, r2
	}
 8014038:	4618      	mov	r0, r3
 801403a:	3718      	adds	r7, #24
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8014048:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801404c:	4618      	mov	r0, r3
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8014060:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8014064:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f7ff ffea 	bl	8014040 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 801406c:	4603      	mov	r3, r0
 801406e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8014070:	f107 0208 	add.w	r2, r7, #8
 8014074:	f107 030c 	add.w	r3, r7, #12
 8014078:	4611      	mov	r1, r2
 801407a:	4618      	mov	r0, r3
 801407c:	f7ee feb3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8014080:	4603      	mov	r3, r0
 8014082:	681b      	ldr	r3, [r3, #0]
      }
 8014084:	4618      	mov	r0, r3
 8014086:	3710      	adds	r7, #16
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	4618      	mov	r0, r3
 8014098:	370c      	adds	r7, #12
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr

080140a2 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80140a2:	b5b0      	push	{r4, r5, r7, lr}
 80140a4:	b084      	sub	sp, #16
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	60f8      	str	r0, [r7, #12]
 80140aa:	60b9      	str	r1, [r7, #8]
 80140ac:	607a      	str	r2, [r7, #4]
 80140ae:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f000 fa52 	bl	801455a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80140b6:	4604      	mov	r4, r0
 80140b8:	68b8      	ldr	r0, [r7, #8]
 80140ba:	f000 fa4e 	bl	801455a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80140be:	4605      	mov	r5, r0
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f000 fa4a 	bl	801455a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80140c6:	4602      	mov	r2, r0
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	4629      	mov	r1, r5
 80140cc:	4620      	mov	r0, r4
 80140ce:	f000 fa4f 	bl	8014570 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80140d2:	4603      	mov	r3, r0
    }
 80140d4:	4618      	mov	r0, r3
 80140d6:	3710      	adds	r7, #16
 80140d8:	46bd      	mov	sp, r7
 80140da:	bdb0      	pop	{r4, r5, r7, pc}

080140dc <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80140e8:	68f8      	ldr	r0, [r7, #12]
 80140ea:	f000 fa5f 	bl	80145ac <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 80140ee:	4602      	mov	r2, r0
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	4293      	cmp	r3, r2
 80140f4:	bf8c      	ite	hi
 80140f6:	2301      	movhi	r3, #1
 80140f8:	2300      	movls	r3, #0
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014100:	f00d f8a7 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4618      	mov	r0, r3
 801410a:	f00c ffdb 	bl	80210c4 <_Znwj>
 801410e:	4603      	mov	r3, r0
 8014110:	bf00      	nop
      }
 8014112:	4618      	mov	r0, r3
 8014114:	3710      	adds	r7, #16
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}

0801411a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 801411a:	b480      	push	{r7}
 801411c:	b083      	sub	sp, #12
 801411e:	af00      	add	r7, sp, #0
 8014120:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr

08014130 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8014130:	b580      	push	{r7, lr}
 8014132:	b086      	sub	sp, #24
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801413e:	68ba      	ldr	r2, [r7, #8]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	1ad3      	subs	r3, r2, r3
 8014144:	109b      	asrs	r3, r3, #2
 8014146:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	2b00      	cmp	r3, #0
 801414c:	dd06      	ble.n	801415c <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	461a      	mov	r2, r3
 8014154:	68f9      	ldr	r1, [r7, #12]
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f00d f8ee 	bl	8021338 <memmove>
      return __result + __count;
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	4413      	add	r3, r2
    }
 8014164:	4618      	mov	r0, r3
 8014166:	3718      	adds	r7, #24
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	4619      	mov	r1, r3
 801417e:	68b8      	ldr	r0, [r7, #8]
 8014180:	f00c ff9e 	bl	80210c0 <_ZdlPvj>
      }
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801418a:	b480      	push	{r7}
 801418c:	b083      	sub	sp, #12
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4618      	mov	r0, r3
 8014196:	370c      	adds	r7, #12
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 fa0b 	bl	80145c4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 80141ae:	bf00      	nop
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80141b6:	b590      	push	{r4, r7, lr}
 80141b8:	b087      	sub	sp, #28
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	60f8      	str	r0, [r7, #12]
 80141be:	60b9      	str	r1, [r7, #8]
 80141c0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f000 fa08 	bl	80145d8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 80141c8:	4604      	mov	r4, r0
 80141ca:	68f8      	ldr	r0, [r7, #12]
 80141cc:	f000 fa15 	bl	80145fa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80141d0:	4603      	mov	r3, r0
 80141d2:	1ae2      	subs	r2, r4, r3
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	bf34      	ite	cc
 80141da:	2301      	movcc	r3, #1
 80141dc:	2300      	movcs	r3, #0
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d002      	beq.n	80141ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f00d f837 	bl	8021258 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80141ea:	68f8      	ldr	r0, [r7, #12]
 80141ec:	f000 fa05 	bl	80145fa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80141f0:	4604      	mov	r4, r0
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f000 fa01 	bl	80145fa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80141f8:	4603      	mov	r3, r0
 80141fa:	613b      	str	r3, [r7, #16]
 80141fc:	f107 0208 	add.w	r2, r7, #8
 8014200:	f107 0310 	add.w	r3, r7, #16
 8014204:	4611      	mov	r1, r2
 8014206:	4618      	mov	r0, r3
 8014208:	f7ee fb23 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801420c:	4603      	mov	r3, r0
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4423      	add	r3, r4
 8014212:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f000 f9f0 	bl	80145fa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 801421a:	4602      	mov	r2, r0
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	4293      	cmp	r3, r2
 8014220:	d306      	bcc.n	8014230 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8014222:	68f8      	ldr	r0, [r7, #12]
 8014224:	f000 f9d8 	bl	80145d8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8014228:	4602      	mov	r2, r0
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	4293      	cmp	r3, r2
 801422e:	d904      	bls.n	801423a <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	f000 f9d1 	bl	80145d8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8014236:	4603      	mov	r3, r0
 8014238:	e000      	b.n	801423c <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 801423a:	697b      	ldr	r3, [r7, #20]
      }
 801423c:	4618      	mov	r0, r3
 801423e:	371c      	adds	r7, #28
 8014240:	46bd      	mov	sp, r7
 8014242:	bd90      	pop	{r4, r7, pc}

08014244 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014244:	b590      	push	{r4, r7, lr}
 8014246:	b083      	sub	sp, #12
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7f0 fbcf 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8014254:	4603      	mov	r3, r0
 8014256:	681c      	ldr	r4, [r3, #0]
 8014258:	6838      	ldr	r0, [r7, #0]
 801425a:	f7f0 fbca 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 801425e:	4603      	mov	r3, r0
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	1ae3      	subs	r3, r4, r3
 8014264:	109b      	asrs	r3, r3, #2
 8014266:	4618      	mov	r0, r3
 8014268:	370c      	adds	r7, #12
 801426a:	46bd      	mov	sp, r7
 801426c:	bd90      	pop	{r4, r7, pc}

0801426e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801426e:	b580      	push	{r7, lr}
 8014270:	b082      	sub	sp, #8
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
 8014276:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d006      	beq.n	801428c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	4618      	mov	r0, r3
 8014284:	f000 f9c9 	bl	801461a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 8014288:	4603      	mov	r3, r0
 801428a:	e000      	b.n	801428e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 801428c:	2300      	movs	r3, #0
      }
 801428e:	4618      	mov	r0, r3
 8014290:	3708      	adds	r7, #8
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}

08014296 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014296:	b590      	push	{r4, r7, lr}
 8014298:	b087      	sub	sp, #28
 801429a:	af02      	add	r7, sp, #8
 801429c:	60f8      	str	r0, [r7, #12]
 801429e:	60b9      	str	r1, [r7, #8]
 80142a0:	607a      	str	r2, [r7, #4]
 80142a2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80142a4:	f88d 4000 	strb.w	r4, [sp]
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	68b9      	ldr	r1, [r7, #8]
 80142ae:	68f8      	ldr	r0, [r7, #12]
 80142b0:	f000 f9d3 	bl	801465a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80142b4:	4603      	mov	r3, r0
      }
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd90      	pop	{r4, r7, pc}

080142be <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80142be:	b580      	push	{r7, lr}
 80142c0:	b084      	sub	sp, #16
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	425b      	negs	r3, r3
 80142d2:	4413      	add	r3, r2
 80142d4:	60fb      	str	r3, [r7, #12]
 80142d6:	f107 020c 	add.w	r2, r7, #12
 80142da:	f107 0308 	add.w	r3, r7, #8
 80142de:	4611      	mov	r1, r2
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f1 f8af 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	4618      	mov	r0, r3
 80142ea:	3710      	adds	r7, #16
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	60fb      	str	r3, [r7, #12]
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8014302:	f7ec f80d 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d009      	beq.n	8014320 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	4613      	mov	r3, r2
 8014310:	005b      	lsls	r3, r3, #1
 8014312:	4413      	add	r3, r2
 8014314:	00db      	lsls	r3, r3, #3
 8014316:	4618      	mov	r0, r3
 8014318:	f00c fed4 	bl	80210c4 <_Znwj>
 801431c:	4603      	mov	r3, r0
 801431e:	e006      	b.n	801432e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8014320:	2200      	movs	r2, #0
 8014322:	68b9      	ldr	r1, [r7, #8]
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f000 fa83 	bl	8014830 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 801432a:	4603      	mov	r3, r0
 801432c:	bf00      	nop
      { return __a.allocate(__n); }
 801432e:	4618      	mov	r0, r3
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}

08014336 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8014336:	b580      	push	{r7, lr}
 8014338:	b082      	sub	sp, #8
 801433a:	af00      	add	r7, sp, #0
 801433c:	6078      	str	r0, [r7, #4]
 801433e:	6039      	str	r1, [r7, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	4611      	mov	r1, r2
 8014346:	4618      	mov	r0, r3
 8014348:	f000 f999 	bl	801467e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	4618      	mov	r0, r3
 8014350:	3708      	adds	r7, #8
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8014356:	b5b0      	push	{r4, r5, r7, lr}
 8014358:	b088      	sub	sp, #32
 801435a:	af00      	add	r7, sp, #0
 801435c:	60f8      	str	r0, [r7, #12]
 801435e:	60b9      	str	r1, [r7, #8]
 8014360:	607a      	str	r2, [r7, #4]
 8014362:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8014364:	68b8      	ldr	r0, [r7, #8]
 8014366:	f7ec ff7e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7fe fe97 	bl	801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014370:	4602      	mov	r2, r0
 8014372:	f107 0318 	add.w	r3, r7, #24
 8014376:	4611      	mov	r1, r2
 8014378:	4618      	mov	r0, r3
 801437a:	f7ff ffdc 	bl	8014336 <_ZNSt5tupleIJRKtEEC1EOS2_>
 801437e:	f107 0418 	add.w	r4, r7, #24
 8014382:	6838      	ldr	r0, [r7, #0]
 8014384:	f7ec ff85 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4619      	mov	r1, r3
 801438c:	2008      	movs	r0, #8
 801438e:	f7eb ffcf 	bl	8000330 <_ZnwjPv>
 8014392:	4605      	mov	r5, r0
 8014394:	7f3b      	ldrb	r3, [r7, #28]
 8014396:	4622      	mov	r2, r4
 8014398:	7d39      	ldrb	r1, [r7, #20]
 801439a:	4628      	mov	r0, r5
 801439c:	f000 f9a0 	bl	80146e0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80143a0:	462b      	mov	r3, r5
 80143a2:	4618      	mov	r0, r3
 80143a4:	3720      	adds	r7, #32
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bdb0      	pop	{r4, r5, r7, pc}

080143aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80143aa:	b5b0      	push	{r4, r5, r7, lr}
 80143ac:	b084      	sub	sp, #16
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	60f8      	str	r0, [r7, #12]
 80143b2:	60b9      	str	r1, [r7, #8]
 80143b4:	607a      	str	r2, [r7, #4]
 80143b6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7ec ff54 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80143be:	4604      	mov	r4, r0
 80143c0:	6838      	ldr	r0, [r7, #0]
 80143c2:	f7fe fe6c 	bl	801309e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80143c6:	4605      	mov	r5, r0
 80143c8:	6a38      	ldr	r0, [r7, #32]
 80143ca:	f7ec ff62 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80143ce:	4603      	mov	r3, r0
 80143d0:	462a      	mov	r2, r5
 80143d2:	4621      	mov	r1, r4
 80143d4:	68b8      	ldr	r0, [r7, #8]
 80143d6:	f7ff ffbe 	bl	8014356 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 80143da:	bf00      	nop
 80143dc:	3710      	adds	r7, #16
 80143de:	46bd      	mov	sp, r7
 80143e0:	bdb0      	pop	{r4, r5, r7, pc}

080143e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80143e2:	b580      	push	{r7, lr}
 80143e4:	b084      	sub	sp, #16
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	60f8      	str	r0, [r7, #12]
 80143ea:	60b9      	str	r1, [r7, #8]
 80143ec:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80143ee:	68b8      	ldr	r0, [r7, #8]
 80143f0:	f000 f98a 	bl	8014708 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80143f4:	4603      	mov	r3, r0
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	601a      	str	r2, [r3, #0]
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ee f9d6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014402:	4603      	mov	r3, r0
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	605a      	str	r2, [r3, #4]
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	4618      	mov	r0, r3
 801440e:	3710      	adds	r7, #16
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f97e 	bl	801471e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8014422:	4603      	mov	r3, r0
 8014424:	4618      	mov	r0, r3
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8014438:	68f8      	ldr	r0, [r7, #12]
 801443a:	f000 f97b 	bl	8014734 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 801443e:	4602      	mov	r2, r0
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	4293      	cmp	r3, r2
 8014444:	bf8c      	ite	hi
 8014446:	2301      	movhi	r3, #1
 8014448:	2300      	movls	r3, #0
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b00      	cmp	r3, #0
 801444e:	d001      	beq.n	8014454 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014450:	f00c feff 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4618      	mov	r0, r3
 801445a:	f00c fe33 	bl	80210c4 <_Znwj>
 801445e:	4603      	mov	r3, r0
 8014460:	bf00      	nop
      }
 8014462:	4618      	mov	r0, r3
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}

0801446a <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 801446a:	b480      	push	{r7}
 801446c:	b083      	sub	sp, #12
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4618      	mov	r0, r3
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	607a      	str	r2, [r7, #4]
 801448c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	109b      	asrs	r3, r3, #2
 8014496:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	2b00      	cmp	r3, #0
 801449c:	dd06      	ble.n	80144ac <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	461a      	mov	r2, r3
 80144a4:	68f9      	ldr	r1, [r7, #12]
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f00c ff46 	bl	8021338 <memmove>
      return __result + __count;
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	4413      	add	r3, r2
    }
 80144b4:	4618      	mov	r0, r3
 80144b6:	3718      	adds	r7, #24
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}

080144bc <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 f940 	bl	801474c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 80144cc:	4603      	mov	r3, r0
 80144ce:	4618      	mov	r0, r3
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80144d6:	b480      	push	{r7}
 80144d8:	b083      	sub	sp, #12
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4618      	mov	r0, r3
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 f934 	bl	8014764 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80144fc:	4603      	mov	r3, r0
 80144fe:	4618      	mov	r0, r3
 8014500:	3708      	adds	r7, #8
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}

08014506 <_ZSt4moveIRP13StreamMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8014506:	b480      	push	{r7}
 8014508:	b083      	sub	sp, #12
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	4618      	mov	r0, r3
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8014528:	68f8      	ldr	r0, [r7, #12]
 801452a:	f000 f927 	bl	801477c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 801452e:	4602      	mov	r2, r0
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	4293      	cmp	r3, r2
 8014534:	bf8c      	ite	hi
 8014536:	2301      	movhi	r3, #1
 8014538:	2300      	movls	r3, #0
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014540:	f00c fe87 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	4618      	mov	r0, r3
 801454a:	f00c fdbb 	bl	80210c4 <_Znwj>
 801454e:	4603      	mov	r3, r0
 8014550:	bf00      	nop
      }
 8014552:	4618      	mov	r0, r3
 8014554:	3710      	adds	r7, #16
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}

0801455a <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 801455a:	b480      	push	{r7}
 801455c:	b083      	sub	sp, #12
 801455e:	af00      	add	r7, sp, #0
 8014560:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	4618      	mov	r0, r3
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
 801457c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801457e:	68ba      	ldr	r2, [r7, #8]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	109b      	asrs	r3, r3, #2
 8014586:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	2b00      	cmp	r3, #0
 801458c:	dd06      	ble.n	801459c <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	461a      	mov	r2, r3
 8014594:	68f9      	ldr	r1, [r7, #12]
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f00c fece 	bl	8021338 <memmove>
      return __result + __count;
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	4413      	add	r3, r2
    }
 80145a4:	4618      	mov	r0, r3
 80145a6:	3718      	adds	r7, #24
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80145ac:	b480      	push	{r7}
 80145ae:	b083      	sub	sp, #12
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80145b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 80145c4:	b480      	push	{r7}
 80145c6:	b083      	sub	sp, #12
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    }
 80145cc:	bf00      	nop
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr

080145d8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	4618      	mov	r0, r3
 80145e4:	f000 f8fc 	bl	80147e0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80145e8:	4603      	mov	r3, r0
 80145ea:	4618      	mov	r0, r3
 80145ec:	f000 f8de 	bl	80147ac <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 80145f0:	4603      	mov	r3, r0
 80145f2:	4618      	mov	r0, r3
 80145f4:	3708      	adds	r7, #8
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}

080145fa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80145fa:	b480      	push	{r7}
 80145fc:	b083      	sub	sp, #12
 80145fe:	af00      	add	r7, sp, #0
 8014600:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	685a      	ldr	r2, [r3, #4]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	1ad3      	subs	r3, r2, r3
 801460c:	109b      	asrs	r3, r3, #2
 801460e:	4618      	mov	r0, r3
 8014610:	370c      	adds	r7, #12
 8014612:	46bd      	mov	sp, r7
 8014614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014618:	4770      	bx	lr

0801461a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 801461a:	b580      	push	{r7, lr}
 801461c:	b084      	sub	sp, #16
 801461e:	af00      	add	r7, sp, #0
 8014620:	6078      	str	r0, [r7, #4]
 8014622:	6039      	str	r1, [r7, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	60fb      	str	r3, [r7, #12]
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801462c:	f7eb fe78 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d006      	beq.n	8014644 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4618      	mov	r0, r3
 801463c:	f00c fd42 	bl	80210c4 <_Znwj>
 8014640:	4603      	mov	r3, r0
 8014642:	e006      	b.n	8014652 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8014644:	2200      	movs	r2, #0
 8014646:	68b9      	ldr	r1, [r7, #8]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f000 f938 	bl	80148be <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 801464e:	4603      	mov	r3, r0
 8014650:	bf00      	nop
      { return __a.allocate(__n); }
 8014652:	4618      	mov	r0, r3
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801465a:	b580      	push	{r7, lr}
 801465c:	b084      	sub	sp, #16
 801465e:	af00      	add	r7, sp, #0
 8014660:	60f8      	str	r0, [r7, #12]
 8014662:	60b9      	str	r1, [r7, #8]
 8014664:	607a      	str	r2, [r7, #4]
 8014666:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	68b9      	ldr	r1, [r7, #8]
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f000 f8c1 	bl	80147f6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8014674:	4603      	mov	r3, r0
      }
 8014676:	4618      	mov	r0, r3
 8014678:	3710      	adds	r7, #16
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}

0801467e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801467e:	b590      	push	{r4, r7, lr}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
 8014686:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8014688:	687c      	ldr	r4, [r7, #4]
 801468a:	6838      	ldr	r0, [r7, #0]
 801468c:	f000 f8f2 	bl	8014874 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8014690:	4603      	mov	r3, r0
 8014692:	4618      	mov	r0, r3
 8014694:	f000 f8fb 	bl	801488e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8014698:	4603      	mov	r3, r0
 801469a:	4619      	mov	r1, r3
 801469c:	4620      	mov	r0, r4
 801469e:	f7ff faa5 	bl	8013bec <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd90      	pop	{r4, r7, pc}

080146ac <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
 80146b8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80146ba:	68b8      	ldr	r0, [r7, #8]
 80146bc:	f000 f8f2 	bl	80148a4 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80146c0:	4603      	mov	r3, r0
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 f8e3 	bl	801488e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80146c8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80146ca:	881a      	ldrh	r2, [r3, #0]
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	801a      	strh	r2, [r3, #0]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2200      	movs	r2, #0
 80146d4:	605a      	str	r2, [r3, #4]
      { }
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	4618      	mov	r0, r3
 80146da:	3710      	adds	r7, #16
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 80146e0:	b5b0      	push	{r4, r5, r7, lr}
 80146e2:	b086      	sub	sp, #24
 80146e4:	af02      	add	r7, sp, #8
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	7239      	strb	r1, [r7, #8]
 80146ea:	607a      	str	r2, [r7, #4]
 80146ec:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80146ee:	463a      	mov	r2, r7
 80146f0:	f88d 4000 	strb.w	r4, [sp]
 80146f4:	462b      	mov	r3, r5
 80146f6:	6879      	ldr	r1, [r7, #4]
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f7ff ffd7 	bl	80146ac <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	4618      	mov	r0, r3
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bdb0      	pop	{r4, r5, r7, pc}

08014708 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	4618      	mov	r0, r3
 8014714:	370c      	adds	r7, #12
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr

0801471e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 801471e:	b480      	push	{r7}
 8014720:	b083      	sub	sp, #12
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4618      	mov	r0, r3
 801472a:	370c      	adds	r7, #12
 801472c:	46bd      	mov	sp, r7
 801472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014732:	4770      	bx	lr

08014734 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801473c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014740:	4618      	mov	r0, r3
 8014742:	370c      	adds	r7, #12
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr

0801474c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801474c:	b480      	push	{r7}
 801474e:	b083      	sub	sp, #12
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	4618      	mov	r0, r3
 801475a:	370c      	adds	r7, #12
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f7ff fea5 	bl	80144bc <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8014772:	4603      	mov	r3, r0
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801477c:	b480      	push	{r7}
 801477e:	b083      	sub	sp, #12
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014784:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801479c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80147a0:	4618      	mov	r0, r3
 80147a2:	370c      	adds	r7, #12
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80147b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80147b8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f7ff ffea 	bl	8014794 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 80147c0:	4603      	mov	r3, r0
 80147c2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80147c4:	f107 0208 	add.w	r2, r7, #8
 80147c8:	f107 030c 	add.w	r3, r7, #12
 80147cc:	4611      	mov	r1, r2
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7ee fb09 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80147d4:	4603      	mov	r3, r0
 80147d6:	681b      	ldr	r3, [r3, #0]
      }
 80147d8:	4618      	mov	r0, r3
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	4618      	mov	r0, r3
 80147ec:	370c      	adds	r7, #12
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80147f6:	b5b0      	push	{r4, r5, r7, lr}
 80147f8:	b084      	sub	sp, #16
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	60f8      	str	r0, [r7, #12]
 80147fe:	60b9      	str	r1, [r7, #8]
 8014800:	607a      	str	r2, [r7, #4]
 8014802:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f000 f879 	bl	80148fc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 801480a:	4604      	mov	r4, r0
 801480c:	68b8      	ldr	r0, [r7, #8]
 801480e:	f000 f875 	bl	80148fc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8014812:	4605      	mov	r5, r0
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 f871 	bl	80148fc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 801481a:	4602      	mov	r2, r0
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	4629      	mov	r1, r5
 8014820:	4620      	mov	r0, r4
 8014822:	f000 f876 	bl	8014912 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8014826:	4603      	mov	r3, r0
    }
 8014828:	4618      	mov	r0, r3
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bdb0      	pop	{r4, r5, r7, pc}

08014830 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f000 f887 	bl	8014950 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8014842:	4602      	mov	r2, r0
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	4293      	cmp	r3, r2
 8014848:	bf8c      	ite	hi
 801484a:	2301      	movhi	r3, #1
 801484c:	2300      	movls	r3, #0
 801484e:	b2db      	uxtb	r3, r3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d001      	beq.n	8014858 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014854:	f00c fcfd 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	4613      	mov	r3, r2
 801485c:	005b      	lsls	r3, r3, #1
 801485e:	4413      	add	r3, r2
 8014860:	00db      	lsls	r3, r3, #3
 8014862:	4618      	mov	r0, r3
 8014864:	f00c fc2e 	bl	80210c4 <_Znwj>
 8014868:	4603      	mov	r3, r0
 801486a:	bf00      	nop
      }
 801486c:	4618      	mov	r0, r3
 801486e:	3710      	adds	r7, #16
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4618      	mov	r0, r3
 8014880:	f000 f874 	bl	801496c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8014884:	4603      	mov	r3, r0
 8014886:	4618      	mov	r0, r3
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}

0801488e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801488e:	b480      	push	{r7}
 8014890:	b083      	sub	sp, #12
 8014892:	af00      	add	r7, sp, #0
 8014894:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	4618      	mov	r0, r3
 801489a:	370c      	adds	r7, #12
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	4618      	mov	r0, r3
 80148b0:	f000 f868 	bl	8014984 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80148b4:	4603      	mov	r3, r0
 80148b6:	4618      	mov	r0, r3
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}

080148be <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80148be:	b580      	push	{r7, lr}
 80148c0:	b084      	sub	sp, #16
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	60f8      	str	r0, [r7, #12]
 80148c6:	60b9      	str	r1, [r7, #8]
 80148c8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	f000 f866 	bl	801499c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 80148d0:	4602      	mov	r2, r0
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	4293      	cmp	r3, r2
 80148d6:	bf8c      	ite	hi
 80148d8:	2301      	movhi	r3, #1
 80148da:	2300      	movls	r3, #0
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80148e2:	f00c fcb6 	bl	8021252 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	4618      	mov	r0, r3
 80148ec:	f00c fbea 	bl	80210c4 <_Znwj>
 80148f0:	4603      	mov	r3, r0
 80148f2:	bf00      	nop
      }
 80148f4:	4618      	mov	r0, r3
 80148f6:	3710      	adds	r7, #16
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 80148fc:	b480      	push	{r7}
 80148fe:	b083      	sub	sp, #12
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8014912:	b580      	push	{r7, lr}
 8014914:	b086      	sub	sp, #24
 8014916:	af00      	add	r7, sp, #0
 8014918:	60f8      	str	r0, [r7, #12]
 801491a:	60b9      	str	r1, [r7, #8]
 801491c:	607a      	str	r2, [r7, #4]
 801491e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	109b      	asrs	r3, r3, #2
 8014928:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	2b00      	cmp	r3, #0
 801492e:	dd06      	ble.n	801493e <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	461a      	mov	r2, r3
 8014936:	68f9      	ldr	r1, [r7, #12]
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f00c fcfd 	bl	8021338 <memmove>
      return __result + __count;
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	4413      	add	r3, r2
    }
 8014946:	4618      	mov	r0, r3
 8014948:	3718      	adds	r7, #24
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
	...

08014950 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014950:	b480      	push	{r7}
 8014952:	b083      	sub	sp, #12
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014958:	4b03      	ldr	r3, [pc, #12]	; (8014968 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 801495a:	4618      	mov	r0, r3
 801495c:	370c      	adds	r7, #12
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	05555555 	.word	0x05555555

0801496c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4618      	mov	r0, r3
 801497a:	370c      	adds	r7, #12
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr

08014984 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7ff ff71 	bl	8014874 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8014992:	4603      	mov	r3, r0
 8014994:	4618      	mov	r0, r3
 8014996:	3708      	adds	r7, #8
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80149a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80149a8:	4618      	mov	r0, r3
 80149aa:	370c      	adds	r7, #12
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <_ZN6StreamD1Ev>:
class Stream {
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	3308      	adds	r3, #8
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fb fd63 	bl	801048c <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <_ZN6PacketD1Ev>:
class Packet {
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	3308      	adds	r3, #8
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fc fbb6 	bl	801114e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	4618      	mov	r0, r3
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <_ZN5TimerD1Ev>:
class Timer {
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	3308      	adds	r3, #8
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7f8 ffc5 	bl	800d988 <_ZNSt8functionIFvvEED1Ev>
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	4618      	mov	r0, r3
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	f040 828c 	bne.w	8014f32 <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a20:	4293      	cmp	r3, r2
 8014a22:	f040 8286 	bne.w	8014f32 <_Z41__static_initialization_and_destruction_0ii+0x52a>
InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
 8014a26:	4bad      	ldr	r3, [pc, #692]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8014a28:	2204      	movs	r2, #4
 8014a2a:	49ad      	ldr	r1, [pc, #692]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014a2c:	48ad      	ldr	r0, [pc, #692]	; (8014ce4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8014a2e:	f7f4 fd33 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
 8014a32:	4bad      	ldr	r3, [pc, #692]	; (8014ce8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8014a34:	2200      	movs	r2, #0
 8014a36:	49aa      	ldr	r1, [pc, #680]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014a38:	48ac      	ldr	r0, [pc, #688]	; (8014cec <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8014a3a:	f7f4 fd2d 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
 8014a3e:	4bac      	ldr	r3, [pc, #688]	; (8014cf0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8014a40:	2208      	movs	r2, #8
 8014a42:	49ac      	ldr	r1, [pc, #688]	; (8014cf4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014a44:	48ac      	ldr	r0, [pc, #688]	; (8014cf8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8014a46:	f7f4 fd27 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
 8014a4a:	4bac      	ldr	r3, [pc, #688]	; (8014cfc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8014a4c:	220c      	movs	r2, #12
 8014a4e:	49a9      	ldr	r1, [pc, #676]	; (8014cf4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014a50:	48ab      	ldr	r0, [pc, #684]	; (8014d00 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8014a52:	f7f4 fd21 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 8014a56:	4bab      	ldr	r3, [pc, #684]	; (8014d04 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8014a58:	2200      	movs	r2, #0
 8014a5a:	49a6      	ldr	r1, [pc, #664]	; (8014cf4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014a5c:	48aa      	ldr	r0, [pc, #680]	; (8014d08 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8014a5e:	f7f4 fd1b 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
 8014a62:	4baa      	ldr	r3, [pc, #680]	; (8014d0c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8014a64:	2204      	movs	r2, #4
 8014a66:	49a3      	ldr	r1, [pc, #652]	; (8014cf4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014a68:	48a9      	ldr	r0, [pc, #676]	; (8014d10 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8014a6a:	f7f4 fd15 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
 8014a6e:	4ba9      	ldr	r3, [pc, #676]	; (8014d14 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8014a70:	2208      	movs	r2, #8
 8014a72:	499b      	ldr	r1, [pc, #620]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014a74:	48a8      	ldr	r0, [pc, #672]	; (8014d18 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8014a76:	f7f4 fd0f 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
 8014a7a:	4ba8      	ldr	r3, [pc, #672]	; (8014d1c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8014a7c:	220c      	movs	r2, #12
 8014a7e:	4998      	ldr	r1, [pc, #608]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014a80:	48a7      	ldr	r0, [pc, #668]	; (8014d20 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8014a82:	f7f4 fd09 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
 8014a86:	4ba7      	ldr	r3, [pc, #668]	; (8014d24 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8014a88:	2200      	movs	r2, #0
 8014a8a:	49a7      	ldr	r1, [pc, #668]	; (8014d28 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014a8c:	48a7      	ldr	r0, [pc, #668]	; (8014d2c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014a8e:	f7f4 fd03 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8014a92:	4ba7      	ldr	r3, [pc, #668]	; (8014d30 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8014a94:	2200      	movs	r2, #0
 8014a96:	49a7      	ldr	r1, [pc, #668]	; (8014d34 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8014a98:	48a7      	ldr	r0, [pc, #668]	; (8014d38 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8014a9a:	f7f4 fcfd 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
 8014a9e:	4ba7      	ldr	r3, [pc, #668]	; (8014d3c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8014aa0:	2204      	movs	r2, #4
 8014aa2:	49a4      	ldr	r1, [pc, #656]	; (8014d34 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8014aa4:	48a6      	ldr	r0, [pc, #664]	; (8014d40 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8014aa6:	f7f4 fcf7 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
 8014aaa:	4ba6      	ldr	r3, [pc, #664]	; (8014d44 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8014aac:	2208      	movs	r2, #8
 8014aae:	49a1      	ldr	r1, [pc, #644]	; (8014d34 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8014ab0:	48a5      	ldr	r0, [pc, #660]	; (8014d48 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8014ab2:	f7f4 fcf1 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
 8014ab6:	4ba5      	ldr	r3, [pc, #660]	; (8014d4c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8014ab8:	220c      	movs	r2, #12
 8014aba:	499e      	ldr	r1, [pc, #632]	; (8014d34 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8014abc:	48a4      	ldr	r0, [pc, #656]	; (8014d50 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8014abe:	f7f4 fceb 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
 8014ac2:	4ba4      	ldr	r3, [pc, #656]	; (8014d54 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	49a4      	ldr	r1, [pc, #656]	; (8014d58 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8014ac8:	48a4      	ldr	r0, [pc, #656]	; (8014d5c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8014aca:	f7f4 fce5 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
 8014ace:	4ba4      	ldr	r3, [pc, #656]	; (8014d60 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8014ad0:	2204      	movs	r2, #4
 8014ad2:	49a1      	ldr	r1, [pc, #644]	; (8014d58 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8014ad4:	48a3      	ldr	r0, [pc, #652]	; (8014d64 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8014ad6:	f7f4 fcdf 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
 8014ada:	4ba3      	ldr	r3, [pc, #652]	; (8014d68 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8014adc:	2208      	movs	r2, #8
 8014ade:	499e      	ldr	r1, [pc, #632]	; (8014d58 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8014ae0:	48a2      	ldr	r0, [pc, #648]	; (8014d6c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8014ae2:	f7f4 fcd9 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);
 8014ae6:	4ba2      	ldr	r3, [pc, #648]	; (8014d70 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8014ae8:	220c      	movs	r2, #12
 8014aea:	499b      	ldr	r1, [pc, #620]	; (8014d58 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8014aec:	48a1      	ldr	r0, [pc, #644]	; (8014d74 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8014aee:	f7f4 fcd3 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8014af2:	49a1      	ldr	r1, [pc, #644]	; (8014d78 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8014af4:	48a1      	ldr	r0, [pc, #644]	; (8014d7c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8014af6:	f7f1 fd4f 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8014afa:	49a1      	ldr	r1, [pc, #644]	; (8014d80 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8014afc:	48a1      	ldr	r0, [pc, #644]	; (8014d84 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8014afe:	f7f1 fd4b 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8014b02:	49a1      	ldr	r1, [pc, #644]	; (8014d88 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8014b04:	48a1      	ldr	r0, [pc, #644]	; (8014d8c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8014b06:	f7f1 fd47 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8014b0a:	4ba1      	ldr	r3, [pc, #644]	; (8014d90 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8014b0c:	4aa1      	ldr	r2, [pc, #644]	; (8014d94 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8014b0e:	49a2      	ldr	r1, [pc, #648]	; (8014d98 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8014b10:	48a2      	ldr	r0, [pc, #648]	; (8014d9c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8014b12:	f7eb fceb 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8014b16:	4ba2      	ldr	r3, [pc, #648]	; (8014da0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8014b18:	2204      	movs	r2, #4
 8014b1a:	49a2      	ldr	r1, [pc, #648]	; (8014da4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014b1c:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b20:	48a2      	ldr	r0, [pc, #648]	; (8014dac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8014b22:	f7ee fb35 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8014b26:	4ba2      	ldr	r3, [pc, #648]	; (8014db0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8014b28:	2200      	movs	r2, #0
 8014b2a:	499e      	ldr	r1, [pc, #632]	; (8014da4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014b2c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b30:	48a0      	ldr	r0, [pc, #640]	; (8014db4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8014b32:	f7ee fb2d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8014b36:	4ba0      	ldr	r3, [pc, #640]	; (8014db8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8014b38:	2200      	movs	r2, #0
 8014b3a:	49a0      	ldr	r1, [pc, #640]	; (8014dbc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014b3c:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b40:	489f      	ldr	r0, [pc, #636]	; (8014dc0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8014b42:	f7ee fb25 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8014b46:	4b9f      	ldr	r3, [pc, #636]	; (8014dc4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8014b48:	2208      	movs	r2, #8
 8014b4a:	499c      	ldr	r1, [pc, #624]	; (8014dbc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014b4c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b50:	489d      	ldr	r0, [pc, #628]	; (8014dc8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8014b52:	f7ee fb1d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8014b56:	4b9d      	ldr	r3, [pc, #628]	; (8014dcc <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8014b58:	220c      	movs	r2, #12
 8014b5a:	4998      	ldr	r1, [pc, #608]	; (8014dbc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014b5c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b60:	489b      	ldr	r0, [pc, #620]	; (8014dd0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8014b62:	f7ee fb15 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8014b66:	4b9b      	ldr	r3, [pc, #620]	; (8014dd4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8014b68:	2204      	movs	r2, #4
 8014b6a:	496f      	ldr	r1, [pc, #444]	; (8014d28 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014b6c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b70:	4899      	ldr	r0, [pc, #612]	; (8014dd8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8014b72:	f7ee fb0d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 8014b76:	4b6b      	ldr	r3, [pc, #428]	; (8014d24 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8014b78:	2200      	movs	r2, #0
 8014b7a:	496b      	ldr	r1, [pc, #428]	; (8014d28 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014b7c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b80:	4896      	ldr	r0, [pc, #600]	; (8014ddc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8014b82:	f7ee fb05 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 8014b86:	4b96      	ldr	r3, [pc, #600]	; (8014de0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8014b88:	2208      	movs	r2, #8
 8014b8a:	4967      	ldr	r1, [pc, #412]	; (8014d28 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014b8c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014b90:	4894      	ldr	r0, [pc, #592]	; (8014de4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8014b92:	f7ee fafd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 8014b96:	4b94      	ldr	r3, [pc, #592]	; (8014de8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8014b98:	220c      	movs	r2, #12
 8014b9a:	4963      	ldr	r1, [pc, #396]	; (8014d28 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014b9c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014ba0:	4892      	ldr	r0, [pc, #584]	; (8014dec <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8014ba2:	f7ee faf5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 8014ba6:	4b92      	ldr	r3, [pc, #584]	; (8014df0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8014ba8:	2208      	movs	r2, #8
 8014baa:	497e      	ldr	r1, [pc, #504]	; (8014da4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014bac:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014bb0:	4890      	ldr	r0, [pc, #576]	; (8014df4 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8014bb2:	f7ee faed 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 8014bb6:	4b90      	ldr	r3, [pc, #576]	; (8014df8 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8014bb8:	2208      	movs	r2, #8
 8014bba:	4990      	ldr	r1, [pc, #576]	; (8014dfc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8014bbc:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014bc0:	488f      	ldr	r0, [pc, #572]	; (8014e00 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8014bc2:	f7ee fae5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 8014bc6:	4b8f      	ldr	r3, [pc, #572]	; (8014e04 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8014bc8:	2204      	movs	r2, #4
 8014bca:	498c      	ldr	r1, [pc, #560]	; (8014dfc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8014bcc:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014bd0:	488d      	ldr	r0, [pc, #564]	; (8014e08 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8014bd2:	f7ee fadd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 8014bd6:	4b8d      	ldr	r3, [pc, #564]	; (8014e0c <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	498d      	ldr	r1, [pc, #564]	; (8014e10 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8014bdc:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014be0:	488c      	ldr	r0, [pc, #560]	; (8014e14 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8014be2:	f7ee fad5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 8014be6:	4b8c      	ldr	r3, [pc, #560]	; (8014e18 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8014be8:	220c      	movs	r2, #12
 8014bea:	4984      	ldr	r1, [pc, #528]	; (8014dfc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8014bec:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014bf0:	488a      	ldr	r0, [pc, #552]	; (8014e1c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8014bf2:	f7ee facd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 8014bf6:	4b8a      	ldr	r3, [pc, #552]	; (8014e20 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8014bf8:	220c      	movs	r2, #12
 8014bfa:	496a      	ldr	r1, [pc, #424]	; (8014da4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014bfc:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014c00:	4888      	ldr	r0, [pc, #544]	; (8014e24 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8014c02:	f7ee fac5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 8014c06:	4b88      	ldr	r3, [pc, #544]	; (8014e28 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8014c08:	2200      	movs	r2, #0
 8014c0a:	497c      	ldr	r1, [pc, #496]	; (8014dfc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8014c0c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8014da8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014c10:	4886      	ldr	r0, [pc, #536]	; (8014e2c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8014c12:	f7ee fabd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 8014c16:	4986      	ldr	r1, [pc, #536]	; (8014e30 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8014c18:	4886      	ldr	r0, [pc, #536]	; (8014e34 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8014c1a:	f7f3 f86b 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8014c1e:	4986      	ldr	r1, [pc, #536]	; (8014e38 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8014c20:	4886      	ldr	r0, [pc, #536]	; (8014e3c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8014c22:	f7f3 f867 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 8014c26:	4986      	ldr	r1, [pc, #536]	; (8014e40 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8014c28:	4886      	ldr	r0, [pc, #536]	; (8014e44 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8014c2a:	f7f3 f863 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 8014c2e:	4986      	ldr	r1, [pc, #536]	; (8014e48 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8014c30:	4886      	ldr	r0, [pc, #536]	; (8014e4c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8014c32:	f7f3 f85f 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 8014c36:	4986      	ldr	r1, [pc, #536]	; (8014e50 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8014c38:	4886      	ldr	r0, [pc, #536]	; (8014e54 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8014c3a:	f7f3 f85b 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 8014c3e:	4986      	ldr	r1, [pc, #536]	; (8014e58 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8014c40:	4886      	ldr	r0, [pc, #536]	; (8014e5c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8014c42:	f7f3 f857 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 8014c46:	4986      	ldr	r1, [pc, #536]	; (8014e60 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8014c48:	4886      	ldr	r0, [pc, #536]	; (8014e64 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8014c4a:	f7f3 f853 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 8014c4e:	4986      	ldr	r1, [pc, #536]	; (8014e68 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8014c50:	4886      	ldr	r0, [pc, #536]	; (8014e6c <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8014c52:	f7f3 f84f 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 8014c56:	4986      	ldr	r1, [pc, #536]	; (8014e70 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8014c58:	4886      	ldr	r0, [pc, #536]	; (8014e74 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8014c5a:	f7f3 f84b 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 8014c5e:	4986      	ldr	r1, [pc, #536]	; (8014e78 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8014c60:	4886      	ldr	r0, [pc, #536]	; (8014e7c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8014c62:	f7f3 f847 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 8014c66:	4986      	ldr	r1, [pc, #536]	; (8014e80 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8014c68:	4886      	ldr	r0, [pc, #536]	; (8014e84 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8014c6a:	f7f3 f843 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 8014c6e:	4986      	ldr	r1, [pc, #536]	; (8014e88 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8014c70:	4886      	ldr	r0, [pc, #536]	; (8014e8c <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8014c72:	f7f8 fe97 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 8014c76:	4986      	ldr	r1, [pc, #536]	; (8014e90 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014c78:	4886      	ldr	r0, [pc, #536]	; (8014e94 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8014c7a:	f7f8 fe93 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8014c7e:	4986      	ldr	r1, [pc, #536]	; (8014e98 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8014c80:	4886      	ldr	r0, [pc, #536]	; (8014e9c <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8014c82:	f7f8 fe8f 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 8014c86:	4986      	ldr	r1, [pc, #536]	; (8014ea0 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8014c88:	4886      	ldr	r0, [pc, #536]	; (8014ea4 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8014c8a:	f7f8 fe8b 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8014c8e:	4986      	ldr	r1, [pc, #536]	; (8014ea8 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8014c90:	4886      	ldr	r0, [pc, #536]	; (8014eac <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8014c92:	f7f8 fe87 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 8014c96:	4986      	ldr	r1, [pc, #536]	; (8014eb0 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8014c98:	4886      	ldr	r0, [pc, #536]	; (8014eb4 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 8014c9a:	f7f8 fe83 	bl	800d9a4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 8014c9e:	4986      	ldr	r1, [pc, #536]	; (8014eb8 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 8014ca0:	4886      	ldr	r0, [pc, #536]	; (8014ebc <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 8014ca2:	f7ef ff71 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_stream			(READ_STREAM_ID	  , read_stream_callback		, &read_stream_pin		, &read_stream_freq);
 8014ca6:	4b86      	ldr	r3, [pc, #536]	; (8014ec0 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8014ca8:	9300      	str	r3, [sp, #0]
 8014caa:	4b86      	ldr	r3, [pc, #536]	; (8014ec4 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 8014cac:	4a86      	ldr	r2, [pc, #536]	; (8014ec8 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 8014cae:	2105      	movs	r1, #5
 8014cb0:	4886      	ldr	r0, [pc, #536]	; (8014ecc <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 8014cb2:	f7fb fcd7 	bl	8010664 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet cancel_stream		(CANCEL_STREAM_ID , cancel_stream_callback		, &cancel_stream_id		, &cancel_stream_offset);
 8014cb6:	4b86      	ldr	r3, [pc, #536]	; (8014ed0 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 8014cb8:	9300      	str	r3, [sp, #0]
 8014cba:	4b86      	ldr	r3, [pc, #536]	; (8014ed4 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 8014cbc:	4a86      	ldr	r2, [pc, #536]	; (8014ed8 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 8014cbe:	2108      	movs	r1, #8
 8014cc0:	4886      	ldr	r0, [pc, #536]	; (8014edc <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 8014cc2:	f7fb fcfb 	bl	80106bc <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet write_once			(WRITE_ONCE_ID	  , write_once_callback			, &write_once_pin		, &write_once_value);
 8014cc6:	4b86      	ldr	r3, [pc, #536]	; (8014ee0 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 8014cc8:	9300      	str	r3, [sp, #0]
 8014cca:	4b86      	ldr	r3, [pc, #536]	; (8014ee4 <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 8014ccc:	4a86      	ldr	r2, [pc, #536]	; (8014ee8 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 8014cce:	2106      	movs	r1, #6
 8014cd0:	4886      	ldr	r0, [pc, #536]	; (8014eec <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 8014cd2:	f7fb fd1f 	bl	8010714 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet set_precision		(SET_PRECISION_ID , set_precision_callback		, &set_precision_value);
 8014cd6:	4b86      	ldr	r3, [pc, #536]	; (8014ef0 <_Z41__static_initialization_and_destruction_0ii+0x4e8>)
 8014cd8:	e10c      	b.n	8014ef4 <_Z41__static_initialization_and_destruction_0ii+0x4ec>
 8014cda:	bf00      	nop
 8014cdc:	240001d8 	.word	0x240001d8
 8014ce0:	2400117c 	.word	0x2400117c
 8014ce4:	240004d0 	.word	0x240004d0
 8014ce8:	240001f8 	.word	0x240001f8
 8014cec:	2400052c 	.word	0x2400052c
 8014cf0:	24000250 	.word	0x24000250
 8014cf4:	240011c8 	.word	0x240011c8
 8014cf8:	24000588 	.word	0x24000588
 8014cfc:	24000258 	.word	0x24000258
 8014d00:	240005e4 	.word	0x240005e4
 8014d04:	24000270 	.word	0x24000270
 8014d08:	24000640 	.word	0x24000640
 8014d0c:	24000278 	.word	0x24000278
 8014d10:	2400069c 	.word	0x2400069c
 8014d14:	240002a0 	.word	0x240002a0
 8014d18:	240006f8 	.word	0x240006f8
 8014d1c:	240002a8 	.word	0x240002a8
 8014d20:	24000754 	.word	0x24000754
 8014d24:	24000300 	.word	0x24000300
 8014d28:	24001344 	.word	0x24001344
 8014d2c:	240007b0 	.word	0x240007b0
 8014d30:	240003b0 	.word	0x240003b0
 8014d34:	24001214 	.word	0x24001214
 8014d38:	2400080c 	.word	0x2400080c
 8014d3c:	240003b8 	.word	0x240003b8
 8014d40:	24000868 	.word	0x24000868
 8014d44:	240003c0 	.word	0x240003c0
 8014d48:	240008c4 	.word	0x240008c4
 8014d4c:	240003c8 	.word	0x240003c8
 8014d50:	24000920 	.word	0x24000920
 8014d54:	24000418 	.word	0x24000418
 8014d58:	24001130 	.word	0x24001130
 8014d5c:	2400097c 	.word	0x2400097c
 8014d60:	24000428 	.word	0x24000428
 8014d64:	240009d8 	.word	0x240009d8
 8014d68:	24000438 	.word	0x24000438
 8014d6c:	24000a34 	.word	0x24000a34
 8014d70:	24000440 	.word	0x24000440
 8014d74:	24000a90 	.word	0x24000a90
 8014d78:	240002d8 	.word	0x240002d8
 8014d7c:	24000aec 	.word	0x24000aec
 8014d80:	240002e0 	.word	0x240002e0
 8014d84:	24000af8 	.word	0x24000af8
 8014d88:	240002e8 	.word	0x240002e8
 8014d8c:	24000b04 	.word	0x24000b04
 8014d90:	24000200 	.word	0x24000200
 8014d94:	240012ac 	.word	0x240012ac
 8014d98:	24000fa8 	.word	0x24000fa8
 8014d9c:	24000b10 	.word	0x24000b10
 8014da0:	24000458 	.word	0x24000458
 8014da4:	24001558 	.word	0x24001558
 8014da8:	40533333 	.word	0x40533333
 8014dac:	24000b28 	.word	0x24000b28
 8014db0:	24000450 	.word	0x24000450
 8014db4:	24000b40 	.word	0x24000b40
 8014db8:	240001d0 	.word	0x240001d0
 8014dbc:	24001260 	.word	0x24001260
 8014dc0:	24000b58 	.word	0x24000b58
 8014dc4:	240001e0 	.word	0x240001e0
 8014dc8:	24000b70 	.word	0x24000b70
 8014dcc:	240001e8 	.word	0x240001e8
 8014dd0:	24000b88 	.word	0x24000b88
 8014dd4:	24000308 	.word	0x24000308
 8014dd8:	24000ba0 	.word	0x24000ba0
 8014ddc:	24000bb8 	.word	0x24000bb8
 8014de0:	24000310 	.word	0x24000310
 8014de4:	24000bd0 	.word	0x24000bd0
 8014de8:	24000318 	.word	0x24000318
 8014dec:	24000be8 	.word	0x24000be8
 8014df0:	24000460 	.word	0x24000460
 8014df4:	24000c00 	.word	0x24000c00
 8014df8:	240004b8 	.word	0x240004b8
 8014dfc:	240015a4 	.word	0x240015a4
 8014e00:	24000c18 	.word	0x24000c18
 8014e04:	240004b0 	.word	0x240004b0
 8014e08:	24000c30 	.word	0x24000c30
 8014e0c:	240002c0 	.word	0x240002c0
 8014e10:	24001390 	.word	0x24001390
 8014e14:	24000c48 	.word	0x24000c48
 8014e18:	240004c0 	.word	0x240004c0
 8014e1c:	24000c60 	.word	0x24000c60
 8014e20:	24000468 	.word	0x24000468
 8014e24:	24000c78 	.word	0x24000c78
 8014e28:	240004a8 	.word	0x240004a8
 8014e2c:	24000c90 	.word	0x24000c90
 8014e30:	24000320 	.word	0x24000320
 8014e34:	24000ca8 	.word	0x24000ca8
 8014e38:	24000328 	.word	0x24000328
 8014e3c:	24000cb0 	.word	0x24000cb0
 8014e40:	24000330 	.word	0x24000330
 8014e44:	24000cb8 	.word	0x24000cb8
 8014e48:	24000338 	.word	0x24000338
 8014e4c:	24000cc0 	.word	0x24000cc0
 8014e50:	24000340 	.word	0x24000340
 8014e54:	24000cc8 	.word	0x24000cc8
 8014e58:	24000348 	.word	0x24000348
 8014e5c:	24000cd0 	.word	0x24000cd0
 8014e60:	24000480 	.word	0x24000480
 8014e64:	24000cd8 	.word	0x24000cd8
 8014e68:	24000488 	.word	0x24000488
 8014e6c:	24000ce0 	.word	0x24000ce0
 8014e70:	24000288 	.word	0x24000288
 8014e74:	24000ce8 	.word	0x24000ce8
 8014e78:	24000298 	.word	0x24000298
 8014e7c:	24000cf0 	.word	0x24000cf0
 8014e80:	24000390 	.word	0x24000390
 8014e84:	24000cf8 	.word	0x24000cf8
 8014e88:	240012f8 	.word	0x240012f8
 8014e8c:	24000d00 	.word	0x24000d00
 8014e90:	240013dc 	.word	0x240013dc
 8014e94:	24000d20 	.word	0x24000d20
 8014e98:	24001428 	.word	0x24001428
 8014e9c:	24000d40 	.word	0x24000d40
 8014ea0:	24001474 	.word	0x24001474
 8014ea4:	24000d60 	.word	0x24000d60
 8014ea8:	240014c0 	.word	0x240014c0
 8014eac:	24000d80 	.word	0x24000d80
 8014eb0:	2400150c 	.word	0x2400150c
 8014eb4:	24000da0 	.word	0x24000da0
 8014eb8:	24001090 	.word	0x24001090
 8014ebc:	24000dc0 	.word	0x24000dc0
 8014ec0:	24000e9a 	.word	0x24000e9a
 8014ec4:	24000e98 	.word	0x24000e98
 8014ec8:	0800e7c9 	.word	0x0800e7c9
 8014ecc:	24000ea0 	.word	0x24000ea0
 8014ed0:	24000e9e 	.word	0x24000e9e
 8014ed4:	24000e9d 	.word	0x24000e9d
 8014ed8:	0800e965 	.word	0x0800e965
 8014edc:	24000eb8 	.word	0x24000eb8
 8014ee0:	24000e94 	.word	0x24000e94
 8014ee4:	24000e91 	.word	0x24000e91
 8014ee8:	0800e835 	.word	0x0800e835
 8014eec:	24000ed0 	.word	0x24000ed0
 8014ef0:	24000e9c 	.word	0x24000e9c
 8014ef4:	4a2b      	ldr	r2, [pc, #172]	; (8014fa4 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 8014ef6:	2107      	movs	r1, #7
 8014ef8:	482b      	ldr	r0, [pc, #172]	; (8014fa8 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 8014efa:	f7fb fc37 	bl	801076c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_once			(READ_ONCE_ID	  , read_once_callback			, &read_once_pin);
 8014efe:	4b2b      	ldr	r3, [pc, #172]	; (8014fac <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 8014f00:	4a2b      	ldr	r2, [pc, #172]	; (8014fb0 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 8014f02:	2104      	movs	r1, #4
 8014f04:	482b      	ldr	r0, [pc, #172]	; (8014fb4 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 8014f06:	f7fb fc31 	bl	801076c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8014f0a:	4a2b      	ldr	r2, [pc, #172]	; (8014fb8 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 8014f0c:	492b      	ldr	r1, [pc, #172]	; (8014fbc <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 8014f0e:	482c      	ldr	r0, [pc, #176]	; (8014fc0 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 8014f10:	f7f9 f964 	bl	800e1dc <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 8014f14:	4a28      	ldr	r2, [pc, #160]	; (8014fb8 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 8014f16:	492b      	ldr	r1, [pc, #172]	; (8014fc4 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8014f18:	482b      	ldr	r0, [pc, #172]	; (8014fc8 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 8014f1a:	f7f9 f95f 	bl	800e1dc <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8014f1e:	4a26      	ldr	r2, [pc, #152]	; (8014fb8 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 8014f20:	492a      	ldr	r1, [pc, #168]	; (8014fcc <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8014f22:	482b      	ldr	r0, [pc, #172]	; (8014fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 8014f24:	f7f9 f95a 	bl	800e1dc <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 8014f28:	4a23      	ldr	r2, [pc, #140]	; (8014fb8 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 8014f2a:	492a      	ldr	r1, [pc, #168]	; (8014fd4 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8014f2c:	482a      	ldr	r0, [pc, #168]	; (8014fd8 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8014f2e:	f7f9 f955 	bl	800e1dc <_ZN6StreamC1EP5TimerP3Can>
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d131      	bne.n	8014f9c <_Z41__static_initialization_and_destruction_0ii+0x594>
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	d12c      	bne.n	8014f9c <_Z41__static_initialization_and_destruction_0ii+0x594>
 8014f42:	4825      	ldr	r0, [pc, #148]	; (8014fd8 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8014f44:	f7ff fd36 	bl	80149b4 <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 8014f48:	4821      	ldr	r0, [pc, #132]	; (8014fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 8014f4a:	f7ff fd33 	bl	80149b4 <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 8014f4e:	481e      	ldr	r0, [pc, #120]	; (8014fc8 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 8014f50:	f7ff fd30 	bl	80149b4 <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 8014f54:	481a      	ldr	r0, [pc, #104]	; (8014fc0 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 8014f56:	f7ff fd2d 	bl	80149b4 <_ZN6StreamD1Ev>
Packet read_once			(READ_ONCE_ID	  , read_once_callback			, &read_once_pin);
 8014f5a:	4816      	ldr	r0, [pc, #88]	; (8014fb4 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 8014f5c:	f7ff fd38 	bl	80149d0 <_ZN6PacketD1Ev>
Packet set_precision		(SET_PRECISION_ID , set_precision_callback		, &set_precision_value);
 8014f60:	4811      	ldr	r0, [pc, #68]	; (8014fa8 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 8014f62:	f7ff fd35 	bl	80149d0 <_ZN6PacketD1Ev>
Packet write_once			(WRITE_ONCE_ID	  , write_once_callback			, &write_once_pin		, &write_once_value);
 8014f66:	481d      	ldr	r0, [pc, #116]	; (8014fdc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8014f68:	f7ff fd32 	bl	80149d0 <_ZN6PacketD1Ev>
Packet cancel_stream		(CANCEL_STREAM_ID , cancel_stream_callback		, &cancel_stream_id		, &cancel_stream_offset);
 8014f6c:	481c      	ldr	r0, [pc, #112]	; (8014fe0 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8014f6e:	f7ff fd2f 	bl	80149d0 <_ZN6PacketD1Ev>
Packet read_stream			(READ_STREAM_ID	  , read_stream_callback		, &read_stream_pin		, &read_stream_freq);
 8014f72:	481c      	ldr	r0, [pc, #112]	; (8014fe4 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8014f74:	f7ff fd2c 	bl	80149d0 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 8014f78:	4816      	ldr	r0, [pc, #88]	; (8014fd4 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8014f7a:	f7ff fd37 	bl	80149ec <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 8014f7e:	4813      	ldr	r0, [pc, #76]	; (8014fcc <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8014f80:	f7ff fd34 	bl	80149ec <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 8014f84:	480f      	ldr	r0, [pc, #60]	; (8014fc4 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8014f86:	f7ff fd31 	bl	80149ec <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 8014f8a:	480c      	ldr	r0, [pc, #48]	; (8014fbc <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 8014f8c:	f7ff fd2e 	bl	80149ec <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 8014f90:	4815      	ldr	r0, [pc, #84]	; (8014fe8 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8014f92:	f7ff fd2b 	bl	80149ec <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 8014f96:	4815      	ldr	r0, [pc, #84]	; (8014fec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8014f98:	f7ff fd28 	bl	80149ec <_ZN5TimerD1Ev>
 8014f9c:	bf00      	nop
 8014f9e:	3708      	adds	r7, #8
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	0800e925 	.word	0x0800e925
 8014fa8:	24000ee8 	.word	0x24000ee8
 8014fac:	24000e90 	.word	0x24000e90
 8014fb0:	0800e6d9 	.word	0x0800e6d9
 8014fb4:	24000f00 	.word	0x24000f00
 8014fb8:	24000dc0 	.word	0x24000dc0
 8014fbc:	24000d40 	.word	0x24000d40
 8014fc0:	24000f18 	.word	0x24000f18
 8014fc4:	24000d60 	.word	0x24000d60
 8014fc8:	24000f3c 	.word	0x24000f3c
 8014fcc:	24000d80 	.word	0x24000d80
 8014fd0:	24000f60 	.word	0x24000f60
 8014fd4:	24000da0 	.word	0x24000da0
 8014fd8:	24000f84 	.word	0x24000f84
 8014fdc:	24000ed0 	.word	0x24000ed0
 8014fe0:	24000eb8 	.word	0x24000eb8
 8014fe4:	24000ea0 	.word	0x24000ea0
 8014fe8:	24000d20 	.word	0x24000d20
 8014fec:	24000d00 	.word	0x24000d00

08014ff0 <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	683a      	ldr	r2, [r7, #0]
 8015000:	6812      	ldr	r2, [r2, #0]
 8015002:	601a      	str	r2, [r3, #0]
 8015004:	bf00      	nop
 8015006:	370c      	adds	r7, #12
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	601a      	str	r2, [r3, #0]
 8015024:	bf00      	nop
 8015026:	370c      	adds	r7, #12
 8015028:	46bd      	mov	sp, r7
 801502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502e:	4770      	bx	lr

08015030 <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	2304      	movs	r3, #4
 801503a:	4618      	mov	r0, r3
 801503c:	370c      	adds	r7, #12
 801503e:	46bd      	mov	sp, r7
 8015040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015044:	4770      	bx	lr

08015046 <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8015046:	b480      	push	{r7}
 8015048:	b083      	sub	sp, #12
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	6039      	str	r1, [r7, #0]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	683a      	ldr	r2, [r7, #0]
 8015056:	8812      	ldrh	r2, [r2, #0]
 8015058:	801a      	strh	r2, [r3, #0]
 801505a:	bf00      	nop
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8015066:	b480      	push	{r7}
 8015068:	b083      	sub	sp, #12
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	6039      	str	r1, [r7, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	881a      	ldrh	r2, [r3, #0]
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	801a      	strh	r2, [r3, #0]
 801507a:	bf00      	nop
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr

08015086 <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8015086:	b480      	push	{r7}
 8015088:	b083      	sub	sp, #12
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
 801508e:	2302      	movs	r3, #2
 8015090:	4618      	mov	r0, r3
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	7812      	ldrb	r2, [r2, #0]
 80150ae:	701a      	strb	r2, [r3, #0]
 80150b0:	bf00      	nop
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr

080150bc <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	781a      	ldrb	r2, [r3, #0]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	701a      	strb	r2, [r3, #0]
 80150d0:	bf00      	nop
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr

080150dc <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80150dc:	b480      	push	{r7}
 80150de:	b083      	sub	sp, #12
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	2301      	movs	r3, #1
 80150e6:	4618      	mov	r0, r3
 80150e8:	370c      	adds	r7, #12
 80150ea:	46bd      	mov	sp, r7
 80150ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f0:	4770      	bx	lr

080150f2 <_GLOBAL__sub_I_data_adc_1>:
 80150f2:	b580      	push	{r7, lr}
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80150fa:	2001      	movs	r0, #1
 80150fc:	f7ff fc84 	bl	8014a08 <_Z41__static_initialization_and_destruction_0ii>
 8015100:	bd80      	pop	{r7, pc}

08015102 <_GLOBAL__sub_D_data_adc_1>:
 8015102:	b580      	push	{r7, lr}
 8015104:	af00      	add	r7, sp, #0
 8015106:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801510a:	2000      	movs	r0, #0
 801510c:	f7ff fc7c 	bl	8014a08 <_Z41__static_initialization_and_destruction_0ii>
 8015110:	bd80      	pop	{r7, pc}
	...

08015114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801511a:	4b0a      	ldr	r3, [pc, #40]	; (8015144 <HAL_MspInit+0x30>)
 801511c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015120:	4a08      	ldr	r2, [pc, #32]	; (8015144 <HAL_MspInit+0x30>)
 8015122:	f043 0302 	orr.w	r3, r3, #2
 8015126:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801512a:	4b06      	ldr	r3, [pc, #24]	; (8015144 <HAL_MspInit+0x30>)
 801512c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015130:	f003 0302 	and.w	r3, r3, #2
 8015134:	607b      	str	r3, [r7, #4]
 8015136:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015138:	bf00      	nop
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr
 8015144:	58024400 	.word	0x58024400

08015148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b08a      	sub	sp, #40	; 0x28
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015150:	f107 0314 	add.w	r3, r7, #20
 8015154:	2200      	movs	r2, #0
 8015156:	601a      	str	r2, [r3, #0]
 8015158:	605a      	str	r2, [r3, #4]
 801515a:	609a      	str	r2, [r3, #8]
 801515c:	60da      	str	r2, [r3, #12]
 801515e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4a34      	ldr	r2, [pc, #208]	; (8015238 <HAL_ADC_MspInit+0xf0>)
 8015166:	4293      	cmp	r3, r2
 8015168:	d161      	bne.n	801522e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 801516a:	4b34      	ldr	r3, [pc, #208]	; (801523c <HAL_ADC_MspInit+0xf4>)
 801516c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015170:	4a32      	ldr	r2, [pc, #200]	; (801523c <HAL_ADC_MspInit+0xf4>)
 8015172:	f043 0320 	orr.w	r3, r3, #32
 8015176:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801517a:	4b30      	ldr	r3, [pc, #192]	; (801523c <HAL_ADC_MspInit+0xf4>)
 801517c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015180:	f003 0320 	and.w	r3, r3, #32
 8015184:	613b      	str	r3, [r7, #16]
 8015186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015188:	4b2c      	ldr	r3, [pc, #176]	; (801523c <HAL_ADC_MspInit+0xf4>)
 801518a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801518e:	4a2b      	ldr	r2, [pc, #172]	; (801523c <HAL_ADC_MspInit+0xf4>)
 8015190:	f043 0301 	orr.w	r3, r3, #1
 8015194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015198:	4b28      	ldr	r3, [pc, #160]	; (801523c <HAL_ADC_MspInit+0xf4>)
 801519a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801519e:	f003 0301 	and.w	r3, r3, #1
 80151a2:	60fb      	str	r3, [r7, #12]
 80151a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80151a6:	2340      	movs	r3, #64	; 0x40
 80151a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80151aa:	2303      	movs	r3, #3
 80151ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151ae:	2300      	movs	r3, #0
 80151b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80151b2:	f107 0314 	add.w	r3, r7, #20
 80151b6:	4619      	mov	r1, r3
 80151b8:	4821      	ldr	r0, [pc, #132]	; (8015240 <HAL_ADC_MspInit+0xf8>)
 80151ba:	f006 fa73 	bl	801b6a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80151be:	4b21      	ldr	r3, [pc, #132]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151c0:	4a21      	ldr	r2, [pc, #132]	; (8015248 <HAL_ADC_MspInit+0x100>)
 80151c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80151c4:	4b1f      	ldr	r3, [pc, #124]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151c6:	2209      	movs	r2, #9
 80151c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80151ca:	4b1e      	ldr	r3, [pc, #120]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151cc:	2200      	movs	r2, #0
 80151ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80151d0:	4b1c      	ldr	r3, [pc, #112]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151d2:	2200      	movs	r2, #0
 80151d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80151d6:	4b1b      	ldr	r3, [pc, #108]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80151dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80151de:	4b19      	ldr	r3, [pc, #100]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80151e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80151e6:	4b17      	ldr	r3, [pc, #92]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80151ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80151ee:	4b15      	ldr	r3, [pc, #84]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80151f6:	4b13      	ldr	r3, [pc, #76]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151f8:	2200      	movs	r2, #0
 80151fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80151fc:	4b11      	ldr	r3, [pc, #68]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 80151fe:	2200      	movs	r2, #0
 8015200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8015202:	4810      	ldr	r0, [pc, #64]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 8015204:	f003 f81e 	bl	8018244 <HAL_DMA_Init>
 8015208:	4603      	mov	r3, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d001      	beq.n	8015212 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 801520e:	f7fa ff9f 	bl	8010150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4a0b      	ldr	r2, [pc, #44]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 8015216:	659a      	str	r2, [r3, #88]	; 0x58
 8015218:	4a0a      	ldr	r2, [pc, #40]	; (8015244 <HAL_ADC_MspInit+0xfc>)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 801521e:	2200      	movs	r2, #0
 8015220:	2100      	movs	r1, #0
 8015222:	2012      	movs	r0, #18
 8015224:	f002 ffd9 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8015228:	2012      	movs	r0, #18
 801522a:	f002 fff0 	bl	801820e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801522e:	bf00      	nop
 8015230:	3728      	adds	r7, #40	; 0x28
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	40022000 	.word	0x40022000
 801523c:	58024400 	.word	0x58024400
 8015240:	58020000 	.word	0x58020000
 8015244:	24001018 	.word	0x24001018
 8015248:	40020028 	.word	0x40020028

0801524c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b08a      	sub	sp, #40	; 0x28
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015254:	f107 0314 	add.w	r3, r7, #20
 8015258:	2200      	movs	r2, #0
 801525a:	601a      	str	r2, [r3, #0]
 801525c:	605a      	str	r2, [r3, #4]
 801525e:	609a      	str	r2, [r3, #8]
 8015260:	60da      	str	r2, [r3, #12]
 8015262:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	4a22      	ldr	r2, [pc, #136]	; (80152f4 <HAL_FDCAN_MspInit+0xa8>)
 801526a:	4293      	cmp	r3, r2
 801526c:	d13e      	bne.n	80152ec <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 801526e:	4b22      	ldr	r3, [pc, #136]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 8015270:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8015274:	4a20      	ldr	r2, [pc, #128]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 8015276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801527a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 801527e:	4b1e      	ldr	r3, [pc, #120]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 8015280:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8015284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015288:	613b      	str	r3, [r7, #16]
 801528a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801528c:	4b1a      	ldr	r3, [pc, #104]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 801528e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015292:	4a19      	ldr	r2, [pc, #100]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 8015294:	f043 0301 	orr.w	r3, r3, #1
 8015298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801529c:	4b16      	ldr	r3, [pc, #88]	; (80152f8 <HAL_FDCAN_MspInit+0xac>)
 801529e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80152a2:	f003 0301 	and.w	r3, r3, #1
 80152a6:	60fb      	str	r3, [r7, #12]
 80152a8:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80152aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80152ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152b0:	2302      	movs	r3, #2
 80152b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152b4:	2300      	movs	r3, #0
 80152b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152b8:	2300      	movs	r3, #0
 80152ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80152bc:	2309      	movs	r3, #9
 80152be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80152c0:	f107 0314 	add.w	r3, r7, #20
 80152c4:	4619      	mov	r1, r3
 80152c6:	480d      	ldr	r0, [pc, #52]	; (80152fc <HAL_FDCAN_MspInit+0xb0>)
 80152c8:	f006 f9ec 	bl	801b6a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80152cc:	2200      	movs	r2, #0
 80152ce:	2100      	movs	r1, #0
 80152d0:	2013      	movs	r0, #19
 80152d2:	f002 ff82 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80152d6:	2013      	movs	r0, #19
 80152d8:	f002 ff99 	bl	801820e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80152dc:	2200      	movs	r2, #0
 80152de:	2100      	movs	r1, #0
 80152e0:	2015      	movs	r0, #21
 80152e2:	f002 ff7a 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80152e6:	2015      	movs	r0, #21
 80152e8:	f002 ff91 	bl	801820e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80152ec:	bf00      	nop
 80152ee:	3728      	adds	r7, #40	; 0x28
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	4000a000 	.word	0x4000a000
 80152f8:	58024400 	.word	0x58024400
 80152fc:	58020000 	.word	0x58020000

08015300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b09c      	sub	sp, #112	; 0x70
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801530c:	2200      	movs	r2, #0
 801530e:	601a      	str	r2, [r3, #0]
 8015310:	605a      	str	r2, [r3, #4]
 8015312:	609a      	str	r2, [r3, #8]
 8015314:	60da      	str	r2, [r3, #12]
 8015316:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4ab3      	ldr	r2, [pc, #716]	; (80155ec <HAL_TIM_Base_MspInit+0x2ec>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d137      	bne.n	8015392 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8015322:	4bb3      	ldr	r3, [pc, #716]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015328:	4ab1      	ldr	r2, [pc, #708]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 801532a:	f043 0301 	orr.w	r3, r3, #1
 801532e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015332:	4baf      	ldr	r3, [pc, #700]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015338:	f003 0301 	and.w	r3, r3, #1
 801533c:	65bb      	str	r3, [r7, #88]	; 0x58
 801533e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8015340:	4bab      	ldr	r3, [pc, #684]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015346:	4aaa      	ldr	r2, [pc, #680]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015348:	f043 0310 	orr.w	r3, r3, #16
 801534c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015350:	4ba7      	ldr	r3, [pc, #668]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015356:	f003 0310 	and.w	r3, r3, #16
 801535a:	657b      	str	r3, [r7, #84]	; 0x54
 801535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 801535e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8015362:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015364:	2302      	movs	r3, #2
 8015366:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015368:	2302      	movs	r3, #2
 801536a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801536c:	2300      	movs	r3, #0
 801536e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8015370:	2301      	movs	r3, #1
 8015372:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015378:	4619      	mov	r1, r3
 801537a:	489e      	ldr	r0, [pc, #632]	; (80155f4 <HAL_TIM_Base_MspInit+0x2f4>)
 801537c:	f006 f992 	bl	801b6a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8015380:	2200      	movs	r2, #0
 8015382:	2100      	movs	r1, #0
 8015384:	201b      	movs	r0, #27
 8015386:	f002 ff28 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 801538a:	201b      	movs	r0, #27
 801538c:	f002 ff3f 	bl	801820e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8015390:	e23e      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM2)
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801539a:	d156      	bne.n	801544a <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 801539c:	4b94      	ldr	r3, [pc, #592]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 801539e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80153a2:	4a93      	ldr	r2, [pc, #588]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153a4:	f043 0301 	orr.w	r3, r3, #1
 80153a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80153ac:	4b90      	ldr	r3, [pc, #576]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80153b2:	f003 0301 	and.w	r3, r3, #1
 80153b6:	653b      	str	r3, [r7, #80]	; 0x50
 80153b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80153ba:	4b8d      	ldr	r3, [pc, #564]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153c0:	4a8b      	ldr	r2, [pc, #556]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153c2:	f043 0301 	orr.w	r3, r3, #1
 80153c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80153ca:	4b89      	ldr	r3, [pc, #548]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153d0:	f003 0301 	and.w	r3, r3, #1
 80153d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80153d8:	4b85      	ldr	r3, [pc, #532]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153de:	4a84      	ldr	r2, [pc, #528]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153e0:	f043 0302 	orr.w	r3, r3, #2
 80153e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80153e8:	4b81      	ldr	r3, [pc, #516]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80153ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153ee:	f003 0302 	and.w	r3, r3, #2
 80153f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80153f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = PWM_5V_1_Pin|SENSOR_3V_1A5_Pin;
 80153f6:	2322      	movs	r3, #34	; 0x22
 80153f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153fa:	2302      	movs	r3, #2
 80153fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80153fe:	2302      	movs	r3, #2
 8015400:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015402:	2300      	movs	r3, #0
 8015404:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015406:	2301      	movs	r3, #1
 8015408:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801540a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801540e:	4619      	mov	r1, r3
 8015410:	4879      	ldr	r0, [pc, #484]	; (80155f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8015412:	f006 f947 	bl	801b6a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 8015416:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801541a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801541c:	2302      	movs	r3, #2
 801541e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015420:	2300      	movs	r3, #0
 8015422:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015424:	2300      	movs	r3, #0
 8015426:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015428:	2301      	movs	r3, #1
 801542a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801542c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015430:	4619      	mov	r1, r3
 8015432:	4872      	ldr	r0, [pc, #456]	; (80155fc <HAL_TIM_Base_MspInit+0x2fc>)
 8015434:	f006 f936 	bl	801b6a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8015438:	2200      	movs	r2, #0
 801543a:	2100      	movs	r1, #0
 801543c:	201c      	movs	r0, #28
 801543e:	f002 fecc 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8015442:	201c      	movs	r0, #28
 8015444:	f002 fee3 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 8015448:	e1e2      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM3)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	4a6c      	ldr	r2, [pc, #432]	; (8015600 <HAL_TIM_Base_MspInit+0x300>)
 8015450:	4293      	cmp	r3, r2
 8015452:	d136      	bne.n	80154c2 <HAL_TIM_Base_MspInit+0x1c2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8015454:	4b66      	ldr	r3, [pc, #408]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801545a:	4a65      	ldr	r2, [pc, #404]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 801545c:	f043 0302 	orr.w	r3, r3, #2
 8015460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8015464:	4b62      	ldr	r3, [pc, #392]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801546a:	f003 0302 	and.w	r3, r3, #2
 801546e:	647b      	str	r3, [r7, #68]	; 0x44
 8015470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015472:	4b5f      	ldr	r3, [pc, #380]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015478:	4a5d      	ldr	r2, [pc, #372]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 801547a:	f043 0302 	orr.w	r3, r3, #2
 801547e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015482:	4b5b      	ldr	r3, [pc, #364]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015488:	f003 0302 	and.w	r3, r3, #2
 801548c:	643b      	str	r3, [r7, #64]	; 0x40
 801548e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 8015490:	2333      	movs	r3, #51	; 0x33
 8015492:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015494:	2302      	movs	r3, #2
 8015496:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015498:	2302      	movs	r3, #2
 801549a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801549c:	2300      	movs	r3, #0
 801549e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80154a0:	2302      	movs	r3, #2
 80154a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80154a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80154a8:	4619      	mov	r1, r3
 80154aa:	4854      	ldr	r0, [pc, #336]	; (80155fc <HAL_TIM_Base_MspInit+0x2fc>)
 80154ac:	f006 f8fa 	bl	801b6a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80154b0:	2200      	movs	r2, #0
 80154b2:	2100      	movs	r1, #0
 80154b4:	201d      	movs	r0, #29
 80154b6:	f002 fe90 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80154ba:	201d      	movs	r0, #29
 80154bc:	f002 fea7 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 80154c0:	e1a6      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM4)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	4a4f      	ldr	r2, [pc, #316]	; (8015604 <HAL_TIM_Base_MspInit+0x304>)
 80154c8:	4293      	cmp	r3, r2
 80154ca:	d137      	bne.n	801553c <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80154cc:	4b48      	ldr	r3, [pc, #288]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80154d2:	4a47      	ldr	r2, [pc, #284]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154d4:	f043 0304 	orr.w	r3, r3, #4
 80154d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80154dc:	4b44      	ldr	r3, [pc, #272]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80154e2:	f003 0304 	and.w	r3, r3, #4
 80154e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80154e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80154ea:	4b41      	ldr	r3, [pc, #260]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80154f0:	4a3f      	ldr	r2, [pc, #252]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154f2:	f043 0308 	orr.w	r3, r3, #8
 80154f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80154fa:	4b3d      	ldr	r3, [pc, #244]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80154fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015500:	f003 0308 	and.w	r3, r3, #8
 8015504:	63bb      	str	r3, [r7, #56]	; 0x38
 8015506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 8015508:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801550c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801550e:	2302      	movs	r3, #2
 8015510:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015512:	2300      	movs	r3, #0
 8015514:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015516:	2300      	movs	r3, #0
 8015518:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801551a:	2302      	movs	r3, #2
 801551c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801551e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015522:	4619      	mov	r1, r3
 8015524:	4838      	ldr	r0, [pc, #224]	; (8015608 <HAL_TIM_Base_MspInit+0x308>)
 8015526:	f006 f8bd 	bl	801b6a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801552a:	2200      	movs	r2, #0
 801552c:	2100      	movs	r1, #0
 801552e:	201e      	movs	r0, #30
 8015530:	f002 fe53 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8015534:	201e      	movs	r0, #30
 8015536:	f002 fe6a 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 801553a:	e169      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM5)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a32      	ldr	r2, [pc, #200]	; (801560c <HAL_TIM_Base_MspInit+0x30c>)
 8015542:	4293      	cmp	r3, r2
 8015544:	d117      	bne.n	8015576 <HAL_TIM_Base_MspInit+0x276>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8015546:	4b2a      	ldr	r3, [pc, #168]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801554c:	4a28      	ldr	r2, [pc, #160]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 801554e:	f043 0308 	orr.w	r3, r3, #8
 8015552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8015556:	4b26      	ldr	r3, [pc, #152]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801555c:	f003 0308 	and.w	r3, r3, #8
 8015560:	637b      	str	r3, [r7, #52]	; 0x34
 8015562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8015564:	2200      	movs	r2, #0
 8015566:	2100      	movs	r1, #0
 8015568:	2032      	movs	r0, #50	; 0x32
 801556a:	f002 fe36 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801556e:	2032      	movs	r0, #50	; 0x32
 8015570:	f002 fe4d 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 8015574:	e14c      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM6)
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	4a25      	ldr	r2, [pc, #148]	; (8015610 <HAL_TIM_Base_MspInit+0x310>)
 801557c:	4293      	cmp	r3, r2
 801557e:	d117      	bne.n	80155b0 <HAL_TIM_Base_MspInit+0x2b0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8015580:	4b1b      	ldr	r3, [pc, #108]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015586:	4a1a      	ldr	r2, [pc, #104]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015588:	f043 0310 	orr.w	r3, r3, #16
 801558c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8015590:	4b17      	ldr	r3, [pc, #92]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8015592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015596:	f003 0310 	and.w	r3, r3, #16
 801559a:	633b      	str	r3, [r7, #48]	; 0x30
 801559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801559e:	2200      	movs	r2, #0
 80155a0:	2100      	movs	r1, #0
 80155a2:	2036      	movs	r0, #54	; 0x36
 80155a4:	f002 fe19 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80155a8:	2036      	movs	r0, #54	; 0x36
 80155aa:	f002 fe30 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 80155ae:	e12f      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM7)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4a17      	ldr	r2, [pc, #92]	; (8015614 <HAL_TIM_Base_MspInit+0x314>)
 80155b6:	4293      	cmp	r3, r2
 80155b8:	d12e      	bne.n	8015618 <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80155ba:	4b0d      	ldr	r3, [pc, #52]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80155bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80155c0:	4a0b      	ldr	r2, [pc, #44]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80155c2:	f043 0320 	orr.w	r3, r3, #32
 80155c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80155ca:	4b09      	ldr	r3, [pc, #36]	; (80155f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80155cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80155d0:	f003 0320 	and.w	r3, r3, #32
 80155d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80155d8:	2200      	movs	r2, #0
 80155da:	2100      	movs	r1, #0
 80155dc:	2037      	movs	r0, #55	; 0x37
 80155de:	f002 fdfc 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80155e2:	2037      	movs	r0, #55	; 0x37
 80155e4:	f002 fe13 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 80155e8:	e112      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
 80155ea:	bf00      	nop
 80155ec:	40010000 	.word	0x40010000
 80155f0:	58024400 	.word	0x58024400
 80155f4:	58021000 	.word	0x58021000
 80155f8:	58020000 	.word	0x58020000
 80155fc:	58020400 	.word	0x58020400
 8015600:	40000400 	.word	0x40000400
 8015604:	40000800 	.word	0x40000800
 8015608:	58020c00 	.word	0x58020c00
 801560c:	40000c00 	.word	0x40000c00
 8015610:	40001000 	.word	0x40001000
 8015614:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4a7e      	ldr	r2, [pc, #504]	; (8015818 <HAL_TIM_Base_MspInit+0x518>)
 801561e:	4293      	cmp	r3, r2
 8015620:	d127      	bne.n	8015672 <HAL_TIM_Base_MspInit+0x372>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8015622:	4b7e      	ldr	r3, [pc, #504]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015628:	4a7c      	ldr	r2, [pc, #496]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801562a:	f043 0302 	orr.w	r3, r3, #2
 801562e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015632:	4b7a      	ldr	r3, [pc, #488]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015638:	f003 0302 	and.w	r3, r3, #2
 801563c:	62bb      	str	r3, [r7, #40]	; 0x28
 801563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8015640:	2200      	movs	r2, #0
 8015642:	2100      	movs	r1, #0
 8015644:	202c      	movs	r0, #44	; 0x2c
 8015646:	f002 fdc8 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801564a:	202c      	movs	r0, #44	; 0x2c
 801564c:	f002 fddf 	bl	801820e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8015650:	2200      	movs	r2, #0
 8015652:	2100      	movs	r1, #0
 8015654:	202d      	movs	r0, #45	; 0x2d
 8015656:	f002 fdc0 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 801565a:	202d      	movs	r0, #45	; 0x2d
 801565c:	f002 fdd7 	bl	801820e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8015660:	2200      	movs	r2, #0
 8015662:	2100      	movs	r1, #0
 8015664:	202e      	movs	r0, #46	; 0x2e
 8015666:	f002 fdb8 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 801566a:	202e      	movs	r0, #46	; 0x2e
 801566c:	f002 fdcf 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 8015670:	e0ce      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM12)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	4a6a      	ldr	r2, [pc, #424]	; (8015820 <HAL_TIM_Base_MspInit+0x520>)
 8015678:	4293      	cmp	r3, r2
 801567a:	d10f      	bne.n	801569c <HAL_TIM_Base_MspInit+0x39c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 801567c:	4b67      	ldr	r3, [pc, #412]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801567e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015682:	4a66      	ldr	r2, [pc, #408]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015688:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801568c:	4b63      	ldr	r3, [pc, #396]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801568e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015696:	627b      	str	r3, [r7, #36]	; 0x24
 8015698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801569a:	e0b9      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM13)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	4a60      	ldr	r2, [pc, #384]	; (8015824 <HAL_TIM_Base_MspInit+0x524>)
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d117      	bne.n	80156d6 <HAL_TIM_Base_MspInit+0x3d6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80156a6:	4b5d      	ldr	r3, [pc, #372]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80156ac:	4a5b      	ldr	r2, [pc, #364]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80156b6:	4b59      	ldr	r3, [pc, #356]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80156bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156c0:	623b      	str	r3, [r7, #32]
 80156c2:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80156c4:	2200      	movs	r2, #0
 80156c6:	2100      	movs	r1, #0
 80156c8:	202c      	movs	r0, #44	; 0x2c
 80156ca:	f002 fd86 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80156ce:	202c      	movs	r0, #44	; 0x2c
 80156d0:	f002 fd9d 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 80156d4:	e09c      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM14)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	4a53      	ldr	r2, [pc, #332]	; (8015828 <HAL_TIM_Base_MspInit+0x528>)
 80156dc:	4293      	cmp	r3, r2
 80156de:	d117      	bne.n	8015710 <HAL_TIM_Base_MspInit+0x410>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80156e0:	4b4e      	ldr	r3, [pc, #312]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80156e6:	4a4d      	ldr	r2, [pc, #308]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80156f0:	4b4a      	ldr	r3, [pc, #296]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80156f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80156f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156fa:	61fb      	str	r3, [r7, #28]
 80156fc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80156fe:	2200      	movs	r2, #0
 8015700:	2100      	movs	r1, #0
 8015702:	202d      	movs	r0, #45	; 0x2d
 8015704:	f002 fd69 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8015708:	202d      	movs	r0, #45	; 0x2d
 801570a:	f002 fd80 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 801570e:	e07f      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM15)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	4a45      	ldr	r2, [pc, #276]	; (801582c <HAL_TIM_Base_MspInit+0x52c>)
 8015716:	4293      	cmp	r3, r2
 8015718:	d117      	bne.n	801574a <HAL_TIM_Base_MspInit+0x44a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 801571a:	4b40      	ldr	r3, [pc, #256]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801571c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015720:	4a3e      	ldr	r2, [pc, #248]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015726:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801572a:	4b3c      	ldr	r3, [pc, #240]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801572c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015734:	61bb      	str	r3, [r7, #24]
 8015736:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8015738:	2200      	movs	r2, #0
 801573a:	2100      	movs	r1, #0
 801573c:	2074      	movs	r0, #116	; 0x74
 801573e:	f002 fd4c 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8015742:	2074      	movs	r0, #116	; 0x74
 8015744:	f002 fd63 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 8015748:	e062      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM16)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	4a38      	ldr	r2, [pc, #224]	; (8015830 <HAL_TIM_Base_MspInit+0x530>)
 8015750:	4293      	cmp	r3, r2
 8015752:	d117      	bne.n	8015784 <HAL_TIM_Base_MspInit+0x484>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8015754:	4b31      	ldr	r3, [pc, #196]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801575a:	4a30      	ldr	r2, [pc, #192]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 801575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015760:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015764:	4b2d      	ldr	r3, [pc, #180]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801576e:	617b      	str	r3, [r7, #20]
 8015770:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8015772:	2200      	movs	r2, #0
 8015774:	2100      	movs	r1, #0
 8015776:	2075      	movs	r0, #117	; 0x75
 8015778:	f002 fd2f 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 801577c:	2075      	movs	r0, #117	; 0x75
 801577e:	f002 fd46 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 8015782:	e045      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM17)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4a2a      	ldr	r2, [pc, #168]	; (8015834 <HAL_TIM_Base_MspInit+0x534>)
 801578a:	4293      	cmp	r3, r2
 801578c:	d117      	bne.n	80157be <HAL_TIM_Base_MspInit+0x4be>
    __HAL_RCC_TIM17_CLK_ENABLE();
 801578e:	4b23      	ldr	r3, [pc, #140]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015794:	4a21      	ldr	r2, [pc, #132]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801579a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801579e:	4b1f      	ldr	r3, [pc, #124]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80157a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80157a8:	613b      	str	r3, [r7, #16]
 80157aa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80157ac:	2200      	movs	r2, #0
 80157ae:	2100      	movs	r1, #0
 80157b0:	2076      	movs	r0, #118	; 0x76
 80157b2:	f002 fd12 	bl	80181da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80157b6:	2076      	movs	r0, #118	; 0x76
 80157b8:	f002 fd29 	bl	801820e <HAL_NVIC_EnableIRQ>
}
 80157bc:	e028      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM23)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4a1d      	ldr	r2, [pc, #116]	; (8015838 <HAL_TIM_Base_MspInit+0x538>)
 80157c4:	4293      	cmp	r3, r2
 80157c6:	d10f      	bne.n	80157e8 <HAL_TIM_Base_MspInit+0x4e8>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80157c8:	4b14      	ldr	r3, [pc, #80]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80157ce:	4a13      	ldr	r2, [pc, #76]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80157d4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80157d8:	4b10      	ldr	r3, [pc, #64]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80157de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80157e2:	60fb      	str	r3, [r7, #12]
 80157e4:	68fb      	ldr	r3, [r7, #12]
}
 80157e6:	e013      	b.n	8015810 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM24)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	4a13      	ldr	r2, [pc, #76]	; (801583c <HAL_TIM_Base_MspInit+0x53c>)
 80157ee:	4293      	cmp	r3, r2
 80157f0:	d10e      	bne.n	8015810 <HAL_TIM_Base_MspInit+0x510>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80157f2:	4b0a      	ldr	r3, [pc, #40]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80157f8:	4a08      	ldr	r2, [pc, #32]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 80157fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80157fe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8015802:	4b06      	ldr	r3, [pc, #24]	; (801581c <HAL_TIM_Base_MspInit+0x51c>)
 8015804:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8015808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801580c:	60bb      	str	r3, [r7, #8]
 801580e:	68bb      	ldr	r3, [r7, #8]
}
 8015810:	bf00      	nop
 8015812:	3770      	adds	r7, #112	; 0x70
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	40010400 	.word	0x40010400
 801581c:	58024400 	.word	0x58024400
 8015820:	40001800 	.word	0x40001800
 8015824:	40001c00 	.word	0x40001c00
 8015828:	40002000 	.word	0x40002000
 801582c:	40014000 	.word	0x40014000
 8015830:	40014400 	.word	0x40014400
 8015834:	40014800 	.word	0x40014800
 8015838:	4000e000 	.word	0x4000e000
 801583c:	4000e400 	.word	0x4000e400

08015840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b08c      	sub	sp, #48	; 0x30
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015848:	f107 031c 	add.w	r3, r7, #28
 801584c:	2200      	movs	r2, #0
 801584e:	601a      	str	r2, [r3, #0]
 8015850:	605a      	str	r2, [r3, #4]
 8015852:	609a      	str	r2, [r3, #8]
 8015854:	60da      	str	r2, [r3, #12]
 8015856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	4a66      	ldr	r2, [pc, #408]	; (80159f8 <HAL_TIM_MspPostInit+0x1b8>)
 801585e:	4293      	cmp	r3, r2
 8015860:	d11f      	bne.n	80158a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015862:	4b66      	ldr	r3, [pc, #408]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 8015864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015868:	4a64      	ldr	r2, [pc, #400]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 801586a:	f043 0301 	orr.w	r3, r3, #1
 801586e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015872:	4b62      	ldr	r3, [pc, #392]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 8015874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015878:	f003 0301 	and.w	r3, r3, #1
 801587c:	61bb      	str	r3, [r7, #24]
 801587e:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8015880:	230d      	movs	r3, #13
 8015882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015884:	2302      	movs	r3, #2
 8015886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015888:	2300      	movs	r3, #0
 801588a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801588c:	2300      	movs	r3, #0
 801588e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8015890:	2302      	movs	r3, #2
 8015892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015894:	f107 031c 	add.w	r3, r7, #28
 8015898:	4619      	mov	r1, r3
 801589a:	4859      	ldr	r0, [pc, #356]	; (8015a00 <HAL_TIM_MspPostInit+0x1c0>)
 801589c:	f005 ff02 	bl	801b6a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 80158a0:	e0a5      	b.n	80159ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4a57      	ldr	r2, [pc, #348]	; (8015a04 <HAL_TIM_MspPostInit+0x1c4>)
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d130      	bne.n	801590e <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80158ac:	4b53      	ldr	r3, [pc, #332]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80158ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80158b2:	4a52      	ldr	r2, [pc, #328]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80158b4:	f043 0304 	orr.w	r3, r3, #4
 80158b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80158bc:	4b4f      	ldr	r3, [pc, #316]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80158be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80158c2:	f003 0304 	and.w	r3, r3, #4
 80158c6:	617b      	str	r3, [r7, #20]
 80158c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80158ca:	2340      	movs	r3, #64	; 0x40
 80158cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158ce:	2302      	movs	r3, #2
 80158d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80158d2:	2302      	movs	r3, #2
 80158d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158d6:	2300      	movs	r3, #0
 80158d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80158da:	2303      	movs	r3, #3
 80158dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80158de:	f107 031c 	add.w	r3, r7, #28
 80158e2:	4619      	mov	r1, r3
 80158e4:	4848      	ldr	r0, [pc, #288]	; (8015a08 <HAL_TIM_MspPostInit+0x1c8>)
 80158e6:	f005 fedd 	bl	801b6a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 80158ea:	f44f 7360 	mov.w	r3, #896	; 0x380
 80158ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158f0:	2302      	movs	r3, #2
 80158f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158f4:	2300      	movs	r3, #0
 80158f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158f8:	2300      	movs	r3, #0
 80158fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80158fc:	2303      	movs	r3, #3
 80158fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015900:	f107 031c 	add.w	r3, r7, #28
 8015904:	4619      	mov	r1, r3
 8015906:	4840      	ldr	r0, [pc, #256]	; (8015a08 <HAL_TIM_MspPostInit+0x1c8>)
 8015908:	f005 fecc 	bl	801b6a4 <HAL_GPIO_Init>
}
 801590c:	e06f      	b.n	80159ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	4a3e      	ldr	r2, [pc, #248]	; (8015a0c <HAL_TIM_MspPostInit+0x1cc>)
 8015914:	4293      	cmp	r3, r2
 8015916:	d120      	bne.n	801595a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015918:	4b38      	ldr	r3, [pc, #224]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 801591a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801591e:	4a37      	ldr	r2, [pc, #220]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 8015920:	f043 0302 	orr.w	r3, r3, #2
 8015924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015928:	4b34      	ldr	r3, [pc, #208]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 801592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801592e:	f003 0302 	and.w	r3, r3, #2
 8015932:	613b      	str	r3, [r7, #16]
 8015934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8015936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801593c:	2302      	movs	r3, #2
 801593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015940:	2300      	movs	r3, #0
 8015942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015944:	2300      	movs	r3, #0
 8015946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8015948:	2302      	movs	r3, #2
 801594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 801594c:	f107 031c 	add.w	r3, r7, #28
 8015950:	4619      	mov	r1, r3
 8015952:	482f      	ldr	r0, [pc, #188]	; (8015a10 <HAL_TIM_MspPostInit+0x1d0>)
 8015954:	f005 fea6 	bl	801b6a4 <HAL_GPIO_Init>
}
 8015958:	e049      	b.n	80159ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	4a2d      	ldr	r2, [pc, #180]	; (8015a14 <HAL_TIM_MspPostInit+0x1d4>)
 8015960:	4293      	cmp	r3, r2
 8015962:	d11f      	bne.n	80159a4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8015964:	4b25      	ldr	r3, [pc, #148]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 8015966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801596a:	4a24      	ldr	r2, [pc, #144]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 801596c:	f043 0320 	orr.w	r3, r3, #32
 8015970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015974:	4b21      	ldr	r3, [pc, #132]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 8015976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801597a:	f003 0320 	and.w	r3, r3, #32
 801597e:	60fb      	str	r3, [r7, #12]
 8015980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8015982:	230f      	movs	r3, #15
 8015984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015986:	2302      	movs	r3, #2
 8015988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801598a:	2300      	movs	r3, #0
 801598c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801598e:	2300      	movs	r3, #0
 8015990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8015992:	230d      	movs	r3, #13
 8015994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015996:	f107 031c 	add.w	r3, r7, #28
 801599a:	4619      	mov	r1, r3
 801599c:	481e      	ldr	r0, [pc, #120]	; (8015a18 <HAL_TIM_MspPostInit+0x1d8>)
 801599e:	f005 fe81 	bl	801b6a4 <HAL_GPIO_Init>
}
 80159a2:	e024      	b.n	80159ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4a1c      	ldr	r2, [pc, #112]	; (8015a1c <HAL_TIM_MspPostInit+0x1dc>)
 80159aa:	4293      	cmp	r3, r2
 80159ac:	d11f      	bne.n	80159ee <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80159ae:	4b13      	ldr	r3, [pc, #76]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80159b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80159b4:	4a11      	ldr	r2, [pc, #68]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80159b6:	f043 0320 	orr.w	r3, r3, #32
 80159ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80159be:	4b0f      	ldr	r3, [pc, #60]	; (80159fc <HAL_TIM_MspPostInit+0x1bc>)
 80159c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80159c4:	f003 0320 	and.w	r3, r3, #32
 80159c8:	60bb      	str	r3, [r7, #8]
 80159ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 80159cc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80159d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159d2:	2302      	movs	r3, #2
 80159d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159d6:	2300      	movs	r3, #0
 80159d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159da:	2300      	movs	r3, #0
 80159dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80159de:	230e      	movs	r3, #14
 80159e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80159e2:	f107 031c 	add.w	r3, r7, #28
 80159e6:	4619      	mov	r1, r3
 80159e8:	480b      	ldr	r0, [pc, #44]	; (8015a18 <HAL_TIM_MspPostInit+0x1d8>)
 80159ea:	f005 fe5b 	bl	801b6a4 <HAL_GPIO_Init>
}
 80159ee:	bf00      	nop
 80159f0:	3730      	adds	r7, #48	; 0x30
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	40000c00 	.word	0x40000c00
 80159fc:	58024400 	.word	0x58024400
 8015a00:	58020000 	.word	0x58020000
 8015a04:	40010400 	.word	0x40010400
 8015a08:	58020800 	.word	0x58020800
 8015a0c:	40001800 	.word	0x40001800
 8015a10:	58020400 	.word	0x58020400
 8015a14:	4000e000 	.word	0x4000e000
 8015a18:	58021400 	.word	0x58021400
 8015a1c:	4000e400 	.word	0x4000e400

08015a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015a20:	b480      	push	{r7}
 8015a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015a24:	e7fe      	b.n	8015a24 <NMI_Handler+0x4>

08015a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015a26:	b480      	push	{r7}
 8015a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015a2a:	e7fe      	b.n	8015a2a <HardFault_Handler+0x4>

08015a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015a30:	e7fe      	b.n	8015a30 <MemManage_Handler+0x4>

08015a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015a32:	b480      	push	{r7}
 8015a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015a36:	e7fe      	b.n	8015a36 <BusFault_Handler+0x4>

08015a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015a3c:	e7fe      	b.n	8015a3c <UsageFault_Handler+0x4>

08015a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015a3e:	b480      	push	{r7}
 8015a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015a42:	bf00      	nop
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015a50:	bf00      	nop
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr

08015a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015a5a:	b480      	push	{r7}
 8015a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015a5e:	bf00      	nop
 8015a60:	46bd      	mov	sp, r7
 8015a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a66:	4770      	bx	lr

08015a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015a6c:	f000 fa20 	bl	8015eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015a70:	bf00      	nop
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015a78:	4802      	ldr	r0, [pc, #8]	; (8015a84 <DMA1_Stream1_IRQHandler+0x10>)
 8015a7a:	f003 f9a7 	bl	8018dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8015a7e:	bf00      	nop
 8015a80:	bd80      	pop	{r7, pc}
 8015a82:	bf00      	nop
 8015a84:	24001018 	.word	0x24001018

08015a88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8015a8c:	4802      	ldr	r0, [pc, #8]	; (8015a98 <ADC_IRQHandler+0x10>)
 8015a8e:	f000 ffff 	bl	8016a90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8015a92:	bf00      	nop
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	24000fa8 	.word	0x24000fa8

08015a9c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8015aa0:	4802      	ldr	r0, [pc, #8]	; (8015aac <FDCAN1_IT0_IRQHandler+0x10>)
 8015aa2:	f005 f8f1 	bl	801ac88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8015aa6:	bf00      	nop
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	24001090 	.word	0x24001090

08015ab0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8015ab4:	4802      	ldr	r0, [pc, #8]	; (8015ac0 <FDCAN1_IT1_IRQHandler+0x10>)
 8015ab6:	f005 f8e7 	bl	801ac88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8015aba:	bf00      	nop
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	24001090 	.word	0x24001090

08015ac4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8015ac8:	4802      	ldr	r0, [pc, #8]	; (8015ad4 <TIM1_CC_IRQHandler+0x10>)
 8015aca:	f009 fffd 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8015ace:	bf00      	nop
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	bf00      	nop
 8015ad4:	24001130 	.word	0x24001130

08015ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8015adc:	4802      	ldr	r0, [pc, #8]	; (8015ae8 <TIM2_IRQHandler+0x10>)
 8015ade:	f009 fff3 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8015ae2:	bf00      	nop
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	2400117c 	.word	0x2400117c

08015aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8015af0:	4802      	ldr	r0, [pc, #8]	; (8015afc <TIM3_IRQHandler+0x10>)
 8015af2:	f009 ffe9 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8015af6:	bf00      	nop
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	240011c8 	.word	0x240011c8

08015b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8015b04:	4802      	ldr	r0, [pc, #8]	; (8015b10 <TIM4_IRQHandler+0x10>)
 8015b06:	f009 ffdf 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8015b0a:	bf00      	nop
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	24001214 	.word	0x24001214

08015b14 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015b18:	4803      	ldr	r0, [pc, #12]	; (8015b28 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8015b1a:	f009 ffd5 	bl	801fac8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8015b1e:	4803      	ldr	r0, [pc, #12]	; (8015b2c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8015b20:	f009 ffd2 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8015b24:	bf00      	nop
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	24001344 	.word	0x24001344
 8015b2c:	240013dc 	.word	0x240013dc

08015b30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015b34:	4803      	ldr	r0, [pc, #12]	; (8015b44 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8015b36:	f009 ffc7 	bl	801fac8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8015b3a:	4803      	ldr	r0, [pc, #12]	; (8015b48 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8015b3c:	f009 ffc4 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8015b40:	bf00      	nop
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	24001344 	.word	0x24001344
 8015b48:	24001428 	.word	0x24001428

08015b4c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015b50:	4802      	ldr	r0, [pc, #8]	; (8015b5c <TIM8_CC_IRQHandler+0x10>)
 8015b52:	f009 ffb9 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8015b56:	bf00      	nop
 8015b58:	bd80      	pop	{r7, pc}
 8015b5a:	bf00      	nop
 8015b5c:	24001344 	.word	0x24001344

08015b60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8015b64:	4802      	ldr	r0, [pc, #8]	; (8015b70 <TIM5_IRQHandler+0x10>)
 8015b66:	f009 ffaf 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8015b6a:	bf00      	nop
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	24001260 	.word	0x24001260

08015b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015b78:	4802      	ldr	r0, [pc, #8]	; (8015b84 <TIM6_DAC_IRQHandler+0x10>)
 8015b7a:	f009 ffa5 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8015b7e:	bf00      	nop
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	240012ac 	.word	0x240012ac

08015b88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8015b8c:	4802      	ldr	r0, [pc, #8]	; (8015b98 <TIM7_IRQHandler+0x10>)
 8015b8e:	f009 ff9b 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8015b92:	bf00      	nop
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	240012f8 	.word	0x240012f8

08015b9c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8015ba0:	4802      	ldr	r0, [pc, #8]	; (8015bac <TIM15_IRQHandler+0x10>)
 8015ba2:	f009 ff91 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8015ba6:	bf00      	nop
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	24001474 	.word	0x24001474

08015bb0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8015bb4:	4802      	ldr	r0, [pc, #8]	; (8015bc0 <TIM16_IRQHandler+0x10>)
 8015bb6:	f009 ff87 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8015bba:	bf00      	nop
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	240014c0 	.word	0x240014c0

08015bc4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8015bc8:	4802      	ldr	r0, [pc, #8]	; (8015bd4 <TIM17_IRQHandler+0x10>)
 8015bca:	f009 ff7d 	bl	801fac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8015bce:	bf00      	nop
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	2400150c 	.word	0x2400150c

08015bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	af00      	add	r7, sp, #0
  return 1;
 8015bdc:	2301      	movs	r3, #1
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <_kill>:

int _kill(int pid, int sig)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8015bf2:	f00b fb59 	bl	80212a8 <__errno>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2216      	movs	r2, #22
 8015bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8015bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3708      	adds	r7, #8
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <_exit>:

void _exit (int status)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015c10:	f04f 31ff 	mov.w	r1, #4294967295
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ff ffe7 	bl	8015be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8015c1a:	e7fe      	b.n	8015c1a <_exit+0x12>

08015c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015c24:	4a14      	ldr	r2, [pc, #80]	; (8015c78 <_sbrk+0x5c>)
 8015c26:	4b15      	ldr	r3, [pc, #84]	; (8015c7c <_sbrk+0x60>)
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015c30:	4b13      	ldr	r3, [pc, #76]	; (8015c80 <_sbrk+0x64>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015c38:	4b11      	ldr	r3, [pc, #68]	; (8015c80 <_sbrk+0x64>)
 8015c3a:	4a12      	ldr	r2, [pc, #72]	; (8015c84 <_sbrk+0x68>)
 8015c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015c3e:	4b10      	ldr	r3, [pc, #64]	; (8015c80 <_sbrk+0x64>)
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	4413      	add	r3, r2
 8015c46:	693a      	ldr	r2, [r7, #16]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d207      	bcs.n	8015c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8015c4c:	f00b fb2c 	bl	80212a8 <__errno>
 8015c50:	4603      	mov	r3, r0
 8015c52:	220c      	movs	r2, #12
 8015c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015c56:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5a:	e009      	b.n	8015c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015c5c:	4b08      	ldr	r3, [pc, #32]	; (8015c80 <_sbrk+0x64>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015c62:	4b07      	ldr	r3, [pc, #28]	; (8015c80 <_sbrk+0x64>)
 8015c64:	681a      	ldr	r2, [r3, #0]
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	4413      	add	r3, r2
 8015c6a:	4a05      	ldr	r2, [pc, #20]	; (8015c80 <_sbrk+0x64>)
 8015c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3718      	adds	r7, #24
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	24050000 	.word	0x24050000
 8015c7c:	00000400 	.word	0x00000400
 8015c80:	240015f0 	.word	0x240015f0
 8015c84:	24001610 	.word	0x24001610

08015c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015c88:	b480      	push	{r7}
 8015c8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8015c8c:	4b32      	ldr	r3, [pc, #200]	; (8015d58 <SystemInit+0xd0>)
 8015c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015c92:	4a31      	ldr	r2, [pc, #196]	; (8015d58 <SystemInit+0xd0>)
 8015c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015c9c:	4b2f      	ldr	r3, [pc, #188]	; (8015d5c <SystemInit+0xd4>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f003 030f 	and.w	r3, r3, #15
 8015ca4:	2b06      	cmp	r3, #6
 8015ca6:	d807      	bhi.n	8015cb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015ca8:	4b2c      	ldr	r3, [pc, #176]	; (8015d5c <SystemInit+0xd4>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f023 030f 	bic.w	r3, r3, #15
 8015cb0:	4a2a      	ldr	r2, [pc, #168]	; (8015d5c <SystemInit+0xd4>)
 8015cb2:	f043 0307 	orr.w	r3, r3, #7
 8015cb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8015cb8:	4b29      	ldr	r3, [pc, #164]	; (8015d60 <SystemInit+0xd8>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	4a28      	ldr	r2, [pc, #160]	; (8015d60 <SystemInit+0xd8>)
 8015cbe:	f043 0301 	orr.w	r3, r3, #1
 8015cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015cc4:	4b26      	ldr	r3, [pc, #152]	; (8015d60 <SystemInit+0xd8>)
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8015cca:	4b25      	ldr	r3, [pc, #148]	; (8015d60 <SystemInit+0xd8>)
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	4924      	ldr	r1, [pc, #144]	; (8015d60 <SystemInit+0xd8>)
 8015cd0:	4b24      	ldr	r3, [pc, #144]	; (8015d64 <SystemInit+0xdc>)
 8015cd2:	4013      	ands	r3, r2
 8015cd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015cd6:	4b21      	ldr	r3, [pc, #132]	; (8015d5c <SystemInit+0xd4>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f003 0308 	and.w	r3, r3, #8
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d007      	beq.n	8015cf2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015ce2:	4b1e      	ldr	r3, [pc, #120]	; (8015d5c <SystemInit+0xd4>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	f023 030f 	bic.w	r3, r3, #15
 8015cea:	4a1c      	ldr	r2, [pc, #112]	; (8015d5c <SystemInit+0xd4>)
 8015cec:	f043 0307 	orr.w	r3, r3, #7
 8015cf0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8015cf2:	4b1b      	ldr	r3, [pc, #108]	; (8015d60 <SystemInit+0xd8>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8015cf8:	4b19      	ldr	r3, [pc, #100]	; (8015d60 <SystemInit+0xd8>)
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8015cfe:	4b18      	ldr	r3, [pc, #96]	; (8015d60 <SystemInit+0xd8>)
 8015d00:	2200      	movs	r2, #0
 8015d02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015d04:	4b16      	ldr	r3, [pc, #88]	; (8015d60 <SystemInit+0xd8>)
 8015d06:	4a18      	ldr	r2, [pc, #96]	; (8015d68 <SystemInit+0xe0>)
 8015d08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8015d0a:	4b15      	ldr	r3, [pc, #84]	; (8015d60 <SystemInit+0xd8>)
 8015d0c:	4a17      	ldr	r2, [pc, #92]	; (8015d6c <SystemInit+0xe4>)
 8015d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015d10:	4b13      	ldr	r3, [pc, #76]	; (8015d60 <SystemInit+0xd8>)
 8015d12:	4a17      	ldr	r2, [pc, #92]	; (8015d70 <SystemInit+0xe8>)
 8015d14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8015d16:	4b12      	ldr	r3, [pc, #72]	; (8015d60 <SystemInit+0xd8>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8015d1c:	4b10      	ldr	r3, [pc, #64]	; (8015d60 <SystemInit+0xd8>)
 8015d1e:	4a14      	ldr	r2, [pc, #80]	; (8015d70 <SystemInit+0xe8>)
 8015d20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015d22:	4b0f      	ldr	r3, [pc, #60]	; (8015d60 <SystemInit+0xd8>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015d28:	4b0d      	ldr	r3, [pc, #52]	; (8015d60 <SystemInit+0xd8>)
 8015d2a:	4a11      	ldr	r2, [pc, #68]	; (8015d70 <SystemInit+0xe8>)
 8015d2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8015d2e:	4b0c      	ldr	r3, [pc, #48]	; (8015d60 <SystemInit+0xd8>)
 8015d30:	2200      	movs	r2, #0
 8015d32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015d34:	4b0a      	ldr	r3, [pc, #40]	; (8015d60 <SystemInit+0xd8>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	4a09      	ldr	r2, [pc, #36]	; (8015d60 <SystemInit+0xd8>)
 8015d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015d3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015d40:	4b07      	ldr	r3, [pc, #28]	; (8015d60 <SystemInit+0xd8>)
 8015d42:	2200      	movs	r2, #0
 8015d44:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8015d46:	4b0b      	ldr	r3, [pc, #44]	; (8015d74 <SystemInit+0xec>)
 8015d48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015d4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8015d4e:	bf00      	nop
 8015d50:	46bd      	mov	sp, r7
 8015d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d56:	4770      	bx	lr
 8015d58:	e000ed00 	.word	0xe000ed00
 8015d5c:	52002000 	.word	0x52002000
 8015d60:	58024400 	.word	0x58024400
 8015d64:	eaf6ed7f 	.word	0xeaf6ed7f
 8015d68:	02020200 	.word	0x02020200
 8015d6c:	01ff0000 	.word	0x01ff0000
 8015d70:	01010280 	.word	0x01010280
 8015d74:	52004000 	.word	0x52004000

08015d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8015d7c:	f7ff ff84 	bl	8015c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8015d80:	480c      	ldr	r0, [pc, #48]	; (8015db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8015d82:	490d      	ldr	r1, [pc, #52]	; (8015db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8015d84:	4a0d      	ldr	r2, [pc, #52]	; (8015dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8015d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015d88:	e002      	b.n	8015d90 <LoopCopyDataInit>

08015d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015d8e:	3304      	adds	r3, #4

08015d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015d94:	d3f9      	bcc.n	8015d8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015d96:	4a0a      	ldr	r2, [pc, #40]	; (8015dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8015d98:	4c0a      	ldr	r4, [pc, #40]	; (8015dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8015d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015d9c:	e001      	b.n	8015da2 <LoopFillZerobss>

08015d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015da0:	3204      	adds	r2, #4

08015da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015da4:	d3fb      	bcc.n	8015d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8015da6:	f00b fa85 	bl	80212b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015daa:	f7f8 fe9a 	bl	800eae2 <main>
  bx  lr
 8015dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015db0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8015db4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8015db8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8015dbc:	0802194c 	.word	0x0802194c
  ldr r2, =_sbss
 8015dc0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8015dc4:	2400160c 	.word	0x2400160c

08015dc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015dc8:	e7fe      	b.n	8015dc8 <ADC3_IRQHandler>
	...

08015dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015dd2:	2003      	movs	r0, #3
 8015dd4:	f002 f9f6 	bl	80181c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015dd8:	f006 fc08 	bl	801c5ec <HAL_RCC_GetSysClockFreq>
 8015ddc:	4602      	mov	r2, r0
 8015dde:	4b15      	ldr	r3, [pc, #84]	; (8015e34 <HAL_Init+0x68>)
 8015de0:	699b      	ldr	r3, [r3, #24]
 8015de2:	0a1b      	lsrs	r3, r3, #8
 8015de4:	f003 030f 	and.w	r3, r3, #15
 8015de8:	4913      	ldr	r1, [pc, #76]	; (8015e38 <HAL_Init+0x6c>)
 8015dea:	5ccb      	ldrb	r3, [r1, r3]
 8015dec:	f003 031f 	and.w	r3, r3, #31
 8015df0:	fa22 f303 	lsr.w	r3, r2, r3
 8015df4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015df6:	4b0f      	ldr	r3, [pc, #60]	; (8015e34 <HAL_Init+0x68>)
 8015df8:	699b      	ldr	r3, [r3, #24]
 8015dfa:	f003 030f 	and.w	r3, r3, #15
 8015dfe:	4a0e      	ldr	r2, [pc, #56]	; (8015e38 <HAL_Init+0x6c>)
 8015e00:	5cd3      	ldrb	r3, [r2, r3]
 8015e02:	f003 031f 	and.w	r3, r3, #31
 8015e06:	687a      	ldr	r2, [r7, #4]
 8015e08:	fa22 f303 	lsr.w	r3, r2, r3
 8015e0c:	4a0b      	ldr	r2, [pc, #44]	; (8015e3c <HAL_Init+0x70>)
 8015e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015e10:	4a0b      	ldr	r2, [pc, #44]	; (8015e40 <HAL_Init+0x74>)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8015e16:	2000      	movs	r0, #0
 8015e18:	f000 f814 	bl	8015e44 <HAL_InitTick>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d001      	beq.n	8015e26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8015e22:	2301      	movs	r3, #1
 8015e24:	e002      	b.n	8015e2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8015e26:	f7ff f975 	bl	8015114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	58024400 	.word	0x58024400
 8015e38:	080218c4 	.word	0x080218c4
 8015e3c:	24000008 	.word	0x24000008
 8015e40:	24000004 	.word	0x24000004

08015e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8015e4c:	4b15      	ldr	r3, [pc, #84]	; (8015ea4 <HAL_InitTick+0x60>)
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d101      	bne.n	8015e58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8015e54:	2301      	movs	r3, #1
 8015e56:	e021      	b.n	8015e9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015e58:	4b13      	ldr	r3, [pc, #76]	; (8015ea8 <HAL_InitTick+0x64>)
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	4b11      	ldr	r3, [pc, #68]	; (8015ea4 <HAL_InitTick+0x60>)
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	4619      	mov	r1, r3
 8015e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f002 f9db 	bl	801822a <HAL_SYSTICK_Config>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d001      	beq.n	8015e7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	e00e      	b.n	8015e9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2b0f      	cmp	r3, #15
 8015e82:	d80a      	bhi.n	8015e9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015e84:	2200      	movs	r2, #0
 8015e86:	6879      	ldr	r1, [r7, #4]
 8015e88:	f04f 30ff 	mov.w	r0, #4294967295
 8015e8c:	f002 f9a5 	bl	80181da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015e90:	4a06      	ldr	r2, [pc, #24]	; (8015eac <HAL_InitTick+0x68>)
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015e96:	2300      	movs	r3, #0
 8015e98:	e000      	b.n	8015e9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8015e9a:	2301      	movs	r3, #1
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	24000010 	.word	0x24000010
 8015ea8:	24000004 	.word	0x24000004
 8015eac:	2400000c 	.word	0x2400000c

08015eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015eb4:	4b06      	ldr	r3, [pc, #24]	; (8015ed0 <HAL_IncTick+0x20>)
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	461a      	mov	r2, r3
 8015eba:	4b06      	ldr	r3, [pc, #24]	; (8015ed4 <HAL_IncTick+0x24>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	4a04      	ldr	r2, [pc, #16]	; (8015ed4 <HAL_IncTick+0x24>)
 8015ec2:	6013      	str	r3, [r2, #0]
}
 8015ec4:	bf00      	nop
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	24000010 	.word	0x24000010
 8015ed4:	240015f4 	.word	0x240015f4

08015ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015ed8:	b480      	push	{r7}
 8015eda:	af00      	add	r7, sp, #0
  return uwTick;
 8015edc:	4b03      	ldr	r3, [pc, #12]	; (8015eec <HAL_GetTick+0x14>)
 8015ede:	681b      	ldr	r3, [r3, #0]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee8:	4770      	bx	lr
 8015eea:	bf00      	nop
 8015eec:	240015f4 	.word	0x240015f4

08015ef0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8015ef0:	b480      	push	{r7}
 8015ef2:	b083      	sub	sp, #12
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	689b      	ldr	r3, [r3, #8]
 8015efe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	431a      	orrs	r2, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	609a      	str	r2, [r3, #8]
}
 8015f0a:	bf00      	nop
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr

08015f16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8015f16:	b480      	push	{r7}
 8015f18:	b083      	sub	sp, #12
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
 8015f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	431a      	orrs	r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	609a      	str	r2, [r3, #8]
}
 8015f30:	bf00      	nop
 8015f32:	370c      	adds	r7, #12
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr

08015f3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b083      	sub	sp, #12
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	689b      	ldr	r3, [r3, #8]
 8015f48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	370c      	adds	r7, #12
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr

08015f58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b087      	sub	sp, #28
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	3360      	adds	r3, #96	; 0x60
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	009b      	lsls	r3, r3, #2
 8015f70:	4413      	add	r3, r2
 8015f72:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	4a10      	ldr	r2, [pc, #64]	; (8015fb8 <LL_ADC_SetOffset+0x60>)
 8015f78:	4293      	cmp	r3, r2
 8015f7a:	d10b      	bne.n	8015f94 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	4313      	orrs	r3, r2
 8015f8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8015f92:	e00b      	b.n	8015fac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	430b      	orrs	r3, r1
 8015fa6:	431a      	orrs	r2, r3
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	601a      	str	r2, [r3, #0]
}
 8015fac:	bf00      	nop
 8015fae:	371c      	adds	r7, #28
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb6:	4770      	bx	lr
 8015fb8:	58026000 	.word	0x58026000

08015fbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b085      	sub	sp, #20
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	3360      	adds	r3, #96	; 0x60
 8015fca:	461a      	mov	r2, r3
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	4413      	add	r3, r2
 8015fd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3714      	adds	r7, #20
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr

08015fe8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	60f8      	str	r0, [r7, #12]
 8015ff0:	60b9      	str	r1, [r7, #8]
 8015ff2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	691b      	ldr	r3, [r3, #16]
 8015ff8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	f003 031f 	and.w	r3, r3, #31
 8016002:	6879      	ldr	r1, [r7, #4]
 8016004:	fa01 f303 	lsl.w	r3, r1, r3
 8016008:	431a      	orrs	r2, r3
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	611a      	str	r2, [r3, #16]
}
 801600e:	bf00      	nop
 8016010:	3714      	adds	r7, #20
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr
	...

0801601c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 801601c:	b480      	push	{r7}
 801601e:	b087      	sub	sp, #28
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	4a0c      	ldr	r2, [pc, #48]	; (801605c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 801602c:	4293      	cmp	r3, r2
 801602e:	d00e      	beq.n	801604e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	3360      	adds	r3, #96	; 0x60
 8016034:	461a      	mov	r2, r3
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	4413      	add	r3, r2
 801603c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	431a      	orrs	r2, r3
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	601a      	str	r2, [r3, #0]
  }
}
 801604e:	bf00      	nop
 8016050:	371c      	adds	r7, #28
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop
 801605c:	58026000 	.word	0x58026000

08016060 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8016060:	b480      	push	{r7}
 8016062:	b087      	sub	sp, #28
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	4a0c      	ldr	r2, [pc, #48]	; (80160a0 <LL_ADC_SetOffsetSaturation+0x40>)
 8016070:	4293      	cmp	r3, r2
 8016072:	d10e      	bne.n	8016092 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	3360      	adds	r3, #96	; 0x60
 8016078:	461a      	mov	r2, r3
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	4413      	add	r3, r2
 8016080:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	431a      	orrs	r2, r3
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8016092:	bf00      	nop
 8016094:	371c      	adds	r7, #28
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr
 801609e:	bf00      	nop
 80160a0:	58026000 	.word	0x58026000

080160a4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80160a4:	b480      	push	{r7}
 80160a6:	b087      	sub	sp, #28
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	4a0c      	ldr	r2, [pc, #48]	; (80160e4 <LL_ADC_SetOffsetSign+0x40>)
 80160b4:	4293      	cmp	r3, r2
 80160b6:	d10e      	bne.n	80160d6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	3360      	adds	r3, #96	; 0x60
 80160bc:	461a      	mov	r2, r3
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	009b      	lsls	r3, r3, #2
 80160c2:	4413      	add	r3, r2
 80160c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	431a      	orrs	r2, r3
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80160d6:	bf00      	nop
 80160d8:	371c      	adds	r7, #28
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr
 80160e2:	bf00      	nop
 80160e4:	58026000 	.word	0x58026000

080160e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80160e8:	b480      	push	{r7}
 80160ea:	b087      	sub	sp, #28
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	3360      	adds	r3, #96	; 0x60
 80160f8:	461a      	mov	r2, r3
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	009b      	lsls	r3, r3, #2
 80160fe:	4413      	add	r3, r2
 8016100:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	4a0c      	ldr	r2, [pc, #48]	; (8016138 <LL_ADC_SetOffsetState+0x50>)
 8016106:	4293      	cmp	r3, r2
 8016108:	d108      	bne.n	801611c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	431a      	orrs	r2, r3
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 801611a:	e007      	b.n	801612c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	431a      	orrs	r2, r3
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	601a      	str	r2, [r3, #0]
}
 801612c:	bf00      	nop
 801612e:	371c      	adds	r7, #28
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr
 8016138:	58026000 	.word	0x58026000

0801613c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	68db      	ldr	r3, [r3, #12]
 8016148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801614c:	2b00      	cmp	r3, #0
 801614e:	d101      	bne.n	8016154 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8016150:	2301      	movs	r3, #1
 8016152:	e000      	b.n	8016156 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	370c      	adds	r7, #12
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8016162:	b480      	push	{r7}
 8016164:	b087      	sub	sp, #28
 8016166:	af00      	add	r7, sp, #0
 8016168:	60f8      	str	r0, [r7, #12]
 801616a:	60b9      	str	r1, [r7, #8]
 801616c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3330      	adds	r3, #48	; 0x30
 8016172:	461a      	mov	r2, r3
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	0a1b      	lsrs	r3, r3, #8
 8016178:	009b      	lsls	r3, r3, #2
 801617a:	f003 030c 	and.w	r3, r3, #12
 801617e:	4413      	add	r3, r2
 8016180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	f003 031f 	and.w	r3, r3, #31
 801618c:	211f      	movs	r1, #31
 801618e:	fa01 f303 	lsl.w	r3, r1, r3
 8016192:	43db      	mvns	r3, r3
 8016194:	401a      	ands	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	0e9b      	lsrs	r3, r3, #26
 801619a:	f003 011f 	and.w	r1, r3, #31
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	f003 031f 	and.w	r3, r3, #31
 80161a4:	fa01 f303 	lsl.w	r3, r1, r3
 80161a8:	431a      	orrs	r2, r3
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80161ae:	bf00      	nop
 80161b0:	371c      	adds	r7, #28
 80161b2:	46bd      	mov	sp, r7
 80161b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b8:	4770      	bx	lr

080161ba <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80161ba:	b480      	push	{r7}
 80161bc:	b083      	sub	sp, #12
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
 80161c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	68db      	ldr	r3, [r3, #12]
 80161c8:	f023 0203 	bic.w	r2, r3, #3
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	431a      	orrs	r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	60da      	str	r2, [r3, #12]
}
 80161d4:	bf00      	nop
 80161d6:	370c      	adds	r7, #12
 80161d8:	46bd      	mov	sp, r7
 80161da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161de:	4770      	bx	lr

080161e0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	f043 0201 	orr.w	r2, r3, #1
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	60da      	str	r2, [r3, #12]
}
 80161f4:	bf00      	nop
 80161f6:	370c      	adds	r7, #12
 80161f8:	46bd      	mov	sp, r7
 80161fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fe:	4770      	bx	lr

08016200 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8016200:	b480      	push	{r7}
 8016202:	b083      	sub	sp, #12
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	4a08      	ldr	r2, [pc, #32]	; (8016230 <LL_ADC_REG_SetDMATransferMode+0x30>)
 801620e:	4293      	cmp	r3, r2
 8016210:	d107      	bne.n	8016222 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	68db      	ldr	r3, [r3, #12]
 8016216:	f023 0203 	bic.w	r2, r3, #3
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	431a      	orrs	r2, r3
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	60da      	str	r2, [r3, #12]
  }
}
 8016222:	bf00      	nop
 8016224:	370c      	adds	r7, #12
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr
 801622e:	bf00      	nop
 8016230:	58026000 	.word	0x58026000

08016234 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8016234:	b480      	push	{r7}
 8016236:	b083      	sub	sp, #12
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016240:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8016244:	2b00      	cmp	r3, #0
 8016246:	d101      	bne.n	801624c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8016248:	2301      	movs	r3, #1
 801624a:	e000      	b.n	801624e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801624c:	2300      	movs	r3, #0
}
 801624e:	4618      	mov	r0, r3
 8016250:	370c      	adds	r7, #12
 8016252:	46bd      	mov	sp, r7
 8016254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016258:	4770      	bx	lr

0801625a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801625a:	b480      	push	{r7}
 801625c:	b087      	sub	sp, #28
 801625e:	af00      	add	r7, sp, #0
 8016260:	60f8      	str	r0, [r7, #12]
 8016262:	60b9      	str	r1, [r7, #8]
 8016264:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	3314      	adds	r3, #20
 801626a:	461a      	mov	r2, r3
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	0e5b      	lsrs	r3, r3, #25
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	f003 0304 	and.w	r3, r3, #4
 8016276:	4413      	add	r3, r2
 8016278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	0d1b      	lsrs	r3, r3, #20
 8016282:	f003 031f 	and.w	r3, r3, #31
 8016286:	2107      	movs	r1, #7
 8016288:	fa01 f303 	lsl.w	r3, r1, r3
 801628c:	43db      	mvns	r3, r3
 801628e:	401a      	ands	r2, r3
 8016290:	68bb      	ldr	r3, [r7, #8]
 8016292:	0d1b      	lsrs	r3, r3, #20
 8016294:	f003 031f 	and.w	r3, r3, #31
 8016298:	6879      	ldr	r1, [r7, #4]
 801629a:	fa01 f303 	lsl.w	r3, r1, r3
 801629e:	431a      	orrs	r2, r3
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80162a4:	bf00      	nop
 80162a6:	371c      	adds	r7, #28
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b085      	sub	sp, #20
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	4a1a      	ldr	r2, [pc, #104]	; (8016328 <LL_ADC_SetChannelSingleDiff+0x78>)
 80162c0:	4293      	cmp	r3, r2
 80162c2:	d115      	bne.n	80162f0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80162d0:	43db      	mvns	r3, r3
 80162d2:	401a      	ands	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f003 0318 	and.w	r3, r3, #24
 80162da:	4914      	ldr	r1, [pc, #80]	; (801632c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80162dc:	40d9      	lsrs	r1, r3
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	400b      	ands	r3, r1
 80162e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80162e6:	431a      	orrs	r2, r3
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80162ee:	e014      	b.n	801631a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80162fc:	43db      	mvns	r3, r3
 80162fe:	401a      	ands	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f003 0318 	and.w	r3, r3, #24
 8016306:	4909      	ldr	r1, [pc, #36]	; (801632c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8016308:	40d9      	lsrs	r1, r3
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	400b      	ands	r3, r1
 801630e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016312:	431a      	orrs	r2, r3
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 801631a:	bf00      	nop
 801631c:	3714      	adds	r7, #20
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	58026000 	.word	0x58026000
 801632c:	000fffff 	.word	0x000fffff

08016330 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	f003 031f 	and.w	r3, r3, #31
}
 8016340:	4618      	mov	r0, r3
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	689b      	ldr	r3, [r3, #8]
 8016358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 801635c:	4618      	mov	r0, r3
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	689a      	ldr	r2, [r3, #8]
 8016374:	4b04      	ldr	r3, [pc, #16]	; (8016388 <LL_ADC_DisableDeepPowerDown+0x20>)
 8016376:	4013      	ands	r3, r2
 8016378:	687a      	ldr	r2, [r7, #4]
 801637a:	6093      	str	r3, [r2, #8]
}
 801637c:	bf00      	nop
 801637e:	370c      	adds	r7, #12
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr
 8016388:	5fffffc0 	.word	0x5fffffc0

0801638c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	689b      	ldr	r3, [r3, #8]
 8016398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801639c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80163a0:	d101      	bne.n	80163a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80163a2:	2301      	movs	r3, #1
 80163a4:	e000      	b.n	80163a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	370c      	adds	r7, #12
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	689a      	ldr	r2, [r3, #8]
 80163c0:	4b05      	ldr	r3, [pc, #20]	; (80163d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80163c2:	4013      	ands	r3, r2
 80163c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80163cc:	bf00      	nop
 80163ce:	370c      	adds	r7, #12
 80163d0:	46bd      	mov	sp, r7
 80163d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d6:	4770      	bx	lr
 80163d8:	6fffffc0 	.word	0x6fffffc0

080163dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80163ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80163f0:	d101      	bne.n	80163f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80163f2:	2301      	movs	r3, #1
 80163f4:	e000      	b.n	80163f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	370c      	adds	r7, #12
 80163fc:	46bd      	mov	sp, r7
 80163fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016402:	4770      	bx	lr

08016404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	689a      	ldr	r2, [r3, #8]
 8016410:	4b05      	ldr	r3, [pc, #20]	; (8016428 <LL_ADC_Enable+0x24>)
 8016412:	4013      	ands	r3, r2
 8016414:	f043 0201 	orr.w	r2, r3, #1
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801641c:	bf00      	nop
 801641e:	370c      	adds	r7, #12
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr
 8016428:	7fffffc0 	.word	0x7fffffc0

0801642c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801642c:	b480      	push	{r7}
 801642e:	b083      	sub	sp, #12
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	f003 0301 	and.w	r3, r3, #1
 801643c:	2b01      	cmp	r3, #1
 801643e:	d101      	bne.n	8016444 <LL_ADC_IsEnabled+0x18>
 8016440:	2301      	movs	r3, #1
 8016442:	e000      	b.n	8016446 <LL_ADC_IsEnabled+0x1a>
 8016444:	2300      	movs	r3, #0
}
 8016446:	4618      	mov	r0, r3
 8016448:	370c      	adds	r7, #12
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr
	...

08016454 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	689a      	ldr	r2, [r3, #8]
 8016460:	4b05      	ldr	r3, [pc, #20]	; (8016478 <LL_ADC_REG_StartConversion+0x24>)
 8016462:	4013      	ands	r3, r2
 8016464:	f043 0204 	orr.w	r2, r3, #4
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801646c:	bf00      	nop
 801646e:	370c      	adds	r7, #12
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr
 8016478:	7fffffc0 	.word	0x7fffffc0

0801647c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801647c:	b480      	push	{r7}
 801647e:	b083      	sub	sp, #12
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	689b      	ldr	r3, [r3, #8]
 8016488:	f003 0304 	and.w	r3, r3, #4
 801648c:	2b04      	cmp	r3, #4
 801648e:	d101      	bne.n	8016494 <LL_ADC_REG_IsConversionOngoing+0x18>
 8016490:	2301      	movs	r3, #1
 8016492:	e000      	b.n	8016496 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8016494:	2300      	movs	r3, #0
}
 8016496:	4618      	mov	r0, r3
 8016498:	370c      	adds	r7, #12
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr

080164a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80164a2:	b480      	push	{r7}
 80164a4:	b083      	sub	sp, #12
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	f003 0308 	and.w	r3, r3, #8
 80164b2:	2b08      	cmp	r3, #8
 80164b4:	d101      	bne.n	80164ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80164b6:	2301      	movs	r3, #1
 80164b8:	e000      	b.n	80164bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80164ba:	2300      	movs	r3, #0
}
 80164bc:	4618      	mov	r0, r3
 80164be:	370c      	adds	r7, #12
 80164c0:	46bd      	mov	sp, r7
 80164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c6:	4770      	bx	lr

080164c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80164c8:	b590      	push	{r4, r7, lr}
 80164ca:	b089      	sub	sp, #36	; 0x24
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80164d0:	2300      	movs	r3, #0
 80164d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80164d4:	2300      	movs	r3, #0
 80164d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d101      	bne.n	80164e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80164de:	2301      	movs	r3, #1
 80164e0:	e1ee      	b.n	80168c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	691b      	ldr	r3, [r3, #16]
 80164e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d109      	bne.n	8016504 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f7fe fe29 	bl	8015148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2200      	movs	r2, #0
 80164fa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	4618      	mov	r0, r3
 801650a:	f7ff ff3f 	bl	801638c <LL_ADC_IsDeepPowerDownEnabled>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d004      	beq.n	801651e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	4618      	mov	r0, r3
 801651a:	f7ff ff25 	bl	8016368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4618      	mov	r0, r3
 8016524:	f7ff ff5a 	bl	80163dc <LL_ADC_IsInternalRegulatorEnabled>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d114      	bne.n	8016558 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4618      	mov	r0, r3
 8016534:	f7ff ff3e 	bl	80163b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016538:	4b8e      	ldr	r3, [pc, #568]	; (8016774 <HAL_ADC_Init+0x2ac>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	099b      	lsrs	r3, r3, #6
 801653e:	4a8e      	ldr	r2, [pc, #568]	; (8016778 <HAL_ADC_Init+0x2b0>)
 8016540:	fba2 2303 	umull	r2, r3, r2, r3
 8016544:	099b      	lsrs	r3, r3, #6
 8016546:	3301      	adds	r3, #1
 8016548:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801654a:	e002      	b.n	8016552 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	3b01      	subs	r3, #1
 8016550:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1f9      	bne.n	801654c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4618      	mov	r0, r3
 801655e:	f7ff ff3d 	bl	80163dc <LL_ADC_IsInternalRegulatorEnabled>
 8016562:	4603      	mov	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	d10d      	bne.n	8016584 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801656c:	f043 0210 	orr.w	r2, r3, #16
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016578:	f043 0201 	orr.w	r2, r3, #1
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8016580:	2301      	movs	r3, #1
 8016582:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	4618      	mov	r0, r3
 801658a:	f7ff ff77 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 801658e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016594:	f003 0310 	and.w	r3, r3, #16
 8016598:	2b00      	cmp	r3, #0
 801659a:	f040 8188 	bne.w	80168ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	f040 8184 	bne.w	80168ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80165ae:	f043 0202 	orr.w	r2, r3, #2
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7ff ff36 	bl	801642c <LL_ADC_IsEnabled>
 80165c0:	4603      	mov	r3, r0
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d136      	bne.n	8016634 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4a6c      	ldr	r2, [pc, #432]	; (801677c <HAL_ADC_Init+0x2b4>)
 80165cc:	4293      	cmp	r3, r2
 80165ce:	d004      	beq.n	80165da <HAL_ADC_Init+0x112>
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	4a6a      	ldr	r2, [pc, #424]	; (8016780 <HAL_ADC_Init+0x2b8>)
 80165d6:	4293      	cmp	r3, r2
 80165d8:	d10e      	bne.n	80165f8 <HAL_ADC_Init+0x130>
 80165da:	4868      	ldr	r0, [pc, #416]	; (801677c <HAL_ADC_Init+0x2b4>)
 80165dc:	f7ff ff26 	bl	801642c <LL_ADC_IsEnabled>
 80165e0:	4604      	mov	r4, r0
 80165e2:	4867      	ldr	r0, [pc, #412]	; (8016780 <HAL_ADC_Init+0x2b8>)
 80165e4:	f7ff ff22 	bl	801642c <LL_ADC_IsEnabled>
 80165e8:	4603      	mov	r3, r0
 80165ea:	4323      	orrs	r3, r4
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	bf0c      	ite	eq
 80165f0:	2301      	moveq	r3, #1
 80165f2:	2300      	movne	r3, #0
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	e008      	b.n	801660a <HAL_ADC_Init+0x142>
 80165f8:	4862      	ldr	r0, [pc, #392]	; (8016784 <HAL_ADC_Init+0x2bc>)
 80165fa:	f7ff ff17 	bl	801642c <LL_ADC_IsEnabled>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	bf0c      	ite	eq
 8016604:	2301      	moveq	r3, #1
 8016606:	2300      	movne	r3, #0
 8016608:	b2db      	uxtb	r3, r3
 801660a:	2b00      	cmp	r3, #0
 801660c:	d012      	beq.n	8016634 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	4a5a      	ldr	r2, [pc, #360]	; (801677c <HAL_ADC_Init+0x2b4>)
 8016614:	4293      	cmp	r3, r2
 8016616:	d004      	beq.n	8016622 <HAL_ADC_Init+0x15a>
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	4a58      	ldr	r2, [pc, #352]	; (8016780 <HAL_ADC_Init+0x2b8>)
 801661e:	4293      	cmp	r3, r2
 8016620:	d101      	bne.n	8016626 <HAL_ADC_Init+0x15e>
 8016622:	4a59      	ldr	r2, [pc, #356]	; (8016788 <HAL_ADC_Init+0x2c0>)
 8016624:	e000      	b.n	8016628 <HAL_ADC_Init+0x160>
 8016626:	4a59      	ldr	r2, [pc, #356]	; (801678c <HAL_ADC_Init+0x2c4>)
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	4619      	mov	r1, r3
 801662e:	4610      	mov	r0, r2
 8016630:	f7ff fc5e 	bl	8015ef0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4a52      	ldr	r2, [pc, #328]	; (8016784 <HAL_ADC_Init+0x2bc>)
 801663a:	4293      	cmp	r3, r2
 801663c:	d129      	bne.n	8016692 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	7e5b      	ldrb	r3, [r3, #25]
 8016642:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016648:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 801664e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	689b      	ldr	r3, [r3, #8]
 8016654:	2b08      	cmp	r3, #8
 8016656:	d013      	beq.n	8016680 <HAL_ADC_Init+0x1b8>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	689b      	ldr	r3, [r3, #8]
 801665c:	2b0c      	cmp	r3, #12
 801665e:	d00d      	beq.n	801667c <HAL_ADC_Init+0x1b4>
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	689b      	ldr	r3, [r3, #8]
 8016664:	2b1c      	cmp	r3, #28
 8016666:	d007      	beq.n	8016678 <HAL_ADC_Init+0x1b0>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	689b      	ldr	r3, [r3, #8]
 801666c:	2b18      	cmp	r3, #24
 801666e:	d101      	bne.n	8016674 <HAL_ADC_Init+0x1ac>
 8016670:	2318      	movs	r3, #24
 8016672:	e006      	b.n	8016682 <HAL_ADC_Init+0x1ba>
 8016674:	2300      	movs	r3, #0
 8016676:	e004      	b.n	8016682 <HAL_ADC_Init+0x1ba>
 8016678:	2310      	movs	r3, #16
 801667a:	e002      	b.n	8016682 <HAL_ADC_Init+0x1ba>
 801667c:	2308      	movs	r3, #8
 801667e:	e000      	b.n	8016682 <HAL_ADC_Init+0x1ba>
 8016680:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8016682:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f893 3020 	ldrb.w	r3, [r3, #32]
 801668a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 801668c:	4313      	orrs	r3, r2
 801668e:	61bb      	str	r3, [r7, #24]
 8016690:	e00e      	b.n	80166b0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	7e5b      	ldrb	r3, [r3, #25]
 8016696:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801669c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80166a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80166ac:	4313      	orrs	r3, r2
 80166ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166b6:	2b01      	cmp	r3, #1
 80166b8:	d106      	bne.n	80166c8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166be:	3b01      	subs	r3, #1
 80166c0:	045b      	lsls	r3, r3, #17
 80166c2:	69ba      	ldr	r2, [r7, #24]
 80166c4:	4313      	orrs	r3, r2
 80166c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d009      	beq.n	80166e4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80166de:	69ba      	ldr	r2, [r7, #24]
 80166e0:	4313      	orrs	r3, r2
 80166e2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	4a26      	ldr	r2, [pc, #152]	; (8016784 <HAL_ADC_Init+0x2bc>)
 80166ea:	4293      	cmp	r3, r2
 80166ec:	d115      	bne.n	801671a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	68da      	ldr	r2, [r3, #12]
 80166f4:	4b26      	ldr	r3, [pc, #152]	; (8016790 <HAL_ADC_Init+0x2c8>)
 80166f6:	4013      	ands	r3, r2
 80166f8:	687a      	ldr	r2, [r7, #4]
 80166fa:	6812      	ldr	r2, [r2, #0]
 80166fc:	69b9      	ldr	r1, [r7, #24]
 80166fe:	430b      	orrs	r3, r1
 8016700:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	691b      	ldr	r3, [r3, #16]
 8016708:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	430a      	orrs	r2, r1
 8016716:	611a      	str	r2, [r3, #16]
 8016718:	e009      	b.n	801672e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	68da      	ldr	r2, [r3, #12]
 8016720:	4b1c      	ldr	r3, [pc, #112]	; (8016794 <HAL_ADC_Init+0x2cc>)
 8016722:	4013      	ands	r3, r2
 8016724:	687a      	ldr	r2, [r7, #4]
 8016726:	6812      	ldr	r2, [r2, #0]
 8016728:	69b9      	ldr	r1, [r7, #24]
 801672a:	430b      	orrs	r3, r1
 801672c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4618      	mov	r0, r3
 8016734:	f7ff fea2 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 8016738:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4618      	mov	r0, r3
 8016740:	f7ff feaf 	bl	80164a2 <LL_ADC_INJ_IsConversionOngoing>
 8016744:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	2b00      	cmp	r3, #0
 801674a:	f040 808e 	bne.w	801686a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2b00      	cmp	r3, #0
 8016752:	f040 808a 	bne.w	801686a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	4a0a      	ldr	r2, [pc, #40]	; (8016784 <HAL_ADC_Init+0x2bc>)
 801675c:	4293      	cmp	r3, r2
 801675e:	d11b      	bne.n	8016798 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	7e1b      	ldrb	r3, [r3, #24]
 8016764:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801676c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 801676e:	4313      	orrs	r3, r2
 8016770:	61bb      	str	r3, [r7, #24]
 8016772:	e018      	b.n	80167a6 <HAL_ADC_Init+0x2de>
 8016774:	24000004 	.word	0x24000004
 8016778:	053e2d63 	.word	0x053e2d63
 801677c:	40022000 	.word	0x40022000
 8016780:	40022100 	.word	0x40022100
 8016784:	58026000 	.word	0x58026000
 8016788:	40022300 	.word	0x40022300
 801678c:	58026300 	.word	0x58026300
 8016790:	fff04007 	.word	0xfff04007
 8016794:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	7e1b      	ldrb	r3, [r3, #24]
 801679c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80167a2:	4313      	orrs	r3, r2
 80167a4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	68da      	ldr	r2, [r3, #12]
 80167ac:	4b46      	ldr	r3, [pc, #280]	; (80168c8 <HAL_ADC_Init+0x400>)
 80167ae:	4013      	ands	r3, r2
 80167b0:	687a      	ldr	r2, [r7, #4]
 80167b2:	6812      	ldr	r2, [r2, #0]
 80167b4:	69b9      	ldr	r1, [r7, #24]
 80167b6:	430b      	orrs	r3, r1
 80167b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d137      	bne.n	8016834 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4a3f      	ldr	r2, [pc, #252]	; (80168cc <HAL_ADC_Init+0x404>)
 80167d0:	4293      	cmp	r3, r2
 80167d2:	d116      	bne.n	8016802 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	691a      	ldr	r2, [r3, #16]
 80167da:	4b3d      	ldr	r3, [pc, #244]	; (80168d0 <HAL_ADC_Init+0x408>)
 80167dc:	4013      	ands	r3, r2
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80167e6:	4311      	orrs	r1, r2
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80167ec:	4311      	orrs	r1, r2
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80167f2:	430a      	orrs	r2, r1
 80167f4:	431a      	orrs	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	f042 0201 	orr.w	r2, r2, #1
 80167fe:	611a      	str	r2, [r3, #16]
 8016800:	e020      	b.n	8016844 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	691a      	ldr	r2, [r3, #16]
 8016808:	4b32      	ldr	r3, [pc, #200]	; (80168d4 <HAL_ADC_Init+0x40c>)
 801680a:	4013      	ands	r3, r2
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8016810:	3a01      	subs	r2, #1
 8016812:	0411      	lsls	r1, r2, #16
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016818:	4311      	orrs	r1, r2
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801681e:	4311      	orrs	r1, r2
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8016824:	430a      	orrs	r2, r1
 8016826:	431a      	orrs	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f042 0201 	orr.w	r2, r2, #1
 8016830:	611a      	str	r2, [r3, #16]
 8016832:	e007      	b.n	8016844 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	691a      	ldr	r2, [r3, #16]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f022 0201 	bic.w	r2, r2, #1
 8016842:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	691b      	ldr	r3, [r3, #16]
 801684a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	430a      	orrs	r2, r1
 8016858:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4a1b      	ldr	r2, [pc, #108]	; (80168cc <HAL_ADC_Init+0x404>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d002      	beq.n	801686a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	f001 f9b5 	bl	8017bd4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	2b01      	cmp	r3, #1
 8016870:	d10c      	bne.n	801688c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016878:	f023 010f 	bic.w	r1, r3, #15
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	69db      	ldr	r3, [r3, #28]
 8016880:	1e5a      	subs	r2, r3, #1
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	430a      	orrs	r2, r1
 8016888:	631a      	str	r2, [r3, #48]	; 0x30
 801688a:	e007      	b.n	801689c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f022 020f 	bic.w	r2, r2, #15
 801689a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168a0:	f023 0303 	bic.w	r3, r3, #3
 80168a4:	f043 0201 	orr.w	r2, r3, #1
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	661a      	str	r2, [r3, #96]	; 0x60
 80168ac:	e007      	b.n	80168be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168b2:	f043 0210 	orr.w	r2, r3, #16
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80168be:	7ffb      	ldrb	r3, [r7, #31]
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3724      	adds	r7, #36	; 0x24
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd90      	pop	{r4, r7, pc}
 80168c8:	ffffbffc 	.word	0xffffbffc
 80168cc:	58026000 	.word	0x58026000
 80168d0:	fc00f81f 	.word	0xfc00f81f
 80168d4:	fc00f81e 	.word	0xfc00f81e

080168d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b086      	sub	sp, #24
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	4a60      	ldr	r2, [pc, #384]	; (8016a6c <HAL_ADC_Start_DMA+0x194>)
 80168ea:	4293      	cmp	r3, r2
 80168ec:	d004      	beq.n	80168f8 <HAL_ADC_Start_DMA+0x20>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	4a5f      	ldr	r2, [pc, #380]	; (8016a70 <HAL_ADC_Start_DMA+0x198>)
 80168f4:	4293      	cmp	r3, r2
 80168f6:	d101      	bne.n	80168fc <HAL_ADC_Start_DMA+0x24>
 80168f8:	4b5e      	ldr	r3, [pc, #376]	; (8016a74 <HAL_ADC_Start_DMA+0x19c>)
 80168fa:	e000      	b.n	80168fe <HAL_ADC_Start_DMA+0x26>
 80168fc:	4b5e      	ldr	r3, [pc, #376]	; (8016a78 <HAL_ADC_Start_DMA+0x1a0>)
 80168fe:	4618      	mov	r0, r3
 8016900:	f7ff fd16 	bl	8016330 <LL_ADC_GetMultimode>
 8016904:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	4618      	mov	r0, r3
 801690c:	f7ff fdb6 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	f040 80a2 	bne.w	8016a5c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801691e:	2b01      	cmp	r3, #1
 8016920:	d101      	bne.n	8016926 <HAL_ADC_Start_DMA+0x4e>
 8016922:	2302      	movs	r3, #2
 8016924:	e09d      	b.n	8016a62 <HAL_ADC_Start_DMA+0x18a>
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	2201      	movs	r2, #1
 801692a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d006      	beq.n	8016942 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	2b05      	cmp	r3, #5
 8016938:	d003      	beq.n	8016942 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	2b09      	cmp	r3, #9
 801693e:	f040 8086 	bne.w	8016a4e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8016942:	68f8      	ldr	r0, [r7, #12]
 8016944:	f001 f828 	bl	8017998 <ADC_Enable>
 8016948:	4603      	mov	r3, r0
 801694a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801694c:	7dfb      	ldrb	r3, [r7, #23]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d178      	bne.n	8016a44 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016956:	4b49      	ldr	r3, [pc, #292]	; (8016a7c <HAL_ADC_Start_DMA+0x1a4>)
 8016958:	4013      	ands	r3, r2
 801695a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4a42      	ldr	r2, [pc, #264]	; (8016a70 <HAL_ADC_Start_DMA+0x198>)
 8016968:	4293      	cmp	r3, r2
 801696a:	d002      	beq.n	8016972 <HAL_ADC_Start_DMA+0x9a>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	e000      	b.n	8016974 <HAL_ADC_Start_DMA+0x9c>
 8016972:	4b3e      	ldr	r3, [pc, #248]	; (8016a6c <HAL_ADC_Start_DMA+0x194>)
 8016974:	68fa      	ldr	r2, [r7, #12]
 8016976:	6812      	ldr	r2, [r2, #0]
 8016978:	4293      	cmp	r3, r2
 801697a:	d002      	beq.n	8016982 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d105      	bne.n	801698e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016986:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016996:	2b00      	cmp	r3, #0
 8016998:	d006      	beq.n	80169a8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801699e:	f023 0206 	bic.w	r2, r3, #6
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	665a      	str	r2, [r3, #100]	; 0x64
 80169a6:	e002      	b.n	80169ae <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2200      	movs	r2, #0
 80169ac:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169b2:	4a33      	ldr	r2, [pc, #204]	; (8016a80 <HAL_ADC_Start_DMA+0x1a8>)
 80169b4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169ba:	4a32      	ldr	r2, [pc, #200]	; (8016a84 <HAL_ADC_Start_DMA+0x1ac>)
 80169bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169c2:	4a31      	ldr	r2, [pc, #196]	; (8016a88 <HAL_ADC_Start_DMA+0x1b0>)
 80169c4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	221c      	movs	r2, #28
 80169cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	2200      	movs	r2, #0
 80169d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	685a      	ldr	r2, [r3, #4]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	f042 0210 	orr.w	r2, r2, #16
 80169e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	4a28      	ldr	r2, [pc, #160]	; (8016a8c <HAL_ADC_Start_DMA+0x1b4>)
 80169ec:	4293      	cmp	r3, r2
 80169ee:	d10f      	bne.n	8016a10 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	681a      	ldr	r2, [r3, #0]
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	4619      	mov	r1, r3
 80169fe:	4610      	mov	r0, r2
 8016a00:	f7ff fbfe 	bl	8016200 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ff fbe9 	bl	80161e0 <LL_ADC_EnableDMAReq>
 8016a0e:	e007      	b.n	8016a20 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681a      	ldr	r2, [r3, #0]
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a18:	4619      	mov	r1, r3
 8016a1a:	4610      	mov	r0, r2
 8016a1c:	f7ff fbcd 	bl	80161ba <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	3340      	adds	r3, #64	; 0x40
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	68ba      	ldr	r2, [r7, #8]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f001 ff62 	bl	80188f8 <HAL_DMA_Start_IT>
 8016a34:	4603      	mov	r3, r0
 8016a36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7ff fd09 	bl	8016454 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8016a42:	e00d      	b.n	8016a60 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	2200      	movs	r2, #0
 8016a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8016a4c:	e008      	b.n	8016a60 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	2200      	movs	r2, #0
 8016a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8016a5a:	e001      	b.n	8016a60 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8016a5c:	2302      	movs	r3, #2
 8016a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8016a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3718      	adds	r7, #24
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	40022000 	.word	0x40022000
 8016a70:	40022100 	.word	0x40022100
 8016a74:	40022300 	.word	0x40022300
 8016a78:	58026300 	.word	0x58026300
 8016a7c:	fffff0fe 	.word	0xfffff0fe
 8016a80:	08017aad 	.word	0x08017aad
 8016a84:	08017b85 	.word	0x08017b85
 8016a88:	08017ba1 	.word	0x08017ba1
 8016a8c:	58026000 	.word	0x58026000

08016a90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b08a      	sub	sp, #40	; 0x28
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8016a98:	2300      	movs	r3, #0
 8016a9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a87      	ldr	r2, [pc, #540]	; (8016cd0 <HAL_ADC_IRQHandler+0x240>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d004      	beq.n	8016ac0 <HAL_ADC_IRQHandler+0x30>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4a86      	ldr	r2, [pc, #536]	; (8016cd4 <HAL_ADC_IRQHandler+0x244>)
 8016abc:	4293      	cmp	r3, r2
 8016abe:	d101      	bne.n	8016ac4 <HAL_ADC_IRQHandler+0x34>
 8016ac0:	4b85      	ldr	r3, [pc, #532]	; (8016cd8 <HAL_ADC_IRQHandler+0x248>)
 8016ac2:	e000      	b.n	8016ac6 <HAL_ADC_IRQHandler+0x36>
 8016ac4:	4b85      	ldr	r3, [pc, #532]	; (8016cdc <HAL_ADC_IRQHandler+0x24c>)
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7ff fc32 	bl	8016330 <LL_ADC_GetMultimode>
 8016acc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8016ace:	69fb      	ldr	r3, [r7, #28]
 8016ad0:	f003 0302 	and.w	r3, r3, #2
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d017      	beq.n	8016b08 <HAL_ADC_IRQHandler+0x78>
 8016ad8:	69bb      	ldr	r3, [r7, #24]
 8016ada:	f003 0302 	and.w	r3, r3, #2
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d012      	beq.n	8016b08 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ae6:	f003 0310 	and.w	r3, r3, #16
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d105      	bne.n	8016afa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016af2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	f001 f9a6 	bl	8017e4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2202      	movs	r2, #2
 8016b06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8016b08:	69fb      	ldr	r3, [r7, #28]
 8016b0a:	f003 0304 	and.w	r3, r3, #4
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d004      	beq.n	8016b1c <HAL_ADC_IRQHandler+0x8c>
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	f003 0304 	and.w	r3, r3, #4
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d10a      	bne.n	8016b32 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	f000 8083 	beq.w	8016c2e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8016b28:	69bb      	ldr	r3, [r7, #24]
 8016b2a:	f003 0308 	and.w	r3, r3, #8
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d07d      	beq.n	8016c2e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b36:	f003 0310 	and.w	r3, r3, #16
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d105      	bne.n	8016b4a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7ff faf4 	bl	801613c <LL_ADC_REG_IsTriggerSourceSWStart>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d062      	beq.n	8016c20 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	4a5d      	ldr	r2, [pc, #372]	; (8016cd4 <HAL_ADC_IRQHandler+0x244>)
 8016b60:	4293      	cmp	r3, r2
 8016b62:	d002      	beq.n	8016b6a <HAL_ADC_IRQHandler+0xda>
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	e000      	b.n	8016b6c <HAL_ADC_IRQHandler+0xdc>
 8016b6a:	4b59      	ldr	r3, [pc, #356]	; (8016cd0 <HAL_ADC_IRQHandler+0x240>)
 8016b6c:	687a      	ldr	r2, [r7, #4]
 8016b6e:	6812      	ldr	r2, [r2, #0]
 8016b70:	4293      	cmp	r3, r2
 8016b72:	d008      	beq.n	8016b86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d005      	beq.n	8016b86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	2b05      	cmp	r3, #5
 8016b7e:	d002      	beq.n	8016b86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	2b09      	cmp	r3, #9
 8016b84:	d104      	bne.n	8016b90 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	68db      	ldr	r3, [r3, #12]
 8016b8c:	623b      	str	r3, [r7, #32]
 8016b8e:	e00c      	b.n	8016baa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	4a4f      	ldr	r2, [pc, #316]	; (8016cd4 <HAL_ADC_IRQHandler+0x244>)
 8016b96:	4293      	cmp	r3, r2
 8016b98:	d002      	beq.n	8016ba0 <HAL_ADC_IRQHandler+0x110>
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	e000      	b.n	8016ba2 <HAL_ADC_IRQHandler+0x112>
 8016ba0:	4b4b      	ldr	r3, [pc, #300]	; (8016cd0 <HAL_ADC_IRQHandler+0x240>)
 8016ba2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8016baa:	6a3b      	ldr	r3, [r7, #32]
 8016bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d135      	bne.n	8016c20 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f003 0308 	and.w	r3, r3, #8
 8016bbe:	2b08      	cmp	r3, #8
 8016bc0:	d12e      	bne.n	8016c20 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7ff fc58 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d11a      	bne.n	8016c08 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	685a      	ldr	r2, [r3, #4]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	f022 020c 	bic.w	r2, r2, #12
 8016be0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d112      	bne.n	8016c20 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016bfe:	f043 0201 	orr.w	r2, r3, #1
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	661a      	str	r2, [r3, #96]	; 0x60
 8016c06:	e00b      	b.n	8016c20 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c0c:	f043 0210 	orr.w	r2, r3, #16
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c18:	f043 0201 	orr.w	r2, r3, #1
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f7f7 fd16 	bl	800e652 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	220c      	movs	r2, #12
 8016c2c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	f003 0320 	and.w	r3, r3, #32
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d004      	beq.n	8016c42 <HAL_ADC_IRQHandler+0x1b2>
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	f003 0320 	and.w	r3, r3, #32
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d10b      	bne.n	8016c5a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f000 80a0 	beq.w	8016d8e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f000 809a 	beq.w	8016d8e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c5e:	f003 0310 	and.w	r3, r3, #16
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d105      	bne.n	8016c72 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7ff fadc 	bl	8016234 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8016c7c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7ff fa5a 	bl	801613c <LL_ADC_REG_IsTriggerSourceSWStart>
 8016c88:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	4a11      	ldr	r2, [pc, #68]	; (8016cd4 <HAL_ADC_IRQHandler+0x244>)
 8016c90:	4293      	cmp	r3, r2
 8016c92:	d002      	beq.n	8016c9a <HAL_ADC_IRQHandler+0x20a>
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	e000      	b.n	8016c9c <HAL_ADC_IRQHandler+0x20c>
 8016c9a:	4b0d      	ldr	r3, [pc, #52]	; (8016cd0 <HAL_ADC_IRQHandler+0x240>)
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	6812      	ldr	r2, [r2, #0]
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d008      	beq.n	8016cb6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d005      	beq.n	8016cb6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	2b06      	cmp	r3, #6
 8016cae:	d002      	beq.n	8016cb6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	2b07      	cmp	r3, #7
 8016cb4:	d104      	bne.n	8016cc0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	68db      	ldr	r3, [r3, #12]
 8016cbc:	623b      	str	r3, [r7, #32]
 8016cbe:	e014      	b.n	8016cea <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4a03      	ldr	r2, [pc, #12]	; (8016cd4 <HAL_ADC_IRQHandler+0x244>)
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	d00a      	beq.n	8016ce0 <HAL_ADC_IRQHandler+0x250>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	e008      	b.n	8016ce2 <HAL_ADC_IRQHandler+0x252>
 8016cd0:	40022000 	.word	0x40022000
 8016cd4:	40022100 	.word	0x40022100
 8016cd8:	40022300 	.word	0x40022300
 8016cdc:	58026300 	.word	0x58026300
 8016ce0:	4b84      	ldr	r3, [pc, #528]	; (8016ef4 <HAL_ADC_IRQHandler+0x464>)
 8016ce2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d047      	beq.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8016cf0:	6a3b      	ldr	r3, [r7, #32]
 8016cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d007      	beq.n	8016d0a <HAL_ADC_IRQHandler+0x27a>
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d03f      	beq.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8016d00:	6a3b      	ldr	r3, [r7, #32]
 8016d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d13a      	bne.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d14:	2b40      	cmp	r3, #64	; 0x40
 8016d16:	d133      	bne.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8016d18:	6a3b      	ldr	r3, [r7, #32]
 8016d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d12e      	bne.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff fbbb 	bl	80164a2 <LL_ADC_INJ_IsConversionOngoing>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d11a      	bne.n	8016d68 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	685a      	ldr	r2, [r3, #4]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016d40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d112      	bne.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d5e:	f043 0201 	orr.w	r2, r3, #1
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	661a      	str	r2, [r3, #96]	; 0x60
 8016d66:	e00b      	b.n	8016d80 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d6c:	f043 0210 	orr.w	r2, r3, #16
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d78:	f043 0201 	orr.w	r2, r3, #1
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f001 f83b 	bl	8017dfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2260      	movs	r2, #96	; 0x60
 8016d8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8016d8e:	69fb      	ldr	r3, [r7, #28]
 8016d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d011      	beq.n	8016dbc <HAL_ADC_IRQHandler+0x32c>
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d00c      	beq.n	8016dbc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016da6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 f8b2 	bl	8016f18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2280      	movs	r2, #128	; 0x80
 8016dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8016dbc:	69fb      	ldr	r3, [r7, #28]
 8016dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d012      	beq.n	8016dec <HAL_ADC_IRQHandler+0x35c>
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00d      	beq.n	8016dec <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016dd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f001 f821 	bl	8017e24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d012      	beq.n	8016e1c <HAL_ADC_IRQHandler+0x38c>
 8016df6:	69bb      	ldr	r3, [r7, #24]
 8016df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d00d      	beq.n	8016e1c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f001 f813 	bl	8017e38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8016e1c:	69fb      	ldr	r3, [r7, #28]
 8016e1e:	f003 0310 	and.w	r3, r3, #16
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d043      	beq.n	8016eae <HAL_ADC_IRQHandler+0x41e>
 8016e26:	69bb      	ldr	r3, [r7, #24]
 8016e28:	f003 0310 	and.w	r3, r3, #16
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d03e      	beq.n	8016eae <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d102      	bne.n	8016e3e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8016e3c:	e021      	b.n	8016e82 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d015      	beq.n	8016e70 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	4a2a      	ldr	r2, [pc, #168]	; (8016ef4 <HAL_ADC_IRQHandler+0x464>)
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d004      	beq.n	8016e58 <HAL_ADC_IRQHandler+0x3c8>
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	4a29      	ldr	r2, [pc, #164]	; (8016ef8 <HAL_ADC_IRQHandler+0x468>)
 8016e54:	4293      	cmp	r3, r2
 8016e56:	d101      	bne.n	8016e5c <HAL_ADC_IRQHandler+0x3cc>
 8016e58:	4b28      	ldr	r3, [pc, #160]	; (8016efc <HAL_ADC_IRQHandler+0x46c>)
 8016e5a:	e000      	b.n	8016e5e <HAL_ADC_IRQHandler+0x3ce>
 8016e5c:	4b28      	ldr	r3, [pc, #160]	; (8016f00 <HAL_ADC_IRQHandler+0x470>)
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fa74 	bl	801634c <LL_ADC_GetMultiDMATransfer>
 8016e64:	4603      	mov	r3, r0
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00b      	beq.n	8016e82 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8016e6e:	e008      	b.n	8016e82 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	68db      	ldr	r3, [r3, #12]
 8016e76:	f003 0303 	and.w	r3, r3, #3
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d001      	beq.n	8016e82 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	2b01      	cmp	r3, #1
 8016e86:	d10e      	bne.n	8016ea6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e98:	f043 0202 	orr.w	r2, r3, #2
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f000 f843 	bl	8016f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2210      	movs	r2, #16
 8016eac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8016eae:	69fb      	ldr	r3, [r7, #28]
 8016eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d018      	beq.n	8016eea <HAL_ADC_IRQHandler+0x45a>
 8016eb8:	69bb      	ldr	r3, [r7, #24]
 8016eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d013      	beq.n	8016eea <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ec6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ed2:	f043 0208 	orr.w	r2, r3, #8
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ee2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f000 ff93 	bl	8017e10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8016eea:	bf00      	nop
 8016eec:	3728      	adds	r7, #40	; 0x28
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	40022000 	.word	0x40022000
 8016ef8:	40022100 	.word	0x40022100
 8016efc:	40022300 	.word	0x40022300
 8016f00:	58026300 	.word	0x58026300

08016f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016f04:	b480      	push	{r7}
 8016f06:	b083      	sub	sp, #12
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8016f0c:	bf00      	nop
 8016f0e:	370c      	adds	r7, #12
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b083      	sub	sp, #12
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8016f20:	bf00      	nop
 8016f22:	370c      	adds	r7, #12
 8016f24:	46bd      	mov	sp, r7
 8016f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2a:	4770      	bx	lr

08016f2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016f2c:	b480      	push	{r7}
 8016f2e:	b083      	sub	sp, #12
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016f34:	bf00      	nop
 8016f36:	370c      	adds	r7, #12
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr

08016f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016f40:	b590      	push	{r4, r7, lr}
 8016f42:	b0b9      	sub	sp, #228	; 0xe4
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f5a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	68db      	ldr	r3, [r3, #12]
 8016f60:	4aa9      	ldr	r2, [pc, #676]	; (8017208 <HAL_ADC_ConfigChannel+0x2c8>)
 8016f62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d102      	bne.n	8016f74 <HAL_ADC_ConfigChannel+0x34>
 8016f6e:	2302      	movs	r3, #2
 8016f70:	f000 bcfa 	b.w	8017968 <HAL_ADC_ConfigChannel+0xa28>
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2201      	movs	r2, #1
 8016f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff fa7b 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 8016f86:	4603      	mov	r3, r0
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	f040 84de 	bne.w	801794a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	4a9e      	ldr	r2, [pc, #632]	; (801720c <HAL_ADC_ConfigChannel+0x2cc>)
 8016f94:	4293      	cmp	r3, r2
 8016f96:	d033      	beq.n	8017000 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d108      	bne.n	8016fb6 <HAL_ADC_ConfigChannel+0x76>
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	0e9b      	lsrs	r3, r3, #26
 8016faa:	f003 031f 	and.w	r3, r3, #31
 8016fae:	2201      	movs	r2, #1
 8016fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8016fb4:	e01d      	b.n	8016ff2 <HAL_ADC_ConfigChannel+0xb2>
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016fc2:	fa93 f3a3 	rbit	r3, r3
 8016fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8016fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8016fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d101      	bne.n	8016fde <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8016fda:	2320      	movs	r3, #32
 8016fdc:	e004      	b.n	8016fe8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8016fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016fe2:	fab3 f383 	clz	r3, r3
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 031f 	and.w	r3, r3, #31
 8016fec:	2201      	movs	r2, #1
 8016fee:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	6812      	ldr	r2, [r2, #0]
 8016ff6:	69d1      	ldr	r1, [r2, #28]
 8016ff8:	687a      	ldr	r2, [r7, #4]
 8016ffa:	6812      	ldr	r2, [r2, #0]
 8016ffc:	430b      	orrs	r3, r1
 8016ffe:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6818      	ldr	r0, [r3, #0]
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	6859      	ldr	r1, [r3, #4]
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	461a      	mov	r2, r3
 801700e:	f7ff f8a8 	bl	8016162 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	4618      	mov	r0, r3
 8017018:	f7ff fa30 	bl	801647c <LL_ADC_REG_IsConversionOngoing>
 801701c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	4618      	mov	r0, r3
 8017026:	f7ff fa3c 	bl	80164a2 <LL_ADC_INJ_IsConversionOngoing>
 801702a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801702e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017032:	2b00      	cmp	r3, #0
 8017034:	f040 8270 	bne.w	8017518 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8017038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801703c:	2b00      	cmp	r3, #0
 801703e:	f040 826b 	bne.w	8017518 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6818      	ldr	r0, [r3, #0]
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	6819      	ldr	r1, [r3, #0]
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	689b      	ldr	r3, [r3, #8]
 801704e:	461a      	mov	r2, r3
 8017050:	f7ff f903 	bl	801625a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	4a6c      	ldr	r2, [pc, #432]	; (801720c <HAL_ADC_ConfigChannel+0x2cc>)
 801705a:	4293      	cmp	r3, r2
 801705c:	d10d      	bne.n	801707a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	695a      	ldr	r2, [r3, #20]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	68db      	ldr	r3, [r3, #12]
 8017068:	08db      	lsrs	r3, r3, #3
 801706a:	f003 0303 	and.w	r3, r3, #3
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	fa02 f303 	lsl.w	r3, r2, r3
 8017074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017078:	e032      	b.n	80170e0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801707a:	4b65      	ldr	r3, [pc, #404]	; (8017210 <HAL_ADC_ConfigChannel+0x2d0>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017086:	d10b      	bne.n	80170a0 <HAL_ADC_ConfigChannel+0x160>
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	695a      	ldr	r2, [r3, #20]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	089b      	lsrs	r3, r3, #2
 8017094:	f003 0307 	and.w	r3, r3, #7
 8017098:	005b      	lsls	r3, r3, #1
 801709a:	fa02 f303 	lsl.w	r3, r2, r3
 801709e:	e01d      	b.n	80170dc <HAL_ADC_ConfigChannel+0x19c>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	f003 0310 	and.w	r3, r3, #16
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d10b      	bne.n	80170c6 <HAL_ADC_ConfigChannel+0x186>
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	695a      	ldr	r2, [r3, #20]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	68db      	ldr	r3, [r3, #12]
 80170b8:	089b      	lsrs	r3, r3, #2
 80170ba:	f003 0307 	and.w	r3, r3, #7
 80170be:	005b      	lsls	r3, r3, #1
 80170c0:	fa02 f303 	lsl.w	r3, r2, r3
 80170c4:	e00a      	b.n	80170dc <HAL_ADC_ConfigChannel+0x19c>
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	695a      	ldr	r2, [r3, #20]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	089b      	lsrs	r3, r3, #2
 80170d2:	f003 0304 	and.w	r3, r3, #4
 80170d6:	005b      	lsls	r3, r3, #1
 80170d8:	fa02 f303 	lsl.w	r3, r2, r3
 80170dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	691b      	ldr	r3, [r3, #16]
 80170e4:	2b04      	cmp	r3, #4
 80170e6:	d048      	beq.n	801717a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	6919      	ldr	r1, [r3, #16]
 80170f0:	683b      	ldr	r3, [r7, #0]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80170f8:	f7fe ff2e 	bl	8015f58 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4a42      	ldr	r2, [pc, #264]	; (801720c <HAL_ADC_ConfigChannel+0x2cc>)
 8017102:	4293      	cmp	r3, r2
 8017104:	d119      	bne.n	801713a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	6919      	ldr	r1, [r3, #16]
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	69db      	ldr	r3, [r3, #28]
 8017112:	461a      	mov	r2, r3
 8017114:	f7fe ffc6 	bl	80160a4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	6818      	ldr	r0, [r3, #0]
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	6919      	ldr	r1, [r3, #16]
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017126:	2b01      	cmp	r3, #1
 8017128:	d102      	bne.n	8017130 <HAL_ADC_ConfigChannel+0x1f0>
 801712a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801712e:	e000      	b.n	8017132 <HAL_ADC_ConfigChannel+0x1f2>
 8017130:	2300      	movs	r3, #0
 8017132:	461a      	mov	r2, r3
 8017134:	f7fe ff94 	bl	8016060 <LL_ADC_SetOffsetSaturation>
 8017138:	e1ee      	b.n	8017518 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6818      	ldr	r0, [r3, #0]
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	6919      	ldr	r1, [r3, #16]
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017148:	2b01      	cmp	r3, #1
 801714a:	d102      	bne.n	8017152 <HAL_ADC_ConfigChannel+0x212>
 801714c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017150:	e000      	b.n	8017154 <HAL_ADC_ConfigChannel+0x214>
 8017152:	2300      	movs	r3, #0
 8017154:	461a      	mov	r2, r3
 8017156:	f7fe ff61 	bl	801601c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	6818      	ldr	r0, [r3, #0]
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	6919      	ldr	r1, [r3, #16]
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	7e1b      	ldrb	r3, [r3, #24]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d102      	bne.n	8017170 <HAL_ADC_ConfigChannel+0x230>
 801716a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801716e:	e000      	b.n	8017172 <HAL_ADC_ConfigChannel+0x232>
 8017170:	2300      	movs	r3, #0
 8017172:	461a      	mov	r2, r3
 8017174:	f7fe ff38 	bl	8015fe8 <LL_ADC_SetDataRightShift>
 8017178:	e1ce      	b.n	8017518 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	4a23      	ldr	r2, [pc, #140]	; (801720c <HAL_ADC_ConfigChannel+0x2cc>)
 8017180:	4293      	cmp	r3, r2
 8017182:	f040 8181 	bne.w	8017488 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2100      	movs	r1, #0
 801718c:	4618      	mov	r0, r3
 801718e:	f7fe ff15 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017192:	4603      	mov	r3, r0
 8017194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017198:	2b00      	cmp	r3, #0
 801719a:	d10a      	bne.n	80171b2 <HAL_ADC_ConfigChannel+0x272>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2100      	movs	r1, #0
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7fe ff0a 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 80171a8:	4603      	mov	r3, r0
 80171aa:	0e9b      	lsrs	r3, r3, #26
 80171ac:	f003 021f 	and.w	r2, r3, #31
 80171b0:	e01e      	b.n	80171f0 <HAL_ADC_ConfigChannel+0x2b0>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2100      	movs	r1, #0
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7fe feff 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 80171be:	4603      	mov	r3, r0
 80171c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80171c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80171c8:	fa93 f3a3 	rbit	r3, r3
 80171cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80171d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80171d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80171d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d101      	bne.n	80171e4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80171e0:	2320      	movs	r3, #32
 80171e2:	e004      	b.n	80171ee <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80171e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80171e8:	fab3 f383 	clz	r3, r3
 80171ec:	b2db      	uxtb	r3, r3
 80171ee:	461a      	mov	r2, r3
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10b      	bne.n	8017214 <HAL_ADC_ConfigChannel+0x2d4>
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	0e9b      	lsrs	r3, r3, #26
 8017202:	f003 031f 	and.w	r3, r3, #31
 8017206:	e01e      	b.n	8017246 <HAL_ADC_ConfigChannel+0x306>
 8017208:	47ff0000 	.word	0x47ff0000
 801720c:	58026000 	.word	0x58026000
 8017210:	5c001000 	.word	0x5c001000
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801721c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017220:	fa93 f3a3 	rbit	r3, r3
 8017224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8017228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801722c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8017230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017234:	2b00      	cmp	r3, #0
 8017236:	d101      	bne.n	801723c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8017238:	2320      	movs	r3, #32
 801723a:	e004      	b.n	8017246 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 801723c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017240:	fab3 f383 	clz	r3, r3
 8017244:	b2db      	uxtb	r3, r3
 8017246:	429a      	cmp	r2, r3
 8017248:	d106      	bne.n	8017258 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2200      	movs	r2, #0
 8017250:	2100      	movs	r1, #0
 8017252:	4618      	mov	r0, r3
 8017254:	f7fe ff48 	bl	80160e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2101      	movs	r1, #1
 801725e:	4618      	mov	r0, r3
 8017260:	f7fe feac 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017264:	4603      	mov	r3, r0
 8017266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801726a:	2b00      	cmp	r3, #0
 801726c:	d10a      	bne.n	8017284 <HAL_ADC_ConfigChannel+0x344>
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	2101      	movs	r1, #1
 8017274:	4618      	mov	r0, r3
 8017276:	f7fe fea1 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 801727a:	4603      	mov	r3, r0
 801727c:	0e9b      	lsrs	r3, r3, #26
 801727e:	f003 021f 	and.w	r2, r3, #31
 8017282:	e01e      	b.n	80172c2 <HAL_ADC_ConfigChannel+0x382>
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	2101      	movs	r1, #1
 801728a:	4618      	mov	r0, r3
 801728c:	f7fe fe96 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017290:	4603      	mov	r3, r0
 8017292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801729a:	fa93 f3a3 	rbit	r3, r3
 801729e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80172a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80172a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80172aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d101      	bne.n	80172b6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80172b2:	2320      	movs	r3, #32
 80172b4:	e004      	b.n	80172c0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80172b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80172ba:	fab3 f383 	clz	r3, r3
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	461a      	mov	r2, r3
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d105      	bne.n	80172da <HAL_ADC_ConfigChannel+0x39a>
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	0e9b      	lsrs	r3, r3, #26
 80172d4:	f003 031f 	and.w	r3, r3, #31
 80172d8:	e018      	b.n	801730c <HAL_ADC_ConfigChannel+0x3cc>
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80172e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80172e6:	fa93 f3a3 	rbit	r3, r3
 80172ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80172ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80172f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80172f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d101      	bne.n	8017302 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80172fe:	2320      	movs	r3, #32
 8017300:	e004      	b.n	801730c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8017302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017306:	fab3 f383 	clz	r3, r3
 801730a:	b2db      	uxtb	r3, r3
 801730c:	429a      	cmp	r2, r3
 801730e:	d106      	bne.n	801731e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	2200      	movs	r2, #0
 8017316:	2101      	movs	r1, #1
 8017318:	4618      	mov	r0, r3
 801731a:	f7fe fee5 	bl	80160e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2102      	movs	r1, #2
 8017324:	4618      	mov	r0, r3
 8017326:	f7fe fe49 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 801732a:	4603      	mov	r3, r0
 801732c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017330:	2b00      	cmp	r3, #0
 8017332:	d10a      	bne.n	801734a <HAL_ADC_ConfigChannel+0x40a>
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2102      	movs	r1, #2
 801733a:	4618      	mov	r0, r3
 801733c:	f7fe fe3e 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017340:	4603      	mov	r3, r0
 8017342:	0e9b      	lsrs	r3, r3, #26
 8017344:	f003 021f 	and.w	r2, r3, #31
 8017348:	e01e      	b.n	8017388 <HAL_ADC_ConfigChannel+0x448>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	2102      	movs	r1, #2
 8017350:	4618      	mov	r0, r3
 8017352:	f7fe fe33 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017356:	4603      	mov	r3, r0
 8017358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801735c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017360:	fa93 f3a3 	rbit	r3, r3
 8017364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8017368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801736c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8017370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017374:	2b00      	cmp	r3, #0
 8017376:	d101      	bne.n	801737c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8017378:	2320      	movs	r3, #32
 801737a:	e004      	b.n	8017386 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 801737c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017380:	fab3 f383 	clz	r3, r3
 8017384:	b2db      	uxtb	r3, r3
 8017386:	461a      	mov	r2, r3
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017390:	2b00      	cmp	r3, #0
 8017392:	d105      	bne.n	80173a0 <HAL_ADC_ConfigChannel+0x460>
 8017394:	683b      	ldr	r3, [r7, #0]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	0e9b      	lsrs	r3, r3, #26
 801739a:	f003 031f 	and.w	r3, r3, #31
 801739e:	e014      	b.n	80173ca <HAL_ADC_ConfigChannel+0x48a>
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80173a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173a8:	fa93 f3a3 	rbit	r3, r3
 80173ac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80173ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80173b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80173b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d101      	bne.n	80173c0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80173bc:	2320      	movs	r3, #32
 80173be:	e004      	b.n	80173ca <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80173c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80173c4:	fab3 f383 	clz	r3, r3
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d106      	bne.n	80173dc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	2200      	movs	r2, #0
 80173d4:	2102      	movs	r1, #2
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fe fe86 	bl	80160e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	2103      	movs	r1, #3
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7fe fdea 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 80173e8:	4603      	mov	r3, r0
 80173ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d10a      	bne.n	8017408 <HAL_ADC_ConfigChannel+0x4c8>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	2103      	movs	r1, #3
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7fe fddf 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 80173fe:	4603      	mov	r3, r0
 8017400:	0e9b      	lsrs	r3, r3, #26
 8017402:	f003 021f 	and.w	r2, r3, #31
 8017406:	e017      	b.n	8017438 <HAL_ADC_ConfigChannel+0x4f8>
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2103      	movs	r1, #3
 801740e:	4618      	mov	r0, r3
 8017410:	f7fe fdd4 	bl	8015fbc <LL_ADC_GetOffsetChannel>
 8017414:	4603      	mov	r3, r0
 8017416:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801741a:	fa93 f3a3 	rbit	r3, r3
 801741e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8017420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017422:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8017424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017426:	2b00      	cmp	r3, #0
 8017428:	d101      	bne.n	801742e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 801742a:	2320      	movs	r3, #32
 801742c:	e003      	b.n	8017436 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 801742e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017430:	fab3 f383 	clz	r3, r3
 8017434:	b2db      	uxtb	r3, r3
 8017436:	461a      	mov	r2, r3
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017440:	2b00      	cmp	r3, #0
 8017442:	d105      	bne.n	8017450 <HAL_ADC_ConfigChannel+0x510>
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	0e9b      	lsrs	r3, r3, #26
 801744a:	f003 031f 	and.w	r3, r3, #31
 801744e:	e011      	b.n	8017474 <HAL_ADC_ConfigChannel+0x534>
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017458:	fa93 f3a3 	rbit	r3, r3
 801745c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 801745e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017460:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8017462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017464:	2b00      	cmp	r3, #0
 8017466:	d101      	bne.n	801746c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8017468:	2320      	movs	r3, #32
 801746a:	e003      	b.n	8017474 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 801746c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801746e:	fab3 f383 	clz	r3, r3
 8017472:	b2db      	uxtb	r3, r3
 8017474:	429a      	cmp	r2, r3
 8017476:	d14f      	bne.n	8017518 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2200      	movs	r2, #0
 801747e:	2103      	movs	r1, #3
 8017480:	4618      	mov	r0, r3
 8017482:	f7fe fe31 	bl	80160e8 <LL_ADC_SetOffsetState>
 8017486:	e047      	b.n	8017518 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801748e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	069b      	lsls	r3, r3, #26
 8017498:	429a      	cmp	r2, r3
 801749a:	d107      	bne.n	80174ac <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80174aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80174b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	069b      	lsls	r3, r3, #26
 80174bc:	429a      	cmp	r2, r3
 80174be:	d107      	bne.n	80174d0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80174ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80174d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	069b      	lsls	r3, r3, #26
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d107      	bne.n	80174f4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80174f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	069b      	lsls	r3, r3, #26
 8017504:	429a      	cmp	r2, r3
 8017506:	d107      	bne.n	8017518 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8017516:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	4618      	mov	r0, r3
 801751e:	f7fe ff85 	bl	801642c <LL_ADC_IsEnabled>
 8017522:	4603      	mov	r3, r0
 8017524:	2b00      	cmp	r3, #0
 8017526:	f040 8219 	bne.w	801795c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	6818      	ldr	r0, [r3, #0]
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	6819      	ldr	r1, [r3, #0]
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	461a      	mov	r2, r3
 8017538:	f7fe feba 	bl	80162b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	4aa1      	ldr	r2, [pc, #644]	; (80177c8 <HAL_ADC_ConfigChannel+0x888>)
 8017542:	4293      	cmp	r3, r2
 8017544:	f040 812e 	bne.w	80177a4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017554:	2b00      	cmp	r3, #0
 8017556:	d10b      	bne.n	8017570 <HAL_ADC_ConfigChannel+0x630>
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	0e9b      	lsrs	r3, r3, #26
 801755e:	3301      	adds	r3, #1
 8017560:	f003 031f 	and.w	r3, r3, #31
 8017564:	2b09      	cmp	r3, #9
 8017566:	bf94      	ite	ls
 8017568:	2301      	movls	r3, #1
 801756a:	2300      	movhi	r3, #0
 801756c:	b2db      	uxtb	r3, r3
 801756e:	e019      	b.n	80175a4 <HAL_ADC_ConfigChannel+0x664>
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017578:	fa93 f3a3 	rbit	r3, r3
 801757c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 801757e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017580:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8017582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017584:	2b00      	cmp	r3, #0
 8017586:	d101      	bne.n	801758c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8017588:	2320      	movs	r3, #32
 801758a:	e003      	b.n	8017594 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 801758c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801758e:	fab3 f383 	clz	r3, r3
 8017592:	b2db      	uxtb	r3, r3
 8017594:	3301      	adds	r3, #1
 8017596:	f003 031f 	and.w	r3, r3, #31
 801759a:	2b09      	cmp	r3, #9
 801759c:	bf94      	ite	ls
 801759e:	2301      	movls	r3, #1
 80175a0:	2300      	movhi	r3, #0
 80175a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d079      	beq.n	801769c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d107      	bne.n	80175c4 <HAL_ADC_ConfigChannel+0x684>
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	0e9b      	lsrs	r3, r3, #26
 80175ba:	3301      	adds	r3, #1
 80175bc:	069b      	lsls	r3, r3, #26
 80175be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80175c2:	e015      	b.n	80175f0 <HAL_ADC_ConfigChannel+0x6b0>
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80175ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175cc:	fa93 f3a3 	rbit	r3, r3
 80175d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80175d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80175d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d101      	bne.n	80175e0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80175dc:	2320      	movs	r3, #32
 80175de:	e003      	b.n	80175e8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80175e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175e2:	fab3 f383 	clz	r3, r3
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	3301      	adds	r3, #1
 80175ea:	069b      	lsls	r3, r3, #26
 80175ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d109      	bne.n	8017610 <HAL_ADC_ConfigChannel+0x6d0>
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	0e9b      	lsrs	r3, r3, #26
 8017602:	3301      	adds	r3, #1
 8017604:	f003 031f 	and.w	r3, r3, #31
 8017608:	2101      	movs	r1, #1
 801760a:	fa01 f303 	lsl.w	r3, r1, r3
 801760e:	e017      	b.n	8017640 <HAL_ADC_ConfigChannel+0x700>
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017618:	fa93 f3a3 	rbit	r3, r3
 801761c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 801761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017620:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8017622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017624:	2b00      	cmp	r3, #0
 8017626:	d101      	bne.n	801762c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8017628:	2320      	movs	r3, #32
 801762a:	e003      	b.n	8017634 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 801762c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801762e:	fab3 f383 	clz	r3, r3
 8017632:	b2db      	uxtb	r3, r3
 8017634:	3301      	adds	r3, #1
 8017636:	f003 031f 	and.w	r3, r3, #31
 801763a:	2101      	movs	r1, #1
 801763c:	fa01 f303 	lsl.w	r3, r1, r3
 8017640:	ea42 0103 	orr.w	r1, r2, r3
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801764c:	2b00      	cmp	r3, #0
 801764e:	d10a      	bne.n	8017666 <HAL_ADC_ConfigChannel+0x726>
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	0e9b      	lsrs	r3, r3, #26
 8017656:	3301      	adds	r3, #1
 8017658:	f003 021f 	and.w	r2, r3, #31
 801765c:	4613      	mov	r3, r2
 801765e:	005b      	lsls	r3, r3, #1
 8017660:	4413      	add	r3, r2
 8017662:	051b      	lsls	r3, r3, #20
 8017664:	e018      	b.n	8017698 <HAL_ADC_ConfigChannel+0x758>
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801766e:	fa93 f3a3 	rbit	r3, r3
 8017672:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8017674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017676:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8017678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801767a:	2b00      	cmp	r3, #0
 801767c:	d101      	bne.n	8017682 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 801767e:	2320      	movs	r3, #32
 8017680:	e003      	b.n	801768a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8017682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017684:	fab3 f383 	clz	r3, r3
 8017688:	b2db      	uxtb	r3, r3
 801768a:	3301      	adds	r3, #1
 801768c:	f003 021f 	and.w	r2, r3, #31
 8017690:	4613      	mov	r3, r2
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	4413      	add	r3, r2
 8017696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017698:	430b      	orrs	r3, r1
 801769a:	e07e      	b.n	801779a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d107      	bne.n	80176b8 <HAL_ADC_ConfigChannel+0x778>
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	0e9b      	lsrs	r3, r3, #26
 80176ae:	3301      	adds	r3, #1
 80176b0:	069b      	lsls	r3, r3, #26
 80176b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80176b6:	e015      	b.n	80176e4 <HAL_ADC_ConfigChannel+0x7a4>
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80176be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c0:	fa93 f3a3 	rbit	r3, r3
 80176c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80176c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80176ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d101      	bne.n	80176d4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80176d0:	2320      	movs	r3, #32
 80176d2:	e003      	b.n	80176dc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80176d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d6:	fab3 f383 	clz	r3, r3
 80176da:	b2db      	uxtb	r3, r3
 80176dc:	3301      	adds	r3, #1
 80176de:	069b      	lsls	r3, r3, #26
 80176e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d109      	bne.n	8017704 <HAL_ADC_ConfigChannel+0x7c4>
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	0e9b      	lsrs	r3, r3, #26
 80176f6:	3301      	adds	r3, #1
 80176f8:	f003 031f 	and.w	r3, r3, #31
 80176fc:	2101      	movs	r1, #1
 80176fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017702:	e017      	b.n	8017734 <HAL_ADC_ConfigChannel+0x7f4>
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801770a:	69fb      	ldr	r3, [r7, #28]
 801770c:	fa93 f3a3 	rbit	r3, r3
 8017710:	61bb      	str	r3, [r7, #24]
  return result;
 8017712:	69bb      	ldr	r3, [r7, #24]
 8017714:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8017716:	6a3b      	ldr	r3, [r7, #32]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d101      	bne.n	8017720 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 801771c:	2320      	movs	r3, #32
 801771e:	e003      	b.n	8017728 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8017720:	6a3b      	ldr	r3, [r7, #32]
 8017722:	fab3 f383 	clz	r3, r3
 8017726:	b2db      	uxtb	r3, r3
 8017728:	3301      	adds	r3, #1
 801772a:	f003 031f 	and.w	r3, r3, #31
 801772e:	2101      	movs	r1, #1
 8017730:	fa01 f303 	lsl.w	r3, r1, r3
 8017734:	ea42 0103 	orr.w	r1, r2, r3
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017740:	2b00      	cmp	r3, #0
 8017742:	d10d      	bne.n	8017760 <HAL_ADC_ConfigChannel+0x820>
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	0e9b      	lsrs	r3, r3, #26
 801774a:	3301      	adds	r3, #1
 801774c:	f003 021f 	and.w	r2, r3, #31
 8017750:	4613      	mov	r3, r2
 8017752:	005b      	lsls	r3, r3, #1
 8017754:	4413      	add	r3, r2
 8017756:	3b1e      	subs	r3, #30
 8017758:	051b      	lsls	r3, r3, #20
 801775a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801775e:	e01b      	b.n	8017798 <HAL_ADC_ConfigChannel+0x858>
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017766:	693b      	ldr	r3, [r7, #16]
 8017768:	fa93 f3a3 	rbit	r3, r3
 801776c:	60fb      	str	r3, [r7, #12]
  return result;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8017772:	697b      	ldr	r3, [r7, #20]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d101      	bne.n	801777c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8017778:	2320      	movs	r3, #32
 801777a:	e003      	b.n	8017784 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 801777c:	697b      	ldr	r3, [r7, #20]
 801777e:	fab3 f383 	clz	r3, r3
 8017782:	b2db      	uxtb	r3, r3
 8017784:	3301      	adds	r3, #1
 8017786:	f003 021f 	and.w	r2, r3, #31
 801778a:	4613      	mov	r3, r2
 801778c:	005b      	lsls	r3, r3, #1
 801778e:	4413      	add	r3, r2
 8017790:	3b1e      	subs	r3, #30
 8017792:	051b      	lsls	r3, r3, #20
 8017794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017798:	430b      	orrs	r3, r1
 801779a:	683a      	ldr	r2, [r7, #0]
 801779c:	6892      	ldr	r2, [r2, #8]
 801779e:	4619      	mov	r1, r3
 80177a0:	f7fe fd5b 	bl	801625a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f280 80d7 	bge.w	801795c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	4a06      	ldr	r2, [pc, #24]	; (80177cc <HAL_ADC_ConfigChannel+0x88c>)
 80177b4:	4293      	cmp	r3, r2
 80177b6:	d004      	beq.n	80177c2 <HAL_ADC_ConfigChannel+0x882>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	4a04      	ldr	r2, [pc, #16]	; (80177d0 <HAL_ADC_ConfigChannel+0x890>)
 80177be:	4293      	cmp	r3, r2
 80177c0:	d10a      	bne.n	80177d8 <HAL_ADC_ConfigChannel+0x898>
 80177c2:	4b04      	ldr	r3, [pc, #16]	; (80177d4 <HAL_ADC_ConfigChannel+0x894>)
 80177c4:	e009      	b.n	80177da <HAL_ADC_ConfigChannel+0x89a>
 80177c6:	bf00      	nop
 80177c8:	47ff0000 	.word	0x47ff0000
 80177cc:	40022000 	.word	0x40022000
 80177d0:	40022100 	.word	0x40022100
 80177d4:	40022300 	.word	0x40022300
 80177d8:	4b65      	ldr	r3, [pc, #404]	; (8017970 <HAL_ADC_ConfigChannel+0xa30>)
 80177da:	4618      	mov	r0, r3
 80177dc:	f7fe fbae 	bl	8015f3c <LL_ADC_GetCommonPathInternalCh>
 80177e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4a62      	ldr	r2, [pc, #392]	; (8017974 <HAL_ADC_ConfigChannel+0xa34>)
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d004      	beq.n	80177f8 <HAL_ADC_ConfigChannel+0x8b8>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4a61      	ldr	r2, [pc, #388]	; (8017978 <HAL_ADC_ConfigChannel+0xa38>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d10e      	bne.n	8017816 <HAL_ADC_ConfigChannel+0x8d6>
 80177f8:	485e      	ldr	r0, [pc, #376]	; (8017974 <HAL_ADC_ConfigChannel+0xa34>)
 80177fa:	f7fe fe17 	bl	801642c <LL_ADC_IsEnabled>
 80177fe:	4604      	mov	r4, r0
 8017800:	485d      	ldr	r0, [pc, #372]	; (8017978 <HAL_ADC_ConfigChannel+0xa38>)
 8017802:	f7fe fe13 	bl	801642c <LL_ADC_IsEnabled>
 8017806:	4603      	mov	r3, r0
 8017808:	4323      	orrs	r3, r4
 801780a:	2b00      	cmp	r3, #0
 801780c:	bf0c      	ite	eq
 801780e:	2301      	moveq	r3, #1
 8017810:	2300      	movne	r3, #0
 8017812:	b2db      	uxtb	r3, r3
 8017814:	e008      	b.n	8017828 <HAL_ADC_ConfigChannel+0x8e8>
 8017816:	4859      	ldr	r0, [pc, #356]	; (801797c <HAL_ADC_ConfigChannel+0xa3c>)
 8017818:	f7fe fe08 	bl	801642c <LL_ADC_IsEnabled>
 801781c:	4603      	mov	r3, r0
 801781e:	2b00      	cmp	r3, #0
 8017820:	bf0c      	ite	eq
 8017822:	2301      	moveq	r3, #1
 8017824:	2300      	movne	r3, #0
 8017826:	b2db      	uxtb	r3, r3
 8017828:	2b00      	cmp	r3, #0
 801782a:	f000 8084 	beq.w	8017936 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	4a53      	ldr	r2, [pc, #332]	; (8017980 <HAL_ADC_ConfigChannel+0xa40>)
 8017834:	4293      	cmp	r3, r2
 8017836:	d132      	bne.n	801789e <HAL_ADC_ConfigChannel+0x95e>
 8017838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801783c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017840:	2b00      	cmp	r3, #0
 8017842:	d12c      	bne.n	801789e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	4a4c      	ldr	r2, [pc, #304]	; (801797c <HAL_ADC_ConfigChannel+0xa3c>)
 801784a:	4293      	cmp	r3, r2
 801784c:	f040 8086 	bne.w	801795c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4a47      	ldr	r2, [pc, #284]	; (8017974 <HAL_ADC_ConfigChannel+0xa34>)
 8017856:	4293      	cmp	r3, r2
 8017858:	d004      	beq.n	8017864 <HAL_ADC_ConfigChannel+0x924>
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	4a46      	ldr	r2, [pc, #280]	; (8017978 <HAL_ADC_ConfigChannel+0xa38>)
 8017860:	4293      	cmp	r3, r2
 8017862:	d101      	bne.n	8017868 <HAL_ADC_ConfigChannel+0x928>
 8017864:	4a47      	ldr	r2, [pc, #284]	; (8017984 <HAL_ADC_ConfigChannel+0xa44>)
 8017866:	e000      	b.n	801786a <HAL_ADC_ConfigChannel+0x92a>
 8017868:	4a41      	ldr	r2, [pc, #260]	; (8017970 <HAL_ADC_ConfigChannel+0xa30>)
 801786a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801786e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017872:	4619      	mov	r1, r3
 8017874:	4610      	mov	r0, r2
 8017876:	f7fe fb4e 	bl	8015f16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801787a:	4b43      	ldr	r3, [pc, #268]	; (8017988 <HAL_ADC_ConfigChannel+0xa48>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	099b      	lsrs	r3, r3, #6
 8017880:	4a42      	ldr	r2, [pc, #264]	; (801798c <HAL_ADC_ConfigChannel+0xa4c>)
 8017882:	fba2 2303 	umull	r2, r3, r2, r3
 8017886:	099b      	lsrs	r3, r3, #6
 8017888:	3301      	adds	r3, #1
 801788a:	005b      	lsls	r3, r3, #1
 801788c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 801788e:	e002      	b.n	8017896 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	3b01      	subs	r3, #1
 8017894:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d1f9      	bne.n	8017890 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801789c:	e05e      	b.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4a3b      	ldr	r2, [pc, #236]	; (8017990 <HAL_ADC_ConfigChannel+0xa50>)
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d120      	bne.n	80178ea <HAL_ADC_ConfigChannel+0x9aa>
 80178a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80178ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d11a      	bne.n	80178ea <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	4a30      	ldr	r2, [pc, #192]	; (801797c <HAL_ADC_ConfigChannel+0xa3c>)
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d14e      	bne.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	4a2c      	ldr	r2, [pc, #176]	; (8017974 <HAL_ADC_ConfigChannel+0xa34>)
 80178c4:	4293      	cmp	r3, r2
 80178c6:	d004      	beq.n	80178d2 <HAL_ADC_ConfigChannel+0x992>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	4a2a      	ldr	r2, [pc, #168]	; (8017978 <HAL_ADC_ConfigChannel+0xa38>)
 80178ce:	4293      	cmp	r3, r2
 80178d0:	d101      	bne.n	80178d6 <HAL_ADC_ConfigChannel+0x996>
 80178d2:	4a2c      	ldr	r2, [pc, #176]	; (8017984 <HAL_ADC_ConfigChannel+0xa44>)
 80178d4:	e000      	b.n	80178d8 <HAL_ADC_ConfigChannel+0x998>
 80178d6:	4a26      	ldr	r2, [pc, #152]	; (8017970 <HAL_ADC_ConfigChannel+0xa30>)
 80178d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80178dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80178e0:	4619      	mov	r1, r3
 80178e2:	4610      	mov	r0, r2
 80178e4:	f7fe fb17 	bl	8015f16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80178e8:	e038      	b.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	4a29      	ldr	r2, [pc, #164]	; (8017994 <HAL_ADC_ConfigChannel+0xa54>)
 80178f0:	4293      	cmp	r3, r2
 80178f2:	d133      	bne.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
 80178f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80178f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d12d      	bne.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	4a1d      	ldr	r2, [pc, #116]	; (801797c <HAL_ADC_ConfigChannel+0xa3c>)
 8017906:	4293      	cmp	r3, r2
 8017908:	d128      	bne.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	4a19      	ldr	r2, [pc, #100]	; (8017974 <HAL_ADC_ConfigChannel+0xa34>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d004      	beq.n	801791e <HAL_ADC_ConfigChannel+0x9de>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	4a17      	ldr	r2, [pc, #92]	; (8017978 <HAL_ADC_ConfigChannel+0xa38>)
 801791a:	4293      	cmp	r3, r2
 801791c:	d101      	bne.n	8017922 <HAL_ADC_ConfigChannel+0x9e2>
 801791e:	4a19      	ldr	r2, [pc, #100]	; (8017984 <HAL_ADC_ConfigChannel+0xa44>)
 8017920:	e000      	b.n	8017924 <HAL_ADC_ConfigChannel+0x9e4>
 8017922:	4a13      	ldr	r2, [pc, #76]	; (8017970 <HAL_ADC_ConfigChannel+0xa30>)
 8017924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801792c:	4619      	mov	r1, r3
 801792e:	4610      	mov	r0, r2
 8017930:	f7fe faf1 	bl	8015f16 <LL_ADC_SetCommonPathInternalCh>
 8017934:	e012      	b.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801793a:	f043 0220 	orr.w	r2, r3, #32
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8017942:	2301      	movs	r3, #1
 8017944:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017948:	e008      	b.n	801795c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801794e:	f043 0220 	orr.w	r2, r3, #32
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017956:	2301      	movs	r3, #1
 8017958:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017964:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8017968:	4618      	mov	r0, r3
 801796a:	37e4      	adds	r7, #228	; 0xe4
 801796c:	46bd      	mov	sp, r7
 801796e:	bd90      	pop	{r4, r7, pc}
 8017970:	58026300 	.word	0x58026300
 8017974:	40022000 	.word	0x40022000
 8017978:	40022100 	.word	0x40022100
 801797c:	58026000 	.word	0x58026000
 8017980:	c7520000 	.word	0xc7520000
 8017984:	40022300 	.word	0x40022300
 8017988:	24000004 	.word	0x24000004
 801798c:	053e2d63 	.word	0x053e2d63
 8017990:	c3210000 	.word	0xc3210000
 8017994:	cb840000 	.word	0xcb840000

08017998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b084      	sub	sp, #16
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7fe fd41 	bl	801642c <LL_ADC_IsEnabled>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d16e      	bne.n	8017a8e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	689a      	ldr	r2, [r3, #8]
 80179b6:	4b38      	ldr	r3, [pc, #224]	; (8017a98 <ADC_Enable+0x100>)
 80179b8:	4013      	ands	r3, r2
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00d      	beq.n	80179da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80179c2:	f043 0210 	orr.w	r2, r3, #16
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80179ce:	f043 0201 	orr.w	r2, r3, #1
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80179d6:	2301      	movs	r3, #1
 80179d8:	e05a      	b.n	8017a90 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	4618      	mov	r0, r3
 80179e0:	f7fe fd10 	bl	8016404 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80179e4:	f7fe fa78 	bl	8015ed8 <HAL_GetTick>
 80179e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	4a2b      	ldr	r2, [pc, #172]	; (8017a9c <ADC_Enable+0x104>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d004      	beq.n	80179fe <ADC_Enable+0x66>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4a29      	ldr	r2, [pc, #164]	; (8017aa0 <ADC_Enable+0x108>)
 80179fa:	4293      	cmp	r3, r2
 80179fc:	d101      	bne.n	8017a02 <ADC_Enable+0x6a>
 80179fe:	4b29      	ldr	r3, [pc, #164]	; (8017aa4 <ADC_Enable+0x10c>)
 8017a00:	e000      	b.n	8017a04 <ADC_Enable+0x6c>
 8017a02:	4b29      	ldr	r3, [pc, #164]	; (8017aa8 <ADC_Enable+0x110>)
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7fe fc93 	bl	8016330 <LL_ADC_GetMultimode>
 8017a0a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	4a23      	ldr	r2, [pc, #140]	; (8017aa0 <ADC_Enable+0x108>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d002      	beq.n	8017a1c <ADC_Enable+0x84>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	e000      	b.n	8017a1e <ADC_Enable+0x86>
 8017a1c:	4b1f      	ldr	r3, [pc, #124]	; (8017a9c <ADC_Enable+0x104>)
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	6812      	ldr	r2, [r2, #0]
 8017a22:	4293      	cmp	r3, r2
 8017a24:	d02c      	beq.n	8017a80 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d130      	bne.n	8017a8e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017a2c:	e028      	b.n	8017a80 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fe fcfa 	bl	801642c <LL_ADC_IsEnabled>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d104      	bne.n	8017a48 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7fe fcde 	bl	8016404 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8017a48:	f7fe fa46 	bl	8015ed8 <HAL_GetTick>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	2b02      	cmp	r3, #2
 8017a54:	d914      	bls.n	8017a80 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	2b01      	cmp	r3, #1
 8017a62:	d00d      	beq.n	8017a80 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a68:	f043 0210 	orr.w	r2, r3, #16
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a74:	f043 0201 	orr.w	r2, r3, #1
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	e007      	b.n	8017a90 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	f003 0301 	and.w	r3, r3, #1
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	d1cf      	bne.n	8017a2e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8017a8e:	2300      	movs	r3, #0
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	8000003f 	.word	0x8000003f
 8017a9c:	40022000 	.word	0x40022000
 8017aa0:	40022100 	.word	0x40022100
 8017aa4:	40022300 	.word	0x40022300
 8017aa8:	58026300 	.word	0x58026300

08017aac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ab8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017abe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d14b      	bne.n	8017b5e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	f003 0308 	and.w	r3, r3, #8
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d021      	beq.n	8017b24 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f7fe fb29 	bl	801613c <LL_ADC_REG_IsTriggerSourceSWStart>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d032      	beq.n	8017b56 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	68db      	ldr	r3, [r3, #12]
 8017af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d12b      	bne.n	8017b56 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d11f      	bne.n	8017b56 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b1a:	f043 0201 	orr.w	r2, r3, #1
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	661a      	str	r2, [r3, #96]	; 0x60
 8017b22:	e018      	b.n	8017b56 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	f003 0303 	and.w	r3, r3, #3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d111      	bne.n	8017b56 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d105      	bne.n	8017b56 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b4e:	f043 0201 	orr.w	r2, r3, #1
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8017b56:	68f8      	ldr	r0, [r7, #12]
 8017b58:	f7f6 fd7b 	bl	800e652 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8017b5c:	e00e      	b.n	8017b7c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b62:	f003 0310 	and.w	r3, r3, #16
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d003      	beq.n	8017b72 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8017b6a:	68f8      	ldr	r0, [r7, #12]
 8017b6c:	f7ff f9de 	bl	8016f2c <HAL_ADC_ErrorCallback>
}
 8017b70:	e004      	b.n	8017b7c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	4798      	blx	r3
}
 8017b7c:	bf00      	nop
 8017b7e:	3710      	adds	r7, #16
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}

08017b84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b90:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8017b92:	68f8      	ldr	r0, [r7, #12]
 8017b94:	f7ff f9b6 	bl	8016f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017b98:	bf00      	nop
 8017b9a:	3710      	adds	r7, #16
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}

08017ba0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017bbe:	f043 0204 	orr.w	r2, r3, #4
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8017bc6:	68f8      	ldr	r0, [r7, #12]
 8017bc8:	f7ff f9b0 	bl	8016f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017bcc:	bf00      	nop
 8017bce:	3710      	adds	r7, #16
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4a6c      	ldr	r2, [pc, #432]	; (8017d94 <ADC_ConfigureBoostMode+0x1c0>)
 8017be2:	4293      	cmp	r3, r2
 8017be4:	d004      	beq.n	8017bf0 <ADC_ConfigureBoostMode+0x1c>
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4a6b      	ldr	r2, [pc, #428]	; (8017d98 <ADC_ConfigureBoostMode+0x1c4>)
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d109      	bne.n	8017c04 <ADC_ConfigureBoostMode+0x30>
 8017bf0:	4b6a      	ldr	r3, [pc, #424]	; (8017d9c <ADC_ConfigureBoostMode+0x1c8>)
 8017bf2:	689b      	ldr	r3, [r3, #8]
 8017bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	bf14      	ite	ne
 8017bfc:	2301      	movne	r3, #1
 8017bfe:	2300      	moveq	r3, #0
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	e008      	b.n	8017c16 <ADC_ConfigureBoostMode+0x42>
 8017c04:	4b66      	ldr	r3, [pc, #408]	; (8017da0 <ADC_ConfigureBoostMode+0x1cc>)
 8017c06:	689b      	ldr	r3, [r3, #8]
 8017c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	bf14      	ite	ne
 8017c10:	2301      	movne	r3, #1
 8017c12:	2300      	moveq	r3, #0
 8017c14:	b2db      	uxtb	r3, r3
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d01c      	beq.n	8017c54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8017c1a:	f004 fe61 	bl	801c8e0 <HAL_RCC_GetHCLKFreq>
 8017c1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017c28:	d010      	beq.n	8017c4c <ADC_ConfigureBoostMode+0x78>
 8017c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017c2e:	d873      	bhi.n	8017d18 <ADC_ConfigureBoostMode+0x144>
 8017c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017c34:	d002      	beq.n	8017c3c <ADC_ConfigureBoostMode+0x68>
 8017c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017c3a:	d16d      	bne.n	8017d18 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	685b      	ldr	r3, [r3, #4]
 8017c40:	0c1b      	lsrs	r3, r3, #16
 8017c42:	68fa      	ldr	r2, [r7, #12]
 8017c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c48:	60fb      	str	r3, [r7, #12]
        break;
 8017c4a:	e068      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	089b      	lsrs	r3, r3, #2
 8017c50:	60fb      	str	r3, [r7, #12]
        break;
 8017c52:	e064      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8017c54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017c58:	f04f 0100 	mov.w	r1, #0
 8017c5c:	f006 f826 	bl	801dcac <HAL_RCCEx_GetPeriphCLKFreq>
 8017c60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	685b      	ldr	r3, [r3, #4]
 8017c66:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017c6a:	d051      	beq.n	8017d10 <ADC_ConfigureBoostMode+0x13c>
 8017c6c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017c70:	d854      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017c72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017c76:	d047      	beq.n	8017d08 <ADC_ConfigureBoostMode+0x134>
 8017c78:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017c7c:	d84e      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017c7e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017c82:	d03d      	beq.n	8017d00 <ADC_ConfigureBoostMode+0x12c>
 8017c84:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017c88:	d848      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017c8e:	d033      	beq.n	8017cf8 <ADC_ConfigureBoostMode+0x124>
 8017c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017c94:	d842      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017c96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017c9a:	d029      	beq.n	8017cf0 <ADC_ConfigureBoostMode+0x11c>
 8017c9c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017ca0:	d83c      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017ca2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8017ca6:	d01a      	beq.n	8017cde <ADC_ConfigureBoostMode+0x10a>
 8017ca8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8017cac:	d836      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017cae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8017cb2:	d014      	beq.n	8017cde <ADC_ConfigureBoostMode+0x10a>
 8017cb4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8017cb8:	d830      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017cbe:	d00e      	beq.n	8017cde <ADC_ConfigureBoostMode+0x10a>
 8017cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017cc4:	d82a      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017cca:	d008      	beq.n	8017cde <ADC_ConfigureBoostMode+0x10a>
 8017ccc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017cd0:	d824      	bhi.n	8017d1c <ADC_ConfigureBoostMode+0x148>
 8017cd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017cd6:	d002      	beq.n	8017cde <ADC_ConfigureBoostMode+0x10a>
 8017cd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8017cdc:	d11e      	bne.n	8017d1c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	0c9b      	lsrs	r3, r3, #18
 8017ce4:	005b      	lsls	r3, r3, #1
 8017ce6:	68fa      	ldr	r2, [r7, #12]
 8017ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8017cec:	60fb      	str	r3, [r7, #12]
        break;
 8017cee:	e016      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	091b      	lsrs	r3, r3, #4
 8017cf4:	60fb      	str	r3, [r7, #12]
        break;
 8017cf6:	e012      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	095b      	lsrs	r3, r3, #5
 8017cfc:	60fb      	str	r3, [r7, #12]
        break;
 8017cfe:	e00e      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	099b      	lsrs	r3, r3, #6
 8017d04:	60fb      	str	r3, [r7, #12]
        break;
 8017d06:	e00a      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	09db      	lsrs	r3, r3, #7
 8017d0c:	60fb      	str	r3, [r7, #12]
        break;
 8017d0e:	e006      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	0a1b      	lsrs	r3, r3, #8
 8017d14:	60fb      	str	r3, [r7, #12]
        break;
 8017d16:	e002      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
        break;
 8017d18:	bf00      	nop
 8017d1a:	e000      	b.n	8017d1e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8017d1c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	085b      	lsrs	r3, r3, #1
 8017d22:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	4a1f      	ldr	r2, [pc, #124]	; (8017da4 <ADC_ConfigureBoostMode+0x1d0>)
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d808      	bhi.n	8017d3e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	689a      	ldr	r2, [r3, #8]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017d3a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8017d3c:	e025      	b.n	8017d8a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	4a19      	ldr	r2, [pc, #100]	; (8017da8 <ADC_ConfigureBoostMode+0x1d4>)
 8017d42:	4293      	cmp	r3, r2
 8017d44:	d80a      	bhi.n	8017d5c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	689b      	ldr	r3, [r3, #8]
 8017d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d58:	609a      	str	r2, [r3, #8]
}
 8017d5a:	e016      	b.n	8017d8a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	4a13      	ldr	r2, [pc, #76]	; (8017dac <ADC_ConfigureBoostMode+0x1d8>)
 8017d60:	4293      	cmp	r3, r2
 8017d62:	d80a      	bhi.n	8017d7a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	689b      	ldr	r3, [r3, #8]
 8017d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d76:	609a      	str	r2, [r3, #8]
}
 8017d78:	e007      	b.n	8017d8a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	689a      	ldr	r2, [r3, #8]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017d88:	609a      	str	r2, [r3, #8]
}
 8017d8a:	bf00      	nop
 8017d8c:	3710      	adds	r7, #16
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	40022000 	.word	0x40022000
 8017d98:	40022100 	.word	0x40022100
 8017d9c:	40022300 	.word	0x40022300
 8017da0:	58026300 	.word	0x58026300
 8017da4:	005f5e10 	.word	0x005f5e10
 8017da8:	00bebc20 	.word	0x00bebc20
 8017dac:	017d7840 	.word	0x017d7840

08017db0 <LL_ADC_IsEnabled>:
{
 8017db0:	b480      	push	{r7}
 8017db2:	b083      	sub	sp, #12
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	f003 0301 	and.w	r3, r3, #1
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	d101      	bne.n	8017dc8 <LL_ADC_IsEnabled+0x18>
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	e000      	b.n	8017dca <LL_ADC_IsEnabled+0x1a>
 8017dc8:	2300      	movs	r3, #0
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	370c      	adds	r7, #12
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd4:	4770      	bx	lr

08017dd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8017dd6:	b480      	push	{r7}
 8017dd8:	b083      	sub	sp, #12
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	689b      	ldr	r3, [r3, #8]
 8017de2:	f003 0304 	and.w	r3, r3, #4
 8017de6:	2b04      	cmp	r3, #4
 8017de8:	d101      	bne.n	8017dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8017dea:	2301      	movs	r3, #1
 8017dec:	e000      	b.n	8017df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017dee:	2300      	movs	r3, #0
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	370c      	adds	r7, #12
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8017e04:	bf00      	nop
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr

08017e10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8017e18:	bf00      	nop
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8017e24:	b480      	push	{r7}
 8017e26:	b083      	sub	sp, #12
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8017e2c:	bf00      	nop
 8017e2e:	370c      	adds	r7, #12
 8017e30:	46bd      	mov	sp, r7
 8017e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e36:	4770      	bx	lr

08017e38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	b083      	sub	sp, #12
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8017e40:	bf00      	nop
 8017e42:	370c      	adds	r7, #12
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b083      	sub	sp, #12
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8017e54:	bf00      	nop
 8017e56:	370c      	adds	r7, #12
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr

08017e60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8017e60:	b590      	push	{r4, r7, lr}
 8017e62:	b0a3      	sub	sp, #140	; 0x8c
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d101      	bne.n	8017e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8017e7a:	2302      	movs	r3, #2
 8017e7c:	e0c1      	b.n	8018002 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2201      	movs	r2, #1
 8017e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8017e86:	2300      	movs	r3, #0
 8017e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	4a5e      	ldr	r2, [pc, #376]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017e94:	4293      	cmp	r3, r2
 8017e96:	d102      	bne.n	8017e9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8017e98:	4b5d      	ldr	r3, [pc, #372]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017e9a:	60fb      	str	r3, [r7, #12]
 8017e9c:	e001      	b.n	8017ea2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d10b      	bne.n	8017ec0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017eac:	f043 0220 	orr.w	r2, r3, #32
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	e0a0      	b.n	8018002 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f7ff ff87 	bl	8017dd6 <LL_ADC_REG_IsConversionOngoing>
 8017ec8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7ff ff80 	bl	8017dd6 <LL_ADC_REG_IsConversionOngoing>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	f040 8081 	bne.w	8017fe0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8017ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d17c      	bne.n	8017fe0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	4a48      	ldr	r2, [pc, #288]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017eec:	4293      	cmp	r3, r2
 8017eee:	d004      	beq.n	8017efa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4a46      	ldr	r2, [pc, #280]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d101      	bne.n	8017efe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8017efa:	4b46      	ldr	r3, [pc, #280]	; (8018014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8017efc:	e000      	b.n	8017f00 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8017efe:	4b46      	ldr	r3, [pc, #280]	; (8018018 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8017f00:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d039      	beq.n	8017f7e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8017f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f0c:	689b      	ldr	r3, [r3, #8]
 8017f0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	685b      	ldr	r3, [r3, #4]
 8017f16:	431a      	orrs	r2, r3
 8017f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	4a3a      	ldr	r2, [pc, #232]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d004      	beq.n	8017f30 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	4a39      	ldr	r2, [pc, #228]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d10e      	bne.n	8017f4e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8017f30:	4836      	ldr	r0, [pc, #216]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017f32:	f7ff ff3d 	bl	8017db0 <LL_ADC_IsEnabled>
 8017f36:	4604      	mov	r4, r0
 8017f38:	4835      	ldr	r0, [pc, #212]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017f3a:	f7ff ff39 	bl	8017db0 <LL_ADC_IsEnabled>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	4323      	orrs	r3, r4
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	bf0c      	ite	eq
 8017f46:	2301      	moveq	r3, #1
 8017f48:	2300      	movne	r3, #0
 8017f4a:	b2db      	uxtb	r3, r3
 8017f4c:	e008      	b.n	8017f60 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8017f4e:	4833      	ldr	r0, [pc, #204]	; (801801c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017f50:	f7ff ff2e 	bl	8017db0 <LL_ADC_IsEnabled>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	bf0c      	ite	eq
 8017f5a:	2301      	moveq	r3, #1
 8017f5c:	2300      	movne	r3, #0
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d047      	beq.n	8017ff4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8017f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f66:	689a      	ldr	r2, [r3, #8]
 8017f68:	4b2d      	ldr	r3, [pc, #180]	; (8018020 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017f6a:	4013      	ands	r3, r2
 8017f6c:	683a      	ldr	r2, [r7, #0]
 8017f6e:	6811      	ldr	r1, [r2, #0]
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	6892      	ldr	r2, [r2, #8]
 8017f74:	430a      	orrs	r2, r1
 8017f76:	431a      	orrs	r2, r3
 8017f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017f7c:	e03a      	b.n	8017ff4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8017f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f80:	689b      	ldr	r3, [r3, #8]
 8017f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	4a1f      	ldr	r2, [pc, #124]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d004      	beq.n	8017f9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4a1d      	ldr	r2, [pc, #116]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d10e      	bne.n	8017fbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8017f9e:	481b      	ldr	r0, [pc, #108]	; (801800c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017fa0:	f7ff ff06 	bl	8017db0 <LL_ADC_IsEnabled>
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	481a      	ldr	r0, [pc, #104]	; (8018010 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017fa8:	f7ff ff02 	bl	8017db0 <LL_ADC_IsEnabled>
 8017fac:	4603      	mov	r3, r0
 8017fae:	4323      	orrs	r3, r4
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	bf0c      	ite	eq
 8017fb4:	2301      	moveq	r3, #1
 8017fb6:	2300      	movne	r3, #0
 8017fb8:	b2db      	uxtb	r3, r3
 8017fba:	e008      	b.n	8017fce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8017fbc:	4817      	ldr	r0, [pc, #92]	; (801801c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017fbe:	f7ff fef7 	bl	8017db0 <LL_ADC_IsEnabled>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	bf0c      	ite	eq
 8017fc8:	2301      	moveq	r3, #1
 8017fca:	2300      	movne	r3, #0
 8017fcc:	b2db      	uxtb	r3, r3
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d010      	beq.n	8017ff4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8017fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017fd4:	689a      	ldr	r2, [r3, #8]
 8017fd6:	4b12      	ldr	r3, [pc, #72]	; (8018020 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017fd8:	4013      	ands	r3, r2
 8017fda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017fdc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017fde:	e009      	b.n	8017ff4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017fe4:	f043 0220 	orr.w	r2, r3, #32
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017fec:	2301      	movs	r3, #1
 8017fee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8017ff2:	e000      	b.n	8017ff6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017ff4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017ffe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8018002:	4618      	mov	r0, r3
 8018004:	378c      	adds	r7, #140	; 0x8c
 8018006:	46bd      	mov	sp, r7
 8018008:	bd90      	pop	{r4, r7, pc}
 801800a:	bf00      	nop
 801800c:	40022000 	.word	0x40022000
 8018010:	40022100 	.word	0x40022100
 8018014:	40022300 	.word	0x40022300
 8018018:	58026300 	.word	0x58026300
 801801c:	58026000 	.word	0x58026000
 8018020:	fffff0e0 	.word	0xfffff0e0

08018024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018024:	b480      	push	{r7}
 8018026:	b085      	sub	sp, #20
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f003 0307 	and.w	r3, r3, #7
 8018032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018034:	4b0b      	ldr	r3, [pc, #44]	; (8018064 <__NVIC_SetPriorityGrouping+0x40>)
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801803a:	68ba      	ldr	r2, [r7, #8]
 801803c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018040:	4013      	ands	r3, r2
 8018042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801804c:	4b06      	ldr	r3, [pc, #24]	; (8018068 <__NVIC_SetPriorityGrouping+0x44>)
 801804e:	4313      	orrs	r3, r2
 8018050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018052:	4a04      	ldr	r2, [pc, #16]	; (8018064 <__NVIC_SetPriorityGrouping+0x40>)
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	60d3      	str	r3, [r2, #12]
}
 8018058:	bf00      	nop
 801805a:	3714      	adds	r7, #20
 801805c:	46bd      	mov	sp, r7
 801805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018062:	4770      	bx	lr
 8018064:	e000ed00 	.word	0xe000ed00
 8018068:	05fa0000 	.word	0x05fa0000

0801806c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801806c:	b480      	push	{r7}
 801806e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018070:	4b04      	ldr	r3, [pc, #16]	; (8018084 <__NVIC_GetPriorityGrouping+0x18>)
 8018072:	68db      	ldr	r3, [r3, #12]
 8018074:	0a1b      	lsrs	r3, r3, #8
 8018076:	f003 0307 	and.w	r3, r3, #7
}
 801807a:	4618      	mov	r0, r3
 801807c:	46bd      	mov	sp, r7
 801807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018082:	4770      	bx	lr
 8018084:	e000ed00 	.word	0xe000ed00

08018088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018088:	b480      	push	{r7}
 801808a:	b083      	sub	sp, #12
 801808c:	af00      	add	r7, sp, #0
 801808e:	4603      	mov	r3, r0
 8018090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018096:	2b00      	cmp	r3, #0
 8018098:	db0b      	blt.n	80180b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801809a:	88fb      	ldrh	r3, [r7, #6]
 801809c:	f003 021f 	and.w	r2, r3, #31
 80180a0:	4907      	ldr	r1, [pc, #28]	; (80180c0 <__NVIC_EnableIRQ+0x38>)
 80180a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80180a6:	095b      	lsrs	r3, r3, #5
 80180a8:	2001      	movs	r0, #1
 80180aa:	fa00 f202 	lsl.w	r2, r0, r2
 80180ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80180b2:	bf00      	nop
 80180b4:	370c      	adds	r7, #12
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr
 80180be:	bf00      	nop
 80180c0:	e000e100 	.word	0xe000e100

080180c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80180c4:	b480      	push	{r7}
 80180c6:	b083      	sub	sp, #12
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	4603      	mov	r3, r0
 80180cc:	6039      	str	r1, [r7, #0]
 80180ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80180d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	db0a      	blt.n	80180ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	b2da      	uxtb	r2, r3
 80180dc:	490c      	ldr	r1, [pc, #48]	; (8018110 <__NVIC_SetPriority+0x4c>)
 80180de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80180e2:	0112      	lsls	r2, r2, #4
 80180e4:	b2d2      	uxtb	r2, r2
 80180e6:	440b      	add	r3, r1
 80180e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80180ec:	e00a      	b.n	8018104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	b2da      	uxtb	r2, r3
 80180f2:	4908      	ldr	r1, [pc, #32]	; (8018114 <__NVIC_SetPriority+0x50>)
 80180f4:	88fb      	ldrh	r3, [r7, #6]
 80180f6:	f003 030f 	and.w	r3, r3, #15
 80180fa:	3b04      	subs	r3, #4
 80180fc:	0112      	lsls	r2, r2, #4
 80180fe:	b2d2      	uxtb	r2, r2
 8018100:	440b      	add	r3, r1
 8018102:	761a      	strb	r2, [r3, #24]
}
 8018104:	bf00      	nop
 8018106:	370c      	adds	r7, #12
 8018108:	46bd      	mov	sp, r7
 801810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810e:	4770      	bx	lr
 8018110:	e000e100 	.word	0xe000e100
 8018114:	e000ed00 	.word	0xe000ed00

08018118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018118:	b480      	push	{r7}
 801811a:	b089      	sub	sp, #36	; 0x24
 801811c:	af00      	add	r7, sp, #0
 801811e:	60f8      	str	r0, [r7, #12]
 8018120:	60b9      	str	r1, [r7, #8]
 8018122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	f003 0307 	and.w	r3, r3, #7
 801812a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801812c:	69fb      	ldr	r3, [r7, #28]
 801812e:	f1c3 0307 	rsb	r3, r3, #7
 8018132:	2b04      	cmp	r3, #4
 8018134:	bf28      	it	cs
 8018136:	2304      	movcs	r3, #4
 8018138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801813a:	69fb      	ldr	r3, [r7, #28]
 801813c:	3304      	adds	r3, #4
 801813e:	2b06      	cmp	r3, #6
 8018140:	d902      	bls.n	8018148 <NVIC_EncodePriority+0x30>
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	3b03      	subs	r3, #3
 8018146:	e000      	b.n	801814a <NVIC_EncodePriority+0x32>
 8018148:	2300      	movs	r3, #0
 801814a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801814c:	f04f 32ff 	mov.w	r2, #4294967295
 8018150:	69bb      	ldr	r3, [r7, #24]
 8018152:	fa02 f303 	lsl.w	r3, r2, r3
 8018156:	43da      	mvns	r2, r3
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	401a      	ands	r2, r3
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018160:	f04f 31ff 	mov.w	r1, #4294967295
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	fa01 f303 	lsl.w	r3, r1, r3
 801816a:	43d9      	mvns	r1, r3
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018170:	4313      	orrs	r3, r2
         );
}
 8018172:	4618      	mov	r0, r3
 8018174:	3724      	adds	r7, #36	; 0x24
 8018176:	46bd      	mov	sp, r7
 8018178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817c:	4770      	bx	lr
	...

08018180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	3b01      	subs	r3, #1
 801818c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018190:	d301      	bcc.n	8018196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018192:	2301      	movs	r3, #1
 8018194:	e00f      	b.n	80181b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018196:	4a0a      	ldr	r2, [pc, #40]	; (80181c0 <SysTick_Config+0x40>)
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	3b01      	subs	r3, #1
 801819c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801819e:	210f      	movs	r1, #15
 80181a0:	f04f 30ff 	mov.w	r0, #4294967295
 80181a4:	f7ff ff8e 	bl	80180c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80181a8:	4b05      	ldr	r3, [pc, #20]	; (80181c0 <SysTick_Config+0x40>)
 80181aa:	2200      	movs	r2, #0
 80181ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80181ae:	4b04      	ldr	r3, [pc, #16]	; (80181c0 <SysTick_Config+0x40>)
 80181b0:	2207      	movs	r2, #7
 80181b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80181b4:	2300      	movs	r3, #0
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3708      	adds	r7, #8
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	e000e010 	.word	0xe000e010

080181c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f7ff ff29 	bl	8018024 <__NVIC_SetPriorityGrouping>
}
 80181d2:	bf00      	nop
 80181d4:	3708      	adds	r7, #8
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80181da:	b580      	push	{r7, lr}
 80181dc:	b086      	sub	sp, #24
 80181de:	af00      	add	r7, sp, #0
 80181e0:	4603      	mov	r3, r0
 80181e2:	60b9      	str	r1, [r7, #8]
 80181e4:	607a      	str	r2, [r7, #4]
 80181e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80181e8:	f7ff ff40 	bl	801806c <__NVIC_GetPriorityGrouping>
 80181ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	68b9      	ldr	r1, [r7, #8]
 80181f2:	6978      	ldr	r0, [r7, #20]
 80181f4:	f7ff ff90 	bl	8018118 <NVIC_EncodePriority>
 80181f8:	4602      	mov	r2, r0
 80181fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80181fe:	4611      	mov	r1, r2
 8018200:	4618      	mov	r0, r3
 8018202:	f7ff ff5f 	bl	80180c4 <__NVIC_SetPriority>
}
 8018206:	bf00      	nop
 8018208:	3718      	adds	r7, #24
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}

0801820e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801820e:	b580      	push	{r7, lr}
 8018210:	b082      	sub	sp, #8
 8018212:	af00      	add	r7, sp, #0
 8018214:	4603      	mov	r3, r0
 8018216:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801821c:	4618      	mov	r0, r3
 801821e:	f7ff ff33 	bl	8018088 <__NVIC_EnableIRQ>
}
 8018222:	bf00      	nop
 8018224:	3708      	adds	r7, #8
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}

0801822a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801822a:	b580      	push	{r7, lr}
 801822c:	b082      	sub	sp, #8
 801822e:	af00      	add	r7, sp, #0
 8018230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	f7ff ffa4 	bl	8018180 <SysTick_Config>
 8018238:	4603      	mov	r3, r0
}
 801823a:	4618      	mov	r0, r3
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
	...

08018244 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b086      	sub	sp, #24
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801824c:	f7fd fe44 	bl	8015ed8 <HAL_GetTick>
 8018250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d101      	bne.n	801825c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8018258:	2301      	movs	r3, #1
 801825a:	e314      	b.n	8018886 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a66      	ldr	r2, [pc, #408]	; (80183fc <HAL_DMA_Init+0x1b8>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d04a      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a65      	ldr	r2, [pc, #404]	; (8018400 <HAL_DMA_Init+0x1bc>)
 801826c:	4293      	cmp	r3, r2
 801826e:	d045      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a63      	ldr	r2, [pc, #396]	; (8018404 <HAL_DMA_Init+0x1c0>)
 8018276:	4293      	cmp	r3, r2
 8018278:	d040      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	4a62      	ldr	r2, [pc, #392]	; (8018408 <HAL_DMA_Init+0x1c4>)
 8018280:	4293      	cmp	r3, r2
 8018282:	d03b      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a60      	ldr	r2, [pc, #384]	; (801840c <HAL_DMA_Init+0x1c8>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d036      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	4a5f      	ldr	r2, [pc, #380]	; (8018410 <HAL_DMA_Init+0x1cc>)
 8018294:	4293      	cmp	r3, r2
 8018296:	d031      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4a5d      	ldr	r2, [pc, #372]	; (8018414 <HAL_DMA_Init+0x1d0>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d02c      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a5c      	ldr	r2, [pc, #368]	; (8018418 <HAL_DMA_Init+0x1d4>)
 80182a8:	4293      	cmp	r3, r2
 80182aa:	d027      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a5a      	ldr	r2, [pc, #360]	; (801841c <HAL_DMA_Init+0x1d8>)
 80182b2:	4293      	cmp	r3, r2
 80182b4:	d022      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a59      	ldr	r2, [pc, #356]	; (8018420 <HAL_DMA_Init+0x1dc>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d01d      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	4a57      	ldr	r2, [pc, #348]	; (8018424 <HAL_DMA_Init+0x1e0>)
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d018      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	4a56      	ldr	r2, [pc, #344]	; (8018428 <HAL_DMA_Init+0x1e4>)
 80182d0:	4293      	cmp	r3, r2
 80182d2:	d013      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a54      	ldr	r2, [pc, #336]	; (801842c <HAL_DMA_Init+0x1e8>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d00e      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	4a53      	ldr	r2, [pc, #332]	; (8018430 <HAL_DMA_Init+0x1ec>)
 80182e4:	4293      	cmp	r3, r2
 80182e6:	d009      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4a51      	ldr	r2, [pc, #324]	; (8018434 <HAL_DMA_Init+0x1f0>)
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d004      	beq.n	80182fc <HAL_DMA_Init+0xb8>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	4a50      	ldr	r2, [pc, #320]	; (8018438 <HAL_DMA_Init+0x1f4>)
 80182f8:	4293      	cmp	r3, r2
 80182fa:	d101      	bne.n	8018300 <HAL_DMA_Init+0xbc>
 80182fc:	2301      	movs	r3, #1
 80182fe:	e000      	b.n	8018302 <HAL_DMA_Init+0xbe>
 8018300:	2300      	movs	r3, #0
 8018302:	2b00      	cmp	r3, #0
 8018304:	f000 813c 	beq.w	8018580 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2202      	movs	r2, #2
 801830c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2200      	movs	r2, #0
 8018314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	4a37      	ldr	r2, [pc, #220]	; (80183fc <HAL_DMA_Init+0x1b8>)
 801831e:	4293      	cmp	r3, r2
 8018320:	d04a      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	4a36      	ldr	r2, [pc, #216]	; (8018400 <HAL_DMA_Init+0x1bc>)
 8018328:	4293      	cmp	r3, r2
 801832a:	d045      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	4a34      	ldr	r2, [pc, #208]	; (8018404 <HAL_DMA_Init+0x1c0>)
 8018332:	4293      	cmp	r3, r2
 8018334:	d040      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	4a33      	ldr	r2, [pc, #204]	; (8018408 <HAL_DMA_Init+0x1c4>)
 801833c:	4293      	cmp	r3, r2
 801833e:	d03b      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4a31      	ldr	r2, [pc, #196]	; (801840c <HAL_DMA_Init+0x1c8>)
 8018346:	4293      	cmp	r3, r2
 8018348:	d036      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	4a30      	ldr	r2, [pc, #192]	; (8018410 <HAL_DMA_Init+0x1cc>)
 8018350:	4293      	cmp	r3, r2
 8018352:	d031      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4a2e      	ldr	r2, [pc, #184]	; (8018414 <HAL_DMA_Init+0x1d0>)
 801835a:	4293      	cmp	r3, r2
 801835c:	d02c      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	4a2d      	ldr	r2, [pc, #180]	; (8018418 <HAL_DMA_Init+0x1d4>)
 8018364:	4293      	cmp	r3, r2
 8018366:	d027      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	4a2b      	ldr	r2, [pc, #172]	; (801841c <HAL_DMA_Init+0x1d8>)
 801836e:	4293      	cmp	r3, r2
 8018370:	d022      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	4a2a      	ldr	r2, [pc, #168]	; (8018420 <HAL_DMA_Init+0x1dc>)
 8018378:	4293      	cmp	r3, r2
 801837a:	d01d      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	4a28      	ldr	r2, [pc, #160]	; (8018424 <HAL_DMA_Init+0x1e0>)
 8018382:	4293      	cmp	r3, r2
 8018384:	d018      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	4a27      	ldr	r2, [pc, #156]	; (8018428 <HAL_DMA_Init+0x1e4>)
 801838c:	4293      	cmp	r3, r2
 801838e:	d013      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4a25      	ldr	r2, [pc, #148]	; (801842c <HAL_DMA_Init+0x1e8>)
 8018396:	4293      	cmp	r3, r2
 8018398:	d00e      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4a24      	ldr	r2, [pc, #144]	; (8018430 <HAL_DMA_Init+0x1ec>)
 80183a0:	4293      	cmp	r3, r2
 80183a2:	d009      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4a22      	ldr	r2, [pc, #136]	; (8018434 <HAL_DMA_Init+0x1f0>)
 80183aa:	4293      	cmp	r3, r2
 80183ac:	d004      	beq.n	80183b8 <HAL_DMA_Init+0x174>
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	4a21      	ldr	r2, [pc, #132]	; (8018438 <HAL_DMA_Init+0x1f4>)
 80183b4:	4293      	cmp	r3, r2
 80183b6:	d108      	bne.n	80183ca <HAL_DMA_Init+0x186>
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	681a      	ldr	r2, [r3, #0]
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f022 0201 	bic.w	r2, r2, #1
 80183c6:	601a      	str	r2, [r3, #0]
 80183c8:	e007      	b.n	80183da <HAL_DMA_Init+0x196>
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	681a      	ldr	r2, [r3, #0]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	f022 0201 	bic.w	r2, r2, #1
 80183d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80183da:	e02f      	b.n	801843c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80183dc:	f7fd fd7c 	bl	8015ed8 <HAL_GetTick>
 80183e0:	4602      	mov	r2, r0
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	1ad3      	subs	r3, r2, r3
 80183e6:	2b05      	cmp	r3, #5
 80183e8:	d928      	bls.n	801843c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2220      	movs	r2, #32
 80183ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2203      	movs	r2, #3
 80183f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80183f8:	2301      	movs	r3, #1
 80183fa:	e244      	b.n	8018886 <HAL_DMA_Init+0x642>
 80183fc:	40020010 	.word	0x40020010
 8018400:	40020028 	.word	0x40020028
 8018404:	40020040 	.word	0x40020040
 8018408:	40020058 	.word	0x40020058
 801840c:	40020070 	.word	0x40020070
 8018410:	40020088 	.word	0x40020088
 8018414:	400200a0 	.word	0x400200a0
 8018418:	400200b8 	.word	0x400200b8
 801841c:	40020410 	.word	0x40020410
 8018420:	40020428 	.word	0x40020428
 8018424:	40020440 	.word	0x40020440
 8018428:	40020458 	.word	0x40020458
 801842c:	40020470 	.word	0x40020470
 8018430:	40020488 	.word	0x40020488
 8018434:	400204a0 	.word	0x400204a0
 8018438:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	f003 0301 	and.w	r3, r3, #1
 8018446:	2b00      	cmp	r3, #0
 8018448:	d1c8      	bne.n	80183dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018452:	697a      	ldr	r2, [r7, #20]
 8018454:	4b84      	ldr	r3, [pc, #528]	; (8018668 <HAL_DMA_Init+0x424>)
 8018456:	4013      	ands	r3, r2
 8018458:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8018462:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	691b      	ldr	r3, [r3, #16]
 8018468:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801846e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	699b      	ldr	r3, [r3, #24]
 8018474:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801847a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	6a1b      	ldr	r3, [r3, #32]
 8018480:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8018482:	697a      	ldr	r2, [r7, #20]
 8018484:	4313      	orrs	r3, r2
 8018486:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801848c:	2b04      	cmp	r3, #4
 801848e:	d107      	bne.n	80184a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018498:	4313      	orrs	r3, r2
 801849a:	697a      	ldr	r2, [r7, #20]
 801849c:	4313      	orrs	r3, r2
 801849e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	2b28      	cmp	r3, #40	; 0x28
 80184a6:	d903      	bls.n	80184b0 <HAL_DMA_Init+0x26c>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	2b2e      	cmp	r3, #46	; 0x2e
 80184ae:	d91f      	bls.n	80184f0 <HAL_DMA_Init+0x2ac>
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	685b      	ldr	r3, [r3, #4]
 80184b4:	2b3e      	cmp	r3, #62	; 0x3e
 80184b6:	d903      	bls.n	80184c0 <HAL_DMA_Init+0x27c>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	685b      	ldr	r3, [r3, #4]
 80184bc:	2b42      	cmp	r3, #66	; 0x42
 80184be:	d917      	bls.n	80184f0 <HAL_DMA_Init+0x2ac>
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	2b46      	cmp	r3, #70	; 0x46
 80184c6:	d903      	bls.n	80184d0 <HAL_DMA_Init+0x28c>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	685b      	ldr	r3, [r3, #4]
 80184cc:	2b48      	cmp	r3, #72	; 0x48
 80184ce:	d90f      	bls.n	80184f0 <HAL_DMA_Init+0x2ac>
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	685b      	ldr	r3, [r3, #4]
 80184d4:	2b4e      	cmp	r3, #78	; 0x4e
 80184d6:	d903      	bls.n	80184e0 <HAL_DMA_Init+0x29c>
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	685b      	ldr	r3, [r3, #4]
 80184dc:	2b52      	cmp	r3, #82	; 0x52
 80184de:	d907      	bls.n	80184f0 <HAL_DMA_Init+0x2ac>
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	2b73      	cmp	r3, #115	; 0x73
 80184e6:	d905      	bls.n	80184f4 <HAL_DMA_Init+0x2b0>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	2b77      	cmp	r3, #119	; 0x77
 80184ee:	d801      	bhi.n	80184f4 <HAL_DMA_Init+0x2b0>
 80184f0:	2301      	movs	r3, #1
 80184f2:	e000      	b.n	80184f6 <HAL_DMA_Init+0x2b2>
 80184f4:	2300      	movs	r3, #0
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d003      	beq.n	8018502 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018500:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	697a      	ldr	r2, [r7, #20]
 8018508:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	695b      	ldr	r3, [r3, #20]
 8018510:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	f023 0307 	bic.w	r3, r3, #7
 8018518:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851e:	697a      	ldr	r2, [r7, #20]
 8018520:	4313      	orrs	r3, r2
 8018522:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018528:	2b04      	cmp	r3, #4
 801852a:	d117      	bne.n	801855c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018530:	697a      	ldr	r2, [r7, #20]
 8018532:	4313      	orrs	r3, r2
 8018534:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801853a:	2b00      	cmp	r3, #0
 801853c:	d00e      	beq.n	801855c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801853e:	6878      	ldr	r0, [r7, #4]
 8018540:	f001 fdcc 	bl	801a0dc <DMA_CheckFifoParam>
 8018544:	4603      	mov	r3, r0
 8018546:	2b00      	cmp	r3, #0
 8018548:	d008      	beq.n	801855c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2240      	movs	r2, #64	; 0x40
 801854e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	2201      	movs	r2, #1
 8018554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8018558:	2301      	movs	r3, #1
 801855a:	e194      	b.n	8018886 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	697a      	ldr	r2, [r7, #20]
 8018562:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	f001 fd07 	bl	8019f78 <DMA_CalcBaseAndBitshift>
 801856a:	4603      	mov	r3, r0
 801856c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018572:	f003 031f 	and.w	r3, r3, #31
 8018576:	223f      	movs	r2, #63	; 0x3f
 8018578:	409a      	lsls	r2, r3
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	609a      	str	r2, [r3, #8]
 801857e:	e0ca      	b.n	8018716 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a39      	ldr	r2, [pc, #228]	; (801866c <HAL_DMA_Init+0x428>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d022      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a38      	ldr	r2, [pc, #224]	; (8018670 <HAL_DMA_Init+0x42c>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d01d      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a36      	ldr	r2, [pc, #216]	; (8018674 <HAL_DMA_Init+0x430>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d018      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4a35      	ldr	r2, [pc, #212]	; (8018678 <HAL_DMA_Init+0x434>)
 80185a4:	4293      	cmp	r3, r2
 80185a6:	d013      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4a33      	ldr	r2, [pc, #204]	; (801867c <HAL_DMA_Init+0x438>)
 80185ae:	4293      	cmp	r3, r2
 80185b0:	d00e      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a32      	ldr	r2, [pc, #200]	; (8018680 <HAL_DMA_Init+0x43c>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d009      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a30      	ldr	r2, [pc, #192]	; (8018684 <HAL_DMA_Init+0x440>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d004      	beq.n	80185d0 <HAL_DMA_Init+0x38c>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a2f      	ldr	r2, [pc, #188]	; (8018688 <HAL_DMA_Init+0x444>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d101      	bne.n	80185d4 <HAL_DMA_Init+0x390>
 80185d0:	2301      	movs	r3, #1
 80185d2:	e000      	b.n	80185d6 <HAL_DMA_Init+0x392>
 80185d4:	2300      	movs	r3, #0
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f000 8094 	beq.w	8018704 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a22      	ldr	r2, [pc, #136]	; (801866c <HAL_DMA_Init+0x428>)
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d021      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4a21      	ldr	r2, [pc, #132]	; (8018670 <HAL_DMA_Init+0x42c>)
 80185ec:	4293      	cmp	r3, r2
 80185ee:	d01c      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	4a1f      	ldr	r2, [pc, #124]	; (8018674 <HAL_DMA_Init+0x430>)
 80185f6:	4293      	cmp	r3, r2
 80185f8:	d017      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	4a1e      	ldr	r2, [pc, #120]	; (8018678 <HAL_DMA_Init+0x434>)
 8018600:	4293      	cmp	r3, r2
 8018602:	d012      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	4a1c      	ldr	r2, [pc, #112]	; (801867c <HAL_DMA_Init+0x438>)
 801860a:	4293      	cmp	r3, r2
 801860c:	d00d      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	4a1b      	ldr	r2, [pc, #108]	; (8018680 <HAL_DMA_Init+0x43c>)
 8018614:	4293      	cmp	r3, r2
 8018616:	d008      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	4a19      	ldr	r2, [pc, #100]	; (8018684 <HAL_DMA_Init+0x440>)
 801861e:	4293      	cmp	r3, r2
 8018620:	d003      	beq.n	801862a <HAL_DMA_Init+0x3e6>
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	4a18      	ldr	r2, [pc, #96]	; (8018688 <HAL_DMA_Init+0x444>)
 8018628:	4293      	cmp	r3, r2
 801862a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2202      	movs	r2, #2
 8018630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	2200      	movs	r2, #0
 8018638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8018644:	697a      	ldr	r2, [r7, #20]
 8018646:	4b11      	ldr	r3, [pc, #68]	; (801868c <HAL_DMA_Init+0x448>)
 8018648:	4013      	ands	r3, r2
 801864a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	689b      	ldr	r3, [r3, #8]
 8018650:	2b40      	cmp	r3, #64	; 0x40
 8018652:	d01d      	beq.n	8018690 <HAL_DMA_Init+0x44c>
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	689b      	ldr	r3, [r3, #8]
 8018658:	2b80      	cmp	r3, #128	; 0x80
 801865a:	d102      	bne.n	8018662 <HAL_DMA_Init+0x41e>
 801865c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018660:	e017      	b.n	8018692 <HAL_DMA_Init+0x44e>
 8018662:	2300      	movs	r3, #0
 8018664:	e015      	b.n	8018692 <HAL_DMA_Init+0x44e>
 8018666:	bf00      	nop
 8018668:	fe10803f 	.word	0xfe10803f
 801866c:	58025408 	.word	0x58025408
 8018670:	5802541c 	.word	0x5802541c
 8018674:	58025430 	.word	0x58025430
 8018678:	58025444 	.word	0x58025444
 801867c:	58025458 	.word	0x58025458
 8018680:	5802546c 	.word	0x5802546c
 8018684:	58025480 	.word	0x58025480
 8018688:	58025494 	.word	0x58025494
 801868c:	fffe000f 	.word	0xfffe000f
 8018690:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8018692:	687a      	ldr	r2, [r7, #4]
 8018694:	68d2      	ldr	r2, [r2, #12]
 8018696:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	691b      	ldr	r3, [r3, #16]
 801869e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80186a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	695b      	ldr	r3, [r3, #20]
 80186a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80186a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	699b      	ldr	r3, [r3, #24]
 80186ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80186b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	69db      	ldr	r3, [r3, #28]
 80186b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80186b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6a1b      	ldr	r3, [r3, #32]
 80186be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80186c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80186c2:	697a      	ldr	r2, [r7, #20]
 80186c4:	4313      	orrs	r3, r2
 80186c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	697a      	ldr	r2, [r7, #20]
 80186ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	461a      	mov	r2, r3
 80186d6:	4b6e      	ldr	r3, [pc, #440]	; (8018890 <HAL_DMA_Init+0x64c>)
 80186d8:	4413      	add	r3, r2
 80186da:	4a6e      	ldr	r2, [pc, #440]	; (8018894 <HAL_DMA_Init+0x650>)
 80186dc:	fba2 2303 	umull	r2, r3, r2, r3
 80186e0:	091b      	lsrs	r3, r3, #4
 80186e2:	009a      	lsls	r2, r3, #2
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f001 fc45 	bl	8019f78 <DMA_CalcBaseAndBitshift>
 80186ee:	4603      	mov	r3, r0
 80186f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186f6:	f003 031f 	and.w	r3, r3, #31
 80186fa:	2201      	movs	r2, #1
 80186fc:	409a      	lsls	r2, r3
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	605a      	str	r2, [r3, #4]
 8018702:	e008      	b.n	8018716 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2240      	movs	r2, #64	; 0x40
 8018708:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2203      	movs	r2, #3
 801870e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8018712:	2301      	movs	r3, #1
 8018714:	e0b7      	b.n	8018886 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	4a5f      	ldr	r2, [pc, #380]	; (8018898 <HAL_DMA_Init+0x654>)
 801871c:	4293      	cmp	r3, r2
 801871e:	d072      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	4a5d      	ldr	r2, [pc, #372]	; (801889c <HAL_DMA_Init+0x658>)
 8018726:	4293      	cmp	r3, r2
 8018728:	d06d      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	4a5c      	ldr	r2, [pc, #368]	; (80188a0 <HAL_DMA_Init+0x65c>)
 8018730:	4293      	cmp	r3, r2
 8018732:	d068      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4a5a      	ldr	r2, [pc, #360]	; (80188a4 <HAL_DMA_Init+0x660>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d063      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	4a59      	ldr	r2, [pc, #356]	; (80188a8 <HAL_DMA_Init+0x664>)
 8018744:	4293      	cmp	r3, r2
 8018746:	d05e      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	4a57      	ldr	r2, [pc, #348]	; (80188ac <HAL_DMA_Init+0x668>)
 801874e:	4293      	cmp	r3, r2
 8018750:	d059      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	4a56      	ldr	r2, [pc, #344]	; (80188b0 <HAL_DMA_Init+0x66c>)
 8018758:	4293      	cmp	r3, r2
 801875a:	d054      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	4a54      	ldr	r2, [pc, #336]	; (80188b4 <HAL_DMA_Init+0x670>)
 8018762:	4293      	cmp	r3, r2
 8018764:	d04f      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	4a53      	ldr	r2, [pc, #332]	; (80188b8 <HAL_DMA_Init+0x674>)
 801876c:	4293      	cmp	r3, r2
 801876e:	d04a      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	4a51      	ldr	r2, [pc, #324]	; (80188bc <HAL_DMA_Init+0x678>)
 8018776:	4293      	cmp	r3, r2
 8018778:	d045      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	4a50      	ldr	r2, [pc, #320]	; (80188c0 <HAL_DMA_Init+0x67c>)
 8018780:	4293      	cmp	r3, r2
 8018782:	d040      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	4a4e      	ldr	r2, [pc, #312]	; (80188c4 <HAL_DMA_Init+0x680>)
 801878a:	4293      	cmp	r3, r2
 801878c:	d03b      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	4a4d      	ldr	r2, [pc, #308]	; (80188c8 <HAL_DMA_Init+0x684>)
 8018794:	4293      	cmp	r3, r2
 8018796:	d036      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	4a4b      	ldr	r2, [pc, #300]	; (80188cc <HAL_DMA_Init+0x688>)
 801879e:	4293      	cmp	r3, r2
 80187a0:	d031      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	4a4a      	ldr	r2, [pc, #296]	; (80188d0 <HAL_DMA_Init+0x68c>)
 80187a8:	4293      	cmp	r3, r2
 80187aa:	d02c      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	4a48      	ldr	r2, [pc, #288]	; (80188d4 <HAL_DMA_Init+0x690>)
 80187b2:	4293      	cmp	r3, r2
 80187b4:	d027      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	4a47      	ldr	r2, [pc, #284]	; (80188d8 <HAL_DMA_Init+0x694>)
 80187bc:	4293      	cmp	r3, r2
 80187be:	d022      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4a45      	ldr	r2, [pc, #276]	; (80188dc <HAL_DMA_Init+0x698>)
 80187c6:	4293      	cmp	r3, r2
 80187c8:	d01d      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4a44      	ldr	r2, [pc, #272]	; (80188e0 <HAL_DMA_Init+0x69c>)
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d018      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	4a42      	ldr	r2, [pc, #264]	; (80188e4 <HAL_DMA_Init+0x6a0>)
 80187da:	4293      	cmp	r3, r2
 80187dc:	d013      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	4a41      	ldr	r2, [pc, #260]	; (80188e8 <HAL_DMA_Init+0x6a4>)
 80187e4:	4293      	cmp	r3, r2
 80187e6:	d00e      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	4a3f      	ldr	r2, [pc, #252]	; (80188ec <HAL_DMA_Init+0x6a8>)
 80187ee:	4293      	cmp	r3, r2
 80187f0:	d009      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	4a3e      	ldr	r2, [pc, #248]	; (80188f0 <HAL_DMA_Init+0x6ac>)
 80187f8:	4293      	cmp	r3, r2
 80187fa:	d004      	beq.n	8018806 <HAL_DMA_Init+0x5c2>
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	4a3c      	ldr	r2, [pc, #240]	; (80188f4 <HAL_DMA_Init+0x6b0>)
 8018802:	4293      	cmp	r3, r2
 8018804:	d101      	bne.n	801880a <HAL_DMA_Init+0x5c6>
 8018806:	2301      	movs	r3, #1
 8018808:	e000      	b.n	801880c <HAL_DMA_Init+0x5c8>
 801880a:	2300      	movs	r3, #0
 801880c:	2b00      	cmp	r3, #0
 801880e:	d032      	beq.n	8018876 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f001 fcdf 	bl	801a1d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	689b      	ldr	r3, [r3, #8]
 801881a:	2b80      	cmp	r3, #128	; 0x80
 801881c:	d102      	bne.n	8018824 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	2200      	movs	r2, #0
 8018822:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	685a      	ldr	r2, [r3, #4]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801882c:	b2d2      	uxtb	r2, r2
 801882e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018834:	687a      	ldr	r2, [r7, #4]
 8018836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8018838:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d010      	beq.n	8018864 <HAL_DMA_Init+0x620>
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	2b08      	cmp	r3, #8
 8018848:	d80c      	bhi.n	8018864 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f001 fd5c 	bl	801a308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018854:	2200      	movs	r2, #0
 8018856:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801885c:	687a      	ldr	r2, [r7, #4]
 801885e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8018860:	605a      	str	r2, [r3, #4]
 8018862:	e008      	b.n	8018876 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2200      	movs	r2, #0
 8018868:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2200      	movs	r2, #0
 801886e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2200      	movs	r2, #0
 8018874:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	2200      	movs	r2, #0
 801887a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2201      	movs	r2, #1
 8018880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018884:	2300      	movs	r3, #0
}
 8018886:	4618      	mov	r0, r3
 8018888:	3718      	adds	r7, #24
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	a7fdabf8 	.word	0xa7fdabf8
 8018894:	cccccccd 	.word	0xcccccccd
 8018898:	40020010 	.word	0x40020010
 801889c:	40020028 	.word	0x40020028
 80188a0:	40020040 	.word	0x40020040
 80188a4:	40020058 	.word	0x40020058
 80188a8:	40020070 	.word	0x40020070
 80188ac:	40020088 	.word	0x40020088
 80188b0:	400200a0 	.word	0x400200a0
 80188b4:	400200b8 	.word	0x400200b8
 80188b8:	40020410 	.word	0x40020410
 80188bc:	40020428 	.word	0x40020428
 80188c0:	40020440 	.word	0x40020440
 80188c4:	40020458 	.word	0x40020458
 80188c8:	40020470 	.word	0x40020470
 80188cc:	40020488 	.word	0x40020488
 80188d0:	400204a0 	.word	0x400204a0
 80188d4:	400204b8 	.word	0x400204b8
 80188d8:	58025408 	.word	0x58025408
 80188dc:	5802541c 	.word	0x5802541c
 80188e0:	58025430 	.word	0x58025430
 80188e4:	58025444 	.word	0x58025444
 80188e8:	58025458 	.word	0x58025458
 80188ec:	5802546c 	.word	0x5802546c
 80188f0:	58025480 	.word	0x58025480
 80188f4:	58025494 	.word	0x58025494

080188f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b086      	sub	sp, #24
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
 8018904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018906:	2300      	movs	r3, #0
 8018908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d101      	bne.n	8018914 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8018910:	2301      	movs	r3, #1
 8018912:	e226      	b.n	8018d62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801891a:	2b01      	cmp	r3, #1
 801891c:	d101      	bne.n	8018922 <HAL_DMA_Start_IT+0x2a>
 801891e:	2302      	movs	r3, #2
 8018920:	e21f      	b.n	8018d62 <HAL_DMA_Start_IT+0x46a>
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	2201      	movs	r2, #1
 8018926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018930:	b2db      	uxtb	r3, r3
 8018932:	2b01      	cmp	r3, #1
 8018934:	f040 820a 	bne.w	8018d4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	2202      	movs	r2, #2
 801893c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	2200      	movs	r2, #0
 8018944:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	4a68      	ldr	r2, [pc, #416]	; (8018aec <HAL_DMA_Start_IT+0x1f4>)
 801894c:	4293      	cmp	r3, r2
 801894e:	d04a      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a66      	ldr	r2, [pc, #408]	; (8018af0 <HAL_DMA_Start_IT+0x1f8>)
 8018956:	4293      	cmp	r3, r2
 8018958:	d045      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	4a65      	ldr	r2, [pc, #404]	; (8018af4 <HAL_DMA_Start_IT+0x1fc>)
 8018960:	4293      	cmp	r3, r2
 8018962:	d040      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	4a63      	ldr	r2, [pc, #396]	; (8018af8 <HAL_DMA_Start_IT+0x200>)
 801896a:	4293      	cmp	r3, r2
 801896c:	d03b      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	4a62      	ldr	r2, [pc, #392]	; (8018afc <HAL_DMA_Start_IT+0x204>)
 8018974:	4293      	cmp	r3, r2
 8018976:	d036      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	4a60      	ldr	r2, [pc, #384]	; (8018b00 <HAL_DMA_Start_IT+0x208>)
 801897e:	4293      	cmp	r3, r2
 8018980:	d031      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	4a5f      	ldr	r2, [pc, #380]	; (8018b04 <HAL_DMA_Start_IT+0x20c>)
 8018988:	4293      	cmp	r3, r2
 801898a:	d02c      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	4a5d      	ldr	r2, [pc, #372]	; (8018b08 <HAL_DMA_Start_IT+0x210>)
 8018992:	4293      	cmp	r3, r2
 8018994:	d027      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	4a5c      	ldr	r2, [pc, #368]	; (8018b0c <HAL_DMA_Start_IT+0x214>)
 801899c:	4293      	cmp	r3, r2
 801899e:	d022      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4a5a      	ldr	r2, [pc, #360]	; (8018b10 <HAL_DMA_Start_IT+0x218>)
 80189a6:	4293      	cmp	r3, r2
 80189a8:	d01d      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	4a59      	ldr	r2, [pc, #356]	; (8018b14 <HAL_DMA_Start_IT+0x21c>)
 80189b0:	4293      	cmp	r3, r2
 80189b2:	d018      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	4a57      	ldr	r2, [pc, #348]	; (8018b18 <HAL_DMA_Start_IT+0x220>)
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d013      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	4a56      	ldr	r2, [pc, #344]	; (8018b1c <HAL_DMA_Start_IT+0x224>)
 80189c4:	4293      	cmp	r3, r2
 80189c6:	d00e      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	4a54      	ldr	r2, [pc, #336]	; (8018b20 <HAL_DMA_Start_IT+0x228>)
 80189ce:	4293      	cmp	r3, r2
 80189d0:	d009      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	4a53      	ldr	r2, [pc, #332]	; (8018b24 <HAL_DMA_Start_IT+0x22c>)
 80189d8:	4293      	cmp	r3, r2
 80189da:	d004      	beq.n	80189e6 <HAL_DMA_Start_IT+0xee>
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	4a51      	ldr	r2, [pc, #324]	; (8018b28 <HAL_DMA_Start_IT+0x230>)
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d108      	bne.n	80189f8 <HAL_DMA_Start_IT+0x100>
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	681a      	ldr	r2, [r3, #0]
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	f022 0201 	bic.w	r2, r2, #1
 80189f4:	601a      	str	r2, [r3, #0]
 80189f6:	e007      	b.n	8018a08 <HAL_DMA_Start_IT+0x110>
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	681a      	ldr	r2, [r3, #0]
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	f022 0201 	bic.w	r2, r2, #1
 8018a06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	687a      	ldr	r2, [r7, #4]
 8018a0c:	68b9      	ldr	r1, [r7, #8]
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f001 f906 	bl	8019c20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	4a34      	ldr	r2, [pc, #208]	; (8018aec <HAL_DMA_Start_IT+0x1f4>)
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d04a      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	4a33      	ldr	r2, [pc, #204]	; (8018af0 <HAL_DMA_Start_IT+0x1f8>)
 8018a24:	4293      	cmp	r3, r2
 8018a26:	d045      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	4a31      	ldr	r2, [pc, #196]	; (8018af4 <HAL_DMA_Start_IT+0x1fc>)
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	d040      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	4a30      	ldr	r2, [pc, #192]	; (8018af8 <HAL_DMA_Start_IT+0x200>)
 8018a38:	4293      	cmp	r3, r2
 8018a3a:	d03b      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	4a2e      	ldr	r2, [pc, #184]	; (8018afc <HAL_DMA_Start_IT+0x204>)
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d036      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	4a2d      	ldr	r2, [pc, #180]	; (8018b00 <HAL_DMA_Start_IT+0x208>)
 8018a4c:	4293      	cmp	r3, r2
 8018a4e:	d031      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	4a2b      	ldr	r2, [pc, #172]	; (8018b04 <HAL_DMA_Start_IT+0x20c>)
 8018a56:	4293      	cmp	r3, r2
 8018a58:	d02c      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	4a2a      	ldr	r2, [pc, #168]	; (8018b08 <HAL_DMA_Start_IT+0x210>)
 8018a60:	4293      	cmp	r3, r2
 8018a62:	d027      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	4a28      	ldr	r2, [pc, #160]	; (8018b0c <HAL_DMA_Start_IT+0x214>)
 8018a6a:	4293      	cmp	r3, r2
 8018a6c:	d022      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	4a27      	ldr	r2, [pc, #156]	; (8018b10 <HAL_DMA_Start_IT+0x218>)
 8018a74:	4293      	cmp	r3, r2
 8018a76:	d01d      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	4a25      	ldr	r2, [pc, #148]	; (8018b14 <HAL_DMA_Start_IT+0x21c>)
 8018a7e:	4293      	cmp	r3, r2
 8018a80:	d018      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	4a24      	ldr	r2, [pc, #144]	; (8018b18 <HAL_DMA_Start_IT+0x220>)
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	d013      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	4a22      	ldr	r2, [pc, #136]	; (8018b1c <HAL_DMA_Start_IT+0x224>)
 8018a92:	4293      	cmp	r3, r2
 8018a94:	d00e      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	4a21      	ldr	r2, [pc, #132]	; (8018b20 <HAL_DMA_Start_IT+0x228>)
 8018a9c:	4293      	cmp	r3, r2
 8018a9e:	d009      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	4a1f      	ldr	r2, [pc, #124]	; (8018b24 <HAL_DMA_Start_IT+0x22c>)
 8018aa6:	4293      	cmp	r3, r2
 8018aa8:	d004      	beq.n	8018ab4 <HAL_DMA_Start_IT+0x1bc>
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	4a1e      	ldr	r2, [pc, #120]	; (8018b28 <HAL_DMA_Start_IT+0x230>)
 8018ab0:	4293      	cmp	r3, r2
 8018ab2:	d101      	bne.n	8018ab8 <HAL_DMA_Start_IT+0x1c0>
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	e000      	b.n	8018aba <HAL_DMA_Start_IT+0x1c2>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d036      	beq.n	8018b2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f023 021e 	bic.w	r2, r3, #30
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	f042 0216 	orr.w	r2, r2, #22
 8018ad0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d03e      	beq.n	8018b58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	681a      	ldr	r2, [r3, #0]
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	f042 0208 	orr.w	r2, r2, #8
 8018ae8:	601a      	str	r2, [r3, #0]
 8018aea:	e035      	b.n	8018b58 <HAL_DMA_Start_IT+0x260>
 8018aec:	40020010 	.word	0x40020010
 8018af0:	40020028 	.word	0x40020028
 8018af4:	40020040 	.word	0x40020040
 8018af8:	40020058 	.word	0x40020058
 8018afc:	40020070 	.word	0x40020070
 8018b00:	40020088 	.word	0x40020088
 8018b04:	400200a0 	.word	0x400200a0
 8018b08:	400200b8 	.word	0x400200b8
 8018b0c:	40020410 	.word	0x40020410
 8018b10:	40020428 	.word	0x40020428
 8018b14:	40020440 	.word	0x40020440
 8018b18:	40020458 	.word	0x40020458
 8018b1c:	40020470 	.word	0x40020470
 8018b20:	40020488 	.word	0x40020488
 8018b24:	400204a0 	.word	0x400204a0
 8018b28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	f023 020e 	bic.w	r2, r3, #14
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	f042 020a 	orr.w	r2, r2, #10
 8018b3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d007      	beq.n	8018b58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	f042 0204 	orr.w	r2, r2, #4
 8018b56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	4a83      	ldr	r2, [pc, #524]	; (8018d6c <HAL_DMA_Start_IT+0x474>)
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d072      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	4a82      	ldr	r2, [pc, #520]	; (8018d70 <HAL_DMA_Start_IT+0x478>)
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d06d      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	4a80      	ldr	r2, [pc, #512]	; (8018d74 <HAL_DMA_Start_IT+0x47c>)
 8018b72:	4293      	cmp	r3, r2
 8018b74:	d068      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	4a7f      	ldr	r2, [pc, #508]	; (8018d78 <HAL_DMA_Start_IT+0x480>)
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	d063      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	4a7d      	ldr	r2, [pc, #500]	; (8018d7c <HAL_DMA_Start_IT+0x484>)
 8018b86:	4293      	cmp	r3, r2
 8018b88:	d05e      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4a7c      	ldr	r2, [pc, #496]	; (8018d80 <HAL_DMA_Start_IT+0x488>)
 8018b90:	4293      	cmp	r3, r2
 8018b92:	d059      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	4a7a      	ldr	r2, [pc, #488]	; (8018d84 <HAL_DMA_Start_IT+0x48c>)
 8018b9a:	4293      	cmp	r3, r2
 8018b9c:	d054      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	4a79      	ldr	r2, [pc, #484]	; (8018d88 <HAL_DMA_Start_IT+0x490>)
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	d04f      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	4a77      	ldr	r2, [pc, #476]	; (8018d8c <HAL_DMA_Start_IT+0x494>)
 8018bae:	4293      	cmp	r3, r2
 8018bb0:	d04a      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	4a76      	ldr	r2, [pc, #472]	; (8018d90 <HAL_DMA_Start_IT+0x498>)
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	d045      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4a74      	ldr	r2, [pc, #464]	; (8018d94 <HAL_DMA_Start_IT+0x49c>)
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	d040      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4a73      	ldr	r2, [pc, #460]	; (8018d98 <HAL_DMA_Start_IT+0x4a0>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d03b      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4a71      	ldr	r2, [pc, #452]	; (8018d9c <HAL_DMA_Start_IT+0x4a4>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d036      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	4a70      	ldr	r2, [pc, #448]	; (8018da0 <HAL_DMA_Start_IT+0x4a8>)
 8018be0:	4293      	cmp	r3, r2
 8018be2:	d031      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4a6e      	ldr	r2, [pc, #440]	; (8018da4 <HAL_DMA_Start_IT+0x4ac>)
 8018bea:	4293      	cmp	r3, r2
 8018bec:	d02c      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	4a6d      	ldr	r2, [pc, #436]	; (8018da8 <HAL_DMA_Start_IT+0x4b0>)
 8018bf4:	4293      	cmp	r3, r2
 8018bf6:	d027      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	4a6b      	ldr	r2, [pc, #428]	; (8018dac <HAL_DMA_Start_IT+0x4b4>)
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	d022      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	4a6a      	ldr	r2, [pc, #424]	; (8018db0 <HAL_DMA_Start_IT+0x4b8>)
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	d01d      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a68      	ldr	r2, [pc, #416]	; (8018db4 <HAL_DMA_Start_IT+0x4bc>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d018      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a67      	ldr	r2, [pc, #412]	; (8018db8 <HAL_DMA_Start_IT+0x4c0>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d013      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	4a65      	ldr	r2, [pc, #404]	; (8018dbc <HAL_DMA_Start_IT+0x4c4>)
 8018c26:	4293      	cmp	r3, r2
 8018c28:	d00e      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	4a64      	ldr	r2, [pc, #400]	; (8018dc0 <HAL_DMA_Start_IT+0x4c8>)
 8018c30:	4293      	cmp	r3, r2
 8018c32:	d009      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	4a62      	ldr	r2, [pc, #392]	; (8018dc4 <HAL_DMA_Start_IT+0x4cc>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d004      	beq.n	8018c48 <HAL_DMA_Start_IT+0x350>
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	4a61      	ldr	r2, [pc, #388]	; (8018dc8 <HAL_DMA_Start_IT+0x4d0>)
 8018c44:	4293      	cmp	r3, r2
 8018c46:	d101      	bne.n	8018c4c <HAL_DMA_Start_IT+0x354>
 8018c48:	2301      	movs	r3, #1
 8018c4a:	e000      	b.n	8018c4e <HAL_DMA_Start_IT+0x356>
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d01a      	beq.n	8018c88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d007      	beq.n	8018c70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c64:	681a      	ldr	r2, [r3, #0]
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018c6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d007      	beq.n	8018c88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c7c:	681a      	ldr	r2, [r3, #0]
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018c86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4a37      	ldr	r2, [pc, #220]	; (8018d6c <HAL_DMA_Start_IT+0x474>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d04a      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a36      	ldr	r2, [pc, #216]	; (8018d70 <HAL_DMA_Start_IT+0x478>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d045      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a34      	ldr	r2, [pc, #208]	; (8018d74 <HAL_DMA_Start_IT+0x47c>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d040      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a33      	ldr	r2, [pc, #204]	; (8018d78 <HAL_DMA_Start_IT+0x480>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d03b      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a31      	ldr	r2, [pc, #196]	; (8018d7c <HAL_DMA_Start_IT+0x484>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d036      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4a30      	ldr	r2, [pc, #192]	; (8018d80 <HAL_DMA_Start_IT+0x488>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d031      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a2e      	ldr	r2, [pc, #184]	; (8018d84 <HAL_DMA_Start_IT+0x48c>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d02c      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a2d      	ldr	r2, [pc, #180]	; (8018d88 <HAL_DMA_Start_IT+0x490>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d027      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a2b      	ldr	r2, [pc, #172]	; (8018d8c <HAL_DMA_Start_IT+0x494>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d022      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a2a      	ldr	r2, [pc, #168]	; (8018d90 <HAL_DMA_Start_IT+0x498>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d01d      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a28      	ldr	r2, [pc, #160]	; (8018d94 <HAL_DMA_Start_IT+0x49c>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d018      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a27      	ldr	r2, [pc, #156]	; (8018d98 <HAL_DMA_Start_IT+0x4a0>)
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	d013      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	4a25      	ldr	r2, [pc, #148]	; (8018d9c <HAL_DMA_Start_IT+0x4a4>)
 8018d06:	4293      	cmp	r3, r2
 8018d08:	d00e      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4a24      	ldr	r2, [pc, #144]	; (8018da0 <HAL_DMA_Start_IT+0x4a8>)
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d009      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4a22      	ldr	r2, [pc, #136]	; (8018da4 <HAL_DMA_Start_IT+0x4ac>)
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	d004      	beq.n	8018d28 <HAL_DMA_Start_IT+0x430>
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4a21      	ldr	r2, [pc, #132]	; (8018da8 <HAL_DMA_Start_IT+0x4b0>)
 8018d24:	4293      	cmp	r3, r2
 8018d26:	d108      	bne.n	8018d3a <HAL_DMA_Start_IT+0x442>
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	f042 0201 	orr.w	r2, r2, #1
 8018d36:	601a      	str	r2, [r3, #0]
 8018d38:	e012      	b.n	8018d60 <HAL_DMA_Start_IT+0x468>
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	681a      	ldr	r2, [r3, #0]
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f042 0201 	orr.w	r2, r2, #1
 8018d48:	601a      	str	r2, [r3, #0]
 8018d4a:	e009      	b.n	8018d60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	2200      	movs	r2, #0
 8018d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8018d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3718      	adds	r7, #24
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	40020010 	.word	0x40020010
 8018d70:	40020028 	.word	0x40020028
 8018d74:	40020040 	.word	0x40020040
 8018d78:	40020058 	.word	0x40020058
 8018d7c:	40020070 	.word	0x40020070
 8018d80:	40020088 	.word	0x40020088
 8018d84:	400200a0 	.word	0x400200a0
 8018d88:	400200b8 	.word	0x400200b8
 8018d8c:	40020410 	.word	0x40020410
 8018d90:	40020428 	.word	0x40020428
 8018d94:	40020440 	.word	0x40020440
 8018d98:	40020458 	.word	0x40020458
 8018d9c:	40020470 	.word	0x40020470
 8018da0:	40020488 	.word	0x40020488
 8018da4:	400204a0 	.word	0x400204a0
 8018da8:	400204b8 	.word	0x400204b8
 8018dac:	58025408 	.word	0x58025408
 8018db0:	5802541c 	.word	0x5802541c
 8018db4:	58025430 	.word	0x58025430
 8018db8:	58025444 	.word	0x58025444
 8018dbc:	58025458 	.word	0x58025458
 8018dc0:	5802546c 	.word	0x5802546c
 8018dc4:	58025480 	.word	0x58025480
 8018dc8:	58025494 	.word	0x58025494

08018dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b08a      	sub	sp, #40	; 0x28
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018dd8:	4b67      	ldr	r3, [pc, #412]	; (8018f78 <HAL_DMA_IRQHandler+0x1ac>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	4a67      	ldr	r2, [pc, #412]	; (8018f7c <HAL_DMA_IRQHandler+0x1b0>)
 8018dde:	fba2 2303 	umull	r2, r3, r2, r3
 8018de2:	0a9b      	lsrs	r3, r3, #10
 8018de4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018dea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018df0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8018df2:	6a3b      	ldr	r3, [r7, #32]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	4a5f      	ldr	r2, [pc, #380]	; (8018f80 <HAL_DMA_IRQHandler+0x1b4>)
 8018e04:	4293      	cmp	r3, r2
 8018e06:	d04a      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	4a5d      	ldr	r2, [pc, #372]	; (8018f84 <HAL_DMA_IRQHandler+0x1b8>)
 8018e0e:	4293      	cmp	r3, r2
 8018e10:	d045      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	4a5c      	ldr	r2, [pc, #368]	; (8018f88 <HAL_DMA_IRQHandler+0x1bc>)
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	d040      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a5a      	ldr	r2, [pc, #360]	; (8018f8c <HAL_DMA_IRQHandler+0x1c0>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d03b      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4a59      	ldr	r2, [pc, #356]	; (8018f90 <HAL_DMA_IRQHandler+0x1c4>)
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	d036      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	4a57      	ldr	r2, [pc, #348]	; (8018f94 <HAL_DMA_IRQHandler+0x1c8>)
 8018e36:	4293      	cmp	r3, r2
 8018e38:	d031      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4a56      	ldr	r2, [pc, #344]	; (8018f98 <HAL_DMA_IRQHandler+0x1cc>)
 8018e40:	4293      	cmp	r3, r2
 8018e42:	d02c      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	4a54      	ldr	r2, [pc, #336]	; (8018f9c <HAL_DMA_IRQHandler+0x1d0>)
 8018e4a:	4293      	cmp	r3, r2
 8018e4c:	d027      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4a53      	ldr	r2, [pc, #332]	; (8018fa0 <HAL_DMA_IRQHandler+0x1d4>)
 8018e54:	4293      	cmp	r3, r2
 8018e56:	d022      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4a51      	ldr	r2, [pc, #324]	; (8018fa4 <HAL_DMA_IRQHandler+0x1d8>)
 8018e5e:	4293      	cmp	r3, r2
 8018e60:	d01d      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	4a50      	ldr	r2, [pc, #320]	; (8018fa8 <HAL_DMA_IRQHandler+0x1dc>)
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d018      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4a4e      	ldr	r2, [pc, #312]	; (8018fac <HAL_DMA_IRQHandler+0x1e0>)
 8018e72:	4293      	cmp	r3, r2
 8018e74:	d013      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4a4d      	ldr	r2, [pc, #308]	; (8018fb0 <HAL_DMA_IRQHandler+0x1e4>)
 8018e7c:	4293      	cmp	r3, r2
 8018e7e:	d00e      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	4a4b      	ldr	r2, [pc, #300]	; (8018fb4 <HAL_DMA_IRQHandler+0x1e8>)
 8018e86:	4293      	cmp	r3, r2
 8018e88:	d009      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a4a      	ldr	r2, [pc, #296]	; (8018fb8 <HAL_DMA_IRQHandler+0x1ec>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	d004      	beq.n	8018e9e <HAL_DMA_IRQHandler+0xd2>
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	4a48      	ldr	r2, [pc, #288]	; (8018fbc <HAL_DMA_IRQHandler+0x1f0>)
 8018e9a:	4293      	cmp	r3, r2
 8018e9c:	d101      	bne.n	8018ea2 <HAL_DMA_IRQHandler+0xd6>
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	e000      	b.n	8018ea4 <HAL_DMA_IRQHandler+0xd8>
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	f000 842b 	beq.w	8019700 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018eae:	f003 031f 	and.w	r3, r3, #31
 8018eb2:	2208      	movs	r2, #8
 8018eb4:	409a      	lsls	r2, r3
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	4013      	ands	r3, r2
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	f000 80a2 	beq.w	8019004 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a2e      	ldr	r2, [pc, #184]	; (8018f80 <HAL_DMA_IRQHandler+0x1b4>)
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d04a      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	4a2d      	ldr	r2, [pc, #180]	; (8018f84 <HAL_DMA_IRQHandler+0x1b8>)
 8018ed0:	4293      	cmp	r3, r2
 8018ed2:	d045      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4a2b      	ldr	r2, [pc, #172]	; (8018f88 <HAL_DMA_IRQHandler+0x1bc>)
 8018eda:	4293      	cmp	r3, r2
 8018edc:	d040      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	4a2a      	ldr	r2, [pc, #168]	; (8018f8c <HAL_DMA_IRQHandler+0x1c0>)
 8018ee4:	4293      	cmp	r3, r2
 8018ee6:	d03b      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	4a28      	ldr	r2, [pc, #160]	; (8018f90 <HAL_DMA_IRQHandler+0x1c4>)
 8018eee:	4293      	cmp	r3, r2
 8018ef0:	d036      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	4a27      	ldr	r2, [pc, #156]	; (8018f94 <HAL_DMA_IRQHandler+0x1c8>)
 8018ef8:	4293      	cmp	r3, r2
 8018efa:	d031      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	4a25      	ldr	r2, [pc, #148]	; (8018f98 <HAL_DMA_IRQHandler+0x1cc>)
 8018f02:	4293      	cmp	r3, r2
 8018f04:	d02c      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	4a24      	ldr	r2, [pc, #144]	; (8018f9c <HAL_DMA_IRQHandler+0x1d0>)
 8018f0c:	4293      	cmp	r3, r2
 8018f0e:	d027      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	4a22      	ldr	r2, [pc, #136]	; (8018fa0 <HAL_DMA_IRQHandler+0x1d4>)
 8018f16:	4293      	cmp	r3, r2
 8018f18:	d022      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	4a21      	ldr	r2, [pc, #132]	; (8018fa4 <HAL_DMA_IRQHandler+0x1d8>)
 8018f20:	4293      	cmp	r3, r2
 8018f22:	d01d      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	4a1f      	ldr	r2, [pc, #124]	; (8018fa8 <HAL_DMA_IRQHandler+0x1dc>)
 8018f2a:	4293      	cmp	r3, r2
 8018f2c:	d018      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	4a1e      	ldr	r2, [pc, #120]	; (8018fac <HAL_DMA_IRQHandler+0x1e0>)
 8018f34:	4293      	cmp	r3, r2
 8018f36:	d013      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4a1c      	ldr	r2, [pc, #112]	; (8018fb0 <HAL_DMA_IRQHandler+0x1e4>)
 8018f3e:	4293      	cmp	r3, r2
 8018f40:	d00e      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	4a1b      	ldr	r2, [pc, #108]	; (8018fb4 <HAL_DMA_IRQHandler+0x1e8>)
 8018f48:	4293      	cmp	r3, r2
 8018f4a:	d009      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	4a19      	ldr	r2, [pc, #100]	; (8018fb8 <HAL_DMA_IRQHandler+0x1ec>)
 8018f52:	4293      	cmp	r3, r2
 8018f54:	d004      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x194>
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	4a18      	ldr	r2, [pc, #96]	; (8018fbc <HAL_DMA_IRQHandler+0x1f0>)
 8018f5c:	4293      	cmp	r3, r2
 8018f5e:	d12f      	bne.n	8018fc0 <HAL_DMA_IRQHandler+0x1f4>
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f003 0304 	and.w	r3, r3, #4
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	bf14      	ite	ne
 8018f6e:	2301      	movne	r3, #1
 8018f70:	2300      	moveq	r3, #0
 8018f72:	b2db      	uxtb	r3, r3
 8018f74:	e02e      	b.n	8018fd4 <HAL_DMA_IRQHandler+0x208>
 8018f76:	bf00      	nop
 8018f78:	24000004 	.word	0x24000004
 8018f7c:	1b4e81b5 	.word	0x1b4e81b5
 8018f80:	40020010 	.word	0x40020010
 8018f84:	40020028 	.word	0x40020028
 8018f88:	40020040 	.word	0x40020040
 8018f8c:	40020058 	.word	0x40020058
 8018f90:	40020070 	.word	0x40020070
 8018f94:	40020088 	.word	0x40020088
 8018f98:	400200a0 	.word	0x400200a0
 8018f9c:	400200b8 	.word	0x400200b8
 8018fa0:	40020410 	.word	0x40020410
 8018fa4:	40020428 	.word	0x40020428
 8018fa8:	40020440 	.word	0x40020440
 8018fac:	40020458 	.word	0x40020458
 8018fb0:	40020470 	.word	0x40020470
 8018fb4:	40020488 	.word	0x40020488
 8018fb8:	400204a0 	.word	0x400204a0
 8018fbc:	400204b8 	.word	0x400204b8
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	f003 0308 	and.w	r3, r3, #8
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	bf14      	ite	ne
 8018fce:	2301      	movne	r3, #1
 8018fd0:	2300      	moveq	r3, #0
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d015      	beq.n	8019004 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	681a      	ldr	r2, [r3, #0]
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	f022 0204 	bic.w	r2, r2, #4
 8018fe6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fec:	f003 031f 	and.w	r3, r3, #31
 8018ff0:	2208      	movs	r2, #8
 8018ff2:	409a      	lsls	r2, r3
 8018ff4:	6a3b      	ldr	r3, [r7, #32]
 8018ff6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ffc:	f043 0201 	orr.w	r2, r3, #1
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019008:	f003 031f 	and.w	r3, r3, #31
 801900c:	69ba      	ldr	r2, [r7, #24]
 801900e:	fa22 f303 	lsr.w	r3, r2, r3
 8019012:	f003 0301 	and.w	r3, r3, #1
 8019016:	2b00      	cmp	r3, #0
 8019018:	d06e      	beq.n	80190f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	4a69      	ldr	r2, [pc, #420]	; (80191c4 <HAL_DMA_IRQHandler+0x3f8>)
 8019020:	4293      	cmp	r3, r2
 8019022:	d04a      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	4a67      	ldr	r2, [pc, #412]	; (80191c8 <HAL_DMA_IRQHandler+0x3fc>)
 801902a:	4293      	cmp	r3, r2
 801902c:	d045      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	4a66      	ldr	r2, [pc, #408]	; (80191cc <HAL_DMA_IRQHandler+0x400>)
 8019034:	4293      	cmp	r3, r2
 8019036:	d040      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	4a64      	ldr	r2, [pc, #400]	; (80191d0 <HAL_DMA_IRQHandler+0x404>)
 801903e:	4293      	cmp	r3, r2
 8019040:	d03b      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	4a63      	ldr	r2, [pc, #396]	; (80191d4 <HAL_DMA_IRQHandler+0x408>)
 8019048:	4293      	cmp	r3, r2
 801904a:	d036      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	4a61      	ldr	r2, [pc, #388]	; (80191d8 <HAL_DMA_IRQHandler+0x40c>)
 8019052:	4293      	cmp	r3, r2
 8019054:	d031      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4a60      	ldr	r2, [pc, #384]	; (80191dc <HAL_DMA_IRQHandler+0x410>)
 801905c:	4293      	cmp	r3, r2
 801905e:	d02c      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4a5e      	ldr	r2, [pc, #376]	; (80191e0 <HAL_DMA_IRQHandler+0x414>)
 8019066:	4293      	cmp	r3, r2
 8019068:	d027      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	4a5d      	ldr	r2, [pc, #372]	; (80191e4 <HAL_DMA_IRQHandler+0x418>)
 8019070:	4293      	cmp	r3, r2
 8019072:	d022      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	4a5b      	ldr	r2, [pc, #364]	; (80191e8 <HAL_DMA_IRQHandler+0x41c>)
 801907a:	4293      	cmp	r3, r2
 801907c:	d01d      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	4a5a      	ldr	r2, [pc, #360]	; (80191ec <HAL_DMA_IRQHandler+0x420>)
 8019084:	4293      	cmp	r3, r2
 8019086:	d018      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	4a58      	ldr	r2, [pc, #352]	; (80191f0 <HAL_DMA_IRQHandler+0x424>)
 801908e:	4293      	cmp	r3, r2
 8019090:	d013      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	4a57      	ldr	r2, [pc, #348]	; (80191f4 <HAL_DMA_IRQHandler+0x428>)
 8019098:	4293      	cmp	r3, r2
 801909a:	d00e      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	4a55      	ldr	r2, [pc, #340]	; (80191f8 <HAL_DMA_IRQHandler+0x42c>)
 80190a2:	4293      	cmp	r3, r2
 80190a4:	d009      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	4a54      	ldr	r2, [pc, #336]	; (80191fc <HAL_DMA_IRQHandler+0x430>)
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d004      	beq.n	80190ba <HAL_DMA_IRQHandler+0x2ee>
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	4a52      	ldr	r2, [pc, #328]	; (8019200 <HAL_DMA_IRQHandler+0x434>)
 80190b6:	4293      	cmp	r3, r2
 80190b8:	d10a      	bne.n	80190d0 <HAL_DMA_IRQHandler+0x304>
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	695b      	ldr	r3, [r3, #20]
 80190c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	bf14      	ite	ne
 80190c8:	2301      	movne	r3, #1
 80190ca:	2300      	moveq	r3, #0
 80190cc:	b2db      	uxtb	r3, r3
 80190ce:	e003      	b.n	80190d8 <HAL_DMA_IRQHandler+0x30c>
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	2300      	movs	r3, #0
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d00d      	beq.n	80190f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190e0:	f003 031f 	and.w	r3, r3, #31
 80190e4:	2201      	movs	r2, #1
 80190e6:	409a      	lsls	r2, r3
 80190e8:	6a3b      	ldr	r3, [r7, #32]
 80190ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190f0:	f043 0202 	orr.w	r2, r3, #2
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190fc:	f003 031f 	and.w	r3, r3, #31
 8019100:	2204      	movs	r2, #4
 8019102:	409a      	lsls	r2, r3
 8019104:	69bb      	ldr	r3, [r7, #24]
 8019106:	4013      	ands	r3, r2
 8019108:	2b00      	cmp	r3, #0
 801910a:	f000 808f 	beq.w	801922c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	4a2c      	ldr	r2, [pc, #176]	; (80191c4 <HAL_DMA_IRQHandler+0x3f8>)
 8019114:	4293      	cmp	r3, r2
 8019116:	d04a      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	4a2a      	ldr	r2, [pc, #168]	; (80191c8 <HAL_DMA_IRQHandler+0x3fc>)
 801911e:	4293      	cmp	r3, r2
 8019120:	d045      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	4a29      	ldr	r2, [pc, #164]	; (80191cc <HAL_DMA_IRQHandler+0x400>)
 8019128:	4293      	cmp	r3, r2
 801912a:	d040      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	4a27      	ldr	r2, [pc, #156]	; (80191d0 <HAL_DMA_IRQHandler+0x404>)
 8019132:	4293      	cmp	r3, r2
 8019134:	d03b      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	4a26      	ldr	r2, [pc, #152]	; (80191d4 <HAL_DMA_IRQHandler+0x408>)
 801913c:	4293      	cmp	r3, r2
 801913e:	d036      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4a24      	ldr	r2, [pc, #144]	; (80191d8 <HAL_DMA_IRQHandler+0x40c>)
 8019146:	4293      	cmp	r3, r2
 8019148:	d031      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	4a23      	ldr	r2, [pc, #140]	; (80191dc <HAL_DMA_IRQHandler+0x410>)
 8019150:	4293      	cmp	r3, r2
 8019152:	d02c      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	4a21      	ldr	r2, [pc, #132]	; (80191e0 <HAL_DMA_IRQHandler+0x414>)
 801915a:	4293      	cmp	r3, r2
 801915c:	d027      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	4a20      	ldr	r2, [pc, #128]	; (80191e4 <HAL_DMA_IRQHandler+0x418>)
 8019164:	4293      	cmp	r3, r2
 8019166:	d022      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	4a1e      	ldr	r2, [pc, #120]	; (80191e8 <HAL_DMA_IRQHandler+0x41c>)
 801916e:	4293      	cmp	r3, r2
 8019170:	d01d      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4a1d      	ldr	r2, [pc, #116]	; (80191ec <HAL_DMA_IRQHandler+0x420>)
 8019178:	4293      	cmp	r3, r2
 801917a:	d018      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	4a1b      	ldr	r2, [pc, #108]	; (80191f0 <HAL_DMA_IRQHandler+0x424>)
 8019182:	4293      	cmp	r3, r2
 8019184:	d013      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4a1a      	ldr	r2, [pc, #104]	; (80191f4 <HAL_DMA_IRQHandler+0x428>)
 801918c:	4293      	cmp	r3, r2
 801918e:	d00e      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	4a18      	ldr	r2, [pc, #96]	; (80191f8 <HAL_DMA_IRQHandler+0x42c>)
 8019196:	4293      	cmp	r3, r2
 8019198:	d009      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	4a17      	ldr	r2, [pc, #92]	; (80191fc <HAL_DMA_IRQHandler+0x430>)
 80191a0:	4293      	cmp	r3, r2
 80191a2:	d004      	beq.n	80191ae <HAL_DMA_IRQHandler+0x3e2>
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	4a15      	ldr	r2, [pc, #84]	; (8019200 <HAL_DMA_IRQHandler+0x434>)
 80191aa:	4293      	cmp	r3, r2
 80191ac:	d12a      	bne.n	8019204 <HAL_DMA_IRQHandler+0x438>
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	f003 0302 	and.w	r3, r3, #2
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	bf14      	ite	ne
 80191bc:	2301      	movne	r3, #1
 80191be:	2300      	moveq	r3, #0
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	e023      	b.n	801920c <HAL_DMA_IRQHandler+0x440>
 80191c4:	40020010 	.word	0x40020010
 80191c8:	40020028 	.word	0x40020028
 80191cc:	40020040 	.word	0x40020040
 80191d0:	40020058 	.word	0x40020058
 80191d4:	40020070 	.word	0x40020070
 80191d8:	40020088 	.word	0x40020088
 80191dc:	400200a0 	.word	0x400200a0
 80191e0:	400200b8 	.word	0x400200b8
 80191e4:	40020410 	.word	0x40020410
 80191e8:	40020428 	.word	0x40020428
 80191ec:	40020440 	.word	0x40020440
 80191f0:	40020458 	.word	0x40020458
 80191f4:	40020470 	.word	0x40020470
 80191f8:	40020488 	.word	0x40020488
 80191fc:	400204a0 	.word	0x400204a0
 8019200:	400204b8 	.word	0x400204b8
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2300      	movs	r3, #0
 801920c:	2b00      	cmp	r3, #0
 801920e:	d00d      	beq.n	801922c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019214:	f003 031f 	and.w	r3, r3, #31
 8019218:	2204      	movs	r2, #4
 801921a:	409a      	lsls	r2, r3
 801921c:	6a3b      	ldr	r3, [r7, #32]
 801921e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019224:	f043 0204 	orr.w	r2, r3, #4
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019230:	f003 031f 	and.w	r3, r3, #31
 8019234:	2210      	movs	r2, #16
 8019236:	409a      	lsls	r2, r3
 8019238:	69bb      	ldr	r3, [r7, #24]
 801923a:	4013      	ands	r3, r2
 801923c:	2b00      	cmp	r3, #0
 801923e:	f000 80a6 	beq.w	801938e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	4a85      	ldr	r2, [pc, #532]	; (801945c <HAL_DMA_IRQHandler+0x690>)
 8019248:	4293      	cmp	r3, r2
 801924a:	d04a      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	4a83      	ldr	r2, [pc, #524]	; (8019460 <HAL_DMA_IRQHandler+0x694>)
 8019252:	4293      	cmp	r3, r2
 8019254:	d045      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4a82      	ldr	r2, [pc, #520]	; (8019464 <HAL_DMA_IRQHandler+0x698>)
 801925c:	4293      	cmp	r3, r2
 801925e:	d040      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	4a80      	ldr	r2, [pc, #512]	; (8019468 <HAL_DMA_IRQHandler+0x69c>)
 8019266:	4293      	cmp	r3, r2
 8019268:	d03b      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	4a7f      	ldr	r2, [pc, #508]	; (801946c <HAL_DMA_IRQHandler+0x6a0>)
 8019270:	4293      	cmp	r3, r2
 8019272:	d036      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	4a7d      	ldr	r2, [pc, #500]	; (8019470 <HAL_DMA_IRQHandler+0x6a4>)
 801927a:	4293      	cmp	r3, r2
 801927c:	d031      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	4a7c      	ldr	r2, [pc, #496]	; (8019474 <HAL_DMA_IRQHandler+0x6a8>)
 8019284:	4293      	cmp	r3, r2
 8019286:	d02c      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	4a7a      	ldr	r2, [pc, #488]	; (8019478 <HAL_DMA_IRQHandler+0x6ac>)
 801928e:	4293      	cmp	r3, r2
 8019290:	d027      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4a79      	ldr	r2, [pc, #484]	; (801947c <HAL_DMA_IRQHandler+0x6b0>)
 8019298:	4293      	cmp	r3, r2
 801929a:	d022      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	4a77      	ldr	r2, [pc, #476]	; (8019480 <HAL_DMA_IRQHandler+0x6b4>)
 80192a2:	4293      	cmp	r3, r2
 80192a4:	d01d      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	4a76      	ldr	r2, [pc, #472]	; (8019484 <HAL_DMA_IRQHandler+0x6b8>)
 80192ac:	4293      	cmp	r3, r2
 80192ae:	d018      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	4a74      	ldr	r2, [pc, #464]	; (8019488 <HAL_DMA_IRQHandler+0x6bc>)
 80192b6:	4293      	cmp	r3, r2
 80192b8:	d013      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	4a73      	ldr	r2, [pc, #460]	; (801948c <HAL_DMA_IRQHandler+0x6c0>)
 80192c0:	4293      	cmp	r3, r2
 80192c2:	d00e      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	4a71      	ldr	r2, [pc, #452]	; (8019490 <HAL_DMA_IRQHandler+0x6c4>)
 80192ca:	4293      	cmp	r3, r2
 80192cc:	d009      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	4a70      	ldr	r2, [pc, #448]	; (8019494 <HAL_DMA_IRQHandler+0x6c8>)
 80192d4:	4293      	cmp	r3, r2
 80192d6:	d004      	beq.n	80192e2 <HAL_DMA_IRQHandler+0x516>
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	4a6e      	ldr	r2, [pc, #440]	; (8019498 <HAL_DMA_IRQHandler+0x6cc>)
 80192de:	4293      	cmp	r3, r2
 80192e0:	d10a      	bne.n	80192f8 <HAL_DMA_IRQHandler+0x52c>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	f003 0308 	and.w	r3, r3, #8
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	bf14      	ite	ne
 80192f0:	2301      	movne	r3, #1
 80192f2:	2300      	moveq	r3, #0
 80192f4:	b2db      	uxtb	r3, r3
 80192f6:	e009      	b.n	801930c <HAL_DMA_IRQHandler+0x540>
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f003 0304 	and.w	r3, r3, #4
 8019302:	2b00      	cmp	r3, #0
 8019304:	bf14      	ite	ne
 8019306:	2301      	movne	r3, #1
 8019308:	2300      	moveq	r3, #0
 801930a:	b2db      	uxtb	r3, r3
 801930c:	2b00      	cmp	r3, #0
 801930e:	d03e      	beq.n	801938e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019314:	f003 031f 	and.w	r3, r3, #31
 8019318:	2210      	movs	r2, #16
 801931a:	409a      	lsls	r2, r3
 801931c:	6a3b      	ldr	r3, [r7, #32]
 801931e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801932a:	2b00      	cmp	r3, #0
 801932c:	d018      	beq.n	8019360 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019338:	2b00      	cmp	r3, #0
 801933a:	d108      	bne.n	801934e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019340:	2b00      	cmp	r3, #0
 8019342:	d024      	beq.n	801938e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	4798      	blx	r3
 801934c:	e01f      	b.n	801938e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019352:	2b00      	cmp	r3, #0
 8019354:	d01b      	beq.n	801938e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	4798      	blx	r3
 801935e:	e016      	b.n	801938e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801936a:	2b00      	cmp	r3, #0
 801936c:	d107      	bne.n	801937e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	f022 0208 	bic.w	r2, r2, #8
 801937c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019382:	2b00      	cmp	r3, #0
 8019384:	d003      	beq.n	801938e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019392:	f003 031f 	and.w	r3, r3, #31
 8019396:	2220      	movs	r2, #32
 8019398:	409a      	lsls	r2, r3
 801939a:	69bb      	ldr	r3, [r7, #24]
 801939c:	4013      	ands	r3, r2
 801939e:	2b00      	cmp	r3, #0
 80193a0:	f000 8110 	beq.w	80195c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	4a2c      	ldr	r2, [pc, #176]	; (801945c <HAL_DMA_IRQHandler+0x690>)
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d04a      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	4a2b      	ldr	r2, [pc, #172]	; (8019460 <HAL_DMA_IRQHandler+0x694>)
 80193b4:	4293      	cmp	r3, r2
 80193b6:	d045      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	4a29      	ldr	r2, [pc, #164]	; (8019464 <HAL_DMA_IRQHandler+0x698>)
 80193be:	4293      	cmp	r3, r2
 80193c0:	d040      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	4a28      	ldr	r2, [pc, #160]	; (8019468 <HAL_DMA_IRQHandler+0x69c>)
 80193c8:	4293      	cmp	r3, r2
 80193ca:	d03b      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	4a26      	ldr	r2, [pc, #152]	; (801946c <HAL_DMA_IRQHandler+0x6a0>)
 80193d2:	4293      	cmp	r3, r2
 80193d4:	d036      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4a25      	ldr	r2, [pc, #148]	; (8019470 <HAL_DMA_IRQHandler+0x6a4>)
 80193dc:	4293      	cmp	r3, r2
 80193de:	d031      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	4a23      	ldr	r2, [pc, #140]	; (8019474 <HAL_DMA_IRQHandler+0x6a8>)
 80193e6:	4293      	cmp	r3, r2
 80193e8:	d02c      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	4a22      	ldr	r2, [pc, #136]	; (8019478 <HAL_DMA_IRQHandler+0x6ac>)
 80193f0:	4293      	cmp	r3, r2
 80193f2:	d027      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	4a20      	ldr	r2, [pc, #128]	; (801947c <HAL_DMA_IRQHandler+0x6b0>)
 80193fa:	4293      	cmp	r3, r2
 80193fc:	d022      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	4a1f      	ldr	r2, [pc, #124]	; (8019480 <HAL_DMA_IRQHandler+0x6b4>)
 8019404:	4293      	cmp	r3, r2
 8019406:	d01d      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	4a1d      	ldr	r2, [pc, #116]	; (8019484 <HAL_DMA_IRQHandler+0x6b8>)
 801940e:	4293      	cmp	r3, r2
 8019410:	d018      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	4a1c      	ldr	r2, [pc, #112]	; (8019488 <HAL_DMA_IRQHandler+0x6bc>)
 8019418:	4293      	cmp	r3, r2
 801941a:	d013      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	4a1a      	ldr	r2, [pc, #104]	; (801948c <HAL_DMA_IRQHandler+0x6c0>)
 8019422:	4293      	cmp	r3, r2
 8019424:	d00e      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	4a19      	ldr	r2, [pc, #100]	; (8019490 <HAL_DMA_IRQHandler+0x6c4>)
 801942c:	4293      	cmp	r3, r2
 801942e:	d009      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	4a17      	ldr	r2, [pc, #92]	; (8019494 <HAL_DMA_IRQHandler+0x6c8>)
 8019436:	4293      	cmp	r3, r2
 8019438:	d004      	beq.n	8019444 <HAL_DMA_IRQHandler+0x678>
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	4a16      	ldr	r2, [pc, #88]	; (8019498 <HAL_DMA_IRQHandler+0x6cc>)
 8019440:	4293      	cmp	r3, r2
 8019442:	d12b      	bne.n	801949c <HAL_DMA_IRQHandler+0x6d0>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	f003 0310 	and.w	r3, r3, #16
 801944e:	2b00      	cmp	r3, #0
 8019450:	bf14      	ite	ne
 8019452:	2301      	movne	r3, #1
 8019454:	2300      	moveq	r3, #0
 8019456:	b2db      	uxtb	r3, r3
 8019458:	e02a      	b.n	80194b0 <HAL_DMA_IRQHandler+0x6e4>
 801945a:	bf00      	nop
 801945c:	40020010 	.word	0x40020010
 8019460:	40020028 	.word	0x40020028
 8019464:	40020040 	.word	0x40020040
 8019468:	40020058 	.word	0x40020058
 801946c:	40020070 	.word	0x40020070
 8019470:	40020088 	.word	0x40020088
 8019474:	400200a0 	.word	0x400200a0
 8019478:	400200b8 	.word	0x400200b8
 801947c:	40020410 	.word	0x40020410
 8019480:	40020428 	.word	0x40020428
 8019484:	40020440 	.word	0x40020440
 8019488:	40020458 	.word	0x40020458
 801948c:	40020470 	.word	0x40020470
 8019490:	40020488 	.word	0x40020488
 8019494:	400204a0 	.word	0x400204a0
 8019498:	400204b8 	.word	0x400204b8
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	f003 0302 	and.w	r3, r3, #2
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	bf14      	ite	ne
 80194aa:	2301      	movne	r3, #1
 80194ac:	2300      	moveq	r3, #0
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	f000 8087 	beq.w	80195c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194ba:	f003 031f 	and.w	r3, r3, #31
 80194be:	2220      	movs	r2, #32
 80194c0:	409a      	lsls	r2, r3
 80194c2:	6a3b      	ldr	r3, [r7, #32]
 80194c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80194cc:	b2db      	uxtb	r3, r3
 80194ce:	2b04      	cmp	r3, #4
 80194d0:	d139      	bne.n	8019546 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f022 0216 	bic.w	r2, r2, #22
 80194e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	695a      	ldr	r2, [r3, #20]
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80194f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d103      	bne.n	8019502 <HAL_DMA_IRQHandler+0x736>
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d007      	beq.n	8019512 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	681a      	ldr	r2, [r3, #0]
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	f022 0208 	bic.w	r2, r2, #8
 8019510:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019516:	f003 031f 	and.w	r3, r3, #31
 801951a:	223f      	movs	r2, #63	; 0x3f
 801951c:	409a      	lsls	r2, r3
 801951e:	6a3b      	ldr	r3, [r7, #32]
 8019520:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2201      	movs	r2, #1
 8019526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2200      	movs	r2, #0
 801952e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019536:	2b00      	cmp	r3, #0
 8019538:	f000 834a 	beq.w	8019bd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	4798      	blx	r3
          }
          return;
 8019544:	e344      	b.n	8019bd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019550:	2b00      	cmp	r3, #0
 8019552:	d018      	beq.n	8019586 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801955e:	2b00      	cmp	r3, #0
 8019560:	d108      	bne.n	8019574 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019566:	2b00      	cmp	r3, #0
 8019568:	d02c      	beq.n	80195c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801956e:	6878      	ldr	r0, [r7, #4]
 8019570:	4798      	blx	r3
 8019572:	e027      	b.n	80195c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019578:	2b00      	cmp	r3, #0
 801957a:	d023      	beq.n	80195c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019580:	6878      	ldr	r0, [r7, #4]
 8019582:	4798      	blx	r3
 8019584:	e01e      	b.n	80195c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019590:	2b00      	cmp	r3, #0
 8019592:	d10f      	bne.n	80195b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	681a      	ldr	r2, [r3, #0]
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	f022 0210 	bic.w	r2, r2, #16
 80195a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	2201      	movs	r2, #1
 80195a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	2200      	movs	r2, #0
 80195b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d003      	beq.n	80195c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	f000 8306 	beq.w	8019bda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195d2:	f003 0301 	and.w	r3, r3, #1
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	f000 8088 	beq.w	80196ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2204      	movs	r2, #4
 80195e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	4a7a      	ldr	r2, [pc, #488]	; (80197d4 <HAL_DMA_IRQHandler+0xa08>)
 80195ea:	4293      	cmp	r3, r2
 80195ec:	d04a      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	4a79      	ldr	r2, [pc, #484]	; (80197d8 <HAL_DMA_IRQHandler+0xa0c>)
 80195f4:	4293      	cmp	r3, r2
 80195f6:	d045      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	4a77      	ldr	r2, [pc, #476]	; (80197dc <HAL_DMA_IRQHandler+0xa10>)
 80195fe:	4293      	cmp	r3, r2
 8019600:	d040      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4a76      	ldr	r2, [pc, #472]	; (80197e0 <HAL_DMA_IRQHandler+0xa14>)
 8019608:	4293      	cmp	r3, r2
 801960a:	d03b      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	4a74      	ldr	r2, [pc, #464]	; (80197e4 <HAL_DMA_IRQHandler+0xa18>)
 8019612:	4293      	cmp	r3, r2
 8019614:	d036      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	4a73      	ldr	r2, [pc, #460]	; (80197e8 <HAL_DMA_IRQHandler+0xa1c>)
 801961c:	4293      	cmp	r3, r2
 801961e:	d031      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	4a71      	ldr	r2, [pc, #452]	; (80197ec <HAL_DMA_IRQHandler+0xa20>)
 8019626:	4293      	cmp	r3, r2
 8019628:	d02c      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	4a70      	ldr	r2, [pc, #448]	; (80197f0 <HAL_DMA_IRQHandler+0xa24>)
 8019630:	4293      	cmp	r3, r2
 8019632:	d027      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	4a6e      	ldr	r2, [pc, #440]	; (80197f4 <HAL_DMA_IRQHandler+0xa28>)
 801963a:	4293      	cmp	r3, r2
 801963c:	d022      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	4a6d      	ldr	r2, [pc, #436]	; (80197f8 <HAL_DMA_IRQHandler+0xa2c>)
 8019644:	4293      	cmp	r3, r2
 8019646:	d01d      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	4a6b      	ldr	r2, [pc, #428]	; (80197fc <HAL_DMA_IRQHandler+0xa30>)
 801964e:	4293      	cmp	r3, r2
 8019650:	d018      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	4a6a      	ldr	r2, [pc, #424]	; (8019800 <HAL_DMA_IRQHandler+0xa34>)
 8019658:	4293      	cmp	r3, r2
 801965a:	d013      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	4a68      	ldr	r2, [pc, #416]	; (8019804 <HAL_DMA_IRQHandler+0xa38>)
 8019662:	4293      	cmp	r3, r2
 8019664:	d00e      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	4a67      	ldr	r2, [pc, #412]	; (8019808 <HAL_DMA_IRQHandler+0xa3c>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d009      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a65      	ldr	r2, [pc, #404]	; (801980c <HAL_DMA_IRQHandler+0xa40>)
 8019676:	4293      	cmp	r3, r2
 8019678:	d004      	beq.n	8019684 <HAL_DMA_IRQHandler+0x8b8>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4a64      	ldr	r2, [pc, #400]	; (8019810 <HAL_DMA_IRQHandler+0xa44>)
 8019680:	4293      	cmp	r3, r2
 8019682:	d108      	bne.n	8019696 <HAL_DMA_IRQHandler+0x8ca>
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	f022 0201 	bic.w	r2, r2, #1
 8019692:	601a      	str	r2, [r3, #0]
 8019694:	e007      	b.n	80196a6 <HAL_DMA_IRQHandler+0x8da>
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	f022 0201 	bic.w	r2, r2, #1
 80196a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	3301      	adds	r3, #1
 80196aa:	60fb      	str	r3, [r7, #12]
 80196ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196ae:	429a      	cmp	r2, r3
 80196b0:	d307      	bcc.n	80196c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	f003 0301 	and.w	r3, r3, #1
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d1f2      	bne.n	80196a6 <HAL_DMA_IRQHandler+0x8da>
 80196c0:	e000      	b.n	80196c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80196c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f003 0301 	and.w	r3, r3, #1
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d004      	beq.n	80196dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2203      	movs	r2, #3
 80196d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80196da:	e003      	b.n	80196e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2201      	movs	r2, #1
 80196e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2200      	movs	r2, #0
 80196e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	f000 8272 	beq.w	8019bda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196fa:	6878      	ldr	r0, [r7, #4]
 80196fc:	4798      	blx	r3
 80196fe:	e26c      	b.n	8019bda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	4a43      	ldr	r2, [pc, #268]	; (8019814 <HAL_DMA_IRQHandler+0xa48>)
 8019706:	4293      	cmp	r3, r2
 8019708:	d022      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	4a42      	ldr	r2, [pc, #264]	; (8019818 <HAL_DMA_IRQHandler+0xa4c>)
 8019710:	4293      	cmp	r3, r2
 8019712:	d01d      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4a40      	ldr	r2, [pc, #256]	; (801981c <HAL_DMA_IRQHandler+0xa50>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d018      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	4a3f      	ldr	r2, [pc, #252]	; (8019820 <HAL_DMA_IRQHandler+0xa54>)
 8019724:	4293      	cmp	r3, r2
 8019726:	d013      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4a3d      	ldr	r2, [pc, #244]	; (8019824 <HAL_DMA_IRQHandler+0xa58>)
 801972e:	4293      	cmp	r3, r2
 8019730:	d00e      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	4a3c      	ldr	r2, [pc, #240]	; (8019828 <HAL_DMA_IRQHandler+0xa5c>)
 8019738:	4293      	cmp	r3, r2
 801973a:	d009      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	4a3a      	ldr	r2, [pc, #232]	; (801982c <HAL_DMA_IRQHandler+0xa60>)
 8019742:	4293      	cmp	r3, r2
 8019744:	d004      	beq.n	8019750 <HAL_DMA_IRQHandler+0x984>
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4a39      	ldr	r2, [pc, #228]	; (8019830 <HAL_DMA_IRQHandler+0xa64>)
 801974c:	4293      	cmp	r3, r2
 801974e:	d101      	bne.n	8019754 <HAL_DMA_IRQHandler+0x988>
 8019750:	2301      	movs	r3, #1
 8019752:	e000      	b.n	8019756 <HAL_DMA_IRQHandler+0x98a>
 8019754:	2300      	movs	r3, #0
 8019756:	2b00      	cmp	r3, #0
 8019758:	f000 823f 	beq.w	8019bda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019768:	f003 031f 	and.w	r3, r3, #31
 801976c:	2204      	movs	r2, #4
 801976e:	409a      	lsls	r2, r3
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	4013      	ands	r3, r2
 8019774:	2b00      	cmp	r3, #0
 8019776:	f000 80cd 	beq.w	8019914 <HAL_DMA_IRQHandler+0xb48>
 801977a:	693b      	ldr	r3, [r7, #16]
 801977c:	f003 0304 	and.w	r3, r3, #4
 8019780:	2b00      	cmp	r3, #0
 8019782:	f000 80c7 	beq.w	8019914 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801978a:	f003 031f 	and.w	r3, r3, #31
 801978e:	2204      	movs	r2, #4
 8019790:	409a      	lsls	r2, r3
 8019792:	69fb      	ldr	r3, [r7, #28]
 8019794:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019796:	693b      	ldr	r3, [r7, #16]
 8019798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801979c:	2b00      	cmp	r3, #0
 801979e:	d049      	beq.n	8019834 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80197a0:	693b      	ldr	r3, [r7, #16]
 80197a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d109      	bne.n	80197be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	f000 8210 	beq.w	8019bd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80197bc:	e20a      	b.n	8019bd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f000 8206 	beq.w	8019bd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80197d0:	e200      	b.n	8019bd4 <HAL_DMA_IRQHandler+0xe08>
 80197d2:	bf00      	nop
 80197d4:	40020010 	.word	0x40020010
 80197d8:	40020028 	.word	0x40020028
 80197dc:	40020040 	.word	0x40020040
 80197e0:	40020058 	.word	0x40020058
 80197e4:	40020070 	.word	0x40020070
 80197e8:	40020088 	.word	0x40020088
 80197ec:	400200a0 	.word	0x400200a0
 80197f0:	400200b8 	.word	0x400200b8
 80197f4:	40020410 	.word	0x40020410
 80197f8:	40020428 	.word	0x40020428
 80197fc:	40020440 	.word	0x40020440
 8019800:	40020458 	.word	0x40020458
 8019804:	40020470 	.word	0x40020470
 8019808:	40020488 	.word	0x40020488
 801980c:	400204a0 	.word	0x400204a0
 8019810:	400204b8 	.word	0x400204b8
 8019814:	58025408 	.word	0x58025408
 8019818:	5802541c 	.word	0x5802541c
 801981c:	58025430 	.word	0x58025430
 8019820:	58025444 	.word	0x58025444
 8019824:	58025458 	.word	0x58025458
 8019828:	5802546c 	.word	0x5802546c
 801982c:	58025480 	.word	0x58025480
 8019830:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8019834:	693b      	ldr	r3, [r7, #16]
 8019836:	f003 0320 	and.w	r3, r3, #32
 801983a:	2b00      	cmp	r3, #0
 801983c:	d160      	bne.n	8019900 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	4a7f      	ldr	r2, [pc, #508]	; (8019a40 <HAL_DMA_IRQHandler+0xc74>)
 8019844:	4293      	cmp	r3, r2
 8019846:	d04a      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	4a7d      	ldr	r2, [pc, #500]	; (8019a44 <HAL_DMA_IRQHandler+0xc78>)
 801984e:	4293      	cmp	r3, r2
 8019850:	d045      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4a7c      	ldr	r2, [pc, #496]	; (8019a48 <HAL_DMA_IRQHandler+0xc7c>)
 8019858:	4293      	cmp	r3, r2
 801985a:	d040      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	4a7a      	ldr	r2, [pc, #488]	; (8019a4c <HAL_DMA_IRQHandler+0xc80>)
 8019862:	4293      	cmp	r3, r2
 8019864:	d03b      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	4a79      	ldr	r2, [pc, #484]	; (8019a50 <HAL_DMA_IRQHandler+0xc84>)
 801986c:	4293      	cmp	r3, r2
 801986e:	d036      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a77      	ldr	r2, [pc, #476]	; (8019a54 <HAL_DMA_IRQHandler+0xc88>)
 8019876:	4293      	cmp	r3, r2
 8019878:	d031      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	4a76      	ldr	r2, [pc, #472]	; (8019a58 <HAL_DMA_IRQHandler+0xc8c>)
 8019880:	4293      	cmp	r3, r2
 8019882:	d02c      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	4a74      	ldr	r2, [pc, #464]	; (8019a5c <HAL_DMA_IRQHandler+0xc90>)
 801988a:	4293      	cmp	r3, r2
 801988c:	d027      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	4a73      	ldr	r2, [pc, #460]	; (8019a60 <HAL_DMA_IRQHandler+0xc94>)
 8019894:	4293      	cmp	r3, r2
 8019896:	d022      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4a71      	ldr	r2, [pc, #452]	; (8019a64 <HAL_DMA_IRQHandler+0xc98>)
 801989e:	4293      	cmp	r3, r2
 80198a0:	d01d      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	4a70      	ldr	r2, [pc, #448]	; (8019a68 <HAL_DMA_IRQHandler+0xc9c>)
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d018      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	4a6e      	ldr	r2, [pc, #440]	; (8019a6c <HAL_DMA_IRQHandler+0xca0>)
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d013      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	4a6d      	ldr	r2, [pc, #436]	; (8019a70 <HAL_DMA_IRQHandler+0xca4>)
 80198bc:	4293      	cmp	r3, r2
 80198be:	d00e      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	4a6b      	ldr	r2, [pc, #428]	; (8019a74 <HAL_DMA_IRQHandler+0xca8>)
 80198c6:	4293      	cmp	r3, r2
 80198c8:	d009      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	4a6a      	ldr	r2, [pc, #424]	; (8019a78 <HAL_DMA_IRQHandler+0xcac>)
 80198d0:	4293      	cmp	r3, r2
 80198d2:	d004      	beq.n	80198de <HAL_DMA_IRQHandler+0xb12>
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	4a68      	ldr	r2, [pc, #416]	; (8019a7c <HAL_DMA_IRQHandler+0xcb0>)
 80198da:	4293      	cmp	r3, r2
 80198dc:	d108      	bne.n	80198f0 <HAL_DMA_IRQHandler+0xb24>
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	f022 0208 	bic.w	r2, r2, #8
 80198ec:	601a      	str	r2, [r3, #0]
 80198ee:	e007      	b.n	8019900 <HAL_DMA_IRQHandler+0xb34>
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	681a      	ldr	r2, [r3, #0]
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	f022 0204 	bic.w	r2, r2, #4
 80198fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019904:	2b00      	cmp	r3, #0
 8019906:	f000 8165 	beq.w	8019bd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019912:	e15f      	b.n	8019bd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019918:	f003 031f 	and.w	r3, r3, #31
 801991c:	2202      	movs	r2, #2
 801991e:	409a      	lsls	r2, r3
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	4013      	ands	r3, r2
 8019924:	2b00      	cmp	r3, #0
 8019926:	f000 80c5 	beq.w	8019ab4 <HAL_DMA_IRQHandler+0xce8>
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	f003 0302 	and.w	r3, r3, #2
 8019930:	2b00      	cmp	r3, #0
 8019932:	f000 80bf 	beq.w	8019ab4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801993a:	f003 031f 	and.w	r3, r3, #31
 801993e:	2202      	movs	r2, #2
 8019940:	409a      	lsls	r2, r3
 8019942:	69fb      	ldr	r3, [r7, #28]
 8019944:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019946:	693b      	ldr	r3, [r7, #16]
 8019948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801994c:	2b00      	cmp	r3, #0
 801994e:	d018      	beq.n	8019982 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8019950:	693b      	ldr	r3, [r7, #16]
 8019952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019956:	2b00      	cmp	r3, #0
 8019958:	d109      	bne.n	801996e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801995e:	2b00      	cmp	r3, #0
 8019960:	f000 813a 	beq.w	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801996c:	e134      	b.n	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019972:	2b00      	cmp	r3, #0
 8019974:	f000 8130 	beq.w	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801997c:	6878      	ldr	r0, [r7, #4]
 801997e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019980:	e12a      	b.n	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8019982:	693b      	ldr	r3, [r7, #16]
 8019984:	f003 0320 	and.w	r3, r3, #32
 8019988:	2b00      	cmp	r3, #0
 801998a:	f040 8089 	bne.w	8019aa0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4a2b      	ldr	r2, [pc, #172]	; (8019a40 <HAL_DMA_IRQHandler+0xc74>)
 8019994:	4293      	cmp	r3, r2
 8019996:	d04a      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	4a29      	ldr	r2, [pc, #164]	; (8019a44 <HAL_DMA_IRQHandler+0xc78>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d045      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	4a28      	ldr	r2, [pc, #160]	; (8019a48 <HAL_DMA_IRQHandler+0xc7c>)
 80199a8:	4293      	cmp	r3, r2
 80199aa:	d040      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	4a26      	ldr	r2, [pc, #152]	; (8019a4c <HAL_DMA_IRQHandler+0xc80>)
 80199b2:	4293      	cmp	r3, r2
 80199b4:	d03b      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4a25      	ldr	r2, [pc, #148]	; (8019a50 <HAL_DMA_IRQHandler+0xc84>)
 80199bc:	4293      	cmp	r3, r2
 80199be:	d036      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	4a23      	ldr	r2, [pc, #140]	; (8019a54 <HAL_DMA_IRQHandler+0xc88>)
 80199c6:	4293      	cmp	r3, r2
 80199c8:	d031      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	4a22      	ldr	r2, [pc, #136]	; (8019a58 <HAL_DMA_IRQHandler+0xc8c>)
 80199d0:	4293      	cmp	r3, r2
 80199d2:	d02c      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	4a20      	ldr	r2, [pc, #128]	; (8019a5c <HAL_DMA_IRQHandler+0xc90>)
 80199da:	4293      	cmp	r3, r2
 80199dc:	d027      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	4a1f      	ldr	r2, [pc, #124]	; (8019a60 <HAL_DMA_IRQHandler+0xc94>)
 80199e4:	4293      	cmp	r3, r2
 80199e6:	d022      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	4a1d      	ldr	r2, [pc, #116]	; (8019a64 <HAL_DMA_IRQHandler+0xc98>)
 80199ee:	4293      	cmp	r3, r2
 80199f0:	d01d      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	4a1c      	ldr	r2, [pc, #112]	; (8019a68 <HAL_DMA_IRQHandler+0xc9c>)
 80199f8:	4293      	cmp	r3, r2
 80199fa:	d018      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	4a1a      	ldr	r2, [pc, #104]	; (8019a6c <HAL_DMA_IRQHandler+0xca0>)
 8019a02:	4293      	cmp	r3, r2
 8019a04:	d013      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	4a19      	ldr	r2, [pc, #100]	; (8019a70 <HAL_DMA_IRQHandler+0xca4>)
 8019a0c:	4293      	cmp	r3, r2
 8019a0e:	d00e      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	4a17      	ldr	r2, [pc, #92]	; (8019a74 <HAL_DMA_IRQHandler+0xca8>)
 8019a16:	4293      	cmp	r3, r2
 8019a18:	d009      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	4a16      	ldr	r2, [pc, #88]	; (8019a78 <HAL_DMA_IRQHandler+0xcac>)
 8019a20:	4293      	cmp	r3, r2
 8019a22:	d004      	beq.n	8019a2e <HAL_DMA_IRQHandler+0xc62>
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4a14      	ldr	r2, [pc, #80]	; (8019a7c <HAL_DMA_IRQHandler+0xcb0>)
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	d128      	bne.n	8019a80 <HAL_DMA_IRQHandler+0xcb4>
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	f022 0214 	bic.w	r2, r2, #20
 8019a3c:	601a      	str	r2, [r3, #0]
 8019a3e:	e027      	b.n	8019a90 <HAL_DMA_IRQHandler+0xcc4>
 8019a40:	40020010 	.word	0x40020010
 8019a44:	40020028 	.word	0x40020028
 8019a48:	40020040 	.word	0x40020040
 8019a4c:	40020058 	.word	0x40020058
 8019a50:	40020070 	.word	0x40020070
 8019a54:	40020088 	.word	0x40020088
 8019a58:	400200a0 	.word	0x400200a0
 8019a5c:	400200b8 	.word	0x400200b8
 8019a60:	40020410 	.word	0x40020410
 8019a64:	40020428 	.word	0x40020428
 8019a68:	40020440 	.word	0x40020440
 8019a6c:	40020458 	.word	0x40020458
 8019a70:	40020470 	.word	0x40020470
 8019a74:	40020488 	.word	0x40020488
 8019a78:	400204a0 	.word	0x400204a0
 8019a7c:	400204b8 	.word	0x400204b8
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	681a      	ldr	r2, [r3, #0]
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f022 020a 	bic.w	r2, r2, #10
 8019a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2201      	movs	r2, #1
 8019a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	f000 8097 	beq.w	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019aae:	6878      	ldr	r0, [r7, #4]
 8019ab0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019ab2:	e091      	b.n	8019bd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ab8:	f003 031f 	and.w	r3, r3, #31
 8019abc:	2208      	movs	r2, #8
 8019abe:	409a      	lsls	r2, r3
 8019ac0:	697b      	ldr	r3, [r7, #20]
 8019ac2:	4013      	ands	r3, r2
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	f000 8088 	beq.w	8019bda <HAL_DMA_IRQHandler+0xe0e>
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	f003 0308 	and.w	r3, r3, #8
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	f000 8082 	beq.w	8019bda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	4a41      	ldr	r2, [pc, #260]	; (8019be0 <HAL_DMA_IRQHandler+0xe14>)
 8019adc:	4293      	cmp	r3, r2
 8019ade:	d04a      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	4a3f      	ldr	r2, [pc, #252]	; (8019be4 <HAL_DMA_IRQHandler+0xe18>)
 8019ae6:	4293      	cmp	r3, r2
 8019ae8:	d045      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	4a3e      	ldr	r2, [pc, #248]	; (8019be8 <HAL_DMA_IRQHandler+0xe1c>)
 8019af0:	4293      	cmp	r3, r2
 8019af2:	d040      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	4a3c      	ldr	r2, [pc, #240]	; (8019bec <HAL_DMA_IRQHandler+0xe20>)
 8019afa:	4293      	cmp	r3, r2
 8019afc:	d03b      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	4a3b      	ldr	r2, [pc, #236]	; (8019bf0 <HAL_DMA_IRQHandler+0xe24>)
 8019b04:	4293      	cmp	r3, r2
 8019b06:	d036      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	4a39      	ldr	r2, [pc, #228]	; (8019bf4 <HAL_DMA_IRQHandler+0xe28>)
 8019b0e:	4293      	cmp	r3, r2
 8019b10:	d031      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	4a38      	ldr	r2, [pc, #224]	; (8019bf8 <HAL_DMA_IRQHandler+0xe2c>)
 8019b18:	4293      	cmp	r3, r2
 8019b1a:	d02c      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	4a36      	ldr	r2, [pc, #216]	; (8019bfc <HAL_DMA_IRQHandler+0xe30>)
 8019b22:	4293      	cmp	r3, r2
 8019b24:	d027      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	4a35      	ldr	r2, [pc, #212]	; (8019c00 <HAL_DMA_IRQHandler+0xe34>)
 8019b2c:	4293      	cmp	r3, r2
 8019b2e:	d022      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	4a33      	ldr	r2, [pc, #204]	; (8019c04 <HAL_DMA_IRQHandler+0xe38>)
 8019b36:	4293      	cmp	r3, r2
 8019b38:	d01d      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	4a32      	ldr	r2, [pc, #200]	; (8019c08 <HAL_DMA_IRQHandler+0xe3c>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d018      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4a30      	ldr	r2, [pc, #192]	; (8019c0c <HAL_DMA_IRQHandler+0xe40>)
 8019b4a:	4293      	cmp	r3, r2
 8019b4c:	d013      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	4a2f      	ldr	r2, [pc, #188]	; (8019c10 <HAL_DMA_IRQHandler+0xe44>)
 8019b54:	4293      	cmp	r3, r2
 8019b56:	d00e      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	4a2d      	ldr	r2, [pc, #180]	; (8019c14 <HAL_DMA_IRQHandler+0xe48>)
 8019b5e:	4293      	cmp	r3, r2
 8019b60:	d009      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4a2c      	ldr	r2, [pc, #176]	; (8019c18 <HAL_DMA_IRQHandler+0xe4c>)
 8019b68:	4293      	cmp	r3, r2
 8019b6a:	d004      	beq.n	8019b76 <HAL_DMA_IRQHandler+0xdaa>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	4a2a      	ldr	r2, [pc, #168]	; (8019c1c <HAL_DMA_IRQHandler+0xe50>)
 8019b72:	4293      	cmp	r3, r2
 8019b74:	d108      	bne.n	8019b88 <HAL_DMA_IRQHandler+0xdbc>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	681a      	ldr	r2, [r3, #0]
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	f022 021c 	bic.w	r2, r2, #28
 8019b84:	601a      	str	r2, [r3, #0]
 8019b86:	e007      	b.n	8019b98 <HAL_DMA_IRQHandler+0xdcc>
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	f022 020e 	bic.w	r2, r2, #14
 8019b96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b9c:	f003 031f 	and.w	r3, r3, #31
 8019ba0:	2201      	movs	r2, #1
 8019ba2:	409a      	lsls	r2, r3
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	2201      	movs	r2, #1
 8019bac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	2201      	movs	r2, #1
 8019bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	2200      	movs	r2, #0
 8019bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d009      	beq.n	8019bda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	4798      	blx	r3
 8019bce:	e004      	b.n	8019bda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8019bd0:	bf00      	nop
 8019bd2:	e002      	b.n	8019bda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019bd4:	bf00      	nop
 8019bd6:	e000      	b.n	8019bda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019bd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8019bda:	3728      	adds	r7, #40	; 0x28
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	bd80      	pop	{r7, pc}
 8019be0:	40020010 	.word	0x40020010
 8019be4:	40020028 	.word	0x40020028
 8019be8:	40020040 	.word	0x40020040
 8019bec:	40020058 	.word	0x40020058
 8019bf0:	40020070 	.word	0x40020070
 8019bf4:	40020088 	.word	0x40020088
 8019bf8:	400200a0 	.word	0x400200a0
 8019bfc:	400200b8 	.word	0x400200b8
 8019c00:	40020410 	.word	0x40020410
 8019c04:	40020428 	.word	0x40020428
 8019c08:	40020440 	.word	0x40020440
 8019c0c:	40020458 	.word	0x40020458
 8019c10:	40020470 	.word	0x40020470
 8019c14:	40020488 	.word	0x40020488
 8019c18:	400204a0 	.word	0x400204a0
 8019c1c:	400204b8 	.word	0x400204b8

08019c20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019c20:	b480      	push	{r7}
 8019c22:	b087      	sub	sp, #28
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	60b9      	str	r1, [r7, #8]
 8019c2a:	607a      	str	r2, [r7, #4]
 8019c2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019c32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019c38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	4a7f      	ldr	r2, [pc, #508]	; (8019e3c <DMA_SetConfig+0x21c>)
 8019c40:	4293      	cmp	r3, r2
 8019c42:	d072      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	4a7d      	ldr	r2, [pc, #500]	; (8019e40 <DMA_SetConfig+0x220>)
 8019c4a:	4293      	cmp	r3, r2
 8019c4c:	d06d      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	4a7c      	ldr	r2, [pc, #496]	; (8019e44 <DMA_SetConfig+0x224>)
 8019c54:	4293      	cmp	r3, r2
 8019c56:	d068      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	4a7a      	ldr	r2, [pc, #488]	; (8019e48 <DMA_SetConfig+0x228>)
 8019c5e:	4293      	cmp	r3, r2
 8019c60:	d063      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	4a79      	ldr	r2, [pc, #484]	; (8019e4c <DMA_SetConfig+0x22c>)
 8019c68:	4293      	cmp	r3, r2
 8019c6a:	d05e      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	4a77      	ldr	r2, [pc, #476]	; (8019e50 <DMA_SetConfig+0x230>)
 8019c72:	4293      	cmp	r3, r2
 8019c74:	d059      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	4a76      	ldr	r2, [pc, #472]	; (8019e54 <DMA_SetConfig+0x234>)
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	d054      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	4a74      	ldr	r2, [pc, #464]	; (8019e58 <DMA_SetConfig+0x238>)
 8019c86:	4293      	cmp	r3, r2
 8019c88:	d04f      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	4a73      	ldr	r2, [pc, #460]	; (8019e5c <DMA_SetConfig+0x23c>)
 8019c90:	4293      	cmp	r3, r2
 8019c92:	d04a      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	4a71      	ldr	r2, [pc, #452]	; (8019e60 <DMA_SetConfig+0x240>)
 8019c9a:	4293      	cmp	r3, r2
 8019c9c:	d045      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	4a70      	ldr	r2, [pc, #448]	; (8019e64 <DMA_SetConfig+0x244>)
 8019ca4:	4293      	cmp	r3, r2
 8019ca6:	d040      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	4a6e      	ldr	r2, [pc, #440]	; (8019e68 <DMA_SetConfig+0x248>)
 8019cae:	4293      	cmp	r3, r2
 8019cb0:	d03b      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	4a6d      	ldr	r2, [pc, #436]	; (8019e6c <DMA_SetConfig+0x24c>)
 8019cb8:	4293      	cmp	r3, r2
 8019cba:	d036      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4a6b      	ldr	r2, [pc, #428]	; (8019e70 <DMA_SetConfig+0x250>)
 8019cc2:	4293      	cmp	r3, r2
 8019cc4:	d031      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	4a6a      	ldr	r2, [pc, #424]	; (8019e74 <DMA_SetConfig+0x254>)
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	d02c      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	4a68      	ldr	r2, [pc, #416]	; (8019e78 <DMA_SetConfig+0x258>)
 8019cd6:	4293      	cmp	r3, r2
 8019cd8:	d027      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	4a67      	ldr	r2, [pc, #412]	; (8019e7c <DMA_SetConfig+0x25c>)
 8019ce0:	4293      	cmp	r3, r2
 8019ce2:	d022      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	4a65      	ldr	r2, [pc, #404]	; (8019e80 <DMA_SetConfig+0x260>)
 8019cea:	4293      	cmp	r3, r2
 8019cec:	d01d      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	4a64      	ldr	r2, [pc, #400]	; (8019e84 <DMA_SetConfig+0x264>)
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	d018      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	4a62      	ldr	r2, [pc, #392]	; (8019e88 <DMA_SetConfig+0x268>)
 8019cfe:	4293      	cmp	r3, r2
 8019d00:	d013      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	4a61      	ldr	r2, [pc, #388]	; (8019e8c <DMA_SetConfig+0x26c>)
 8019d08:	4293      	cmp	r3, r2
 8019d0a:	d00e      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	4a5f      	ldr	r2, [pc, #380]	; (8019e90 <DMA_SetConfig+0x270>)
 8019d12:	4293      	cmp	r3, r2
 8019d14:	d009      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4a5e      	ldr	r2, [pc, #376]	; (8019e94 <DMA_SetConfig+0x274>)
 8019d1c:	4293      	cmp	r3, r2
 8019d1e:	d004      	beq.n	8019d2a <DMA_SetConfig+0x10a>
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	4a5c      	ldr	r2, [pc, #368]	; (8019e98 <DMA_SetConfig+0x278>)
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d101      	bne.n	8019d2e <DMA_SetConfig+0x10e>
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	e000      	b.n	8019d30 <DMA_SetConfig+0x110>
 8019d2e:	2300      	movs	r3, #0
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d00d      	beq.n	8019d50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019d38:	68fa      	ldr	r2, [r7, #12]
 8019d3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019d3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d004      	beq.n	8019d50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d4a:	68fa      	ldr	r2, [r7, #12]
 8019d4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8019d4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	4a39      	ldr	r2, [pc, #228]	; (8019e3c <DMA_SetConfig+0x21c>)
 8019d56:	4293      	cmp	r3, r2
 8019d58:	d04a      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	4a38      	ldr	r2, [pc, #224]	; (8019e40 <DMA_SetConfig+0x220>)
 8019d60:	4293      	cmp	r3, r2
 8019d62:	d045      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	4a36      	ldr	r2, [pc, #216]	; (8019e44 <DMA_SetConfig+0x224>)
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	d040      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	4a35      	ldr	r2, [pc, #212]	; (8019e48 <DMA_SetConfig+0x228>)
 8019d74:	4293      	cmp	r3, r2
 8019d76:	d03b      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	4a33      	ldr	r2, [pc, #204]	; (8019e4c <DMA_SetConfig+0x22c>)
 8019d7e:	4293      	cmp	r3, r2
 8019d80:	d036      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	4a32      	ldr	r2, [pc, #200]	; (8019e50 <DMA_SetConfig+0x230>)
 8019d88:	4293      	cmp	r3, r2
 8019d8a:	d031      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	4a30      	ldr	r2, [pc, #192]	; (8019e54 <DMA_SetConfig+0x234>)
 8019d92:	4293      	cmp	r3, r2
 8019d94:	d02c      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	4a2f      	ldr	r2, [pc, #188]	; (8019e58 <DMA_SetConfig+0x238>)
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	d027      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4a2d      	ldr	r2, [pc, #180]	; (8019e5c <DMA_SetConfig+0x23c>)
 8019da6:	4293      	cmp	r3, r2
 8019da8:	d022      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4a2c      	ldr	r2, [pc, #176]	; (8019e60 <DMA_SetConfig+0x240>)
 8019db0:	4293      	cmp	r3, r2
 8019db2:	d01d      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4a2a      	ldr	r2, [pc, #168]	; (8019e64 <DMA_SetConfig+0x244>)
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	d018      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	4a29      	ldr	r2, [pc, #164]	; (8019e68 <DMA_SetConfig+0x248>)
 8019dc4:	4293      	cmp	r3, r2
 8019dc6:	d013      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	4a27      	ldr	r2, [pc, #156]	; (8019e6c <DMA_SetConfig+0x24c>)
 8019dce:	4293      	cmp	r3, r2
 8019dd0:	d00e      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a26      	ldr	r2, [pc, #152]	; (8019e70 <DMA_SetConfig+0x250>)
 8019dd8:	4293      	cmp	r3, r2
 8019dda:	d009      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	4a24      	ldr	r2, [pc, #144]	; (8019e74 <DMA_SetConfig+0x254>)
 8019de2:	4293      	cmp	r3, r2
 8019de4:	d004      	beq.n	8019df0 <DMA_SetConfig+0x1d0>
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	4a23      	ldr	r2, [pc, #140]	; (8019e78 <DMA_SetConfig+0x258>)
 8019dec:	4293      	cmp	r3, r2
 8019dee:	d101      	bne.n	8019df4 <DMA_SetConfig+0x1d4>
 8019df0:	2301      	movs	r3, #1
 8019df2:	e000      	b.n	8019df6 <DMA_SetConfig+0x1d6>
 8019df4:	2300      	movs	r3, #0
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d059      	beq.n	8019eae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dfe:	f003 031f 	and.w	r3, r3, #31
 8019e02:	223f      	movs	r2, #63	; 0x3f
 8019e04:	409a      	lsls	r2, r3
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	681a      	ldr	r2, [r3, #0]
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8019e18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	683a      	ldr	r2, [r7, #0]
 8019e20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	689b      	ldr	r3, [r3, #8]
 8019e26:	2b40      	cmp	r3, #64	; 0x40
 8019e28:	d138      	bne.n	8019e9c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	687a      	ldr	r2, [r7, #4]
 8019e30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	68ba      	ldr	r2, [r7, #8]
 8019e38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8019e3a:	e086      	b.n	8019f4a <DMA_SetConfig+0x32a>
 8019e3c:	40020010 	.word	0x40020010
 8019e40:	40020028 	.word	0x40020028
 8019e44:	40020040 	.word	0x40020040
 8019e48:	40020058 	.word	0x40020058
 8019e4c:	40020070 	.word	0x40020070
 8019e50:	40020088 	.word	0x40020088
 8019e54:	400200a0 	.word	0x400200a0
 8019e58:	400200b8 	.word	0x400200b8
 8019e5c:	40020410 	.word	0x40020410
 8019e60:	40020428 	.word	0x40020428
 8019e64:	40020440 	.word	0x40020440
 8019e68:	40020458 	.word	0x40020458
 8019e6c:	40020470 	.word	0x40020470
 8019e70:	40020488 	.word	0x40020488
 8019e74:	400204a0 	.word	0x400204a0
 8019e78:	400204b8 	.word	0x400204b8
 8019e7c:	58025408 	.word	0x58025408
 8019e80:	5802541c 	.word	0x5802541c
 8019e84:	58025430 	.word	0x58025430
 8019e88:	58025444 	.word	0x58025444
 8019e8c:	58025458 	.word	0x58025458
 8019e90:	5802546c 	.word	0x5802546c
 8019e94:	58025480 	.word	0x58025480
 8019e98:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	68ba      	ldr	r2, [r7, #8]
 8019ea2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	687a      	ldr	r2, [r7, #4]
 8019eaa:	60da      	str	r2, [r3, #12]
}
 8019eac:	e04d      	b.n	8019f4a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	4a29      	ldr	r2, [pc, #164]	; (8019f58 <DMA_SetConfig+0x338>)
 8019eb4:	4293      	cmp	r3, r2
 8019eb6:	d022      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	4a27      	ldr	r2, [pc, #156]	; (8019f5c <DMA_SetConfig+0x33c>)
 8019ebe:	4293      	cmp	r3, r2
 8019ec0:	d01d      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	4a26      	ldr	r2, [pc, #152]	; (8019f60 <DMA_SetConfig+0x340>)
 8019ec8:	4293      	cmp	r3, r2
 8019eca:	d018      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4a24      	ldr	r2, [pc, #144]	; (8019f64 <DMA_SetConfig+0x344>)
 8019ed2:	4293      	cmp	r3, r2
 8019ed4:	d013      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	4a23      	ldr	r2, [pc, #140]	; (8019f68 <DMA_SetConfig+0x348>)
 8019edc:	4293      	cmp	r3, r2
 8019ede:	d00e      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	4a21      	ldr	r2, [pc, #132]	; (8019f6c <DMA_SetConfig+0x34c>)
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d009      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	4a20      	ldr	r2, [pc, #128]	; (8019f70 <DMA_SetConfig+0x350>)
 8019ef0:	4293      	cmp	r3, r2
 8019ef2:	d004      	beq.n	8019efe <DMA_SetConfig+0x2de>
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	4a1e      	ldr	r2, [pc, #120]	; (8019f74 <DMA_SetConfig+0x354>)
 8019efa:	4293      	cmp	r3, r2
 8019efc:	d101      	bne.n	8019f02 <DMA_SetConfig+0x2e2>
 8019efe:	2301      	movs	r3, #1
 8019f00:	e000      	b.n	8019f04 <DMA_SetConfig+0x2e4>
 8019f02:	2300      	movs	r3, #0
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d020      	beq.n	8019f4a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f0c:	f003 031f 	and.w	r3, r3, #31
 8019f10:	2201      	movs	r2, #1
 8019f12:	409a      	lsls	r2, r3
 8019f14:	693b      	ldr	r3, [r7, #16]
 8019f16:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	683a      	ldr	r2, [r7, #0]
 8019f1e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	689b      	ldr	r3, [r3, #8]
 8019f24:	2b40      	cmp	r3, #64	; 0x40
 8019f26:	d108      	bne.n	8019f3a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	687a      	ldr	r2, [r7, #4]
 8019f2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	68ba      	ldr	r2, [r7, #8]
 8019f36:	60da      	str	r2, [r3, #12]
}
 8019f38:	e007      	b.n	8019f4a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	68ba      	ldr	r2, [r7, #8]
 8019f40:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	60da      	str	r2, [r3, #12]
}
 8019f4a:	bf00      	nop
 8019f4c:	371c      	adds	r7, #28
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f54:	4770      	bx	lr
 8019f56:	bf00      	nop
 8019f58:	58025408 	.word	0x58025408
 8019f5c:	5802541c 	.word	0x5802541c
 8019f60:	58025430 	.word	0x58025430
 8019f64:	58025444 	.word	0x58025444
 8019f68:	58025458 	.word	0x58025458
 8019f6c:	5802546c 	.word	0x5802546c
 8019f70:	58025480 	.word	0x58025480
 8019f74:	58025494 	.word	0x58025494

08019f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019f78:	b480      	push	{r7}
 8019f7a:	b085      	sub	sp, #20
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	4a42      	ldr	r2, [pc, #264]	; (801a090 <DMA_CalcBaseAndBitshift+0x118>)
 8019f86:	4293      	cmp	r3, r2
 8019f88:	d04a      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	4a41      	ldr	r2, [pc, #260]	; (801a094 <DMA_CalcBaseAndBitshift+0x11c>)
 8019f90:	4293      	cmp	r3, r2
 8019f92:	d045      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	4a3f      	ldr	r2, [pc, #252]	; (801a098 <DMA_CalcBaseAndBitshift+0x120>)
 8019f9a:	4293      	cmp	r3, r2
 8019f9c:	d040      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	4a3e      	ldr	r2, [pc, #248]	; (801a09c <DMA_CalcBaseAndBitshift+0x124>)
 8019fa4:	4293      	cmp	r3, r2
 8019fa6:	d03b      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	4a3c      	ldr	r2, [pc, #240]	; (801a0a0 <DMA_CalcBaseAndBitshift+0x128>)
 8019fae:	4293      	cmp	r3, r2
 8019fb0:	d036      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	4a3b      	ldr	r2, [pc, #236]	; (801a0a4 <DMA_CalcBaseAndBitshift+0x12c>)
 8019fb8:	4293      	cmp	r3, r2
 8019fba:	d031      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	4a39      	ldr	r2, [pc, #228]	; (801a0a8 <DMA_CalcBaseAndBitshift+0x130>)
 8019fc2:	4293      	cmp	r3, r2
 8019fc4:	d02c      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	4a38      	ldr	r2, [pc, #224]	; (801a0ac <DMA_CalcBaseAndBitshift+0x134>)
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	d027      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	4a36      	ldr	r2, [pc, #216]	; (801a0b0 <DMA_CalcBaseAndBitshift+0x138>)
 8019fd6:	4293      	cmp	r3, r2
 8019fd8:	d022      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	4a35      	ldr	r2, [pc, #212]	; (801a0b4 <DMA_CalcBaseAndBitshift+0x13c>)
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	d01d      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	4a33      	ldr	r2, [pc, #204]	; (801a0b8 <DMA_CalcBaseAndBitshift+0x140>)
 8019fea:	4293      	cmp	r3, r2
 8019fec:	d018      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4a32      	ldr	r2, [pc, #200]	; (801a0bc <DMA_CalcBaseAndBitshift+0x144>)
 8019ff4:	4293      	cmp	r3, r2
 8019ff6:	d013      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	4a30      	ldr	r2, [pc, #192]	; (801a0c0 <DMA_CalcBaseAndBitshift+0x148>)
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d00e      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	4a2f      	ldr	r2, [pc, #188]	; (801a0c4 <DMA_CalcBaseAndBitshift+0x14c>)
 801a008:	4293      	cmp	r3, r2
 801a00a:	d009      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	4a2d      	ldr	r2, [pc, #180]	; (801a0c8 <DMA_CalcBaseAndBitshift+0x150>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d004      	beq.n	801a020 <DMA_CalcBaseAndBitshift+0xa8>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4a2c      	ldr	r2, [pc, #176]	; (801a0cc <DMA_CalcBaseAndBitshift+0x154>)
 801a01c:	4293      	cmp	r3, r2
 801a01e:	d101      	bne.n	801a024 <DMA_CalcBaseAndBitshift+0xac>
 801a020:	2301      	movs	r3, #1
 801a022:	e000      	b.n	801a026 <DMA_CalcBaseAndBitshift+0xae>
 801a024:	2300      	movs	r3, #0
 801a026:	2b00      	cmp	r3, #0
 801a028:	d024      	beq.n	801a074 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	3b10      	subs	r3, #16
 801a032:	4a27      	ldr	r2, [pc, #156]	; (801a0d0 <DMA_CalcBaseAndBitshift+0x158>)
 801a034:	fba2 2303 	umull	r2, r3, r2, r3
 801a038:	091b      	lsrs	r3, r3, #4
 801a03a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	f003 0307 	and.w	r3, r3, #7
 801a042:	4a24      	ldr	r2, [pc, #144]	; (801a0d4 <DMA_CalcBaseAndBitshift+0x15c>)
 801a044:	5cd3      	ldrb	r3, [r2, r3]
 801a046:	461a      	mov	r2, r3
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	2b03      	cmp	r3, #3
 801a050:	d908      	bls.n	801a064 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	461a      	mov	r2, r3
 801a058:	4b1f      	ldr	r3, [pc, #124]	; (801a0d8 <DMA_CalcBaseAndBitshift+0x160>)
 801a05a:	4013      	ands	r3, r2
 801a05c:	1d1a      	adds	r2, r3, #4
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	659a      	str	r2, [r3, #88]	; 0x58
 801a062:	e00d      	b.n	801a080 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	461a      	mov	r2, r3
 801a06a:	4b1b      	ldr	r3, [pc, #108]	; (801a0d8 <DMA_CalcBaseAndBitshift+0x160>)
 801a06c:	4013      	ands	r3, r2
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	6593      	str	r3, [r2, #88]	; 0x58
 801a072:	e005      	b.n	801a080 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801a084:	4618      	mov	r0, r3
 801a086:	3714      	adds	r7, #20
 801a088:	46bd      	mov	sp, r7
 801a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08e:	4770      	bx	lr
 801a090:	40020010 	.word	0x40020010
 801a094:	40020028 	.word	0x40020028
 801a098:	40020040 	.word	0x40020040
 801a09c:	40020058 	.word	0x40020058
 801a0a0:	40020070 	.word	0x40020070
 801a0a4:	40020088 	.word	0x40020088
 801a0a8:	400200a0 	.word	0x400200a0
 801a0ac:	400200b8 	.word	0x400200b8
 801a0b0:	40020410 	.word	0x40020410
 801a0b4:	40020428 	.word	0x40020428
 801a0b8:	40020440 	.word	0x40020440
 801a0bc:	40020458 	.word	0x40020458
 801a0c0:	40020470 	.word	0x40020470
 801a0c4:	40020488 	.word	0x40020488
 801a0c8:	400204a0 	.word	0x400204a0
 801a0cc:	400204b8 	.word	0x400204b8
 801a0d0:	aaaaaaab 	.word	0xaaaaaaab
 801a0d4:	080218d4 	.word	0x080218d4
 801a0d8:	fffffc00 	.word	0xfffffc00

0801a0dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b085      	sub	sp, #20
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	699b      	ldr	r3, [r3, #24]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d120      	bne.n	801a132 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0f4:	2b03      	cmp	r3, #3
 801a0f6:	d858      	bhi.n	801a1aa <DMA_CheckFifoParam+0xce>
 801a0f8:	a201      	add	r2, pc, #4	; (adr r2, 801a100 <DMA_CheckFifoParam+0x24>)
 801a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0fe:	bf00      	nop
 801a100:	0801a111 	.word	0x0801a111
 801a104:	0801a123 	.word	0x0801a123
 801a108:	0801a111 	.word	0x0801a111
 801a10c:	0801a1ab 	.word	0x0801a1ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d048      	beq.n	801a1ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801a11c:	2301      	movs	r3, #1
 801a11e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801a120:	e045      	b.n	801a1ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a126:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801a12a:	d142      	bne.n	801a1b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801a12c:	2301      	movs	r3, #1
 801a12e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801a130:	e03f      	b.n	801a1b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	699b      	ldr	r3, [r3, #24]
 801a136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a13a:	d123      	bne.n	801a184 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a140:	2b03      	cmp	r3, #3
 801a142:	d838      	bhi.n	801a1b6 <DMA_CheckFifoParam+0xda>
 801a144:	a201      	add	r2, pc, #4	; (adr r2, 801a14c <DMA_CheckFifoParam+0x70>)
 801a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a14a:	bf00      	nop
 801a14c:	0801a15d 	.word	0x0801a15d
 801a150:	0801a163 	.word	0x0801a163
 801a154:	0801a15d 	.word	0x0801a15d
 801a158:	0801a175 	.word	0x0801a175
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801a15c:	2301      	movs	r3, #1
 801a15e:	73fb      	strb	r3, [r7, #15]
        break;
 801a160:	e030      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d025      	beq.n	801a1ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801a16e:	2301      	movs	r3, #1
 801a170:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801a172:	e022      	b.n	801a1ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801a17c:	d11f      	bne.n	801a1be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801a17e:	2301      	movs	r3, #1
 801a180:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801a182:	e01c      	b.n	801a1be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a188:	2b02      	cmp	r3, #2
 801a18a:	d902      	bls.n	801a192 <DMA_CheckFifoParam+0xb6>
 801a18c:	2b03      	cmp	r3, #3
 801a18e:	d003      	beq.n	801a198 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801a190:	e018      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801a192:	2301      	movs	r3, #1
 801a194:	73fb      	strb	r3, [r7, #15]
        break;
 801a196:	e015      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a19c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d00e      	beq.n	801a1c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 801a1a8:	e00b      	b.n	801a1c2 <DMA_CheckFifoParam+0xe6>
        break;
 801a1aa:	bf00      	nop
 801a1ac:	e00a      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        break;
 801a1ae:	bf00      	nop
 801a1b0:	e008      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        break;
 801a1b2:	bf00      	nop
 801a1b4:	e006      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        break;
 801a1b6:	bf00      	nop
 801a1b8:	e004      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        break;
 801a1ba:	bf00      	nop
 801a1bc:	e002      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
        break;
 801a1be:	bf00      	nop
 801a1c0:	e000      	b.n	801a1c4 <DMA_CheckFifoParam+0xe8>
    break;
 801a1c2:	bf00      	nop
    }
  }

  return status;
 801a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3714      	adds	r7, #20
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d0:	4770      	bx	lr
 801a1d2:	bf00      	nop

0801a1d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a1d4:	b480      	push	{r7}
 801a1d6:	b085      	sub	sp, #20
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a38      	ldr	r2, [pc, #224]	; (801a2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d022      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4a36      	ldr	r2, [pc, #216]	; (801a2cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d01d      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	4a35      	ldr	r2, [pc, #212]	; (801a2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	d018      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4a33      	ldr	r2, [pc, #204]	; (801a2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801a206:	4293      	cmp	r3, r2
 801a208:	d013      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a32      	ldr	r2, [pc, #200]	; (801a2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d00e      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	4a30      	ldr	r2, [pc, #192]	; (801a2dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801a21a:	4293      	cmp	r3, r2
 801a21c:	d009      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4a2f      	ldr	r2, [pc, #188]	; (801a2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801a224:	4293      	cmp	r3, r2
 801a226:	d004      	beq.n	801a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4a2d      	ldr	r2, [pc, #180]	; (801a2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801a22e:	4293      	cmp	r3, r2
 801a230:	d101      	bne.n	801a236 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801a232:	2301      	movs	r3, #1
 801a234:	e000      	b.n	801a238 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801a236:	2300      	movs	r3, #0
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d01a      	beq.n	801a272 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	b2db      	uxtb	r3, r3
 801a242:	3b08      	subs	r3, #8
 801a244:	4a28      	ldr	r2, [pc, #160]	; (801a2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801a246:	fba2 2303 	umull	r2, r3, r2, r3
 801a24a:	091b      	lsrs	r3, r3, #4
 801a24c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801a24e:	68fa      	ldr	r2, [r7, #12]
 801a250:	4b26      	ldr	r3, [pc, #152]	; (801a2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801a252:	4413      	add	r3, r2
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	461a      	mov	r2, r3
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	4a24      	ldr	r2, [pc, #144]	; (801a2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801a260:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	f003 031f 	and.w	r3, r3, #31
 801a268:	2201      	movs	r2, #1
 801a26a:	409a      	lsls	r2, r3
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801a270:	e024      	b.n	801a2bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	b2db      	uxtb	r3, r3
 801a278:	3b10      	subs	r3, #16
 801a27a:	4a1e      	ldr	r2, [pc, #120]	; (801a2f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801a27c:	fba2 2303 	umull	r2, r3, r2, r3
 801a280:	091b      	lsrs	r3, r3, #4
 801a282:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801a284:	68bb      	ldr	r3, [r7, #8]
 801a286:	4a1c      	ldr	r2, [pc, #112]	; (801a2f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801a288:	4293      	cmp	r3, r2
 801a28a:	d806      	bhi.n	801a29a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801a28c:	68bb      	ldr	r3, [r7, #8]
 801a28e:	4a1b      	ldr	r2, [pc, #108]	; (801a2fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801a290:	4293      	cmp	r3, r2
 801a292:	d902      	bls.n	801a29a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	3308      	adds	r3, #8
 801a298:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801a29a:	68fa      	ldr	r2, [r7, #12]
 801a29c:	4b18      	ldr	r3, [pc, #96]	; (801a300 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801a29e:	4413      	add	r3, r2
 801a2a0:	009b      	lsls	r3, r3, #2
 801a2a2:	461a      	mov	r2, r3
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	4a16      	ldr	r2, [pc, #88]	; (801a304 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801a2ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	f003 031f 	and.w	r3, r3, #31
 801a2b4:	2201      	movs	r2, #1
 801a2b6:	409a      	lsls	r2, r3
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 801a2bc:	bf00      	nop
 801a2be:	3714      	adds	r7, #20
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c6:	4770      	bx	lr
 801a2c8:	58025408 	.word	0x58025408
 801a2cc:	5802541c 	.word	0x5802541c
 801a2d0:	58025430 	.word	0x58025430
 801a2d4:	58025444 	.word	0x58025444
 801a2d8:	58025458 	.word	0x58025458
 801a2dc:	5802546c 	.word	0x5802546c
 801a2e0:	58025480 	.word	0x58025480
 801a2e4:	58025494 	.word	0x58025494
 801a2e8:	cccccccd 	.word	0xcccccccd
 801a2ec:	16009600 	.word	0x16009600
 801a2f0:	58025880 	.word	0x58025880
 801a2f4:	aaaaaaab 	.word	0xaaaaaaab
 801a2f8:	400204b8 	.word	0x400204b8
 801a2fc:	4002040f 	.word	0x4002040f
 801a300:	10008200 	.word	0x10008200
 801a304:	40020880 	.word	0x40020880

0801a308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a308:	b480      	push	{r7}
 801a30a:	b085      	sub	sp, #20
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	685b      	ldr	r3, [r3, #4]
 801a314:	b2db      	uxtb	r3, r3
 801a316:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d04a      	beq.n	801a3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	2b08      	cmp	r3, #8
 801a322:	d847      	bhi.n	801a3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	4a25      	ldr	r2, [pc, #148]	; (801a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801a32a:	4293      	cmp	r3, r2
 801a32c:	d022      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	4a24      	ldr	r2, [pc, #144]	; (801a3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801a334:	4293      	cmp	r3, r2
 801a336:	d01d      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	4a22      	ldr	r2, [pc, #136]	; (801a3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801a33e:	4293      	cmp	r3, r2
 801a340:	d018      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	4a21      	ldr	r2, [pc, #132]	; (801a3cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801a348:	4293      	cmp	r3, r2
 801a34a:	d013      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	4a1f      	ldr	r2, [pc, #124]	; (801a3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801a352:	4293      	cmp	r3, r2
 801a354:	d00e      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	4a1e      	ldr	r2, [pc, #120]	; (801a3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801a35c:	4293      	cmp	r3, r2
 801a35e:	d009      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	4a1c      	ldr	r2, [pc, #112]	; (801a3d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801a366:	4293      	cmp	r3, r2
 801a368:	d004      	beq.n	801a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	4a1b      	ldr	r2, [pc, #108]	; (801a3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801a370:	4293      	cmp	r3, r2
 801a372:	d101      	bne.n	801a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801a374:	2301      	movs	r3, #1
 801a376:	e000      	b.n	801a37a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801a378:	2300      	movs	r3, #0
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d00a      	beq.n	801a394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801a37e:	68fa      	ldr	r2, [r7, #12]
 801a380:	4b17      	ldr	r3, [pc, #92]	; (801a3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801a382:	4413      	add	r3, r2
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	461a      	mov	r2, r3
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	4a15      	ldr	r2, [pc, #84]	; (801a3e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801a390:	671a      	str	r2, [r3, #112]	; 0x70
 801a392:	e009      	b.n	801a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a394:	68fa      	ldr	r2, [r7, #12]
 801a396:	4b14      	ldr	r3, [pc, #80]	; (801a3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801a398:	4413      	add	r3, r2
 801a39a:	009b      	lsls	r3, r3, #2
 801a39c:	461a      	mov	r2, r3
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	4a11      	ldr	r2, [pc, #68]	; (801a3ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801a3a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	3b01      	subs	r3, #1
 801a3ac:	2201      	movs	r2, #1
 801a3ae:	409a      	lsls	r2, r3
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 801a3b4:	bf00      	nop
 801a3b6:	3714      	adds	r7, #20
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3be:	4770      	bx	lr
 801a3c0:	58025408 	.word	0x58025408
 801a3c4:	5802541c 	.word	0x5802541c
 801a3c8:	58025430 	.word	0x58025430
 801a3cc:	58025444 	.word	0x58025444
 801a3d0:	58025458 	.word	0x58025458
 801a3d4:	5802546c 	.word	0x5802546c
 801a3d8:	58025480 	.word	0x58025480
 801a3dc:	58025494 	.word	0x58025494
 801a3e0:	1600963f 	.word	0x1600963f
 801a3e4:	58025940 	.word	0x58025940
 801a3e8:	1000823f 	.word	0x1000823f
 801a3ec:	40020940 	.word	0x40020940

0801a3f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b098      	sub	sp, #96	; 0x60
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 801a3f8:	4a84      	ldr	r2, [pc, #528]	; (801a60c <HAL_FDCAN_Init+0x21c>)
 801a3fa:	f107 030c 	add.w	r3, r7, #12
 801a3fe:	4611      	mov	r1, r2
 801a400:	224c      	movs	r2, #76	; 0x4c
 801a402:	4618      	mov	r0, r3
 801a404:	f006 ff8a 	bl	802131c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d101      	bne.n	801a412 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 801a40e:	2301      	movs	r3, #1
 801a410:	e1c6      	b.n	801a7a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4a7e      	ldr	r2, [pc, #504]	; (801a610 <HAL_FDCAN_Init+0x220>)
 801a418:	4293      	cmp	r3, r2
 801a41a:	d106      	bne.n	801a42a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a424:	461a      	mov	r2, r3
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a430:	b2db      	uxtb	r3, r3
 801a432:	2b00      	cmp	r3, #0
 801a434:	d106      	bne.n	801a444 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	2200      	movs	r2, #0
 801a43a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	f7fa ff04 	bl	801524c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	699a      	ldr	r2, [r3, #24]
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	f022 0210 	bic.w	r2, r2, #16
 801a452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 801a454:	f7fb fd40 	bl	8015ed8 <HAL_GetTick>
 801a458:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 801a45a:	e014      	b.n	801a486 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 801a45c:	f7fb fd3c 	bl	8015ed8 <HAL_GetTick>
 801a460:	4602      	mov	r2, r0
 801a462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a464:	1ad3      	subs	r3, r2, r3
 801a466:	2b0a      	cmp	r3, #10
 801a468:	d90d      	bls.n	801a486 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a470:	f043 0201 	orr.w	r2, r3, #1
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	2203      	movs	r2, #3
 801a47e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 801a482:	2301      	movs	r3, #1
 801a484:	e18c      	b.n	801a7a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	699b      	ldr	r3, [r3, #24]
 801a48c:	f003 0308 	and.w	r3, r3, #8
 801a490:	2b08      	cmp	r3, #8
 801a492:	d0e3      	beq.n	801a45c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	699a      	ldr	r2, [r3, #24]
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	f042 0201 	orr.w	r2, r2, #1
 801a4a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 801a4a4:	f7fb fd18 	bl	8015ed8 <HAL_GetTick>
 801a4a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 801a4aa:	e014      	b.n	801a4d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 801a4ac:	f7fb fd14 	bl	8015ed8 <HAL_GetTick>
 801a4b0:	4602      	mov	r2, r0
 801a4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4b4:	1ad3      	subs	r3, r2, r3
 801a4b6:	2b0a      	cmp	r3, #10
 801a4b8:	d90d      	bls.n	801a4d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a4c0:	f043 0201 	orr.w	r2, r3, #1
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2203      	movs	r2, #3
 801a4ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	e164      	b.n	801a7a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	699b      	ldr	r3, [r3, #24]
 801a4dc:	f003 0301 	and.w	r3, r3, #1
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d0e3      	beq.n	801a4ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	699a      	ldr	r2, [r3, #24]
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f042 0202 	orr.w	r2, r2, #2
 801a4f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	7c1b      	ldrb	r3, [r3, #16]
 801a4f8:	2b01      	cmp	r3, #1
 801a4fa:	d108      	bne.n	801a50e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	699a      	ldr	r2, [r3, #24]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a50a:	619a      	str	r2, [r3, #24]
 801a50c:	e007      	b.n	801a51e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	699a      	ldr	r2, [r3, #24]
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a51c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	7c5b      	ldrb	r3, [r3, #17]
 801a522:	2b01      	cmp	r3, #1
 801a524:	d108      	bne.n	801a538 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	699a      	ldr	r2, [r3, #24]
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a534:	619a      	str	r2, [r3, #24]
 801a536:	e007      	b.n	801a548 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	699a      	ldr	r2, [r3, #24]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a546:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	7c9b      	ldrb	r3, [r3, #18]
 801a54c:	2b01      	cmp	r3, #1
 801a54e:	d108      	bne.n	801a562 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	699a      	ldr	r2, [r3, #24]
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a55e:	619a      	str	r2, [r3, #24]
 801a560:	e007      	b.n	801a572 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	699a      	ldr	r2, [r3, #24]
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a570:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	699b      	ldr	r3, [r3, #24]
 801a578:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	689a      	ldr	r2, [r3, #8]
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	430a      	orrs	r2, r1
 801a586:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	699a      	ldr	r2, [r3, #24]
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 801a596:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	691a      	ldr	r2, [r3, #16]
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	f022 0210 	bic.w	r2, r2, #16
 801a5a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	68db      	ldr	r3, [r3, #12]
 801a5ac:	2b01      	cmp	r3, #1
 801a5ae:	d108      	bne.n	801a5c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	699a      	ldr	r2, [r3, #24]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	f042 0204 	orr.w	r2, r2, #4
 801a5be:	619a      	str	r2, [r3, #24]
 801a5c0:	e030      	b.n	801a624 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	68db      	ldr	r3, [r3, #12]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d02c      	beq.n	801a624 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	68db      	ldr	r3, [r3, #12]
 801a5ce:	2b02      	cmp	r3, #2
 801a5d0:	d020      	beq.n	801a614 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	699a      	ldr	r2, [r3, #24]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a5e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	691a      	ldr	r2, [r3, #16]
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	f042 0210 	orr.w	r2, r2, #16
 801a5f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	68db      	ldr	r3, [r3, #12]
 801a5f6:	2b03      	cmp	r3, #3
 801a5f8:	d114      	bne.n	801a624 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	699a      	ldr	r2, [r3, #24]
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	f042 0220 	orr.w	r2, r2, #32
 801a608:	619a      	str	r2, [r3, #24]
 801a60a:	e00b      	b.n	801a624 <HAL_FDCAN_Init+0x234>
 801a60c:	08021824 	.word	0x08021824
 801a610:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	699a      	ldr	r2, [r3, #24]
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	f042 0220 	orr.w	r2, r2, #32
 801a622:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	699b      	ldr	r3, [r3, #24]
 801a628:	3b01      	subs	r3, #1
 801a62a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	69db      	ldr	r3, [r3, #28]
 801a630:	3b01      	subs	r3, #1
 801a632:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a634:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6a1b      	ldr	r3, [r3, #32]
 801a63a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801a63c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	695b      	ldr	r3, [r3, #20]
 801a644:	3b01      	subs	r3, #1
 801a646:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801a64c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a64e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	689b      	ldr	r3, [r3, #8]
 801a654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a658:	d115      	bne.n	801a686 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a664:	3b01      	subs	r3, #1
 801a666:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a668:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a66e:	3b01      	subs	r3, #1
 801a670:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 801a672:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a67a:	3b01      	subs	r3, #1
 801a67c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 801a682:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a684:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d00a      	beq.n	801a6a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	430a      	orrs	r2, r1
 801a6a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a6ac:	4413      	add	r3, r2
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d011      	beq.n	801a6d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a6ba:	f023 0107 	bic.w	r1, r3, #7
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a6c2:	009b      	lsls	r3, r3, #2
 801a6c4:	3360      	adds	r3, #96	; 0x60
 801a6c6:	443b      	add	r3, r7
 801a6c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	430a      	orrs	r2, r1
 801a6d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d011      	beq.n	801a702 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a6e6:	f023 0107 	bic.w	r1, r3, #7
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6ee:	009b      	lsls	r3, r3, #2
 801a6f0:	3360      	adds	r3, #96	; 0x60
 801a6f2:	443b      	add	r3, r7
 801a6f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	430a      	orrs	r2, r1
 801a6fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a706:	2b00      	cmp	r3, #0
 801a708:	d012      	beq.n	801a730 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a712:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a71a:	009b      	lsls	r3, r3, #2
 801a71c:	3360      	adds	r3, #96	; 0x60
 801a71e:	443b      	add	r3, r7
 801a720:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801a724:	011a      	lsls	r2, r3, #4
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	430a      	orrs	r2, r1
 801a72c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a734:	2b00      	cmp	r3, #0
 801a736:	d012      	beq.n	801a75e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a740:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	3360      	adds	r3, #96	; 0x60
 801a74c:	443b      	add	r3, r7
 801a74e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801a752:	021a      	lsls	r2, r3, #8
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	430a      	orrs	r2, r1
 801a75a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	4a11      	ldr	r2, [pc, #68]	; (801a7a8 <HAL_FDCAN_Init+0x3b8>)
 801a764:	4293      	cmp	r3, r2
 801a766:	d107      	bne.n	801a778 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	685b      	ldr	r3, [r3, #4]
 801a76c:	689a      	ldr	r2, [r3, #8]
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	685b      	ldr	r3, [r3, #4]
 801a772:	f022 0203 	bic.w	r2, r2, #3
 801a776:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2200      	movs	r2, #0
 801a77c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2201      	movs	r2, #1
 801a78c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 801a790:	6878      	ldr	r0, [r7, #4]
 801a792:	f000 fd83 	bl	801b29c <FDCAN_CalcultateRamBlockAddresses>
 801a796:	4603      	mov	r3, r0
 801a798:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 801a79c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3760      	adds	r7, #96	; 0x60
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}
 801a7a8:	4000a000 	.word	0x4000a000

0801a7ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	2b01      	cmp	r3, #1
 801a7be:	d111      	bne.n	801a7e4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2202      	movs	r2, #2
 801a7c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	699a      	ldr	r2, [r3, #24]
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	f022 0201 	bic.w	r2, r2, #1
 801a7d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2200      	movs	r2, #0
 801a7dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	e008      	b.n	801a7f6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a7ea:	f043 0204 	orr.w	r2, r3, #4
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a7f4:	2301      	movs	r3, #1
  }
}
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	370c      	adds	r7, #12
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 801a802:	b580      	push	{r7, lr}
 801a804:	b086      	sub	sp, #24
 801a806:	af00      	add	r7, sp, #0
 801a808:	60f8      	str	r0, [r7, #12]
 801a80a:	60b9      	str	r1, [r7, #8]
 801a80c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a814:	b2db      	uxtb	r3, r3
 801a816:	2b02      	cmp	r3, #2
 801a818:	d141      	bne.n	801a89e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a822:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 801a826:	2b00      	cmp	r3, #0
 801a828:	d109      	bne.n	801a83e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a830:	f043 0220 	orr.w	r2, r3, #32
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 801a83a:	2301      	movs	r3, #1
 801a83c:	e038      	b.n	801a8b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d009      	beq.n	801a862 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 801a85e:	2301      	movs	r3, #1
 801a860:	e026      	b.n	801a8b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a86a:	0c1b      	lsrs	r3, r3, #16
 801a86c:	f003 031f 	and.w	r3, r3, #31
 801a870:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 801a872:	697b      	ldr	r3, [r7, #20]
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	68b9      	ldr	r1, [r7, #8]
 801a878:	68f8      	ldr	r0, [r7, #12]
 801a87a:	f000 fe95 	bl	801b5a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	2101      	movs	r1, #1
 801a884:	697a      	ldr	r2, [r7, #20]
 801a886:	fa01 f202 	lsl.w	r2, r1, r2
 801a88a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 801a88e:	2201      	movs	r2, #1
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	409a      	lsls	r2, r3
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 801a89a:	2300      	movs	r3, #0
 801a89c:	e008      	b.n	801a8b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a8a4:	f043 0208 	orr.w	r2, r3, #8
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a8ae:	2301      	movs	r3, #1
  }
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3718      	adds	r7, #24
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}

0801a8b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 801a8b8:	b480      	push	{r7}
 801a8ba:	b08b      	sub	sp, #44	; 0x2c
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	60f8      	str	r0, [r7, #12]
 801a8c0:	60b9      	str	r1, [r7, #8]
 801a8c2:	607a      	str	r2, [r7, #4]
 801a8c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a8d0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 801a8d2:	7efb      	ldrb	r3, [r7, #27]
 801a8d4:	2b02      	cmp	r3, #2
 801a8d6:	f040 814b 	bne.w	801ab70 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	2b40      	cmp	r3, #64	; 0x40
 801a8de:	d14d      	bne.n	801a97c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a8e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d109      	bne.n	801a904 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a8f6:	f043 0220 	orr.w	r2, r3, #32
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a900:	2301      	movs	r3, #1
 801a902:	e13e      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a90c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a910:	2b00      	cmp	r3, #0
 801a912:	d109      	bne.n	801a928 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a91a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a924:	2301      	movs	r3, #1
 801a926:	e12c      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a930:	0e1b      	lsrs	r3, r3, #24
 801a932:	f003 0301 	and.w	r3, r3, #1
 801a936:	2b01      	cmp	r3, #1
 801a938:	d10b      	bne.n	801a952 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a942:	0fdb      	lsrs	r3, r3, #31
 801a944:	f003 0301 	and.w	r3, r3, #1
 801a948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a94c:	d101      	bne.n	801a952 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 801a94e:	2301      	movs	r3, #1
 801a950:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a95a:	0a1b      	lsrs	r3, r3, #8
 801a95c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a960:	69fa      	ldr	r2, [r7, #28]
 801a962:	4413      	add	r3, r2
 801a964:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a96e:	69f9      	ldr	r1, [r7, #28]
 801a970:	fb01 f303 	mul.w	r3, r1, r3
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	4413      	add	r3, r2
 801a978:	627b      	str	r3, [r7, #36]	; 0x24
 801a97a:	e069      	b.n	801aa50 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	2b41      	cmp	r3, #65	; 0x41
 801a980:	d14d      	bne.n	801aa1e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a98a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d109      	bne.n	801a9a6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a998:	f043 0220 	orr.w	r2, r3, #32
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	e0ed      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d109      	bne.n	801a9ca <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a9bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a9c6:	2301      	movs	r3, #1
 801a9c8:	e0db      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a9d2:	0e1b      	lsrs	r3, r3, #24
 801a9d4:	f003 0301 	and.w	r3, r3, #1
 801a9d8:	2b01      	cmp	r3, #1
 801a9da:	d10b      	bne.n	801a9f4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a9e4:	0fdb      	lsrs	r3, r3, #31
 801a9e6:	f003 0301 	and.w	r3, r3, #1
 801a9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a9ee:	d101      	bne.n	801a9f4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a9fc:	0a1b      	lsrs	r3, r3, #8
 801a9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa02:	69fa      	ldr	r2, [r7, #28]
 801aa04:	4413      	add	r3, r2
 801aa06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa10:	69f9      	ldr	r1, [r7, #28]
 801aa12:	fb01 f303 	mul.w	r3, r1, r3
 801aa16:	009b      	lsls	r3, r3, #2
 801aa18:	4413      	add	r3, r2
 801aa1a:	627b      	str	r3, [r7, #36]	; 0x24
 801aa1c:	e018      	b.n	801aa50 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa22:	68ba      	ldr	r2, [r7, #8]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d309      	bcc.n	801aa3c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aa2e:	f043 0220 	orr.w	r2, r3, #32
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801aa38:	2301      	movs	r3, #1
 801aa3a:	e0a2      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aa44:	68b9      	ldr	r1, [r7, #8]
 801aa46:	fb01 f303 	mul.w	r3, r1, r3
 801aa4a:	009b      	lsls	r3, r3, #2
 801aa4c:	4413      	add	r3, r2
 801aa4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 801aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d107      	bne.n	801aa74 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 801aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	0c9b      	lsrs	r3, r3, #18
 801aa6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	601a      	str	r2, [r3, #0]
 801aa72:	e005      	b.n	801aa80 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 801aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 801aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 801aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 801aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9a:	3304      	adds	r3, #4
 801aa9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 801aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	b29a      	uxth	r2, r3
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 801aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 801aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 801aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 801aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	0e1b      	lsrs	r3, r3, #24
 801aad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 801aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	0fda      	lsrs	r2, r3, #31
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 801aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae6:	3304      	adds	r3, #4
 801aae8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 801aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801aaee:	2300      	movs	r3, #0
 801aaf0:	623b      	str	r3, [r7, #32]
 801aaf2:	e00a      	b.n	801ab0a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 801aaf4:	697a      	ldr	r2, [r7, #20]
 801aaf6:	6a3b      	ldr	r3, [r7, #32]
 801aaf8:	441a      	add	r2, r3
 801aafa:	6839      	ldr	r1, [r7, #0]
 801aafc:	6a3b      	ldr	r3, [r7, #32]
 801aafe:	440b      	add	r3, r1
 801ab00:	7812      	ldrb	r2, [r2, #0]
 801ab02:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801ab04:	6a3b      	ldr	r3, [r7, #32]
 801ab06:	3301      	adds	r3, #1
 801ab08:	623b      	str	r3, [r7, #32]
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	68db      	ldr	r3, [r3, #12]
 801ab0e:	0c1b      	lsrs	r3, r3, #16
 801ab10:	4a1f      	ldr	r2, [pc, #124]	; (801ab90 <HAL_FDCAN_GetRxMessage+0x2d8>)
 801ab12:	5cd3      	ldrb	r3, [r2, r3]
 801ab14:	461a      	mov	r2, r3
 801ab16:	6a3b      	ldr	r3, [r7, #32]
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	d3eb      	bcc.n	801aaf4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801ab1c:	68bb      	ldr	r3, [r7, #8]
 801ab1e:	2b40      	cmp	r3, #64	; 0x40
 801ab20:	d105      	bne.n	801ab2e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	69fa      	ldr	r2, [r7, #28]
 801ab28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801ab2c:	e01e      	b.n	801ab6c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	2b41      	cmp	r3, #65	; 0x41
 801ab32:	d105      	bne.n	801ab40 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	69fa      	ldr	r2, [r7, #28]
 801ab3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801ab3e:	e015      	b.n	801ab6c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	2b1f      	cmp	r3, #31
 801ab44:	d808      	bhi.n	801ab58 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2101      	movs	r1, #1
 801ab4c:	68ba      	ldr	r2, [r7, #8]
 801ab4e:	fa01 f202 	lsl.w	r2, r1, r2
 801ab52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801ab56:	e009      	b.n	801ab6c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	f003 021f 	and.w	r2, r3, #31
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	2101      	movs	r1, #1
 801ab64:	fa01 f202 	lsl.w	r2, r1, r2
 801ab68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	e008      	b.n	801ab82 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ab76:	f043 0208 	orr.w	r2, r3, #8
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801ab80:	2301      	movs	r3, #1
  }
}
 801ab82:	4618      	mov	r0, r3
 801ab84:	372c      	adds	r7, #44	; 0x2c
 801ab86:	46bd      	mov	sp, r7
 801ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8c:	4770      	bx	lr
 801ab8e:	bf00      	nop
 801ab90:	080218dc 	.word	0x080218dc

0801ab94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 801ab94:	b480      	push	{r7}
 801ab96:	b087      	sub	sp, #28
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	60f8      	str	r0, [r7, #12]
 801ab9c:	60b9      	str	r1, [r7, #8]
 801ab9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801aba6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 801aba8:	7dfb      	ldrb	r3, [r7, #23]
 801abaa:	2b01      	cmp	r3, #1
 801abac:	d002      	beq.n	801abb4 <HAL_FDCAN_ActivateNotification+0x20>
 801abae:	7dfb      	ldrb	r3, [r7, #23]
 801abb0:	2b02      	cmp	r3, #2
 801abb2:	d155      	bne.n	801ac60 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	4013      	ands	r3, r2
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d108      	bne.n	801abd4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	f042 0201 	orr.w	r2, r2, #1
 801abd0:	65da      	str	r2, [r3, #92]	; 0x5c
 801abd2:	e014      	b.n	801abfe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	4013      	ands	r3, r2
 801abde:	68ba      	ldr	r2, [r7, #8]
 801abe0:	429a      	cmp	r2, r3
 801abe2:	d108      	bne.n	801abf6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	f042 0202 	orr.w	r2, r2, #2
 801abf2:	65da      	str	r2, [r3, #92]	; 0x5c
 801abf4:	e003      	b.n	801abfe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	2203      	movs	r2, #3
 801abfc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 801abfe:	68bb      	ldr	r3, [r7, #8]
 801ac00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d009      	beq.n	801ac1c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	687a      	ldr	r2, [r7, #4]
 801ac16:	430a      	orrs	r2, r1
 801ac18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d009      	beq.n	801ac3a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	687a      	ldr	r2, [r7, #4]
 801ac34:	430a      	orrs	r2, r1
 801ac36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801ac40:	68ba      	ldr	r2, [r7, #8]
 801ac42:	4b0f      	ldr	r3, [pc, #60]	; (801ac80 <HAL_FDCAN_ActivateNotification+0xec>)
 801ac44:	4013      	ands	r3, r2
 801ac46:	68fa      	ldr	r2, [r7, #12]
 801ac48:	6812      	ldr	r2, [r2, #0]
 801ac4a:	430b      	orrs	r3, r1
 801ac4c:	6553      	str	r3, [r2, #84]	; 0x54
 801ac4e:	4b0d      	ldr	r3, [pc, #52]	; (801ac84 <HAL_FDCAN_ActivateNotification+0xf0>)
 801ac50:	695a      	ldr	r2, [r3, #20]
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	0f9b      	lsrs	r3, r3, #30
 801ac56:	490b      	ldr	r1, [pc, #44]	; (801ac84 <HAL_FDCAN_ActivateNotification+0xf0>)
 801ac58:	4313      	orrs	r3, r2
 801ac5a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	e008      	b.n	801ac72 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ac66:	f043 0202 	orr.w	r2, r3, #2
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801ac70:	2301      	movs	r3, #1
  }
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	371c      	adds	r7, #28
 801ac76:	46bd      	mov	sp, r7
 801ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7c:	4770      	bx	lr
 801ac7e:	bf00      	nop
 801ac80:	3fcfffff 	.word	0x3fcfffff
 801ac84:	4000a800 	.word	0x4000a800

0801ac88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b096      	sub	sp, #88	; 0x58
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801ac90:	4b9a      	ldr	r3, [pc, #616]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ac92:	691b      	ldr	r3, [r3, #16]
 801ac94:	079b      	lsls	r3, r3, #30
 801ac96:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801ac98:	4b98      	ldr	r3, [pc, #608]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ac9a:	695b      	ldr	r3, [r3, #20]
 801ac9c:	079b      	lsls	r3, r3, #30
 801ac9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801aca0:	4013      	ands	r3, r2
 801aca2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acaa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801acae:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801acb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801acb8:	4013      	ands	r3, r2
 801acba:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acc2:	f003 030f 	and.w	r3, r3, #15
 801acc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801acce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801acd0:	4013      	ands	r3, r2
 801acd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801acde:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ace6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ace8:	4013      	ands	r3, r2
 801acea:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acf2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801acf6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801acfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ad00:	4013      	ands	r3, r2
 801ad02:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad0a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801ad0e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ad18:	4013      	ands	r3, r2
 801ad1a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801ad2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad2e:	0a1b      	lsrs	r3, r3, #8
 801ad30:	f003 0301 	and.w	r3, r3, #1
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d010      	beq.n	801ad5a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad3a:	0a1b      	lsrs	r3, r3, #8
 801ad3c:	f003 0301 	and.w	r3, r3, #1
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d00a      	beq.n	801ad5a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad4c:	651a      	str	r2, [r3, #80]	; 0x50
 801ad4e:	4b6b      	ldr	r3, [pc, #428]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ad50:	2200      	movs	r2, #0
 801ad52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801ad54:	6878      	ldr	r0, [r7, #4]
 801ad56:	f000 fa54 	bl	801b202 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad5c:	0a9b      	lsrs	r3, r3, #10
 801ad5e:	f003 0301 	and.w	r3, r3, #1
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d01d      	beq.n	801ada2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad68:	0a9b      	lsrs	r3, r3, #10
 801ad6a:	f003 0301 	and.w	r3, r3, #1
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d017      	beq.n	801ada2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801ad7a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801ad84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad86:	4013      	ands	r3, r2
 801ad88:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ad92:	651a      	str	r2, [r3, #80]	; 0x50
 801ad94:	4b59      	ldr	r3, [pc, #356]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ad96:	2200      	movs	r2, #0
 801ad98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801ad9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad9c:	6878      	ldr	r0, [r7, #4]
 801ad9e:	f000 fa07 	bl	801b1b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801ada2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d00d      	beq.n	801adc4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681a      	ldr	r2, [r3, #0]
 801adac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801adae:	4b54      	ldr	r3, [pc, #336]	; (801af00 <HAL_FDCAN_IRQHandler+0x278>)
 801adb0:	400b      	ands	r3, r1
 801adb2:	6513      	str	r3, [r2, #80]	; 0x50
 801adb4:	4a51      	ldr	r2, [pc, #324]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801adb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adb8:	0f9b      	lsrs	r3, r3, #30
 801adba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801adbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f000 f9c0 	bl	801b144 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801adc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d00d      	beq.n	801ade6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	681a      	ldr	r2, [r3, #0]
 801adce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801add0:	4b4b      	ldr	r3, [pc, #300]	; (801af00 <HAL_FDCAN_IRQHandler+0x278>)
 801add2:	400b      	ands	r3, r1
 801add4:	6513      	str	r3, [r2, #80]	; 0x50
 801add6:	4a49      	ldr	r2, [pc, #292]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801add8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801adda:	0f9b      	lsrs	r3, r3, #30
 801addc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801adde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f000 f9ba 	bl	801b15a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801ade6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d00d      	beq.n	801ae08 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681a      	ldr	r2, [r3, #0]
 801adf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801adf2:	4b43      	ldr	r3, [pc, #268]	; (801af00 <HAL_FDCAN_IRQHandler+0x278>)
 801adf4:	400b      	ands	r3, r1
 801adf6:	6513      	str	r3, [r2, #80]	; 0x50
 801adf8:	4a40      	ldr	r2, [pc, #256]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801adfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adfc:	0f9b      	lsrs	r3, r3, #30
 801adfe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801ae00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7f3 fc3a 	bl	800e67c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801ae08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d00d      	beq.n	801ae2a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681a      	ldr	r2, [r3, #0]
 801ae12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801ae14:	4b3a      	ldr	r3, [pc, #232]	; (801af00 <HAL_FDCAN_IRQHandler+0x278>)
 801ae16:	400b      	ands	r3, r1
 801ae18:	6513      	str	r3, [r2, #80]	; 0x50
 801ae1a:	4a38      	ldr	r2, [pc, #224]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ae1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae1e:	0f9b      	lsrs	r3, r3, #30
 801ae20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801ae22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801ae24:	6878      	ldr	r0, [r7, #4]
 801ae26:	f000 f9a3 	bl	801b170 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801ae2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae2c:	0adb      	lsrs	r3, r3, #11
 801ae2e:	f003 0301 	and.w	r3, r3, #1
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d010      	beq.n	801ae58 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae38:	0adb      	lsrs	r3, r3, #11
 801ae3a:	f003 0301 	and.w	r3, r3, #1
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d00a      	beq.n	801ae58 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ae4a:	651a      	str	r2, [r3, #80]	; 0x50
 801ae4c:	4b2b      	ldr	r3, [pc, #172]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ae4e:	2200      	movs	r2, #0
 801ae50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801ae52:	6878      	ldr	r0, [r7, #4]
 801ae54:	f000 f997 	bl	801b186 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae5a:	0a5b      	lsrs	r3, r3, #9
 801ae5c:	f003 0301 	and.w	r3, r3, #1
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d01d      	beq.n	801aea0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae66:	0a5b      	lsrs	r3, r3, #9
 801ae68:	f003 0301 	and.w	r3, r3, #1
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d017      	beq.n	801aea0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ae78:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ae82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae84:	4013      	ands	r3, r2
 801ae86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae90:	651a      	str	r2, [r3, #80]	; 0x50
 801ae92:	4b1a      	ldr	r3, [pc, #104]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801ae94:	2200      	movs	r2, #0
 801ae96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801ae98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ae9a:	6878      	ldr	r0, [r7, #4]
 801ae9c:	f000 f97d 	bl	801b19a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801aea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aea2:	0cdb      	lsrs	r3, r3, #19
 801aea4:	f003 0301 	and.w	r3, r3, #1
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d010      	beq.n	801aece <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeae:	0cdb      	lsrs	r3, r3, #19
 801aeb0:	f003 0301 	and.w	r3, r3, #1
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d00a      	beq.n	801aece <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801aec0:	651a      	str	r2, [r3, #80]	; 0x50
 801aec2:	4b0e      	ldr	r3, [pc, #56]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801aec4:	2200      	movs	r2, #0
 801aec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801aec8:	6878      	ldr	r0, [r7, #4]
 801aeca:	f000 f97c 	bl	801b1c6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801aece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aed0:	0c1b      	lsrs	r3, r3, #16
 801aed2:	f003 0301 	and.w	r3, r3, #1
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d016      	beq.n	801af08 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aedc:	0c1b      	lsrs	r3, r3, #16
 801aede:	f003 0301 	and.w	r3, r3, #1
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d010      	beq.n	801af08 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801aeee:	651a      	str	r2, [r3, #80]	; 0x50
 801aef0:	4b02      	ldr	r3, [pc, #8]	; (801aefc <HAL_FDCAN_IRQHandler+0x274>)
 801aef2:	2200      	movs	r2, #0
 801aef4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801aef6:	6878      	ldr	r0, [r7, #4]
 801aef8:	e004      	b.n	801af04 <HAL_FDCAN_IRQHandler+0x27c>
 801aefa:	bf00      	nop
 801aefc:	4000a800 	.word	0x4000a800
 801af00:	3fcfffff 	.word	0x3fcfffff
 801af04:	f000 f969 	bl	801b1da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801af08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af0a:	0c9b      	lsrs	r3, r3, #18
 801af0c:	f003 0301 	and.w	r3, r3, #1
 801af10:	2b00      	cmp	r3, #0
 801af12:	d010      	beq.n	801af36 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af16:	0c9b      	lsrs	r3, r3, #18
 801af18:	f003 0301 	and.w	r3, r3, #1
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00a      	beq.n	801af36 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801af28:	651a      	str	r2, [r3, #80]	; 0x50
 801af2a:	4b83      	ldr	r3, [pc, #524]	; (801b138 <HAL_FDCAN_IRQHandler+0x4b0>)
 801af2c:	2200      	movs	r2, #0
 801af2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801af30:	6878      	ldr	r0, [r7, #4]
 801af32:	f000 f95c 	bl	801b1ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801af36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af38:	0c5b      	lsrs	r3, r3, #17
 801af3a:	f003 0301 	and.w	r3, r3, #1
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d015      	beq.n	801af6e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af44:	0c5b      	lsrs	r3, r3, #17
 801af46:	f003 0301 	and.w	r3, r3, #1
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d00f      	beq.n	801af6e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801af56:	651a      	str	r2, [r3, #80]	; 0x50
 801af58:	4b77      	ldr	r3, [pc, #476]	; (801b138 <HAL_FDCAN_IRQHandler+0x4b0>)
 801af5a:	2200      	movs	r2, #0
 801af5c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801af64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801af6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af70:	2b00      	cmp	r3, #0
 801af72:	d00d      	beq.n	801af90 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681a      	ldr	r2, [r3, #0]
 801af78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801af7a:	4b70      	ldr	r3, [pc, #448]	; (801b13c <HAL_FDCAN_IRQHandler+0x4b4>)
 801af7c:	400b      	ands	r3, r1
 801af7e:	6513      	str	r3, [r2, #80]	; 0x50
 801af80:	4a6d      	ldr	r2, [pc, #436]	; (801b138 <HAL_FDCAN_IRQHandler+0x4b0>)
 801af82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af84:	0f9b      	lsrs	r3, r3, #30
 801af86:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801af88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801af8a:	6878      	ldr	r0, [r7, #4]
 801af8c:	f000 f94d 	bl	801b22a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801af90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af92:	2b00      	cmp	r3, #0
 801af94:	d011      	beq.n	801afba <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	681a      	ldr	r2, [r3, #0]
 801af9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801af9c:	4b67      	ldr	r3, [pc, #412]	; (801b13c <HAL_FDCAN_IRQHandler+0x4b4>)
 801af9e:	400b      	ands	r3, r1
 801afa0:	6513      	str	r3, [r2, #80]	; 0x50
 801afa2:	4a65      	ldr	r2, [pc, #404]	; (801b138 <HAL_FDCAN_IRQHandler+0x4b0>)
 801afa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afa6:	0f9b      	lsrs	r3, r3, #30
 801afa8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801afb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afb2:	431a      	orrs	r2, r3
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	4a60      	ldr	r2, [pc, #384]	; (801b140 <HAL_FDCAN_IRQHandler+0x4b8>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	f040 80ac 	bne.w	801b11e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	685b      	ldr	r3, [r3, #4]
 801afca:	689b      	ldr	r3, [r3, #8]
 801afcc:	f003 0303 	and.w	r3, r3, #3
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	f000 80a4 	beq.w	801b11e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	685b      	ldr	r3, [r3, #4]
 801afda:	6a1b      	ldr	r3, [r3, #32]
 801afdc:	f003 030f 	and.w	r3, r3, #15
 801afe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	685b      	ldr	r3, [r3, #4]
 801afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801afea:	4013      	ands	r3, r2
 801afec:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	6a1b      	ldr	r3, [r3, #32]
 801aff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801aff8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	685b      	ldr	r3, [r3, #4]
 801affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b002:	4013      	ands	r3, r2
 801b004:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	685b      	ldr	r3, [r3, #4]
 801b00a:	6a1b      	ldr	r3, [r3, #32]
 801b00c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801b010:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	685b      	ldr	r3, [r3, #4]
 801b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b01a:	4013      	ands	r3, r2
 801b01c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	6a1b      	ldr	r3, [r3, #32]
 801b024:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801b028:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	685b      	ldr	r3, [r3, #4]
 801b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b030:	6a3a      	ldr	r2, [r7, #32]
 801b032:	4013      	ands	r3, r2
 801b034:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	685b      	ldr	r3, [r3, #4]
 801b03a:	6a1b      	ldr	r3, [r3, #32]
 801b03c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801b040:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	685b      	ldr	r3, [r3, #4]
 801b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b048:	69fa      	ldr	r2, [r7, #28]
 801b04a:	4013      	ands	r3, r2
 801b04c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b054:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	6a1b      	ldr	r3, [r3, #32]
 801b05c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b060:	2b00      	cmp	r3, #0
 801b062:	d007      	beq.n	801b074 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	685b      	ldr	r3, [r3, #4]
 801b068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b06a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801b06c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f000 f8e6 	bl	801b240 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b076:	2b00      	cmp	r3, #0
 801b078:	d007      	beq.n	801b08a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	685b      	ldr	r3, [r3, #4]
 801b07e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b080:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801b082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b084:	6878      	ldr	r0, [r7, #4]
 801b086:	f000 f8e6 	bl	801b256 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801b08a:	69bb      	ldr	r3, [r7, #24]
 801b08c:	099b      	lsrs	r3, r3, #6
 801b08e:	f003 0301 	and.w	r3, r3, #1
 801b092:	2b00      	cmp	r3, #0
 801b094:	d01a      	beq.n	801b0cc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801b096:	697b      	ldr	r3, [r7, #20]
 801b098:	099b      	lsrs	r3, r3, #6
 801b09a:	f003 0301 	and.w	r3, r3, #1
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d014      	beq.n	801b0cc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	685b      	ldr	r3, [r3, #4]
 801b0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0a8:	0c1b      	lsrs	r3, r3, #16
 801b0aa:	b29b      	uxth	r3, r3
 801b0ac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	685b      	ldr	r3, [r3, #4]
 801b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b0b8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	2240      	movs	r2, #64	; 0x40
 801b0c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801b0c2:	68fa      	ldr	r2, [r7, #12]
 801b0c4:	6939      	ldr	r1, [r7, #16]
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	f000 f8d0 	bl	801b26c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d007      	beq.n	801b0e2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	685b      	ldr	r3, [r3, #4]
 801b0d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801b0da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0dc:	6878      	ldr	r0, [r7, #4]
 801b0de:	f000 f8d1 	bl	801b284 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801b0e2:	6a3b      	ldr	r3, [r7, #32]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d00b      	beq.n	801b100 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	6a3a      	ldr	r2, [r7, #32]
 801b0ee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801b0f6:	6a3b      	ldr	r3, [r7, #32]
 801b0f8:	431a      	orrs	r2, r3
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801b100:	69fb      	ldr	r3, [r7, #28]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d00b      	beq.n	801b11e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	685b      	ldr	r3, [r3, #4]
 801b10a:	69fa      	ldr	r2, [r7, #28]
 801b10c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801b114:	69fb      	ldr	r3, [r7, #28]
 801b116:	431a      	orrs	r2, r3
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b124:	2b00      	cmp	r3, #0
 801b126:	d002      	beq.n	801b12e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f000 f874 	bl	801b216 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801b12e:	bf00      	nop
 801b130:	3758      	adds	r7, #88	; 0x58
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	4000a800 	.word	0x4000a800
 801b13c:	3fcfffff 	.word	0x3fcfffff
 801b140:	4000a000 	.word	0x4000a000

0801b144 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801b144:	b480      	push	{r7}
 801b146:	b083      	sub	sp, #12
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
 801b14c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801b14e:	bf00      	nop
 801b150:	370c      	adds	r7, #12
 801b152:	46bd      	mov	sp, r7
 801b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b158:	4770      	bx	lr

0801b15a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801b15a:	b480      	push	{r7}
 801b15c:	b083      	sub	sp, #12
 801b15e:	af00      	add	r7, sp, #0
 801b160:	6078      	str	r0, [r7, #4]
 801b162:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801b164:	bf00      	nop
 801b166:	370c      	adds	r7, #12
 801b168:	46bd      	mov	sp, r7
 801b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16e:	4770      	bx	lr

0801b170 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801b170:	b480      	push	{r7}
 801b172:	b083      	sub	sp, #12
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801b17a:	bf00      	nop
 801b17c:	370c      	adds	r7, #12
 801b17e:	46bd      	mov	sp, r7
 801b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b184:	4770      	bx	lr

0801b186 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b186:	b480      	push	{r7}
 801b188:	b083      	sub	sp, #12
 801b18a:	af00      	add	r7, sp, #0
 801b18c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801b18e:	bf00      	nop
 801b190:	370c      	adds	r7, #12
 801b192:	46bd      	mov	sp, r7
 801b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b198:	4770      	bx	lr

0801b19a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801b19a:	b480      	push	{r7}
 801b19c:	b083      	sub	sp, #12
 801b19e:	af00      	add	r7, sp, #0
 801b1a0:	6078      	str	r0, [r7, #4]
 801b1a2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801b1a4:	bf00      	nop
 801b1a6:	370c      	adds	r7, #12
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ae:	4770      	bx	lr

0801b1b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801b1b0:	b480      	push	{r7}
 801b1b2:	b083      	sub	sp, #12
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
 801b1b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801b1ba:	bf00      	nop
 801b1bc:	370c      	adds	r7, #12
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c4:	4770      	bx	lr

0801b1c6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b1c6:	b480      	push	{r7}
 801b1c8:	b083      	sub	sp, #12
 801b1ca:	af00      	add	r7, sp, #0
 801b1cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801b1ce:	bf00      	nop
 801b1d0:	370c      	adds	r7, #12
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d8:	4770      	bx	lr

0801b1da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b1da:	b480      	push	{r7}
 801b1dc:	b083      	sub	sp, #12
 801b1de:	af00      	add	r7, sp, #0
 801b1e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801b1e2:	bf00      	nop
 801b1e4:	370c      	adds	r7, #12
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ec:	4770      	bx	lr

0801b1ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b1ee:	b480      	push	{r7}
 801b1f0:	b083      	sub	sp, #12
 801b1f2:	af00      	add	r7, sp, #0
 801b1f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801b1f6:	bf00      	nop
 801b1f8:	370c      	adds	r7, #12
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b200:	4770      	bx	lr

0801b202 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b202:	b480      	push	{r7}
 801b204:	b083      	sub	sp, #12
 801b206:	af00      	add	r7, sp, #0
 801b208:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801b20a:	bf00      	nop
 801b20c:	370c      	adds	r7, #12
 801b20e:	46bd      	mov	sp, r7
 801b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b214:	4770      	bx	lr

0801b216 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801b216:	b480      	push	{r7}
 801b218:	b083      	sub	sp, #12
 801b21a:	af00      	add	r7, sp, #0
 801b21c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801b21e:	bf00      	nop
 801b220:	370c      	adds	r7, #12
 801b222:	46bd      	mov	sp, r7
 801b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b228:	4770      	bx	lr

0801b22a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801b22a:	b480      	push	{r7}
 801b22c:	b083      	sub	sp, #12
 801b22e:	af00      	add	r7, sp, #0
 801b230:	6078      	str	r0, [r7, #4]
 801b232:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801b234:	bf00      	nop
 801b236:	370c      	adds	r7, #12
 801b238:	46bd      	mov	sp, r7
 801b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23e:	4770      	bx	lr

0801b240 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801b240:	b480      	push	{r7}
 801b242:	b083      	sub	sp, #12
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
 801b248:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801b24a:	bf00      	nop
 801b24c:	370c      	adds	r7, #12
 801b24e:	46bd      	mov	sp, r7
 801b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b254:	4770      	bx	lr

0801b256 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801b256:	b480      	push	{r7}
 801b258:	b083      	sub	sp, #12
 801b25a:	af00      	add	r7, sp, #0
 801b25c:	6078      	str	r0, [r7, #4]
 801b25e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801b260:	bf00      	nop
 801b262:	370c      	adds	r7, #12
 801b264:	46bd      	mov	sp, r7
 801b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26a:	4770      	bx	lr

0801b26c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801b26c:	b480      	push	{r7}
 801b26e:	b085      	sub	sp, #20
 801b270:	af00      	add	r7, sp, #0
 801b272:	60f8      	str	r0, [r7, #12]
 801b274:	60b9      	str	r1, [r7, #8]
 801b276:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801b278:	bf00      	nop
 801b27a:	3714      	adds	r7, #20
 801b27c:	46bd      	mov	sp, r7
 801b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b282:	4770      	bx	lr

0801b284 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801b28e:	bf00      	nop
 801b290:	370c      	adds	r7, #12
 801b292:	46bd      	mov	sp, r7
 801b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b298:	4770      	bx	lr
	...

0801b29c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801b29c:	b480      	push	{r7}
 801b29e:	b085      	sub	sp, #20
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801b2b2:	4ba7      	ldr	r3, [pc, #668]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b2b4:	4013      	ands	r3, r2
 801b2b6:	68ba      	ldr	r2, [r7, #8]
 801b2b8:	0091      	lsls	r1, r2, #2
 801b2ba:	687a      	ldr	r2, [r7, #4]
 801b2bc:	6812      	ldr	r2, [r2, #0]
 801b2be:	430b      	orrs	r3, r1
 801b2c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2d4:	041a      	lsls	r2, r3, #16
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	430a      	orrs	r2, r1
 801b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2e4:	68ba      	ldr	r2, [r7, #8]
 801b2e6:	4413      	add	r3, r2
 801b2e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b2f2:	4b97      	ldr	r3, [pc, #604]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b2f4:	4013      	ands	r3, r2
 801b2f6:	68ba      	ldr	r2, [r7, #8]
 801b2f8:	0091      	lsls	r1, r2, #2
 801b2fa:	687a      	ldr	r2, [r7, #4]
 801b2fc:	6812      	ldr	r2, [r2, #0]
 801b2fe:	430b      	orrs	r3, r1
 801b300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b30c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b314:	041a      	lsls	r2, r3, #16
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	430a      	orrs	r2, r1
 801b31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b324:	005b      	lsls	r3, r3, #1
 801b326:	68ba      	ldr	r2, [r7, #8]
 801b328:	4413      	add	r3, r2
 801b32a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801b334:	4b86      	ldr	r3, [pc, #536]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b336:	4013      	ands	r3, r2
 801b338:	68ba      	ldr	r2, [r7, #8]
 801b33a:	0091      	lsls	r1, r2, #2
 801b33c:	687a      	ldr	r2, [r7, #4]
 801b33e:	6812      	ldr	r2, [r2, #0]
 801b340:	430b      	orrs	r3, r1
 801b342:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b34e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b356:	041a      	lsls	r2, r3, #16
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	430a      	orrs	r2, r1
 801b35e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801b36a:	fb02 f303 	mul.w	r3, r2, r3
 801b36e:	68ba      	ldr	r2, [r7, #8]
 801b370:	4413      	add	r3, r2
 801b372:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801b37c:	4b74      	ldr	r3, [pc, #464]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b37e:	4013      	ands	r3, r2
 801b380:	68ba      	ldr	r2, [r7, #8]
 801b382:	0091      	lsls	r1, r2, #2
 801b384:	687a      	ldr	r2, [r7, #4]
 801b386:	6812      	ldr	r2, [r2, #0]
 801b388:	430b      	orrs	r3, r1
 801b38a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b396:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b39e:	041a      	lsls	r2, r3, #16
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	430a      	orrs	r2, r1
 801b3a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801b3b2:	fb02 f303 	mul.w	r3, r2, r3
 801b3b6:	68ba      	ldr	r2, [r7, #8]
 801b3b8:	4413      	add	r3, r2
 801b3ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b3c4:	4b62      	ldr	r3, [pc, #392]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b3c6:	4013      	ands	r3, r2
 801b3c8:	68ba      	ldr	r2, [r7, #8]
 801b3ca:	0091      	lsls	r1, r2, #2
 801b3cc:	687a      	ldr	r2, [r7, #4]
 801b3ce:	6812      	ldr	r2, [r2, #0]
 801b3d0:	430b      	orrs	r3, r1
 801b3d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801b3de:	fb02 f303 	mul.w	r3, r2, r3
 801b3e2:	68ba      	ldr	r2, [r7, #8]
 801b3e4:	4413      	add	r3, r2
 801b3e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801b3f0:	4b57      	ldr	r3, [pc, #348]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b3f2:	4013      	ands	r3, r2
 801b3f4:	68ba      	ldr	r2, [r7, #8]
 801b3f6:	0091      	lsls	r1, r2, #2
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	6812      	ldr	r2, [r2, #0]
 801b3fc:	430b      	orrs	r3, r1
 801b3fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801b40a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b412:	041a      	lsls	r2, r3, #16
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	430a      	orrs	r2, r1
 801b41a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b422:	005b      	lsls	r3, r3, #1
 801b424:	68ba      	ldr	r2, [r7, #8]
 801b426:	4413      	add	r3, r2
 801b428:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801b432:	4b47      	ldr	r3, [pc, #284]	; (801b550 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801b434:	4013      	ands	r3, r2
 801b436:	68ba      	ldr	r2, [r7, #8]
 801b438:	0091      	lsls	r1, r2, #2
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	6812      	ldr	r2, [r2, #0]
 801b43e:	430b      	orrs	r3, r1
 801b440:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801b44c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b454:	041a      	lsls	r2, r3, #16
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	430a      	orrs	r2, r1
 801b45c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801b468:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b470:	061a      	lsls	r2, r3, #24
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	430a      	orrs	r2, r1
 801b478:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b480:	4b34      	ldr	r3, [pc, #208]	; (801b554 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801b482:	4413      	add	r3, r2
 801b484:	009a      	lsls	r2, r3, #2
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	441a      	add	r2, r3
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4a2:	00db      	lsls	r3, r3, #3
 801b4a4:	441a      	add	r2, r3
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4b2:	6879      	ldr	r1, [r7, #4]
 801b4b4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801b4b6:	fb01 f303 	mul.w	r3, r1, r3
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	441a      	add	r2, r3
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b4ca:	6879      	ldr	r1, [r7, #4]
 801b4cc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801b4ce:	fb01 f303 	mul.w	r3, r1, r3
 801b4d2:	009b      	lsls	r3, r3, #2
 801b4d4:	441a      	add	r2, r3
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4e2:	6879      	ldr	r1, [r7, #4]
 801b4e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801b4e6:	fb01 f303 	mul.w	r3, r1, r3
 801b4ea:	009b      	lsls	r3, r3, #2
 801b4ec:	441a      	add	r2, r3
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b4fe:	00db      	lsls	r3, r3, #3
 801b500:	441a      	add	r2, r3
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b512:	6879      	ldr	r1, [r7, #4]
 801b514:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801b516:	fb01 f303 	mul.w	r3, r1, r3
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	441a      	add	r2, r3
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b52e:	6879      	ldr	r1, [r7, #4]
 801b530:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801b532:	fb01 f303 	mul.w	r3, r1, r3
 801b536:	009b      	lsls	r3, r3, #2
 801b538:	441a      	add	r2, r3
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b546:	4a04      	ldr	r2, [pc, #16]	; (801b558 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801b548:	4293      	cmp	r3, r2
 801b54a:	d915      	bls.n	801b578 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801b54c:	e006      	b.n	801b55c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801b54e:	bf00      	nop
 801b550:	ffff0003 	.word	0xffff0003
 801b554:	10002b00 	.word	0x10002b00
 801b558:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b562:	f043 0220 	orr.w	r2, r3, #32
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	2203      	movs	r2, #3
 801b570:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801b574:	2301      	movs	r3, #1
 801b576:	e010      	b.n	801b59a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b57c:	60fb      	str	r3, [r7, #12]
 801b57e:	e005      	b.n	801b58c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	2200      	movs	r2, #0
 801b584:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	3304      	adds	r3, #4
 801b58a:	60fb      	str	r3, [r7, #12]
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b592:	68fa      	ldr	r2, [r7, #12]
 801b594:	429a      	cmp	r2, r3
 801b596:	d3f3      	bcc.n	801b580 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801b598:	2300      	movs	r3, #0
}
 801b59a:	4618      	mov	r0, r3
 801b59c:	3714      	adds	r7, #20
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a4:	4770      	bx	lr
 801b5a6:	bf00      	nop

0801b5a8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b089      	sub	sp, #36	; 0x24
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	607a      	str	r2, [r7, #4]
 801b5b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	685b      	ldr	r3, [r3, #4]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d10a      	bne.n	801b5d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801b5c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801b5ce:	4313      	orrs	r3, r2
 801b5d0:	61fb      	str	r3, [r7, #28]
 801b5d2:	e00a      	b.n	801b5ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801b5d4:	68bb      	ldr	r3, [r7, #8]
 801b5d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801b5dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801b5de:	68bb      	ldr	r3, [r7, #8]
 801b5e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801b5e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801b5e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b5e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	6a1b      	ldr	r3, [r3, #32]
 801b5ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801b5f0:	68bb      	ldr	r3, [r7, #8]
 801b5f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801b5f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801b5f6:	68bb      	ldr	r3, [r7, #8]
 801b5f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801b5fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801b600:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801b606:	4313      	orrs	r3, r2
 801b608:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b614:	6839      	ldr	r1, [r7, #0]
 801b616:	fb01 f303 	mul.w	r3, r1, r3
 801b61a:	009b      	lsls	r3, r3, #2
 801b61c:	4413      	add	r3, r2
 801b61e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801b620:	69bb      	ldr	r3, [r7, #24]
 801b622:	69fa      	ldr	r2, [r7, #28]
 801b624:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801b626:	69bb      	ldr	r3, [r7, #24]
 801b628:	3304      	adds	r3, #4
 801b62a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801b62c:	69bb      	ldr	r3, [r7, #24]
 801b62e:	693a      	ldr	r2, [r7, #16]
 801b630:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801b632:	69bb      	ldr	r3, [r7, #24]
 801b634:	3304      	adds	r3, #4
 801b636:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801b638:	2300      	movs	r3, #0
 801b63a:	617b      	str	r3, [r7, #20]
 801b63c:	e020      	b.n	801b680 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b63e:	697b      	ldr	r3, [r7, #20]
 801b640:	3303      	adds	r3, #3
 801b642:	687a      	ldr	r2, [r7, #4]
 801b644:	4413      	add	r3, r2
 801b646:	781b      	ldrb	r3, [r3, #0]
 801b648:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801b64a:	697b      	ldr	r3, [r7, #20]
 801b64c:	3302      	adds	r3, #2
 801b64e:	6879      	ldr	r1, [r7, #4]
 801b650:	440b      	add	r3, r1
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b656:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	3301      	adds	r3, #1
 801b65c:	6879      	ldr	r1, [r7, #4]
 801b65e:	440b      	add	r3, r1
 801b660:	781b      	ldrb	r3, [r3, #0]
 801b662:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801b664:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801b666:	6879      	ldr	r1, [r7, #4]
 801b668:	697a      	ldr	r2, [r7, #20]
 801b66a:	440a      	add	r2, r1
 801b66c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801b66e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b670:	69bb      	ldr	r3, [r7, #24]
 801b672:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801b674:	69bb      	ldr	r3, [r7, #24]
 801b676:	3304      	adds	r3, #4
 801b678:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801b67a:	697b      	ldr	r3, [r7, #20]
 801b67c:	3304      	adds	r3, #4
 801b67e:	617b      	str	r3, [r7, #20]
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	68db      	ldr	r3, [r3, #12]
 801b684:	0c1b      	lsrs	r3, r3, #16
 801b686:	4a06      	ldr	r2, [pc, #24]	; (801b6a0 <FDCAN_CopyMessageToRAM+0xf8>)
 801b688:	5cd3      	ldrb	r3, [r2, r3]
 801b68a:	461a      	mov	r2, r3
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	4293      	cmp	r3, r2
 801b690:	d3d5      	bcc.n	801b63e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801b692:	bf00      	nop
 801b694:	bf00      	nop
 801b696:	3724      	adds	r7, #36	; 0x24
 801b698:	46bd      	mov	sp, r7
 801b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69e:	4770      	bx	lr
 801b6a0:	080218dc 	.word	0x080218dc

0801b6a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b6a4:	b480      	push	{r7}
 801b6a6:	b089      	sub	sp, #36	; 0x24
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b6b2:	4b86      	ldr	r3, [pc, #536]	; (801b8cc <HAL_GPIO_Init+0x228>)
 801b6b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b6b6:	e18c      	b.n	801b9d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b6b8:	683b      	ldr	r3, [r7, #0]
 801b6ba:	681a      	ldr	r2, [r3, #0]
 801b6bc:	2101      	movs	r1, #1
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	fa01 f303 	lsl.w	r3, r1, r3
 801b6c4:	4013      	ands	r3, r2
 801b6c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b6c8:	693b      	ldr	r3, [r7, #16]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	f000 817e 	beq.w	801b9cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	685b      	ldr	r3, [r3, #4]
 801b6d4:	f003 0303 	and.w	r3, r3, #3
 801b6d8:	2b01      	cmp	r3, #1
 801b6da:	d005      	beq.n	801b6e8 <HAL_GPIO_Init+0x44>
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	685b      	ldr	r3, [r3, #4]
 801b6e0:	f003 0303 	and.w	r3, r3, #3
 801b6e4:	2b02      	cmp	r3, #2
 801b6e6:	d130      	bne.n	801b74a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	689b      	ldr	r3, [r3, #8]
 801b6ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b6ee:	69fb      	ldr	r3, [r7, #28]
 801b6f0:	005b      	lsls	r3, r3, #1
 801b6f2:	2203      	movs	r2, #3
 801b6f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b6f8:	43db      	mvns	r3, r3
 801b6fa:	69ba      	ldr	r2, [r7, #24]
 801b6fc:	4013      	ands	r3, r2
 801b6fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	68da      	ldr	r2, [r3, #12]
 801b704:	69fb      	ldr	r3, [r7, #28]
 801b706:	005b      	lsls	r3, r3, #1
 801b708:	fa02 f303 	lsl.w	r3, r2, r3
 801b70c:	69ba      	ldr	r2, [r7, #24]
 801b70e:	4313      	orrs	r3, r2
 801b710:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	69ba      	ldr	r2, [r7, #24]
 801b716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	685b      	ldr	r3, [r3, #4]
 801b71c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b71e:	2201      	movs	r2, #1
 801b720:	69fb      	ldr	r3, [r7, #28]
 801b722:	fa02 f303 	lsl.w	r3, r2, r3
 801b726:	43db      	mvns	r3, r3
 801b728:	69ba      	ldr	r2, [r7, #24]
 801b72a:	4013      	ands	r3, r2
 801b72c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	685b      	ldr	r3, [r3, #4]
 801b732:	091b      	lsrs	r3, r3, #4
 801b734:	f003 0201 	and.w	r2, r3, #1
 801b738:	69fb      	ldr	r3, [r7, #28]
 801b73a:	fa02 f303 	lsl.w	r3, r2, r3
 801b73e:	69ba      	ldr	r2, [r7, #24]
 801b740:	4313      	orrs	r3, r2
 801b742:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	69ba      	ldr	r2, [r7, #24]
 801b748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b74a:	683b      	ldr	r3, [r7, #0]
 801b74c:	685b      	ldr	r3, [r3, #4]
 801b74e:	f003 0303 	and.w	r3, r3, #3
 801b752:	2b03      	cmp	r3, #3
 801b754:	d017      	beq.n	801b786 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	68db      	ldr	r3, [r3, #12]
 801b75a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b75c:	69fb      	ldr	r3, [r7, #28]
 801b75e:	005b      	lsls	r3, r3, #1
 801b760:	2203      	movs	r2, #3
 801b762:	fa02 f303 	lsl.w	r3, r2, r3
 801b766:	43db      	mvns	r3, r3
 801b768:	69ba      	ldr	r2, [r7, #24]
 801b76a:	4013      	ands	r3, r2
 801b76c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	689a      	ldr	r2, [r3, #8]
 801b772:	69fb      	ldr	r3, [r7, #28]
 801b774:	005b      	lsls	r3, r3, #1
 801b776:	fa02 f303 	lsl.w	r3, r2, r3
 801b77a:	69ba      	ldr	r2, [r7, #24]
 801b77c:	4313      	orrs	r3, r2
 801b77e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	69ba      	ldr	r2, [r7, #24]
 801b784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b786:	683b      	ldr	r3, [r7, #0]
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	f003 0303 	and.w	r3, r3, #3
 801b78e:	2b02      	cmp	r3, #2
 801b790:	d123      	bne.n	801b7da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b792:	69fb      	ldr	r3, [r7, #28]
 801b794:	08da      	lsrs	r2, r3, #3
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	3208      	adds	r2, #8
 801b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b79e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b7a0:	69fb      	ldr	r3, [r7, #28]
 801b7a2:	f003 0307 	and.w	r3, r3, #7
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	220f      	movs	r2, #15
 801b7aa:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ae:	43db      	mvns	r3, r3
 801b7b0:	69ba      	ldr	r2, [r7, #24]
 801b7b2:	4013      	ands	r3, r2
 801b7b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b7b6:	683b      	ldr	r3, [r7, #0]
 801b7b8:	691a      	ldr	r2, [r3, #16]
 801b7ba:	69fb      	ldr	r3, [r7, #28]
 801b7bc:	f003 0307 	and.w	r3, r3, #7
 801b7c0:	009b      	lsls	r3, r3, #2
 801b7c2:	fa02 f303 	lsl.w	r3, r2, r3
 801b7c6:	69ba      	ldr	r2, [r7, #24]
 801b7c8:	4313      	orrs	r3, r2
 801b7ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b7cc:	69fb      	ldr	r3, [r7, #28]
 801b7ce:	08da      	lsrs	r2, r3, #3
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	3208      	adds	r2, #8
 801b7d4:	69b9      	ldr	r1, [r7, #24]
 801b7d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	005b      	lsls	r3, r3, #1
 801b7e4:	2203      	movs	r2, #3
 801b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ea:	43db      	mvns	r3, r3
 801b7ec:	69ba      	ldr	r2, [r7, #24]
 801b7ee:	4013      	ands	r3, r2
 801b7f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b7f2:	683b      	ldr	r3, [r7, #0]
 801b7f4:	685b      	ldr	r3, [r3, #4]
 801b7f6:	f003 0203 	and.w	r2, r3, #3
 801b7fa:	69fb      	ldr	r3, [r7, #28]
 801b7fc:	005b      	lsls	r3, r3, #1
 801b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 801b802:	69ba      	ldr	r2, [r7, #24]
 801b804:	4313      	orrs	r3, r2
 801b806:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	69ba      	ldr	r2, [r7, #24]
 801b80c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	685b      	ldr	r3, [r3, #4]
 801b812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b816:	2b00      	cmp	r3, #0
 801b818:	f000 80d8 	beq.w	801b9cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b81c:	4b2c      	ldr	r3, [pc, #176]	; (801b8d0 <HAL_GPIO_Init+0x22c>)
 801b81e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b822:	4a2b      	ldr	r2, [pc, #172]	; (801b8d0 <HAL_GPIO_Init+0x22c>)
 801b824:	f043 0302 	orr.w	r3, r3, #2
 801b828:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801b82c:	4b28      	ldr	r3, [pc, #160]	; (801b8d0 <HAL_GPIO_Init+0x22c>)
 801b82e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b832:	f003 0302 	and.w	r3, r3, #2
 801b836:	60fb      	str	r3, [r7, #12]
 801b838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b83a:	4a26      	ldr	r2, [pc, #152]	; (801b8d4 <HAL_GPIO_Init+0x230>)
 801b83c:	69fb      	ldr	r3, [r7, #28]
 801b83e:	089b      	lsrs	r3, r3, #2
 801b840:	3302      	adds	r3, #2
 801b842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b848:	69fb      	ldr	r3, [r7, #28]
 801b84a:	f003 0303 	and.w	r3, r3, #3
 801b84e:	009b      	lsls	r3, r3, #2
 801b850:	220f      	movs	r2, #15
 801b852:	fa02 f303 	lsl.w	r3, r2, r3
 801b856:	43db      	mvns	r3, r3
 801b858:	69ba      	ldr	r2, [r7, #24]
 801b85a:	4013      	ands	r3, r2
 801b85c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	4a1d      	ldr	r2, [pc, #116]	; (801b8d8 <HAL_GPIO_Init+0x234>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d04a      	beq.n	801b8fc <HAL_GPIO_Init+0x258>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	4a1c      	ldr	r2, [pc, #112]	; (801b8dc <HAL_GPIO_Init+0x238>)
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d02b      	beq.n	801b8c6 <HAL_GPIO_Init+0x222>
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	4a1b      	ldr	r2, [pc, #108]	; (801b8e0 <HAL_GPIO_Init+0x23c>)
 801b872:	4293      	cmp	r3, r2
 801b874:	d025      	beq.n	801b8c2 <HAL_GPIO_Init+0x21e>
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	4a1a      	ldr	r2, [pc, #104]	; (801b8e4 <HAL_GPIO_Init+0x240>)
 801b87a:	4293      	cmp	r3, r2
 801b87c:	d01f      	beq.n	801b8be <HAL_GPIO_Init+0x21a>
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4a19      	ldr	r2, [pc, #100]	; (801b8e8 <HAL_GPIO_Init+0x244>)
 801b882:	4293      	cmp	r3, r2
 801b884:	d019      	beq.n	801b8ba <HAL_GPIO_Init+0x216>
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	4a18      	ldr	r2, [pc, #96]	; (801b8ec <HAL_GPIO_Init+0x248>)
 801b88a:	4293      	cmp	r3, r2
 801b88c:	d013      	beq.n	801b8b6 <HAL_GPIO_Init+0x212>
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	4a17      	ldr	r2, [pc, #92]	; (801b8f0 <HAL_GPIO_Init+0x24c>)
 801b892:	4293      	cmp	r3, r2
 801b894:	d00d      	beq.n	801b8b2 <HAL_GPIO_Init+0x20e>
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	4a16      	ldr	r2, [pc, #88]	; (801b8f4 <HAL_GPIO_Init+0x250>)
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d007      	beq.n	801b8ae <HAL_GPIO_Init+0x20a>
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	4a15      	ldr	r2, [pc, #84]	; (801b8f8 <HAL_GPIO_Init+0x254>)
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	d101      	bne.n	801b8aa <HAL_GPIO_Init+0x206>
 801b8a6:	2309      	movs	r3, #9
 801b8a8:	e029      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8aa:	230a      	movs	r3, #10
 801b8ac:	e027      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8ae:	2307      	movs	r3, #7
 801b8b0:	e025      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8b2:	2306      	movs	r3, #6
 801b8b4:	e023      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8b6:	2305      	movs	r3, #5
 801b8b8:	e021      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8ba:	2304      	movs	r3, #4
 801b8bc:	e01f      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8be:	2303      	movs	r3, #3
 801b8c0:	e01d      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8c2:	2302      	movs	r3, #2
 801b8c4:	e01b      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	e019      	b.n	801b8fe <HAL_GPIO_Init+0x25a>
 801b8ca:	bf00      	nop
 801b8cc:	58000080 	.word	0x58000080
 801b8d0:	58024400 	.word	0x58024400
 801b8d4:	58000400 	.word	0x58000400
 801b8d8:	58020000 	.word	0x58020000
 801b8dc:	58020400 	.word	0x58020400
 801b8e0:	58020800 	.word	0x58020800
 801b8e4:	58020c00 	.word	0x58020c00
 801b8e8:	58021000 	.word	0x58021000
 801b8ec:	58021400 	.word	0x58021400
 801b8f0:	58021800 	.word	0x58021800
 801b8f4:	58021c00 	.word	0x58021c00
 801b8f8:	58022400 	.word	0x58022400
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	69fa      	ldr	r2, [r7, #28]
 801b900:	f002 0203 	and.w	r2, r2, #3
 801b904:	0092      	lsls	r2, r2, #2
 801b906:	4093      	lsls	r3, r2
 801b908:	69ba      	ldr	r2, [r7, #24]
 801b90a:	4313      	orrs	r3, r2
 801b90c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b90e:	4938      	ldr	r1, [pc, #224]	; (801b9f0 <HAL_GPIO_Init+0x34c>)
 801b910:	69fb      	ldr	r3, [r7, #28]
 801b912:	089b      	lsrs	r3, r3, #2
 801b914:	3302      	adds	r3, #2
 801b916:	69ba      	ldr	r2, [r7, #24]
 801b918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b924:	693b      	ldr	r3, [r7, #16]
 801b926:	43db      	mvns	r3, r3
 801b928:	69ba      	ldr	r2, [r7, #24]
 801b92a:	4013      	ands	r3, r2
 801b92c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b936:	2b00      	cmp	r3, #0
 801b938:	d003      	beq.n	801b942 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801b93a:	69ba      	ldr	r2, [r7, #24]
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	4313      	orrs	r3, r2
 801b940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801b942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b946:	69bb      	ldr	r3, [r7, #24]
 801b948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b94a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b94e:	685b      	ldr	r3, [r3, #4]
 801b950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b952:	693b      	ldr	r3, [r7, #16]
 801b954:	43db      	mvns	r3, r3
 801b956:	69ba      	ldr	r2, [r7, #24]
 801b958:	4013      	ands	r3, r2
 801b95a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	685b      	ldr	r3, [r3, #4]
 801b960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b964:	2b00      	cmp	r3, #0
 801b966:	d003      	beq.n	801b970 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801b968:	69ba      	ldr	r2, [r7, #24]
 801b96a:	693b      	ldr	r3, [r7, #16]
 801b96c:	4313      	orrs	r3, r2
 801b96e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801b970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b974:	69bb      	ldr	r3, [r7, #24]
 801b976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801b978:	697b      	ldr	r3, [r7, #20]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b97e:	693b      	ldr	r3, [r7, #16]
 801b980:	43db      	mvns	r3, r3
 801b982:	69ba      	ldr	r2, [r7, #24]
 801b984:	4013      	ands	r3, r2
 801b986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	685b      	ldr	r3, [r3, #4]
 801b98c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b990:	2b00      	cmp	r3, #0
 801b992:	d003      	beq.n	801b99c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801b994:	69ba      	ldr	r2, [r7, #24]
 801b996:	693b      	ldr	r3, [r7, #16]
 801b998:	4313      	orrs	r3, r2
 801b99a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	69ba      	ldr	r2, [r7, #24]
 801b9a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801b9a2:	697b      	ldr	r3, [r7, #20]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b9a8:	693b      	ldr	r3, [r7, #16]
 801b9aa:	43db      	mvns	r3, r3
 801b9ac:	69ba      	ldr	r2, [r7, #24]
 801b9ae:	4013      	ands	r3, r2
 801b9b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801b9b2:	683b      	ldr	r3, [r7, #0]
 801b9b4:	685b      	ldr	r3, [r3, #4]
 801b9b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d003      	beq.n	801b9c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801b9be:	69ba      	ldr	r2, [r7, #24]
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	4313      	orrs	r3, r2
 801b9c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	69ba      	ldr	r2, [r7, #24]
 801b9ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801b9cc:	69fb      	ldr	r3, [r7, #28]
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b9d2:	683b      	ldr	r3, [r7, #0]
 801b9d4:	681a      	ldr	r2, [r3, #0]
 801b9d6:	69fb      	ldr	r3, [r7, #28]
 801b9d8:	fa22 f303 	lsr.w	r3, r2, r3
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	f47f ae6b 	bne.w	801b6b8 <HAL_GPIO_Init+0x14>
  }
}
 801b9e2:	bf00      	nop
 801b9e4:	bf00      	nop
 801b9e6:	3724      	adds	r7, #36	; 0x24
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ee:	4770      	bx	lr
 801b9f0:	58000400 	.word	0x58000400

0801b9f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801b9f4:	b480      	push	{r7}
 801b9f6:	b085      	sub	sp, #20
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
 801b9fc:	460b      	mov	r3, r1
 801b9fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	691a      	ldr	r2, [r3, #16]
 801ba04:	887b      	ldrh	r3, [r7, #2]
 801ba06:	4013      	ands	r3, r2
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d002      	beq.n	801ba12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ba0c:	2301      	movs	r3, #1
 801ba0e:	73fb      	strb	r3, [r7, #15]
 801ba10:	e001      	b.n	801ba16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801ba12:	2300      	movs	r3, #0
 801ba14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801ba16:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba18:	4618      	mov	r0, r3
 801ba1a:	3714      	adds	r7, #20
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba22:	4770      	bx	lr

0801ba24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ba24:	b480      	push	{r7}
 801ba26:	b083      	sub	sp, #12
 801ba28:	af00      	add	r7, sp, #0
 801ba2a:	6078      	str	r0, [r7, #4]
 801ba2c:	460b      	mov	r3, r1
 801ba2e:	807b      	strh	r3, [r7, #2]
 801ba30:	4613      	mov	r3, r2
 801ba32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ba34:	787b      	ldrb	r3, [r7, #1]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d003      	beq.n	801ba42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ba3a:	887a      	ldrh	r2, [r7, #2]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ba40:	e003      	b.n	801ba4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ba42:	887b      	ldrh	r3, [r7, #2]
 801ba44:	041a      	lsls	r2, r3, #16
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	619a      	str	r2, [r3, #24]
}
 801ba4a:	bf00      	nop
 801ba4c:	370c      	adds	r7, #12
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba54:	4770      	bx	lr
	...

0801ba58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b084      	sub	sp, #16
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801ba60:	4b19      	ldr	r3, [pc, #100]	; (801bac8 <HAL_PWREx_ConfigSupply+0x70>)
 801ba62:	68db      	ldr	r3, [r3, #12]
 801ba64:	f003 0304 	and.w	r3, r3, #4
 801ba68:	2b04      	cmp	r3, #4
 801ba6a:	d00a      	beq.n	801ba82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ba6c:	4b16      	ldr	r3, [pc, #88]	; (801bac8 <HAL_PWREx_ConfigSupply+0x70>)
 801ba6e:	68db      	ldr	r3, [r3, #12]
 801ba70:	f003 0307 	and.w	r3, r3, #7
 801ba74:	687a      	ldr	r2, [r7, #4]
 801ba76:	429a      	cmp	r2, r3
 801ba78:	d001      	beq.n	801ba7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	e01f      	b.n	801babe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ba7e:	2300      	movs	r3, #0
 801ba80:	e01d      	b.n	801babe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ba82:	4b11      	ldr	r3, [pc, #68]	; (801bac8 <HAL_PWREx_ConfigSupply+0x70>)
 801ba84:	68db      	ldr	r3, [r3, #12]
 801ba86:	f023 0207 	bic.w	r2, r3, #7
 801ba8a:	490f      	ldr	r1, [pc, #60]	; (801bac8 <HAL_PWREx_ConfigSupply+0x70>)
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	4313      	orrs	r3, r2
 801ba90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ba92:	f7fa fa21 	bl	8015ed8 <HAL_GetTick>
 801ba96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ba98:	e009      	b.n	801baae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ba9a:	f7fa fa1d 	bl	8015ed8 <HAL_GetTick>
 801ba9e:	4602      	mov	r2, r0
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	1ad3      	subs	r3, r2, r3
 801baa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801baa8:	d901      	bls.n	801baae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801baaa:	2301      	movs	r3, #1
 801baac:	e007      	b.n	801babe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801baae:	4b06      	ldr	r3, [pc, #24]	; (801bac8 <HAL_PWREx_ConfigSupply+0x70>)
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801baba:	d1ee      	bne.n	801ba9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801babc:	2300      	movs	r3, #0
}
 801babe:	4618      	mov	r0, r3
 801bac0:	3710      	adds	r7, #16
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}
 801bac6:	bf00      	nop
 801bac8:	58024800 	.word	0x58024800

0801bacc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b08c      	sub	sp, #48	; 0x30
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d101      	bne.n	801bade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bada:	2301      	movs	r3, #1
 801badc:	e3c8      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	f003 0301 	and.w	r3, r3, #1
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	f000 8087 	beq.w	801bbfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801baec:	4b88      	ldr	r3, [pc, #544]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801baee:	691b      	ldr	r3, [r3, #16]
 801baf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801baf6:	4b86      	ldr	r3, [pc, #536]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bafa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bafe:	2b10      	cmp	r3, #16
 801bb00:	d007      	beq.n	801bb12 <HAL_RCC_OscConfig+0x46>
 801bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb04:	2b18      	cmp	r3, #24
 801bb06:	d110      	bne.n	801bb2a <HAL_RCC_OscConfig+0x5e>
 801bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb0a:	f003 0303 	and.w	r3, r3, #3
 801bb0e:	2b02      	cmp	r3, #2
 801bb10:	d10b      	bne.n	801bb2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb12:	4b7f      	ldr	r3, [pc, #508]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d06c      	beq.n	801bbf8 <HAL_RCC_OscConfig+0x12c>
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	685b      	ldr	r3, [r3, #4]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d168      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801bb26:	2301      	movs	r3, #1
 801bb28:	e3a2      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	685b      	ldr	r3, [r3, #4]
 801bb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb32:	d106      	bne.n	801bb42 <HAL_RCC_OscConfig+0x76>
 801bb34:	4b76      	ldr	r3, [pc, #472]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4a75      	ldr	r2, [pc, #468]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb3e:	6013      	str	r3, [r2, #0]
 801bb40:	e02e      	b.n	801bba0 <HAL_RCC_OscConfig+0xd4>
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d10c      	bne.n	801bb64 <HAL_RCC_OscConfig+0x98>
 801bb4a:	4b71      	ldr	r3, [pc, #452]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4a70      	ldr	r2, [pc, #448]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bb54:	6013      	str	r3, [r2, #0]
 801bb56:	4b6e      	ldr	r3, [pc, #440]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a6d      	ldr	r2, [pc, #436]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bb60:	6013      	str	r3, [r2, #0]
 801bb62:	e01d      	b.n	801bba0 <HAL_RCC_OscConfig+0xd4>
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bb6c:	d10c      	bne.n	801bb88 <HAL_RCC_OscConfig+0xbc>
 801bb6e:	4b68      	ldr	r3, [pc, #416]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	4a67      	ldr	r2, [pc, #412]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb78:	6013      	str	r3, [r2, #0]
 801bb7a:	4b65      	ldr	r3, [pc, #404]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4a64      	ldr	r2, [pc, #400]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb84:	6013      	str	r3, [r2, #0]
 801bb86:	e00b      	b.n	801bba0 <HAL_RCC_OscConfig+0xd4>
 801bb88:	4b61      	ldr	r3, [pc, #388]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4a60      	ldr	r2, [pc, #384]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bb92:	6013      	str	r3, [r2, #0]
 801bb94:	4b5e      	ldr	r3, [pc, #376]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	4a5d      	ldr	r2, [pc, #372]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bb9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bb9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	685b      	ldr	r3, [r3, #4]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d013      	beq.n	801bbd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bba8:	f7fa f996 	bl	8015ed8 <HAL_GetTick>
 801bbac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bbae:	e008      	b.n	801bbc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bbb0:	f7fa f992 	bl	8015ed8 <HAL_GetTick>
 801bbb4:	4602      	mov	r2, r0
 801bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb8:	1ad3      	subs	r3, r2, r3
 801bbba:	2b64      	cmp	r3, #100	; 0x64
 801bbbc:	d901      	bls.n	801bbc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801bbbe:	2303      	movs	r3, #3
 801bbc0:	e356      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bbc2:	4b53      	ldr	r3, [pc, #332]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d0f0      	beq.n	801bbb0 <HAL_RCC_OscConfig+0xe4>
 801bbce:	e014      	b.n	801bbfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbd0:	f7fa f982 	bl	8015ed8 <HAL_GetTick>
 801bbd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bbd6:	e008      	b.n	801bbea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bbd8:	f7fa f97e 	bl	8015ed8 <HAL_GetTick>
 801bbdc:	4602      	mov	r2, r0
 801bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	2b64      	cmp	r3, #100	; 0x64
 801bbe4:	d901      	bls.n	801bbea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801bbe6:	2303      	movs	r3, #3
 801bbe8:	e342      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bbea:	4b49      	ldr	r3, [pc, #292]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d1f0      	bne.n	801bbd8 <HAL_RCC_OscConfig+0x10c>
 801bbf6:	e000      	b.n	801bbfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bbf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	f003 0302 	and.w	r3, r3, #2
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	f000 808c 	beq.w	801bd20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bc08:	4b41      	ldr	r3, [pc, #260]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc0a:	691b      	ldr	r3, [r3, #16]
 801bc0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bc10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bc12:	4b3f      	ldr	r3, [pc, #252]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bc18:	6a3b      	ldr	r3, [r7, #32]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d007      	beq.n	801bc2e <HAL_RCC_OscConfig+0x162>
 801bc1e:	6a3b      	ldr	r3, [r7, #32]
 801bc20:	2b18      	cmp	r3, #24
 801bc22:	d137      	bne.n	801bc94 <HAL_RCC_OscConfig+0x1c8>
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	f003 0303 	and.w	r3, r3, #3
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d132      	bne.n	801bc94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bc2e:	4b38      	ldr	r3, [pc, #224]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f003 0304 	and.w	r3, r3, #4
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d005      	beq.n	801bc46 <HAL_RCC_OscConfig+0x17a>
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	68db      	ldr	r3, [r3, #12]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d101      	bne.n	801bc46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801bc42:	2301      	movs	r3, #1
 801bc44:	e314      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bc46:	4b32      	ldr	r3, [pc, #200]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	f023 0219 	bic.w	r2, r3, #25
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	68db      	ldr	r3, [r3, #12]
 801bc52:	492f      	ldr	r1, [pc, #188]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc54:	4313      	orrs	r3, r2
 801bc56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc58:	f7fa f93e 	bl	8015ed8 <HAL_GetTick>
 801bc5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bc5e:	e008      	b.n	801bc72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bc60:	f7fa f93a 	bl	8015ed8 <HAL_GetTick>
 801bc64:	4602      	mov	r2, r0
 801bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc68:	1ad3      	subs	r3, r2, r3
 801bc6a:	2b02      	cmp	r3, #2
 801bc6c:	d901      	bls.n	801bc72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801bc6e:	2303      	movs	r3, #3
 801bc70:	e2fe      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bc72:	4b27      	ldr	r3, [pc, #156]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	f003 0304 	and.w	r3, r3, #4
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d0f0      	beq.n	801bc60 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc7e:	4b24      	ldr	r3, [pc, #144]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	691b      	ldr	r3, [r3, #16]
 801bc8a:	061b      	lsls	r3, r3, #24
 801bc8c:	4920      	ldr	r1, [pc, #128]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc8e:	4313      	orrs	r3, r2
 801bc90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bc92:	e045      	b.n	801bd20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	68db      	ldr	r3, [r3, #12]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d026      	beq.n	801bcea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bc9c:	4b1c      	ldr	r3, [pc, #112]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	f023 0219 	bic.w	r2, r3, #25
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	68db      	ldr	r3, [r3, #12]
 801bca8:	4919      	ldr	r1, [pc, #100]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bcaa:	4313      	orrs	r3, r2
 801bcac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcae:	f7fa f913 	bl	8015ed8 <HAL_GetTick>
 801bcb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bcb4:	e008      	b.n	801bcc8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bcb6:	f7fa f90f 	bl	8015ed8 <HAL_GetTick>
 801bcba:	4602      	mov	r2, r0
 801bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcbe:	1ad3      	subs	r3, r2, r3
 801bcc0:	2b02      	cmp	r3, #2
 801bcc2:	d901      	bls.n	801bcc8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801bcc4:	2303      	movs	r3, #3
 801bcc6:	e2d3      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bcc8:	4b11      	ldr	r3, [pc, #68]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	f003 0304 	and.w	r3, r3, #4
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d0f0      	beq.n	801bcb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcd4:	4b0e      	ldr	r3, [pc, #56]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bcd6:	685b      	ldr	r3, [r3, #4]
 801bcd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	691b      	ldr	r3, [r3, #16]
 801bce0:	061b      	lsls	r3, r3, #24
 801bce2:	490b      	ldr	r1, [pc, #44]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bce4:	4313      	orrs	r3, r2
 801bce6:	604b      	str	r3, [r1, #4]
 801bce8:	e01a      	b.n	801bd20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bcea:	4b09      	ldr	r3, [pc, #36]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	4a08      	ldr	r2, [pc, #32]	; (801bd10 <HAL_RCC_OscConfig+0x244>)
 801bcf0:	f023 0301 	bic.w	r3, r3, #1
 801bcf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcf6:	f7fa f8ef 	bl	8015ed8 <HAL_GetTick>
 801bcfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bcfc:	e00a      	b.n	801bd14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bcfe:	f7fa f8eb 	bl	8015ed8 <HAL_GetTick>
 801bd02:	4602      	mov	r2, r0
 801bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd06:	1ad3      	subs	r3, r2, r3
 801bd08:	2b02      	cmp	r3, #2
 801bd0a:	d903      	bls.n	801bd14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801bd0c:	2303      	movs	r3, #3
 801bd0e:	e2af      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
 801bd10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bd14:	4b96      	ldr	r3, [pc, #600]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	f003 0304 	and.w	r3, r3, #4
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d1ee      	bne.n	801bcfe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	f003 0310 	and.w	r3, r3, #16
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d06a      	beq.n	801be02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd2c:	4b90      	ldr	r3, [pc, #576]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd2e:	691b      	ldr	r3, [r3, #16]
 801bd30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bd34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bd36:	4b8e      	ldr	r3, [pc, #568]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801bd3c:	69bb      	ldr	r3, [r7, #24]
 801bd3e:	2b08      	cmp	r3, #8
 801bd40:	d007      	beq.n	801bd52 <HAL_RCC_OscConfig+0x286>
 801bd42:	69bb      	ldr	r3, [r7, #24]
 801bd44:	2b18      	cmp	r3, #24
 801bd46:	d11b      	bne.n	801bd80 <HAL_RCC_OscConfig+0x2b4>
 801bd48:	697b      	ldr	r3, [r7, #20]
 801bd4a:	f003 0303 	and.w	r3, r3, #3
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d116      	bne.n	801bd80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bd52:	4b87      	ldr	r3, [pc, #540]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d005      	beq.n	801bd6a <HAL_RCC_OscConfig+0x29e>
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	69db      	ldr	r3, [r3, #28]
 801bd62:	2b80      	cmp	r3, #128	; 0x80
 801bd64:	d001      	beq.n	801bd6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801bd66:	2301      	movs	r3, #1
 801bd68:	e282      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bd6a:	4b81      	ldr	r3, [pc, #516]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd6c:	68db      	ldr	r3, [r3, #12]
 801bd6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	6a1b      	ldr	r3, [r3, #32]
 801bd76:	061b      	lsls	r3, r3, #24
 801bd78:	497d      	ldr	r1, [pc, #500]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd7a:	4313      	orrs	r3, r2
 801bd7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bd7e:	e040      	b.n	801be02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	69db      	ldr	r3, [r3, #28]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d023      	beq.n	801bdd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801bd88:	4b79      	ldr	r3, [pc, #484]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	4a78      	ldr	r2, [pc, #480]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd94:	f7fa f8a0 	bl	8015ed8 <HAL_GetTick>
 801bd98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bd9a:	e008      	b.n	801bdae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bd9c:	f7fa f89c 	bl	8015ed8 <HAL_GetTick>
 801bda0:	4602      	mov	r2, r0
 801bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bda4:	1ad3      	subs	r3, r2, r3
 801bda6:	2b02      	cmp	r3, #2
 801bda8:	d901      	bls.n	801bdae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801bdaa:	2303      	movs	r3, #3
 801bdac:	e260      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bdae:	4b70      	ldr	r3, [pc, #448]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d0f0      	beq.n	801bd9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bdba:	4b6d      	ldr	r3, [pc, #436]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdbc:	68db      	ldr	r3, [r3, #12]
 801bdbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	6a1b      	ldr	r3, [r3, #32]
 801bdc6:	061b      	lsls	r3, r3, #24
 801bdc8:	4969      	ldr	r1, [pc, #420]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdca:	4313      	orrs	r3, r2
 801bdcc:	60cb      	str	r3, [r1, #12]
 801bdce:	e018      	b.n	801be02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801bdd0:	4b67      	ldr	r3, [pc, #412]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	4a66      	ldr	r2, [pc, #408]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bdda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bddc:	f7fa f87c 	bl	8015ed8 <HAL_GetTick>
 801bde0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bde2:	e008      	b.n	801bdf6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bde4:	f7fa f878 	bl	8015ed8 <HAL_GetTick>
 801bde8:	4602      	mov	r2, r0
 801bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdec:	1ad3      	subs	r3, r2, r3
 801bdee:	2b02      	cmp	r3, #2
 801bdf0:	d901      	bls.n	801bdf6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801bdf2:	2303      	movs	r3, #3
 801bdf4:	e23c      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bdf6:	4b5e      	ldr	r3, [pc, #376]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d1f0      	bne.n	801bde4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	f003 0308 	and.w	r3, r3, #8
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d036      	beq.n	801be7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	695b      	ldr	r3, [r3, #20]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d019      	beq.n	801be4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801be16:	4b56      	ldr	r3, [pc, #344]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be1a:	4a55      	ldr	r2, [pc, #340]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be1c:	f043 0301 	orr.w	r3, r3, #1
 801be20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be22:	f7fa f859 	bl	8015ed8 <HAL_GetTick>
 801be26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801be28:	e008      	b.n	801be3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801be2a:	f7fa f855 	bl	8015ed8 <HAL_GetTick>
 801be2e:	4602      	mov	r2, r0
 801be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be32:	1ad3      	subs	r3, r2, r3
 801be34:	2b02      	cmp	r3, #2
 801be36:	d901      	bls.n	801be3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801be38:	2303      	movs	r3, #3
 801be3a:	e219      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801be3c:	4b4c      	ldr	r3, [pc, #304]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be40:	f003 0302 	and.w	r3, r3, #2
 801be44:	2b00      	cmp	r3, #0
 801be46:	d0f0      	beq.n	801be2a <HAL_RCC_OscConfig+0x35e>
 801be48:	e018      	b.n	801be7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801be4a:	4b49      	ldr	r3, [pc, #292]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be4e:	4a48      	ldr	r2, [pc, #288]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be50:	f023 0301 	bic.w	r3, r3, #1
 801be54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be56:	f7fa f83f 	bl	8015ed8 <HAL_GetTick>
 801be5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801be5c:	e008      	b.n	801be70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801be5e:	f7fa f83b 	bl	8015ed8 <HAL_GetTick>
 801be62:	4602      	mov	r2, r0
 801be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be66:	1ad3      	subs	r3, r2, r3
 801be68:	2b02      	cmp	r3, #2
 801be6a:	d901      	bls.n	801be70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801be6c:	2303      	movs	r3, #3
 801be6e:	e1ff      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801be70:	4b3f      	ldr	r3, [pc, #252]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be74:	f003 0302 	and.w	r3, r3, #2
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d1f0      	bne.n	801be5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	f003 0320 	and.w	r3, r3, #32
 801be84:	2b00      	cmp	r3, #0
 801be86:	d036      	beq.n	801bef6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	699b      	ldr	r3, [r3, #24]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d019      	beq.n	801bec4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801be90:	4b37      	ldr	r3, [pc, #220]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	4a36      	ldr	r2, [pc, #216]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801be96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801be9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801be9c:	f7fa f81c 	bl	8015ed8 <HAL_GetTick>
 801bea0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bea2:	e008      	b.n	801beb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bea4:	f7fa f818 	bl	8015ed8 <HAL_GetTick>
 801bea8:	4602      	mov	r2, r0
 801beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beac:	1ad3      	subs	r3, r2, r3
 801beae:	2b02      	cmp	r3, #2
 801beb0:	d901      	bls.n	801beb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801beb2:	2303      	movs	r3, #3
 801beb4:	e1dc      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801beb6:	4b2e      	ldr	r3, [pc, #184]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d0f0      	beq.n	801bea4 <HAL_RCC_OscConfig+0x3d8>
 801bec2:	e018      	b.n	801bef6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801bec4:	4b2a      	ldr	r3, [pc, #168]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	4a29      	ldr	r2, [pc, #164]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801beca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bece:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bed0:	f7fa f802 	bl	8015ed8 <HAL_GetTick>
 801bed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bed6:	e008      	b.n	801beea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bed8:	f7f9 fffe 	bl	8015ed8 <HAL_GetTick>
 801bedc:	4602      	mov	r2, r0
 801bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bee0:	1ad3      	subs	r3, r2, r3
 801bee2:	2b02      	cmp	r3, #2
 801bee4:	d901      	bls.n	801beea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801bee6:	2303      	movs	r3, #3
 801bee8:	e1c2      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801beea:	4b21      	ldr	r3, [pc, #132]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d1f0      	bne.n	801bed8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	f003 0304 	and.w	r3, r3, #4
 801befe:	2b00      	cmp	r3, #0
 801bf00:	f000 8086 	beq.w	801c010 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801bf04:	4b1b      	ldr	r3, [pc, #108]	; (801bf74 <HAL_RCC_OscConfig+0x4a8>)
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	4a1a      	ldr	r2, [pc, #104]	; (801bf74 <HAL_RCC_OscConfig+0x4a8>)
 801bf0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bf10:	f7f9 ffe2 	bl	8015ed8 <HAL_GetTick>
 801bf14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bf16:	e008      	b.n	801bf2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bf18:	f7f9 ffde 	bl	8015ed8 <HAL_GetTick>
 801bf1c:	4602      	mov	r2, r0
 801bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf20:	1ad3      	subs	r3, r2, r3
 801bf22:	2b64      	cmp	r3, #100	; 0x64
 801bf24:	d901      	bls.n	801bf2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801bf26:	2303      	movs	r3, #3
 801bf28:	e1a2      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bf2a:	4b12      	ldr	r3, [pc, #72]	; (801bf74 <HAL_RCC_OscConfig+0x4a8>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d0f0      	beq.n	801bf18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	689b      	ldr	r3, [r3, #8]
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d106      	bne.n	801bf4c <HAL_RCC_OscConfig+0x480>
 801bf3e:	4b0c      	ldr	r3, [pc, #48]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf42:	4a0b      	ldr	r2, [pc, #44]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf44:	f043 0301 	orr.w	r3, r3, #1
 801bf48:	6713      	str	r3, [r2, #112]	; 0x70
 801bf4a:	e032      	b.n	801bfb2 <HAL_RCC_OscConfig+0x4e6>
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	689b      	ldr	r3, [r3, #8]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d111      	bne.n	801bf78 <HAL_RCC_OscConfig+0x4ac>
 801bf54:	4b06      	ldr	r3, [pc, #24]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf58:	4a05      	ldr	r2, [pc, #20]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf5a:	f023 0301 	bic.w	r3, r3, #1
 801bf5e:	6713      	str	r3, [r2, #112]	; 0x70
 801bf60:	4b03      	ldr	r3, [pc, #12]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf64:	4a02      	ldr	r2, [pc, #8]	; (801bf70 <HAL_RCC_OscConfig+0x4a4>)
 801bf66:	f023 0304 	bic.w	r3, r3, #4
 801bf6a:	6713      	str	r3, [r2, #112]	; 0x70
 801bf6c:	e021      	b.n	801bfb2 <HAL_RCC_OscConfig+0x4e6>
 801bf6e:	bf00      	nop
 801bf70:	58024400 	.word	0x58024400
 801bf74:	58024800 	.word	0x58024800
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	689b      	ldr	r3, [r3, #8]
 801bf7c:	2b05      	cmp	r3, #5
 801bf7e:	d10c      	bne.n	801bf9a <HAL_RCC_OscConfig+0x4ce>
 801bf80:	4b83      	ldr	r3, [pc, #524]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf84:	4a82      	ldr	r2, [pc, #520]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bf86:	f043 0304 	orr.w	r3, r3, #4
 801bf8a:	6713      	str	r3, [r2, #112]	; 0x70
 801bf8c:	4b80      	ldr	r3, [pc, #512]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf90:	4a7f      	ldr	r2, [pc, #508]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bf92:	f043 0301 	orr.w	r3, r3, #1
 801bf96:	6713      	str	r3, [r2, #112]	; 0x70
 801bf98:	e00b      	b.n	801bfb2 <HAL_RCC_OscConfig+0x4e6>
 801bf9a:	4b7d      	ldr	r3, [pc, #500]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf9e:	4a7c      	ldr	r2, [pc, #496]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bfa0:	f023 0301 	bic.w	r3, r3, #1
 801bfa4:	6713      	str	r3, [r2, #112]	; 0x70
 801bfa6:	4b7a      	ldr	r3, [pc, #488]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bfaa:	4a79      	ldr	r2, [pc, #484]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bfac:	f023 0304 	bic.w	r3, r3, #4
 801bfb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	689b      	ldr	r3, [r3, #8]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d015      	beq.n	801bfe6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bfba:	f7f9 ff8d 	bl	8015ed8 <HAL_GetTick>
 801bfbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfc0:	e00a      	b.n	801bfd8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bfc2:	f7f9 ff89 	bl	8015ed8 <HAL_GetTick>
 801bfc6:	4602      	mov	r2, r0
 801bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfca:	1ad3      	subs	r3, r2, r3
 801bfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	d901      	bls.n	801bfd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801bfd4:	2303      	movs	r3, #3
 801bfd6:	e14b      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfd8:	4b6d      	ldr	r3, [pc, #436]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801bfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bfdc:	f003 0302 	and.w	r3, r3, #2
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d0ee      	beq.n	801bfc2 <HAL_RCC_OscConfig+0x4f6>
 801bfe4:	e014      	b.n	801c010 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bfe6:	f7f9 ff77 	bl	8015ed8 <HAL_GetTick>
 801bfea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bfec:	e00a      	b.n	801c004 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bfee:	f7f9 ff73 	bl	8015ed8 <HAL_GetTick>
 801bff2:	4602      	mov	r2, r0
 801bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bff6:	1ad3      	subs	r3, r2, r3
 801bff8:	f241 3288 	movw	r2, #5000	; 0x1388
 801bffc:	4293      	cmp	r3, r2
 801bffe:	d901      	bls.n	801c004 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801c000:	2303      	movs	r3, #3
 801c002:	e135      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c004:	4b62      	ldr	r3, [pc, #392]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c008:	f003 0302 	and.w	r3, r3, #2
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d1ee      	bne.n	801bfee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c014:	2b00      	cmp	r3, #0
 801c016:	f000 812a 	beq.w	801c26e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c01a:	4b5d      	ldr	r3, [pc, #372]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c01c:	691b      	ldr	r3, [r3, #16]
 801c01e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c022:	2b18      	cmp	r3, #24
 801c024:	f000 80ba 	beq.w	801c19c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c02c:	2b02      	cmp	r3, #2
 801c02e:	f040 8095 	bne.w	801c15c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c032:	4b57      	ldr	r3, [pc, #348]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	4a56      	ldr	r2, [pc, #344]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c03c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c03e:	f7f9 ff4b 	bl	8015ed8 <HAL_GetTick>
 801c042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c044:	e008      	b.n	801c058 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c046:	f7f9 ff47 	bl	8015ed8 <HAL_GetTick>
 801c04a:	4602      	mov	r2, r0
 801c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c04e:	1ad3      	subs	r3, r2, r3
 801c050:	2b02      	cmp	r3, #2
 801c052:	d901      	bls.n	801c058 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801c054:	2303      	movs	r3, #3
 801c056:	e10b      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c058:	4b4d      	ldr	r3, [pc, #308]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c060:	2b00      	cmp	r3, #0
 801c062:	d1f0      	bne.n	801c046 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c064:	4b4a      	ldr	r3, [pc, #296]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c068:	4b4a      	ldr	r3, [pc, #296]	; (801c194 <HAL_RCC_OscConfig+0x6c8>)
 801c06a:	4013      	ands	r3, r2
 801c06c:	687a      	ldr	r2, [r7, #4]
 801c06e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801c070:	687a      	ldr	r2, [r7, #4]
 801c072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c074:	0112      	lsls	r2, r2, #4
 801c076:	430a      	orrs	r2, r1
 801c078:	4945      	ldr	r1, [pc, #276]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c07a:	4313      	orrs	r3, r2
 801c07c:	628b      	str	r3, [r1, #40]	; 0x28
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c082:	3b01      	subs	r3, #1
 801c084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c08c:	3b01      	subs	r3, #1
 801c08e:	025b      	lsls	r3, r3, #9
 801c090:	b29b      	uxth	r3, r3
 801c092:	431a      	orrs	r2, r3
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c098:	3b01      	subs	r3, #1
 801c09a:	041b      	lsls	r3, r3, #16
 801c09c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801c0a0:	431a      	orrs	r2, r3
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c0a6:	3b01      	subs	r3, #1
 801c0a8:	061b      	lsls	r3, r3, #24
 801c0aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801c0ae:	4938      	ldr	r1, [pc, #224]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0b0:	4313      	orrs	r3, r2
 801c0b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c0b4:	4b36      	ldr	r3, [pc, #216]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0b8:	4a35      	ldr	r2, [pc, #212]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0ba:	f023 0301 	bic.w	r3, r3, #1
 801c0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c0c0:	4b33      	ldr	r3, [pc, #204]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c0c4:	4b34      	ldr	r3, [pc, #208]	; (801c198 <HAL_RCC_OscConfig+0x6cc>)
 801c0c6:	4013      	ands	r3, r2
 801c0c8:	687a      	ldr	r2, [r7, #4]
 801c0ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801c0cc:	00d2      	lsls	r2, r2, #3
 801c0ce:	4930      	ldr	r1, [pc, #192]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0d0:	4313      	orrs	r3, r2
 801c0d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c0d4:	4b2e      	ldr	r3, [pc, #184]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0d8:	f023 020c 	bic.w	r2, r3, #12
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0e0:	492b      	ldr	r1, [pc, #172]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0e2:	4313      	orrs	r3, r2
 801c0e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c0e6:	4b2a      	ldr	r3, [pc, #168]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0ea:	f023 0202 	bic.w	r2, r3, #2
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0f2:	4927      	ldr	r1, [pc, #156]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0f4:	4313      	orrs	r3, r2
 801c0f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c0f8:	4b25      	ldr	r3, [pc, #148]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0fc:	4a24      	ldr	r2, [pc, #144]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c0fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c104:	4b22      	ldr	r3, [pc, #136]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c108:	4a21      	ldr	r2, [pc, #132]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c10a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c10e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c110:	4b1f      	ldr	r3, [pc, #124]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c114:	4a1e      	ldr	r2, [pc, #120]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c11a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c11c:	4b1c      	ldr	r3, [pc, #112]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c120:	4a1b      	ldr	r2, [pc, #108]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c122:	f043 0301 	orr.w	r3, r3, #1
 801c126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c128:	4b19      	ldr	r3, [pc, #100]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	4a18      	ldr	r2, [pc, #96]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c12e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c134:	f7f9 fed0 	bl	8015ed8 <HAL_GetTick>
 801c138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c13a:	e008      	b.n	801c14e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c13c:	f7f9 fecc 	bl	8015ed8 <HAL_GetTick>
 801c140:	4602      	mov	r2, r0
 801c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c144:	1ad3      	subs	r3, r2, r3
 801c146:	2b02      	cmp	r3, #2
 801c148:	d901      	bls.n	801c14e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801c14a:	2303      	movs	r3, #3
 801c14c:	e090      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c14e:	4b10      	ldr	r3, [pc, #64]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c156:	2b00      	cmp	r3, #0
 801c158:	d0f0      	beq.n	801c13c <HAL_RCC_OscConfig+0x670>
 801c15a:	e088      	b.n	801c26e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c15c:	4b0c      	ldr	r3, [pc, #48]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a0b      	ldr	r2, [pc, #44]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c168:	f7f9 feb6 	bl	8015ed8 <HAL_GetTick>
 801c16c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c16e:	e008      	b.n	801c182 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c170:	f7f9 feb2 	bl	8015ed8 <HAL_GetTick>
 801c174:	4602      	mov	r2, r0
 801c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c178:	1ad3      	subs	r3, r2, r3
 801c17a:	2b02      	cmp	r3, #2
 801c17c:	d901      	bls.n	801c182 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801c17e:	2303      	movs	r3, #3
 801c180:	e076      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c182:	4b03      	ldr	r3, [pc, #12]	; (801c190 <HAL_RCC_OscConfig+0x6c4>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d1f0      	bne.n	801c170 <HAL_RCC_OscConfig+0x6a4>
 801c18e:	e06e      	b.n	801c26e <HAL_RCC_OscConfig+0x7a2>
 801c190:	58024400 	.word	0x58024400
 801c194:	fffffc0c 	.word	0xfffffc0c
 801c198:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c19c:	4b36      	ldr	r3, [pc, #216]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c1a2:	4b35      	ldr	r3, [pc, #212]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1ac:	2b01      	cmp	r3, #1
 801c1ae:	d031      	beq.n	801c214 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1b0:	693b      	ldr	r3, [r7, #16]
 801c1b2:	f003 0203 	and.w	r2, r3, #3
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	d12a      	bne.n	801c214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c1be:	693b      	ldr	r3, [r7, #16]
 801c1c0:	091b      	lsrs	r3, r3, #4
 801c1c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d122      	bne.n	801c214 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	d11a      	bne.n	801c214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	0a5b      	lsrs	r3, r3, #9
 801c1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c1ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	d111      	bne.n	801c214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	0c1b      	lsrs	r3, r3, #16
 801c1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c1fe:	429a      	cmp	r2, r3
 801c200:	d108      	bne.n	801c214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	0e1b      	lsrs	r3, r3, #24
 801c206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c20e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c210:	429a      	cmp	r2, r3
 801c212:	d001      	beq.n	801c218 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801c214:	2301      	movs	r3, #1
 801c216:	e02b      	b.n	801c270 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c218:	4b17      	ldr	r3, [pc, #92]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c21c:	08db      	lsrs	r3, r3, #3
 801c21e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c222:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c228:	693a      	ldr	r2, [r7, #16]
 801c22a:	429a      	cmp	r2, r3
 801c22c:	d01f      	beq.n	801c26e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c22e:	4b12      	ldr	r3, [pc, #72]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c232:	4a11      	ldr	r2, [pc, #68]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c234:	f023 0301 	bic.w	r3, r3, #1
 801c238:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c23a:	f7f9 fe4d 	bl	8015ed8 <HAL_GetTick>
 801c23e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c240:	bf00      	nop
 801c242:	f7f9 fe49 	bl	8015ed8 <HAL_GetTick>
 801c246:	4602      	mov	r2, r0
 801c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d0f9      	beq.n	801c242 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c24e:	4b0a      	ldr	r3, [pc, #40]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c252:	4b0a      	ldr	r3, [pc, #40]	; (801c27c <HAL_RCC_OscConfig+0x7b0>)
 801c254:	4013      	ands	r3, r2
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801c25a:	00d2      	lsls	r2, r2, #3
 801c25c:	4906      	ldr	r1, [pc, #24]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c25e:	4313      	orrs	r3, r2
 801c260:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c262:	4b05      	ldr	r3, [pc, #20]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c266:	4a04      	ldr	r2, [pc, #16]	; (801c278 <HAL_RCC_OscConfig+0x7ac>)
 801c268:	f043 0301 	orr.w	r3, r3, #1
 801c26c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c26e:	2300      	movs	r3, #0
}
 801c270:	4618      	mov	r0, r3
 801c272:	3730      	adds	r7, #48	; 0x30
 801c274:	46bd      	mov	sp, r7
 801c276:	bd80      	pop	{r7, pc}
 801c278:	58024400 	.word	0x58024400
 801c27c:	ffff0007 	.word	0xffff0007

0801c280 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b086      	sub	sp, #24
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d101      	bne.n	801c294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c290:	2301      	movs	r3, #1
 801c292:	e19c      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c294:	4b8a      	ldr	r3, [pc, #552]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	f003 030f 	and.w	r3, r3, #15
 801c29c:	683a      	ldr	r2, [r7, #0]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d910      	bls.n	801c2c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c2a2:	4b87      	ldr	r3, [pc, #540]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	f023 020f 	bic.w	r2, r3, #15
 801c2aa:	4985      	ldr	r1, [pc, #532]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	4313      	orrs	r3, r2
 801c2b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c2b2:	4b83      	ldr	r3, [pc, #524]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	f003 030f 	and.w	r3, r3, #15
 801c2ba:	683a      	ldr	r2, [r7, #0]
 801c2bc:	429a      	cmp	r2, r3
 801c2be:	d001      	beq.n	801c2c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c2c0:	2301      	movs	r3, #1
 801c2c2:	e184      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	f003 0304 	and.w	r3, r3, #4
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d010      	beq.n	801c2f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	691a      	ldr	r2, [r3, #16]
 801c2d4:	4b7b      	ldr	r3, [pc, #492]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c2d6:	699b      	ldr	r3, [r3, #24]
 801c2d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c2dc:	429a      	cmp	r2, r3
 801c2de:	d908      	bls.n	801c2f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c2e0:	4b78      	ldr	r3, [pc, #480]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c2e2:	699b      	ldr	r3, [r3, #24]
 801c2e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	691b      	ldr	r3, [r3, #16]
 801c2ec:	4975      	ldr	r1, [pc, #468]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c2ee:	4313      	orrs	r3, r2
 801c2f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	f003 0308 	and.w	r3, r3, #8
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d010      	beq.n	801c320 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	695a      	ldr	r2, [r3, #20]
 801c302:	4b70      	ldr	r3, [pc, #448]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c304:	69db      	ldr	r3, [r3, #28]
 801c306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c30a:	429a      	cmp	r2, r3
 801c30c:	d908      	bls.n	801c320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c30e:	4b6d      	ldr	r3, [pc, #436]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c310:	69db      	ldr	r3, [r3, #28]
 801c312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	695b      	ldr	r3, [r3, #20]
 801c31a:	496a      	ldr	r1, [pc, #424]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c31c:	4313      	orrs	r3, r2
 801c31e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	f003 0310 	and.w	r3, r3, #16
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d010      	beq.n	801c34e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	699a      	ldr	r2, [r3, #24]
 801c330:	4b64      	ldr	r3, [pc, #400]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c332:	69db      	ldr	r3, [r3, #28]
 801c334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c338:	429a      	cmp	r2, r3
 801c33a:	d908      	bls.n	801c34e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c33c:	4b61      	ldr	r3, [pc, #388]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c33e:	69db      	ldr	r3, [r3, #28]
 801c340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	699b      	ldr	r3, [r3, #24]
 801c348:	495e      	ldr	r1, [pc, #376]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c34a:	4313      	orrs	r3, r2
 801c34c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	f003 0320 	and.w	r3, r3, #32
 801c356:	2b00      	cmp	r3, #0
 801c358:	d010      	beq.n	801c37c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	69da      	ldr	r2, [r3, #28]
 801c35e:	4b59      	ldr	r3, [pc, #356]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c360:	6a1b      	ldr	r3, [r3, #32]
 801c362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c366:	429a      	cmp	r2, r3
 801c368:	d908      	bls.n	801c37c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c36a:	4b56      	ldr	r3, [pc, #344]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c36c:	6a1b      	ldr	r3, [r3, #32]
 801c36e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	69db      	ldr	r3, [r3, #28]
 801c376:	4953      	ldr	r1, [pc, #332]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c378:	4313      	orrs	r3, r2
 801c37a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	f003 0302 	and.w	r3, r3, #2
 801c384:	2b00      	cmp	r3, #0
 801c386:	d010      	beq.n	801c3aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	68da      	ldr	r2, [r3, #12]
 801c38c:	4b4d      	ldr	r3, [pc, #308]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c38e:	699b      	ldr	r3, [r3, #24]
 801c390:	f003 030f 	and.w	r3, r3, #15
 801c394:	429a      	cmp	r2, r3
 801c396:	d908      	bls.n	801c3aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c398:	4b4a      	ldr	r3, [pc, #296]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c39a:	699b      	ldr	r3, [r3, #24]
 801c39c:	f023 020f 	bic.w	r2, r3, #15
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	68db      	ldr	r3, [r3, #12]
 801c3a4:	4947      	ldr	r1, [pc, #284]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c3a6:	4313      	orrs	r3, r2
 801c3a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	f003 0301 	and.w	r3, r3, #1
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d055      	beq.n	801c462 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c3b6:	4b43      	ldr	r3, [pc, #268]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c3b8:	699b      	ldr	r3, [r3, #24]
 801c3ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	689b      	ldr	r3, [r3, #8]
 801c3c2:	4940      	ldr	r1, [pc, #256]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c3c4:	4313      	orrs	r3, r2
 801c3c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	685b      	ldr	r3, [r3, #4]
 801c3cc:	2b02      	cmp	r3, #2
 801c3ce:	d107      	bne.n	801c3e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c3d0:	4b3c      	ldr	r3, [pc, #240]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d121      	bne.n	801c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c3dc:	2301      	movs	r3, #1
 801c3de:	e0f6      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	2b03      	cmp	r3, #3
 801c3e6:	d107      	bne.n	801c3f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c3e8:	4b36      	ldr	r3, [pc, #216]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d115      	bne.n	801c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c3f4:	2301      	movs	r3, #1
 801c3f6:	e0ea      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	685b      	ldr	r3, [r3, #4]
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	d107      	bne.n	801c410 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c400:	4b30      	ldr	r3, [pc, #192]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d109      	bne.n	801c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c40c:	2301      	movs	r3, #1
 801c40e:	e0de      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c410:	4b2c      	ldr	r3, [pc, #176]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	f003 0304 	and.w	r3, r3, #4
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d101      	bne.n	801c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c41c:	2301      	movs	r3, #1
 801c41e:	e0d6      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c420:	4b28      	ldr	r3, [pc, #160]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c422:	691b      	ldr	r3, [r3, #16]
 801c424:	f023 0207 	bic.w	r2, r3, #7
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	685b      	ldr	r3, [r3, #4]
 801c42c:	4925      	ldr	r1, [pc, #148]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c42e:	4313      	orrs	r3, r2
 801c430:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c432:	f7f9 fd51 	bl	8015ed8 <HAL_GetTick>
 801c436:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c438:	e00a      	b.n	801c450 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c43a:	f7f9 fd4d 	bl	8015ed8 <HAL_GetTick>
 801c43e:	4602      	mov	r2, r0
 801c440:	697b      	ldr	r3, [r7, #20]
 801c442:	1ad3      	subs	r3, r2, r3
 801c444:	f241 3288 	movw	r2, #5000	; 0x1388
 801c448:	4293      	cmp	r3, r2
 801c44a:	d901      	bls.n	801c450 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c44c:	2303      	movs	r3, #3
 801c44e:	e0be      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c450:	4b1c      	ldr	r3, [pc, #112]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c452:	691b      	ldr	r3, [r3, #16]
 801c454:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	685b      	ldr	r3, [r3, #4]
 801c45c:	00db      	lsls	r3, r3, #3
 801c45e:	429a      	cmp	r2, r3
 801c460:	d1eb      	bne.n	801c43a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	f003 0302 	and.w	r3, r3, #2
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d010      	beq.n	801c490 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	68da      	ldr	r2, [r3, #12]
 801c472:	4b14      	ldr	r3, [pc, #80]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c474:	699b      	ldr	r3, [r3, #24]
 801c476:	f003 030f 	and.w	r3, r3, #15
 801c47a:	429a      	cmp	r2, r3
 801c47c:	d208      	bcs.n	801c490 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c47e:	4b11      	ldr	r3, [pc, #68]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c480:	699b      	ldr	r3, [r3, #24]
 801c482:	f023 020f 	bic.w	r2, r3, #15
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	68db      	ldr	r3, [r3, #12]
 801c48a:	490e      	ldr	r1, [pc, #56]	; (801c4c4 <HAL_RCC_ClockConfig+0x244>)
 801c48c:	4313      	orrs	r3, r2
 801c48e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c490:	4b0b      	ldr	r3, [pc, #44]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	f003 030f 	and.w	r3, r3, #15
 801c498:	683a      	ldr	r2, [r7, #0]
 801c49a:	429a      	cmp	r2, r3
 801c49c:	d214      	bcs.n	801c4c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c49e:	4b08      	ldr	r3, [pc, #32]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	f023 020f 	bic.w	r2, r3, #15
 801c4a6:	4906      	ldr	r1, [pc, #24]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	4313      	orrs	r3, r2
 801c4ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c4ae:	4b04      	ldr	r3, [pc, #16]	; (801c4c0 <HAL_RCC_ClockConfig+0x240>)
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	f003 030f 	and.w	r3, r3, #15
 801c4b6:	683a      	ldr	r2, [r7, #0]
 801c4b8:	429a      	cmp	r2, r3
 801c4ba:	d005      	beq.n	801c4c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c4bc:	2301      	movs	r3, #1
 801c4be:	e086      	b.n	801c5ce <HAL_RCC_ClockConfig+0x34e>
 801c4c0:	52002000 	.word	0x52002000
 801c4c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f003 0304 	and.w	r3, r3, #4
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d010      	beq.n	801c4f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	691a      	ldr	r2, [r3, #16]
 801c4d8:	4b3f      	ldr	r3, [pc, #252]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c4da:	699b      	ldr	r3, [r3, #24]
 801c4dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d208      	bcs.n	801c4f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c4e4:	4b3c      	ldr	r3, [pc, #240]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c4e6:	699b      	ldr	r3, [r3, #24]
 801c4e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	691b      	ldr	r3, [r3, #16]
 801c4f0:	4939      	ldr	r1, [pc, #228]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c4f2:	4313      	orrs	r3, r2
 801c4f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	f003 0308 	and.w	r3, r3, #8
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d010      	beq.n	801c524 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	695a      	ldr	r2, [r3, #20]
 801c506:	4b34      	ldr	r3, [pc, #208]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c508:	69db      	ldr	r3, [r3, #28]
 801c50a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c50e:	429a      	cmp	r2, r3
 801c510:	d208      	bcs.n	801c524 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c512:	4b31      	ldr	r3, [pc, #196]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c514:	69db      	ldr	r3, [r3, #28]
 801c516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	695b      	ldr	r3, [r3, #20]
 801c51e:	492e      	ldr	r1, [pc, #184]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c520:	4313      	orrs	r3, r2
 801c522:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	f003 0310 	and.w	r3, r3, #16
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d010      	beq.n	801c552 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	699a      	ldr	r2, [r3, #24]
 801c534:	4b28      	ldr	r3, [pc, #160]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c536:	69db      	ldr	r3, [r3, #28]
 801c538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c53c:	429a      	cmp	r2, r3
 801c53e:	d208      	bcs.n	801c552 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c540:	4b25      	ldr	r3, [pc, #148]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c542:	69db      	ldr	r3, [r3, #28]
 801c544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	699b      	ldr	r3, [r3, #24]
 801c54c:	4922      	ldr	r1, [pc, #136]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c54e:	4313      	orrs	r3, r2
 801c550:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	f003 0320 	and.w	r3, r3, #32
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d010      	beq.n	801c580 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	69da      	ldr	r2, [r3, #28]
 801c562:	4b1d      	ldr	r3, [pc, #116]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c564:	6a1b      	ldr	r3, [r3, #32]
 801c566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d208      	bcs.n	801c580 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c56e:	4b1a      	ldr	r3, [pc, #104]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c570:	6a1b      	ldr	r3, [r3, #32]
 801c572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	69db      	ldr	r3, [r3, #28]
 801c57a:	4917      	ldr	r1, [pc, #92]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c57c:	4313      	orrs	r3, r2
 801c57e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c580:	f000 f834 	bl	801c5ec <HAL_RCC_GetSysClockFreq>
 801c584:	4602      	mov	r2, r0
 801c586:	4b14      	ldr	r3, [pc, #80]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c588:	699b      	ldr	r3, [r3, #24]
 801c58a:	0a1b      	lsrs	r3, r3, #8
 801c58c:	f003 030f 	and.w	r3, r3, #15
 801c590:	4912      	ldr	r1, [pc, #72]	; (801c5dc <HAL_RCC_ClockConfig+0x35c>)
 801c592:	5ccb      	ldrb	r3, [r1, r3]
 801c594:	f003 031f 	and.w	r3, r3, #31
 801c598:	fa22 f303 	lsr.w	r3, r2, r3
 801c59c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c59e:	4b0e      	ldr	r3, [pc, #56]	; (801c5d8 <HAL_RCC_ClockConfig+0x358>)
 801c5a0:	699b      	ldr	r3, [r3, #24]
 801c5a2:	f003 030f 	and.w	r3, r3, #15
 801c5a6:	4a0d      	ldr	r2, [pc, #52]	; (801c5dc <HAL_RCC_ClockConfig+0x35c>)
 801c5a8:	5cd3      	ldrb	r3, [r2, r3]
 801c5aa:	f003 031f 	and.w	r3, r3, #31
 801c5ae:	693a      	ldr	r2, [r7, #16]
 801c5b0:	fa22 f303 	lsr.w	r3, r2, r3
 801c5b4:	4a0a      	ldr	r2, [pc, #40]	; (801c5e0 <HAL_RCC_ClockConfig+0x360>)
 801c5b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c5b8:	4a0a      	ldr	r2, [pc, #40]	; (801c5e4 <HAL_RCC_ClockConfig+0x364>)
 801c5ba:	693b      	ldr	r3, [r7, #16]
 801c5bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c5be:	4b0a      	ldr	r3, [pc, #40]	; (801c5e8 <HAL_RCC_ClockConfig+0x368>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7f9 fc3e 	bl	8015e44 <HAL_InitTick>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	3718      	adds	r7, #24
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	bd80      	pop	{r7, pc}
 801c5d6:	bf00      	nop
 801c5d8:	58024400 	.word	0x58024400
 801c5dc:	080218c4 	.word	0x080218c4
 801c5e0:	24000008 	.word	0x24000008
 801c5e4:	24000004 	.word	0x24000004
 801c5e8:	2400000c 	.word	0x2400000c

0801c5ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c5ec:	b480      	push	{r7}
 801c5ee:	b089      	sub	sp, #36	; 0x24
 801c5f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c5f2:	4bb3      	ldr	r3, [pc, #716]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c5f4:	691b      	ldr	r3, [r3, #16]
 801c5f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c5fa:	2b18      	cmp	r3, #24
 801c5fc:	f200 8155 	bhi.w	801c8aa <HAL_RCC_GetSysClockFreq+0x2be>
 801c600:	a201      	add	r2, pc, #4	; (adr r2, 801c608 <HAL_RCC_GetSysClockFreq+0x1c>)
 801c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c606:	bf00      	nop
 801c608:	0801c66d 	.word	0x0801c66d
 801c60c:	0801c8ab 	.word	0x0801c8ab
 801c610:	0801c8ab 	.word	0x0801c8ab
 801c614:	0801c8ab 	.word	0x0801c8ab
 801c618:	0801c8ab 	.word	0x0801c8ab
 801c61c:	0801c8ab 	.word	0x0801c8ab
 801c620:	0801c8ab 	.word	0x0801c8ab
 801c624:	0801c8ab 	.word	0x0801c8ab
 801c628:	0801c693 	.word	0x0801c693
 801c62c:	0801c8ab 	.word	0x0801c8ab
 801c630:	0801c8ab 	.word	0x0801c8ab
 801c634:	0801c8ab 	.word	0x0801c8ab
 801c638:	0801c8ab 	.word	0x0801c8ab
 801c63c:	0801c8ab 	.word	0x0801c8ab
 801c640:	0801c8ab 	.word	0x0801c8ab
 801c644:	0801c8ab 	.word	0x0801c8ab
 801c648:	0801c699 	.word	0x0801c699
 801c64c:	0801c8ab 	.word	0x0801c8ab
 801c650:	0801c8ab 	.word	0x0801c8ab
 801c654:	0801c8ab 	.word	0x0801c8ab
 801c658:	0801c8ab 	.word	0x0801c8ab
 801c65c:	0801c8ab 	.word	0x0801c8ab
 801c660:	0801c8ab 	.word	0x0801c8ab
 801c664:	0801c8ab 	.word	0x0801c8ab
 801c668:	0801c69f 	.word	0x0801c69f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c66c:	4b94      	ldr	r3, [pc, #592]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	f003 0320 	and.w	r3, r3, #32
 801c674:	2b00      	cmp	r3, #0
 801c676:	d009      	beq.n	801c68c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c678:	4b91      	ldr	r3, [pc, #580]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	08db      	lsrs	r3, r3, #3
 801c67e:	f003 0303 	and.w	r3, r3, #3
 801c682:	4a90      	ldr	r2, [pc, #576]	; (801c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c684:	fa22 f303 	lsr.w	r3, r2, r3
 801c688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c68a:	e111      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c68c:	4b8d      	ldr	r3, [pc, #564]	; (801c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c68e:	61bb      	str	r3, [r7, #24]
      break;
 801c690:	e10e      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c692:	4b8d      	ldr	r3, [pc, #564]	; (801c8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c694:	61bb      	str	r3, [r7, #24]
      break;
 801c696:	e10b      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c698:	4b8c      	ldr	r3, [pc, #560]	; (801c8cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c69a:	61bb      	str	r3, [r7, #24]
      break;
 801c69c:	e108      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c69e:	4b88      	ldr	r3, [pc, #544]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6a2:	f003 0303 	and.w	r3, r3, #3
 801c6a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c6a8:	4b85      	ldr	r3, [pc, #532]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6ac:	091b      	lsrs	r3, r3, #4
 801c6ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c6b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c6b4:	4b82      	ldr	r3, [pc, #520]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6b8:	f003 0301 	and.w	r3, r3, #1
 801c6bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c6be:	4b80      	ldr	r3, [pc, #512]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6c2:	08db      	lsrs	r3, r3, #3
 801c6c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c6c8:	68fa      	ldr	r2, [r7, #12]
 801c6ca:	fb02 f303 	mul.w	r3, r2, r3
 801c6ce:	ee07 3a90 	vmov	s15, r3
 801c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c6d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c6da:	693b      	ldr	r3, [r7, #16]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	f000 80e1 	beq.w	801c8a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	2b02      	cmp	r3, #2
 801c6e6:	f000 8083 	beq.w	801c7f0 <HAL_RCC_GetSysClockFreq+0x204>
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	2b02      	cmp	r3, #2
 801c6ee:	f200 80a1 	bhi.w	801c834 <HAL_RCC_GetSysClockFreq+0x248>
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d003      	beq.n	801c700 <HAL_RCC_GetSysClockFreq+0x114>
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	2b01      	cmp	r3, #1
 801c6fc:	d056      	beq.n	801c7ac <HAL_RCC_GetSysClockFreq+0x1c0>
 801c6fe:	e099      	b.n	801c834 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c700:	4b6f      	ldr	r3, [pc, #444]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	f003 0320 	and.w	r3, r3, #32
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d02d      	beq.n	801c768 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c70c:	4b6c      	ldr	r3, [pc, #432]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	08db      	lsrs	r3, r3, #3
 801c712:	f003 0303 	and.w	r3, r3, #3
 801c716:	4a6b      	ldr	r2, [pc, #428]	; (801c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c718:	fa22 f303 	lsr.w	r3, r2, r3
 801c71c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	ee07 3a90 	vmov	s15, r3
 801c724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c728:	693b      	ldr	r3, [r7, #16]
 801c72a:	ee07 3a90 	vmov	s15, r3
 801c72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c736:	4b62      	ldr	r3, [pc, #392]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c73e:	ee07 3a90 	vmov	s15, r3
 801c742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c746:	ed97 6a02 	vldr	s12, [r7, #8]
 801c74a:	eddf 5a61 	vldr	s11, [pc, #388]	; 801c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c762:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c766:	e087      	b.n	801c878 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c768:	693b      	ldr	r3, [r7, #16]
 801c76a:	ee07 3a90 	vmov	s15, r3
 801c76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c772:	eddf 6a58 	vldr	s13, [pc, #352]	; 801c8d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 801c776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c77a:	4b51      	ldr	r3, [pc, #324]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c782:	ee07 3a90 	vmov	s15, r3
 801c786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c78a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c78e:	eddf 5a50 	vldr	s11, [pc, #320]	; 801c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c7aa:	e065      	b.n	801c878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	ee07 3a90 	vmov	s15, r3
 801c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 801c8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c7be:	4b40      	ldr	r3, [pc, #256]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c7c6:	ee07 3a90 	vmov	s15, r3
 801c7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 801c7d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c7ee:	e043      	b.n	801c878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c7f0:	693b      	ldr	r3, [r7, #16]
 801c7f2:	ee07 3a90 	vmov	s15, r3
 801c7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 801c8dc <HAL_RCC_GetSysClockFreq+0x2f0>
 801c7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c802:	4b2f      	ldr	r3, [pc, #188]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c80a:	ee07 3a90 	vmov	s15, r3
 801c80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c812:	ed97 6a02 	vldr	s12, [r7, #8]
 801c816:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c832:	e021      	b.n	801c878 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c834:	693b      	ldr	r3, [r7, #16]
 801c836:	ee07 3a90 	vmov	s15, r3
 801c83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c83e:	eddf 6a26 	vldr	s13, [pc, #152]	; 801c8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c846:	4b1e      	ldr	r3, [pc, #120]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c84e:	ee07 3a90 	vmov	s15, r3
 801c852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c856:	ed97 6a02 	vldr	s12, [r7, #8]
 801c85a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c876:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c878:	4b11      	ldr	r3, [pc, #68]	; (801c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c87c:	0a5b      	lsrs	r3, r3, #9
 801c87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c882:	3301      	adds	r3, #1
 801c884:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c886:	683b      	ldr	r3, [r7, #0]
 801c888:	ee07 3a90 	vmov	s15, r3
 801c88c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c890:	edd7 6a07 	vldr	s13, [r7, #28]
 801c894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c89c:	ee17 3a90 	vmov	r3, s15
 801c8a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c8a2:	e005      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c8a4:	2300      	movs	r3, #0
 801c8a6:	61bb      	str	r3, [r7, #24]
      break;
 801c8a8:	e002      	b.n	801c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c8aa:	4b07      	ldr	r3, [pc, #28]	; (801c8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c8ac:	61bb      	str	r3, [r7, #24]
      break;
 801c8ae:	bf00      	nop
  }

  return sysclockfreq;
 801c8b0:	69bb      	ldr	r3, [r7, #24]
}
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	3724      	adds	r7, #36	; 0x24
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8bc:	4770      	bx	lr
 801c8be:	bf00      	nop
 801c8c0:	58024400 	.word	0x58024400
 801c8c4:	03d09000 	.word	0x03d09000
 801c8c8:	003d0900 	.word	0x003d0900
 801c8cc:	007a1200 	.word	0x007a1200
 801c8d0:	46000000 	.word	0x46000000
 801c8d4:	4c742400 	.word	0x4c742400
 801c8d8:	4a742400 	.word	0x4a742400
 801c8dc:	4af42400 	.word	0x4af42400

0801c8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b082      	sub	sp, #8
 801c8e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c8e6:	f7ff fe81 	bl	801c5ec <HAL_RCC_GetSysClockFreq>
 801c8ea:	4602      	mov	r2, r0
 801c8ec:	4b10      	ldr	r3, [pc, #64]	; (801c930 <HAL_RCC_GetHCLKFreq+0x50>)
 801c8ee:	699b      	ldr	r3, [r3, #24]
 801c8f0:	0a1b      	lsrs	r3, r3, #8
 801c8f2:	f003 030f 	and.w	r3, r3, #15
 801c8f6:	490f      	ldr	r1, [pc, #60]	; (801c934 <HAL_RCC_GetHCLKFreq+0x54>)
 801c8f8:	5ccb      	ldrb	r3, [r1, r3]
 801c8fa:	f003 031f 	and.w	r3, r3, #31
 801c8fe:	fa22 f303 	lsr.w	r3, r2, r3
 801c902:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c904:	4b0a      	ldr	r3, [pc, #40]	; (801c930 <HAL_RCC_GetHCLKFreq+0x50>)
 801c906:	699b      	ldr	r3, [r3, #24]
 801c908:	f003 030f 	and.w	r3, r3, #15
 801c90c:	4a09      	ldr	r2, [pc, #36]	; (801c934 <HAL_RCC_GetHCLKFreq+0x54>)
 801c90e:	5cd3      	ldrb	r3, [r2, r3]
 801c910:	f003 031f 	and.w	r3, r3, #31
 801c914:	687a      	ldr	r2, [r7, #4]
 801c916:	fa22 f303 	lsr.w	r3, r2, r3
 801c91a:	4a07      	ldr	r2, [pc, #28]	; (801c938 <HAL_RCC_GetHCLKFreq+0x58>)
 801c91c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c91e:	4a07      	ldr	r2, [pc, #28]	; (801c93c <HAL_RCC_GetHCLKFreq+0x5c>)
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c924:	4b04      	ldr	r3, [pc, #16]	; (801c938 <HAL_RCC_GetHCLKFreq+0x58>)
 801c926:	681b      	ldr	r3, [r3, #0]
}
 801c928:	4618      	mov	r0, r3
 801c92a:	3708      	adds	r7, #8
 801c92c:	46bd      	mov	sp, r7
 801c92e:	bd80      	pop	{r7, pc}
 801c930:	58024400 	.word	0x58024400
 801c934:	080218c4 	.word	0x080218c4
 801c938:	24000008 	.word	0x24000008
 801c93c:	24000004 	.word	0x24000004

0801c940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c944:	f7ff ffcc 	bl	801c8e0 <HAL_RCC_GetHCLKFreq>
 801c948:	4602      	mov	r2, r0
 801c94a:	4b06      	ldr	r3, [pc, #24]	; (801c964 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c94c:	69db      	ldr	r3, [r3, #28]
 801c94e:	091b      	lsrs	r3, r3, #4
 801c950:	f003 0307 	and.w	r3, r3, #7
 801c954:	4904      	ldr	r1, [pc, #16]	; (801c968 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c956:	5ccb      	ldrb	r3, [r1, r3]
 801c958:	f003 031f 	and.w	r3, r3, #31
 801c95c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c960:	4618      	mov	r0, r3
 801c962:	bd80      	pop	{r7, pc}
 801c964:	58024400 	.word	0x58024400
 801c968:	080218c4 	.word	0x080218c4

0801c96c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c970:	b0c6      	sub	sp, #280	; 0x118
 801c972:	af00      	add	r7, sp, #0
 801c974:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c978:	2300      	movs	r3, #0
 801c97a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c97e:	2300      	movs	r3, #0
 801c980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c98c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801c990:	2500      	movs	r5, #0
 801c992:	ea54 0305 	orrs.w	r3, r4, r5
 801c996:	d049      	beq.n	801ca2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801c998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c99e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c9a2:	d02f      	beq.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801c9a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c9a8:	d828      	bhi.n	801c9fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c9aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c9ae:	d01a      	beq.n	801c9e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801c9b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c9b4:	d822      	bhi.n	801c9fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d003      	beq.n	801c9c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801c9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c9be:	d007      	beq.n	801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801c9c0:	e01c      	b.n	801c9fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c9c2:	4bab      	ldr	r3, [pc, #684]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9c6:	4aaa      	ldr	r2, [pc, #680]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c9c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c9cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c9ce:	e01a      	b.n	801ca06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9d4:	3308      	adds	r3, #8
 801c9d6:	2102      	movs	r1, #2
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f002 fa49 	bl	801ee70 <RCCEx_PLL2_Config>
 801c9de:	4603      	mov	r3, r0
 801c9e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c9e4:	e00f      	b.n	801ca06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ea:	3328      	adds	r3, #40	; 0x28
 801c9ec:	2102      	movs	r1, #2
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f002 faf0 	bl	801efd4 <RCCEx_PLL3_Config>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c9fa:	e004      	b.n	801ca06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c9fc:	2301      	movs	r3, #1
 801c9fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca02:	e000      	b.n	801ca06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801ca04:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d10a      	bne.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801ca0e:	4b98      	ldr	r3, [pc, #608]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801ca10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801ca16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ca1c:	4a94      	ldr	r2, [pc, #592]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801ca1e:	430b      	orrs	r3, r1
 801ca20:	6513      	str	r3, [r2, #80]	; 0x50
 801ca22:	e003      	b.n	801ca2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ca2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca34:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801ca38:	f04f 0900 	mov.w	r9, #0
 801ca3c:	ea58 0309 	orrs.w	r3, r8, r9
 801ca40:	d047      	beq.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca48:	2b04      	cmp	r3, #4
 801ca4a:	d82a      	bhi.n	801caa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801ca4c:	a201      	add	r2, pc, #4	; (adr r2, 801ca54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca52:	bf00      	nop
 801ca54:	0801ca69 	.word	0x0801ca69
 801ca58:	0801ca77 	.word	0x0801ca77
 801ca5c:	0801ca8d 	.word	0x0801ca8d
 801ca60:	0801caab 	.word	0x0801caab
 801ca64:	0801caab 	.word	0x0801caab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca68:	4b81      	ldr	r3, [pc, #516]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca6c:	4a80      	ldr	r2, [pc, #512]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801ca6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ca72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ca74:	e01a      	b.n	801caac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca7a:	3308      	adds	r3, #8
 801ca7c:	2100      	movs	r1, #0
 801ca7e:	4618      	mov	r0, r3
 801ca80:	f002 f9f6 	bl	801ee70 <RCCEx_PLL2_Config>
 801ca84:	4603      	mov	r3, r0
 801ca86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ca8a:	e00f      	b.n	801caac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca90:	3328      	adds	r3, #40	; 0x28
 801ca92:	2100      	movs	r1, #0
 801ca94:	4618      	mov	r0, r3
 801ca96:	f002 fa9d 	bl	801efd4 <RCCEx_PLL3_Config>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801caa0:	e004      	b.n	801caac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801caa2:	2301      	movs	r3, #1
 801caa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801caa8:	e000      	b.n	801caac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801caaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801caac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d10a      	bne.n	801caca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cab4:	4b6e      	ldr	r3, [pc, #440]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cab8:	f023 0107 	bic.w	r1, r3, #7
 801cabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cac2:	4a6b      	ldr	r2, [pc, #428]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cac4:	430b      	orrs	r3, r1
 801cac6:	6513      	str	r3, [r2, #80]	; 0x50
 801cac8:	e003      	b.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801caca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cace:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cada:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801cade:	f04f 0b00 	mov.w	fp, #0
 801cae2:	ea5a 030b 	orrs.w	r3, sl, fp
 801cae6:	d05b      	beq.n	801cba0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801caf0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801caf4:	d03b      	beq.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 801caf6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801cafa:	d834      	bhi.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801cafc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cb00:	d037      	beq.n	801cb72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801cb02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cb06:	d82e      	bhi.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801cb08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801cb0c:	d033      	beq.n	801cb76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801cb0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801cb12:	d828      	bhi.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801cb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cb18:	d01a      	beq.n	801cb50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801cb1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cb1e:	d822      	bhi.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d003      	beq.n	801cb2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801cb24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cb28:	d007      	beq.n	801cb3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801cb2a:	e01c      	b.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb2c:	4b50      	ldr	r3, [pc, #320]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb30:	4a4f      	ldr	r2, [pc, #316]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cb32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cb36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cb38:	e01e      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb3e:	3308      	adds	r3, #8
 801cb40:	2100      	movs	r1, #0
 801cb42:	4618      	mov	r0, r3
 801cb44:	f002 f994 	bl	801ee70 <RCCEx_PLL2_Config>
 801cb48:	4603      	mov	r3, r0
 801cb4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cb4e:	e013      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb54:	3328      	adds	r3, #40	; 0x28
 801cb56:	2100      	movs	r1, #0
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f002 fa3b 	bl	801efd4 <RCCEx_PLL3_Config>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cb64:	e008      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cb66:	2301      	movs	r3, #1
 801cb68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cb6c:	e004      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801cb6e:	bf00      	nop
 801cb70:	e002      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801cb72:	bf00      	nop
 801cb74:	e000      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801cb76:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d10b      	bne.n	801cb98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801cb80:	4b3b      	ldr	r3, [pc, #236]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cb82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb84:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801cb90:	4a37      	ldr	r2, [pc, #220]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cb92:	430b      	orrs	r3, r1
 801cb94:	6593      	str	r3, [r2, #88]	; 0x58
 801cb96:	e003      	b.n	801cba0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801cba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cba8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801cbac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801cbb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801cbba:	460b      	mov	r3, r1
 801cbbc:	4313      	orrs	r3, r2
 801cbbe:	d05d      	beq.n	801cc7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801cbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801cbc8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801cbcc:	d03b      	beq.n	801cc46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801cbce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801cbd2:	d834      	bhi.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801cbd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801cbd8:	d037      	beq.n	801cc4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801cbda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801cbde:	d82e      	bhi.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801cbe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801cbe4:	d033      	beq.n	801cc4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801cbe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801cbea:	d828      	bhi.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801cbec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cbf0:	d01a      	beq.n	801cc28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801cbf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cbf6:	d822      	bhi.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d003      	beq.n	801cc04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801cbfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cc00:	d007      	beq.n	801cc12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801cc02:	e01c      	b.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc04:	4b1a      	ldr	r3, [pc, #104]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc08:	4a19      	ldr	r2, [pc, #100]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cc0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cc0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cc10:	e01e      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc16:	3308      	adds	r3, #8
 801cc18:	2100      	movs	r1, #0
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f002 f928 	bl	801ee70 <RCCEx_PLL2_Config>
 801cc20:	4603      	mov	r3, r0
 801cc22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cc26:	e013      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc2c:	3328      	adds	r3, #40	; 0x28
 801cc2e:	2100      	movs	r1, #0
 801cc30:	4618      	mov	r0, r3
 801cc32:	f002 f9cf 	bl	801efd4 <RCCEx_PLL3_Config>
 801cc36:	4603      	mov	r3, r0
 801cc38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cc3c:	e008      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cc3e:	2301      	movs	r3, #1
 801cc40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cc44:	e004      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801cc46:	bf00      	nop
 801cc48:	e002      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801cc4a:	bf00      	nop
 801cc4c:	e000      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801cc4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d10d      	bne.n	801cc74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801cc58:	4b05      	ldr	r3, [pc, #20]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cc5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801cc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801cc68:	4a01      	ldr	r2, [pc, #4]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801cc6a:	430b      	orrs	r3, r1
 801cc6c:	6593      	str	r3, [r2, #88]	; 0x58
 801cc6e:	e005      	b.n	801cc7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 801cc70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801cc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801cc88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801cc92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801cc96:	460b      	mov	r3, r1
 801cc98:	4313      	orrs	r3, r2
 801cc9a:	d03a      	beq.n	801cd12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801cc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cca2:	2b30      	cmp	r3, #48	; 0x30
 801cca4:	d01f      	beq.n	801cce6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801cca6:	2b30      	cmp	r3, #48	; 0x30
 801cca8:	d819      	bhi.n	801ccde <HAL_RCCEx_PeriphCLKConfig+0x372>
 801ccaa:	2b20      	cmp	r3, #32
 801ccac:	d00c      	beq.n	801ccc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801ccae:	2b20      	cmp	r3, #32
 801ccb0:	d815      	bhi.n	801ccde <HAL_RCCEx_PeriphCLKConfig+0x372>
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d019      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801ccb6:	2b10      	cmp	r3, #16
 801ccb8:	d111      	bne.n	801ccde <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccba:	4baa      	ldr	r3, [pc, #680]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccbe:	4aa9      	ldr	r2, [pc, #676]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801ccc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ccc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801ccc6:	e011      	b.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ccc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cccc:	3308      	adds	r3, #8
 801ccce:	2102      	movs	r1, #2
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	f002 f8cd 	bl	801ee70 <RCCEx_PLL2_Config>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801ccdc:	e006      	b.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801ccde:	2301      	movs	r3, #1
 801cce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cce4:	e002      	b.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801cce6:	bf00      	nop
 801cce8:	e000      	b.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801ccea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ccec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d10a      	bne.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801ccf4:	4b9b      	ldr	r3, [pc, #620]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801ccf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ccf8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801ccfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd02:	4a98      	ldr	r2, [pc, #608]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cd04:	430b      	orrs	r3, r1
 801cd06:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cd08:	e003      	b.n	801cd12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801cd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801cd1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801cd22:	2300      	movs	r3, #0
 801cd24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801cd28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	4313      	orrs	r3, r2
 801cd30:	d051      	beq.n	801cdd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801cd32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cd3c:	d035      	beq.n	801cdaa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801cd3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cd42:	d82e      	bhi.n	801cda2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801cd44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801cd48:	d031      	beq.n	801cdae <HAL_RCCEx_PeriphCLKConfig+0x442>
 801cd4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801cd4e:	d828      	bhi.n	801cda2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801cd50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cd54:	d01a      	beq.n	801cd8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 801cd56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cd5a:	d822      	bhi.n	801cda2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d003      	beq.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801cd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cd64:	d007      	beq.n	801cd76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801cd66:	e01c      	b.n	801cda2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd68:	4b7e      	ldr	r3, [pc, #504]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd6c:	4a7d      	ldr	r2, [pc, #500]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cd6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cd74:	e01c      	b.n	801cdb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd7a:	3308      	adds	r3, #8
 801cd7c:	2100      	movs	r1, #0
 801cd7e:	4618      	mov	r0, r3
 801cd80:	f002 f876 	bl	801ee70 <RCCEx_PLL2_Config>
 801cd84:	4603      	mov	r3, r0
 801cd86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cd8a:	e011      	b.n	801cdb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd90:	3328      	adds	r3, #40	; 0x28
 801cd92:	2100      	movs	r1, #0
 801cd94:	4618      	mov	r0, r3
 801cd96:	f002 f91d 	bl	801efd4 <RCCEx_PLL3_Config>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cda0:	e006      	b.n	801cdb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cda2:	2301      	movs	r3, #1
 801cda4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cda8:	e002      	b.n	801cdb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801cdaa:	bf00      	nop
 801cdac:	e000      	b.n	801cdb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801cdae:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cdb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d10a      	bne.n	801cdce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801cdb8:	4b6a      	ldr	r3, [pc, #424]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cdbc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdc6:	4a67      	ldr	r2, [pc, #412]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cdc8:	430b      	orrs	r3, r1
 801cdca:	6513      	str	r3, [r2, #80]	; 0x50
 801cdcc:	e003      	b.n	801cdd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801cdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdde:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801cde2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801cde6:	2300      	movs	r3, #0
 801cde8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801cdec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801cdf0:	460b      	mov	r3, r1
 801cdf2:	4313      	orrs	r3, r2
 801cdf4:	d053      	beq.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801cdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cdfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ce00:	d033      	beq.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801ce02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ce06:	d82c      	bhi.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801ce08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801ce0c:	d02f      	beq.n	801ce6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 801ce0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801ce12:	d826      	bhi.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801ce14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801ce18:	d02b      	beq.n	801ce72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801ce1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801ce1e:	d820      	bhi.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801ce20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801ce24:	d012      	beq.n	801ce4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801ce26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801ce2a:	d81a      	bhi.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d022      	beq.n	801ce76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801ce30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce34:	d115      	bne.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ce36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce3a:	3308      	adds	r3, #8
 801ce3c:	2101      	movs	r1, #1
 801ce3e:	4618      	mov	r0, r3
 801ce40:	f002 f816 	bl	801ee70 <RCCEx_PLL2_Config>
 801ce44:	4603      	mov	r3, r0
 801ce46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801ce4a:	e015      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ce4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce50:	3328      	adds	r3, #40	; 0x28
 801ce52:	2101      	movs	r1, #1
 801ce54:	4618      	mov	r0, r3
 801ce56:	f002 f8bd 	bl	801efd4 <RCCEx_PLL3_Config>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801ce60:	e00a      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ce62:	2301      	movs	r3, #1
 801ce64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ce68:	e006      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801ce6a:	bf00      	nop
 801ce6c:	e004      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801ce6e:	bf00      	nop
 801ce70:	e002      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801ce72:	bf00      	nop
 801ce74:	e000      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801ce76:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d10a      	bne.n	801ce96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801ce80:	4b38      	ldr	r3, [pc, #224]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801ce82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801ce88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce8e:	4a35      	ldr	r2, [pc, #212]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801ce90:	430b      	orrs	r3, r1
 801ce92:	6513      	str	r3, [r2, #80]	; 0x50
 801ce94:	e003      	b.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ce9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801ceaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801ceae:	2300      	movs	r3, #0
 801ceb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801ceb4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801ceb8:	460b      	mov	r3, r1
 801ceba:	4313      	orrs	r3, r2
 801cebc:	d058      	beq.n	801cf70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801cebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cec2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801cec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ceca:	d033      	beq.n	801cf34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801cecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ced0:	d82c      	bhi.n	801cf2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801ced2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ced6:	d02f      	beq.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801ced8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cedc:	d826      	bhi.n	801cf2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801cede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801cee2:	d02b      	beq.n	801cf3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801cee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801cee8:	d820      	bhi.n	801cf2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801ceea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ceee:	d012      	beq.n	801cf16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801cef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cef4:	d81a      	bhi.n	801cf2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d022      	beq.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801cefa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cefe:	d115      	bne.n	801cf2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf04:	3308      	adds	r3, #8
 801cf06:	2101      	movs	r1, #1
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f001 ffb1 	bl	801ee70 <RCCEx_PLL2_Config>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cf14:	e015      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cf16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf1a:	3328      	adds	r3, #40	; 0x28
 801cf1c:	2101      	movs	r1, #1
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f002 f858 	bl	801efd4 <RCCEx_PLL3_Config>
 801cf24:	4603      	mov	r3, r0
 801cf26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cf2a:	e00a      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cf32:	e006      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801cf34:	bf00      	nop
 801cf36:	e004      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801cf38:	bf00      	nop
 801cf3a:	e002      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801cf3c:	bf00      	nop
 801cf3e:	e000      	b.n	801cf42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801cf40:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cf42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d10e      	bne.n	801cf68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801cf4a:	4b06      	ldr	r3, [pc, #24]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cf4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801cf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801cf5a:	4a02      	ldr	r2, [pc, #8]	; (801cf64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801cf5c:	430b      	orrs	r3, r1
 801cf5e:	6593      	str	r3, [r2, #88]	; 0x58
 801cf60:	e006      	b.n	801cf70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801cf62:	bf00      	nop
 801cf64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801cf7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801cf80:	2300      	movs	r3, #0
 801cf82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801cf86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801cf8a:	460b      	mov	r3, r1
 801cf8c:	4313      	orrs	r3, r2
 801cf8e:	d037      	beq.n	801d000 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801cf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cf9a:	d00e      	beq.n	801cfba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cfa0:	d816      	bhi.n	801cfd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d018      	beq.n	801cfd8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801cfa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cfaa:	d111      	bne.n	801cfd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cfac:	4bc4      	ldr	r3, [pc, #784]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfb0:	4ac3      	ldr	r2, [pc, #780]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cfb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cfb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801cfb8:	e00f      	b.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfbe:	3308      	adds	r3, #8
 801cfc0:	2101      	movs	r1, #1
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f001 ff54 	bl	801ee70 <RCCEx_PLL2_Config>
 801cfc8:	4603      	mov	r3, r0
 801cfca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801cfce:	e004      	b.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cfd0:	2301      	movs	r3, #1
 801cfd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cfd6:	e000      	b.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801cfd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cfda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d10a      	bne.n	801cff8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cfe2:	4bb7      	ldr	r3, [pc, #732]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfe6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801cfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cff0:	4ab3      	ldr	r2, [pc, #716]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cff2:	430b      	orrs	r3, r1
 801cff4:	6513      	str	r3, [r2, #80]	; 0x50
 801cff6:	e003      	b.n	801d000 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d008:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801d00c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801d010:	2300      	movs	r3, #0
 801d012:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801d016:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801d01a:	460b      	mov	r3, r1
 801d01c:	4313      	orrs	r3, r2
 801d01e:	d039      	beq.n	801d094 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d026:	2b03      	cmp	r3, #3
 801d028:	d81c      	bhi.n	801d064 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801d02a:	a201      	add	r2, pc, #4	; (adr r2, 801d030 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d030:	0801d06d 	.word	0x0801d06d
 801d034:	0801d041 	.word	0x0801d041
 801d038:	0801d04f 	.word	0x0801d04f
 801d03c:	0801d06d 	.word	0x0801d06d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d040:	4b9f      	ldr	r3, [pc, #636]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d044:	4a9e      	ldr	r2, [pc, #632]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d04a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d04c:	e00f      	b.n	801d06e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d052:	3308      	adds	r3, #8
 801d054:	2102      	movs	r1, #2
 801d056:	4618      	mov	r0, r3
 801d058:	f001 ff0a 	bl	801ee70 <RCCEx_PLL2_Config>
 801d05c:	4603      	mov	r3, r0
 801d05e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d062:	e004      	b.n	801d06e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d064:	2301      	movs	r3, #1
 801d066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d06a:	e000      	b.n	801d06e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801d06c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d06e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d072:	2b00      	cmp	r3, #0
 801d074:	d10a      	bne.n	801d08c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d076:	4b92      	ldr	r3, [pc, #584]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d07a:	f023 0103 	bic.w	r1, r3, #3
 801d07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d084:	4a8e      	ldr	r2, [pc, #568]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d086:	430b      	orrs	r3, r1
 801d088:	64d3      	str	r3, [r2, #76]	; 0x4c
 801d08a:	e003      	b.n	801d094 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d08c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d090:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d09c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801d0a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801d0aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801d0ae:	460b      	mov	r3, r1
 801d0b0:	4313      	orrs	r3, r2
 801d0b2:	f000 8099 	beq.w	801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d0b6:	4b83      	ldr	r3, [pc, #524]	; (801d2c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	4a82      	ldr	r2, [pc, #520]	; (801d2c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d0bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d0c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d0c2:	f7f8 ff09 	bl	8015ed8 <HAL_GetTick>
 801d0c6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d0ca:	e00b      	b.n	801d0e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d0cc:	f7f8 ff04 	bl	8015ed8 <HAL_GetTick>
 801d0d0:	4602      	mov	r2, r0
 801d0d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	2b64      	cmp	r3, #100	; 0x64
 801d0da:	d903      	bls.n	801d0e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801d0dc:	2303      	movs	r3, #3
 801d0de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d0e2:	e005      	b.n	801d0f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d0e4:	4b77      	ldr	r3, [pc, #476]	; (801d2c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d0ed      	beq.n	801d0cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801d0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d173      	bne.n	801d1e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d0f8:	4b71      	ldr	r3, [pc, #452]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d0fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d104:	4053      	eors	r3, r2
 801d106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d015      	beq.n	801d13a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d10e:	4b6c      	ldr	r3, [pc, #432]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d116:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d11a:	4b69      	ldr	r3, [pc, #420]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d11e:	4a68      	ldr	r2, [pc, #416]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d124:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d126:	4b66      	ldr	r3, [pc, #408]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d12a:	4a65      	ldr	r2, [pc, #404]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d12c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d130:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d132:	4a63      	ldr	r2, [pc, #396]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d138:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d13e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d146:	d118      	bne.n	801d17a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d148:	f7f8 fec6 	bl	8015ed8 <HAL_GetTick>
 801d14c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d150:	e00d      	b.n	801d16e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d152:	f7f8 fec1 	bl	8015ed8 <HAL_GetTick>
 801d156:	4602      	mov	r2, r0
 801d158:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d15c:	1ad2      	subs	r2, r2, r3
 801d15e:	f241 3388 	movw	r3, #5000	; 0x1388
 801d162:	429a      	cmp	r2, r3
 801d164:	d903      	bls.n	801d16e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801d166:	2303      	movs	r3, #3
 801d168:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801d16c:	e005      	b.n	801d17a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d16e:	4b54      	ldr	r3, [pc, #336]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d172:	f003 0302 	and.w	r3, r3, #2
 801d176:	2b00      	cmp	r3, #0
 801d178:	d0eb      	beq.n	801d152 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801d17a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d129      	bne.n	801d1d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d18e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d192:	d10e      	bne.n	801d1b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801d194:	4b4a      	ldr	r3, [pc, #296]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d196:	691b      	ldr	r3, [r3, #16]
 801d198:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801d19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d1a4:	091a      	lsrs	r2, r3, #4
 801d1a6:	4b48      	ldr	r3, [pc, #288]	; (801d2c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801d1a8:	4013      	ands	r3, r2
 801d1aa:	4a45      	ldr	r2, [pc, #276]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d1ac:	430b      	orrs	r3, r1
 801d1ae:	6113      	str	r3, [r2, #16]
 801d1b0:	e005      	b.n	801d1be <HAL_RCCEx_PeriphCLKConfig+0x852>
 801d1b2:	4b43      	ldr	r3, [pc, #268]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d1b4:	691b      	ldr	r3, [r3, #16]
 801d1b6:	4a42      	ldr	r2, [pc, #264]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d1b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d1bc:	6113      	str	r3, [r2, #16]
 801d1be:	4b40      	ldr	r3, [pc, #256]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d1c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801d1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d1ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d1ce:	4a3c      	ldr	r2, [pc, #240]	; (801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801d1d0:	430b      	orrs	r3, r1
 801d1d2:	6713      	str	r3, [r2, #112]	; 0x70
 801d1d4:	e008      	b.n	801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d1d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d1da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801d1de:	e003      	b.n	801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d1e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f0:	f002 0301 	and.w	r3, r2, #1
 801d1f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801d1fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801d202:	460b      	mov	r3, r1
 801d204:	4313      	orrs	r3, r2
 801d206:	f000 808f 	beq.w	801d328 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d210:	2b28      	cmp	r3, #40	; 0x28
 801d212:	d871      	bhi.n	801d2f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801d214:	a201      	add	r2, pc, #4	; (adr r2, 801d21c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801d216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d21a:	bf00      	nop
 801d21c:	0801d301 	.word	0x0801d301
 801d220:	0801d2f9 	.word	0x0801d2f9
 801d224:	0801d2f9 	.word	0x0801d2f9
 801d228:	0801d2f9 	.word	0x0801d2f9
 801d22c:	0801d2f9 	.word	0x0801d2f9
 801d230:	0801d2f9 	.word	0x0801d2f9
 801d234:	0801d2f9 	.word	0x0801d2f9
 801d238:	0801d2f9 	.word	0x0801d2f9
 801d23c:	0801d2cd 	.word	0x0801d2cd
 801d240:	0801d2f9 	.word	0x0801d2f9
 801d244:	0801d2f9 	.word	0x0801d2f9
 801d248:	0801d2f9 	.word	0x0801d2f9
 801d24c:	0801d2f9 	.word	0x0801d2f9
 801d250:	0801d2f9 	.word	0x0801d2f9
 801d254:	0801d2f9 	.word	0x0801d2f9
 801d258:	0801d2f9 	.word	0x0801d2f9
 801d25c:	0801d2e3 	.word	0x0801d2e3
 801d260:	0801d2f9 	.word	0x0801d2f9
 801d264:	0801d2f9 	.word	0x0801d2f9
 801d268:	0801d2f9 	.word	0x0801d2f9
 801d26c:	0801d2f9 	.word	0x0801d2f9
 801d270:	0801d2f9 	.word	0x0801d2f9
 801d274:	0801d2f9 	.word	0x0801d2f9
 801d278:	0801d2f9 	.word	0x0801d2f9
 801d27c:	0801d301 	.word	0x0801d301
 801d280:	0801d2f9 	.word	0x0801d2f9
 801d284:	0801d2f9 	.word	0x0801d2f9
 801d288:	0801d2f9 	.word	0x0801d2f9
 801d28c:	0801d2f9 	.word	0x0801d2f9
 801d290:	0801d2f9 	.word	0x0801d2f9
 801d294:	0801d2f9 	.word	0x0801d2f9
 801d298:	0801d2f9 	.word	0x0801d2f9
 801d29c:	0801d301 	.word	0x0801d301
 801d2a0:	0801d2f9 	.word	0x0801d2f9
 801d2a4:	0801d2f9 	.word	0x0801d2f9
 801d2a8:	0801d2f9 	.word	0x0801d2f9
 801d2ac:	0801d2f9 	.word	0x0801d2f9
 801d2b0:	0801d2f9 	.word	0x0801d2f9
 801d2b4:	0801d2f9 	.word	0x0801d2f9
 801d2b8:	0801d2f9 	.word	0x0801d2f9
 801d2bc:	0801d301 	.word	0x0801d301
 801d2c0:	58024400 	.word	0x58024400
 801d2c4:	58024800 	.word	0x58024800
 801d2c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d2d0:	3308      	adds	r3, #8
 801d2d2:	2101      	movs	r1, #1
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f001 fdcb 	bl	801ee70 <RCCEx_PLL2_Config>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d2e0:	e00f      	b.n	801d302 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d2e6:	3328      	adds	r3, #40	; 0x28
 801d2e8:	2101      	movs	r1, #1
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f001 fe72 	bl	801efd4 <RCCEx_PLL3_Config>
 801d2f0:	4603      	mov	r3, r0
 801d2f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d2f6:	e004      	b.n	801d302 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d2f8:	2301      	movs	r3, #1
 801d2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d2fe:	e000      	b.n	801d302 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801d300:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d302:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d306:	2b00      	cmp	r3, #0
 801d308:	d10a      	bne.n	801d320 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d30a:	4bbf      	ldr	r3, [pc, #764]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d30e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801d312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d318:	4abb      	ldr	r2, [pc, #748]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d31a:	430b      	orrs	r3, r1
 801d31c:	6553      	str	r3, [r2, #84]	; 0x54
 801d31e:	e003      	b.n	801d328 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d324:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d330:	f002 0302 	and.w	r3, r2, #2
 801d334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801d338:	2300      	movs	r3, #0
 801d33a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801d33e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801d342:	460b      	mov	r3, r1
 801d344:	4313      	orrs	r3, r2
 801d346:	d041      	beq.n	801d3cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d34e:	2b05      	cmp	r3, #5
 801d350:	d824      	bhi.n	801d39c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801d352:	a201      	add	r2, pc, #4	; (adr r2, 801d358 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801d354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d358:	0801d3a5 	.word	0x0801d3a5
 801d35c:	0801d371 	.word	0x0801d371
 801d360:	0801d387 	.word	0x0801d387
 801d364:	0801d3a5 	.word	0x0801d3a5
 801d368:	0801d3a5 	.word	0x0801d3a5
 801d36c:	0801d3a5 	.word	0x0801d3a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d374:	3308      	adds	r3, #8
 801d376:	2101      	movs	r1, #1
 801d378:	4618      	mov	r0, r3
 801d37a:	f001 fd79 	bl	801ee70 <RCCEx_PLL2_Config>
 801d37e:	4603      	mov	r3, r0
 801d380:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d384:	e00f      	b.n	801d3a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d38a:	3328      	adds	r3, #40	; 0x28
 801d38c:	2101      	movs	r1, #1
 801d38e:	4618      	mov	r0, r3
 801d390:	f001 fe20 	bl	801efd4 <RCCEx_PLL3_Config>
 801d394:	4603      	mov	r3, r0
 801d396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d39a:	e004      	b.n	801d3a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d39c:	2301      	movs	r3, #1
 801d39e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d3a2:	e000      	b.n	801d3a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801d3a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d3a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d10a      	bne.n	801d3c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d3ae:	4b96      	ldr	r3, [pc, #600]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d3b2:	f023 0107 	bic.w	r1, r3, #7
 801d3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3bc:	4a92      	ldr	r2, [pc, #584]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d3be:	430b      	orrs	r3, r1
 801d3c0:	6553      	str	r3, [r2, #84]	; 0x54
 801d3c2:	e003      	b.n	801d3cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d3c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d4:	f002 0304 	and.w	r3, r2, #4
 801d3d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d3dc:	2300      	movs	r3, #0
 801d3de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d3e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801d3e6:	460b      	mov	r3, r1
 801d3e8:	4313      	orrs	r3, r2
 801d3ea:	d044      	beq.n	801d476 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d3f4:	2b05      	cmp	r3, #5
 801d3f6:	d825      	bhi.n	801d444 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801d3f8:	a201      	add	r2, pc, #4	; (adr r2, 801d400 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801d3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3fe:	bf00      	nop
 801d400:	0801d44d 	.word	0x0801d44d
 801d404:	0801d419 	.word	0x0801d419
 801d408:	0801d42f 	.word	0x0801d42f
 801d40c:	0801d44d 	.word	0x0801d44d
 801d410:	0801d44d 	.word	0x0801d44d
 801d414:	0801d44d 	.word	0x0801d44d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d41c:	3308      	adds	r3, #8
 801d41e:	2101      	movs	r1, #1
 801d420:	4618      	mov	r0, r3
 801d422:	f001 fd25 	bl	801ee70 <RCCEx_PLL2_Config>
 801d426:	4603      	mov	r3, r0
 801d428:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d42c:	e00f      	b.n	801d44e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d432:	3328      	adds	r3, #40	; 0x28
 801d434:	2101      	movs	r1, #1
 801d436:	4618      	mov	r0, r3
 801d438:	f001 fdcc 	bl	801efd4 <RCCEx_PLL3_Config>
 801d43c:	4603      	mov	r3, r0
 801d43e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d442:	e004      	b.n	801d44e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d444:	2301      	movs	r3, #1
 801d446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d44a:	e000      	b.n	801d44e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801d44c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d44e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d452:	2b00      	cmp	r3, #0
 801d454:	d10b      	bne.n	801d46e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d456:	4b6c      	ldr	r3, [pc, #432]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d45a:	f023 0107 	bic.w	r1, r3, #7
 801d45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d466:	4a68      	ldr	r2, [pc, #416]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d468:	430b      	orrs	r3, r1
 801d46a:	6593      	str	r3, [r2, #88]	; 0x58
 801d46c:	e003      	b.n	801d476 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d46e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d472:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47e:	f002 0320 	and.w	r3, r2, #32
 801d482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801d486:	2300      	movs	r3, #0
 801d488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d48c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801d490:	460b      	mov	r3, r1
 801d492:	4313      	orrs	r3, r2
 801d494:	d055      	beq.n	801d542 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d49e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d4a2:	d033      	beq.n	801d50c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801d4a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d4a8:	d82c      	bhi.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801d4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4ae:	d02f      	beq.n	801d510 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801d4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4b4:	d826      	bhi.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801d4b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d4ba:	d02b      	beq.n	801d514 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801d4bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d4c0:	d820      	bhi.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801d4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4c6:	d012      	beq.n	801d4ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801d4c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4cc:	d81a      	bhi.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d022      	beq.n	801d518 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801d4d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d4d6:	d115      	bne.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d4dc:	3308      	adds	r3, #8
 801d4de:	2100      	movs	r1, #0
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	f001 fcc5 	bl	801ee70 <RCCEx_PLL2_Config>
 801d4e6:	4603      	mov	r3, r0
 801d4e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d4ec:	e015      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d4f2:	3328      	adds	r3, #40	; 0x28
 801d4f4:	2102      	movs	r1, #2
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f001 fd6c 	bl	801efd4 <RCCEx_PLL3_Config>
 801d4fc:	4603      	mov	r3, r0
 801d4fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d502:	e00a      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d504:	2301      	movs	r3, #1
 801d506:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d50a:	e006      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801d50c:	bf00      	nop
 801d50e:	e004      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801d510:	bf00      	nop
 801d512:	e002      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801d514:	bf00      	nop
 801d516:	e000      	b.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801d518:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d51a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d10b      	bne.n	801d53a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d522:	4b39      	ldr	r3, [pc, #228]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d526:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801d52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d532:	4a35      	ldr	r2, [pc, #212]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d534:	430b      	orrs	r3, r1
 801d536:	6553      	str	r3, [r2, #84]	; 0x54
 801d538:	e003      	b.n	801d542 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d53a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d53e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d54a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801d54e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d552:	2300      	movs	r3, #0
 801d554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d558:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801d55c:	460b      	mov	r3, r1
 801d55e:	4313      	orrs	r3, r2
 801d560:	d058      	beq.n	801d614 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d56a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801d56e:	d033      	beq.n	801d5d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801d570:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801d574:	d82c      	bhi.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801d576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d57a:	d02f      	beq.n	801d5dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801d57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d580:	d826      	bhi.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801d582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801d586:	d02b      	beq.n	801d5e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801d588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801d58c:	d820      	bhi.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801d58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d592:	d012      	beq.n	801d5ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801d594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d598:	d81a      	bhi.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d022      	beq.n	801d5e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801d59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d5a2:	d115      	bne.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5a8:	3308      	adds	r3, #8
 801d5aa:	2100      	movs	r1, #0
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f001 fc5f 	bl	801ee70 <RCCEx_PLL2_Config>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d5b8:	e015      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5be:	3328      	adds	r3, #40	; 0x28
 801d5c0:	2102      	movs	r1, #2
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f001 fd06 	bl	801efd4 <RCCEx_PLL3_Config>
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d5ce:	e00a      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d5d0:	2301      	movs	r3, #1
 801d5d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d5d6:	e006      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d5d8:	bf00      	nop
 801d5da:	e004      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d5dc:	bf00      	nop
 801d5de:	e002      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d5e0:	bf00      	nop
 801d5e2:	e000      	b.n	801d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d10e      	bne.n	801d60c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d5ee:	4b06      	ldr	r3, [pc, #24]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d5f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801d5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d5fe:	4a02      	ldr	r2, [pc, #8]	; (801d608 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d600:	430b      	orrs	r3, r1
 801d602:	6593      	str	r3, [r2, #88]	; 0x58
 801d604:	e006      	b.n	801d614 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801d606:	bf00      	nop
 801d608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d60c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d610:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d61c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801d620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d624:	2300      	movs	r3, #0
 801d626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d62a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801d62e:	460b      	mov	r3, r1
 801d630:	4313      	orrs	r3, r2
 801d632:	d055      	beq.n	801d6e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d63c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801d640:	d033      	beq.n	801d6aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801d642:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801d646:	d82c      	bhi.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d64c:	d02f      	beq.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801d64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d652:	d826      	bhi.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d654:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801d658:	d02b      	beq.n	801d6b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801d65a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801d65e:	d820      	bhi.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d664:	d012      	beq.n	801d68c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801d666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d66a:	d81a      	bhi.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d022      	beq.n	801d6b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801d670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d674:	d115      	bne.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d67a:	3308      	adds	r3, #8
 801d67c:	2100      	movs	r1, #0
 801d67e:	4618      	mov	r0, r3
 801d680:	f001 fbf6 	bl	801ee70 <RCCEx_PLL2_Config>
 801d684:	4603      	mov	r3, r0
 801d686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d68a:	e015      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d690:	3328      	adds	r3, #40	; 0x28
 801d692:	2102      	movs	r1, #2
 801d694:	4618      	mov	r0, r3
 801d696:	f001 fc9d 	bl	801efd4 <RCCEx_PLL3_Config>
 801d69a:	4603      	mov	r3, r0
 801d69c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d6a0:	e00a      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d6a8:	e006      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d6aa:	bf00      	nop
 801d6ac:	e004      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d6ae:	bf00      	nop
 801d6b0:	e002      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d6b2:	bf00      	nop
 801d6b4:	e000      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d6b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d10b      	bne.n	801d6d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d6c0:	4ba0      	ldr	r3, [pc, #640]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d6c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801d6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d6cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d6d0:	4a9c      	ldr	r2, [pc, #624]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d6d2:	430b      	orrs	r3, r1
 801d6d4:	6593      	str	r3, [r2, #88]	; 0x58
 801d6d6:	e003      	b.n	801d6e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d6dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801d6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6e8:	f002 0308 	and.w	r3, r2, #8
 801d6ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d6f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801d6fa:	460b      	mov	r3, r1
 801d6fc:	4313      	orrs	r3, r2
 801d6fe:	d01e      	beq.n	801d73e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801d700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d70c:	d10c      	bne.n	801d728 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d712:	3328      	adds	r3, #40	; 0x28
 801d714:	2102      	movs	r1, #2
 801d716:	4618      	mov	r0, r3
 801d718:	f001 fc5c 	bl	801efd4 <RCCEx_PLL3_Config>
 801d71c:	4603      	mov	r3, r0
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d002      	beq.n	801d728 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801d722:	2301      	movs	r3, #1
 801d724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801d728:	4b86      	ldr	r3, [pc, #536]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d72c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d738:	4a82      	ldr	r2, [pc, #520]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d73a:	430b      	orrs	r3, r1
 801d73c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d746:	f002 0310 	and.w	r3, r2, #16
 801d74a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d74e:	2300      	movs	r3, #0
 801d750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d754:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801d758:	460b      	mov	r3, r1
 801d75a:	4313      	orrs	r3, r2
 801d75c:	d01e      	beq.n	801d79c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d76a:	d10c      	bne.n	801d786 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d770:	3328      	adds	r3, #40	; 0x28
 801d772:	2102      	movs	r1, #2
 801d774:	4618      	mov	r0, r3
 801d776:	f001 fc2d 	bl	801efd4 <RCCEx_PLL3_Config>
 801d77a:	4603      	mov	r3, r0
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d002      	beq.n	801d786 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801d780:	2301      	movs	r3, #1
 801d782:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d786:	4b6f      	ldr	r3, [pc, #444]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d78a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801d78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d796:	4a6b      	ldr	r2, [pc, #428]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d798:	430b      	orrs	r3, r1
 801d79a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801d7a8:	67bb      	str	r3, [r7, #120]	; 0x78
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d7ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801d7b2:	460b      	mov	r3, r1
 801d7b4:	4313      	orrs	r3, r2
 801d7b6:	d03e      	beq.n	801d836 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d7bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d7c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7c4:	d022      	beq.n	801d80c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801d7c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7ca:	d81b      	bhi.n	801d804 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	d003      	beq.n	801d7d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801d7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7d4:	d00b      	beq.n	801d7ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801d7d6:	e015      	b.n	801d804 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d7dc:	3308      	adds	r3, #8
 801d7de:	2100      	movs	r1, #0
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	f001 fb45 	bl	801ee70 <RCCEx_PLL2_Config>
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d7ec:	e00f      	b.n	801d80e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d7f2:	3328      	adds	r3, #40	; 0x28
 801d7f4:	2102      	movs	r1, #2
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f001 fbec 	bl	801efd4 <RCCEx_PLL3_Config>
 801d7fc:	4603      	mov	r3, r0
 801d7fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d802:	e004      	b.n	801d80e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d804:	2301      	movs	r3, #1
 801d806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d80a:	e000      	b.n	801d80e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801d80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d80e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d812:	2b00      	cmp	r3, #0
 801d814:	d10b      	bne.n	801d82e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d816:	4b4b      	ldr	r3, [pc, #300]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d81a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801d81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d826:	4a47      	ldr	r2, [pc, #284]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d828:	430b      	orrs	r3, r1
 801d82a:	6593      	str	r3, [r2, #88]	; 0x58
 801d82c:	e003      	b.n	801d836 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d82e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d832:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d83e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801d842:	673b      	str	r3, [r7, #112]	; 0x70
 801d844:	2300      	movs	r3, #0
 801d846:	677b      	str	r3, [r7, #116]	; 0x74
 801d848:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801d84c:	460b      	mov	r3, r1
 801d84e:	4313      	orrs	r3, r2
 801d850:	d03b      	beq.n	801d8ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801d852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d85a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801d85e:	d01f      	beq.n	801d8a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801d860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801d864:	d818      	bhi.n	801d898 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801d866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d86a:	d003      	beq.n	801d874 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801d86c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d870:	d007      	beq.n	801d882 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801d872:	e011      	b.n	801d898 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d874:	4b33      	ldr	r3, [pc, #204]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d878:	4a32      	ldr	r2, [pc, #200]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d87a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d87e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801d880:	e00f      	b.n	801d8a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d886:	3328      	adds	r3, #40	; 0x28
 801d888:	2101      	movs	r1, #1
 801d88a:	4618      	mov	r0, r3
 801d88c:	f001 fba2 	bl	801efd4 <RCCEx_PLL3_Config>
 801d890:	4603      	mov	r3, r0
 801d892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801d896:	e004      	b.n	801d8a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d898:	2301      	movs	r3, #1
 801d89a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d89e:	e000      	b.n	801d8a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801d8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d10b      	bne.n	801d8c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d8aa:	4b26      	ldr	r3, [pc, #152]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d8ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801d8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d8ba:	4a22      	ldr	r2, [pc, #136]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d8bc:	430b      	orrs	r3, r1
 801d8be:	6553      	str	r3, [r2, #84]	; 0x54
 801d8c0:	e003      	b.n	801d8ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d8c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801d8d6:	66bb      	str	r3, [r7, #104]	; 0x68
 801d8d8:	2300      	movs	r3, #0
 801d8da:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d8dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801d8e0:	460b      	mov	r3, r1
 801d8e2:	4313      	orrs	r3, r2
 801d8e4:	d034      	beq.n	801d950 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801d8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d003      	beq.n	801d8f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801d8f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d8f4:	d007      	beq.n	801d906 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801d8f6:	e011      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d8f8:	4b12      	ldr	r3, [pc, #72]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8fc:	4a11      	ldr	r2, [pc, #68]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d904:	e00e      	b.n	801d924 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d90a:	3308      	adds	r3, #8
 801d90c:	2102      	movs	r1, #2
 801d90e:	4618      	mov	r0, r3
 801d910:	f001 faae 	bl	801ee70 <RCCEx_PLL2_Config>
 801d914:	4603      	mov	r3, r0
 801d916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d91a:	e003      	b.n	801d924 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801d91c:	2301      	movs	r3, #1
 801d91e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d922:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d924:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d10d      	bne.n	801d948 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801d92c:	4b05      	ldr	r3, [pc, #20]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801d934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d93a:	4a02      	ldr	r2, [pc, #8]	; (801d944 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d93c:	430b      	orrs	r3, r1
 801d93e:	64d3      	str	r3, [r2, #76]	; 0x4c
 801d940:	e006      	b.n	801d950 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801d942:	bf00      	nop
 801d944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d94c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d958:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801d95c:	663b      	str	r3, [r7, #96]	; 0x60
 801d95e:	2300      	movs	r3, #0
 801d960:	667b      	str	r3, [r7, #100]	; 0x64
 801d962:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801d966:	460b      	mov	r3, r1
 801d968:	4313      	orrs	r3, r2
 801d96a:	d00c      	beq.n	801d986 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d970:	3328      	adds	r3, #40	; 0x28
 801d972:	2102      	movs	r1, #2
 801d974:	4618      	mov	r0, r3
 801d976:	f001 fb2d 	bl	801efd4 <RCCEx_PLL3_Config>
 801d97a:	4603      	mov	r3, r0
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d002      	beq.n	801d986 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801d980:	2301      	movs	r3, #1
 801d982:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801d986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d98e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801d992:	65bb      	str	r3, [r7, #88]	; 0x58
 801d994:	2300      	movs	r3, #0
 801d996:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d998:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801d99c:	460b      	mov	r3, r1
 801d99e:	4313      	orrs	r3, r2
 801d9a0:	d036      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801d9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d9a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d9ac:	d018      	beq.n	801d9e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801d9ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d9b2:	d811      	bhi.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801d9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9b8:	d014      	beq.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801d9ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9be:	d80b      	bhi.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d011      	beq.n	801d9e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801d9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d9c8:	d106      	bne.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d9ca:	4bb7      	ldr	r3, [pc, #732]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9ce:	4ab6      	ldr	r2, [pc, #728]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d9d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d9d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801d9d6:	e008      	b.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9d8:	2301      	movs	r3, #1
 801d9da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d9de:	e004      	b.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d9e0:	bf00      	nop
 801d9e2:	e002      	b.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d9e4:	bf00      	nop
 801d9e6:	e000      	b.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d9e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d9ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d10a      	bne.n	801da08 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d9f2:	4bad      	ldr	r3, [pc, #692]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d9f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801d9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801da00:	4aa9      	ldr	r2, [pc, #676]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da02:	430b      	orrs	r3, r1
 801da04:	6553      	str	r3, [r2, #84]	; 0x54
 801da06:	e003      	b.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801da0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801da10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801da1c:	653b      	str	r3, [r7, #80]	; 0x50
 801da1e:	2300      	movs	r3, #0
 801da20:	657b      	str	r3, [r7, #84]	; 0x54
 801da22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801da26:	460b      	mov	r3, r1
 801da28:	4313      	orrs	r3, r2
 801da2a:	d009      	beq.n	801da40 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801da2c:	4b9e      	ldr	r3, [pc, #632]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801da34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da3a:	4a9b      	ldr	r2, [pc, #620]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da3c:	430b      	orrs	r3, r1
 801da3e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801da40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da48:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801da4c:	64bb      	str	r3, [r7, #72]	; 0x48
 801da4e:	2300      	movs	r3, #0
 801da50:	64fb      	str	r3, [r7, #76]	; 0x4c
 801da52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801da56:	460b      	mov	r3, r1
 801da58:	4313      	orrs	r3, r2
 801da5a:	d009      	beq.n	801da70 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801da5c:	4b92      	ldr	r3, [pc, #584]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da60:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801da64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801da6a:	4a8f      	ldr	r2, [pc, #572]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da6c:	430b      	orrs	r3, r1
 801da6e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801da70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da78:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801da7c:	643b      	str	r3, [r7, #64]	; 0x40
 801da7e:	2300      	movs	r3, #0
 801da80:	647b      	str	r3, [r7, #68]	; 0x44
 801da82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801da86:	460b      	mov	r3, r1
 801da88:	4313      	orrs	r3, r2
 801da8a:	d00e      	beq.n	801daaa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801da8c:	4b86      	ldr	r3, [pc, #536]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da8e:	691b      	ldr	r3, [r3, #16]
 801da90:	4a85      	ldr	r2, [pc, #532]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801da96:	6113      	str	r3, [r2, #16]
 801da98:	4b83      	ldr	r3, [pc, #524]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801da9a:	6919      	ldr	r1, [r3, #16]
 801da9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801daa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801daa4:	4a80      	ldr	r2, [pc, #512]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801daa6:	430b      	orrs	r3, r1
 801daa8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801daaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801daae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dab2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801dab6:	63bb      	str	r3, [r7, #56]	; 0x38
 801dab8:	2300      	movs	r3, #0
 801daba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dabc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801dac0:	460b      	mov	r3, r1
 801dac2:	4313      	orrs	r3, r2
 801dac4:	d009      	beq.n	801dada <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801dac6:	4b78      	ldr	r3, [pc, #480]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801dac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801daca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801dace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dad4:	4a74      	ldr	r2, [pc, #464]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801dad6:	430b      	orrs	r3, r1
 801dad8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801dada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dae2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801dae6:	633b      	str	r3, [r7, #48]	; 0x30
 801dae8:	2300      	movs	r3, #0
 801daea:	637b      	str	r3, [r7, #52]	; 0x34
 801daec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801daf0:	460b      	mov	r3, r1
 801daf2:	4313      	orrs	r3, r2
 801daf4:	d00a      	beq.n	801db0c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801daf6:	4b6c      	ldr	r3, [pc, #432]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801daf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dafa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801dafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801db06:	4a68      	ldr	r2, [pc, #416]	; (801dca8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801db08:	430b      	orrs	r3, r1
 801db0a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801db0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db14:	2100      	movs	r1, #0
 801db16:	62b9      	str	r1, [r7, #40]	; 0x28
 801db18:	f003 0301 	and.w	r3, r3, #1
 801db1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801db22:	460b      	mov	r3, r1
 801db24:	4313      	orrs	r3, r2
 801db26:	d011      	beq.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801db28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db2c:	3308      	adds	r3, #8
 801db2e:	2100      	movs	r1, #0
 801db30:	4618      	mov	r0, r3
 801db32:	f001 f99d 	bl	801ee70 <RCCEx_PLL2_Config>
 801db36:	4603      	mov	r3, r0
 801db38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801db3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801db40:	2b00      	cmp	r3, #0
 801db42:	d003      	beq.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801db48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801db4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db54:	2100      	movs	r1, #0
 801db56:	6239      	str	r1, [r7, #32]
 801db58:	f003 0302 	and.w	r3, r3, #2
 801db5c:	627b      	str	r3, [r7, #36]	; 0x24
 801db5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801db62:	460b      	mov	r3, r1
 801db64:	4313      	orrs	r3, r2
 801db66:	d011      	beq.n	801db8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db6c:	3308      	adds	r3, #8
 801db6e:	2101      	movs	r1, #1
 801db70:	4618      	mov	r0, r3
 801db72:	f001 f97d 	bl	801ee70 <RCCEx_PLL2_Config>
 801db76:	4603      	mov	r3, r0
 801db78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801db7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801db80:	2b00      	cmp	r3, #0
 801db82:	d003      	beq.n	801db8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801db88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801db8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db94:	2100      	movs	r1, #0
 801db96:	61b9      	str	r1, [r7, #24]
 801db98:	f003 0304 	and.w	r3, r3, #4
 801db9c:	61fb      	str	r3, [r7, #28]
 801db9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801dba2:	460b      	mov	r3, r1
 801dba4:	4313      	orrs	r3, r2
 801dba6:	d011      	beq.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dbac:	3308      	adds	r3, #8
 801dbae:	2102      	movs	r1, #2
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	f001 f95d 	bl	801ee70 <RCCEx_PLL2_Config>
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801dbbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d003      	beq.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dbc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801dbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbd4:	2100      	movs	r1, #0
 801dbd6:	6139      	str	r1, [r7, #16]
 801dbd8:	f003 0308 	and.w	r3, r3, #8
 801dbdc:	617b      	str	r3, [r7, #20]
 801dbde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801dbe2:	460b      	mov	r3, r1
 801dbe4:	4313      	orrs	r3, r2
 801dbe6:	d011      	beq.n	801dc0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dbec:	3328      	adds	r3, #40	; 0x28
 801dbee:	2100      	movs	r1, #0
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	f001 f9ef 	bl	801efd4 <RCCEx_PLL3_Config>
 801dbf6:	4603      	mov	r3, r0
 801dbf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801dbfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d003      	beq.n	801dc0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801dc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc14:	2100      	movs	r1, #0
 801dc16:	60b9      	str	r1, [r7, #8]
 801dc18:	f003 0310 	and.w	r3, r3, #16
 801dc1c:	60fb      	str	r3, [r7, #12]
 801dc1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801dc22:	460b      	mov	r3, r1
 801dc24:	4313      	orrs	r3, r2
 801dc26:	d011      	beq.n	801dc4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dc2c:	3328      	adds	r3, #40	; 0x28
 801dc2e:	2101      	movs	r1, #1
 801dc30:	4618      	mov	r0, r3
 801dc32:	f001 f9cf 	bl	801efd4 <RCCEx_PLL3_Config>
 801dc36:	4603      	mov	r3, r0
 801dc38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801dc3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d003      	beq.n	801dc4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801dc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc54:	2100      	movs	r1, #0
 801dc56:	6039      	str	r1, [r7, #0]
 801dc58:	f003 0320 	and.w	r3, r3, #32
 801dc5c:	607b      	str	r3, [r7, #4]
 801dc5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 801dc62:	460b      	mov	r3, r1
 801dc64:	4313      	orrs	r3, r2
 801dc66:	d011      	beq.n	801dc8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dc6c:	3328      	adds	r3, #40	; 0x28
 801dc6e:	2102      	movs	r1, #2
 801dc70:	4618      	mov	r0, r3
 801dc72:	f001 f9af 	bl	801efd4 <RCCEx_PLL3_Config>
 801dc76:	4603      	mov	r3, r0
 801dc78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801dc7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d003      	beq.n	801dc8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801dc88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801dc8c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d101      	bne.n	801dc98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801dc94:	2300      	movs	r3, #0
 801dc96:	e000      	b.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801dc98:	2301      	movs	r3, #1
}
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801dca0:	46bd      	mov	sp, r7
 801dca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801dca6:	bf00      	nop
 801dca8:	58024400 	.word	0x58024400

0801dcac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801dcac:	b580      	push	{r7, lr}
 801dcae:	b090      	sub	sp, #64	; 0x40
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801dcb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dcba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801dcbe:	430b      	orrs	r3, r1
 801dcc0:	f040 8094 	bne.w	801ddec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801dcc4:	4b9b      	ldr	r3, [pc, #620]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dcc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dcc8:	f003 0307 	and.w	r3, r3, #7
 801dccc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcd0:	2b04      	cmp	r3, #4
 801dcd2:	f200 8087 	bhi.w	801dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801dcd6:	a201      	add	r2, pc, #4	; (adr r2, 801dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801dcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcdc:	0801dcf1 	.word	0x0801dcf1
 801dce0:	0801dd19 	.word	0x0801dd19
 801dce4:	0801dd41 	.word	0x0801dd41
 801dce8:	0801dddd 	.word	0x0801dddd
 801dcec:	0801dd69 	.word	0x0801dd69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801dcf0:	4b90      	ldr	r3, [pc, #576]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dcf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801dcfc:	d108      	bne.n	801dd10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801dcfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dd02:	4618      	mov	r0, r3
 801dd04:	f000 ff62 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd0c:	f000 bc93 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd10:	2300      	movs	r3, #0
 801dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd14:	f000 bc8f 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801dd18:	4b86      	ldr	r3, [pc, #536]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dd20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dd24:	d108      	bne.n	801dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801dd26:	f107 0318 	add.w	r3, r7, #24
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f000 fca6 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801dd30:	69bb      	ldr	r3, [r7, #24]
 801dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd34:	f000 bc7f 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd38:	2300      	movs	r3, #0
 801dd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd3c:	f000 bc7b 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801dd40:	4b7c      	ldr	r3, [pc, #496]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dd48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dd4c:	d108      	bne.n	801dd60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dd4e:	f107 030c 	add.w	r3, r7, #12
 801dd52:	4618      	mov	r0, r3
 801dd54:	f000 fde6 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd5c:	f000 bc6b 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd60:	2300      	movs	r3, #0
 801dd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd64:	f000 bc67 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801dd68:	4b72      	ldr	r3, [pc, #456]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dd6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801dd70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801dd72:	4b70      	ldr	r3, [pc, #448]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	f003 0304 	and.w	r3, r3, #4
 801dd7a:	2b04      	cmp	r3, #4
 801dd7c:	d10c      	bne.n	801dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801dd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d109      	bne.n	801dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dd84:	4b6b      	ldr	r3, [pc, #428]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	08db      	lsrs	r3, r3, #3
 801dd8a:	f003 0303 	and.w	r3, r3, #3
 801dd8e:	4a6a      	ldr	r2, [pc, #424]	; (801df38 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801dd90:	fa22 f303 	lsr.w	r3, r2, r3
 801dd94:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd96:	e01f      	b.n	801ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dd98:	4b66      	ldr	r3, [pc, #408]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dda0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dda4:	d106      	bne.n	801ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801dda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dda8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ddac:	d102      	bne.n	801ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ddae:	4b63      	ldr	r3, [pc, #396]	; (801df3c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddb2:	e011      	b.n	801ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ddb4:	4b5f      	ldr	r3, [pc, #380]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ddbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801ddc0:	d106      	bne.n	801ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ddc8:	d102      	bne.n	801ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ddca:	4b5d      	ldr	r3, [pc, #372]	; (801df40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801ddcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddce:	e003      	b.n	801ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801ddd4:	f000 bc2f 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801ddd8:	f000 bc2d 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801dddc:	4b59      	ldr	r3, [pc, #356]	; (801df44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dde0:	f000 bc29 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801dde4:	2300      	movs	r3, #0
 801dde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dde8:	f000 bc25 	b.w	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801ddec:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ddf0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801ddf4:	430b      	orrs	r3, r1
 801ddf6:	f040 80a7 	bne.w	801df48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801ddfa:	4b4e      	ldr	r3, [pc, #312]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801ddfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ddfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801de02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801de0a:	d054      	beq.n	801deb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801de0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801de12:	f200 808b 	bhi.w	801df2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801de1c:	f000 8083 	beq.w	801df26 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801de20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801de26:	f200 8081 	bhi.w	801df2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801de30:	d02f      	beq.n	801de92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801de38:	d878      	bhi.n	801df2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d004      	beq.n	801de4a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801de46:	d012      	beq.n	801de6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801de48:	e070      	b.n	801df2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801de4a:	4b3a      	ldr	r3, [pc, #232]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801de52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801de56:	d107      	bne.n	801de68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801de58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801de5c:	4618      	mov	r0, r3
 801de5e:	f000 feb5 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de66:	e3e6      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801de68:	2300      	movs	r3, #0
 801de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de6c:	e3e3      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801de6e:	4b31      	ldr	r3, [pc, #196]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801de76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801de7a:	d107      	bne.n	801de8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801de7c:	f107 0318 	add.w	r3, r7, #24
 801de80:	4618      	mov	r0, r3
 801de82:	f000 fbfb 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801de86:	69bb      	ldr	r3, [r7, #24]
 801de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de8a:	e3d4      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801de8c:	2300      	movs	r3, #0
 801de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de90:	e3d1      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801de92:	4b28      	ldr	r3, [pc, #160]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801de9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801de9e:	d107      	bne.n	801deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dea0:	f107 030c 	add.w	r3, r7, #12
 801dea4:	4618      	mov	r0, r3
 801dea6:	f000 fd3d 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801deae:	e3c2      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801deb0:	2300      	movs	r3, #0
 801deb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801deb4:	e3bf      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801deb6:	4b1f      	ldr	r3, [pc, #124]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801deb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801deba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801debe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801dec0:	4b1c      	ldr	r3, [pc, #112]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	f003 0304 	and.w	r3, r3, #4
 801dec8:	2b04      	cmp	r3, #4
 801deca:	d10c      	bne.n	801dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801decc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d109      	bne.n	801dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ded2:	4b18      	ldr	r3, [pc, #96]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	08db      	lsrs	r3, r3, #3
 801ded8:	f003 0303 	and.w	r3, r3, #3
 801dedc:	4a16      	ldr	r2, [pc, #88]	; (801df38 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801dede:	fa22 f303 	lsr.w	r3, r2, r3
 801dee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dee4:	e01e      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dee6:	4b13      	ldr	r3, [pc, #76]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801deee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801def2:	d106      	bne.n	801df02 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801def4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801def6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801defa:	d102      	bne.n	801df02 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801defc:	4b0f      	ldr	r3, [pc, #60]	; (801df3c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801defe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801df00:	e010      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801df02:	4b0c      	ldr	r3, [pc, #48]	; (801df34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801df0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801df0e:	d106      	bne.n	801df1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801df10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801df16:	d102      	bne.n	801df1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801df18:	4b09      	ldr	r3, [pc, #36]	; (801df40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801df1c:	e002      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801df1e:	2300      	movs	r3, #0
 801df20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801df22:	e388      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801df24:	e387      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801df26:	4b07      	ldr	r3, [pc, #28]	; (801df44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801df28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801df2a:	e384      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801df2c:	2300      	movs	r3, #0
 801df2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801df30:	e381      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801df32:	bf00      	nop
 801df34:	58024400 	.word	0x58024400
 801df38:	03d09000 	.word	0x03d09000
 801df3c:	003d0900 	.word	0x003d0900
 801df40:	007a1200 	.word	0x007a1200
 801df44:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801df48:	e9d7 2300 	ldrd	r2, r3, [r7]
 801df4c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801df50:	430b      	orrs	r3, r1
 801df52:	f040 809c 	bne.w	801e08e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801df56:	4b9e      	ldr	r3, [pc, #632]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801df58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801df5a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801df5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801df60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801df66:	d054      	beq.n	801e012 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801df68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801df6e:	f200 808b 	bhi.w	801e088 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801df78:	f000 8083 	beq.w	801e082 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801df82:	f200 8081 	bhi.w	801e088 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801df8c:	d02f      	beq.n	801dfee <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801df94:	d878      	bhi.n	801e088 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d004      	beq.n	801dfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801dfa2:	d012      	beq.n	801dfca <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801dfa4:	e070      	b.n	801e088 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801dfa6:	4b8a      	ldr	r3, [pc, #552]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dfae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801dfb2:	d107      	bne.n	801dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801dfb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f000 fe07 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfc2:	e338      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dfc8:	e335      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801dfca:	4b81      	ldr	r3, [pc, #516]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dfd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dfd6:	d107      	bne.n	801dfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801dfd8:	f107 0318 	add.w	r3, r7, #24
 801dfdc:	4618      	mov	r0, r3
 801dfde:	f000 fb4d 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801dfe2:	69bb      	ldr	r3, [r7, #24]
 801dfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfe6:	e326      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dfe8:	2300      	movs	r3, #0
 801dfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dfec:	e323      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801dfee:	4b78      	ldr	r3, [pc, #480]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dffa:	d107      	bne.n	801e00c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dffc:	f107 030c 	add.w	r3, r7, #12
 801e000:	4618      	mov	r0, r3
 801e002:	f000 fc8f 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e00a:	e314      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e00c:	2300      	movs	r3, #0
 801e00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e010:	e311      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e012:	4b6f      	ldr	r3, [pc, #444]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801e01a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e01c:	4b6c      	ldr	r3, [pc, #432]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	f003 0304 	and.w	r3, r3, #4
 801e024:	2b04      	cmp	r3, #4
 801e026:	d10c      	bne.n	801e042 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801e028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d109      	bne.n	801e042 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e02e:	4b68      	ldr	r3, [pc, #416]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	08db      	lsrs	r3, r3, #3
 801e034:	f003 0303 	and.w	r3, r3, #3
 801e038:	4a66      	ldr	r2, [pc, #408]	; (801e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801e03a:	fa22 f303 	lsr.w	r3, r2, r3
 801e03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e040:	e01e      	b.n	801e080 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e042:	4b63      	ldr	r3, [pc, #396]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e04e:	d106      	bne.n	801e05e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801e050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e056:	d102      	bne.n	801e05e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e058:	4b5f      	ldr	r3, [pc, #380]	; (801e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e05c:	e010      	b.n	801e080 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e05e:	4b5c      	ldr	r3, [pc, #368]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e06a:	d106      	bne.n	801e07a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801e06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e072:	d102      	bne.n	801e07a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e074:	4b59      	ldr	r3, [pc, #356]	; (801e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e076:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e078:	e002      	b.n	801e080 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e07a:	2300      	movs	r3, #0
 801e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801e07e:	e2da      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801e080:	e2d9      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e082:	4b57      	ldr	r3, [pc, #348]	; (801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e086:	e2d6      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801e088:	2300      	movs	r3, #0
 801e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e08c:	e2d3      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801e08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e092:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801e096:	430b      	orrs	r3, r1
 801e098:	f040 80a7 	bne.w	801e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801e09c:	4b4c      	ldr	r3, [pc, #304]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e0a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801e0a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e0ac:	d055      	beq.n	801e15a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e0b4:	f200 8096 	bhi.w	801e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801e0be:	f000 8084 	beq.w	801e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801e0c8:	f200 808c 	bhi.w	801e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e0d2:	d030      	beq.n	801e136 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e0da:	f200 8083 	bhi.w	801e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d004      	beq.n	801e0ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e0ea:	d012      	beq.n	801e112 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801e0ec:	e07a      	b.n	801e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e0ee:	4b38      	ldr	r3, [pc, #224]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801e0fa:	d107      	bne.n	801e10c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e100:	4618      	mov	r0, r3
 801e102:	f000 fd63 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e10a:	e294      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e10c:	2300      	movs	r3, #0
 801e10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e110:	e291      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e112:	4b2f      	ldr	r3, [pc, #188]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e11a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e11e:	d107      	bne.n	801e130 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e120:	f107 0318 	add.w	r3, r7, #24
 801e124:	4618      	mov	r0, r3
 801e126:	f000 faa9 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e12a:	69bb      	ldr	r3, [r7, #24]
 801e12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e12e:	e282      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e130:	2300      	movs	r3, #0
 801e132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e134:	e27f      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e136:	4b26      	ldr	r3, [pc, #152]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e142:	d107      	bne.n	801e154 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e144:	f107 030c 	add.w	r3, r7, #12
 801e148:	4618      	mov	r0, r3
 801e14a:	f000 fbeb 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e152:	e270      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e154:	2300      	movs	r3, #0
 801e156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e158:	e26d      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e15a:	4b1d      	ldr	r3, [pc, #116]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e15e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801e162:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e164:	4b1a      	ldr	r3, [pc, #104]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	f003 0304 	and.w	r3, r3, #4
 801e16c:	2b04      	cmp	r3, #4
 801e16e:	d10c      	bne.n	801e18a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801e170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e172:	2b00      	cmp	r3, #0
 801e174:	d109      	bne.n	801e18a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e176:	4b16      	ldr	r3, [pc, #88]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	08db      	lsrs	r3, r3, #3
 801e17c:	f003 0303 	and.w	r3, r3, #3
 801e180:	4a14      	ldr	r2, [pc, #80]	; (801e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801e182:	fa22 f303 	lsr.w	r3, r2, r3
 801e186:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e188:	e01e      	b.n	801e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e18a:	4b11      	ldr	r3, [pc, #68]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e196:	d106      	bne.n	801e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801e198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e19e:	d102      	bne.n	801e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e1a0:	4b0d      	ldr	r3, [pc, #52]	; (801e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801e1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e1a4:	e010      	b.n	801e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e1a6:	4b0a      	ldr	r3, [pc, #40]	; (801e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e1ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e1b2:	d106      	bne.n	801e1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801e1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e1ba:	d102      	bne.n	801e1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e1bc:	4b07      	ldr	r3, [pc, #28]	; (801e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e1c0:	e002      	b.n	801e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801e1c6:	e236      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801e1c8:	e235      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e1ca:	4b05      	ldr	r3, [pc, #20]	; (801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e1ce:	e232      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801e1d0:	58024400 	.word	0x58024400
 801e1d4:	03d09000 	.word	0x03d09000
 801e1d8:	003d0900 	.word	0x003d0900
 801e1dc:	007a1200 	.word	0x007a1200
 801e1e0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e1e8:	e225      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801e1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e1ee:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801e1f2:	430b      	orrs	r3, r1
 801e1f4:	f040 8085 	bne.w	801e302 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801e1f8:	4b9c      	ldr	r3, [pc, #624]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e1fc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801e200:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801e208:	d06b      	beq.n	801e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e20c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801e210:	d874      	bhi.n	801e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801e218:	d056      	beq.n	801e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e21c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801e220:	d86c      	bhi.n	801e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801e228:	d03b      	beq.n	801e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801e22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e22c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801e230:	d864      	bhi.n	801e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e238:	d021      	beq.n	801e27e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e240:	d85c      	bhi.n	801e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e244:	2b00      	cmp	r3, #0
 801e246:	d004      	beq.n	801e252 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e24e:	d004      	beq.n	801e25a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801e250:	e054      	b.n	801e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801e252:	f7fe fb75 	bl	801c940 <HAL_RCC_GetPCLK1Freq>
 801e256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801e258:	e1ed      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e25a:	4b84      	ldr	r3, [pc, #528]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e266:	d107      	bne.n	801e278 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e268:	f107 0318 	add.w	r3, r7, #24
 801e26c:	4618      	mov	r0, r3
 801e26e:	f000 fa05 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e272:	69fb      	ldr	r3, [r7, #28]
 801e274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e276:	e1de      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e278:	2300      	movs	r3, #0
 801e27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e27c:	e1db      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e27e:	4b7b      	ldr	r3, [pc, #492]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e28a:	d107      	bne.n	801e29c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e28c:	f107 030c 	add.w	r3, r7, #12
 801e290:	4618      	mov	r0, r3
 801e292:	f000 fb47 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e296:	693b      	ldr	r3, [r7, #16]
 801e298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e29a:	e1cc      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e29c:	2300      	movs	r3, #0
 801e29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e2a0:	e1c9      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e2a2:	4b72      	ldr	r3, [pc, #456]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	f003 0304 	and.w	r3, r3, #4
 801e2aa:	2b04      	cmp	r3, #4
 801e2ac:	d109      	bne.n	801e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e2ae:	4b6f      	ldr	r3, [pc, #444]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	08db      	lsrs	r3, r3, #3
 801e2b4:	f003 0303 	and.w	r3, r3, #3
 801e2b8:	4a6d      	ldr	r2, [pc, #436]	; (801e470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801e2ba:	fa22 f303 	lsr.w	r3, r2, r3
 801e2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e2c0:	e1b9      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e2c6:	e1b6      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e2c8:	4b68      	ldr	r3, [pc, #416]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e2d4:	d102      	bne.n	801e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801e2d6:	4b67      	ldr	r3, [pc, #412]	; (801e474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801e2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e2da:	e1ac      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e2dc:	2300      	movs	r3, #0
 801e2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e2e0:	e1a9      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e2e2:	4b62      	ldr	r3, [pc, #392]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e2ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e2ee:	d102      	bne.n	801e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801e2f0:	4b61      	ldr	r3, [pc, #388]	; (801e478 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801e2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e2f4:	e19f      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e2f6:	2300      	movs	r3, #0
 801e2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e2fa:	e19c      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e300:	e199      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801e302:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e306:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801e30a:	430b      	orrs	r3, r1
 801e30c:	d173      	bne.n	801e3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801e30e:	4b57      	ldr	r3, [pc, #348]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e312:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801e316:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801e318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e31e:	d02f      	beq.n	801e380 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e326:	d863      	bhi.n	801e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d004      	beq.n	801e338 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e334:	d012      	beq.n	801e35c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801e336:	e05b      	b.n	801e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e338:	4b4c      	ldr	r3, [pc, #304]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e344:	d107      	bne.n	801e356 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e346:	f107 0318 	add.w	r3, r7, #24
 801e34a:	4618      	mov	r0, r3
 801e34c:	f000 f996 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e350:	69bb      	ldr	r3, [r7, #24]
 801e352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e354:	e16f      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e356:	2300      	movs	r3, #0
 801e358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e35a:	e16c      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e35c:	4b43      	ldr	r3, [pc, #268]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e368:	d107      	bne.n	801e37a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e36a:	f107 030c 	add.w	r3, r7, #12
 801e36e:	4618      	mov	r0, r3
 801e370:	f000 fad8 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801e374:	697b      	ldr	r3, [r7, #20]
 801e376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e378:	e15d      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e37a:	2300      	movs	r3, #0
 801e37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e37e:	e15a      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e380:	4b3a      	ldr	r3, [pc, #232]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801e388:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e38a:	4b38      	ldr	r3, [pc, #224]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	f003 0304 	and.w	r3, r3, #4
 801e392:	2b04      	cmp	r3, #4
 801e394:	d10c      	bne.n	801e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801e396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d109      	bne.n	801e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e39c:	4b33      	ldr	r3, [pc, #204]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	08db      	lsrs	r3, r3, #3
 801e3a2:	f003 0303 	and.w	r3, r3, #3
 801e3a6:	4a32      	ldr	r2, [pc, #200]	; (801e470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801e3a8:	fa22 f303 	lsr.w	r3, r2, r3
 801e3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e3ae:	e01e      	b.n	801e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e3b0:	4b2e      	ldr	r3, [pc, #184]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e3bc:	d106      	bne.n	801e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e3c4:	d102      	bne.n	801e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e3c6:	4b2b      	ldr	r3, [pc, #172]	; (801e474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801e3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e3ca:	e010      	b.n	801e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e3cc:	4b27      	ldr	r3, [pc, #156]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e3d8:	d106      	bne.n	801e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e3e0:	d102      	bne.n	801e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e3e2:	4b25      	ldr	r3, [pc, #148]	; (801e478 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e3e6:	e002      	b.n	801e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801e3ec:	e123      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801e3ee:	e122      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e3f4:	e11f      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801e3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e3fa:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801e3fe:	430b      	orrs	r3, r1
 801e400:	d13c      	bne.n	801e47c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801e402:	4b1a      	ldr	r3, [pc, #104]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e40a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d004      	beq.n	801e41c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e418:	d012      	beq.n	801e440 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801e41a:	e023      	b.n	801e464 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e41c:	4b13      	ldr	r3, [pc, #76]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801e428:	d107      	bne.n	801e43a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e42e:	4618      	mov	r0, r3
 801e430:	f000 fbcc 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e438:	e0fd      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e43a:	2300      	movs	r3, #0
 801e43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e43e:	e0fa      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e440:	4b0a      	ldr	r3, [pc, #40]	; (801e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e44c:	d107      	bne.n	801e45e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e44e:	f107 0318 	add.w	r3, r7, #24
 801e452:	4618      	mov	r0, r3
 801e454:	f000 f912 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801e458:	6a3b      	ldr	r3, [r7, #32]
 801e45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e45c:	e0eb      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e45e:	2300      	movs	r3, #0
 801e460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e462:	e0e8      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801e464:	2300      	movs	r3, #0
 801e466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e468:	e0e5      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801e46a:	bf00      	nop
 801e46c:	58024400 	.word	0x58024400
 801e470:	03d09000 	.word	0x03d09000
 801e474:	003d0900 	.word	0x003d0900
 801e478:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801e47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e480:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801e484:	430b      	orrs	r3, r1
 801e486:	f040 8085 	bne.w	801e594 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801e48a:	4b6d      	ldr	r3, [pc, #436]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e48e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801e492:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801e49a:	d06b      	beq.n	801e574 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e49e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801e4a2:	d874      	bhi.n	801e58e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e4aa:	d056      	beq.n	801e55a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801e4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e4b2:	d86c      	bhi.n	801e58e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801e4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801e4ba:	d03b      	beq.n	801e534 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801e4c2:	d864      	bhi.n	801e58e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e4ca:	d021      	beq.n	801e510 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e4d2:	d85c      	bhi.n	801e58e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d004      	beq.n	801e4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801e4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e4e0:	d004      	beq.n	801e4ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801e4e2:	e054      	b.n	801e58e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801e4e4:	f000 f8b4 	bl	801e650 <HAL_RCCEx_GetD3PCLK1Freq>
 801e4e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801e4ea:	e0a4      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e4ec:	4b54      	ldr	r3, [pc, #336]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e4f8:	d107      	bne.n	801e50a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e4fa:	f107 0318 	add.w	r3, r7, #24
 801e4fe:	4618      	mov	r0, r3
 801e500:	f000 f8bc 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e504:	69fb      	ldr	r3, [r7, #28]
 801e506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e508:	e095      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e50a:	2300      	movs	r3, #0
 801e50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e50e:	e092      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e510:	4b4b      	ldr	r3, [pc, #300]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e51c:	d107      	bne.n	801e52e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e51e:	f107 030c 	add.w	r3, r7, #12
 801e522:	4618      	mov	r0, r3
 801e524:	f000 f9fe 	bl	801e924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e528:	693b      	ldr	r3, [r7, #16]
 801e52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e52c:	e083      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e52e:	2300      	movs	r3, #0
 801e530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e532:	e080      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e534:	4b42      	ldr	r3, [pc, #264]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	f003 0304 	and.w	r3, r3, #4
 801e53c:	2b04      	cmp	r3, #4
 801e53e:	d109      	bne.n	801e554 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e540:	4b3f      	ldr	r3, [pc, #252]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	08db      	lsrs	r3, r3, #3
 801e546:	f003 0303 	and.w	r3, r3, #3
 801e54a:	4a3e      	ldr	r2, [pc, #248]	; (801e644 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801e54c:	fa22 f303 	lsr.w	r3, r2, r3
 801e550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e552:	e070      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e554:	2300      	movs	r3, #0
 801e556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e558:	e06d      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e55a:	4b39      	ldr	r3, [pc, #228]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e566:	d102      	bne.n	801e56e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801e568:	4b37      	ldr	r3, [pc, #220]	; (801e648 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e56c:	e063      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e56e:	2300      	movs	r3, #0
 801e570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e572:	e060      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e574:	4b32      	ldr	r3, [pc, #200]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e580:	d102      	bne.n	801e588 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801e582:	4b32      	ldr	r3, [pc, #200]	; (801e64c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801e584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e586:	e056      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e588:	2300      	movs	r3, #0
 801e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e58c:	e053      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801e58e:	2300      	movs	r3, #0
 801e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e592:	e050      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801e594:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e598:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801e59c:	430b      	orrs	r3, r1
 801e59e:	d148      	bne.n	801e632 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801e5a0:	4b27      	ldr	r3, [pc, #156]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e5a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801e5a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e5b0:	d02a      	beq.n	801e608 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e5b8:	d838      	bhi.n	801e62c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d004      	beq.n	801e5ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e5c6:	d00d      	beq.n	801e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801e5c8:	e030      	b.n	801e62c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e5ca:	4b1d      	ldr	r3, [pc, #116]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e5d6:	d102      	bne.n	801e5de <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801e5d8:	4b1c      	ldr	r3, [pc, #112]	; (801e64c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e5dc:	e02b      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e5de:	2300      	movs	r3, #0
 801e5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e5e2:	e028      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e5e4:	4b16      	ldr	r3, [pc, #88]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e5ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801e5f0:	d107      	bne.n	801e602 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e5f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f000 fae8 	bl	801ebcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e600:	e019      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e602:	2300      	movs	r3, #0
 801e604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e606:	e016      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e608:	4b0d      	ldr	r3, [pc, #52]	; (801e640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e614:	d107      	bne.n	801e626 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e616:	f107 0318 	add.w	r3, r7, #24
 801e61a:	4618      	mov	r0, r3
 801e61c:	f000 f82e 	bl	801e67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e620:	69fb      	ldr	r3, [r7, #28]
 801e622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e624:	e007      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e626:	2300      	movs	r3, #0
 801e628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e62a:	e004      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801e62c:	2300      	movs	r3, #0
 801e62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e630:	e001      	b.n	801e636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801e632:	2300      	movs	r3, #0
 801e634:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801e636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801e638:	4618      	mov	r0, r3
 801e63a:	3740      	adds	r7, #64	; 0x40
 801e63c:	46bd      	mov	sp, r7
 801e63e:	bd80      	pop	{r7, pc}
 801e640:	58024400 	.word	0x58024400
 801e644:	03d09000 	.word	0x03d09000
 801e648:	003d0900 	.word	0x003d0900
 801e64c:	007a1200 	.word	0x007a1200

0801e650 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e650:	b580      	push	{r7, lr}
 801e652:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e654:	f7fe f944 	bl	801c8e0 <HAL_RCC_GetHCLKFreq>
 801e658:	4602      	mov	r2, r0
 801e65a:	4b06      	ldr	r3, [pc, #24]	; (801e674 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e65c:	6a1b      	ldr	r3, [r3, #32]
 801e65e:	091b      	lsrs	r3, r3, #4
 801e660:	f003 0307 	and.w	r3, r3, #7
 801e664:	4904      	ldr	r1, [pc, #16]	; (801e678 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e666:	5ccb      	ldrb	r3, [r1, r3]
 801e668:	f003 031f 	and.w	r3, r3, #31
 801e66c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e670:	4618      	mov	r0, r3
 801e672:	bd80      	pop	{r7, pc}
 801e674:	58024400 	.word	0x58024400
 801e678:	080218c4 	.word	0x080218c4

0801e67c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e67c:	b480      	push	{r7}
 801e67e:	b089      	sub	sp, #36	; 0x24
 801e680:	af00      	add	r7, sp, #0
 801e682:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e684:	4ba1      	ldr	r3, [pc, #644]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e688:	f003 0303 	and.w	r3, r3, #3
 801e68c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e68e:	4b9f      	ldr	r3, [pc, #636]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e692:	0b1b      	lsrs	r3, r3, #12
 801e694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e698:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e69a:	4b9c      	ldr	r3, [pc, #624]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e69e:	091b      	lsrs	r3, r3, #4
 801e6a0:	f003 0301 	and.w	r3, r3, #1
 801e6a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e6a6:	4b99      	ldr	r3, [pc, #612]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6aa:	08db      	lsrs	r3, r3, #3
 801e6ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6b0:	693a      	ldr	r2, [r7, #16]
 801e6b2:	fb02 f303 	mul.w	r3, r2, r3
 801e6b6:	ee07 3a90 	vmov	s15, r3
 801e6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e6c2:	697b      	ldr	r3, [r7, #20]
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	f000 8111 	beq.w	801e8ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e6ca:	69bb      	ldr	r3, [r7, #24]
 801e6cc:	2b02      	cmp	r3, #2
 801e6ce:	f000 8083 	beq.w	801e7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e6d2:	69bb      	ldr	r3, [r7, #24]
 801e6d4:	2b02      	cmp	r3, #2
 801e6d6:	f200 80a1 	bhi.w	801e81c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e6da:	69bb      	ldr	r3, [r7, #24]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d003      	beq.n	801e6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e6e0:	69bb      	ldr	r3, [r7, #24]
 801e6e2:	2b01      	cmp	r3, #1
 801e6e4:	d056      	beq.n	801e794 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e6e6:	e099      	b.n	801e81c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e6e8:	4b88      	ldr	r3, [pc, #544]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	f003 0320 	and.w	r3, r3, #32
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	d02d      	beq.n	801e750 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e6f4:	4b85      	ldr	r3, [pc, #532]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	08db      	lsrs	r3, r3, #3
 801e6fa:	f003 0303 	and.w	r3, r3, #3
 801e6fe:	4a84      	ldr	r2, [pc, #528]	; (801e910 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e700:	fa22 f303 	lsr.w	r3, r2, r3
 801e704:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e706:	68bb      	ldr	r3, [r7, #8]
 801e708:	ee07 3a90 	vmov	s15, r3
 801e70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e710:	697b      	ldr	r3, [r7, #20]
 801e712:	ee07 3a90 	vmov	s15, r3
 801e716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e71e:	4b7b      	ldr	r3, [pc, #492]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e726:	ee07 3a90 	vmov	s15, r3
 801e72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e72e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e732:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e746:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e74a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e74e:	e087      	b.n	801e860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e750:	697b      	ldr	r3, [r7, #20]
 801e752:	ee07 3a90 	vmov	s15, r3
 801e756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e75a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e918 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e762:	4b6a      	ldr	r3, [pc, #424]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e76a:	ee07 3a90 	vmov	s15, r3
 801e76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e772:	ed97 6a03 	vldr	s12, [r7, #12]
 801e776:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e78e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e792:	e065      	b.n	801e860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e794:	697b      	ldr	r3, [r7, #20]
 801e796:	ee07 3a90 	vmov	s15, r3
 801e79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e79e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e91c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e7a6:	4b59      	ldr	r3, [pc, #356]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e7ae:	ee07 3a90 	vmov	s15, r3
 801e7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e7ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e7d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e7d6:	e043      	b.n	801e860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e7d8:	697b      	ldr	r3, [r7, #20]
 801e7da:	ee07 3a90 	vmov	s15, r3
 801e7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e7ea:	4b48      	ldr	r3, [pc, #288]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e7f2:	ee07 3a90 	vmov	s15, r3
 801e7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e7fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e812:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e81a:	e021      	b.n	801e860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e81c:	697b      	ldr	r3, [r7, #20]
 801e81e:	ee07 3a90 	vmov	s15, r3
 801e822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e826:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e91c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e82e:	4b37      	ldr	r3, [pc, #220]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e836:	ee07 3a90 	vmov	s15, r3
 801e83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e83e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e842:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e856:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e85a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e85e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e860:	4b2a      	ldr	r3, [pc, #168]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e864:	0a5b      	lsrs	r3, r3, #9
 801e866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e86a:	ee07 3a90 	vmov	s15, r3
 801e86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e876:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e87a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e886:	ee17 2a90 	vmov	r2, s15
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e88e:	4b1f      	ldr	r3, [pc, #124]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e892:	0c1b      	lsrs	r3, r3, #16
 801e894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e898:	ee07 3a90 	vmov	s15, r3
 801e89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e8a8:	edd7 6a07 	vldr	s13, [r7, #28]
 801e8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e8b4:	ee17 2a90 	vmov	r2, s15
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e8bc:	4b13      	ldr	r3, [pc, #76]	; (801e90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8c0:	0e1b      	lsrs	r3, r3, #24
 801e8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e8c6:	ee07 3a90 	vmov	s15, r3
 801e8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e8d6:	edd7 6a07 	vldr	s13, [r7, #28]
 801e8da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e8de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e8e2:	ee17 2a90 	vmov	r2, s15
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e8ea:	e008      	b.n	801e8fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	2200      	movs	r2, #0
 801e8f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	609a      	str	r2, [r3, #8]
}
 801e8fe:	bf00      	nop
 801e900:	3724      	adds	r7, #36	; 0x24
 801e902:	46bd      	mov	sp, r7
 801e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e908:	4770      	bx	lr
 801e90a:	bf00      	nop
 801e90c:	58024400 	.word	0x58024400
 801e910:	03d09000 	.word	0x03d09000
 801e914:	46000000 	.word	0x46000000
 801e918:	4c742400 	.word	0x4c742400
 801e91c:	4a742400 	.word	0x4a742400
 801e920:	4af42400 	.word	0x4af42400

0801e924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e924:	b480      	push	{r7}
 801e926:	b089      	sub	sp, #36	; 0x24
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e92c:	4ba1      	ldr	r3, [pc, #644]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e930:	f003 0303 	and.w	r3, r3, #3
 801e934:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e936:	4b9f      	ldr	r3, [pc, #636]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e93a:	0d1b      	lsrs	r3, r3, #20
 801e93c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e940:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e942:	4b9c      	ldr	r3, [pc, #624]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e946:	0a1b      	lsrs	r3, r3, #8
 801e948:	f003 0301 	and.w	r3, r3, #1
 801e94c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e94e:	4b99      	ldr	r3, [pc, #612]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e952:	08db      	lsrs	r3, r3, #3
 801e954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e958:	693a      	ldr	r2, [r7, #16]
 801e95a:	fb02 f303 	mul.w	r3, r2, r3
 801e95e:	ee07 3a90 	vmov	s15, r3
 801e962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	f000 8111 	beq.w	801eb94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e972:	69bb      	ldr	r3, [r7, #24]
 801e974:	2b02      	cmp	r3, #2
 801e976:	f000 8083 	beq.w	801ea80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e97a:	69bb      	ldr	r3, [r7, #24]
 801e97c:	2b02      	cmp	r3, #2
 801e97e:	f200 80a1 	bhi.w	801eac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e982:	69bb      	ldr	r3, [r7, #24]
 801e984:	2b00      	cmp	r3, #0
 801e986:	d003      	beq.n	801e990 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	2b01      	cmp	r3, #1
 801e98c:	d056      	beq.n	801ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e98e:	e099      	b.n	801eac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e990:	4b88      	ldr	r3, [pc, #544]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	f003 0320 	and.w	r3, r3, #32
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d02d      	beq.n	801e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e99c:	4b85      	ldr	r3, [pc, #532]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	08db      	lsrs	r3, r3, #3
 801e9a2:	f003 0303 	and.w	r3, r3, #3
 801e9a6:	4a84      	ldr	r2, [pc, #528]	; (801ebb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e9a8:	fa22 f303 	lsr.w	r3, r2, r3
 801e9ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e9ae:	68bb      	ldr	r3, [r7, #8]
 801e9b0:	ee07 3a90 	vmov	s15, r3
 801e9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	ee07 3a90 	vmov	s15, r3
 801e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9c6:	4b7b      	ldr	r3, [pc, #492]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9ce:	ee07 3a90 	vmov	s15, r3
 801e9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9da:	eddf 5a78 	vldr	s11, [pc, #480]	; 801ebbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e9f6:	e087      	b.n	801eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e9f8:	697b      	ldr	r3, [r7, #20]
 801e9fa:	ee07 3a90 	vmov	s15, r3
 801e9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801ebc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ea06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea0a:	4b6a      	ldr	r3, [pc, #424]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea12:	ee07 3a90 	vmov	s15, r3
 801ea16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801ebbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ea22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea3a:	e065      	b.n	801eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ea3c:	697b      	ldr	r3, [r7, #20]
 801ea3e:	ee07 3a90 	vmov	s15, r3
 801ea42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801ebc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ea4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea4e:	4b59      	ldr	r3, [pc, #356]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea56:	ee07 3a90 	vmov	s15, r3
 801ea5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea62:	eddf 5a56 	vldr	s11, [pc, #344]	; 801ebbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ea66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea7e:	e043      	b.n	801eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	ee07 3a90 	vmov	s15, r3
 801ea86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801ebc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ea8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea92:	4b48      	ldr	r3, [pc, #288]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea9a:	ee07 3a90 	vmov	s15, r3
 801ea9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eaa2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801ebbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801eaaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eaae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eaba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eac2:	e021      	b.n	801eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801eac4:	697b      	ldr	r3, [r7, #20]
 801eac6:	ee07 3a90 	vmov	s15, r3
 801eaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eace:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801ebc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ead2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ead6:	4b37      	ldr	r3, [pc, #220]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ead8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eade:	ee07 3a90 	vmov	s15, r3
 801eae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eae6:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaea:	eddf 5a34 	vldr	s11, [pc, #208]	; 801ebbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801eaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801eb08:	4b2a      	ldr	r3, [pc, #168]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb0c:	0a5b      	lsrs	r3, r3, #9
 801eb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801eb12:	ee07 3a90 	vmov	s15, r3
 801eb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb22:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb2e:	ee17 2a90 	vmov	r2, s15
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801eb36:	4b1f      	ldr	r3, [pc, #124]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb3a:	0c1b      	lsrs	r3, r3, #16
 801eb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801eb40:	ee07 3a90 	vmov	s15, r3
 801eb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb50:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb5c:	ee17 2a90 	vmov	r2, s15
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801eb64:	4b13      	ldr	r3, [pc, #76]	; (801ebb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb68:	0e1b      	lsrs	r3, r3, #24
 801eb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801eb6e:	ee07 3a90 	vmov	s15, r3
 801eb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb7e:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb8a:	ee17 2a90 	vmov	r2, s15
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801eb92:	e008      	b.n	801eba6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	2200      	movs	r2, #0
 801eb98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	2200      	movs	r2, #0
 801eb9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2200      	movs	r2, #0
 801eba4:	609a      	str	r2, [r3, #8]
}
 801eba6:	bf00      	nop
 801eba8:	3724      	adds	r7, #36	; 0x24
 801ebaa:	46bd      	mov	sp, r7
 801ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebb0:	4770      	bx	lr
 801ebb2:	bf00      	nop
 801ebb4:	58024400 	.word	0x58024400
 801ebb8:	03d09000 	.word	0x03d09000
 801ebbc:	46000000 	.word	0x46000000
 801ebc0:	4c742400 	.word	0x4c742400
 801ebc4:	4a742400 	.word	0x4a742400
 801ebc8:	4af42400 	.word	0x4af42400

0801ebcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801ebcc:	b480      	push	{r7}
 801ebce:	b089      	sub	sp, #36	; 0x24
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ebd4:	4ba0      	ldr	r3, [pc, #640]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ebd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebd8:	f003 0303 	and.w	r3, r3, #3
 801ebdc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801ebde:	4b9e      	ldr	r3, [pc, #632]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ebe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebe2:	091b      	lsrs	r3, r3, #4
 801ebe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ebe8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801ebea:	4b9b      	ldr	r3, [pc, #620]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebee:	f003 0301 	and.w	r3, r3, #1
 801ebf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ebf4:	4b98      	ldr	r3, [pc, #608]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ebf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ebf8:	08db      	lsrs	r3, r3, #3
 801ebfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ebfe:	693a      	ldr	r2, [r7, #16]
 801ec00:	fb02 f303 	mul.w	r3, r2, r3
 801ec04:	ee07 3a90 	vmov	s15, r3
 801ec08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801ec10:	697b      	ldr	r3, [r7, #20]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	f000 8111 	beq.w	801ee3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801ec18:	69bb      	ldr	r3, [r7, #24]
 801ec1a:	2b02      	cmp	r3, #2
 801ec1c:	f000 8083 	beq.w	801ed26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801ec20:	69bb      	ldr	r3, [r7, #24]
 801ec22:	2b02      	cmp	r3, #2
 801ec24:	f200 80a1 	bhi.w	801ed6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801ec28:	69bb      	ldr	r3, [r7, #24]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	d003      	beq.n	801ec36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801ec2e:	69bb      	ldr	r3, [r7, #24]
 801ec30:	2b01      	cmp	r3, #1
 801ec32:	d056      	beq.n	801ece2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801ec34:	e099      	b.n	801ed6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ec36:	4b88      	ldr	r3, [pc, #544]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	f003 0320 	and.w	r3, r3, #32
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d02d      	beq.n	801ec9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ec42:	4b85      	ldr	r3, [pc, #532]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	08db      	lsrs	r3, r3, #3
 801ec48:	f003 0303 	and.w	r3, r3, #3
 801ec4c:	4a83      	ldr	r2, [pc, #524]	; (801ee5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801ec4e:	fa22 f303 	lsr.w	r3, r2, r3
 801ec52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ec54:	68bb      	ldr	r3, [r7, #8]
 801ec56:	ee07 3a90 	vmov	s15, r3
 801ec5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec5e:	697b      	ldr	r3, [r7, #20]
 801ec60:	ee07 3a90 	vmov	s15, r3
 801ec64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec6c:	4b7a      	ldr	r3, [pc, #488]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ec6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec74:	ee07 3a90 	vmov	s15, r3
 801ec78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec7c:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec80:	eddf 5a77 	vldr	s11, [pc, #476]	; 801ee60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ec84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec94:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ec9c:	e087      	b.n	801edae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ec9e:	697b      	ldr	r3, [r7, #20]
 801eca0:	ee07 3a90 	vmov	s15, r3
 801eca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eca8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801ee64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801ecac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecb0:	4b69      	ldr	r3, [pc, #420]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ecb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecb8:	ee07 3a90 	vmov	s15, r3
 801ecbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ecc0:	ed97 6a03 	vldr	s12, [r7, #12]
 801ecc4:	eddf 5a66 	vldr	s11, [pc, #408]	; 801ee60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ecc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ecd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ece0:	e065      	b.n	801edae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ece2:	697b      	ldr	r3, [r7, #20]
 801ece4:	ee07 3a90 	vmov	s15, r3
 801ece8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801ee68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801ecf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecf4:	4b58      	ldr	r3, [pc, #352]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ecf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ecf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecfc:	ee07 3a90 	vmov	s15, r3
 801ed00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed04:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed08:	eddf 5a55 	vldr	s11, [pc, #340]	; 801ee60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ed0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed24:	e043      	b.n	801edae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	ee07 3a90 	vmov	s15, r3
 801ed2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801ee6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801ed34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed38:	4b47      	ldr	r3, [pc, #284]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ed3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed40:	ee07 3a90 	vmov	s15, r3
 801ed44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed48:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 801ee60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ed50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed60:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed68:	e021      	b.n	801edae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ed6a:	697b      	ldr	r3, [r7, #20]
 801ed6c:	ee07 3a90 	vmov	s15, r3
 801ed70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801ee64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801ed78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed7c:	4b36      	ldr	r3, [pc, #216]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ed7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed84:	ee07 3a90 	vmov	s15, r3
 801ed88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed8c:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed90:	eddf 5a33 	vldr	s11, [pc, #204]	; 801ee60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ed94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eda0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eda8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801edac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801edae:	4b2a      	ldr	r3, [pc, #168]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801edb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801edb2:	0a5b      	lsrs	r3, r3, #9
 801edb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801edb8:	ee07 3a90 	vmov	s15, r3
 801edbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801edc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801edc8:	edd7 6a07 	vldr	s13, [r7, #28]
 801edcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801edd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801edd4:	ee17 2a90 	vmov	r2, s15
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801eddc:	4b1e      	ldr	r3, [pc, #120]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801edde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ede0:	0c1b      	lsrs	r3, r3, #16
 801ede2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ede6:	ee07 3a90 	vmov	s15, r3
 801edea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801edf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801edf6:	edd7 6a07 	vldr	s13, [r7, #28]
 801edfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801edfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee02:	ee17 2a90 	vmov	r2, s15
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801ee0a:	4b13      	ldr	r3, [pc, #76]	; (801ee58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ee0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee0e:	0e1b      	lsrs	r3, r3, #24
 801ee10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ee14:	ee07 3a90 	vmov	s15, r3
 801ee18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee20:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ee24:	edd7 6a07 	vldr	s13, [r7, #28]
 801ee28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee30:	ee17 2a90 	vmov	r2, s15
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801ee38:	e008      	b.n	801ee4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	2200      	movs	r2, #0
 801ee3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	2200      	movs	r2, #0
 801ee44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	2200      	movs	r2, #0
 801ee4a:	609a      	str	r2, [r3, #8]
}
 801ee4c:	bf00      	nop
 801ee4e:	3724      	adds	r7, #36	; 0x24
 801ee50:	46bd      	mov	sp, r7
 801ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee56:	4770      	bx	lr
 801ee58:	58024400 	.word	0x58024400
 801ee5c:	03d09000 	.word	0x03d09000
 801ee60:	46000000 	.word	0x46000000
 801ee64:	4c742400 	.word	0x4c742400
 801ee68:	4a742400 	.word	0x4a742400
 801ee6c:	4af42400 	.word	0x4af42400

0801ee70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b084      	sub	sp, #16
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	6078      	str	r0, [r7, #4]
 801ee78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ee7a:	2300      	movs	r3, #0
 801ee7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ee7e:	4b53      	ldr	r3, [pc, #332]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ee80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee82:	f003 0303 	and.w	r3, r3, #3
 801ee86:	2b03      	cmp	r3, #3
 801ee88:	d101      	bne.n	801ee8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801ee8a:	2301      	movs	r3, #1
 801ee8c:	e099      	b.n	801efc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801ee8e:	4b4f      	ldr	r3, [pc, #316]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	4a4e      	ldr	r2, [pc, #312]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ee94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801ee98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ee9a:	f7f7 f81d 	bl	8015ed8 <HAL_GetTick>
 801ee9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801eea0:	e008      	b.n	801eeb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eea2:	f7f7 f819 	bl	8015ed8 <HAL_GetTick>
 801eea6:	4602      	mov	r2, r0
 801eea8:	68bb      	ldr	r3, [r7, #8]
 801eeaa:	1ad3      	subs	r3, r2, r3
 801eeac:	2b02      	cmp	r3, #2
 801eeae:	d901      	bls.n	801eeb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801eeb0:	2303      	movs	r3, #3
 801eeb2:	e086      	b.n	801efc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801eeb4:	4b45      	ldr	r3, [pc, #276]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d1f0      	bne.n	801eea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801eec0:	4b42      	ldr	r3, [pc, #264]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801eec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	031b      	lsls	r3, r3, #12
 801eece:	493f      	ldr	r1, [pc, #252]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801eed0:	4313      	orrs	r3, r2
 801eed2:	628b      	str	r3, [r1, #40]	; 0x28
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	685b      	ldr	r3, [r3, #4]
 801eed8:	3b01      	subs	r3, #1
 801eeda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	689b      	ldr	r3, [r3, #8]
 801eee2:	3b01      	subs	r3, #1
 801eee4:	025b      	lsls	r3, r3, #9
 801eee6:	b29b      	uxth	r3, r3
 801eee8:	431a      	orrs	r2, r3
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	68db      	ldr	r3, [r3, #12]
 801eeee:	3b01      	subs	r3, #1
 801eef0:	041b      	lsls	r3, r3, #16
 801eef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801eef6:	431a      	orrs	r2, r3
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	691b      	ldr	r3, [r3, #16]
 801eefc:	3b01      	subs	r3, #1
 801eefe:	061b      	lsls	r3, r3, #24
 801ef00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801ef04:	4931      	ldr	r1, [pc, #196]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef06:	4313      	orrs	r3, r2
 801ef08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801ef0a:	4b30      	ldr	r3, [pc, #192]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	695b      	ldr	r3, [r3, #20]
 801ef16:	492d      	ldr	r1, [pc, #180]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef18:	4313      	orrs	r3, r2
 801ef1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ef1c:	4b2b      	ldr	r3, [pc, #172]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef20:	f023 0220 	bic.w	r2, r3, #32
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	699b      	ldr	r3, [r3, #24]
 801ef28:	4928      	ldr	r1, [pc, #160]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef2a:	4313      	orrs	r3, r2
 801ef2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801ef2e:	4b27      	ldr	r3, [pc, #156]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef32:	4a26      	ldr	r2, [pc, #152]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef34:	f023 0310 	bic.w	r3, r3, #16
 801ef38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801ef3a:	4b24      	ldr	r3, [pc, #144]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ef3e:	4b24      	ldr	r3, [pc, #144]	; (801efd0 <RCCEx_PLL2_Config+0x160>)
 801ef40:	4013      	ands	r3, r2
 801ef42:	687a      	ldr	r2, [r7, #4]
 801ef44:	69d2      	ldr	r2, [r2, #28]
 801ef46:	00d2      	lsls	r2, r2, #3
 801ef48:	4920      	ldr	r1, [pc, #128]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef4a:	4313      	orrs	r3, r2
 801ef4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801ef4e:	4b1f      	ldr	r3, [pc, #124]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef52:	4a1e      	ldr	r2, [pc, #120]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef54:	f043 0310 	orr.w	r3, r3, #16
 801ef58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ef5a:	683b      	ldr	r3, [r7, #0]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d106      	bne.n	801ef6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801ef60:	4b1a      	ldr	r3, [pc, #104]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef64:	4a19      	ldr	r2, [pc, #100]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ef6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801ef6c:	e00f      	b.n	801ef8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ef6e:	683b      	ldr	r3, [r7, #0]
 801ef70:	2b01      	cmp	r3, #1
 801ef72:	d106      	bne.n	801ef82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801ef74:	4b15      	ldr	r3, [pc, #84]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef78:	4a14      	ldr	r2, [pc, #80]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ef7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801ef80:	e005      	b.n	801ef8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801ef82:	4b12      	ldr	r3, [pc, #72]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef86:	4a11      	ldr	r2, [pc, #68]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ef8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801ef8e:	4b0f      	ldr	r3, [pc, #60]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	4a0e      	ldr	r2, [pc, #56]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801ef94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801ef98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ef9a:	f7f6 ff9d 	bl	8015ed8 <HAL_GetTick>
 801ef9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801efa0:	e008      	b.n	801efb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801efa2:	f7f6 ff99 	bl	8015ed8 <HAL_GetTick>
 801efa6:	4602      	mov	r2, r0
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	1ad3      	subs	r3, r2, r3
 801efac:	2b02      	cmp	r3, #2
 801efae:	d901      	bls.n	801efb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801efb0:	2303      	movs	r3, #3
 801efb2:	e006      	b.n	801efc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801efb4:	4b05      	ldr	r3, [pc, #20]	; (801efcc <RCCEx_PLL2_Config+0x15c>)
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d0f0      	beq.n	801efa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801efc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801efc2:	4618      	mov	r0, r3
 801efc4:	3710      	adds	r7, #16
 801efc6:	46bd      	mov	sp, r7
 801efc8:	bd80      	pop	{r7, pc}
 801efca:	bf00      	nop
 801efcc:	58024400 	.word	0x58024400
 801efd0:	ffff0007 	.word	0xffff0007

0801efd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801efd4:	b580      	push	{r7, lr}
 801efd6:	b084      	sub	sp, #16
 801efd8:	af00      	add	r7, sp, #0
 801efda:	6078      	str	r0, [r7, #4]
 801efdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801efde:	2300      	movs	r3, #0
 801efe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801efe2:	4b53      	ldr	r3, [pc, #332]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801efe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efe6:	f003 0303 	and.w	r3, r3, #3
 801efea:	2b03      	cmp	r3, #3
 801efec:	d101      	bne.n	801eff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801efee:	2301      	movs	r3, #1
 801eff0:	e099      	b.n	801f126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801eff2:	4b4f      	ldr	r3, [pc, #316]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	4a4e      	ldr	r2, [pc, #312]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801eff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801effc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801effe:	f7f6 ff6b 	bl	8015ed8 <HAL_GetTick>
 801f002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f004:	e008      	b.n	801f018 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f006:	f7f6 ff67 	bl	8015ed8 <HAL_GetTick>
 801f00a:	4602      	mov	r2, r0
 801f00c:	68bb      	ldr	r3, [r7, #8]
 801f00e:	1ad3      	subs	r3, r2, r3
 801f010:	2b02      	cmp	r3, #2
 801f012:	d901      	bls.n	801f018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f014:	2303      	movs	r3, #3
 801f016:	e086      	b.n	801f126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f018:	4b45      	ldr	r3, [pc, #276]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801f020:	2b00      	cmp	r3, #0
 801f022:	d1f0      	bne.n	801f006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f024:	4b42      	ldr	r3, [pc, #264]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f028:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	051b      	lsls	r3, r3, #20
 801f032:	493f      	ldr	r1, [pc, #252]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f034:	4313      	orrs	r3, r2
 801f036:	628b      	str	r3, [r1, #40]	; 0x28
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	685b      	ldr	r3, [r3, #4]
 801f03c:	3b01      	subs	r3, #1
 801f03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	689b      	ldr	r3, [r3, #8]
 801f046:	3b01      	subs	r3, #1
 801f048:	025b      	lsls	r3, r3, #9
 801f04a:	b29b      	uxth	r3, r3
 801f04c:	431a      	orrs	r2, r3
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	68db      	ldr	r3, [r3, #12]
 801f052:	3b01      	subs	r3, #1
 801f054:	041b      	lsls	r3, r3, #16
 801f056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801f05a:	431a      	orrs	r2, r3
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	691b      	ldr	r3, [r3, #16]
 801f060:	3b01      	subs	r3, #1
 801f062:	061b      	lsls	r3, r3, #24
 801f064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801f068:	4931      	ldr	r1, [pc, #196]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f06a:	4313      	orrs	r3, r2
 801f06c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f06e:	4b30      	ldr	r3, [pc, #192]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	695b      	ldr	r3, [r3, #20]
 801f07a:	492d      	ldr	r1, [pc, #180]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f07c:	4313      	orrs	r3, r2
 801f07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f080:	4b2b      	ldr	r3, [pc, #172]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	699b      	ldr	r3, [r3, #24]
 801f08c:	4928      	ldr	r1, [pc, #160]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f08e:	4313      	orrs	r3, r2
 801f090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f092:	4b27      	ldr	r3, [pc, #156]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f096:	4a26      	ldr	r2, [pc, #152]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f09e:	4b24      	ldr	r3, [pc, #144]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f0a2:	4b24      	ldr	r3, [pc, #144]	; (801f134 <RCCEx_PLL3_Config+0x160>)
 801f0a4:	4013      	ands	r3, r2
 801f0a6:	687a      	ldr	r2, [r7, #4]
 801f0a8:	69d2      	ldr	r2, [r2, #28]
 801f0aa:	00d2      	lsls	r2, r2, #3
 801f0ac:	4920      	ldr	r1, [pc, #128]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0ae:	4313      	orrs	r3, r2
 801f0b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f0b2:	4b1f      	ldr	r3, [pc, #124]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0b6:	4a1e      	ldr	r2, [pc, #120]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f0be:	683b      	ldr	r3, [r7, #0]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d106      	bne.n	801f0d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f0c4:	4b1a      	ldr	r3, [pc, #104]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0c8:	4a19      	ldr	r2, [pc, #100]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801f0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 801f0d0:	e00f      	b.n	801f0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f0d2:	683b      	ldr	r3, [r7, #0]
 801f0d4:	2b01      	cmp	r3, #1
 801f0d6:	d106      	bne.n	801f0e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f0d8:	4b15      	ldr	r3, [pc, #84]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0dc:	4a14      	ldr	r2, [pc, #80]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801f0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801f0e4:	e005      	b.n	801f0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f0e6:	4b12      	ldr	r3, [pc, #72]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0ea:	4a11      	ldr	r2, [pc, #68]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801f0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f0f2:	4b0f      	ldr	r3, [pc, #60]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	4a0e      	ldr	r2, [pc, #56]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f0fe:	f7f6 feeb 	bl	8015ed8 <HAL_GetTick>
 801f102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f104:	e008      	b.n	801f118 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f106:	f7f6 fee7 	bl	8015ed8 <HAL_GetTick>
 801f10a:	4602      	mov	r2, r0
 801f10c:	68bb      	ldr	r3, [r7, #8]
 801f10e:	1ad3      	subs	r3, r2, r3
 801f110:	2b02      	cmp	r3, #2
 801f112:	d901      	bls.n	801f118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f114:	2303      	movs	r3, #3
 801f116:	e006      	b.n	801f126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f118:	4b05      	ldr	r3, [pc, #20]	; (801f130 <RCCEx_PLL3_Config+0x15c>)
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801f120:	2b00      	cmp	r3, #0
 801f122:	d0f0      	beq.n	801f106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f124:	7bfb      	ldrb	r3, [r7, #15]
}
 801f126:	4618      	mov	r0, r3
 801f128:	3710      	adds	r7, #16
 801f12a:	46bd      	mov	sp, r7
 801f12c:	bd80      	pop	{r7, pc}
 801f12e:	bf00      	nop
 801f130:	58024400 	.word	0x58024400
 801f134:	ffff0007 	.word	0xffff0007

0801f138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f138:	b580      	push	{r7, lr}
 801f13a:	b082      	sub	sp, #8
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2b00      	cmp	r3, #0
 801f144:	d101      	bne.n	801f14a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f146:	2301      	movs	r3, #1
 801f148:	e049      	b.n	801f1de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f150:	b2db      	uxtb	r3, r3
 801f152:	2b00      	cmp	r3, #0
 801f154:	d106      	bne.n	801f164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	2200      	movs	r2, #0
 801f15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f15e:	6878      	ldr	r0, [r7, #4]
 801f160:	f7f6 f8ce 	bl	8015300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	2202      	movs	r2, #2
 801f168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	681a      	ldr	r2, [r3, #0]
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	3304      	adds	r3, #4
 801f174:	4619      	mov	r1, r3
 801f176:	4610      	mov	r0, r2
 801f178:	f001 f8d0 	bl	802031c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	2201      	movs	r2, #1
 801f180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	2201      	movs	r2, #1
 801f188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	2201      	movs	r2, #1
 801f190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	2201      	movs	r2, #1
 801f198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	2201      	movs	r2, #1
 801f1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	2201      	movs	r2, #1
 801f1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	2201      	movs	r2, #1
 801f1b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	2201      	movs	r2, #1
 801f1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	2201      	movs	r2, #1
 801f1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	2201      	movs	r2, #1
 801f1c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2201      	movs	r2, #1
 801f1d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	2201      	movs	r2, #1
 801f1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f1dc:	2300      	movs	r3, #0
}
 801f1de:	4618      	mov	r0, r3
 801f1e0:	3708      	adds	r7, #8
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}
	...

0801f1e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801f1e8:	b480      	push	{r7}
 801f1ea:	b085      	sub	sp, #20
 801f1ec:	af00      	add	r7, sp, #0
 801f1ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f1f6:	b2db      	uxtb	r3, r3
 801f1f8:	2b01      	cmp	r3, #1
 801f1fa:	d001      	beq.n	801f200 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801f1fc:	2301      	movs	r3, #1
 801f1fe:	e056      	b.n	801f2ae <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	2202      	movs	r2, #2
 801f204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	4a2b      	ldr	r2, [pc, #172]	; (801f2bc <HAL_TIM_Base_Start+0xd4>)
 801f20e:	4293      	cmp	r3, r2
 801f210:	d02c      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f21a:	d027      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	4a27      	ldr	r2, [pc, #156]	; (801f2c0 <HAL_TIM_Base_Start+0xd8>)
 801f222:	4293      	cmp	r3, r2
 801f224:	d022      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	4a26      	ldr	r2, [pc, #152]	; (801f2c4 <HAL_TIM_Base_Start+0xdc>)
 801f22c:	4293      	cmp	r3, r2
 801f22e:	d01d      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	4a24      	ldr	r2, [pc, #144]	; (801f2c8 <HAL_TIM_Base_Start+0xe0>)
 801f236:	4293      	cmp	r3, r2
 801f238:	d018      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	4a23      	ldr	r2, [pc, #140]	; (801f2cc <HAL_TIM_Base_Start+0xe4>)
 801f240:	4293      	cmp	r3, r2
 801f242:	d013      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	4a21      	ldr	r2, [pc, #132]	; (801f2d0 <HAL_TIM_Base_Start+0xe8>)
 801f24a:	4293      	cmp	r3, r2
 801f24c:	d00e      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	681b      	ldr	r3, [r3, #0]
 801f252:	4a20      	ldr	r2, [pc, #128]	; (801f2d4 <HAL_TIM_Base_Start+0xec>)
 801f254:	4293      	cmp	r3, r2
 801f256:	d009      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	4a1e      	ldr	r2, [pc, #120]	; (801f2d8 <HAL_TIM_Base_Start+0xf0>)
 801f25e:	4293      	cmp	r3, r2
 801f260:	d004      	beq.n	801f26c <HAL_TIM_Base_Start+0x84>
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	4a1d      	ldr	r2, [pc, #116]	; (801f2dc <HAL_TIM_Base_Start+0xf4>)
 801f268:	4293      	cmp	r3, r2
 801f26a:	d115      	bne.n	801f298 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	689a      	ldr	r2, [r3, #8]
 801f272:	4b1b      	ldr	r3, [pc, #108]	; (801f2e0 <HAL_TIM_Base_Start+0xf8>)
 801f274:	4013      	ands	r3, r2
 801f276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	2b06      	cmp	r3, #6
 801f27c:	d015      	beq.n	801f2aa <HAL_TIM_Base_Start+0xc2>
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f284:	d011      	beq.n	801f2aa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	681a      	ldr	r2, [r3, #0]
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f042 0201 	orr.w	r2, r2, #1
 801f294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f296:	e008      	b.n	801f2aa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	681a      	ldr	r2, [r3, #0]
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	f042 0201 	orr.w	r2, r2, #1
 801f2a6:	601a      	str	r2, [r3, #0]
 801f2a8:	e000      	b.n	801f2ac <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f2aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f2ac:	2300      	movs	r3, #0
}
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	3714      	adds	r7, #20
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b8:	4770      	bx	lr
 801f2ba:	bf00      	nop
 801f2bc:	40010000 	.word	0x40010000
 801f2c0:	40000400 	.word	0x40000400
 801f2c4:	40000800 	.word	0x40000800
 801f2c8:	40000c00 	.word	0x40000c00
 801f2cc:	40010400 	.word	0x40010400
 801f2d0:	40001800 	.word	0x40001800
 801f2d4:	40014000 	.word	0x40014000
 801f2d8:	4000e000 	.word	0x4000e000
 801f2dc:	4000e400 	.word	0x4000e400
 801f2e0:	00010007 	.word	0x00010007

0801f2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f2e4:	b480      	push	{r7}
 801f2e6:	b085      	sub	sp, #20
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f2f2:	b2db      	uxtb	r3, r3
 801f2f4:	2b01      	cmp	r3, #1
 801f2f6:	d001      	beq.n	801f2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f2f8:	2301      	movs	r3, #1
 801f2fa:	e05e      	b.n	801f3ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	2202      	movs	r2, #2
 801f300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	68da      	ldr	r2, [r3, #12]
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	f042 0201 	orr.w	r2, r2, #1
 801f312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	4a2b      	ldr	r2, [pc, #172]	; (801f3c8 <HAL_TIM_Base_Start_IT+0xe4>)
 801f31a:	4293      	cmp	r3, r2
 801f31c:	d02c      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f326:	d027      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	4a27      	ldr	r2, [pc, #156]	; (801f3cc <HAL_TIM_Base_Start_IT+0xe8>)
 801f32e:	4293      	cmp	r3, r2
 801f330:	d022      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	4a26      	ldr	r2, [pc, #152]	; (801f3d0 <HAL_TIM_Base_Start_IT+0xec>)
 801f338:	4293      	cmp	r3, r2
 801f33a:	d01d      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	4a24      	ldr	r2, [pc, #144]	; (801f3d4 <HAL_TIM_Base_Start_IT+0xf0>)
 801f342:	4293      	cmp	r3, r2
 801f344:	d018      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	4a23      	ldr	r2, [pc, #140]	; (801f3d8 <HAL_TIM_Base_Start_IT+0xf4>)
 801f34c:	4293      	cmp	r3, r2
 801f34e:	d013      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	4a21      	ldr	r2, [pc, #132]	; (801f3dc <HAL_TIM_Base_Start_IT+0xf8>)
 801f356:	4293      	cmp	r3, r2
 801f358:	d00e      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	681b      	ldr	r3, [r3, #0]
 801f35e:	4a20      	ldr	r2, [pc, #128]	; (801f3e0 <HAL_TIM_Base_Start_IT+0xfc>)
 801f360:	4293      	cmp	r3, r2
 801f362:	d009      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	4a1e      	ldr	r2, [pc, #120]	; (801f3e4 <HAL_TIM_Base_Start_IT+0x100>)
 801f36a:	4293      	cmp	r3, r2
 801f36c:	d004      	beq.n	801f378 <HAL_TIM_Base_Start_IT+0x94>
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	4a1d      	ldr	r2, [pc, #116]	; (801f3e8 <HAL_TIM_Base_Start_IT+0x104>)
 801f374:	4293      	cmp	r3, r2
 801f376:	d115      	bne.n	801f3a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	689a      	ldr	r2, [r3, #8]
 801f37e:	4b1b      	ldr	r3, [pc, #108]	; (801f3ec <HAL_TIM_Base_Start_IT+0x108>)
 801f380:	4013      	ands	r3, r2
 801f382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f384:	68fb      	ldr	r3, [r7, #12]
 801f386:	2b06      	cmp	r3, #6
 801f388:	d015      	beq.n	801f3b6 <HAL_TIM_Base_Start_IT+0xd2>
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f390:	d011      	beq.n	801f3b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	681a      	ldr	r2, [r3, #0]
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	f042 0201 	orr.w	r2, r2, #1
 801f3a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f3a2:	e008      	b.n	801f3b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	681a      	ldr	r2, [r3, #0]
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	f042 0201 	orr.w	r2, r2, #1
 801f3b2:	601a      	str	r2, [r3, #0]
 801f3b4:	e000      	b.n	801f3b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f3b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f3b8:	2300      	movs	r3, #0
}
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	3714      	adds	r7, #20
 801f3be:	46bd      	mov	sp, r7
 801f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c4:	4770      	bx	lr
 801f3c6:	bf00      	nop
 801f3c8:	40010000 	.word	0x40010000
 801f3cc:	40000400 	.word	0x40000400
 801f3d0:	40000800 	.word	0x40000800
 801f3d4:	40000c00 	.word	0x40000c00
 801f3d8:	40010400 	.word	0x40010400
 801f3dc:	40001800 	.word	0x40001800
 801f3e0:	40014000 	.word	0x40014000
 801f3e4:	4000e000 	.word	0x4000e000
 801f3e8:	4000e400 	.word	0x4000e400
 801f3ec:	00010007 	.word	0x00010007

0801f3f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801f3f0:	b480      	push	{r7}
 801f3f2:	b083      	sub	sp, #12
 801f3f4:	af00      	add	r7, sp, #0
 801f3f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	68da      	ldr	r2, [r3, #12]
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	f022 0201 	bic.w	r2, r2, #1
 801f406:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	6a1a      	ldr	r2, [r3, #32]
 801f40e:	f241 1311 	movw	r3, #4369	; 0x1111
 801f412:	4013      	ands	r3, r2
 801f414:	2b00      	cmp	r3, #0
 801f416:	d10f      	bne.n	801f438 <HAL_TIM_Base_Stop_IT+0x48>
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	6a1a      	ldr	r2, [r3, #32]
 801f41e:	f240 4344 	movw	r3, #1092	; 0x444
 801f422:	4013      	ands	r3, r2
 801f424:	2b00      	cmp	r3, #0
 801f426:	d107      	bne.n	801f438 <HAL_TIM_Base_Stop_IT+0x48>
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	681a      	ldr	r2, [r3, #0]
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	681b      	ldr	r3, [r3, #0]
 801f432:	f022 0201 	bic.w	r2, r2, #1
 801f436:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	2201      	movs	r2, #1
 801f43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801f440:	2300      	movs	r3, #0
}
 801f442:	4618      	mov	r0, r3
 801f444:	370c      	adds	r7, #12
 801f446:	46bd      	mov	sp, r7
 801f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f44c:	4770      	bx	lr

0801f44e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f44e:	b580      	push	{r7, lr}
 801f450:	b082      	sub	sp, #8
 801f452:	af00      	add	r7, sp, #0
 801f454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d101      	bne.n	801f460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f45c:	2301      	movs	r3, #1
 801f45e:	e049      	b.n	801f4f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f466:	b2db      	uxtb	r3, r3
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d106      	bne.n	801f47a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2200      	movs	r2, #0
 801f470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	f000 f841 	bl	801f4fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	2202      	movs	r2, #2
 801f47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	681a      	ldr	r2, [r3, #0]
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	3304      	adds	r3, #4
 801f48a:	4619      	mov	r1, r3
 801f48c:	4610      	mov	r0, r2
 801f48e:	f000 ff45 	bl	802031c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	2201      	movs	r2, #1
 801f496:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	2201      	movs	r2, #1
 801f49e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	2201      	movs	r2, #1
 801f4a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	2201      	movs	r2, #1
 801f4ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	2201      	movs	r2, #1
 801f4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	2201      	movs	r2, #1
 801f4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	2201      	movs	r2, #1
 801f4c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	2201      	movs	r2, #1
 801f4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	2201      	movs	r2, #1
 801f4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	2201      	movs	r2, #1
 801f4de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	2201      	movs	r2, #1
 801f4e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	2201      	movs	r2, #1
 801f4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f4f2:	2300      	movs	r3, #0
}
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	3708      	adds	r7, #8
 801f4f8:	46bd      	mov	sp, r7
 801f4fa:	bd80      	pop	{r7, pc}

0801f4fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f4fc:	b480      	push	{r7}
 801f4fe:	b083      	sub	sp, #12
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f504:	bf00      	nop
 801f506:	370c      	adds	r7, #12
 801f508:	46bd      	mov	sp, r7
 801f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f50e:	4770      	bx	lr

0801f510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f510:	b580      	push	{r7, lr}
 801f512:	b084      	sub	sp, #16
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
 801f518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801f51a:	683b      	ldr	r3, [r7, #0]
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d109      	bne.n	801f534 <HAL_TIM_PWM_Start+0x24>
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f526:	b2db      	uxtb	r3, r3
 801f528:	2b01      	cmp	r3, #1
 801f52a:	bf14      	ite	ne
 801f52c:	2301      	movne	r3, #1
 801f52e:	2300      	moveq	r3, #0
 801f530:	b2db      	uxtb	r3, r3
 801f532:	e03c      	b.n	801f5ae <HAL_TIM_PWM_Start+0x9e>
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	2b04      	cmp	r3, #4
 801f538:	d109      	bne.n	801f54e <HAL_TIM_PWM_Start+0x3e>
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f540:	b2db      	uxtb	r3, r3
 801f542:	2b01      	cmp	r3, #1
 801f544:	bf14      	ite	ne
 801f546:	2301      	movne	r3, #1
 801f548:	2300      	moveq	r3, #0
 801f54a:	b2db      	uxtb	r3, r3
 801f54c:	e02f      	b.n	801f5ae <HAL_TIM_PWM_Start+0x9e>
 801f54e:	683b      	ldr	r3, [r7, #0]
 801f550:	2b08      	cmp	r3, #8
 801f552:	d109      	bne.n	801f568 <HAL_TIM_PWM_Start+0x58>
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f55a:	b2db      	uxtb	r3, r3
 801f55c:	2b01      	cmp	r3, #1
 801f55e:	bf14      	ite	ne
 801f560:	2301      	movne	r3, #1
 801f562:	2300      	moveq	r3, #0
 801f564:	b2db      	uxtb	r3, r3
 801f566:	e022      	b.n	801f5ae <HAL_TIM_PWM_Start+0x9e>
 801f568:	683b      	ldr	r3, [r7, #0]
 801f56a:	2b0c      	cmp	r3, #12
 801f56c:	d109      	bne.n	801f582 <HAL_TIM_PWM_Start+0x72>
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f574:	b2db      	uxtb	r3, r3
 801f576:	2b01      	cmp	r3, #1
 801f578:	bf14      	ite	ne
 801f57a:	2301      	movne	r3, #1
 801f57c:	2300      	moveq	r3, #0
 801f57e:	b2db      	uxtb	r3, r3
 801f580:	e015      	b.n	801f5ae <HAL_TIM_PWM_Start+0x9e>
 801f582:	683b      	ldr	r3, [r7, #0]
 801f584:	2b10      	cmp	r3, #16
 801f586:	d109      	bne.n	801f59c <HAL_TIM_PWM_Start+0x8c>
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f58e:	b2db      	uxtb	r3, r3
 801f590:	2b01      	cmp	r3, #1
 801f592:	bf14      	ite	ne
 801f594:	2301      	movne	r3, #1
 801f596:	2300      	moveq	r3, #0
 801f598:	b2db      	uxtb	r3, r3
 801f59a:	e008      	b.n	801f5ae <HAL_TIM_PWM_Start+0x9e>
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801f5a2:	b2db      	uxtb	r3, r3
 801f5a4:	2b01      	cmp	r3, #1
 801f5a6:	bf14      	ite	ne
 801f5a8:	2301      	movne	r3, #1
 801f5aa:	2300      	moveq	r3, #0
 801f5ac:	b2db      	uxtb	r3, r3
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d001      	beq.n	801f5b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801f5b2:	2301      	movs	r3, #1
 801f5b4:	e0ab      	b.n	801f70e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f5b6:	683b      	ldr	r3, [r7, #0]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d104      	bne.n	801f5c6 <HAL_TIM_PWM_Start+0xb6>
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	2202      	movs	r2, #2
 801f5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f5c4:	e023      	b.n	801f60e <HAL_TIM_PWM_Start+0xfe>
 801f5c6:	683b      	ldr	r3, [r7, #0]
 801f5c8:	2b04      	cmp	r3, #4
 801f5ca:	d104      	bne.n	801f5d6 <HAL_TIM_PWM_Start+0xc6>
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	2202      	movs	r2, #2
 801f5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f5d4:	e01b      	b.n	801f60e <HAL_TIM_PWM_Start+0xfe>
 801f5d6:	683b      	ldr	r3, [r7, #0]
 801f5d8:	2b08      	cmp	r3, #8
 801f5da:	d104      	bne.n	801f5e6 <HAL_TIM_PWM_Start+0xd6>
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	2202      	movs	r2, #2
 801f5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f5e4:	e013      	b.n	801f60e <HAL_TIM_PWM_Start+0xfe>
 801f5e6:	683b      	ldr	r3, [r7, #0]
 801f5e8:	2b0c      	cmp	r3, #12
 801f5ea:	d104      	bne.n	801f5f6 <HAL_TIM_PWM_Start+0xe6>
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	2202      	movs	r2, #2
 801f5f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f5f4:	e00b      	b.n	801f60e <HAL_TIM_PWM_Start+0xfe>
 801f5f6:	683b      	ldr	r3, [r7, #0]
 801f5f8:	2b10      	cmp	r3, #16
 801f5fa:	d104      	bne.n	801f606 <HAL_TIM_PWM_Start+0xf6>
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	2202      	movs	r2, #2
 801f600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f604:	e003      	b.n	801f60e <HAL_TIM_PWM_Start+0xfe>
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	2202      	movs	r2, #2
 801f60a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	2201      	movs	r2, #1
 801f614:	6839      	ldr	r1, [r7, #0]
 801f616:	4618      	mov	r0, r3
 801f618:	f001 fbd0 	bl	8020dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	4a3d      	ldr	r2, [pc, #244]	; (801f718 <HAL_TIM_PWM_Start+0x208>)
 801f622:	4293      	cmp	r3, r2
 801f624:	d013      	beq.n	801f64e <HAL_TIM_PWM_Start+0x13e>
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	681b      	ldr	r3, [r3, #0]
 801f62a:	4a3c      	ldr	r2, [pc, #240]	; (801f71c <HAL_TIM_PWM_Start+0x20c>)
 801f62c:	4293      	cmp	r3, r2
 801f62e:	d00e      	beq.n	801f64e <HAL_TIM_PWM_Start+0x13e>
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	4a3a      	ldr	r2, [pc, #232]	; (801f720 <HAL_TIM_PWM_Start+0x210>)
 801f636:	4293      	cmp	r3, r2
 801f638:	d009      	beq.n	801f64e <HAL_TIM_PWM_Start+0x13e>
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	4a39      	ldr	r2, [pc, #228]	; (801f724 <HAL_TIM_PWM_Start+0x214>)
 801f640:	4293      	cmp	r3, r2
 801f642:	d004      	beq.n	801f64e <HAL_TIM_PWM_Start+0x13e>
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	681b      	ldr	r3, [r3, #0]
 801f648:	4a37      	ldr	r2, [pc, #220]	; (801f728 <HAL_TIM_PWM_Start+0x218>)
 801f64a:	4293      	cmp	r3, r2
 801f64c:	d101      	bne.n	801f652 <HAL_TIM_PWM_Start+0x142>
 801f64e:	2301      	movs	r3, #1
 801f650:	e000      	b.n	801f654 <HAL_TIM_PWM_Start+0x144>
 801f652:	2300      	movs	r3, #0
 801f654:	2b00      	cmp	r3, #0
 801f656:	d007      	beq.n	801f668 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801f666:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	4a2a      	ldr	r2, [pc, #168]	; (801f718 <HAL_TIM_PWM_Start+0x208>)
 801f66e:	4293      	cmp	r3, r2
 801f670:	d02c      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f67a:	d027      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	4a2a      	ldr	r2, [pc, #168]	; (801f72c <HAL_TIM_PWM_Start+0x21c>)
 801f682:	4293      	cmp	r3, r2
 801f684:	d022      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	4a29      	ldr	r2, [pc, #164]	; (801f730 <HAL_TIM_PWM_Start+0x220>)
 801f68c:	4293      	cmp	r3, r2
 801f68e:	d01d      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	4a27      	ldr	r2, [pc, #156]	; (801f734 <HAL_TIM_PWM_Start+0x224>)
 801f696:	4293      	cmp	r3, r2
 801f698:	d018      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	4a1f      	ldr	r2, [pc, #124]	; (801f71c <HAL_TIM_PWM_Start+0x20c>)
 801f6a0:	4293      	cmp	r3, r2
 801f6a2:	d013      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	4a23      	ldr	r2, [pc, #140]	; (801f738 <HAL_TIM_PWM_Start+0x228>)
 801f6aa:	4293      	cmp	r3, r2
 801f6ac:	d00e      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	681b      	ldr	r3, [r3, #0]
 801f6b2:	4a1b      	ldr	r2, [pc, #108]	; (801f720 <HAL_TIM_PWM_Start+0x210>)
 801f6b4:	4293      	cmp	r3, r2
 801f6b6:	d009      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	4a1f      	ldr	r2, [pc, #124]	; (801f73c <HAL_TIM_PWM_Start+0x22c>)
 801f6be:	4293      	cmp	r3, r2
 801f6c0:	d004      	beq.n	801f6cc <HAL_TIM_PWM_Start+0x1bc>
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	681b      	ldr	r3, [r3, #0]
 801f6c6:	4a1e      	ldr	r2, [pc, #120]	; (801f740 <HAL_TIM_PWM_Start+0x230>)
 801f6c8:	4293      	cmp	r3, r2
 801f6ca:	d115      	bne.n	801f6f8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	689a      	ldr	r2, [r3, #8]
 801f6d2:	4b1c      	ldr	r3, [pc, #112]	; (801f744 <HAL_TIM_PWM_Start+0x234>)
 801f6d4:	4013      	ands	r3, r2
 801f6d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f6d8:	68fb      	ldr	r3, [r7, #12]
 801f6da:	2b06      	cmp	r3, #6
 801f6dc:	d015      	beq.n	801f70a <HAL_TIM_PWM_Start+0x1fa>
 801f6de:	68fb      	ldr	r3, [r7, #12]
 801f6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f6e4:	d011      	beq.n	801f70a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	681a      	ldr	r2, [r3, #0]
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	f042 0201 	orr.w	r2, r2, #1
 801f6f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f6f6:	e008      	b.n	801f70a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	681a      	ldr	r2, [r3, #0]
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	f042 0201 	orr.w	r2, r2, #1
 801f706:	601a      	str	r2, [r3, #0]
 801f708:	e000      	b.n	801f70c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f70a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f70c:	2300      	movs	r3, #0
}
 801f70e:	4618      	mov	r0, r3
 801f710:	3710      	adds	r7, #16
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}
 801f716:	bf00      	nop
 801f718:	40010000 	.word	0x40010000
 801f71c:	40010400 	.word	0x40010400
 801f720:	40014000 	.word	0x40014000
 801f724:	40014400 	.word	0x40014400
 801f728:	40014800 	.word	0x40014800
 801f72c:	40000400 	.word	0x40000400
 801f730:	40000800 	.word	0x40000800
 801f734:	40000c00 	.word	0x40000c00
 801f738:	40001800 	.word	0x40001800
 801f73c:	4000e000 	.word	0x4000e000
 801f740:	4000e400 	.word	0x4000e400
 801f744:	00010007 	.word	0x00010007

0801f748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801f748:	b580      	push	{r7, lr}
 801f74a:	b082      	sub	sp, #8
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	2b00      	cmp	r3, #0
 801f754:	d101      	bne.n	801f75a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801f756:	2301      	movs	r3, #1
 801f758:	e049      	b.n	801f7ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f760:	b2db      	uxtb	r3, r3
 801f762:	2b00      	cmp	r3, #0
 801f764:	d106      	bne.n	801f774 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	2200      	movs	r2, #0
 801f76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801f76e:	6878      	ldr	r0, [r7, #4]
 801f770:	f000 f841 	bl	801f7f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	2202      	movs	r2, #2
 801f778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	681a      	ldr	r2, [r3, #0]
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	3304      	adds	r3, #4
 801f784:	4619      	mov	r1, r3
 801f786:	4610      	mov	r0, r2
 801f788:	f000 fdc8 	bl	802031c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	2201      	movs	r2, #1
 801f790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	2201      	movs	r2, #1
 801f798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	2201      	movs	r2, #1
 801f7a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	2201      	movs	r2, #1
 801f7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	2201      	movs	r2, #1
 801f7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	2201      	movs	r2, #1
 801f7c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	2201      	movs	r2, #1
 801f7d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	2201      	movs	r2, #1
 801f7d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	2201      	movs	r2, #1
 801f7e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	2201      	movs	r2, #1
 801f7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f7ec:	2300      	movs	r3, #0
}
 801f7ee:	4618      	mov	r0, r3
 801f7f0:	3708      	adds	r7, #8
 801f7f2:	46bd      	mov	sp, r7
 801f7f4:	bd80      	pop	{r7, pc}

0801f7f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801f7f6:	b480      	push	{r7}
 801f7f8:	b083      	sub	sp, #12
 801f7fa:	af00      	add	r7, sp, #0
 801f7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801f7fe:	bf00      	nop
 801f800:	370c      	adds	r7, #12
 801f802:	46bd      	mov	sp, r7
 801f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f808:	4770      	bx	lr
	...

0801f80c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f80c:	b580      	push	{r7, lr}
 801f80e:	b084      	sub	sp, #16
 801f810:	af00      	add	r7, sp, #0
 801f812:	6078      	str	r0, [r7, #4]
 801f814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f816:	2300      	movs	r3, #0
 801f818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801f81a:	683b      	ldr	r3, [r7, #0]
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d104      	bne.n	801f82a <HAL_TIM_IC_Start_IT+0x1e>
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f826:	b2db      	uxtb	r3, r3
 801f828:	e023      	b.n	801f872 <HAL_TIM_IC_Start_IT+0x66>
 801f82a:	683b      	ldr	r3, [r7, #0]
 801f82c:	2b04      	cmp	r3, #4
 801f82e:	d104      	bne.n	801f83a <HAL_TIM_IC_Start_IT+0x2e>
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f836:	b2db      	uxtb	r3, r3
 801f838:	e01b      	b.n	801f872 <HAL_TIM_IC_Start_IT+0x66>
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	2b08      	cmp	r3, #8
 801f83e:	d104      	bne.n	801f84a <HAL_TIM_IC_Start_IT+0x3e>
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f846:	b2db      	uxtb	r3, r3
 801f848:	e013      	b.n	801f872 <HAL_TIM_IC_Start_IT+0x66>
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	2b0c      	cmp	r3, #12
 801f84e:	d104      	bne.n	801f85a <HAL_TIM_IC_Start_IT+0x4e>
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f856:	b2db      	uxtb	r3, r3
 801f858:	e00b      	b.n	801f872 <HAL_TIM_IC_Start_IT+0x66>
 801f85a:	683b      	ldr	r3, [r7, #0]
 801f85c:	2b10      	cmp	r3, #16
 801f85e:	d104      	bne.n	801f86a <HAL_TIM_IC_Start_IT+0x5e>
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f866:	b2db      	uxtb	r3, r3
 801f868:	e003      	b.n	801f872 <HAL_TIM_IC_Start_IT+0x66>
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801f870:	b2db      	uxtb	r3, r3
 801f872:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	2b00      	cmp	r3, #0
 801f878:	d104      	bne.n	801f884 <HAL_TIM_IC_Start_IT+0x78>
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f880:	b2db      	uxtb	r3, r3
 801f882:	e013      	b.n	801f8ac <HAL_TIM_IC_Start_IT+0xa0>
 801f884:	683b      	ldr	r3, [r7, #0]
 801f886:	2b04      	cmp	r3, #4
 801f888:	d104      	bne.n	801f894 <HAL_TIM_IC_Start_IT+0x88>
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f890:	b2db      	uxtb	r3, r3
 801f892:	e00b      	b.n	801f8ac <HAL_TIM_IC_Start_IT+0xa0>
 801f894:	683b      	ldr	r3, [r7, #0]
 801f896:	2b08      	cmp	r3, #8
 801f898:	d104      	bne.n	801f8a4 <HAL_TIM_IC_Start_IT+0x98>
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801f8a0:	b2db      	uxtb	r3, r3
 801f8a2:	e003      	b.n	801f8ac <HAL_TIM_IC_Start_IT+0xa0>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801f8aa:	b2db      	uxtb	r3, r3
 801f8ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801f8ae:	7bbb      	ldrb	r3, [r7, #14]
 801f8b0:	2b01      	cmp	r3, #1
 801f8b2:	d102      	bne.n	801f8ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801f8b4:	7b7b      	ldrb	r3, [r7, #13]
 801f8b6:	2b01      	cmp	r3, #1
 801f8b8:	d001      	beq.n	801f8be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801f8ba:	2301      	movs	r3, #1
 801f8bc:	e0ec      	b.n	801fa98 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f8be:	683b      	ldr	r3, [r7, #0]
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d104      	bne.n	801f8ce <HAL_TIM_IC_Start_IT+0xc2>
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	2202      	movs	r2, #2
 801f8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f8cc:	e023      	b.n	801f916 <HAL_TIM_IC_Start_IT+0x10a>
 801f8ce:	683b      	ldr	r3, [r7, #0]
 801f8d0:	2b04      	cmp	r3, #4
 801f8d2:	d104      	bne.n	801f8de <HAL_TIM_IC_Start_IT+0xd2>
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	2202      	movs	r2, #2
 801f8d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f8dc:	e01b      	b.n	801f916 <HAL_TIM_IC_Start_IT+0x10a>
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	2b08      	cmp	r3, #8
 801f8e2:	d104      	bne.n	801f8ee <HAL_TIM_IC_Start_IT+0xe2>
 801f8e4:	687b      	ldr	r3, [r7, #4]
 801f8e6:	2202      	movs	r2, #2
 801f8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f8ec:	e013      	b.n	801f916 <HAL_TIM_IC_Start_IT+0x10a>
 801f8ee:	683b      	ldr	r3, [r7, #0]
 801f8f0:	2b0c      	cmp	r3, #12
 801f8f2:	d104      	bne.n	801f8fe <HAL_TIM_IC_Start_IT+0xf2>
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	2202      	movs	r2, #2
 801f8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f8fc:	e00b      	b.n	801f916 <HAL_TIM_IC_Start_IT+0x10a>
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	2b10      	cmp	r3, #16
 801f902:	d104      	bne.n	801f90e <HAL_TIM_IC_Start_IT+0x102>
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2202      	movs	r2, #2
 801f908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f90c:	e003      	b.n	801f916 <HAL_TIM_IC_Start_IT+0x10a>
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	2202      	movs	r2, #2
 801f912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d104      	bne.n	801f926 <HAL_TIM_IC_Start_IT+0x11a>
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	2202      	movs	r2, #2
 801f920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f924:	e013      	b.n	801f94e <HAL_TIM_IC_Start_IT+0x142>
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	2b04      	cmp	r3, #4
 801f92a:	d104      	bne.n	801f936 <HAL_TIM_IC_Start_IT+0x12a>
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	2202      	movs	r2, #2
 801f930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f934:	e00b      	b.n	801f94e <HAL_TIM_IC_Start_IT+0x142>
 801f936:	683b      	ldr	r3, [r7, #0]
 801f938:	2b08      	cmp	r3, #8
 801f93a:	d104      	bne.n	801f946 <HAL_TIM_IC_Start_IT+0x13a>
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	2202      	movs	r2, #2
 801f940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f944:	e003      	b.n	801f94e <HAL_TIM_IC_Start_IT+0x142>
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	2202      	movs	r2, #2
 801f94a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801f94e:	683b      	ldr	r3, [r7, #0]
 801f950:	2b0c      	cmp	r3, #12
 801f952:	d841      	bhi.n	801f9d8 <HAL_TIM_IC_Start_IT+0x1cc>
 801f954:	a201      	add	r2, pc, #4	; (adr r2, 801f95c <HAL_TIM_IC_Start_IT+0x150>)
 801f956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f95a:	bf00      	nop
 801f95c:	0801f991 	.word	0x0801f991
 801f960:	0801f9d9 	.word	0x0801f9d9
 801f964:	0801f9d9 	.word	0x0801f9d9
 801f968:	0801f9d9 	.word	0x0801f9d9
 801f96c:	0801f9a3 	.word	0x0801f9a3
 801f970:	0801f9d9 	.word	0x0801f9d9
 801f974:	0801f9d9 	.word	0x0801f9d9
 801f978:	0801f9d9 	.word	0x0801f9d9
 801f97c:	0801f9b5 	.word	0x0801f9b5
 801f980:	0801f9d9 	.word	0x0801f9d9
 801f984:	0801f9d9 	.word	0x0801f9d9
 801f988:	0801f9d9 	.word	0x0801f9d9
 801f98c:	0801f9c7 	.word	0x0801f9c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	68da      	ldr	r2, [r3, #12]
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	f042 0202 	orr.w	r2, r2, #2
 801f99e:	60da      	str	r2, [r3, #12]
      break;
 801f9a0:	e01d      	b.n	801f9de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	68da      	ldr	r2, [r3, #12]
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	f042 0204 	orr.w	r2, r2, #4
 801f9b0:	60da      	str	r2, [r3, #12]
      break;
 801f9b2:	e014      	b.n	801f9de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	68da      	ldr	r2, [r3, #12]
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	f042 0208 	orr.w	r2, r2, #8
 801f9c2:	60da      	str	r2, [r3, #12]
      break;
 801f9c4:	e00b      	b.n	801f9de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	68da      	ldr	r2, [r3, #12]
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	f042 0210 	orr.w	r2, r2, #16
 801f9d4:	60da      	str	r2, [r3, #12]
      break;
 801f9d6:	e002      	b.n	801f9de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801f9d8:	2301      	movs	r3, #1
 801f9da:	73fb      	strb	r3, [r7, #15]
      break;
 801f9dc:	bf00      	nop
  }

  if (status == HAL_OK)
 801f9de:	7bfb      	ldrb	r3, [r7, #15]
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d158      	bne.n	801fa96 <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	681b      	ldr	r3, [r3, #0]
 801f9e8:	2201      	movs	r2, #1
 801f9ea:	6839      	ldr	r1, [r7, #0]
 801f9ec:	4618      	mov	r0, r3
 801f9ee:	f001 f9e5 	bl	8020dbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	4a2a      	ldr	r2, [pc, #168]	; (801faa0 <HAL_TIM_IC_Start_IT+0x294>)
 801f9f8:	4293      	cmp	r3, r2
 801f9fa:	d02c      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fa04:	d027      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	4a26      	ldr	r2, [pc, #152]	; (801faa4 <HAL_TIM_IC_Start_IT+0x298>)
 801fa0c:	4293      	cmp	r3, r2
 801fa0e:	d022      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	4a24      	ldr	r2, [pc, #144]	; (801faa8 <HAL_TIM_IC_Start_IT+0x29c>)
 801fa16:	4293      	cmp	r3, r2
 801fa18:	d01d      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	681b      	ldr	r3, [r3, #0]
 801fa1e:	4a23      	ldr	r2, [pc, #140]	; (801faac <HAL_TIM_IC_Start_IT+0x2a0>)
 801fa20:	4293      	cmp	r3, r2
 801fa22:	d018      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	4a21      	ldr	r2, [pc, #132]	; (801fab0 <HAL_TIM_IC_Start_IT+0x2a4>)
 801fa2a:	4293      	cmp	r3, r2
 801fa2c:	d013      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	4a20      	ldr	r2, [pc, #128]	; (801fab4 <HAL_TIM_IC_Start_IT+0x2a8>)
 801fa34:	4293      	cmp	r3, r2
 801fa36:	d00e      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	4a1e      	ldr	r2, [pc, #120]	; (801fab8 <HAL_TIM_IC_Start_IT+0x2ac>)
 801fa3e:	4293      	cmp	r3, r2
 801fa40:	d009      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa42:	687b      	ldr	r3, [r7, #4]
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	4a1d      	ldr	r2, [pc, #116]	; (801fabc <HAL_TIM_IC_Start_IT+0x2b0>)
 801fa48:	4293      	cmp	r3, r2
 801fa4a:	d004      	beq.n	801fa56 <HAL_TIM_IC_Start_IT+0x24a>
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	4a1b      	ldr	r2, [pc, #108]	; (801fac0 <HAL_TIM_IC_Start_IT+0x2b4>)
 801fa52:	4293      	cmp	r3, r2
 801fa54:	d115      	bne.n	801fa82 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	689a      	ldr	r2, [r3, #8]
 801fa5c:	4b19      	ldr	r3, [pc, #100]	; (801fac4 <HAL_TIM_IC_Start_IT+0x2b8>)
 801fa5e:	4013      	ands	r3, r2
 801fa60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fa62:	68bb      	ldr	r3, [r7, #8]
 801fa64:	2b06      	cmp	r3, #6
 801fa66:	d015      	beq.n	801fa94 <HAL_TIM_IC_Start_IT+0x288>
 801fa68:	68bb      	ldr	r3, [r7, #8]
 801fa6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fa6e:	d011      	beq.n	801fa94 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	681a      	ldr	r2, [r3, #0]
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	f042 0201 	orr.w	r2, r2, #1
 801fa7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fa80:	e008      	b.n	801fa94 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	681a      	ldr	r2, [r3, #0]
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	f042 0201 	orr.w	r2, r2, #1
 801fa90:	601a      	str	r2, [r3, #0]
 801fa92:	e000      	b.n	801fa96 <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fa94:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801fa96:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa98:	4618      	mov	r0, r3
 801fa9a:	3710      	adds	r7, #16
 801fa9c:	46bd      	mov	sp, r7
 801fa9e:	bd80      	pop	{r7, pc}
 801faa0:	40010000 	.word	0x40010000
 801faa4:	40000400 	.word	0x40000400
 801faa8:	40000800 	.word	0x40000800
 801faac:	40000c00 	.word	0x40000c00
 801fab0:	40010400 	.word	0x40010400
 801fab4:	40001800 	.word	0x40001800
 801fab8:	40014000 	.word	0x40014000
 801fabc:	4000e000 	.word	0x4000e000
 801fac0:	4000e400 	.word	0x4000e400
 801fac4:	00010007 	.word	0x00010007

0801fac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801fac8:	b580      	push	{r7, lr}
 801faca:	b082      	sub	sp, #8
 801facc:	af00      	add	r7, sp, #0
 801face:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	691b      	ldr	r3, [r3, #16]
 801fad6:	f003 0302 	and.w	r3, r3, #2
 801fada:	2b02      	cmp	r3, #2
 801fadc:	d122      	bne.n	801fb24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	68db      	ldr	r3, [r3, #12]
 801fae4:	f003 0302 	and.w	r3, r3, #2
 801fae8:	2b02      	cmp	r3, #2
 801faea:	d11b      	bne.n	801fb24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	f06f 0202 	mvn.w	r2, #2
 801faf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	2201      	movs	r2, #1
 801fafa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	699b      	ldr	r3, [r3, #24]
 801fb02:	f003 0303 	and.w	r3, r3, #3
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d003      	beq.n	801fb12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801fb0a:	6878      	ldr	r0, [r7, #4]
 801fb0c:	f7ee fd96 	bl	800e63c <HAL_TIM_IC_CaptureCallback>
 801fb10:	e005      	b.n	801fb1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801fb12:	6878      	ldr	r0, [r7, #4]
 801fb14:	f000 fbe4 	bl	80202e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fb18:	6878      	ldr	r0, [r7, #4]
 801fb1a:	f000 fbeb 	bl	80202f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	2200      	movs	r2, #0
 801fb22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	691b      	ldr	r3, [r3, #16]
 801fb2a:	f003 0304 	and.w	r3, r3, #4
 801fb2e:	2b04      	cmp	r3, #4
 801fb30:	d122      	bne.n	801fb78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	68db      	ldr	r3, [r3, #12]
 801fb38:	f003 0304 	and.w	r3, r3, #4
 801fb3c:	2b04      	cmp	r3, #4
 801fb3e:	d11b      	bne.n	801fb78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	f06f 0204 	mvn.w	r2, #4
 801fb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	2202      	movs	r2, #2
 801fb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	699b      	ldr	r3, [r3, #24]
 801fb56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d003      	beq.n	801fb66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fb5e:	6878      	ldr	r0, [r7, #4]
 801fb60:	f7ee fd6c 	bl	800e63c <HAL_TIM_IC_CaptureCallback>
 801fb64:	e005      	b.n	801fb72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fb66:	6878      	ldr	r0, [r7, #4]
 801fb68:	f000 fbba 	bl	80202e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fb6c:	6878      	ldr	r0, [r7, #4]
 801fb6e:	f000 fbc1 	bl	80202f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fb72:	687b      	ldr	r3, [r7, #4]
 801fb74:	2200      	movs	r2, #0
 801fb76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	691b      	ldr	r3, [r3, #16]
 801fb7e:	f003 0308 	and.w	r3, r3, #8
 801fb82:	2b08      	cmp	r3, #8
 801fb84:	d122      	bne.n	801fbcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	68db      	ldr	r3, [r3, #12]
 801fb8c:	f003 0308 	and.w	r3, r3, #8
 801fb90:	2b08      	cmp	r3, #8
 801fb92:	d11b      	bne.n	801fbcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	681b      	ldr	r3, [r3, #0]
 801fb98:	f06f 0208 	mvn.w	r2, #8
 801fb9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	2204      	movs	r2, #4
 801fba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	69db      	ldr	r3, [r3, #28]
 801fbaa:	f003 0303 	and.w	r3, r3, #3
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d003      	beq.n	801fbba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fbb2:	6878      	ldr	r0, [r7, #4]
 801fbb4:	f7ee fd42 	bl	800e63c <HAL_TIM_IC_CaptureCallback>
 801fbb8:	e005      	b.n	801fbc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fbba:	6878      	ldr	r0, [r7, #4]
 801fbbc:	f000 fb90 	bl	80202e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fbc0:	6878      	ldr	r0, [r7, #4]
 801fbc2:	f000 fb97 	bl	80202f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	2200      	movs	r2, #0
 801fbca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	691b      	ldr	r3, [r3, #16]
 801fbd2:	f003 0310 	and.w	r3, r3, #16
 801fbd6:	2b10      	cmp	r3, #16
 801fbd8:	d122      	bne.n	801fc20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	68db      	ldr	r3, [r3, #12]
 801fbe0:	f003 0310 	and.w	r3, r3, #16
 801fbe4:	2b10      	cmp	r3, #16
 801fbe6:	d11b      	bne.n	801fc20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	f06f 0210 	mvn.w	r2, #16
 801fbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	2208      	movs	r2, #8
 801fbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	69db      	ldr	r3, [r3, #28]
 801fbfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d003      	beq.n	801fc0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fc06:	6878      	ldr	r0, [r7, #4]
 801fc08:	f7ee fd18 	bl	800e63c <HAL_TIM_IC_CaptureCallback>
 801fc0c:	e005      	b.n	801fc1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fc0e:	6878      	ldr	r0, [r7, #4]
 801fc10:	f000 fb66 	bl	80202e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fc14:	6878      	ldr	r0, [r7, #4]
 801fc16:	f000 fb6d 	bl	80202f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	2200      	movs	r2, #0
 801fc1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	691b      	ldr	r3, [r3, #16]
 801fc26:	f003 0301 	and.w	r3, r3, #1
 801fc2a:	2b01      	cmp	r3, #1
 801fc2c:	d10e      	bne.n	801fc4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	68db      	ldr	r3, [r3, #12]
 801fc34:	f003 0301 	and.w	r3, r3, #1
 801fc38:	2b01      	cmp	r3, #1
 801fc3a:	d107      	bne.n	801fc4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	f06f 0201 	mvn.w	r2, #1
 801fc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801fc46:	6878      	ldr	r0, [r7, #4]
 801fc48:	f7ee fd0d 	bl	800e666 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	691b      	ldr	r3, [r3, #16]
 801fc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc56:	2b80      	cmp	r3, #128	; 0x80
 801fc58:	d10e      	bne.n	801fc78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	68db      	ldr	r3, [r3, #12]
 801fc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc64:	2b80      	cmp	r3, #128	; 0x80
 801fc66:	d107      	bne.n	801fc78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801fc70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801fc72:	6878      	ldr	r0, [r7, #4]
 801fc74:	f001 fa0e 	bl	8021094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	691b      	ldr	r3, [r3, #16]
 801fc7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fc86:	d10e      	bne.n	801fca6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	68db      	ldr	r3, [r3, #12]
 801fc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc92:	2b80      	cmp	r3, #128	; 0x80
 801fc94:	d107      	bne.n	801fca6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801fc9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801fca0:	6878      	ldr	r0, [r7, #4]
 801fca2:	f001 fa01 	bl	80210a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	691b      	ldr	r3, [r3, #16]
 801fcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fcb0:	2b40      	cmp	r3, #64	; 0x40
 801fcb2:	d10e      	bne.n	801fcd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	68db      	ldr	r3, [r3, #12]
 801fcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fcbe:	2b40      	cmp	r3, #64	; 0x40
 801fcc0:	d107      	bne.n	801fcd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801fcca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801fccc:	6878      	ldr	r0, [r7, #4]
 801fcce:	f000 fb1b 	bl	8020308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	691b      	ldr	r3, [r3, #16]
 801fcd8:	f003 0320 	and.w	r3, r3, #32
 801fcdc:	2b20      	cmp	r3, #32
 801fcde:	d10e      	bne.n	801fcfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	68db      	ldr	r3, [r3, #12]
 801fce6:	f003 0320 	and.w	r3, r3, #32
 801fcea:	2b20      	cmp	r3, #32
 801fcec:	d107      	bne.n	801fcfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	f06f 0220 	mvn.w	r2, #32
 801fcf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801fcf8:	6878      	ldr	r0, [r7, #4]
 801fcfa:	f001 f9c1 	bl	8021080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801fcfe:	bf00      	nop
 801fd00:	3708      	adds	r7, #8
 801fd02:	46bd      	mov	sp, r7
 801fd04:	bd80      	pop	{r7, pc}

0801fd06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801fd06:	b580      	push	{r7, lr}
 801fd08:	b086      	sub	sp, #24
 801fd0a:	af00      	add	r7, sp, #0
 801fd0c:	60f8      	str	r0, [r7, #12]
 801fd0e:	60b9      	str	r1, [r7, #8]
 801fd10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fd12:	2300      	movs	r3, #0
 801fd14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fd1c:	2b01      	cmp	r3, #1
 801fd1e:	d101      	bne.n	801fd24 <HAL_TIM_IC_ConfigChannel+0x1e>
 801fd20:	2302      	movs	r3, #2
 801fd22:	e088      	b.n	801fe36 <HAL_TIM_IC_ConfigChannel+0x130>
 801fd24:	68fb      	ldr	r3, [r7, #12]
 801fd26:	2201      	movs	r2, #1
 801fd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d11b      	bne.n	801fd6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801fd32:	68fb      	ldr	r3, [r7, #12]
 801fd34:	6818      	ldr	r0, [r3, #0]
 801fd36:	68bb      	ldr	r3, [r7, #8]
 801fd38:	6819      	ldr	r1, [r3, #0]
 801fd3a:	68bb      	ldr	r3, [r7, #8]
 801fd3c:	685a      	ldr	r2, [r3, #4]
 801fd3e:	68bb      	ldr	r3, [r7, #8]
 801fd40:	68db      	ldr	r3, [r3, #12]
 801fd42:	f000 fe67 	bl	8020a14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801fd46:	68fb      	ldr	r3, [r7, #12]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	699a      	ldr	r2, [r3, #24]
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	f022 020c 	bic.w	r2, r2, #12
 801fd54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	6999      	ldr	r1, [r3, #24]
 801fd5c:	68bb      	ldr	r3, [r7, #8]
 801fd5e:	689a      	ldr	r2, [r3, #8]
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	430a      	orrs	r2, r1
 801fd66:	619a      	str	r2, [r3, #24]
 801fd68:	e060      	b.n	801fe2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	2b04      	cmp	r3, #4
 801fd6e:	d11c      	bne.n	801fdaa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	6818      	ldr	r0, [r3, #0]
 801fd74:	68bb      	ldr	r3, [r7, #8]
 801fd76:	6819      	ldr	r1, [r3, #0]
 801fd78:	68bb      	ldr	r3, [r7, #8]
 801fd7a:	685a      	ldr	r2, [r3, #4]
 801fd7c:	68bb      	ldr	r3, [r7, #8]
 801fd7e:	68db      	ldr	r3, [r3, #12]
 801fd80:	f000 fef7 	bl	8020b72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	681b      	ldr	r3, [r3, #0]
 801fd88:	699a      	ldr	r2, [r3, #24]
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801fd92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	6999      	ldr	r1, [r3, #24]
 801fd9a:	68bb      	ldr	r3, [r7, #8]
 801fd9c:	689b      	ldr	r3, [r3, #8]
 801fd9e:	021a      	lsls	r2, r3, #8
 801fda0:	68fb      	ldr	r3, [r7, #12]
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	430a      	orrs	r2, r1
 801fda6:	619a      	str	r2, [r3, #24]
 801fda8:	e040      	b.n	801fe2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	2b08      	cmp	r3, #8
 801fdae:	d11b      	bne.n	801fde8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	6818      	ldr	r0, [r3, #0]
 801fdb4:	68bb      	ldr	r3, [r7, #8]
 801fdb6:	6819      	ldr	r1, [r3, #0]
 801fdb8:	68bb      	ldr	r3, [r7, #8]
 801fdba:	685a      	ldr	r2, [r3, #4]
 801fdbc:	68bb      	ldr	r3, [r7, #8]
 801fdbe:	68db      	ldr	r3, [r3, #12]
 801fdc0:	f000 ff44 	bl	8020c4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801fdc4:	68fb      	ldr	r3, [r7, #12]
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	69da      	ldr	r2, [r3, #28]
 801fdca:	68fb      	ldr	r3, [r7, #12]
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	f022 020c 	bic.w	r2, r2, #12
 801fdd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	69d9      	ldr	r1, [r3, #28]
 801fdda:	68bb      	ldr	r3, [r7, #8]
 801fddc:	689a      	ldr	r2, [r3, #8]
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	430a      	orrs	r2, r1
 801fde4:	61da      	str	r2, [r3, #28]
 801fde6:	e021      	b.n	801fe2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	2b0c      	cmp	r3, #12
 801fdec:	d11c      	bne.n	801fe28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801fdee:	68fb      	ldr	r3, [r7, #12]
 801fdf0:	6818      	ldr	r0, [r3, #0]
 801fdf2:	68bb      	ldr	r3, [r7, #8]
 801fdf4:	6819      	ldr	r1, [r3, #0]
 801fdf6:	68bb      	ldr	r3, [r7, #8]
 801fdf8:	685a      	ldr	r2, [r3, #4]
 801fdfa:	68bb      	ldr	r3, [r7, #8]
 801fdfc:	68db      	ldr	r3, [r3, #12]
 801fdfe:	f000 ff61 	bl	8020cc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	69da      	ldr	r2, [r3, #28]
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801fe10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	69d9      	ldr	r1, [r3, #28]
 801fe18:	68bb      	ldr	r3, [r7, #8]
 801fe1a:	689b      	ldr	r3, [r3, #8]
 801fe1c:	021a      	lsls	r2, r3, #8
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	430a      	orrs	r2, r1
 801fe24:	61da      	str	r2, [r3, #28]
 801fe26:	e001      	b.n	801fe2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801fe28:	2301      	movs	r3, #1
 801fe2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801fe2c:	68fb      	ldr	r3, [r7, #12]
 801fe2e:	2200      	movs	r2, #0
 801fe30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801fe34:	7dfb      	ldrb	r3, [r7, #23]
}
 801fe36:	4618      	mov	r0, r3
 801fe38:	3718      	adds	r7, #24
 801fe3a:	46bd      	mov	sp, r7
 801fe3c:	bd80      	pop	{r7, pc}
	...

0801fe40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801fe40:	b580      	push	{r7, lr}
 801fe42:	b086      	sub	sp, #24
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	60f8      	str	r0, [r7, #12]
 801fe48:	60b9      	str	r1, [r7, #8]
 801fe4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fe4c:	2300      	movs	r3, #0
 801fe4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fe50:	68fb      	ldr	r3, [r7, #12]
 801fe52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fe56:	2b01      	cmp	r3, #1
 801fe58:	d101      	bne.n	801fe5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801fe5a:	2302      	movs	r3, #2
 801fe5c:	e0ff      	b.n	802005e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	2201      	movs	r2, #1
 801fe62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	2b14      	cmp	r3, #20
 801fe6a:	f200 80f0 	bhi.w	802004e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801fe6e:	a201      	add	r2, pc, #4	; (adr r2, 801fe74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801fe70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe74:	0801fec9 	.word	0x0801fec9
 801fe78:	0802004f 	.word	0x0802004f
 801fe7c:	0802004f 	.word	0x0802004f
 801fe80:	0802004f 	.word	0x0802004f
 801fe84:	0801ff09 	.word	0x0801ff09
 801fe88:	0802004f 	.word	0x0802004f
 801fe8c:	0802004f 	.word	0x0802004f
 801fe90:	0802004f 	.word	0x0802004f
 801fe94:	0801ff4b 	.word	0x0801ff4b
 801fe98:	0802004f 	.word	0x0802004f
 801fe9c:	0802004f 	.word	0x0802004f
 801fea0:	0802004f 	.word	0x0802004f
 801fea4:	0801ff8b 	.word	0x0801ff8b
 801fea8:	0802004f 	.word	0x0802004f
 801feac:	0802004f 	.word	0x0802004f
 801feb0:	0802004f 	.word	0x0802004f
 801feb4:	0801ffcd 	.word	0x0801ffcd
 801feb8:	0802004f 	.word	0x0802004f
 801febc:	0802004f 	.word	0x0802004f
 801fec0:	0802004f 	.word	0x0802004f
 801fec4:	0802000d 	.word	0x0802000d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	68b9      	ldr	r1, [r7, #8]
 801fece:	4618      	mov	r0, r3
 801fed0:	f000 faca 	bl	8020468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801fed4:	68fb      	ldr	r3, [r7, #12]
 801fed6:	681b      	ldr	r3, [r3, #0]
 801fed8:	699a      	ldr	r2, [r3, #24]
 801feda:	68fb      	ldr	r3, [r7, #12]
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	f042 0208 	orr.w	r2, r2, #8
 801fee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	699a      	ldr	r2, [r3, #24]
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	f022 0204 	bic.w	r2, r2, #4
 801fef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	6999      	ldr	r1, [r3, #24]
 801fefa:	68bb      	ldr	r3, [r7, #8]
 801fefc:	691a      	ldr	r2, [r3, #16]
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	430a      	orrs	r2, r1
 801ff04:	619a      	str	r2, [r3, #24]
      break;
 801ff06:	e0a5      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	68b9      	ldr	r1, [r7, #8]
 801ff0e:	4618      	mov	r0, r3
 801ff10:	f000 fb3a 	bl	8020588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	699a      	ldr	r2, [r3, #24]
 801ff1a:	68fb      	ldr	r3, [r7, #12]
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ff22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ff24:	68fb      	ldr	r3, [r7, #12]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	699a      	ldr	r2, [r3, #24]
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ff32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	6999      	ldr	r1, [r3, #24]
 801ff3a:	68bb      	ldr	r3, [r7, #8]
 801ff3c:	691b      	ldr	r3, [r3, #16]
 801ff3e:	021a      	lsls	r2, r3, #8
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	430a      	orrs	r2, r1
 801ff46:	619a      	str	r2, [r3, #24]
      break;
 801ff48:	e084      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ff4a:	68fb      	ldr	r3, [r7, #12]
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	68b9      	ldr	r1, [r7, #8]
 801ff50:	4618      	mov	r0, r3
 801ff52:	f000 fba3 	bl	802069c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	69da      	ldr	r2, [r3, #28]
 801ff5c:	68fb      	ldr	r3, [r7, #12]
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	f042 0208 	orr.w	r2, r2, #8
 801ff64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	69da      	ldr	r2, [r3, #28]
 801ff6c:	68fb      	ldr	r3, [r7, #12]
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	f022 0204 	bic.w	r2, r2, #4
 801ff74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	69d9      	ldr	r1, [r3, #28]
 801ff7c:	68bb      	ldr	r3, [r7, #8]
 801ff7e:	691a      	ldr	r2, [r3, #16]
 801ff80:	68fb      	ldr	r3, [r7, #12]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	430a      	orrs	r2, r1
 801ff86:	61da      	str	r2, [r3, #28]
      break;
 801ff88:	e064      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801ff8a:	68fb      	ldr	r3, [r7, #12]
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	68b9      	ldr	r1, [r7, #8]
 801ff90:	4618      	mov	r0, r3
 801ff92:	f000 fc0b 	bl	80207ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	69da      	ldr	r2, [r3, #28]
 801ff9c:	68fb      	ldr	r3, [r7, #12]
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ffa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801ffa6:	68fb      	ldr	r3, [r7, #12]
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	69da      	ldr	r2, [r3, #28]
 801ffac:	68fb      	ldr	r3, [r7, #12]
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ffb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	69d9      	ldr	r1, [r3, #28]
 801ffbc:	68bb      	ldr	r3, [r7, #8]
 801ffbe:	691b      	ldr	r3, [r3, #16]
 801ffc0:	021a      	lsls	r2, r3, #8
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	681b      	ldr	r3, [r3, #0]
 801ffc6:	430a      	orrs	r2, r1
 801ffc8:	61da      	str	r2, [r3, #28]
      break;
 801ffca:	e043      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	68b9      	ldr	r1, [r7, #8]
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f000 fc54 	bl	8020880 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801ffd8:	68fb      	ldr	r3, [r7, #12]
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ffde:	68fb      	ldr	r3, [r7, #12]
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	f042 0208 	orr.w	r2, r2, #8
 801ffe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	f022 0204 	bic.w	r2, r2, #4
 801fff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801fff8:	68fb      	ldr	r3, [r7, #12]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fffe:	68bb      	ldr	r3, [r7, #8]
 8020000:	691a      	ldr	r2, [r3, #16]
 8020002:	68fb      	ldr	r3, [r7, #12]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	430a      	orrs	r2, r1
 8020008:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802000a:	e023      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 802000c:	68fb      	ldr	r3, [r7, #12]
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	68b9      	ldr	r1, [r7, #8]
 8020012:	4618      	mov	r0, r3
 8020014:	f000 fc98 	bl	8020948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802001e:	68fb      	ldr	r3, [r7, #12]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802002e:	68fb      	ldr	r3, [r7, #12]
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802003e:	68bb      	ldr	r3, [r7, #8]
 8020040:	691b      	ldr	r3, [r3, #16]
 8020042:	021a      	lsls	r2, r3, #8
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	430a      	orrs	r2, r1
 802004a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802004c:	e002      	b.n	8020054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 802004e:	2301      	movs	r3, #1
 8020050:	75fb      	strb	r3, [r7, #23]
      break;
 8020052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	2200      	movs	r2, #0
 8020058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802005c:	7dfb      	ldrb	r3, [r7, #23]
}
 802005e:	4618      	mov	r0, r3
 8020060:	3718      	adds	r7, #24
 8020062:	46bd      	mov	sp, r7
 8020064:	bd80      	pop	{r7, pc}
 8020066:	bf00      	nop

08020068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020068:	b580      	push	{r7, lr}
 802006a:	b084      	sub	sp, #16
 802006c:	af00      	add	r7, sp, #0
 802006e:	6078      	str	r0, [r7, #4]
 8020070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020072:	2300      	movs	r3, #0
 8020074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802007c:	2b01      	cmp	r3, #1
 802007e:	d101      	bne.n	8020084 <HAL_TIM_ConfigClockSource+0x1c>
 8020080:	2302      	movs	r3, #2
 8020082:	e0dc      	b.n	802023e <HAL_TIM_ConfigClockSource+0x1d6>
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	2201      	movs	r2, #1
 8020088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	2202      	movs	r2, #2
 8020090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	689b      	ldr	r3, [r3, #8]
 802009a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802009c:	68ba      	ldr	r2, [r7, #8]
 802009e:	4b6a      	ldr	r3, [pc, #424]	; (8020248 <HAL_TIM_ConfigClockSource+0x1e0>)
 80200a0:	4013      	ands	r3, r2
 80200a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80200a4:	68bb      	ldr	r3, [r7, #8]
 80200a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80200aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	68ba      	ldr	r2, [r7, #8]
 80200b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	4a64      	ldr	r2, [pc, #400]	; (802024c <HAL_TIM_ConfigClockSource+0x1e4>)
 80200ba:	4293      	cmp	r3, r2
 80200bc:	f000 80a9 	beq.w	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 80200c0:	4a62      	ldr	r2, [pc, #392]	; (802024c <HAL_TIM_ConfigClockSource+0x1e4>)
 80200c2:	4293      	cmp	r3, r2
 80200c4:	f200 80ae 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 80200c8:	4a61      	ldr	r2, [pc, #388]	; (8020250 <HAL_TIM_ConfigClockSource+0x1e8>)
 80200ca:	4293      	cmp	r3, r2
 80200cc:	f000 80a1 	beq.w	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 80200d0:	4a5f      	ldr	r2, [pc, #380]	; (8020250 <HAL_TIM_ConfigClockSource+0x1e8>)
 80200d2:	4293      	cmp	r3, r2
 80200d4:	f200 80a6 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 80200d8:	4a5e      	ldr	r2, [pc, #376]	; (8020254 <HAL_TIM_ConfigClockSource+0x1ec>)
 80200da:	4293      	cmp	r3, r2
 80200dc:	f000 8099 	beq.w	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 80200e0:	4a5c      	ldr	r2, [pc, #368]	; (8020254 <HAL_TIM_ConfigClockSource+0x1ec>)
 80200e2:	4293      	cmp	r3, r2
 80200e4:	f200 809e 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 80200e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80200ec:	f000 8091 	beq.w	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 80200f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80200f4:	f200 8096 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 80200f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80200fc:	f000 8089 	beq.w	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 8020100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020104:	f200 808e 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802010c:	d03e      	beq.n	802018c <HAL_TIM_ConfigClockSource+0x124>
 802010e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020112:	f200 8087 	bhi.w	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802011a:	f000 8086 	beq.w	802022a <HAL_TIM_ConfigClockSource+0x1c2>
 802011e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020122:	d87f      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020124:	2b70      	cmp	r3, #112	; 0x70
 8020126:	d01a      	beq.n	802015e <HAL_TIM_ConfigClockSource+0xf6>
 8020128:	2b70      	cmp	r3, #112	; 0x70
 802012a:	d87b      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 802012c:	2b60      	cmp	r3, #96	; 0x60
 802012e:	d050      	beq.n	80201d2 <HAL_TIM_ConfigClockSource+0x16a>
 8020130:	2b60      	cmp	r3, #96	; 0x60
 8020132:	d877      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020134:	2b50      	cmp	r3, #80	; 0x50
 8020136:	d03c      	beq.n	80201b2 <HAL_TIM_ConfigClockSource+0x14a>
 8020138:	2b50      	cmp	r3, #80	; 0x50
 802013a:	d873      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 802013c:	2b40      	cmp	r3, #64	; 0x40
 802013e:	d058      	beq.n	80201f2 <HAL_TIM_ConfigClockSource+0x18a>
 8020140:	2b40      	cmp	r3, #64	; 0x40
 8020142:	d86f      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020144:	2b30      	cmp	r3, #48	; 0x30
 8020146:	d064      	beq.n	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 8020148:	2b30      	cmp	r3, #48	; 0x30
 802014a:	d86b      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 802014c:	2b20      	cmp	r3, #32
 802014e:	d060      	beq.n	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 8020150:	2b20      	cmp	r3, #32
 8020152:	d867      	bhi.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
 8020154:	2b00      	cmp	r3, #0
 8020156:	d05c      	beq.n	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 8020158:	2b10      	cmp	r3, #16
 802015a:	d05a      	beq.n	8020212 <HAL_TIM_ConfigClockSource+0x1aa>
 802015c:	e062      	b.n	8020224 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	6818      	ldr	r0, [r3, #0]
 8020162:	683b      	ldr	r3, [r7, #0]
 8020164:	6899      	ldr	r1, [r3, #8]
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	685a      	ldr	r2, [r3, #4]
 802016a:	683b      	ldr	r3, [r7, #0]
 802016c:	68db      	ldr	r3, [r3, #12]
 802016e:	f000 fe05 	bl	8020d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	689b      	ldr	r3, [r3, #8]
 8020178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802017a:	68bb      	ldr	r3, [r7, #8]
 802017c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	681b      	ldr	r3, [r3, #0]
 8020186:	68ba      	ldr	r2, [r7, #8]
 8020188:	609a      	str	r2, [r3, #8]
      break;
 802018a:	e04f      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	6818      	ldr	r0, [r3, #0]
 8020190:	683b      	ldr	r3, [r7, #0]
 8020192:	6899      	ldr	r1, [r3, #8]
 8020194:	683b      	ldr	r3, [r7, #0]
 8020196:	685a      	ldr	r2, [r3, #4]
 8020198:	683b      	ldr	r3, [r7, #0]
 802019a:	68db      	ldr	r3, [r3, #12]
 802019c:	f000 fdee 	bl	8020d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	689a      	ldr	r2, [r3, #8]
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80201ae:	609a      	str	r2, [r3, #8]
      break;
 80201b0:	e03c      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	6818      	ldr	r0, [r3, #0]
 80201b6:	683b      	ldr	r3, [r7, #0]
 80201b8:	6859      	ldr	r1, [r3, #4]
 80201ba:	683b      	ldr	r3, [r7, #0]
 80201bc:	68db      	ldr	r3, [r3, #12]
 80201be:	461a      	mov	r2, r3
 80201c0:	f000 fca8 	bl	8020b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	2150      	movs	r1, #80	; 0x50
 80201ca:	4618      	mov	r0, r3
 80201cc:	f000 fdb8 	bl	8020d40 <TIM_ITRx_SetConfig>
      break;
 80201d0:	e02c      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	6818      	ldr	r0, [r3, #0]
 80201d6:	683b      	ldr	r3, [r7, #0]
 80201d8:	6859      	ldr	r1, [r3, #4]
 80201da:	683b      	ldr	r3, [r7, #0]
 80201dc:	68db      	ldr	r3, [r3, #12]
 80201de:	461a      	mov	r2, r3
 80201e0:	f000 fd04 	bl	8020bec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	2160      	movs	r1, #96	; 0x60
 80201ea:	4618      	mov	r0, r3
 80201ec:	f000 fda8 	bl	8020d40 <TIM_ITRx_SetConfig>
      break;
 80201f0:	e01c      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	6818      	ldr	r0, [r3, #0]
 80201f6:	683b      	ldr	r3, [r7, #0]
 80201f8:	6859      	ldr	r1, [r3, #4]
 80201fa:	683b      	ldr	r3, [r7, #0]
 80201fc:	68db      	ldr	r3, [r3, #12]
 80201fe:	461a      	mov	r2, r3
 8020200:	f000 fc88 	bl	8020b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	2140      	movs	r1, #64	; 0x40
 802020a:	4618      	mov	r0, r3
 802020c:	f000 fd98 	bl	8020d40 <TIM_ITRx_SetConfig>
      break;
 8020210:	e00c      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	681a      	ldr	r2, [r3, #0]
 8020216:	683b      	ldr	r3, [r7, #0]
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	4619      	mov	r1, r3
 802021c:	4610      	mov	r0, r2
 802021e:	f000 fd8f 	bl	8020d40 <TIM_ITRx_SetConfig>
      break;
 8020222:	e003      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8020224:	2301      	movs	r3, #1
 8020226:	73fb      	strb	r3, [r7, #15]
      break;
 8020228:	e000      	b.n	802022c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 802022a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	2201      	movs	r2, #1
 8020230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	2200      	movs	r2, #0
 8020238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802023c:	7bfb      	ldrb	r3, [r7, #15]
}
 802023e:	4618      	mov	r0, r3
 8020240:	3710      	adds	r7, #16
 8020242:	46bd      	mov	sp, r7
 8020244:	bd80      	pop	{r7, pc}
 8020246:	bf00      	nop
 8020248:	ffceff88 	.word	0xffceff88
 802024c:	00100040 	.word	0x00100040
 8020250:	00100030 	.word	0x00100030
 8020254:	00100020 	.word	0x00100020

08020258 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020258:	b480      	push	{r7}
 802025a:	b085      	sub	sp, #20
 802025c:	af00      	add	r7, sp, #0
 802025e:	6078      	str	r0, [r7, #4]
 8020260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8020262:	2300      	movs	r3, #0
 8020264:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8020266:	683b      	ldr	r3, [r7, #0]
 8020268:	2b0c      	cmp	r3, #12
 802026a:	d831      	bhi.n	80202d0 <HAL_TIM_ReadCapturedValue+0x78>
 802026c:	a201      	add	r2, pc, #4	; (adr r2, 8020274 <HAL_TIM_ReadCapturedValue+0x1c>)
 802026e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020272:	bf00      	nop
 8020274:	080202a9 	.word	0x080202a9
 8020278:	080202d1 	.word	0x080202d1
 802027c:	080202d1 	.word	0x080202d1
 8020280:	080202d1 	.word	0x080202d1
 8020284:	080202b3 	.word	0x080202b3
 8020288:	080202d1 	.word	0x080202d1
 802028c:	080202d1 	.word	0x080202d1
 8020290:	080202d1 	.word	0x080202d1
 8020294:	080202bd 	.word	0x080202bd
 8020298:	080202d1 	.word	0x080202d1
 802029c:	080202d1 	.word	0x080202d1
 80202a0:	080202d1 	.word	0x080202d1
 80202a4:	080202c7 	.word	0x080202c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80202ae:	60fb      	str	r3, [r7, #12]

      break;
 80202b0:	e00f      	b.n	80202d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202b8:	60fb      	str	r3, [r7, #12]

      break;
 80202ba:	e00a      	b.n	80202d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80202c2:	60fb      	str	r3, [r7, #12]

      break;
 80202c4:	e005      	b.n	80202d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80202cc:	60fb      	str	r3, [r7, #12]

      break;
 80202ce:	e000      	b.n	80202d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80202d0:	bf00      	nop
  }

  return tmpreg;
 80202d2:	68fb      	ldr	r3, [r7, #12]
}
 80202d4:	4618      	mov	r0, r3
 80202d6:	3714      	adds	r7, #20
 80202d8:	46bd      	mov	sp, r7
 80202da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202de:	4770      	bx	lr

080202e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80202e0:	b480      	push	{r7}
 80202e2:	b083      	sub	sp, #12
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80202e8:	bf00      	nop
 80202ea:	370c      	adds	r7, #12
 80202ec:	46bd      	mov	sp, r7
 80202ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f2:	4770      	bx	lr

080202f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80202f4:	b480      	push	{r7}
 80202f6:	b083      	sub	sp, #12
 80202f8:	af00      	add	r7, sp, #0
 80202fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80202fc:	bf00      	nop
 80202fe:	370c      	adds	r7, #12
 8020300:	46bd      	mov	sp, r7
 8020302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020306:	4770      	bx	lr

08020308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020308:	b480      	push	{r7}
 802030a:	b083      	sub	sp, #12
 802030c:	af00      	add	r7, sp, #0
 802030e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8020310:	bf00      	nop
 8020312:	370c      	adds	r7, #12
 8020314:	46bd      	mov	sp, r7
 8020316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802031a:	4770      	bx	lr

0802031c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 802031c:	b480      	push	{r7}
 802031e:	b085      	sub	sp, #20
 8020320:	af00      	add	r7, sp, #0
 8020322:	6078      	str	r0, [r7, #4]
 8020324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	4a44      	ldr	r2, [pc, #272]	; (8020440 <TIM_Base_SetConfig+0x124>)
 8020330:	4293      	cmp	r3, r2
 8020332:	d013      	beq.n	802035c <TIM_Base_SetConfig+0x40>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802033a:	d00f      	beq.n	802035c <TIM_Base_SetConfig+0x40>
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	4a41      	ldr	r2, [pc, #260]	; (8020444 <TIM_Base_SetConfig+0x128>)
 8020340:	4293      	cmp	r3, r2
 8020342:	d00b      	beq.n	802035c <TIM_Base_SetConfig+0x40>
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	4a40      	ldr	r2, [pc, #256]	; (8020448 <TIM_Base_SetConfig+0x12c>)
 8020348:	4293      	cmp	r3, r2
 802034a:	d007      	beq.n	802035c <TIM_Base_SetConfig+0x40>
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	4a3f      	ldr	r2, [pc, #252]	; (802044c <TIM_Base_SetConfig+0x130>)
 8020350:	4293      	cmp	r3, r2
 8020352:	d003      	beq.n	802035c <TIM_Base_SetConfig+0x40>
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	4a3e      	ldr	r2, [pc, #248]	; (8020450 <TIM_Base_SetConfig+0x134>)
 8020358:	4293      	cmp	r3, r2
 802035a:	d108      	bne.n	802036e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802035c:	68fb      	ldr	r3, [r7, #12]
 802035e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020364:	683b      	ldr	r3, [r7, #0]
 8020366:	685b      	ldr	r3, [r3, #4]
 8020368:	68fa      	ldr	r2, [r7, #12]
 802036a:	4313      	orrs	r3, r2
 802036c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	4a33      	ldr	r2, [pc, #204]	; (8020440 <TIM_Base_SetConfig+0x124>)
 8020372:	4293      	cmp	r3, r2
 8020374:	d027      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802037c:	d023      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	4a30      	ldr	r2, [pc, #192]	; (8020444 <TIM_Base_SetConfig+0x128>)
 8020382:	4293      	cmp	r3, r2
 8020384:	d01f      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	4a2f      	ldr	r2, [pc, #188]	; (8020448 <TIM_Base_SetConfig+0x12c>)
 802038a:	4293      	cmp	r3, r2
 802038c:	d01b      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	4a2e      	ldr	r2, [pc, #184]	; (802044c <TIM_Base_SetConfig+0x130>)
 8020392:	4293      	cmp	r3, r2
 8020394:	d017      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	4a2d      	ldr	r2, [pc, #180]	; (8020450 <TIM_Base_SetConfig+0x134>)
 802039a:	4293      	cmp	r3, r2
 802039c:	d013      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	4a2c      	ldr	r2, [pc, #176]	; (8020454 <TIM_Base_SetConfig+0x138>)
 80203a2:	4293      	cmp	r3, r2
 80203a4:	d00f      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	4a2b      	ldr	r2, [pc, #172]	; (8020458 <TIM_Base_SetConfig+0x13c>)
 80203aa:	4293      	cmp	r3, r2
 80203ac:	d00b      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	4a2a      	ldr	r2, [pc, #168]	; (802045c <TIM_Base_SetConfig+0x140>)
 80203b2:	4293      	cmp	r3, r2
 80203b4:	d007      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	4a29      	ldr	r2, [pc, #164]	; (8020460 <TIM_Base_SetConfig+0x144>)
 80203ba:	4293      	cmp	r3, r2
 80203bc:	d003      	beq.n	80203c6 <TIM_Base_SetConfig+0xaa>
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	4a28      	ldr	r2, [pc, #160]	; (8020464 <TIM_Base_SetConfig+0x148>)
 80203c2:	4293      	cmp	r3, r2
 80203c4:	d108      	bne.n	80203d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80203cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	68db      	ldr	r3, [r3, #12]
 80203d2:	68fa      	ldr	r2, [r7, #12]
 80203d4:	4313      	orrs	r3, r2
 80203d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80203de:	683b      	ldr	r3, [r7, #0]
 80203e0:	695b      	ldr	r3, [r3, #20]
 80203e2:	4313      	orrs	r3, r2
 80203e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	68fa      	ldr	r2, [r7, #12]
 80203ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80203ec:	683b      	ldr	r3, [r7, #0]
 80203ee:	689a      	ldr	r2, [r3, #8]
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80203f4:	683b      	ldr	r3, [r7, #0]
 80203f6:	681a      	ldr	r2, [r3, #0]
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	4a10      	ldr	r2, [pc, #64]	; (8020440 <TIM_Base_SetConfig+0x124>)
 8020400:	4293      	cmp	r3, r2
 8020402:	d00f      	beq.n	8020424 <TIM_Base_SetConfig+0x108>
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	4a12      	ldr	r2, [pc, #72]	; (8020450 <TIM_Base_SetConfig+0x134>)
 8020408:	4293      	cmp	r3, r2
 802040a:	d00b      	beq.n	8020424 <TIM_Base_SetConfig+0x108>
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	4a11      	ldr	r2, [pc, #68]	; (8020454 <TIM_Base_SetConfig+0x138>)
 8020410:	4293      	cmp	r3, r2
 8020412:	d007      	beq.n	8020424 <TIM_Base_SetConfig+0x108>
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	4a10      	ldr	r2, [pc, #64]	; (8020458 <TIM_Base_SetConfig+0x13c>)
 8020418:	4293      	cmp	r3, r2
 802041a:	d003      	beq.n	8020424 <TIM_Base_SetConfig+0x108>
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	4a0f      	ldr	r2, [pc, #60]	; (802045c <TIM_Base_SetConfig+0x140>)
 8020420:	4293      	cmp	r3, r2
 8020422:	d103      	bne.n	802042c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020424:	683b      	ldr	r3, [r7, #0]
 8020426:	691a      	ldr	r2, [r3, #16]
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	2201      	movs	r2, #1
 8020430:	615a      	str	r2, [r3, #20]
}
 8020432:	bf00      	nop
 8020434:	3714      	adds	r7, #20
 8020436:	46bd      	mov	sp, r7
 8020438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802043c:	4770      	bx	lr
 802043e:	bf00      	nop
 8020440:	40010000 	.word	0x40010000
 8020444:	40000400 	.word	0x40000400
 8020448:	40000800 	.word	0x40000800
 802044c:	40000c00 	.word	0x40000c00
 8020450:	40010400 	.word	0x40010400
 8020454:	40014000 	.word	0x40014000
 8020458:	40014400 	.word	0x40014400
 802045c:	40014800 	.word	0x40014800
 8020460:	4000e000 	.word	0x4000e000
 8020464:	4000e400 	.word	0x4000e400

08020468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020468:	b480      	push	{r7}
 802046a:	b087      	sub	sp, #28
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
 8020470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	6a1b      	ldr	r3, [r3, #32]
 8020476:	f023 0201 	bic.w	r2, r3, #1
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	6a1b      	ldr	r3, [r3, #32]
 8020482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	685b      	ldr	r3, [r3, #4]
 8020488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	699b      	ldr	r3, [r3, #24]
 802048e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020490:	68fa      	ldr	r2, [r7, #12]
 8020492:	4b37      	ldr	r3, [pc, #220]	; (8020570 <TIM_OC1_SetConfig+0x108>)
 8020494:	4013      	ands	r3, r2
 8020496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020498:	68fb      	ldr	r3, [r7, #12]
 802049a:	f023 0303 	bic.w	r3, r3, #3
 802049e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80204a0:	683b      	ldr	r3, [r7, #0]
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	68fa      	ldr	r2, [r7, #12]
 80204a6:	4313      	orrs	r3, r2
 80204a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80204aa:	697b      	ldr	r3, [r7, #20]
 80204ac:	f023 0302 	bic.w	r3, r3, #2
 80204b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80204b2:	683b      	ldr	r3, [r7, #0]
 80204b4:	689b      	ldr	r3, [r3, #8]
 80204b6:	697a      	ldr	r2, [r7, #20]
 80204b8:	4313      	orrs	r3, r2
 80204ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	4a2d      	ldr	r2, [pc, #180]	; (8020574 <TIM_OC1_SetConfig+0x10c>)
 80204c0:	4293      	cmp	r3, r2
 80204c2:	d00f      	beq.n	80204e4 <TIM_OC1_SetConfig+0x7c>
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	4a2c      	ldr	r2, [pc, #176]	; (8020578 <TIM_OC1_SetConfig+0x110>)
 80204c8:	4293      	cmp	r3, r2
 80204ca:	d00b      	beq.n	80204e4 <TIM_OC1_SetConfig+0x7c>
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	4a2b      	ldr	r2, [pc, #172]	; (802057c <TIM_OC1_SetConfig+0x114>)
 80204d0:	4293      	cmp	r3, r2
 80204d2:	d007      	beq.n	80204e4 <TIM_OC1_SetConfig+0x7c>
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	4a2a      	ldr	r2, [pc, #168]	; (8020580 <TIM_OC1_SetConfig+0x118>)
 80204d8:	4293      	cmp	r3, r2
 80204da:	d003      	beq.n	80204e4 <TIM_OC1_SetConfig+0x7c>
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	4a29      	ldr	r2, [pc, #164]	; (8020584 <TIM_OC1_SetConfig+0x11c>)
 80204e0:	4293      	cmp	r3, r2
 80204e2:	d10c      	bne.n	80204fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80204e4:	697b      	ldr	r3, [r7, #20]
 80204e6:	f023 0308 	bic.w	r3, r3, #8
 80204ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80204ec:	683b      	ldr	r3, [r7, #0]
 80204ee:	68db      	ldr	r3, [r3, #12]
 80204f0:	697a      	ldr	r2, [r7, #20]
 80204f2:	4313      	orrs	r3, r2
 80204f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80204f6:	697b      	ldr	r3, [r7, #20]
 80204f8:	f023 0304 	bic.w	r3, r3, #4
 80204fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	4a1c      	ldr	r2, [pc, #112]	; (8020574 <TIM_OC1_SetConfig+0x10c>)
 8020502:	4293      	cmp	r3, r2
 8020504:	d00f      	beq.n	8020526 <TIM_OC1_SetConfig+0xbe>
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	4a1b      	ldr	r2, [pc, #108]	; (8020578 <TIM_OC1_SetConfig+0x110>)
 802050a:	4293      	cmp	r3, r2
 802050c:	d00b      	beq.n	8020526 <TIM_OC1_SetConfig+0xbe>
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	4a1a      	ldr	r2, [pc, #104]	; (802057c <TIM_OC1_SetConfig+0x114>)
 8020512:	4293      	cmp	r3, r2
 8020514:	d007      	beq.n	8020526 <TIM_OC1_SetConfig+0xbe>
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	4a19      	ldr	r2, [pc, #100]	; (8020580 <TIM_OC1_SetConfig+0x118>)
 802051a:	4293      	cmp	r3, r2
 802051c:	d003      	beq.n	8020526 <TIM_OC1_SetConfig+0xbe>
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	4a18      	ldr	r2, [pc, #96]	; (8020584 <TIM_OC1_SetConfig+0x11c>)
 8020522:	4293      	cmp	r3, r2
 8020524:	d111      	bne.n	802054a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020526:	693b      	ldr	r3, [r7, #16]
 8020528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802052c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802052e:	693b      	ldr	r3, [r7, #16]
 8020530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020536:	683b      	ldr	r3, [r7, #0]
 8020538:	695b      	ldr	r3, [r3, #20]
 802053a:	693a      	ldr	r2, [r7, #16]
 802053c:	4313      	orrs	r3, r2
 802053e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020540:	683b      	ldr	r3, [r7, #0]
 8020542:	699b      	ldr	r3, [r3, #24]
 8020544:	693a      	ldr	r2, [r7, #16]
 8020546:	4313      	orrs	r3, r2
 8020548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	693a      	ldr	r2, [r7, #16]
 802054e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	68fa      	ldr	r2, [r7, #12]
 8020554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020556:	683b      	ldr	r3, [r7, #0]
 8020558:	685a      	ldr	r2, [r3, #4]
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	697a      	ldr	r2, [r7, #20]
 8020562:	621a      	str	r2, [r3, #32]
}
 8020564:	bf00      	nop
 8020566:	371c      	adds	r7, #28
 8020568:	46bd      	mov	sp, r7
 802056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802056e:	4770      	bx	lr
 8020570:	fffeff8f 	.word	0xfffeff8f
 8020574:	40010000 	.word	0x40010000
 8020578:	40010400 	.word	0x40010400
 802057c:	40014000 	.word	0x40014000
 8020580:	40014400 	.word	0x40014400
 8020584:	40014800 	.word	0x40014800

08020588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020588:	b480      	push	{r7}
 802058a:	b087      	sub	sp, #28
 802058c:	af00      	add	r7, sp, #0
 802058e:	6078      	str	r0, [r7, #4]
 8020590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	6a1b      	ldr	r3, [r3, #32]
 8020596:	f023 0210 	bic.w	r2, r3, #16
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	6a1b      	ldr	r3, [r3, #32]
 80205a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	685b      	ldr	r3, [r3, #4]
 80205a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	699b      	ldr	r3, [r3, #24]
 80205ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80205b0:	68fa      	ldr	r2, [r7, #12]
 80205b2:	4b34      	ldr	r3, [pc, #208]	; (8020684 <TIM_OC2_SetConfig+0xfc>)
 80205b4:	4013      	ands	r3, r2
 80205b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80205b8:	68fb      	ldr	r3, [r7, #12]
 80205ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80205be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	021b      	lsls	r3, r3, #8
 80205c6:	68fa      	ldr	r2, [r7, #12]
 80205c8:	4313      	orrs	r3, r2
 80205ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80205cc:	697b      	ldr	r3, [r7, #20]
 80205ce:	f023 0320 	bic.w	r3, r3, #32
 80205d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80205d4:	683b      	ldr	r3, [r7, #0]
 80205d6:	689b      	ldr	r3, [r3, #8]
 80205d8:	011b      	lsls	r3, r3, #4
 80205da:	697a      	ldr	r2, [r7, #20]
 80205dc:	4313      	orrs	r3, r2
 80205de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	4a29      	ldr	r2, [pc, #164]	; (8020688 <TIM_OC2_SetConfig+0x100>)
 80205e4:	4293      	cmp	r3, r2
 80205e6:	d003      	beq.n	80205f0 <TIM_OC2_SetConfig+0x68>
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	4a28      	ldr	r2, [pc, #160]	; (802068c <TIM_OC2_SetConfig+0x104>)
 80205ec:	4293      	cmp	r3, r2
 80205ee:	d10d      	bne.n	802060c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80205f0:	697b      	ldr	r3, [r7, #20]
 80205f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80205f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	68db      	ldr	r3, [r3, #12]
 80205fc:	011b      	lsls	r3, r3, #4
 80205fe:	697a      	ldr	r2, [r7, #20]
 8020600:	4313      	orrs	r3, r2
 8020602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020604:	697b      	ldr	r3, [r7, #20]
 8020606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802060a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	4a1e      	ldr	r2, [pc, #120]	; (8020688 <TIM_OC2_SetConfig+0x100>)
 8020610:	4293      	cmp	r3, r2
 8020612:	d00f      	beq.n	8020634 <TIM_OC2_SetConfig+0xac>
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	4a1d      	ldr	r2, [pc, #116]	; (802068c <TIM_OC2_SetConfig+0x104>)
 8020618:	4293      	cmp	r3, r2
 802061a:	d00b      	beq.n	8020634 <TIM_OC2_SetConfig+0xac>
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	4a1c      	ldr	r2, [pc, #112]	; (8020690 <TIM_OC2_SetConfig+0x108>)
 8020620:	4293      	cmp	r3, r2
 8020622:	d007      	beq.n	8020634 <TIM_OC2_SetConfig+0xac>
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	4a1b      	ldr	r2, [pc, #108]	; (8020694 <TIM_OC2_SetConfig+0x10c>)
 8020628:	4293      	cmp	r3, r2
 802062a:	d003      	beq.n	8020634 <TIM_OC2_SetConfig+0xac>
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	4a1a      	ldr	r2, [pc, #104]	; (8020698 <TIM_OC2_SetConfig+0x110>)
 8020630:	4293      	cmp	r3, r2
 8020632:	d113      	bne.n	802065c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020634:	693b      	ldr	r3, [r7, #16]
 8020636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802063a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802063c:	693b      	ldr	r3, [r7, #16]
 802063e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020644:	683b      	ldr	r3, [r7, #0]
 8020646:	695b      	ldr	r3, [r3, #20]
 8020648:	009b      	lsls	r3, r3, #2
 802064a:	693a      	ldr	r2, [r7, #16]
 802064c:	4313      	orrs	r3, r2
 802064e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020650:	683b      	ldr	r3, [r7, #0]
 8020652:	699b      	ldr	r3, [r3, #24]
 8020654:	009b      	lsls	r3, r3, #2
 8020656:	693a      	ldr	r2, [r7, #16]
 8020658:	4313      	orrs	r3, r2
 802065a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	693a      	ldr	r2, [r7, #16]
 8020660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	68fa      	ldr	r2, [r7, #12]
 8020666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020668:	683b      	ldr	r3, [r7, #0]
 802066a:	685a      	ldr	r2, [r3, #4]
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	697a      	ldr	r2, [r7, #20]
 8020674:	621a      	str	r2, [r3, #32]
}
 8020676:	bf00      	nop
 8020678:	371c      	adds	r7, #28
 802067a:	46bd      	mov	sp, r7
 802067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop
 8020684:	feff8fff 	.word	0xfeff8fff
 8020688:	40010000 	.word	0x40010000
 802068c:	40010400 	.word	0x40010400
 8020690:	40014000 	.word	0x40014000
 8020694:	40014400 	.word	0x40014400
 8020698:	40014800 	.word	0x40014800

0802069c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 802069c:	b480      	push	{r7}
 802069e:	b087      	sub	sp, #28
 80206a0:	af00      	add	r7, sp, #0
 80206a2:	6078      	str	r0, [r7, #4]
 80206a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	6a1b      	ldr	r3, [r3, #32]
 80206aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	6a1b      	ldr	r3, [r3, #32]
 80206b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	685b      	ldr	r3, [r3, #4]
 80206bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	69db      	ldr	r3, [r3, #28]
 80206c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80206c4:	68fa      	ldr	r2, [r7, #12]
 80206c6:	4b33      	ldr	r3, [pc, #204]	; (8020794 <TIM_OC3_SetConfig+0xf8>)
 80206c8:	4013      	ands	r3, r2
 80206ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80206cc:	68fb      	ldr	r3, [r7, #12]
 80206ce:	f023 0303 	bic.w	r3, r3, #3
 80206d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80206d4:	683b      	ldr	r3, [r7, #0]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	68fa      	ldr	r2, [r7, #12]
 80206da:	4313      	orrs	r3, r2
 80206dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80206de:	697b      	ldr	r3, [r7, #20]
 80206e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80206e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80206e6:	683b      	ldr	r3, [r7, #0]
 80206e8:	689b      	ldr	r3, [r3, #8]
 80206ea:	021b      	lsls	r3, r3, #8
 80206ec:	697a      	ldr	r2, [r7, #20]
 80206ee:	4313      	orrs	r3, r2
 80206f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	4a28      	ldr	r2, [pc, #160]	; (8020798 <TIM_OC3_SetConfig+0xfc>)
 80206f6:	4293      	cmp	r3, r2
 80206f8:	d003      	beq.n	8020702 <TIM_OC3_SetConfig+0x66>
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	4a27      	ldr	r2, [pc, #156]	; (802079c <TIM_OC3_SetConfig+0x100>)
 80206fe:	4293      	cmp	r3, r2
 8020700:	d10d      	bne.n	802071e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020702:	697b      	ldr	r3, [r7, #20]
 8020704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802070a:	683b      	ldr	r3, [r7, #0]
 802070c:	68db      	ldr	r3, [r3, #12]
 802070e:	021b      	lsls	r3, r3, #8
 8020710:	697a      	ldr	r2, [r7, #20]
 8020712:	4313      	orrs	r3, r2
 8020714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020716:	697b      	ldr	r3, [r7, #20]
 8020718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802071c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	4a1d      	ldr	r2, [pc, #116]	; (8020798 <TIM_OC3_SetConfig+0xfc>)
 8020722:	4293      	cmp	r3, r2
 8020724:	d00f      	beq.n	8020746 <TIM_OC3_SetConfig+0xaa>
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	4a1c      	ldr	r2, [pc, #112]	; (802079c <TIM_OC3_SetConfig+0x100>)
 802072a:	4293      	cmp	r3, r2
 802072c:	d00b      	beq.n	8020746 <TIM_OC3_SetConfig+0xaa>
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	4a1b      	ldr	r2, [pc, #108]	; (80207a0 <TIM_OC3_SetConfig+0x104>)
 8020732:	4293      	cmp	r3, r2
 8020734:	d007      	beq.n	8020746 <TIM_OC3_SetConfig+0xaa>
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	4a1a      	ldr	r2, [pc, #104]	; (80207a4 <TIM_OC3_SetConfig+0x108>)
 802073a:	4293      	cmp	r3, r2
 802073c:	d003      	beq.n	8020746 <TIM_OC3_SetConfig+0xaa>
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	4a19      	ldr	r2, [pc, #100]	; (80207a8 <TIM_OC3_SetConfig+0x10c>)
 8020742:	4293      	cmp	r3, r2
 8020744:	d113      	bne.n	802076e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020746:	693b      	ldr	r3, [r7, #16]
 8020748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802074c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802074e:	693b      	ldr	r3, [r7, #16]
 8020750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020756:	683b      	ldr	r3, [r7, #0]
 8020758:	695b      	ldr	r3, [r3, #20]
 802075a:	011b      	lsls	r3, r3, #4
 802075c:	693a      	ldr	r2, [r7, #16]
 802075e:	4313      	orrs	r3, r2
 8020760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020762:	683b      	ldr	r3, [r7, #0]
 8020764:	699b      	ldr	r3, [r3, #24]
 8020766:	011b      	lsls	r3, r3, #4
 8020768:	693a      	ldr	r2, [r7, #16]
 802076a:	4313      	orrs	r3, r2
 802076c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	693a      	ldr	r2, [r7, #16]
 8020772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	68fa      	ldr	r2, [r7, #12]
 8020778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802077a:	683b      	ldr	r3, [r7, #0]
 802077c:	685a      	ldr	r2, [r3, #4]
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	697a      	ldr	r2, [r7, #20]
 8020786:	621a      	str	r2, [r3, #32]
}
 8020788:	bf00      	nop
 802078a:	371c      	adds	r7, #28
 802078c:	46bd      	mov	sp, r7
 802078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020792:	4770      	bx	lr
 8020794:	fffeff8f 	.word	0xfffeff8f
 8020798:	40010000 	.word	0x40010000
 802079c:	40010400 	.word	0x40010400
 80207a0:	40014000 	.word	0x40014000
 80207a4:	40014400 	.word	0x40014400
 80207a8:	40014800 	.word	0x40014800

080207ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80207ac:	b480      	push	{r7}
 80207ae:	b087      	sub	sp, #28
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	6078      	str	r0, [r7, #4]
 80207b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	6a1b      	ldr	r3, [r3, #32]
 80207ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	6a1b      	ldr	r3, [r3, #32]
 80207c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	685b      	ldr	r3, [r3, #4]
 80207cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	69db      	ldr	r3, [r3, #28]
 80207d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80207d4:	68fa      	ldr	r2, [r7, #12]
 80207d6:	4b24      	ldr	r3, [pc, #144]	; (8020868 <TIM_OC4_SetConfig+0xbc>)
 80207d8:	4013      	ands	r3, r2
 80207da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80207e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	021b      	lsls	r3, r3, #8
 80207ea:	68fa      	ldr	r2, [r7, #12]
 80207ec:	4313      	orrs	r3, r2
 80207ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80207f0:	693b      	ldr	r3, [r7, #16]
 80207f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80207f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80207f8:	683b      	ldr	r3, [r7, #0]
 80207fa:	689b      	ldr	r3, [r3, #8]
 80207fc:	031b      	lsls	r3, r3, #12
 80207fe:	693a      	ldr	r2, [r7, #16]
 8020800:	4313      	orrs	r3, r2
 8020802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	4a19      	ldr	r2, [pc, #100]	; (802086c <TIM_OC4_SetConfig+0xc0>)
 8020808:	4293      	cmp	r3, r2
 802080a:	d00f      	beq.n	802082c <TIM_OC4_SetConfig+0x80>
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	4a18      	ldr	r2, [pc, #96]	; (8020870 <TIM_OC4_SetConfig+0xc4>)
 8020810:	4293      	cmp	r3, r2
 8020812:	d00b      	beq.n	802082c <TIM_OC4_SetConfig+0x80>
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	4a17      	ldr	r2, [pc, #92]	; (8020874 <TIM_OC4_SetConfig+0xc8>)
 8020818:	4293      	cmp	r3, r2
 802081a:	d007      	beq.n	802082c <TIM_OC4_SetConfig+0x80>
 802081c:	687b      	ldr	r3, [r7, #4]
 802081e:	4a16      	ldr	r2, [pc, #88]	; (8020878 <TIM_OC4_SetConfig+0xcc>)
 8020820:	4293      	cmp	r3, r2
 8020822:	d003      	beq.n	802082c <TIM_OC4_SetConfig+0x80>
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	4a15      	ldr	r2, [pc, #84]	; (802087c <TIM_OC4_SetConfig+0xd0>)
 8020828:	4293      	cmp	r3, r2
 802082a:	d109      	bne.n	8020840 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802082c:	697b      	ldr	r3, [r7, #20]
 802082e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	695b      	ldr	r3, [r3, #20]
 8020838:	019b      	lsls	r3, r3, #6
 802083a:	697a      	ldr	r2, [r7, #20]
 802083c:	4313      	orrs	r3, r2
 802083e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	697a      	ldr	r2, [r7, #20]
 8020844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	68fa      	ldr	r2, [r7, #12]
 802084a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	685a      	ldr	r2, [r3, #4]
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	693a      	ldr	r2, [r7, #16]
 8020858:	621a      	str	r2, [r3, #32]
}
 802085a:	bf00      	nop
 802085c:	371c      	adds	r7, #28
 802085e:	46bd      	mov	sp, r7
 8020860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop
 8020868:	feff8fff 	.word	0xfeff8fff
 802086c:	40010000 	.word	0x40010000
 8020870:	40010400 	.word	0x40010400
 8020874:	40014000 	.word	0x40014000
 8020878:	40014400 	.word	0x40014400
 802087c:	40014800 	.word	0x40014800

08020880 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020880:	b480      	push	{r7}
 8020882:	b087      	sub	sp, #28
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]
 8020888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802088a:	687b      	ldr	r3, [r7, #4]
 802088c:	6a1b      	ldr	r3, [r3, #32]
 802088e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	6a1b      	ldr	r3, [r3, #32]
 802089a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	685b      	ldr	r3, [r3, #4]
 80208a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80208a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80208a8:	68fa      	ldr	r2, [r7, #12]
 80208aa:	4b21      	ldr	r3, [pc, #132]	; (8020930 <TIM_OC5_SetConfig+0xb0>)
 80208ac:	4013      	ands	r3, r2
 80208ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80208b0:	683b      	ldr	r3, [r7, #0]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	68fa      	ldr	r2, [r7, #12]
 80208b6:	4313      	orrs	r3, r2
 80208b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80208ba:	693b      	ldr	r3, [r7, #16]
 80208bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80208c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80208c2:	683b      	ldr	r3, [r7, #0]
 80208c4:	689b      	ldr	r3, [r3, #8]
 80208c6:	041b      	lsls	r3, r3, #16
 80208c8:	693a      	ldr	r2, [r7, #16]
 80208ca:	4313      	orrs	r3, r2
 80208cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80208ce:	687b      	ldr	r3, [r7, #4]
 80208d0:	4a18      	ldr	r2, [pc, #96]	; (8020934 <TIM_OC5_SetConfig+0xb4>)
 80208d2:	4293      	cmp	r3, r2
 80208d4:	d00f      	beq.n	80208f6 <TIM_OC5_SetConfig+0x76>
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	4a17      	ldr	r2, [pc, #92]	; (8020938 <TIM_OC5_SetConfig+0xb8>)
 80208da:	4293      	cmp	r3, r2
 80208dc:	d00b      	beq.n	80208f6 <TIM_OC5_SetConfig+0x76>
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	4a16      	ldr	r2, [pc, #88]	; (802093c <TIM_OC5_SetConfig+0xbc>)
 80208e2:	4293      	cmp	r3, r2
 80208e4:	d007      	beq.n	80208f6 <TIM_OC5_SetConfig+0x76>
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	4a15      	ldr	r2, [pc, #84]	; (8020940 <TIM_OC5_SetConfig+0xc0>)
 80208ea:	4293      	cmp	r3, r2
 80208ec:	d003      	beq.n	80208f6 <TIM_OC5_SetConfig+0x76>
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	4a14      	ldr	r2, [pc, #80]	; (8020944 <TIM_OC5_SetConfig+0xc4>)
 80208f2:	4293      	cmp	r3, r2
 80208f4:	d109      	bne.n	802090a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80208f6:	697b      	ldr	r3, [r7, #20]
 80208f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80208fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	695b      	ldr	r3, [r3, #20]
 8020902:	021b      	lsls	r3, r3, #8
 8020904:	697a      	ldr	r2, [r7, #20]
 8020906:	4313      	orrs	r3, r2
 8020908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	697a      	ldr	r2, [r7, #20]
 802090e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	68fa      	ldr	r2, [r7, #12]
 8020914:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020916:	683b      	ldr	r3, [r7, #0]
 8020918:	685a      	ldr	r2, [r3, #4]
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	693a      	ldr	r2, [r7, #16]
 8020922:	621a      	str	r2, [r3, #32]
}
 8020924:	bf00      	nop
 8020926:	371c      	adds	r7, #28
 8020928:	46bd      	mov	sp, r7
 802092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802092e:	4770      	bx	lr
 8020930:	fffeff8f 	.word	0xfffeff8f
 8020934:	40010000 	.word	0x40010000
 8020938:	40010400 	.word	0x40010400
 802093c:	40014000 	.word	0x40014000
 8020940:	40014400 	.word	0x40014400
 8020944:	40014800 	.word	0x40014800

08020948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020948:	b480      	push	{r7}
 802094a:	b087      	sub	sp, #28
 802094c:	af00      	add	r7, sp, #0
 802094e:	6078      	str	r0, [r7, #4]
 8020950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	6a1b      	ldr	r3, [r3, #32]
 8020956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	6a1b      	ldr	r3, [r3, #32]
 8020962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	685b      	ldr	r3, [r3, #4]
 8020968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802096e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020970:	68fa      	ldr	r2, [r7, #12]
 8020972:	4b22      	ldr	r3, [pc, #136]	; (80209fc <TIM_OC6_SetConfig+0xb4>)
 8020974:	4013      	ands	r3, r2
 8020976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020978:	683b      	ldr	r3, [r7, #0]
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	021b      	lsls	r3, r3, #8
 802097e:	68fa      	ldr	r2, [r7, #12]
 8020980:	4313      	orrs	r3, r2
 8020982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020984:	693b      	ldr	r3, [r7, #16]
 8020986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802098a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 802098c:	683b      	ldr	r3, [r7, #0]
 802098e:	689b      	ldr	r3, [r3, #8]
 8020990:	051b      	lsls	r3, r3, #20
 8020992:	693a      	ldr	r2, [r7, #16]
 8020994:	4313      	orrs	r3, r2
 8020996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	4a19      	ldr	r2, [pc, #100]	; (8020a00 <TIM_OC6_SetConfig+0xb8>)
 802099c:	4293      	cmp	r3, r2
 802099e:	d00f      	beq.n	80209c0 <TIM_OC6_SetConfig+0x78>
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	4a18      	ldr	r2, [pc, #96]	; (8020a04 <TIM_OC6_SetConfig+0xbc>)
 80209a4:	4293      	cmp	r3, r2
 80209a6:	d00b      	beq.n	80209c0 <TIM_OC6_SetConfig+0x78>
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	4a17      	ldr	r2, [pc, #92]	; (8020a08 <TIM_OC6_SetConfig+0xc0>)
 80209ac:	4293      	cmp	r3, r2
 80209ae:	d007      	beq.n	80209c0 <TIM_OC6_SetConfig+0x78>
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	4a16      	ldr	r2, [pc, #88]	; (8020a0c <TIM_OC6_SetConfig+0xc4>)
 80209b4:	4293      	cmp	r3, r2
 80209b6:	d003      	beq.n	80209c0 <TIM_OC6_SetConfig+0x78>
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	4a15      	ldr	r2, [pc, #84]	; (8020a10 <TIM_OC6_SetConfig+0xc8>)
 80209bc:	4293      	cmp	r3, r2
 80209be:	d109      	bne.n	80209d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80209c0:	697b      	ldr	r3, [r7, #20]
 80209c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80209c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80209c8:	683b      	ldr	r3, [r7, #0]
 80209ca:	695b      	ldr	r3, [r3, #20]
 80209cc:	029b      	lsls	r3, r3, #10
 80209ce:	697a      	ldr	r2, [r7, #20]
 80209d0:	4313      	orrs	r3, r2
 80209d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	697a      	ldr	r2, [r7, #20]
 80209d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	68fa      	ldr	r2, [r7, #12]
 80209de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80209e0:	683b      	ldr	r3, [r7, #0]
 80209e2:	685a      	ldr	r2, [r3, #4]
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	693a      	ldr	r2, [r7, #16]
 80209ec:	621a      	str	r2, [r3, #32]
}
 80209ee:	bf00      	nop
 80209f0:	371c      	adds	r7, #28
 80209f2:	46bd      	mov	sp, r7
 80209f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209f8:	4770      	bx	lr
 80209fa:	bf00      	nop
 80209fc:	feff8fff 	.word	0xfeff8fff
 8020a00:	40010000 	.word	0x40010000
 8020a04:	40010400 	.word	0x40010400
 8020a08:	40014000 	.word	0x40014000
 8020a0c:	40014400 	.word	0x40014400
 8020a10:	40014800 	.word	0x40014800

08020a14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8020a14:	b480      	push	{r7}
 8020a16:	b087      	sub	sp, #28
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	60f8      	str	r0, [r7, #12]
 8020a1c:	60b9      	str	r1, [r7, #8]
 8020a1e:	607a      	str	r2, [r7, #4]
 8020a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020a22:	68fb      	ldr	r3, [r7, #12]
 8020a24:	6a1b      	ldr	r3, [r3, #32]
 8020a26:	f023 0201 	bic.w	r2, r3, #1
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020a2e:	68fb      	ldr	r3, [r7, #12]
 8020a30:	699b      	ldr	r3, [r3, #24]
 8020a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020a34:	68fb      	ldr	r3, [r7, #12]
 8020a36:	6a1b      	ldr	r3, [r3, #32]
 8020a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8020a3a:	68fb      	ldr	r3, [r7, #12]
 8020a3c:	4a2c      	ldr	r2, [pc, #176]	; (8020af0 <TIM_TI1_SetConfig+0xdc>)
 8020a3e:	4293      	cmp	r3, r2
 8020a40:	d023      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a42:	68fb      	ldr	r3, [r7, #12]
 8020a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020a48:	d01f      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	4a29      	ldr	r2, [pc, #164]	; (8020af4 <TIM_TI1_SetConfig+0xe0>)
 8020a4e:	4293      	cmp	r3, r2
 8020a50:	d01b      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a52:	68fb      	ldr	r3, [r7, #12]
 8020a54:	4a28      	ldr	r2, [pc, #160]	; (8020af8 <TIM_TI1_SetConfig+0xe4>)
 8020a56:	4293      	cmp	r3, r2
 8020a58:	d017      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a5a:	68fb      	ldr	r3, [r7, #12]
 8020a5c:	4a27      	ldr	r2, [pc, #156]	; (8020afc <TIM_TI1_SetConfig+0xe8>)
 8020a5e:	4293      	cmp	r3, r2
 8020a60:	d013      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	4a26      	ldr	r2, [pc, #152]	; (8020b00 <TIM_TI1_SetConfig+0xec>)
 8020a66:	4293      	cmp	r3, r2
 8020a68:	d00f      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a6a:	68fb      	ldr	r3, [r7, #12]
 8020a6c:	4a25      	ldr	r2, [pc, #148]	; (8020b04 <TIM_TI1_SetConfig+0xf0>)
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	d00b      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	4a24      	ldr	r2, [pc, #144]	; (8020b08 <TIM_TI1_SetConfig+0xf4>)
 8020a76:	4293      	cmp	r3, r2
 8020a78:	d007      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a7a:	68fb      	ldr	r3, [r7, #12]
 8020a7c:	4a23      	ldr	r2, [pc, #140]	; (8020b0c <TIM_TI1_SetConfig+0xf8>)
 8020a7e:	4293      	cmp	r3, r2
 8020a80:	d003      	beq.n	8020a8a <TIM_TI1_SetConfig+0x76>
 8020a82:	68fb      	ldr	r3, [r7, #12]
 8020a84:	4a22      	ldr	r2, [pc, #136]	; (8020b10 <TIM_TI1_SetConfig+0xfc>)
 8020a86:	4293      	cmp	r3, r2
 8020a88:	d101      	bne.n	8020a8e <TIM_TI1_SetConfig+0x7a>
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	e000      	b.n	8020a90 <TIM_TI1_SetConfig+0x7c>
 8020a8e:	2300      	movs	r3, #0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d008      	beq.n	8020aa6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8020a94:	697b      	ldr	r3, [r7, #20]
 8020a96:	f023 0303 	bic.w	r3, r3, #3
 8020a9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8020a9c:	697a      	ldr	r2, [r7, #20]
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	4313      	orrs	r3, r2
 8020aa2:	617b      	str	r3, [r7, #20]
 8020aa4:	e003      	b.n	8020aae <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	f043 0301 	orr.w	r3, r3, #1
 8020aac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020aae:	697b      	ldr	r3, [r7, #20]
 8020ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8020ab6:	683b      	ldr	r3, [r7, #0]
 8020ab8:	011b      	lsls	r3, r3, #4
 8020aba:	b2db      	uxtb	r3, r3
 8020abc:	697a      	ldr	r2, [r7, #20]
 8020abe:	4313      	orrs	r3, r2
 8020ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020ac2:	693b      	ldr	r3, [r7, #16]
 8020ac4:	f023 030a 	bic.w	r3, r3, #10
 8020ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8020aca:	68bb      	ldr	r3, [r7, #8]
 8020acc:	f003 030a 	and.w	r3, r3, #10
 8020ad0:	693a      	ldr	r2, [r7, #16]
 8020ad2:	4313      	orrs	r3, r2
 8020ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020ad6:	68fb      	ldr	r3, [r7, #12]
 8020ad8:	697a      	ldr	r2, [r7, #20]
 8020ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020adc:	68fb      	ldr	r3, [r7, #12]
 8020ade:	693a      	ldr	r2, [r7, #16]
 8020ae0:	621a      	str	r2, [r3, #32]
}
 8020ae2:	bf00      	nop
 8020ae4:	371c      	adds	r7, #28
 8020ae6:	46bd      	mov	sp, r7
 8020ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aec:	4770      	bx	lr
 8020aee:	bf00      	nop
 8020af0:	40010000 	.word	0x40010000
 8020af4:	40000400 	.word	0x40000400
 8020af8:	40000800 	.word	0x40000800
 8020afc:	40000c00 	.word	0x40000c00
 8020b00:	40010400 	.word	0x40010400
 8020b04:	40001800 	.word	0x40001800
 8020b08:	40014000 	.word	0x40014000
 8020b0c:	4000e000 	.word	0x4000e000
 8020b10:	4000e400 	.word	0x4000e400

08020b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020b14:	b480      	push	{r7}
 8020b16:	b087      	sub	sp, #28
 8020b18:	af00      	add	r7, sp, #0
 8020b1a:	60f8      	str	r0, [r7, #12]
 8020b1c:	60b9      	str	r1, [r7, #8]
 8020b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020b20:	68fb      	ldr	r3, [r7, #12]
 8020b22:	6a1b      	ldr	r3, [r3, #32]
 8020b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020b26:	68fb      	ldr	r3, [r7, #12]
 8020b28:	6a1b      	ldr	r3, [r3, #32]
 8020b2a:	f023 0201 	bic.w	r2, r3, #1
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	699b      	ldr	r3, [r3, #24]
 8020b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020b38:	693b      	ldr	r3, [r7, #16]
 8020b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	011b      	lsls	r3, r3, #4
 8020b44:	693a      	ldr	r2, [r7, #16]
 8020b46:	4313      	orrs	r3, r2
 8020b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020b4a:	697b      	ldr	r3, [r7, #20]
 8020b4c:	f023 030a 	bic.w	r3, r3, #10
 8020b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020b52:	697a      	ldr	r2, [r7, #20]
 8020b54:	68bb      	ldr	r3, [r7, #8]
 8020b56:	4313      	orrs	r3, r2
 8020b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020b5a:	68fb      	ldr	r3, [r7, #12]
 8020b5c:	693a      	ldr	r2, [r7, #16]
 8020b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	697a      	ldr	r2, [r7, #20]
 8020b64:	621a      	str	r2, [r3, #32]
}
 8020b66:	bf00      	nop
 8020b68:	371c      	adds	r7, #28
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b70:	4770      	bx	lr

08020b72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020b72:	b480      	push	{r7}
 8020b74:	b087      	sub	sp, #28
 8020b76:	af00      	add	r7, sp, #0
 8020b78:	60f8      	str	r0, [r7, #12]
 8020b7a:	60b9      	str	r1, [r7, #8]
 8020b7c:	607a      	str	r2, [r7, #4]
 8020b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020b80:	68fb      	ldr	r3, [r7, #12]
 8020b82:	6a1b      	ldr	r3, [r3, #32]
 8020b84:	f023 0210 	bic.w	r2, r3, #16
 8020b88:	68fb      	ldr	r3, [r7, #12]
 8020b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	699b      	ldr	r3, [r3, #24]
 8020b90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020b92:	68fb      	ldr	r3, [r7, #12]
 8020b94:	6a1b      	ldr	r3, [r3, #32]
 8020b96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020b9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	021b      	lsls	r3, r3, #8
 8020ba4:	697a      	ldr	r2, [r7, #20]
 8020ba6:	4313      	orrs	r3, r2
 8020ba8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020baa:	697b      	ldr	r3, [r7, #20]
 8020bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8020bb2:	683b      	ldr	r3, [r7, #0]
 8020bb4:	031b      	lsls	r3, r3, #12
 8020bb6:	b29b      	uxth	r3, r3
 8020bb8:	697a      	ldr	r2, [r7, #20]
 8020bba:	4313      	orrs	r3, r2
 8020bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020bbe:	693b      	ldr	r3, [r7, #16]
 8020bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8020bc6:	68bb      	ldr	r3, [r7, #8]
 8020bc8:	011b      	lsls	r3, r3, #4
 8020bca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8020bce:	693a      	ldr	r2, [r7, #16]
 8020bd0:	4313      	orrs	r3, r2
 8020bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	697a      	ldr	r2, [r7, #20]
 8020bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	693a      	ldr	r2, [r7, #16]
 8020bde:	621a      	str	r2, [r3, #32]
}
 8020be0:	bf00      	nop
 8020be2:	371c      	adds	r7, #28
 8020be4:	46bd      	mov	sp, r7
 8020be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bea:	4770      	bx	lr

08020bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020bec:	b480      	push	{r7}
 8020bee:	b087      	sub	sp, #28
 8020bf0:	af00      	add	r7, sp, #0
 8020bf2:	60f8      	str	r0, [r7, #12]
 8020bf4:	60b9      	str	r1, [r7, #8]
 8020bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	6a1b      	ldr	r3, [r3, #32]
 8020bfc:	f023 0210 	bic.w	r2, r3, #16
 8020c00:	68fb      	ldr	r3, [r7, #12]
 8020c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020c04:	68fb      	ldr	r3, [r7, #12]
 8020c06:	699b      	ldr	r3, [r3, #24]
 8020c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	6a1b      	ldr	r3, [r3, #32]
 8020c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020c10:	697b      	ldr	r3, [r7, #20]
 8020c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	031b      	lsls	r3, r3, #12
 8020c1c:	697a      	ldr	r2, [r7, #20]
 8020c1e:	4313      	orrs	r3, r2
 8020c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020c22:	693b      	ldr	r3, [r7, #16]
 8020c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020c2a:	68bb      	ldr	r3, [r7, #8]
 8020c2c:	011b      	lsls	r3, r3, #4
 8020c2e:	693a      	ldr	r2, [r7, #16]
 8020c30:	4313      	orrs	r3, r2
 8020c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	697a      	ldr	r2, [r7, #20]
 8020c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	693a      	ldr	r2, [r7, #16]
 8020c3e:	621a      	str	r2, [r3, #32]
}
 8020c40:	bf00      	nop
 8020c42:	371c      	adds	r7, #28
 8020c44:	46bd      	mov	sp, r7
 8020c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c4a:	4770      	bx	lr

08020c4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020c4c:	b480      	push	{r7}
 8020c4e:	b087      	sub	sp, #28
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	60f8      	str	r0, [r7, #12]
 8020c54:	60b9      	str	r1, [r7, #8]
 8020c56:	607a      	str	r2, [r7, #4]
 8020c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	6a1b      	ldr	r3, [r3, #32]
 8020c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	69db      	ldr	r3, [r3, #28]
 8020c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	6a1b      	ldr	r3, [r3, #32]
 8020c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8020c72:	697b      	ldr	r3, [r7, #20]
 8020c74:	f023 0303 	bic.w	r3, r3, #3
 8020c78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8020c7a:	697a      	ldr	r2, [r7, #20]
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	4313      	orrs	r3, r2
 8020c80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8020c82:	697b      	ldr	r3, [r7, #20]
 8020c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8020c8a:	683b      	ldr	r3, [r7, #0]
 8020c8c:	011b      	lsls	r3, r3, #4
 8020c8e:	b2db      	uxtb	r3, r3
 8020c90:	697a      	ldr	r2, [r7, #20]
 8020c92:	4313      	orrs	r3, r2
 8020c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8020c96:	693b      	ldr	r3, [r7, #16]
 8020c98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8020c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8020c9e:	68bb      	ldr	r3, [r7, #8]
 8020ca0:	021b      	lsls	r3, r3, #8
 8020ca2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8020ca6:	693a      	ldr	r2, [r7, #16]
 8020ca8:	4313      	orrs	r3, r2
 8020caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	697a      	ldr	r2, [r7, #20]
 8020cb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8020cb2:	68fb      	ldr	r3, [r7, #12]
 8020cb4:	693a      	ldr	r2, [r7, #16]
 8020cb6:	621a      	str	r2, [r3, #32]
}
 8020cb8:	bf00      	nop
 8020cba:	371c      	adds	r7, #28
 8020cbc:	46bd      	mov	sp, r7
 8020cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cc2:	4770      	bx	lr

08020cc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020cc4:	b480      	push	{r7}
 8020cc6:	b087      	sub	sp, #28
 8020cc8:	af00      	add	r7, sp, #0
 8020cca:	60f8      	str	r0, [r7, #12]
 8020ccc:	60b9      	str	r1, [r7, #8]
 8020cce:	607a      	str	r2, [r7, #4]
 8020cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020cd2:	68fb      	ldr	r3, [r7, #12]
 8020cd4:	6a1b      	ldr	r3, [r3, #32]
 8020cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	69db      	ldr	r3, [r3, #28]
 8020ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	6a1b      	ldr	r3, [r3, #32]
 8020ce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8020cea:	697b      	ldr	r3, [r7, #20]
 8020cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020cf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	021b      	lsls	r3, r3, #8
 8020cf6:	697a      	ldr	r2, [r7, #20]
 8020cf8:	4313      	orrs	r3, r2
 8020cfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020cfc:	697b      	ldr	r3, [r7, #20]
 8020cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020d02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020d04:	683b      	ldr	r3, [r7, #0]
 8020d06:	031b      	lsls	r3, r3, #12
 8020d08:	b29b      	uxth	r3, r3
 8020d0a:	697a      	ldr	r2, [r7, #20]
 8020d0c:	4313      	orrs	r3, r2
 8020d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020d10:	693b      	ldr	r3, [r7, #16]
 8020d12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8020d16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8020d18:	68bb      	ldr	r3, [r7, #8]
 8020d1a:	031b      	lsls	r3, r3, #12
 8020d1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8020d20:	693a      	ldr	r2, [r7, #16]
 8020d22:	4313      	orrs	r3, r2
 8020d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020d26:	68fb      	ldr	r3, [r7, #12]
 8020d28:	697a      	ldr	r2, [r7, #20]
 8020d2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	693a      	ldr	r2, [r7, #16]
 8020d30:	621a      	str	r2, [r3, #32]
}
 8020d32:	bf00      	nop
 8020d34:	371c      	adds	r7, #28
 8020d36:	46bd      	mov	sp, r7
 8020d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d3c:	4770      	bx	lr
	...

08020d40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020d40:	b480      	push	{r7}
 8020d42:	b085      	sub	sp, #20
 8020d44:	af00      	add	r7, sp, #0
 8020d46:	6078      	str	r0, [r7, #4]
 8020d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	689b      	ldr	r3, [r3, #8]
 8020d4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020d50:	68fa      	ldr	r2, [r7, #12]
 8020d52:	4b09      	ldr	r3, [pc, #36]	; (8020d78 <TIM_ITRx_SetConfig+0x38>)
 8020d54:	4013      	ands	r3, r2
 8020d56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020d58:	683a      	ldr	r2, [r7, #0]
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	4313      	orrs	r3, r2
 8020d5e:	f043 0307 	orr.w	r3, r3, #7
 8020d62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020d64:	687b      	ldr	r3, [r7, #4]
 8020d66:	68fa      	ldr	r2, [r7, #12]
 8020d68:	609a      	str	r2, [r3, #8]
}
 8020d6a:	bf00      	nop
 8020d6c:	3714      	adds	r7, #20
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d74:	4770      	bx	lr
 8020d76:	bf00      	nop
 8020d78:	ffcfff8f 	.word	0xffcfff8f

08020d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020d7c:	b480      	push	{r7}
 8020d7e:	b087      	sub	sp, #28
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	60f8      	str	r0, [r7, #12]
 8020d84:	60b9      	str	r1, [r7, #8]
 8020d86:	607a      	str	r2, [r7, #4]
 8020d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020d8a:	68fb      	ldr	r3, [r7, #12]
 8020d8c:	689b      	ldr	r3, [r3, #8]
 8020d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020d90:	697b      	ldr	r3, [r7, #20]
 8020d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020d98:	683b      	ldr	r3, [r7, #0]
 8020d9a:	021a      	lsls	r2, r3, #8
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	431a      	orrs	r2, r3
 8020da0:	68bb      	ldr	r3, [r7, #8]
 8020da2:	4313      	orrs	r3, r2
 8020da4:	697a      	ldr	r2, [r7, #20]
 8020da6:	4313      	orrs	r3, r2
 8020da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	697a      	ldr	r2, [r7, #20]
 8020dae:	609a      	str	r2, [r3, #8]
}
 8020db0:	bf00      	nop
 8020db2:	371c      	adds	r7, #28
 8020db4:	46bd      	mov	sp, r7
 8020db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dba:	4770      	bx	lr

08020dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020dbc:	b480      	push	{r7}
 8020dbe:	b087      	sub	sp, #28
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	60f8      	str	r0, [r7, #12]
 8020dc4:	60b9      	str	r1, [r7, #8]
 8020dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020dc8:	68bb      	ldr	r3, [r7, #8]
 8020dca:	f003 031f 	and.w	r3, r3, #31
 8020dce:	2201      	movs	r2, #1
 8020dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8020dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020dd6:	68fb      	ldr	r3, [r7, #12]
 8020dd8:	6a1a      	ldr	r2, [r3, #32]
 8020dda:	697b      	ldr	r3, [r7, #20]
 8020ddc:	43db      	mvns	r3, r3
 8020dde:	401a      	ands	r2, r3
 8020de0:	68fb      	ldr	r3, [r7, #12]
 8020de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020de4:	68fb      	ldr	r3, [r7, #12]
 8020de6:	6a1a      	ldr	r2, [r3, #32]
 8020de8:	68bb      	ldr	r3, [r7, #8]
 8020dea:	f003 031f 	and.w	r3, r3, #31
 8020dee:	6879      	ldr	r1, [r7, #4]
 8020df0:	fa01 f303 	lsl.w	r3, r1, r3
 8020df4:	431a      	orrs	r2, r3
 8020df6:	68fb      	ldr	r3, [r7, #12]
 8020df8:	621a      	str	r2, [r3, #32]
}
 8020dfa:	bf00      	nop
 8020dfc:	371c      	adds	r7, #28
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e04:	4770      	bx	lr
	...

08020e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020e08:	b480      	push	{r7}
 8020e0a:	b085      	sub	sp, #20
 8020e0c:	af00      	add	r7, sp, #0
 8020e0e:	6078      	str	r0, [r7, #4]
 8020e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020e18:	2b01      	cmp	r3, #1
 8020e1a:	d101      	bne.n	8020e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020e1c:	2302      	movs	r3, #2
 8020e1e:	e077      	b.n	8020f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	2201      	movs	r2, #1
 8020e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	2202      	movs	r2, #2
 8020e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	685b      	ldr	r3, [r3, #4]
 8020e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	681b      	ldr	r3, [r3, #0]
 8020e3c:	689b      	ldr	r3, [r3, #8]
 8020e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	4a35      	ldr	r2, [pc, #212]	; (8020f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020e46:	4293      	cmp	r3, r2
 8020e48:	d004      	beq.n	8020e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	4a34      	ldr	r2, [pc, #208]	; (8020f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020e50:	4293      	cmp	r3, r2
 8020e52:	d108      	bne.n	8020e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8020e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020e5c:	683b      	ldr	r3, [r7, #0]
 8020e5e:	685b      	ldr	r3, [r3, #4]
 8020e60:	68fa      	ldr	r2, [r7, #12]
 8020e62:	4313      	orrs	r3, r2
 8020e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020e66:	68fb      	ldr	r3, [r7, #12]
 8020e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020e6e:	683b      	ldr	r3, [r7, #0]
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	68fa      	ldr	r2, [r7, #12]
 8020e74:	4313      	orrs	r3, r2
 8020e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	68fa      	ldr	r2, [r7, #12]
 8020e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	4a25      	ldr	r2, [pc, #148]	; (8020f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020e86:	4293      	cmp	r3, r2
 8020e88:	d02c      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020e92:	d027      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	4a22      	ldr	r2, [pc, #136]	; (8020f24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8020e9a:	4293      	cmp	r3, r2
 8020e9c:	d022      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	4a21      	ldr	r2, [pc, #132]	; (8020f28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8020ea4:	4293      	cmp	r3, r2
 8020ea6:	d01d      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	4a1f      	ldr	r2, [pc, #124]	; (8020f2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8020eae:	4293      	cmp	r3, r2
 8020eb0:	d018      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	4a1a      	ldr	r2, [pc, #104]	; (8020f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020eb8:	4293      	cmp	r3, r2
 8020eba:	d013      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	4a1b      	ldr	r2, [pc, #108]	; (8020f30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8020ec2:	4293      	cmp	r3, r2
 8020ec4:	d00e      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	681b      	ldr	r3, [r3, #0]
 8020eca:	4a1a      	ldr	r2, [pc, #104]	; (8020f34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020ecc:	4293      	cmp	r3, r2
 8020ece:	d009      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	4a18      	ldr	r2, [pc, #96]	; (8020f38 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8020ed6:	4293      	cmp	r3, r2
 8020ed8:	d004      	beq.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	4a17      	ldr	r2, [pc, #92]	; (8020f3c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020ee0:	4293      	cmp	r3, r2
 8020ee2:	d10c      	bne.n	8020efe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020ee4:	68bb      	ldr	r3, [r7, #8]
 8020ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020eea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	689b      	ldr	r3, [r3, #8]
 8020ef0:	68ba      	ldr	r2, [r7, #8]
 8020ef2:	4313      	orrs	r3, r2
 8020ef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	68ba      	ldr	r2, [r7, #8]
 8020efc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	2201      	movs	r2, #1
 8020f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	2200      	movs	r2, #0
 8020f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020f0e:	2300      	movs	r3, #0
}
 8020f10:	4618      	mov	r0, r3
 8020f12:	3714      	adds	r7, #20
 8020f14:	46bd      	mov	sp, r7
 8020f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1a:	4770      	bx	lr
 8020f1c:	40010000 	.word	0x40010000
 8020f20:	40010400 	.word	0x40010400
 8020f24:	40000400 	.word	0x40000400
 8020f28:	40000800 	.word	0x40000800
 8020f2c:	40000c00 	.word	0x40000c00
 8020f30:	40001800 	.word	0x40001800
 8020f34:	40014000 	.word	0x40014000
 8020f38:	4000e000 	.word	0x4000e000
 8020f3c:	4000e400 	.word	0x4000e400

08020f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020f40:	b480      	push	{r7}
 8020f42:	b085      	sub	sp, #20
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	6078      	str	r0, [r7, #4]
 8020f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8020f4a:	2300      	movs	r3, #0
 8020f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020f54:	2b01      	cmp	r3, #1
 8020f56:	d101      	bne.n	8020f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8020f58:	2302      	movs	r3, #2
 8020f5a:	e087      	b.n	802106c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	2201      	movs	r2, #1
 8020f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8020f64:	68fb      	ldr	r3, [r7, #12]
 8020f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8020f6a:	683b      	ldr	r3, [r7, #0]
 8020f6c:	68db      	ldr	r3, [r3, #12]
 8020f6e:	4313      	orrs	r3, r2
 8020f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8020f78:	683b      	ldr	r3, [r7, #0]
 8020f7a:	689b      	ldr	r3, [r3, #8]
 8020f7c:	4313      	orrs	r3, r2
 8020f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8020f86:	683b      	ldr	r3, [r7, #0]
 8020f88:	685b      	ldr	r3, [r3, #4]
 8020f8a:	4313      	orrs	r3, r2
 8020f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8020f8e:	68fb      	ldr	r3, [r7, #12]
 8020f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	4313      	orrs	r3, r2
 8020f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	691b      	ldr	r3, [r3, #16]
 8020fa6:	4313      	orrs	r3, r2
 8020fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8020fb0:	683b      	ldr	r3, [r7, #0]
 8020fb2:	695b      	ldr	r3, [r3, #20]
 8020fb4:	4313      	orrs	r3, r2
 8020fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020fb8:	68fb      	ldr	r3, [r7, #12]
 8020fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020fbe:	683b      	ldr	r3, [r7, #0]
 8020fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fc2:	4313      	orrs	r3, r2
 8020fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020fcc:	683b      	ldr	r3, [r7, #0]
 8020fce:	699b      	ldr	r3, [r3, #24]
 8020fd0:	041b      	lsls	r3, r3, #16
 8020fd2:	4313      	orrs	r3, r2
 8020fd4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	4a27      	ldr	r2, [pc, #156]	; (8021078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020fdc:	4293      	cmp	r3, r2
 8020fde:	d004      	beq.n	8020fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	681b      	ldr	r3, [r3, #0]
 8020fe4:	4a25      	ldr	r2, [pc, #148]	; (802107c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020fe6:	4293      	cmp	r3, r2
 8020fe8:	d106      	bne.n	8020ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020fea:	68fb      	ldr	r3, [r7, #12]
 8020fec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020ff0:	683b      	ldr	r3, [r7, #0]
 8020ff2:	69db      	ldr	r3, [r3, #28]
 8020ff4:	4313      	orrs	r3, r2
 8020ff6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	4a1e      	ldr	r2, [pc, #120]	; (8021078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020ffe:	4293      	cmp	r3, r2
 8021000:	d004      	beq.n	802100c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	4a1d      	ldr	r2, [pc, #116]	; (802107c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8021008:	4293      	cmp	r3, r2
 802100a:	d126      	bne.n	802105a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8021012:	683b      	ldr	r3, [r7, #0]
 8021014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021016:	051b      	lsls	r3, r3, #20
 8021018:	4313      	orrs	r3, r2
 802101a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 802101c:	68fb      	ldr	r3, [r7, #12]
 802101e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8021022:	683b      	ldr	r3, [r7, #0]
 8021024:	6a1b      	ldr	r3, [r3, #32]
 8021026:	4313      	orrs	r3, r2
 8021028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021034:	4313      	orrs	r3, r2
 8021036:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	4a0e      	ldr	r2, [pc, #56]	; (8021078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 802103e:	4293      	cmp	r3, r2
 8021040:	d004      	beq.n	802104c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	4a0d      	ldr	r2, [pc, #52]	; (802107c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8021048:	4293      	cmp	r3, r2
 802104a:	d106      	bne.n	802105a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021056:	4313      	orrs	r3, r2
 8021058:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	68fa      	ldr	r2, [r7, #12]
 8021060:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	2200      	movs	r2, #0
 8021066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802106a:	2300      	movs	r3, #0
}
 802106c:	4618      	mov	r0, r3
 802106e:	3714      	adds	r7, #20
 8021070:	46bd      	mov	sp, r7
 8021072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021076:	4770      	bx	lr
 8021078:	40010000 	.word	0x40010000
 802107c:	40010400 	.word	0x40010400

08021080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021080:	b480      	push	{r7}
 8021082:	b083      	sub	sp, #12
 8021084:	af00      	add	r7, sp, #0
 8021086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021088:	bf00      	nop
 802108a:	370c      	adds	r7, #12
 802108c:	46bd      	mov	sp, r7
 802108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021092:	4770      	bx	lr

08021094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021094:	b480      	push	{r7}
 8021096:	b083      	sub	sp, #12
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802109c:	bf00      	nop
 802109e:	370c      	adds	r7, #12
 80210a0:	46bd      	mov	sp, r7
 80210a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210a6:	4770      	bx	lr

080210a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80210a8:	b480      	push	{r7}
 80210aa:	b083      	sub	sp, #12
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80210b0:	bf00      	nop
 80210b2:	370c      	adds	r7, #12
 80210b4:	46bd      	mov	sp, r7
 80210b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ba:	4770      	bx	lr

080210bc <_ZdlPv>:
 80210bc:	f000 b926 	b.w	802130c <free>

080210c0 <_ZdlPvj>:
 80210c0:	f7ff bffc 	b.w	80210bc <_ZdlPv>

080210c4 <_Znwj>:
 80210c4:	2801      	cmp	r0, #1
 80210c6:	bf38      	it	cc
 80210c8:	2001      	movcc	r0, #1
 80210ca:	b510      	push	{r4, lr}
 80210cc:	4604      	mov	r4, r0
 80210ce:	4620      	mov	r0, r4
 80210d0:	f000 f914 	bl	80212fc <malloc>
 80210d4:	b930      	cbnz	r0, 80210e4 <_Znwj+0x20>
 80210d6:	f000 f8d7 	bl	8021288 <_ZSt15get_new_handlerv>
 80210da:	b908      	cbnz	r0, 80210e0 <_Znwj+0x1c>
 80210dc:	f000 f8dc 	bl	8021298 <abort>
 80210e0:	4780      	blx	r0
 80210e2:	e7f4      	b.n	80210ce <_Znwj+0xa>
 80210e4:	bd10      	pop	{r4, pc}

080210e6 <__cxa_pure_virtual>:
 80210e6:	b508      	push	{r3, lr}
 80210e8:	f000 f8c8 	bl	802127c <_ZSt9terminatev>

080210ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80210ec:	68c3      	ldr	r3, [r0, #12]
 80210ee:	689a      	ldr	r2, [r3, #8]
 80210f0:	60c2      	str	r2, [r0, #12]
 80210f2:	b510      	push	{r4, lr}
 80210f4:	b102      	cbz	r2, 80210f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80210f6:	6050      	str	r0, [r2, #4]
 80210f8:	6842      	ldr	r2, [r0, #4]
 80210fa:	605a      	str	r2, [r3, #4]
 80210fc:	680c      	ldr	r4, [r1, #0]
 80210fe:	4284      	cmp	r4, r0
 8021100:	d103      	bne.n	802110a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8021102:	600b      	str	r3, [r1, #0]
 8021104:	6098      	str	r0, [r3, #8]
 8021106:	6043      	str	r3, [r0, #4]
 8021108:	bd10      	pop	{r4, pc}
 802110a:	6891      	ldr	r1, [r2, #8]
 802110c:	4281      	cmp	r1, r0
 802110e:	bf0c      	ite	eq
 8021110:	6093      	streq	r3, [r2, #8]
 8021112:	60d3      	strne	r3, [r2, #12]
 8021114:	e7f6      	b.n	8021104 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08021116 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8021116:	6883      	ldr	r3, [r0, #8]
 8021118:	68da      	ldr	r2, [r3, #12]
 802111a:	6082      	str	r2, [r0, #8]
 802111c:	b510      	push	{r4, lr}
 802111e:	b102      	cbz	r2, 8021122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8021120:	6050      	str	r0, [r2, #4]
 8021122:	6842      	ldr	r2, [r0, #4]
 8021124:	605a      	str	r2, [r3, #4]
 8021126:	680c      	ldr	r4, [r1, #0]
 8021128:	4284      	cmp	r4, r0
 802112a:	d103      	bne.n	8021134 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 802112c:	600b      	str	r3, [r1, #0]
 802112e:	60d8      	str	r0, [r3, #12]
 8021130:	6043      	str	r3, [r0, #4]
 8021132:	bd10      	pop	{r4, pc}
 8021134:	68d1      	ldr	r1, [r2, #12]
 8021136:	4281      	cmp	r1, r0
 8021138:	bf0c      	ite	eq
 802113a:	60d3      	streq	r3, [r2, #12]
 802113c:	6093      	strne	r3, [r2, #8]
 802113e:	e7f6      	b.n	802112e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08021140 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8021140:	68c3      	ldr	r3, [r0, #12]
 8021142:	b123      	cbz	r3, 802114e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8021144:	4618      	mov	r0, r3
 8021146:	689b      	ldr	r3, [r3, #8]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d1fb      	bne.n	8021144 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 802114c:	4770      	bx	lr
 802114e:	6843      	ldr	r3, [r0, #4]
 8021150:	68da      	ldr	r2, [r3, #12]
 8021152:	4282      	cmp	r2, r0
 8021154:	d102      	bne.n	802115c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8021156:	4618      	mov	r0, r3
 8021158:	685b      	ldr	r3, [r3, #4]
 802115a:	e7f9      	b.n	8021150 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 802115c:	68c2      	ldr	r2, [r0, #12]
 802115e:	4293      	cmp	r3, r2
 8021160:	bf18      	it	ne
 8021162:	4618      	movne	r0, r3
 8021164:	4770      	bx	lr

08021166 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8021166:	7803      	ldrb	r3, [r0, #0]
 8021168:	b933      	cbnz	r3, 8021178 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 802116a:	6843      	ldr	r3, [r0, #4]
 802116c:	685b      	ldr	r3, [r3, #4]
 802116e:	4283      	cmp	r3, r0
 8021170:	d102      	bne.n	8021178 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8021172:	68db      	ldr	r3, [r3, #12]
 8021174:	4618      	mov	r0, r3
 8021176:	4770      	bx	lr
 8021178:	6882      	ldr	r2, [r0, #8]
 802117a:	b122      	cbz	r2, 8021186 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 802117c:	4613      	mov	r3, r2
 802117e:	68d2      	ldr	r2, [r2, #12]
 8021180:	2a00      	cmp	r2, #0
 8021182:	d1fb      	bne.n	802117c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8021184:	e7f6      	b.n	8021174 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8021186:	6843      	ldr	r3, [r0, #4]
 8021188:	689a      	ldr	r2, [r3, #8]
 802118a:	4282      	cmp	r2, r0
 802118c:	d1f2      	bne.n	8021174 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 802118e:	4618      	mov	r0, r3
 8021190:	685b      	ldr	r3, [r3, #4]
 8021192:	e7f9      	b.n	8021188 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08021194 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8021194:	f7ff bfd4 	b.w	8021140 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08021198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8021198:	f7ff bfe5 	b.w	8021166 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0802119c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 802119c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80211a0:	461e      	mov	r6, r3
 80211a2:	f103 0804 	add.w	r8, r3, #4
 80211a6:	2300      	movs	r3, #0
 80211a8:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80211ac:	460c      	mov	r4, r1
 80211ae:	604a      	str	r2, [r1, #4]
 80211b0:	700b      	strb	r3, [r1, #0]
 80211b2:	b300      	cbz	r0, 80211f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80211b4:	4296      	cmp	r6, r2
 80211b6:	6091      	str	r1, [r2, #8]
 80211b8:	d118      	bne.n	80211ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80211ba:	6071      	str	r1, [r6, #4]
 80211bc:	60f4      	str	r4, [r6, #12]
 80211be:	2701      	movs	r7, #1
 80211c0:	f04f 0900 	mov.w	r9, #0
 80211c4:	6873      	ldr	r3, [r6, #4]
 80211c6:	42a3      	cmp	r3, r4
 80211c8:	d03f      	beq.n	802124a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80211ca:	6860      	ldr	r0, [r4, #4]
 80211cc:	7802      	ldrb	r2, [r0, #0]
 80211ce:	2a00      	cmp	r2, #0
 80211d0:	d13b      	bne.n	802124a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80211d2:	6845      	ldr	r5, [r0, #4]
 80211d4:	68ab      	ldr	r3, [r5, #8]
 80211d6:	4298      	cmp	r0, r3
 80211d8:	d123      	bne.n	8021222 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80211da:	68eb      	ldr	r3, [r5, #12]
 80211dc:	b183      	cbz	r3, 8021200 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80211de:	781a      	ldrb	r2, [r3, #0]
 80211e0:	b972      	cbnz	r2, 8021200 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80211e2:	7007      	strb	r7, [r0, #0]
 80211e4:	701f      	strb	r7, [r3, #0]
 80211e6:	702a      	strb	r2, [r5, #0]
 80211e8:	462c      	mov	r4, r5
 80211ea:	e7eb      	b.n	80211c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80211ec:	68b3      	ldr	r3, [r6, #8]
 80211ee:	4293      	cmp	r3, r2
 80211f0:	d1e5      	bne.n	80211be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80211f2:	60b1      	str	r1, [r6, #8]
 80211f4:	e7e3      	b.n	80211be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80211f6:	60d1      	str	r1, [r2, #12]
 80211f8:	68f3      	ldr	r3, [r6, #12]
 80211fa:	4293      	cmp	r3, r2
 80211fc:	d1df      	bne.n	80211be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80211fe:	e7dd      	b.n	80211bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8021200:	68c3      	ldr	r3, [r0, #12]
 8021202:	42a3      	cmp	r3, r4
 8021204:	d103      	bne.n	802120e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8021206:	4641      	mov	r1, r8
 8021208:	f7ff ff70 	bl	80210ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 802120c:	4604      	mov	r4, r0
 802120e:	6863      	ldr	r3, [r4, #4]
 8021210:	4641      	mov	r1, r8
 8021212:	701f      	strb	r7, [r3, #0]
 8021214:	4628      	mov	r0, r5
 8021216:	f885 9000 	strb.w	r9, [r5]
 802121a:	f7ff ff7c 	bl	8021116 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 802121e:	4625      	mov	r5, r4
 8021220:	e7e2      	b.n	80211e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8021222:	b113      	cbz	r3, 802122a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8021224:	781a      	ldrb	r2, [r3, #0]
 8021226:	2a00      	cmp	r2, #0
 8021228:	d0db      	beq.n	80211e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 802122a:	6883      	ldr	r3, [r0, #8]
 802122c:	42a3      	cmp	r3, r4
 802122e:	d103      	bne.n	8021238 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8021230:	4641      	mov	r1, r8
 8021232:	f7ff ff70 	bl	8021116 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8021236:	4604      	mov	r4, r0
 8021238:	6863      	ldr	r3, [r4, #4]
 802123a:	4641      	mov	r1, r8
 802123c:	701f      	strb	r7, [r3, #0]
 802123e:	4628      	mov	r0, r5
 8021240:	f885 9000 	strb.w	r9, [r5]
 8021244:	f7ff ff52 	bl	80210ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8021248:	e7e9      	b.n	802121e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 802124a:	2201      	movs	r2, #1
 802124c:	701a      	strb	r2, [r3, #0]
 802124e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021252 <_ZSt17__throw_bad_allocv>:
 8021252:	b508      	push	{r3, lr}
 8021254:	f000 f820 	bl	8021298 <abort>

08021258 <_ZSt20__throw_length_errorPKc>:
 8021258:	b508      	push	{r3, lr}
 802125a:	f000 f81d 	bl	8021298 <abort>

0802125e <_ZSt25__throw_bad_function_callv>:
 802125e:	b508      	push	{r3, lr}
 8021260:	f000 f81a 	bl	8021298 <abort>

08021264 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021264:	b508      	push	{r3, lr}
 8021266:	4780      	blx	r0
 8021268:	f000 f816 	bl	8021298 <abort>

0802126c <_ZSt13get_terminatev>:
 802126c:	4b02      	ldr	r3, [pc, #8]	; (8021278 <_ZSt13get_terminatev+0xc>)
 802126e:	6818      	ldr	r0, [r3, #0]
 8021270:	f3bf 8f5b 	dmb	ish
 8021274:	4770      	bx	lr
 8021276:	bf00      	nop
 8021278:	24000014 	.word	0x24000014

0802127c <_ZSt9terminatev>:
 802127c:	b508      	push	{r3, lr}
 802127e:	f7ff fff5 	bl	802126c <_ZSt13get_terminatev>
 8021282:	f7ff ffef 	bl	8021264 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08021288 <_ZSt15get_new_handlerv>:
 8021288:	4b02      	ldr	r3, [pc, #8]	; (8021294 <_ZSt15get_new_handlerv+0xc>)
 802128a:	6818      	ldr	r0, [r3, #0]
 802128c:	f3bf 8f5b 	dmb	ish
 8021290:	4770      	bx	lr
 8021292:	bf00      	nop
 8021294:	240015f8 	.word	0x240015f8

08021298 <abort>:
 8021298:	b508      	push	{r3, lr}
 802129a:	2006      	movs	r0, #6
 802129c:	f000 f986 	bl	80215ac <raise>
 80212a0:	2001      	movs	r0, #1
 80212a2:	f7f4 fcb1 	bl	8015c08 <_exit>
	...

080212a8 <__errno>:
 80212a8:	4b01      	ldr	r3, [pc, #4]	; (80212b0 <__errno+0x8>)
 80212aa:	6818      	ldr	r0, [r3, #0]
 80212ac:	4770      	bx	lr
 80212ae:	bf00      	nop
 80212b0:	24000018 	.word	0x24000018

080212b4 <__libc_init_array>:
 80212b4:	b570      	push	{r4, r5, r6, lr}
 80212b6:	4d0d      	ldr	r5, [pc, #52]	; (80212ec <__libc_init_array+0x38>)
 80212b8:	4c0d      	ldr	r4, [pc, #52]	; (80212f0 <__libc_init_array+0x3c>)
 80212ba:	1b64      	subs	r4, r4, r5
 80212bc:	10a4      	asrs	r4, r4, #2
 80212be:	2600      	movs	r6, #0
 80212c0:	42a6      	cmp	r6, r4
 80212c2:	d109      	bne.n	80212d8 <__libc_init_array+0x24>
 80212c4:	4d0b      	ldr	r5, [pc, #44]	; (80212f4 <__libc_init_array+0x40>)
 80212c6:	4c0c      	ldr	r4, [pc, #48]	; (80212f8 <__libc_init_array+0x44>)
 80212c8:	f000 f99a 	bl	8021600 <_init>
 80212cc:	1b64      	subs	r4, r4, r5
 80212ce:	10a4      	asrs	r4, r4, #2
 80212d0:	2600      	movs	r6, #0
 80212d2:	42a6      	cmp	r6, r4
 80212d4:	d105      	bne.n	80212e2 <__libc_init_array+0x2e>
 80212d6:	bd70      	pop	{r4, r5, r6, pc}
 80212d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80212dc:	4798      	blx	r3
 80212de:	3601      	adds	r6, #1
 80212e0:	e7ee      	b.n	80212c0 <__libc_init_array+0xc>
 80212e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80212e6:	4798      	blx	r3
 80212e8:	3601      	adds	r6, #1
 80212ea:	e7f2      	b.n	80212d2 <__libc_init_array+0x1e>
 80212ec:	080218ec 	.word	0x080218ec
 80212f0:	080218ec 	.word	0x080218ec
 80212f4:	080218ec 	.word	0x080218ec
 80212f8:	0802191c 	.word	0x0802191c

080212fc <malloc>:
 80212fc:	4b02      	ldr	r3, [pc, #8]	; (8021308 <malloc+0xc>)
 80212fe:	4601      	mov	r1, r0
 8021300:	6818      	ldr	r0, [r3, #0]
 8021302:	f000 b8a7 	b.w	8021454 <_malloc_r>
 8021306:	bf00      	nop
 8021308:	24000018 	.word	0x24000018

0802130c <free>:
 802130c:	4b02      	ldr	r3, [pc, #8]	; (8021318 <free+0xc>)
 802130e:	4601      	mov	r1, r0
 8021310:	6818      	ldr	r0, [r3, #0]
 8021312:	f000 b833 	b.w	802137c <_free_r>
 8021316:	bf00      	nop
 8021318:	24000018 	.word	0x24000018

0802131c <memcpy>:
 802131c:	440a      	add	r2, r1
 802131e:	4291      	cmp	r1, r2
 8021320:	f100 33ff 	add.w	r3, r0, #4294967295
 8021324:	d100      	bne.n	8021328 <memcpy+0xc>
 8021326:	4770      	bx	lr
 8021328:	b510      	push	{r4, lr}
 802132a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802132e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021332:	4291      	cmp	r1, r2
 8021334:	d1f9      	bne.n	802132a <memcpy+0xe>
 8021336:	bd10      	pop	{r4, pc}

08021338 <memmove>:
 8021338:	4288      	cmp	r0, r1
 802133a:	b510      	push	{r4, lr}
 802133c:	eb01 0402 	add.w	r4, r1, r2
 8021340:	d902      	bls.n	8021348 <memmove+0x10>
 8021342:	4284      	cmp	r4, r0
 8021344:	4623      	mov	r3, r4
 8021346:	d807      	bhi.n	8021358 <memmove+0x20>
 8021348:	1e43      	subs	r3, r0, #1
 802134a:	42a1      	cmp	r1, r4
 802134c:	d008      	beq.n	8021360 <memmove+0x28>
 802134e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021356:	e7f8      	b.n	802134a <memmove+0x12>
 8021358:	4402      	add	r2, r0
 802135a:	4601      	mov	r1, r0
 802135c:	428a      	cmp	r2, r1
 802135e:	d100      	bne.n	8021362 <memmove+0x2a>
 8021360:	bd10      	pop	{r4, pc}
 8021362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802136a:	e7f7      	b.n	802135c <memmove+0x24>

0802136c <memset>:
 802136c:	4402      	add	r2, r0
 802136e:	4603      	mov	r3, r0
 8021370:	4293      	cmp	r3, r2
 8021372:	d100      	bne.n	8021376 <memset+0xa>
 8021374:	4770      	bx	lr
 8021376:	f803 1b01 	strb.w	r1, [r3], #1
 802137a:	e7f9      	b.n	8021370 <memset+0x4>

0802137c <_free_r>:
 802137c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802137e:	2900      	cmp	r1, #0
 8021380:	d044      	beq.n	802140c <_free_r+0x90>
 8021382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021386:	9001      	str	r0, [sp, #4]
 8021388:	2b00      	cmp	r3, #0
 802138a:	f1a1 0404 	sub.w	r4, r1, #4
 802138e:	bfb8      	it	lt
 8021390:	18e4      	addlt	r4, r4, r3
 8021392:	f000 f927 	bl	80215e4 <__malloc_lock>
 8021396:	4a1e      	ldr	r2, [pc, #120]	; (8021410 <_free_r+0x94>)
 8021398:	9801      	ldr	r0, [sp, #4]
 802139a:	6813      	ldr	r3, [r2, #0]
 802139c:	b933      	cbnz	r3, 80213ac <_free_r+0x30>
 802139e:	6063      	str	r3, [r4, #4]
 80213a0:	6014      	str	r4, [r2, #0]
 80213a2:	b003      	add	sp, #12
 80213a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80213a8:	f000 b922 	b.w	80215f0 <__malloc_unlock>
 80213ac:	42a3      	cmp	r3, r4
 80213ae:	d908      	bls.n	80213c2 <_free_r+0x46>
 80213b0:	6825      	ldr	r5, [r4, #0]
 80213b2:	1961      	adds	r1, r4, r5
 80213b4:	428b      	cmp	r3, r1
 80213b6:	bf01      	itttt	eq
 80213b8:	6819      	ldreq	r1, [r3, #0]
 80213ba:	685b      	ldreq	r3, [r3, #4]
 80213bc:	1949      	addeq	r1, r1, r5
 80213be:	6021      	streq	r1, [r4, #0]
 80213c0:	e7ed      	b.n	802139e <_free_r+0x22>
 80213c2:	461a      	mov	r2, r3
 80213c4:	685b      	ldr	r3, [r3, #4]
 80213c6:	b10b      	cbz	r3, 80213cc <_free_r+0x50>
 80213c8:	42a3      	cmp	r3, r4
 80213ca:	d9fa      	bls.n	80213c2 <_free_r+0x46>
 80213cc:	6811      	ldr	r1, [r2, #0]
 80213ce:	1855      	adds	r5, r2, r1
 80213d0:	42a5      	cmp	r5, r4
 80213d2:	d10b      	bne.n	80213ec <_free_r+0x70>
 80213d4:	6824      	ldr	r4, [r4, #0]
 80213d6:	4421      	add	r1, r4
 80213d8:	1854      	adds	r4, r2, r1
 80213da:	42a3      	cmp	r3, r4
 80213dc:	6011      	str	r1, [r2, #0]
 80213de:	d1e0      	bne.n	80213a2 <_free_r+0x26>
 80213e0:	681c      	ldr	r4, [r3, #0]
 80213e2:	685b      	ldr	r3, [r3, #4]
 80213e4:	6053      	str	r3, [r2, #4]
 80213e6:	4421      	add	r1, r4
 80213e8:	6011      	str	r1, [r2, #0]
 80213ea:	e7da      	b.n	80213a2 <_free_r+0x26>
 80213ec:	d902      	bls.n	80213f4 <_free_r+0x78>
 80213ee:	230c      	movs	r3, #12
 80213f0:	6003      	str	r3, [r0, #0]
 80213f2:	e7d6      	b.n	80213a2 <_free_r+0x26>
 80213f4:	6825      	ldr	r5, [r4, #0]
 80213f6:	1961      	adds	r1, r4, r5
 80213f8:	428b      	cmp	r3, r1
 80213fa:	bf04      	itt	eq
 80213fc:	6819      	ldreq	r1, [r3, #0]
 80213fe:	685b      	ldreq	r3, [r3, #4]
 8021400:	6063      	str	r3, [r4, #4]
 8021402:	bf04      	itt	eq
 8021404:	1949      	addeq	r1, r1, r5
 8021406:	6021      	streq	r1, [r4, #0]
 8021408:	6054      	str	r4, [r2, #4]
 802140a:	e7ca      	b.n	80213a2 <_free_r+0x26>
 802140c:	b003      	add	sp, #12
 802140e:	bd30      	pop	{r4, r5, pc}
 8021410:	240015fc 	.word	0x240015fc

08021414 <sbrk_aligned>:
 8021414:	b570      	push	{r4, r5, r6, lr}
 8021416:	4e0e      	ldr	r6, [pc, #56]	; (8021450 <sbrk_aligned+0x3c>)
 8021418:	460c      	mov	r4, r1
 802141a:	6831      	ldr	r1, [r6, #0]
 802141c:	4605      	mov	r5, r0
 802141e:	b911      	cbnz	r1, 8021426 <sbrk_aligned+0x12>
 8021420:	f000 f88c 	bl	802153c <_sbrk_r>
 8021424:	6030      	str	r0, [r6, #0]
 8021426:	4621      	mov	r1, r4
 8021428:	4628      	mov	r0, r5
 802142a:	f000 f887 	bl	802153c <_sbrk_r>
 802142e:	1c43      	adds	r3, r0, #1
 8021430:	d00a      	beq.n	8021448 <sbrk_aligned+0x34>
 8021432:	1cc4      	adds	r4, r0, #3
 8021434:	f024 0403 	bic.w	r4, r4, #3
 8021438:	42a0      	cmp	r0, r4
 802143a:	d007      	beq.n	802144c <sbrk_aligned+0x38>
 802143c:	1a21      	subs	r1, r4, r0
 802143e:	4628      	mov	r0, r5
 8021440:	f000 f87c 	bl	802153c <_sbrk_r>
 8021444:	3001      	adds	r0, #1
 8021446:	d101      	bne.n	802144c <sbrk_aligned+0x38>
 8021448:	f04f 34ff 	mov.w	r4, #4294967295
 802144c:	4620      	mov	r0, r4
 802144e:	bd70      	pop	{r4, r5, r6, pc}
 8021450:	24001600 	.word	0x24001600

08021454 <_malloc_r>:
 8021454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021458:	1ccd      	adds	r5, r1, #3
 802145a:	f025 0503 	bic.w	r5, r5, #3
 802145e:	3508      	adds	r5, #8
 8021460:	2d0c      	cmp	r5, #12
 8021462:	bf38      	it	cc
 8021464:	250c      	movcc	r5, #12
 8021466:	2d00      	cmp	r5, #0
 8021468:	4607      	mov	r7, r0
 802146a:	db01      	blt.n	8021470 <_malloc_r+0x1c>
 802146c:	42a9      	cmp	r1, r5
 802146e:	d905      	bls.n	802147c <_malloc_r+0x28>
 8021470:	230c      	movs	r3, #12
 8021472:	603b      	str	r3, [r7, #0]
 8021474:	2600      	movs	r6, #0
 8021476:	4630      	mov	r0, r6
 8021478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802147c:	4e2e      	ldr	r6, [pc, #184]	; (8021538 <_malloc_r+0xe4>)
 802147e:	f000 f8b1 	bl	80215e4 <__malloc_lock>
 8021482:	6833      	ldr	r3, [r6, #0]
 8021484:	461c      	mov	r4, r3
 8021486:	bb34      	cbnz	r4, 80214d6 <_malloc_r+0x82>
 8021488:	4629      	mov	r1, r5
 802148a:	4638      	mov	r0, r7
 802148c:	f7ff ffc2 	bl	8021414 <sbrk_aligned>
 8021490:	1c43      	adds	r3, r0, #1
 8021492:	4604      	mov	r4, r0
 8021494:	d14d      	bne.n	8021532 <_malloc_r+0xde>
 8021496:	6834      	ldr	r4, [r6, #0]
 8021498:	4626      	mov	r6, r4
 802149a:	2e00      	cmp	r6, #0
 802149c:	d140      	bne.n	8021520 <_malloc_r+0xcc>
 802149e:	6823      	ldr	r3, [r4, #0]
 80214a0:	4631      	mov	r1, r6
 80214a2:	4638      	mov	r0, r7
 80214a4:	eb04 0803 	add.w	r8, r4, r3
 80214a8:	f000 f848 	bl	802153c <_sbrk_r>
 80214ac:	4580      	cmp	r8, r0
 80214ae:	d13a      	bne.n	8021526 <_malloc_r+0xd2>
 80214b0:	6821      	ldr	r1, [r4, #0]
 80214b2:	3503      	adds	r5, #3
 80214b4:	1a6d      	subs	r5, r5, r1
 80214b6:	f025 0503 	bic.w	r5, r5, #3
 80214ba:	3508      	adds	r5, #8
 80214bc:	2d0c      	cmp	r5, #12
 80214be:	bf38      	it	cc
 80214c0:	250c      	movcc	r5, #12
 80214c2:	4629      	mov	r1, r5
 80214c4:	4638      	mov	r0, r7
 80214c6:	f7ff ffa5 	bl	8021414 <sbrk_aligned>
 80214ca:	3001      	adds	r0, #1
 80214cc:	d02b      	beq.n	8021526 <_malloc_r+0xd2>
 80214ce:	6823      	ldr	r3, [r4, #0]
 80214d0:	442b      	add	r3, r5
 80214d2:	6023      	str	r3, [r4, #0]
 80214d4:	e00e      	b.n	80214f4 <_malloc_r+0xa0>
 80214d6:	6822      	ldr	r2, [r4, #0]
 80214d8:	1b52      	subs	r2, r2, r5
 80214da:	d41e      	bmi.n	802151a <_malloc_r+0xc6>
 80214dc:	2a0b      	cmp	r2, #11
 80214de:	d916      	bls.n	802150e <_malloc_r+0xba>
 80214e0:	1961      	adds	r1, r4, r5
 80214e2:	42a3      	cmp	r3, r4
 80214e4:	6025      	str	r5, [r4, #0]
 80214e6:	bf18      	it	ne
 80214e8:	6059      	strne	r1, [r3, #4]
 80214ea:	6863      	ldr	r3, [r4, #4]
 80214ec:	bf08      	it	eq
 80214ee:	6031      	streq	r1, [r6, #0]
 80214f0:	5162      	str	r2, [r4, r5]
 80214f2:	604b      	str	r3, [r1, #4]
 80214f4:	4638      	mov	r0, r7
 80214f6:	f104 060b 	add.w	r6, r4, #11
 80214fa:	f000 f879 	bl	80215f0 <__malloc_unlock>
 80214fe:	f026 0607 	bic.w	r6, r6, #7
 8021502:	1d23      	adds	r3, r4, #4
 8021504:	1af2      	subs	r2, r6, r3
 8021506:	d0b6      	beq.n	8021476 <_malloc_r+0x22>
 8021508:	1b9b      	subs	r3, r3, r6
 802150a:	50a3      	str	r3, [r4, r2]
 802150c:	e7b3      	b.n	8021476 <_malloc_r+0x22>
 802150e:	6862      	ldr	r2, [r4, #4]
 8021510:	42a3      	cmp	r3, r4
 8021512:	bf0c      	ite	eq
 8021514:	6032      	streq	r2, [r6, #0]
 8021516:	605a      	strne	r2, [r3, #4]
 8021518:	e7ec      	b.n	80214f4 <_malloc_r+0xa0>
 802151a:	4623      	mov	r3, r4
 802151c:	6864      	ldr	r4, [r4, #4]
 802151e:	e7b2      	b.n	8021486 <_malloc_r+0x32>
 8021520:	4634      	mov	r4, r6
 8021522:	6876      	ldr	r6, [r6, #4]
 8021524:	e7b9      	b.n	802149a <_malloc_r+0x46>
 8021526:	230c      	movs	r3, #12
 8021528:	603b      	str	r3, [r7, #0]
 802152a:	4638      	mov	r0, r7
 802152c:	f000 f860 	bl	80215f0 <__malloc_unlock>
 8021530:	e7a1      	b.n	8021476 <_malloc_r+0x22>
 8021532:	6025      	str	r5, [r4, #0]
 8021534:	e7de      	b.n	80214f4 <_malloc_r+0xa0>
 8021536:	bf00      	nop
 8021538:	240015fc 	.word	0x240015fc

0802153c <_sbrk_r>:
 802153c:	b538      	push	{r3, r4, r5, lr}
 802153e:	4d06      	ldr	r5, [pc, #24]	; (8021558 <_sbrk_r+0x1c>)
 8021540:	2300      	movs	r3, #0
 8021542:	4604      	mov	r4, r0
 8021544:	4608      	mov	r0, r1
 8021546:	602b      	str	r3, [r5, #0]
 8021548:	f7f4 fb68 	bl	8015c1c <_sbrk>
 802154c:	1c43      	adds	r3, r0, #1
 802154e:	d102      	bne.n	8021556 <_sbrk_r+0x1a>
 8021550:	682b      	ldr	r3, [r5, #0]
 8021552:	b103      	cbz	r3, 8021556 <_sbrk_r+0x1a>
 8021554:	6023      	str	r3, [r4, #0]
 8021556:	bd38      	pop	{r3, r4, r5, pc}
 8021558:	24001604 	.word	0x24001604

0802155c <_raise_r>:
 802155c:	291f      	cmp	r1, #31
 802155e:	b538      	push	{r3, r4, r5, lr}
 8021560:	4604      	mov	r4, r0
 8021562:	460d      	mov	r5, r1
 8021564:	d904      	bls.n	8021570 <_raise_r+0x14>
 8021566:	2316      	movs	r3, #22
 8021568:	6003      	str	r3, [r0, #0]
 802156a:	f04f 30ff 	mov.w	r0, #4294967295
 802156e:	bd38      	pop	{r3, r4, r5, pc}
 8021570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021572:	b112      	cbz	r2, 802157a <_raise_r+0x1e>
 8021574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021578:	b94b      	cbnz	r3, 802158e <_raise_r+0x32>
 802157a:	4620      	mov	r0, r4
 802157c:	f000 f830 	bl	80215e0 <_getpid_r>
 8021580:	462a      	mov	r2, r5
 8021582:	4601      	mov	r1, r0
 8021584:	4620      	mov	r0, r4
 8021586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802158a:	f000 b817 	b.w	80215bc <_kill_r>
 802158e:	2b01      	cmp	r3, #1
 8021590:	d00a      	beq.n	80215a8 <_raise_r+0x4c>
 8021592:	1c59      	adds	r1, r3, #1
 8021594:	d103      	bne.n	802159e <_raise_r+0x42>
 8021596:	2316      	movs	r3, #22
 8021598:	6003      	str	r3, [r0, #0]
 802159a:	2001      	movs	r0, #1
 802159c:	e7e7      	b.n	802156e <_raise_r+0x12>
 802159e:	2400      	movs	r4, #0
 80215a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80215a4:	4628      	mov	r0, r5
 80215a6:	4798      	blx	r3
 80215a8:	2000      	movs	r0, #0
 80215aa:	e7e0      	b.n	802156e <_raise_r+0x12>

080215ac <raise>:
 80215ac:	4b02      	ldr	r3, [pc, #8]	; (80215b8 <raise+0xc>)
 80215ae:	4601      	mov	r1, r0
 80215b0:	6818      	ldr	r0, [r3, #0]
 80215b2:	f7ff bfd3 	b.w	802155c <_raise_r>
 80215b6:	bf00      	nop
 80215b8:	24000018 	.word	0x24000018

080215bc <_kill_r>:
 80215bc:	b538      	push	{r3, r4, r5, lr}
 80215be:	4d07      	ldr	r5, [pc, #28]	; (80215dc <_kill_r+0x20>)
 80215c0:	2300      	movs	r3, #0
 80215c2:	4604      	mov	r4, r0
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	602b      	str	r3, [r5, #0]
 80215ca:	f7f4 fb0d 	bl	8015be8 <_kill>
 80215ce:	1c43      	adds	r3, r0, #1
 80215d0:	d102      	bne.n	80215d8 <_kill_r+0x1c>
 80215d2:	682b      	ldr	r3, [r5, #0]
 80215d4:	b103      	cbz	r3, 80215d8 <_kill_r+0x1c>
 80215d6:	6023      	str	r3, [r4, #0]
 80215d8:	bd38      	pop	{r3, r4, r5, pc}
 80215da:	bf00      	nop
 80215dc:	24001604 	.word	0x24001604

080215e0 <_getpid_r>:
 80215e0:	f7f4 bafa 	b.w	8015bd8 <_getpid>

080215e4 <__malloc_lock>:
 80215e4:	4801      	ldr	r0, [pc, #4]	; (80215ec <__malloc_lock+0x8>)
 80215e6:	f000 b809 	b.w	80215fc <__retarget_lock_acquire_recursive>
 80215ea:	bf00      	nop
 80215ec:	24001608 	.word	0x24001608

080215f0 <__malloc_unlock>:
 80215f0:	4801      	ldr	r0, [pc, #4]	; (80215f8 <__malloc_unlock+0x8>)
 80215f2:	f000 b804 	b.w	80215fe <__retarget_lock_release_recursive>
 80215f6:	bf00      	nop
 80215f8:	24001608 	.word	0x24001608

080215fc <__retarget_lock_acquire_recursive>:
 80215fc:	4770      	bx	lr

080215fe <__retarget_lock_release_recursive>:
 80215fe:	4770      	bx	lr

08021600 <_init>:
 8021600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021602:	bf00      	nop
 8021604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021606:	bc08      	pop	{r3}
 8021608:	469e      	mov	lr, r3
 802160a:	4770      	bx	lr

0802160c <_fini>:
 802160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802160e:	bf00      	nop
 8021610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021612:	bc08      	pop	{r3}
 8021614:	469e      	mov	lr, r3
 8021616:	4770      	bx	lr
