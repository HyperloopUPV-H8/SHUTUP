
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020888  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08020b58  08020b58  00030b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000030  08020dd4  08020dd4  00030dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08020e04  08020e04  00030e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08020e34  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001cb4  2400007c  08020eb0  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001d30  08020eb0  00041d30  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c5a13  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000adee  00000000  00000000  00105abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000057a8  00000000  00000000  001108b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000058f0  00000000  00000000  00116058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f766  00000000  00000000  0011b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003aa6b  00000000  00000000  0015b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d7382  00000000  00000000  00195b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0036ce9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019b98  00000000  00000000  0036ceec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020b40 	.word	0x08020b40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08020b40 	.word	0x08020b40

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e f943 	bl	801e728 <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fc68 	bl	8015db0 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	08020d58 	.word	0x08020d58

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	08020d58 	.word	0x08020d58

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fa8e 	bl	80205fc <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f f886 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08020b58 	.word	0x08020b58

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01e fdae 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e fb4a 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fb37 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e fb47 	bl	8020798 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e f8df 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e f8cc 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01e f81c 	bl	8020600 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01d ffec 	bl	80205fc <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01d ffb6 	bl	80205fc <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01d ff8e 	bl	8020604 <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01d feb2 	bl	8020604 <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01d fe52 	bl	8020604 <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01d fec9 	bl	80208ac <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fc69 	bl	8020600 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fc57 	bl	8020600 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d fd09 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d fc3a 	bl	8020604 <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d fcae 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fbe2 	bl	8020604 <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d fcf5 	bl	8020878 <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d fc50 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fb81 	bl	8020604 <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2205      	movs	r2, #5
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b fbaa 	bl	801ea50 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08020d58 	.word	0x08020d58

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01c fea4 	bl	80205fc <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08020b74 	.word	0x08020b74

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c fc36 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c fc34 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c f9db 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c f9c8 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c f930 	bl	8020600 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c f900 	bl	80205fc <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c f8c5 	bl	8020604 <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c f865 	bl	8020604 <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01b ff0c 	bl	8020600 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01b ffbe 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01b fef2 	bl	8020604 <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01c f805 	bl	8020878 <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01b ff60 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01b fe91 	bl	8020604 <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01b fef3 	bl	80207d8 <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb34 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb3f 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb13 	bl	8005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb1b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb1e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb38 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb0c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001b0 	.word	0x240001b0

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb13 	bl	80051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fad4 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fadf 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f015 f807 	bl	8019cb8 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 f9f4 	bl	801a0a0 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f939 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 faa5 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fab2 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f014 ffd3 	bl	8019d0e <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e2 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa4e 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa5b 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f014 ff90 	bl	8019d0e <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f89b 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa07 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa10 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b fd11 	bl	80208ac <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f014 ff24 	bl	8019d0e <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffed 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff ffe8 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004efe:	4603      	mov	r3, r0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	return *this;
 8004f28:	687b      	ldr	r3, [r7, #4]
      }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f993 	bl	800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f99e 	bl	80052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f107 0214 	add.w	r2, r7, #20
 8004f78:	f107 0318 	add.w	r3, r7, #24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffb0 	bl	8004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01d      	beq.n	8004fcc <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffce 	bl	8004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f988 	bl	80052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004fbe:	e006      	b.n	8004fce <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffa5 	bl	8004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 8004fca:	e7d3      	b.n	8004f74 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24000104 	.word	0x24000104

08004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f900 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f000 f90b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fde0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fdfd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f80c 	bl	8005054 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fddc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005046:	e7da      	b.n	8004ffe <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	240000f8 	.word	0x240000f8

08005054 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01a      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3390      	adds	r3, #144	; 0x90
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	f014 fea4 	bl	8019dc4 <HAL_FDCAN_GetRxMessage>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7ff fd2d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f931 	bl	8005316 <_ZNSaIP3CanED1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f914 	bl	80052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffeb 	bl	80050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f97e 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f96d 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f970 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f974 	bl	8005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f01b fa99 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	return *this;
 80051a8:	687b      	ldr	r3, [r7, #4]
      }
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f952 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f953 	bl	8005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f959 	bl	800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f97c 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f96b 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f805 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005240:	4603      	mov	r3, r0
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffed 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005270:	4603      	mov	r3, r0
	  ? this->_M_get()
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <_ZNRSt8optionalImE5valueEv+0x1e>
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f951 	bl	800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 800527c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800527e:	e001      	b.n	8005284 <_ZNRSt8optionalImE5valueEv+0x22>
 8005280:	f7ff fbb3 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f94b 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93a 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 80052ce:	b5b0      	push	{r4, r5, r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80052d8:	687c      	ldr	r4, [r7, #4]
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 f93c 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f952 	bl	8005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95b 	bl	80055ba <_ZNSaIP3CanEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f963 	bl	80055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005344:	461a      	mov	r2, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f957 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fea9 	bl	80050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f95a 	bl	8005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	1d38      	adds	r0, r7, #4
 8005396:	e880 0006 	stmia.w	r0, {r1, r2}
 800539a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f954 	bl	800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f978 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ae:	4604      	mov	r4, r0
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f97f 	bl	80056b6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	462b      	mov	r3, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f99f 	bl	8005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}

080053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053ce:	b5b0      	push	{r4, r5, r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9c7 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 80053e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053e8:	461a      	mov	r2, r3
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9cc 	bl	800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f939 	bl	800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9b5 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9a4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f9a5 	bl	80057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d011      	beq.n	80054d4 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685d      	ldr	r5, [r3, #4]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 f990 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f9aa 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e00c      	b.n	80054ee <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe9b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 80054da:	4604      	mov	r4, r0
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 f97d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9a9 	bl	8005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa22 	bl	8005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 80054f4:	4603      	mov	r3, r0
      }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa20 	bl	800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800552e:	4603      	mov	r3, r0
      }
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	7239      	strb	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4621      	mov	r1, r4
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa11 	bl	80059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	7239      	strb	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800559c:	68fc      	ldr	r4, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffda 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ffdf 	bl	800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}

080055ba <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
	{ }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	if (__p)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9eb 	bl	80059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe99 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9e5 	bl	8005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8005684:	461a      	mov	r2, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9e2 	bl	8005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffd1 	bl	8005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffed 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d5 	bl	8005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4423      	add	r3, r4
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}

080056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80056da:	b5b0      	push	{r4, r5, r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80056e4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9d0 	bl	8005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80056ee:	462a      	mov	r2, r5
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f9d5 	bl	8005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}

08005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff ffe1 	bl	80056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005718:	4603      	mov	r3, r0
 800571a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800571c:	68fc      	ldr	r4, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f827 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f000 f9ca 	bl	8005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f9ed 	bl	8005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f80d 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800575a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800575c:	4622      	mov	r2, r4
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f9eb 	bl	8005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8005766:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9e0 	bl	8005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9dc 	bl	8005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f7ff ffed 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005802:	4603      	mov	r3, r0
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	2004      	movs	r0, #4
 800580c:	f7fa fd90 	bl	8000330 <_ZnwjPv>
 8005810:	4603      	mov	r3, r0
 8005812:	601c      	str	r4, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffd7 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7ff ffdd 	bl	80057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800584e:	2101      	movs	r1, #1
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9a5 	bl	8005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcc3 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 800586a:	4603      	mov	r3, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9d8 	bl	8005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800587e:	4603      	mov	r3, r0
 8005880:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e6 	bl	8005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 800588c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005892:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff9d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	4629      	mov	r1, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffb7 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f97e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f0 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 f9d6 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f969 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9db 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f9c1 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005900:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800590c:	461a      	mov	r2, r3
 800590e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005910:	f7ff fe73 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
    }
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	08020b90 	.word	0x08020b90

08005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc65 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9c2 	bl	8005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005956:	4603      	mov	r3, r0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f95d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005964:	4603      	mov	r3, r0
      }
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	7239      	strb	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	    { }
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	7239      	strb	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdce 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffde 	bl	8005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	711a      	strb	r2, [r3, #4]
	{ }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a06:	f7fa fc8b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f01a fdf3 	bl	80205fc <_ZdlPv>
	    return;
 8005a16:	e005      	b.n	8005a24 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 faa4 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f967 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f971 	bl	8005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f971 	bl	8005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	10db      	asrs	r3, r3, #3
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f919 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f961 	bl	8005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf8c      	ite	hi
 8005aec:	2301      	movhi	r3, #1
 8005aee:	2300      	movls	r3, #0
 8005af0:	b2dc      	uxtb	r4, r3
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc3d 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d002      	beq.n	8005b06 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b02:	f01a fe49 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b06:	687b      	ldr	r3, [r7, #4]
      }
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	08020bac 	.word	0x08020bac

08005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f956 	bl	8005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b32:	2300      	movs	r3, #0
      }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f963 	bl	8005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005b68:	f7fa fbda 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f962 	bl	8005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005b7a:	e003      	b.n	8005b84 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f975 	bl	8005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f969 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f976 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	1ae2      	subs	r2, r4, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf34      	ite	cc
 8005bc4:	2301      	movcc	r3, #1
 8005bc6:	2300      	movcs	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01a fde2 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f966 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f962 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f107 0208 	add.w	r2, r7, #8
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe2e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4423      	add	r3, r4
 8005bfc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f951 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d306      	bcc.n	8005c1a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f939 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d904      	bls.n	8005c24 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f932 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c24:	697b      	ldr	r3, [r7, #20]
      }
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffbd 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f7fe ffb8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1ae3      	subs	r3, r4, r3
 8005c4e:	109b      	asrs	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f92a 	bl	8005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e000      	b.n	8005c78 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005c76:	2300      	movs	r3, #0
      }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c8e:	f88d 4000 	strb.w	r4, [sp]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f934 	bl	8005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005c9e:	4603      	mov	r3, r0
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f936 	bl	8005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	425b      	negs	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	f107 020c 	add.w	r2, r7, #12
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbfe 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f935 	bl	8005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
	{ }
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005d68:	f7fa fada 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f01a fc42 	bl	80205fc <_ZdlPv>
	    return;
 8005d78:	e005      	b.n	8005d86 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69f8      	ldr	r0, [r7, #28]
 8005d80:	f000 f9a5 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005d96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005db2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffea 	bl	8005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f80c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	681b      	ldr	r3, [r3, #0]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005dec:	f7fa fa98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f01a fc02 	bl	8020604 <_Znwj>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e006      	b.n	8005e12 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f96f 	bl	80060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	bf00      	nop
      { return __a.allocate(__n); }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8b6 	bl	8005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e34:	4603      	mov	r3, r0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8b5 	bl	8005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f8bc 	bl	8005fd6 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e7f0      	b.n	8005e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f8d2 	bl	8006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b4 	bl	8006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	109b      	asrs	r3, r3, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005ed8:	f7fa fa22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f01a fb8c 	bl	8020604 <_Znwj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e006      	b.n	8005efe <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93a 	bl	800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005efa:	4603      	mov	r3, r0
 8005efc:	bf00      	nop
      { return __a.allocate(__n); }
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f897 	bl	800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f20:	4603      	mov	r3, r0
      }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    }
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f48:	f7fa f9ea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f897 	bl	8006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f5a:	e003      	b.n	8005f64 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8aa 	bl	80060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f01a fb3f 	bl	8020600 <_ZdlPvj>
      }
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8ba 	bl	800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8bb 	bl	800615a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800600c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006010:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffea 	bl	8005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc fedd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800602c:	4603      	mov	r3, r0
 800602e:	681b      	ldr	r3, [r3, #0]
      }
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8a5 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006062:	4604      	mov	r4, r0
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f8a1 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 800606a:	4605      	mov	r5, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f89d 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f8a2 	bl	80061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800607e:	4603      	mov	r3, r0
    }
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}

08006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8af 	bl	80061fe <_ZSt11__addressofIP3CanEPT_RS2_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b6 	bl	8006214 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e7f0      	b.n	8006092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4619      	mov	r1, r3
 80060e0:	68b8      	ldr	r0, [r7, #8]
 80060e2:	f01a fa8d 	bl	8020600 <_ZdlPvj>
      }
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f896 	bl	800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	bf8c      	ite	hi
 8006106:	2301      	movhi	r3, #1
 8006108:	2300      	movls	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006110:	f01a fb3f 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4618      	mov	r0, r3
 800611a:	f01a fa73 	bl	8020604 <_Znwj>
 800611e:	4603      	mov	r3, r0
 8006120:	bf00      	nop
      }
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f883 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800613c:	4604      	mov	r4, r0
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f000 f87f 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006144:	4603      	mov	r3, r0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f884 	bl	8006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006150:	4603      	mov	r3, r0
    }
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
    }
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f88f 	bl	800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf8c      	ite	hi
 8006188:	2301      	movhi	r3, #1
 800618a:	2300      	movls	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006192:	f01a fafe 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f01a fa32 	bl	8020604 <_Znwj>
 80061a0:	4603      	mov	r3, r0
 80061a2:	bf00      	nop
      }
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	109b      	asrs	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd06      	ble.n	80061ee <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f01a fb45 	bl	8020878 <memmove>
      return __result + __count;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006232:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f826 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 800626a:	4604      	mov	r4, r0
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f000 f822 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 8006272:	4605      	mov	r5, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f828 	bl	80062cc <_ZSt12__niter_baseIP3DLCET_S2_>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f82d 	bl	80062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006288:	4602      	mov	r2, r0
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f837 	bl	8006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 8006294:	4603      	mov	r3, r0
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}

0800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f811 	bl	800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006326:	f7f9 fffb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f80d 	bl	8006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800633a:	4603      	mov	r3, r0
 800633c:	e006      	b.n	800634c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82b 	bl	800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006348:	4603      	mov	r3, r0
 800634a:	bf00      	nop
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	10db      	asrs	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dd0f      	ble.n	8006390 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006378:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e7ec      	b.n	800636a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 8006390:	687b      	ldr	r3, [r7, #4]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	10db      	asrs	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	461a      	mov	r2, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f01a fa58 	bl	8020878 <memmove>
	  return __result + _Num;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0a6      	sub	sp, #152	; 0x98
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d126      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d121      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 80063f2:	481a      	ldr	r0, [pc, #104]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063f4:	f7fe fe70 	bl	80050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	4611      	mov	r1, r2
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4618      	mov	r0, r3
 8006404:	f01a fa2a 	bl	802085c <memcpy>
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	2310      	movs	r3, #16
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffa1 	bl	800535e <_ZNSaI3DLCEC1Ev>
 800641c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006420:	f107 020c 	add.w	r2, r7, #12
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006428:	f7fe ffb0 	bl	800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800642c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffa0 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	4293      	cmp	r3, r2
 8006444:	d105      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006448:	f7fe ffc1 	bl	80053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800644e:	f000 f80b 	bl	8006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006452:	bf00      	nop
 8006454:	3798      	adds	r7, #152	; 0x98
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	240000f8 	.word	0x240000f8
 8006460:	08020be0 	.word	0x08020be0
 8006464:	24000104 	.word	0x24000104

08006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc14 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8006480:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006482:	461a      	mov	r2, r3
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc19 	bl	8005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff4c 	bl	800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}

0800649e <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff96 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7ff ff8e 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f89e 	bl	8006608 <_ZNSaIP9DigitalInED1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f881 	bl	80065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffeb 	bl	80064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8b1 	bl	800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f88f 	bl	8006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffeb 	bl	8006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4619      	mov	r1, r3
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <_ZN9DigitalInC1EP3Pin+0x48>)
 800657a:	f000 f89e 	bl	80066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 8006586:	f000 f8a9 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800658a:	4603      	mov	r3, r0
 800658c:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	719a      	strb	r2, [r3, #6]
}
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	24000110 	.word	0x24000110
 80065a4:	2400011c 	.word	0x2400011c

080065a8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f014 fc9e 	bl	801af00 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	721a      	strb	r2, [r3, #8]
 80065d4:	e002      	b.n	80065dc <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	721a      	strb	r2, [r3, #8]
	return state;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a1b      	ldrb	r3, [r3, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d1 	bl	8006798 <_ZNSaIP9DigitalInEC1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d9 	bl	80067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8cd 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff3c 	bl	80064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8d0 	bl	80067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fa fac1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fe6c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8db 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b7 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff2d 	bl	800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 f8d1 	bl	800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d7 	bl	8006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8fc 	bl	80068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80066ee:	4603      	mov	r3, r0
 80066f0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	f107 020c 	add.w	r2, r7, #12
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f909 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f917 	bl	8006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681c      	ldr	r4, [r3, #0]
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f91d 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4621      	mov	r1, r4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fa fbd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006746:	687c      	ldr	r4, [r7, #4]
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f912 	bl	800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fbce 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006764:	f107 0218 	add.w	r2, r7, #24
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f911 	bl	800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8ec 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	3304      	adds	r3, #4
      }
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	08020d58 	.word	0x08020d58

08006798 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f939 	bl	8006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	{ }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f91c 	bl	8006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f930 	bl	8006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f000 f92b 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800682c:	4603      	mov	r3, r0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fff0 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f000 f92f 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800683c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f936 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800684a:	e7e9      	b.n	8006820 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d011      	beq.n	80068bc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006898:	687c      	ldr	r4, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685d      	ldr	r5, [r3, #4]
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f000 f918 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f932 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00c      	b.n	80068d6 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f93b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 80068c2:	4604      	mov	r4, r0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 f905 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f943 	bl	8006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bc 	bl	8006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 80068dc:	4603      	mov	r3, r0
      }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f9c8 	bl	8006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9d2 	bl	8006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006914:	4603      	mov	r3, r0
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9c2 	bl	8006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006956:	bf00      	nop
 8006958:	4620      	mov	r0, r4
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f9bf 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006972:	4603      	mov	r3, r0
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800699c:	b5b0      	push	{r4, r5, r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa fc5b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b0:	4604      	mov	r4, r0
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fa ff45 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b8:	4605      	mov	r5, r0
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fa fc69 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9a0 	bl	8006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80069cc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f000 faee 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f107 0010 	add.w	r0, r7, #16
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f000 f9b8 	bl	8006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80069e8:	6939      	ldr	r1, [r7, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faf1 	bl	8006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e00b      	b.n	8006a10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f859 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb23 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a46:	f7f9 fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f019 fdd3 	bl	80205fc <_ZdlPv>
	    return;
 8006a56:	e005      	b.n	8006a64 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 fdac 	bl	80075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fad7 	bl	8007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae8 	bl	800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff ffed 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7f9 fc14 	bl	8000330 <_ZnwjPv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	601c      	str	r4, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffd7 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffdd 	bl	8006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fab8 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fab7 	bl	80070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 faf4 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fafa 	bl	800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb08 	bl	80071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006ba8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff8b 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffa5 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb18 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb1d 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006be4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4621      	mov	r1, r4
 8006bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bec:	f000 faf8 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006bf0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb03 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb08 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fae3 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	f7ff fdd4 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
    }
 8006c48:	bf00      	nop
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	08020c60 	.word	0x08020c60

08006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff6b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 faef 	bl	8007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb01 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006c80:	4603      	mov	r3, r0
      }
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fddd 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafc 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb02 	bl	80072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}

08006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9c2 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006ce2:	bf00      	nop
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb0b 	bl	8007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb08 	bl	8007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d20:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa fa9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd89 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d30:	4605      	mov	r5, r0
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fa faad 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb05 	bl	8007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d48:	697b      	ldr	r3, [r7, #20]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}

08006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d52:	b5b0      	push	{r4, r5, r7, lr}
 8006d54:	b08c      	sub	sp, #48	; 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb22 	bl	80073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006d6c:	69bc      	ldr	r4, [r7, #24]
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f000 fa93 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006d74:	4603      	mov	r3, r0
 8006d76:	429c      	cmp	r4, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d032      	beq.n	8006dea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 fb22 	bl	80073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006d8a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006d90:	68bc      	ldr	r4, [r7, #8]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 fb27 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb2e 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006da2:	4603      	mov	r3, r0
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fa f894 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dbc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb0d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fb f867 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006dda:	e0e5      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb17 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006de8:	e0de      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006dea:	68bc      	ldr	r4, [r7, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb03 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7fa f86a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d059      	beq.n	8006ec0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e10:	69bc      	ldr	r4, [r7, #24]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f000 fb89 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fb7d 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e30:	4604      	mov	r4, r0
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb79 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7fb f8de 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e44:	e0b0      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e46:	68bc      	ldr	r4, [r7, #8]
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb78 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fad1 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fa f837 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fe04 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	f107 0214 	add.w	r2, r7, #20
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fb f805 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e9e:	e083      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fb f8a8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006eb0:	e07a      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 faac 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006ebe:	e073      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006ec0:	68bc      	ldr	r4, [r7, #8]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9a 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fa f800 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d059      	beq.n	8006f94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006ee4:	69bc      	ldr	r4, [r7, #24]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 fa7d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa6f 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fa ffc9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f16:	e047      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f18:	68bc      	ldr	r4, [r7, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb1e 	bl	8007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fa66 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f32:	4603      	mov	r3, r0
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 ffcd 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd9a 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f107 0218 	add.w	r2, r7, #24
 8006f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa ff9b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f72:	e019      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb f83e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f84:	e010      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fa42 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006f92:	e009      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fb f867 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae4 	bl	8007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 faeb 	bl	80075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 8006fcc:	4603      	mov	r3, r0
      }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006fd6:	b5b0      	push	{r4, r5, r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f955 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d012      	beq.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8006ff8:	68fc      	ldr	r4, [r7, #12]
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff ffd8 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007000:	4603      	mov	r3, r0
 8007002:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9fa 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800700a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 ff61 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800702a:	7df8      	ldrb	r0, [r7, #23]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	f019 fb54 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f805 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800704a:	693b      	ldr	r3, [r7, #16]
    }
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007072:	b590      	push	{r4, r7, lr}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 faab 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007082:	4604      	mov	r4, r0
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff fe33 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	4620      	mov	r0, r4
 8007090:	f000 faad 	bl	80075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa96 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2201      	movs	r2, #1
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faa7 	bl	8007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 faa9 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80070f2:	4604      	mov	r4, r0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fab6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	1ae2      	subs	r2, r4, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf34      	ite	cc
 8007104:	2301      	movcc	r3, #1
 8007106:	2300      	movcs	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f019 fb42 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 faa6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800711a:	4604      	mov	r4, r0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faa2 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007122:	4603      	mov	r3, r0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fb fb8e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007136:	4603      	mov	r3, r0
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4423      	add	r3, r4
 800713c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa91 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa79 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4293      	cmp	r3, r2
 8007158:	d904      	bls.n	8007164 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa72 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007164:	697b      	ldr	r3, [r7, #20]
      }
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}

0800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ff9e 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f835 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f000 f830 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1ae3      	subs	r3, r4, r3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa5a 	bl	8007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 80071d6:	2300      	movs	r3, #0
      }
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80071ee:	f88d 4000 	strb.w	r4, [sp]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa64 	bl	80076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80071fe:	4603      	mov	r3, r0
      }
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa5b 	bl	80076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	425b      	negs	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff24 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01d      	beq.n	8007302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80072c6:	68fc      	ldr	r4, [r7, #12]
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f7ff fe71 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80072ce:	4603      	mov	r3, r0
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f9 fdfe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fbd3 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80072f4:	60b8      	str	r0, [r7, #8]
 80072f6:	e7e3      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f7ff fbc2 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80072fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007300:	e7de      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fea3 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800730e:	697b      	ldr	r3, [r7, #20]
    }
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa02 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94d 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800733e:	4603      	mov	r3, r0
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9fc 	bl	8007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007348:	4603      	mov	r3, r0
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4619      	mov	r1, r3
 8007366:	2018      	movs	r0, #24
 8007368:	f7f8 ffe2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f933 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007372:	4604      	mov	r4, r0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fcbb 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800737a:	4605      	mov	r5, r0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f9 ff72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007382:	4606      	mov	r6, r0
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7fa fa5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800738a:	4680      	mov	r8, r0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7f9 ff80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007392:	4603      	mov	r3, r0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4643      	mov	r3, r8
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa1c 	bl	80077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe48 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fdd2 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800740c:	4603      	mov	r3, r0
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007416:	b5b0      	push	{r4, r5, r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fa16 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff ff34 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007446:	68bc      	ldr	r4, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fdae 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007454:	4603      	mov	r3, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	f7f9 fd3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb11 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007478:	4603      	mov	r3, r0
 800747a:	e004      	b.n	8007486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff faff 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007484:	4603      	mov	r3, r0
 8007486:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007488:	e7d8      	b.n	800743c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fdde 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074a0:	68b8      	ldr	r0, [r7, #8]
 80074a2:	f000 f9b6 	bl	8007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	f107 021c 	add.w	r2, r7, #28
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa32 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80074c0:	f107 0214 	add.w	r2, r7, #20
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f9b2 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 80074d0:	e027      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f833 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80074dc:	68bc      	ldr	r4, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff8c 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80074e6:	4603      	mov	r3, r0
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f9 fcf2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80074fc:	f107 0214 	add.w	r2, r7, #20
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f994 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800750c:	e009      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7fa fdaa 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	3728      	adds	r7, #40	; 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f019 f8c2 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	return *this;
 800755a:	687b      	ldr	r3, [r7, #4]
      }
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f019 f8af 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007576:	4602      	mov	r2, r0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	return *this;
 800757c:	687b      	ldr	r3, [r7, #4]
      }
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f967 	bl	8007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f019 f817 	bl	8020600 <_ZdlPvj>
      }
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f940 	bl	800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800761e:	f7f8 fe7f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f018 ffe7 	bl	80205fc <_ZdlPv>
	    return;
 800762e:	e005      	b.n	800763c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f9e1 	bl	80079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f945 	bl	80078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007654:	4603      	mov	r3, r0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f927 	bl	80078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800765c:	4603      	mov	r3, r0
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	109b      	asrs	r3, r3, #2
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007698:	f7f8 fe42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f018 ffac 	bl	8020604 <_Znwj>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e006      	b.n	80076be <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9b3 	bl	8007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	bf00      	nop
      { return __a.allocate(__n); }
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f90a 	bl	80078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80076e0:	4603      	mov	r3, r0
      }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
    }
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007708:	f7f8 fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f90a 	bl	800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800771a:	e003      	b.n	8007724 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f91d 	bl	800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007752:	f7f8 fde5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4618      	mov	r0, r3
 8007768:	f018 ff4c 	bl	8020604 <_Znwj>
 800776c:	4603      	mov	r3, r0
 800776e:	e006      	b.n	800777e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9b1 	bl	8007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 800777a:	4603      	mov	r3, r0
 800777c:	bf00      	nop
      { return __a.allocate(__n); }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007786:	b5b0      	push	{r4, r5, r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7f9 fd66 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa f851 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077a0:	4602      	mov	r2, r0
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb f8e6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ae:	f107 0418 	add.w	r4, r7, #24
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fd6d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2008      	movs	r0, #8
 80077be:	f7f8 fdb7 	bl	8000330 <_ZnwjPv>
 80077c2:	4605      	mov	r5, r0
 80077c4:	7f3b      	ldrb	r3, [r7, #28]
 80077c6:	4622      	mov	r2, r4
 80077c8:	7d39      	ldrb	r1, [r7, #20]
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f8ec 	bl	80079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80077d0:	462b      	mov	r3, r5
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}

080077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077da:	b5b0      	push	{r4, r5, r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077ee:	4604      	mov	r4, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fa f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077f6:	4605      	mov	r5, r0
 80077f8:	6a38      	ldr	r0, [r7, #32]
 80077fa:	f7f9 fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077fe:	4603      	mov	r3, r0
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff ffbe 	bl	8007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fc15 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f8c5 	bl	80079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007846:	4603      	mov	r3, r0
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fa ffad 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007854:	4603      	mov	r3, r0
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b9 	bl	80079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800789a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078b6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffea 	bl	8007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078be:	4603      	mov	r3, r0
 80078c0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fa8a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681b      	ldr	r3, [r3, #0]
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ab 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007908:	4604      	mov	r4, r0
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f8a7 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007910:	4605      	mov	r5, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a3 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f8a8 	bl	8007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007924:	4603      	mov	r3, r0
    }
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bdb0      	pop	{r4, r5, r7, pc}

0800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8b5 	bl	8007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8bc 	bl	8007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e7f0      	b.n	8007938 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7fb fadb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb facc 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8007990:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
      { }
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	7239      	strb	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079b6:	463a      	mov	r2, r7
 80079b8:	f88d 4000 	strb.w	r4, [sp]
 80079bc:	462b      	mov	r3, r5
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff ffd7 	bl	8007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f018 fdf3 	bl	8020600 <_ZdlPvj>
      }
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f877 	bl	8007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bf8c      	ite	hi
 8007a3a:	2301      	movhi	r3, #1
 8007a3c:	2300      	movls	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a44:	f018 fea5 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f018 fdd9 	bl	8020604 <_Znwj>
 8007a52:	4603      	mov	r3, r0
 8007a54:	bf00      	nop
      }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	109b      	asrs	r3, r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd06      	ble.n	8007aa0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f018 feec 	bl	8020878 <memmove>
      return __result + __count;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fe0b 	bl	80076ea <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f825 	bl	8007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf8c      	ite	hi
 8007af6:	2301      	movhi	r3, #1
 8007af8:	2300      	movls	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b00:	f018 fe47 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f018 fd78 	bl	8020604 <_Znwj>
 8007b14:	4603      	mov	r3, r0
 8007b16:	bf00      	nop
      }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	05555555 	.word	0x05555555

08007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd96 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <_Z41__static_initialization_and_destruction_0ii>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007b8a:	480c      	ldr	r0, [pc, #48]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b8c:	f7fe fcb0 	bl	80064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007b92:	f7fe fcd3 	bl	800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d105      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007ba6:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ba8:	f7ff ffd4 	bl	8007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bae:	f000 f809 	bl	8007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000110 	.word	0x24000110
 8007bc0:	2400011c 	.word	0x2400011c

08007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fb21 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bde:	461a      	mov	r2, r3
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fb26 	bl	8007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd17 	bl	800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}

08007bfa <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7ff ffb4 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ffac 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8b6 	bl	8007d94 <_ZNSaIP10DigitalOutED1Ev>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f899 	bl	8007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffeb 	bl	8007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c9 	bl	8007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f8a7 	bl	8007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffeb 	bl	8007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007cd6:	f000 f8b6 	bl	8007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007cda:	687c      	ldr	r4, [r7, #4]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007ce2:	f000 f8c1 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2204      	movs	r2, #4
 8007cee:	719a      	strb	r2, [r3, #6]
}
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	24000134 	.word	0x24000134
 8007d00:	24000140 	.word	0x24000140

08007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f808 	bl	8007d2c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d1c:	e002      	b.n	8007d24 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f816 	bl	8007d50 <_ZN10DigitalOut8turn_lowEv>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f013 f8f4 	bl	801af30 <HAL_GPIO_WritePin>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f013 f8e2 	bl	801af30 <HAL_GPIO_WritePin>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8d1 	bl	8007f24 <_ZNSaIP10DigitalOutEC1Ev>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8d9 	bl	8007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8cd 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff24 	bl	8007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8d0 	bl	8007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fefb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 faa6 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8db 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8b7 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff15 	bl	8007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f000 f8d1 	bl	8007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8d7 	bl	800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8fc 	bl	8008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f906 	bl	8008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007e84:	4603      	mov	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f909 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f917 	bl	80080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f91d 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 f80c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ed2:	687c      	ldr	r4, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f912 	bl	8008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 f808 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ef0:	f107 0218 	add.w	r2, r7, #24
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f911 	bl	8008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8ec 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3304      	adds	r3, #4
      }
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	08020d58 	.word	0x08020d58

08007f24 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f939 	bl	80081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
	{ }
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f91c 	bl	80081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f930 	bl	80081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f000 f92b 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fff0 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f000 f92f 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007fc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f936 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007fd6:	e7e9      	b.n	8007fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d011      	beq.n	8008048 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008024:	687c      	ldr	r4, [r7, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685d      	ldr	r5, [r3, #4]
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 f918 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f932 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e00c      	b.n	8008062 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f93b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 f905 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4621      	mov	r1, r4
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f943 	bl	80082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 8008068:	4603      	mov	r3, r0
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9c8 	bl	8008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d2 	bl	8008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9c2 	bl	8008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 80080e2:	bf00      	nop
 80080e4:	4620      	mov	r0, r4
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}

080080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9bf 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f895 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800813c:	4604      	mov	r4, r0
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f7f9 fb7f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008144:	4605      	mov	r5, r0
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f7f9 f8a3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800814c:	4603      	mov	r3, r0
 800814e:	462a      	mov	r2, r5
 8008150:	4621      	mov	r1, r4
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9a0 	bl	8008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008158:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800815a:	69f8      	ldr	r0, [r7, #28]
 800815c:	f000 faee 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008160:	4603      	mov	r3, r0
 8008162:	f107 0010 	add.w	r0, r7, #16
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	f000 f9b8 	bl	80084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8008174:	6939      	ldr	r1, [r7, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faf1 	bl	8008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8008180:	4603      	mov	r3, r0
 8008182:	e00b      	b.n	800819c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f859 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb23 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800819a:	69bb      	ldr	r3, [r7, #24]
      }
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bdb0      	pop	{r4, r5, r7, pc}

080081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d2:	f7f8 f8a5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f018 fa0d 	bl	80205fc <_ZdlPv>
	    return;
 80081e2:	e005      	b.n	80081f0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fdac 	bl	8008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad7 	bl	80087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fae8 	bl	8008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f7ff ffed 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	2004      	movs	r0, #4
 8008290:	f7f8 f84e 	bl	8000330 <_ZnwjPv>
 8008294:	4603      	mov	r3, r0
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ffd7 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7ff ffdd 	bl	8008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fab8 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fab7 	bl	800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 80082fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faf4 	bl	80088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	f107 0214 	add.w	r2, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fafa 	bl	800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008326:	4603      	mov	r3, r0
 8008328:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb08 	bl	8008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008334:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800833a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff8b 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff ffa5 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb18 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008364:	4603      	mov	r3, r0
 8008366:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fb1d 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008370:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4621      	mov	r1, r4
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 faf8 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800837c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3304      	adds	r3, #4
 8008382:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb03 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800838e:	4603      	mov	r3, r0
 8008390:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb08 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 800839a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fae3 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083a6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083b4:	461a      	mov	r2, r3
 80083b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b8:	f7ff fdd4 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
    }
 80083d4:	bf00      	nop
 80083d6:	3730      	adds	r7, #48	; 0x30
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08020c7c 	.word	0x08020c7c

080083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff6b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faef 	bl	80089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb01 	bl	8008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800840c:	4603      	mov	r3, r0
      }
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fddd 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008426:	4604      	mov	r4, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fafc 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800842e:	4602      	mov	r2, r0
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb02 	bl	8008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9c2 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800846e:	bf00      	nop
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb0b 	bl	8008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fb08 	bl	8008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7f8 fed9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f9c3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084bc:	4605      	mov	r5, r0
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f7f8 fee7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb05 	bl	8008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80084d4:	697b      	ldr	r3, [r7, #20]
	}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b08c      	sub	sp, #48	; 0x30
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb22 	bl	8008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80084f8:	69bc      	ldr	r4, [r7, #24]
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f000 fa93 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008500:	4603      	mov	r3, r0
 8008502:	429c      	cmp	r4, r3
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d032      	beq.n	8008576 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 fb22 	bl	8008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800851c:	68bc      	ldr	r4, [r7, #8]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fb27 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb2e 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800852e:	4603      	mov	r3, r0
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcce 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008548:	2300      	movs	r3, #0
	  if (size() > 0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	68b8      	ldr	r0, [r7, #8]
 8008554:	f000 fb0d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008558:	4602      	mov	r2, r0
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 fca1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008566:	e0e5      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb17 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8008574:	e0de      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008576:	68bc      	ldr	r4, [r7, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb03 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008584:	4603      	mov	r3, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	4629      	mov	r1, r5
 800858c:	4620      	mov	r0, r4
 800858e:	f7f8 fca4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d059      	beq.n	800864c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800859c:	69bc      	ldr	r4, [r7, #24]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f000 fb89 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fb7d 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085bc:	4604      	mov	r4, r0
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 fb79 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7f9 fd18 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80085d0:	e0b0      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80085d2:	68bc      	ldr	r4, [r7, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb78 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085e8:	4603      	mov	r3, r0
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f8 fc71 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fe04 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008616:	2300      	movs	r3, #0
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7f9 fc3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800862a:	e083      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800862c:	f107 0218 	add.w	r2, r7, #24
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f9 fce2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800863c:	e07a      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faac 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800864a:	e073      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800864c:	68bc      	ldr	r4, [r7, #8]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa9a 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008656:	4603      	mov	r3, r0
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 fc3a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d059      	beq.n	8008720 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008670:	69bc      	ldr	r4, [r7, #24]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f000 fa7d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008678:	4603      	mov	r3, r0
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429c      	cmp	r4, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f000 fa6f 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7f9 fc03 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086a2:	e047      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086a4:	68bc      	ldr	r4, [r7, #8]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb1e 	bl	8008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fa66 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086be:	4603      	mov	r3, r0
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7f8 fc07 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd9a 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	f107 0218 	add.w	r2, r7, #24
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7f9 fbd5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086fe:	e019      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7f9 fc78 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008710:	e010      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fa42 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800871e:	e009      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008724:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008728:	f107 0318 	add.w	r3, r7, #24
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f9 fca1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fae4 	bl	8008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f000 faeb 	bl	8008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008758:	4603      	mov	r3, r0
      }
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008762:	b5b0      	push	{r4, r5, r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f955 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800877c:	4602      	mov	r2, r0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4293      	cmp	r3, r2
 8008782:	d012      	beq.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008784:	68fc      	ldr	r4, [r7, #12]
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f7ff ffd8 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800878c:	4603      	mov	r3, r0
 800878e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fa 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008796:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7f8 fb9b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087b6:	7df8      	ldrb	r0, [r7, #23]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f017 ff8e 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f805 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80087d6:	693b      	ldr	r3, [r7, #16]
    }
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faab 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800880e:	4604      	mov	r4, r0
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f7ff fe33 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faad 	bl	8008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa96 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 faa7 	bl	8008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 faa9 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800887e:	4604      	mov	r4, r0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fab6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008886:	4603      	mov	r3, r0
 8008888:	1ae2      	subs	r2, r4, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf34      	ite	cc
 8008890:	2301      	movcc	r3, #1
 8008892:	2300      	movcs	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f017 ff7c 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 faa6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088a6:	4604      	mov	r4, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 faa2 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ae:	4603      	mov	r3, r0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 ffc8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80088c2:	4603      	mov	r3, r0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4423      	add	r3, r4
 80088c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa91 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d306      	bcc.n	80088e6 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa79 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d904      	bls.n	80088f0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa72 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e000      	b.n	80088f2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 80088f0:	697b      	ldr	r3, [r7, #20]
      }
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff9e 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f835 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800892a:	4603      	mov	r3, r0
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f000 f830 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008934:	4603      	mov	r3, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	1ae3      	subs	r3, r4, r3
 800893a:	109b      	asrs	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa5a 	bl	8008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800895e:	4603      	mov	r3, r0
 8008960:	e000      	b.n	8008964 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 8008962:	2300      	movs	r3, #0
      }
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800897a:	f88d 4000 	strb.w	r4, [sp]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa64 	bl	8008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800898a:	4603      	mov	r3, r0
      }
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fa5b 	bl	8008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	425b      	negs	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff ff24 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a52:	68fc      	ldr	r4, [r7, #12]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fe71 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7f8 fa38 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f083 0301 	eor.w	r3, r3, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7ff fbd3 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008a80:	60b8      	str	r0, [r7, #8]
 8008a82:	e7e3      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fbc2 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008a8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008a8c:	e7de      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fea3 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008a9a:	697b      	ldr	r3, [r7, #20]
    }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa02 	bl	8008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94d 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f9fc 	bl	8008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2018      	movs	r0, #24
 8008af4:	f7f7 fc1c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f933 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008afe:	4604      	mov	r4, r0
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff fcbb 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b06:	4605      	mov	r5, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fbac 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7f8 fe96 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b16:	4680      	mov	r8, r0
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f7f8 fbba 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4643      	mov	r3, r8
 8008b24:	4632      	mov	r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa1c 	bl	8008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fe48 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdd2 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008ba2:	b5b0      	push	{r4, r5, r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f7ff fa16 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7ff ff34 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008bd2:	68bc      	ldr	r4, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681d      	ldr	r5, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fdae 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008be0:	4603      	mov	r3, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	4629      	mov	r1, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f8 f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb11 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c04:	4603      	mov	r3, r0
 8008c06:	e004      	b.n	8008c12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faff 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c10:	4603      	mov	r3, r0
 8008c12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c14:	e7d8      	b.n	8008bc8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdde 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01d      	beq.n	8008c68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f9b6 	bl	8008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	f107 021c 	add.w	r2, r7, #28
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fa32 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b2 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c5c:	e027      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f833 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c68:	68bc      	ldr	r4, [r7, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff8c 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c72:	4603      	mov	r3, r0
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f8 f92c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008c88:	f107 0214 	add.w	r2, r7, #20
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f994 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c98:	e009      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	f107 0220 	add.w	r2, r7, #32
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7f9 f9e4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f017 fcfc 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ce6:	687b      	ldr	r3, [r7, #4]
      }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f017 fce9 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	return *this;
 8008d08:	687b      	ldr	r3, [r7, #4]
      }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f967 	bl	8008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f017 fc51 	bl	8020600 <_ZdlPvj>
      }
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f000 f940 	bl	800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008daa:	f7f7 fab9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008db4:	69b8      	ldr	r0, [r7, #24]
 8008db6:	f017 fc21 	bl	80205fc <_ZdlPv>
	    return;
 8008dba:	e005      	b.n	8008dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	69b9      	ldr	r1, [r7, #24]
 8008dc0:	69f8      	ldr	r0, [r7, #28]
 8008dc2:	f000 f9e1 	bl	8009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f945 	bl	800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f927 	bl	8009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e24:	f7f7 fa7c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f017 fbe6 	bl	8020604 <_Znwj>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e006      	b.n	8008e4a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9b3 	bl	80091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e46:	4603      	mov	r3, r0
 8008e48:	bf00      	nop
      { return __a.allocate(__n); }
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f90a 	bl	8009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008e6c:	4603      	mov	r3, r0
      }
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    }
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008e94:	f7f7 fa44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f90a 	bl	80090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ea6:	e003      	b.n	8008eb0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008ede:	f7f7 fa1f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f017 fb86 	bl	8020604 <_Znwj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e006      	b.n	8008f0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b1 	bl	8009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	bf00      	nop
      { return __a.allocate(__n); }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f12:	b5b0      	push	{r4, r5, r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7f8 f9a0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fd20 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f3a:	f107 0418 	add.w	r4, r7, #24
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f7f8 f9a7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4619      	mov	r1, r3
 8008f48:	2008      	movs	r0, #8
 8008f4a:	f7f7 f9f1 	bl	8000330 <_ZnwjPv>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	7f3b      	ldrb	r3, [r7, #28]
 8008f52:	4622      	mov	r2, r4
 8008f54:	7d39      	ldrb	r1, [r7, #20]
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f8ec 	bl	8009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}

08008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008f66:	b5b0      	push	{r4, r5, r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f976 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7f8 fc60 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f82:	4605      	mov	r5, r0
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f7f8 f984 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f7ff ffbe 	bl	8008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fc15 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f8c5 	bl	800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7f9 fbe7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8b9 	bl	8009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009000:	4603      	mov	r3, r0
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    }
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009026:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800903e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009042:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffea 	bl	800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800904a:	4603      	mov	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7f9 fec4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800905e:	4603      	mov	r3, r0
 8009060:	681b      	ldr	r3, [r3, #0]
      }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f8ab 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 8009094:	4604      	mov	r4, r0
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8a7 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 800909c:	4605      	mov	r5, r0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090a4:	4602      	mov	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f8a8 	bl	8009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090b0:	4603      	mov	r3, r0
    }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}

080090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00a      	beq.n	80090e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8b5 	bl	800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bc 	bl	8009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	e7f0      	b.n	80090c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f9 ff15 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009114:	4603      	mov	r3, r0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 ff06 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800911c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
      { }
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	7239      	strb	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009142:	463a      	mov	r2, r7
 8009144:	f88d 4000 	strb.w	r4, [sp]
 8009148:	462b      	mov	r3, r5
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffd7 	bl	8009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4619      	mov	r1, r3
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f017 fa2d 	bl	8020600 <_ZdlPvj>
      }
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f877 	bl	80092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091be:	4602      	mov	r2, r0
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091d0:	f017 fadf 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f017 fa13 	bl	8020604 <_Znwj>
 80091de:	4603      	mov	r3, r0
 80091e0:	bf00      	nop
      }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	109b      	asrs	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd06      	ble.n	800922c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f017 fb26 	bl	8020878 <memmove>
      return __result + __count;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
    }
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe0b 	bl	8008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f825 	bl	80092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4293      	cmp	r3, r2
 8009280:	bf8c      	ite	hi
 8009282:	2301      	movhi	r3, #1
 8009284:	2300      	movls	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800928c:	f017 fa81 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4618      	mov	r0, r3
 800929c:	f017 f9b2 	bl	8020604 <_Znwj>
 80092a0:	4603      	mov	r3, r0
 80092a2:	bf00      	nop
      }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	05555555 	.word	0x05555555

080092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd96 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <_Z41__static_initialization_and_destruction_0ii>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	4293      	cmp	r3, r2
 8009314:	d105      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009318:	f7fe fc98 	bl	8007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800931e:	f7fe fcbb 	bl	8007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932e:	4293      	cmp	r3, r2
 8009330:	d105      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009334:	f7ff ffd4 	bl	80092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800933a:	f000 f809 	bl	8009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000134 	.word	0x24000134
 800934c:	24000140 	.word	0x24000140

08009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fb21 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8009368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800936a:	461a      	mov	r2, r3
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fb26 	bl	80089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd17 	bl	8007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}

08009386 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 8009386:	b580      	push	{r7, lr}
 8009388:	af00      	add	r7, sp, #0
 800938a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff ffb4 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 8009394:	bd80      	pop	{r7, pc}

08009396 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 8009396:	b580      	push	{r7, lr}
 8009398:	af00      	add	r7, sp, #0
 800939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff ffac 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa8e 	bl	80098d0 <_ZNSaIP12InputCaptureED1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fa71 	bl	80098b0 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffeb 	bl	80093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 faa1 	bl	8009942 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fa7f 	bl	8009918 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffeb 	bl	800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZN13MovingAverageILm15EfEC1Ev>:
#include "Mini-STLIB/DataStructures/RingBuffer.hpp"
#include <stdint.h>
#include <cmath>

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fa9a 	bl	8009982 <_ZN10RingBufferILm15EfEC1Ev>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 32ff 	mov.w	r2, #4294967295
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	609a      	str	r2, [r3, #8]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	60da      	str	r2, [r3, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3310      	adds	r3, #16
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff ffd7 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	335c      	adds	r3, #92	; 0x5c
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ffd2 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	all_input_captures.push_back(this);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	f107 0314 	add.w	r3, r7, #20
 80094ba:	4619      	mov	r1, r3
 80094bc:	4809      	ldr	r0, [pc, #36]	; (80094e4 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x8c>)
 80094be:	f000 fa86 	bl	80099ce <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 80094c2:	68fc      	ldr	r4, [r7, #12]
 80094c4:	463b      	mov	r3, r7
 80094c6:	4619      	mov	r1, r3
 80094c8:	4807      	ldr	r0, [pc, #28]	; (80094e8 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x90>)
 80094ca:	f000 fa91 	bl	80099f0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80094ce:	4603      	mov	r3, r0
 80094d0:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2202      	movs	r2, #2
 80094d6:	719a      	strb	r2, [r3, #6]
}
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd90      	pop	{r4, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	24000158 	.word	0x24000158
 80094e8:	24000164 	.word	0x24000164

080094ec <_ZN12InputCapture19absolute_differenceEmm>:

uint32_t InputCapture::absolute_difference(uint32_t a, uint32_t b){
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
	int result = a - b;
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	617b      	str	r3, [r7, #20]
	if(result < 0)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	da0a      	bge.n	800951c <_ZN12InputCapture19absolute_differenceEmm+0x30>
		result = a + (timer->Instance->ARR - b) + 1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	1ad2      	subs	r2, r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4413      	add	r3, r2
 8009518:	3301      	adds	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
	return result;
 800951c:	697b      	ldr	r3, [r7, #20]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_ZN12InputCapture17channel_is_activeEv>:

bool InputCapture::channel_is_active(){
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
	if(channel == TIM_CHANNEL_1)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <_ZN12InputCapture17channel_is_activeEv+0x26>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009542:	7f1b      	ldrb	r3, [r3, #28]
 8009544:	2b01      	cmp	r3, #1
 8009546:	bf0c      	ite	eq
 8009548:	2301      	moveq	r3, #1
 800954a:	2300      	movne	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e02d      	b.n	80095ac <_ZN12InputCapture17channel_is_activeEv+0x82>
	if(channel == TIM_CHANNEL_2)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009556:	2b04      	cmp	r3, #4
 8009558:	d109      	bne.n	800956e <_ZN12InputCapture17channel_is_activeEv+0x44>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009560:	7f1b      	ldrb	r3, [r3, #28]
 8009562:	2b02      	cmp	r3, #2
 8009564:	bf0c      	ite	eq
 8009566:	2301      	moveq	r3, #1
 8009568:	2300      	movne	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	e01e      	b.n	80095ac <_ZN12InputCapture17channel_is_activeEv+0x82>
	if(channel == TIM_CHANNEL_3)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009574:	2b08      	cmp	r3, #8
 8009576:	d109      	bne.n	800958c <_ZN12InputCapture17channel_is_activeEv+0x62>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_3;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800957e:	7f1b      	ldrb	r3, [r3, #28]
 8009580:	2b04      	cmp	r3, #4
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	e00f      	b.n	80095ac <_ZN12InputCapture17channel_is_activeEv+0x82>
	if(channel == TIM_CHANNEL_4)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009592:	2b0c      	cmp	r3, #12
 8009594:	d109      	bne.n	80095aa <_ZN12InputCapture17channel_is_activeEv+0x80>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800959c:	7f1b      	ldrb	r3, [r3, #28]
 800959e:	2b08      	cmp	r3, #8
 80095a0:	bf0c      	ite	eq
 80095a2:	2301      	moveq	r3, #1
 80095a4:	2300      	movne	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	e000      	b.n	80095ac <_ZN12InputCapture17channel_is_activeEv+0x82>
	return false;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <_ZN12InputCapture9interruptEv>:

uint32_t INDEX = 0;
void InputCapture::interrupt() {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

	if(channel_is_active()){
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ffb2 	bl	800952a <_ZN12InputCapture17channel_is_activeEv>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8088 	beq.w	80096de <_ZN12InputCapture9interruptEv+0x126>
		GPIO_PinState state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f011 fc8d 	bl	801af00 <HAL_GPIO_ReadPin>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

		// Capture first rising edge
		if(rising_edge == -1 && falling_edge == -1 && state ==  GPIO_PIN_SET){
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d116      	bne.n	8009622 <_ZN12InputCapture9interruptEv+0x6a>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d111      	bne.n	8009622 <_ZN12InputCapture9interruptEv+0x6a>
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d10e      	bne.n	8009622 <_ZN12InputCapture9interruptEv+0x6a>
			rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f016 f8c0 	bl	801f798 <HAL_TIM_ReadCapturedValue>
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]
			return;
 8009620:	e05d      	b.n	80096de <_ZN12InputCapture9interruptEv+0x126>
		}

		// Capture falling edge
		if(rising_edge != -1 && falling_edge == -1 && state ==  GPIO_PIN_RESET){
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d016      	beq.n	800965a <_ZN12InputCapture9interruptEv+0xa2>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009634:	d111      	bne.n	800965a <_ZN12InputCapture9interruptEv+0xa2>
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10e      	bne.n	800965a <_ZN12InputCapture9interruptEv+0xa2>
			falling_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f016 f8a4 	bl	801f798 <HAL_TIM_ReadCapturedValue>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	605a      	str	r2, [r3, #4]
			return;
 8009658:	e041      	b.n	80096de <_ZN12InputCapture9interruptEv+0x126>
		}

		// Capture second rising edge
		if(rising_edge != -1 && falling_edge != -1 && state ==  GPIO_PIN_SET){
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d03c      	beq.n	80096de <_ZN12InputCapture9interruptEv+0x126>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d037      	beq.n	80096de <_ZN12InputCapture9interruptEv+0x126>
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d134      	bne.n	80096de <_ZN12InputCapture9interruptEv+0x126>
			duty_count 	 = absolute_difference(falling_edge, rising_edge);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4619      	mov	r1, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ff33 	bl	80094ec <_ZN12InputCapture19absolute_differenceEmm>
 8009686:	4602      	mov	r2, r0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			uint32_t new_rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800969a:	4619      	mov	r1, r3
 800969c:	4610      	mov	r0, r2
 800969e:	f016 f87b 	bl	801f798 <HAL_TIM_ReadCapturedValue>
 80096a2:	60b8      	str	r0, [r7, #8]
			freq_count 	 = absolute_difference(new_rising_edge, rising_edge);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff ff1d 	bl	80094ec <_ZN12InputCapture19absolute_differenceEmm>
 80096b2:	4602      	mov	r2, r0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			duty_count = INDEX;
 80096ba:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <_ZN12InputCapture9interruptEv+0x12c>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			rising_edge	 = -1;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	601a      	str	r2, [r3, #0]
			falling_edge = -1;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	605a      	str	r2, [r3, #4]
			INDEX ++;
 80096d4:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <_ZN12InputCapture9interruptEv+0x12c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	4a02      	ldr	r2, [pc, #8]	; (80096e4 <_ZN12InputCapture9interruptEv+0x12c>)
 80096dc:	6013      	str	r3, [r2, #0]
		}
	}

}
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	2400017c 	.word	0x2400017c

080096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80096fe:	b590      	push	{r4, r7, lr}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ffed 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800970e:	4603      	mov	r3, r0
 8009710:	681c      	ldr	r4, [r3, #0]
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f7ff ffe8 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009718:	4603      	mov	r3, r0
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	429c      	cmp	r4, r3
 800971e:	bf0c      	ite	eq
 8009720:	2301      	moveq	r3, #1
 8009722:	2300      	movne	r3, #0
 8009724:	b2db      	uxtb	r3, r3
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bd90      	pop	{r4, r7, pc}

0800972e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	1d1a      	adds	r2, r3, #4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	601a      	str	r2, [r3, #0]
	return *this;
 8009740:	687b      	ldr	r3, [r7, #4]
      }
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 800976e:	4b15      	ldr	r3, [pc, #84]	; (80097c4 <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f99a 	bl	8009aac <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009778:	4603      	mov	r3, r0
 800977a:	607b      	str	r3, [r7, #4]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f9a5 	bl	8009acc <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009782:	4603      	mov	r3, r0
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	463a      	mov	r2, r7
 8009788:	1d3b      	adds	r3, r7, #4
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff ffb6 	bl	80096fe <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8009792:	4603      	mov	r3, r0
 8009794:	f083 0301 	eor.w	r3, r3, #1
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 800979e:	1d3b      	adds	r3, r7, #4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff ffd4 	bl	800974e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80097a6:	4603      	mov	r3, r0
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f000 f847 	bl	8009840 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff ffba 	bl	800972e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80097ba:	e7e4      	b.n	8009786 <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 80097bc:	bf00      	nop
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	24000158 	.word	0x24000158

080097c8 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 80097d0:	4b1a      	ldr	r3, [pc, #104]	; (800983c <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x74>)
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	f000 f969 	bl	8009aac <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 80097da:	4603      	mov	r3, r0
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	6978      	ldr	r0, [r7, #20]
 80097e0:	f000 f974 	bl	8009acc <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 80097e4:	4603      	mov	r3, r0
 80097e6:	60bb      	str	r3, [r7, #8]
 80097e8:	f107 0208 	add.w	r2, r7, #8
 80097ec:	f107 030c 	add.w	r3, r7, #12
 80097f0:	4611      	mov	r1, r2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff ff83 	bl	80096fe <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f083 0301 	eor.w	r3, r3, #1
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d016      	beq.n	8009832 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x6a>
 8009804:	f107 030c 	add.w	r3, r7, #12
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff ffa0 	bl	800974e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800980e:	4603      	mov	r3, r0
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	d102      	bne.n	8009826 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5e>
			input_capture->interrupt();
 8009820:	6938      	ldr	r0, [r7, #16]
 8009822:	f7ff fec9 	bl	80095b8 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 8009826:	f107 030c 	add.w	r3, r7, #12
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff ff7f 	bl	800972e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009830:	e7da      	b.n	80097e8 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 8009832:	bf00      	nop
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	24000158 	.word	0x24000158

08009840 <_ZN12InputCapture5startEv>:
	duty_count = 0;
	freq_count = 0;
	duty = 0;
}

void InputCapture::start(){
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, channel);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f015 fa78 	bl	801ed4c <HAL_TIM_IC_Start_IT>
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <_ZN12InputCapture8get_dutyEv>:
void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}

float DUTY = 0.0;
float InputCapture::get_duty(){
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	duty = (float) (duty_count) / 13800 * 100;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800987a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80098a8 <_ZN12InputCapture8get_dutyEv+0x44>
 800987e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009882:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80098ac <_ZN12InputCapture8get_dutyEv+0x48>
 8009886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	return duty;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009896:	ee07 3a90 	vmov	s15, r3
}
 800989a:	eeb0 0a67 	vmov.f32	s0, s15
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	4657a000 	.word	0x4657a000
 80098ac:	42c80000 	.word	0x42c80000

080098b0 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f918 	bl	8009aee <_ZNSaIP12InputCaptureEC1Ev>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f920 	bl	8009b06 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80098fe:	461a      	mov	r2, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f914 	bl	8009b2e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fd4c 	bl	80093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f917 	bl	8009b54 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f7f7 f95d 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7f6 fd08 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f922 	bl	8009baa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009966:	4603      	mov	r3, r0
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f8fe 	bl	8009b6c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff fd3d 	bl	80093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <_ZN10RingBufferILm15EfEC1Ev>:
		return value;
	}

public:

	RingBuffer(){
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b0e      	cmp	r3, #14
 80099a4:	dc0c      	bgt.n	80099c0 <_ZN10RingBufferILm15EfEC1Ev+0x3e>
			buffer[i] = 0;
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3302      	adds	r3, #2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	3304      	adds	r3, #4
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e7ef      	b.n	80099a0 <_ZN10RingBufferILm15EfEC1Ev+0x1e>
		}
	}
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80099d8:	6838      	ldr	r0, [r7, #0]
 80099da:	f000 f8f2 	bl	8009bc2 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 80099de:	4603      	mov	r3, r0
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f8f8 	bl	8009bd8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b08b      	sub	sp, #44	; 0x2c
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f91d 	bl	8009c3c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8009a02:	4603      	mov	r3, r0
 8009a04:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f927 	bl	8009c5a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	f107 020c 	add.w	r2, r7, #12
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f92a 	bl	8009c74 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d114      	bne.n	8009a50 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f938 	bl	8009c9c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681c      	ldr	r4, [r3, #0]
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f93e 	bl	8009cb6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	f107 0310 	add.w	r3, r7, #16
 8009a42:	4621      	mov	r1, r4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7f7 fa48 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e000      	b.n	8009a56 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8009a54:	2300      	movs	r3, #0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01b      	beq.n	8009a92 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009a5a:	687c      	ldr	r4, [r7, #4]
 8009a5c:	f107 0208 	add.w	r2, r7, #8
 8009a60:	f107 0314 	add.w	r3, r7, #20
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 f933 	bl	8009cd2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8009a6c:	f107 0318 	add.w	r3, r7, #24
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f7 fa44 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009a78:	f107 0218 	add.w	r2, r7, #24
 8009a7c:	f107 031c 	add.w	r3, r7, #28
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8009a86:	6979      	ldr	r1, [r7, #20]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 f932 	bl	8009cf2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f90d 	bl	8009cb6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	3304      	adds	r3, #4
      }
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3724      	adds	r7, #36	; 0x24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd90      	pop	{r4, r7, pc}
 8009aa8:	08020d58 	.word	0x08020d58

08009aac <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	f107 030c 	add.w	r3, r7, #12
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f956 	bl	8009d6e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	1d1a      	adds	r2, r3, #4
 8009ad8:	f107 030c 	add.w	r3, r7, #12
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f945 	bl	8009d6e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f949 	bl	8009d8e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	605a      	str	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	609a      	str	r2, [r3, #8]
	{ }
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
	if (__p)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f92c 	bl	8009da4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f940 	bl	8009de2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d012      	beq.n	8009ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009b7c:	6838      	ldr	r0, [r7, #0]
 8009b7e:	f000 f93b 	bl	8009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009b82:	4603      	mov	r3, r0
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fff0 	bl	8009b6c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009b8c:	6838      	ldr	r0, [r7, #0]
 8009b8e:	f000 f93f 	bl	8009e10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009b92:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f946 	bl	8009e28 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009ba0:	e7e9      	b.n	8009b76 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009bd8:	b5b0      	push	{r4, r5, r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d011      	beq.n	8009c12 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009bee:	687c      	ldr	r4, [r7, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685d      	ldr	r5, [r3, #4]
 8009bf4:	6838      	ldr	r0, [r7, #0]
 8009bf6:	f000 f928 	bl	8009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 f942 	bl	8009e8a <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	605a      	str	r2, [r3, #4]
 8009c10:	e00c      	b.n	8009c2c <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff ff5a 	bl	8009acc <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	6838      	ldr	r0, [r7, #0]
 8009c1c:	f000 f915 	bl	8009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	4621      	mov	r1, r4
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f942 	bl	8009eb0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f9bb 	bl	8009fa8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009c32:	4603      	mov	r3, r0
      }
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bdb0      	pop	{r4, r5, r7, pc}

08009c3c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f9c7 	bl	8009fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f9d1 	bl	800a00c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	bf0c      	ite	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	2300      	movne	r3, #0
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f9c1 	bl	800a02e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009cac:	bf00      	nop
 8009cae:	4620      	mov	r0, r4
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}

08009cb6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 f9be 	bl	800a044 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009cf2:	b5b0      	push	{r4, r5, r7, lr}
 8009cf4:	b088      	sub	sp, #32
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7f7 fab0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009d06:	4604      	mov	r4, r0
 8009d08:	6838      	ldr	r0, [r7, #0]
 8009d0a:	f7f7 fd9a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009d0e:	4605      	mov	r5, r0
 8009d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d12:	f7f7 fabe 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d16:	4603      	mov	r3, r0
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f99f 	bl	800a060 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009d22:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009d24:	69f8      	ldr	r0, [r7, #28]
 8009d26:	f000 faed 	bl	800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f107 0010 	add.w	r0, r7, #16
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	68f9      	ldr	r1, [r7, #12]
 8009d34:	f000 f9b7 	bl	800a0a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d007      	beq.n	8009d4e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009d3e:	6939      	ldr	r1, [r7, #16]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 faf0 	bl	800a32a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	e00b      	b.n	8009d66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009d4e:	69f9      	ldr	r1, [r7, #28]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 f869 	bl	8009e28 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	f107 0318 	add.w	r3, r7, #24
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fb22 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009d64:	69bb      	ldr	r3, [r7, #24]
      }
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bdb0      	pop	{r4, r5, r7, pc}

08009d6e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	61fb      	str	r3, [r7, #28]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009dbc:	f7f6 fab0 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009dc6:	69b8      	ldr	r0, [r7, #24]
 8009dc8:	f016 fc18 	bl	80205fc <_ZdlPv>
	    return;
 8009dcc:	e005      	b.n	8009dda <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	69b9      	ldr	r1, [r7, #24]
 8009dd2:	69f8      	ldr	r0, [r7, #28]
 8009dd4:	f000 fd64 	bl	800a8a0 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fac6 	bl	800a3c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fad7 	bl	800a3f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009e6a:	6838      	ldr	r0, [r7, #0]
 8009e6c:	f7ff ffed 	bl	8009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e70:	4603      	mov	r3, r0
 8009e72:	681c      	ldr	r4, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4619      	mov	r1, r3
 8009e78:	2004      	movs	r0, #4
 8009e7a:	f7f6 fa59 	bl	8000330 <_ZnwjPv>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	601c      	str	r4, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd90      	pop	{r4, r7, pc}

08009e8a <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff ffd7 	bl	8009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	68b8      	ldr	r0, [r7, #8]
 8009ea2:	f7ff ffdd 	bl	8009e60 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009ea6:	bf00      	nop
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009eb0:	b5b0      	push	{r4, r5, r7, lr}
 8009eb2:	b08c      	sub	sp, #48	; 0x30
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009ebc:	4a39      	ldr	r2, [pc, #228]	; (8009fa4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 faa7 	bl	800a414 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fde9 	bl	8009aac <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009eda:	4603      	mov	r3, r0
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	f107 0214 	add.w	r2, r7, #20
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fada 	bl	800a4a2 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fae8 	bl	800a4cc <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009efc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009f02:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	18d5      	adds	r5, r2, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff9c 	bl	8009e4a <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f12:	4603      	mov	r3, r0
 8009f14:	461a      	mov	r2, r3
 8009f16:	4629      	mov	r1, r5
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7ff ffb6 	bl	8009e8a <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009f22:	f107 0308 	add.w	r3, r7, #8
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fbde 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 faf2 	bl	800a51c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009f38:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f40:	f000 fad8 	bl	800a4f4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009f44:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009f4c:	f107 0308 	add.w	r3, r7, #8
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fbc9 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009f56:	4603      	mov	r3, r0
 8009f58:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fadd 	bl	800a51c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009f62:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fac3 	bl	800a4f4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009f6e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8009f70:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f80:	f7ff fdd5 	bl	8009b2e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	441a      	add	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	609a      	str	r2, [r3, #8]
    }
 8009f9c:	bf00      	nop
 8009f9e:	3730      	adds	r7, #48	; 0x30
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fa4:	08020c98 	.word	0x08020c98

08009fa8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff fd8b 	bl	8009acc <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fac4 	bl	800a54e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fbbd 	bl	800974e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009fd4:	4603      	mov	r3, r0
      }
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8009fde:	b590      	push	{r4, r7, lr}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff fdde 	bl	8009baa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fac5 	bl	800a580 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 facb 	bl	800a598 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800a002:	4603      	mov	r3, r0
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd90      	pop	{r4, r7, pc}

0800a00c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	1d1a      	adds	r2, r3, #4
 800a018:	f107 030c 	add.w	r3, r7, #12
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f9c2 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800a036:	bf00      	nop
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3310      	adds	r3, #16
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fad4 	bl	800a5fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a056:	4603      	mov	r3, r0
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a060:	b5b0      	push	{r4, r5, r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fad1 	bl	800a616 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800a074:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a076:	68b8      	ldr	r0, [r7, #8]
 800a078:	f7f7 f8f5 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a07c:	4604      	mov	r4, r0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7f7 fbdf 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a084:	4605      	mov	r5, r0
 800a086:	6838      	ldr	r0, [r7, #0]
 800a088:	f7f7 f903 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a08c:	4603      	mov	r3, r0
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	462b      	mov	r3, r5
 800a092:	4622      	mov	r2, r4
 800a094:	6979      	ldr	r1, [r7, #20]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 face 	bl	800a638 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800a09c:	697b      	ldr	r3, [r7, #20]
	}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bdb0      	pop	{r4, r5, r7, pc}

0800a0a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a0a6:	b5b0      	push	{r4, r5, r7, lr}
 800a0a8:	b08c      	sub	sp, #48	; 0x30
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800a0b4:	1d3b      	adds	r3, r7, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 faeb 	bl	800a692 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800a0c0:	69bc      	ldr	r4, [r7, #24]
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f000 fa5c 	bl	800a580 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	bf0c      	ite	eq
 800a0ce:	2301      	moveq	r3, #1
 800a0d0:	2300      	movne	r3, #0
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d032      	beq.n	800a13e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f000 faeb 	bl	800a6b4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 800a0de:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d015      	beq.n	800a110 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a0e4:	68bc      	ldr	r4, [r7, #8]
 800a0e6:	68b8      	ldr	r0, [r7, #8]
 800a0e8:	f000 faf0 	bl	800a6cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 faf7 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	4620      	mov	r0, r4
 800a102:	f7f6 feea 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 800a110:	2300      	movs	r3, #0
	  if (size() > 0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00c      	beq.n	800a130 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800a116:	2300      	movs	r3, #0
 800a118:	61fb      	str	r3, [r7, #28]
 800a11a:	68b8      	ldr	r0, [r7, #8]
 800a11c:	f000 fad6 	bl	800a6cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a120:	4602      	mov	r2, r0
 800a122:	f107 031c 	add.w	r3, r7, #28
 800a126:	4619      	mov	r1, r3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7f7 febd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a12e:	e0e5      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fae0 	bl	800a6fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a13c:	e0de      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800a13e:	68bc      	ldr	r4, [r7, #8]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681d      	ldr	r5, [r3, #0]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 facc 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a14c:	4603      	mov	r3, r0
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	4629      	mov	r1, r5
 800a154:	4620      	mov	r0, r4
 800a156:	f7f6 fec0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d059      	beq.n	800a214 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a164:	69bc      	ldr	r4, [r7, #24]
 800a166:	68b8      	ldr	r0, [r7, #8]
 800a168:	f000 fb52 	bl	800a810 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a16c:	4603      	mov	r3, r0
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	429c      	cmp	r4, r3
 800a172:	bf0c      	ite	eq
 800a174:	2301      	moveq	r3, #1
 800a176:	2300      	movne	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a17e:	68b8      	ldr	r0, [r7, #8]
 800a180:	f000 fb46 	bl	800a810 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a184:	4604      	mov	r4, r0
 800a186:	68b8      	ldr	r0, [r7, #8]
 800a188:	f000 fb42 	bl	800a810 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	4621      	mov	r1, r4
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7f7 ff34 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a198:	e0b0      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a19a:	68bc      	ldr	r4, [r7, #8]
 800a19c:	f107 0314 	add.w	r3, r7, #20
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fb41 	bl	800a828 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fa9a 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f7f6 fe8d 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d01f      	beq.n	800a206 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fe15 	bl	8009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf0c      	ite	eq
 800a1d4:	2301      	moveq	r3, #1
 800a1d6:	2300      	movne	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	623b      	str	r3, [r7, #32]
 800a1e2:	f107 0214 	add.w	r2, r7, #20
 800a1e6:	f107 0320 	add.w	r3, r7, #32
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7f7 fe5b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a1f2:	e083      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a1f4:	f107 0218 	add.w	r2, r7, #24
 800a1f8:	f107 0318 	add.w	r3, r7, #24
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7f7 fefe 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a204:	e07a      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fa75 	bl	800a6fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a212:	e073      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a214:	68bc      	ldr	r4, [r7, #8]
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fa63 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a21e:	4603      	mov	r3, r0
 800a220:	6819      	ldr	r1, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	4620      	mov	r0, r4
 800a22a:	f7f6 fe56 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d059      	beq.n	800a2e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a238:	69bc      	ldr	r4, [r7, #24]
 800a23a:	68b8      	ldr	r0, [r7, #8]
 800a23c:	f000 fa46 	bl	800a6cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a240:	4603      	mov	r3, r0
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	429c      	cmp	r4, r3
 800a246:	bf0c      	ite	eq
 800a248:	2301      	moveq	r3, #1
 800a24a:	2300      	movne	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00c      	beq.n	800a26c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a252:	2300      	movs	r3, #0
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
 800a256:	68b8      	ldr	r0, [r7, #8]
 800a258:	f000 fa38 	bl	800a6cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a25c:	4602      	mov	r2, r0
 800a25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a262:	4619      	mov	r1, r3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7f7 fe1f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a26a:	e047      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a26c:	68bc      	ldr	r4, [r7, #8]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	f107 0310 	add.w	r3, r7, #16
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fae7 	bl	800a84a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a27c:	4603      	mov	r3, r0
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fa2f 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a286:	4603      	mov	r3, r0
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	4629      	mov	r1, r5
 800a28e:	4620      	mov	r0, r4
 800a290:	f7f6 fe23 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01f      	beq.n	800a2da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fdab 	bl	8009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bf0c      	ite	eq
 800a2a8:	2301      	moveq	r3, #1
 800a2aa:	2300      	movne	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2b6:	f107 0218 	add.w	r2, r7, #24
 800a2ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7f7 fdf1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a2c6:	e019      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a2c8:	f107 0210 	add.w	r2, r7, #16
 800a2cc:	f107 0310 	add.w	r3, r7, #16
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7f7 fe94 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a2d8:	e010      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fa0b 	bl	800a6fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a2e6:	e009      	b.n	800a2fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a2f0:	f107 0318 	add.w	r3, r7, #24
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7f7 febd 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	3730      	adds	r7, #48	; 0x30
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}

0800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 faad 	bl	800a86c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a312:	4602      	mov	r2, r0
 800a314:	f107 030c 	add.w	r3, r7, #12
 800a318:	4611      	mov	r1, r2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 fab4 	bl	800a888 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a320:	4603      	mov	r3, r0
      }
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a32a:	b5b0      	push	{r4, r5, r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d119      	bne.n	800a372 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f91e 	bl	800a580 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4293      	cmp	r3, r2
 800a34a:	d012      	beq.n	800a372 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a34c:	68fc      	ldr	r4, [r7, #12]
 800a34e:	6838      	ldr	r0, [r7, #0]
 800a350:	f7ff ffd8 	bl	800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a354:	4603      	mov	r3, r0
 800a356:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f9c3 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a35e:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	4629      	mov	r1, r5
 800a366:	4620      	mov	r0, r4
 800a368:	f7f6 fdb7 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a376:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a378:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a37e:	7df8      	ldrb	r0, [r7, #23]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	f016 f9aa 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a392:	f107 0310 	add.w	r3, r7, #16
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f805 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a39e:	693b      	ldr	r3, [r7, #16]
    }
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a3c6:	b590      	push	{r4, r7, lr}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fa74 	bl	800a8be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	6838      	ldr	r0, [r7, #0]
 800a3da:	f7ff fe33 	bl	800a044 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fa76 	bl	800a8d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd90      	pop	{r4, r7, pc}

0800a3f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa5f 	bl	800a8be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a400:	4603      	mov	r3, r0
 800a402:	2201      	movs	r2, #1
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fa70 	bl	800a8ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 fa82 	bl	800a92a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a426:	4604      	mov	r4, r0
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 fa8f 	bl	800a94c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a42e:	4603      	mov	r3, r0
 800a430:	1ae2      	subs	r2, r4, r3
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	429a      	cmp	r2, r3
 800a436:	bf34      	ite	cc
 800a438:	2301      	movcc	r3, #1
 800a43a:	2300      	movcs	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f016 f9a8 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 fa7f 	bl	800a94c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a44e:	4604      	mov	r4, r0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fa7b 	bl	800a94c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a456:	4603      	mov	r3, r0
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	f107 0208 	add.w	r2, r7, #8
 800a45e:	f107 0310 	add.w	r3, r7, #16
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f7f8 f9f4 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a46a:	4603      	mov	r3, r0
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4423      	add	r3, r4
 800a470:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fa6a 	bl	800a94c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a478:	4602      	mov	r2, r0
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d306      	bcc.n	800a48e <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 fa52 	bl	800a92a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a486:	4602      	mov	r2, r0
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d904      	bls.n	800a498 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fa4b 	bl	800a92a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a494:	4603      	mov	r3, r0
 800a496:	e000      	b.n	800a49a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a498:	697b      	ldr	r3, [r7, #20]
      }
 800a49a:	4618      	mov	r0, r3
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd90      	pop	{r4, r7, pc}

0800a4a2 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a4a2:	b590      	push	{r4, r7, lr}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff f91b 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	6838      	ldr	r0, [r7, #0]
 800a4b8:	f7ff f916 	bl	80096e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	1ae3      	subs	r3, r4, r3
 800a4c2:	109b      	asrs	r3, r3, #2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}

0800a4cc <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fa43 	bl	800a96c <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	e000      	b.n	800a4ec <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a4ea:	2300      	movs	r3, #0
      }
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a4f4:	b590      	push	{r4, r7, lr}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a502:	f88d 4000 	strb.w	r4, [sp]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	68b9      	ldr	r1, [r7, #8]
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 fa4d 	bl	800a9ac <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a512:	4603      	mov	r3, r0
      }
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd90      	pop	{r4, r7, pc}

0800a51c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fa4f 	bl	800a9e4 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	425b      	negs	r3, r3
 800a562:	4413      	add	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	f107 020c 	add.w	r2, r7, #12
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fbfc 	bl	8009d6e <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4618      	mov	r0, r3
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01d      	beq.n	800a5e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a5ac:	68fc      	ldr	r4, [r7, #12]
 800a5ae:	68b8      	ldr	r0, [r7, #8]
 800a5b0:	f7ff fea8 	bl	800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	6819      	ldr	r1, [r3, #0]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7f6 fc8b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f083 0301 	eor.w	r3, r3, #1
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d006      	beq.n	800a5de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	68b8      	ldr	r0, [r7, #8]
 800a5d6:	f7ff fc1b 	bl	8009e10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a5da:	60b8      	str	r0, [r7, #8]
 800a5dc:	e7e3      	b.n	800a5a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a5de:	68b8      	ldr	r0, [r7, #8]
 800a5e0:	f7ff fc0a 	bl	8009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a5e4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a5e6:	e7de      	b.n	800a5a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a5e8:	f107 0314 	add.w	r3, r7, #20
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff feda 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a5f4:	697b      	ldr	r3, [r7, #20]
    }
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd90      	pop	{r4, r7, pc}

0800a5fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fa02 	bl	800aa10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a60c:	4603      	mov	r3, r0
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f94d 	bl	800a8be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a624:	4603      	mov	r3, r0
 800a626:	2101      	movs	r1, #1
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f9fc 	bl	800aa26 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a62e:	4603      	mov	r3, r0
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	b086      	sub	sp, #24
 800a63e:	af02      	add	r7, sp, #8
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4619      	mov	r1, r3
 800a64c:	2018      	movs	r0, #24
 800a64e:	f7f5 fe6f 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f933 	bl	800a8be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a658:	4604      	mov	r4, r0
 800a65a:	68b8      	ldr	r0, [r7, #8]
 800a65c:	f7ff fcf2 	bl	800a044 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a660:	4605      	mov	r5, r0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7f6 fdff 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a668:	4606      	mov	r6, r0
 800a66a:	6838      	ldr	r0, [r7, #0]
 800a66c:	f7f7 f8e9 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a670:	4680      	mov	r8, r0
 800a672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a674:	f7f6 fe0d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a678:	4603      	mov	r3, r0
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4643      	mov	r3, r8
 800a67e:	4632      	mov	r2, r6
 800a680:	4629      	mov	r1, r5
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fa1c 	bl	800aac0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a692 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fe7f 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3310      	adds	r3, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fe09 	bl	800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a6fc:	b5b0      	push	{r4, r5, r7, lr}
 800a6fe:	b08a      	sub	sp, #40	; 0x28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a708:	68b8      	ldr	r0, [r7, #8]
 800a70a:	f7ff fa4e 	bl	8009baa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a70e:	4603      	mov	r3, r0
 800a710:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a712:	68b8      	ldr	r0, [r7, #8]
 800a714:	f7ff ff34 	bl	800a580 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a718:	4603      	mov	r3, r0
 800a71a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d023      	beq.n	800a770 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a72c:	68bc      	ldr	r4, [r7, #8]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681d      	ldr	r5, [r3, #0]
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fde5 	bl	800a304 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a73a:	4603      	mov	r3, r0
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f7f6 fbc9 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a748:	4603      	mov	r3, r0
 800a74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a74e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff fb59 	bl	8009e10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a75e:	4603      	mov	r3, r0
 800a760:	e004      	b.n	800a76c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff fb47 	bl	8009df8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a76a:	4603      	mov	r3, r0
 800a76c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a76e:	e7d8      	b.n	800a722 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	f107 0310 	add.w	r3, r7, #16
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fe15 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01d      	beq.n	800a7c2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a786:	68b8      	ldr	r0, [r7, #8]
 800a788:	f000 f9b6 	bl	800aaf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a78c:	4603      	mov	r3, r0
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	f107 021c 	add.w	r2, r7, #28
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff fa6a 	bl	8009c74 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d008      	beq.n	800a7b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a7a6:	f107 0214 	add.w	r2, r7, #20
 800a7aa:	f107 0318 	add.w	r3, r7, #24
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f9b2 	bl	800ab1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a7b6:	e027      	b.n	800a808 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a7b8:	f107 0310 	add.w	r3, r7, #16
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 f833 	bl	800a828 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a7c2:	68bc      	ldr	r4, [r7, #8]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff ff8c 	bl	800a6e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f7f6 fb7f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d008      	beq.n	800a7f4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a7e2:	f107 0214 	add.w	r2, r7, #20
 800a7e6:	f107 0318 	add.w	r3, r7, #24
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f994 	bl	800ab1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a7f2:	e009      	b.n	800a808 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	f107 0220 	add.w	r2, r7, #32
 800a7fc:	f107 0310 	add.w	r3, r7, #16
 800a800:	4619      	mov	r1, r3
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7f7 fc37 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	3728      	adds	r7, #40	; 0x28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bdb0      	pop	{r4, r5, r7, pc}

0800a810 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	330c      	adds	r3, #12
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4618      	mov	r0, r3
 800a836:	f015 ff4f 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a83a:	4602      	mov	r2, r0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
	return *this;
 800a840:	687b      	ldr	r3, [r7, #4]
      }
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f015 ff3c 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a85c:	4602      	mov	r2, r0
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	601a      	str	r2, [r3, #0]
	return *this;
 800a862:	687b      	ldr	r3, [r7, #4]
      }
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3310      	adds	r3, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f967 	bl	800ab4c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a87e:	4603      	mov	r3, r0
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f015 fea4 	bl	8020600 <_ZdlPvj>
      }
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a8de:	6838      	ldr	r0, [r7, #0]
 800a8e0:	f000 f940 	bl	800ab64 <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	61fb      	str	r3, [r7, #28]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a904:	f7f5 fd0c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a90e:	69b8      	ldr	r0, [r7, #24]
 800a910:	f015 fe74 	bl	80205fc <_ZdlPv>
	    return;
 800a914:	e005      	b.n	800a922 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	69b9      	ldr	r1, [r7, #24]
 800a91a:	69f8      	ldr	r0, [r7, #28]
 800a91c:	f000 f9e1 	bl	800ace2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	3720      	adds	r7, #32
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 f945 	bl	800abc4 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a93a:	4603      	mov	r3, r0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 f927 	bl	800ab90 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800a942:	4603      	mov	r3, r0
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	109b      	asrs	r3, r3, #2
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a97e:	f7f5 fccf 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f015 fe39 	bl	8020604 <_Znwj>
 800a992:	4603      	mov	r3, r0
 800a994:	e006      	b.n	800a9a4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a996:	2200      	movs	r2, #0
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 f9b3 	bl	800ad06 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	bf00      	nop
      { return __a.allocate(__n); }
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	68b9      	ldr	r1, [r7, #8]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f90a 	bl	800abda <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800a9c6:	4603      	mov	r3, r0
      }
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    }
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a9ee:	f7f5 fc97 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f90a 	bl	800ac14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800aa00:	e003      	b.n	800aa0a <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f91d 	bl	800ac44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800aa38:	f7f5 fc72 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	4613      	mov	r3, r2
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	4413      	add	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f015 fdd9 	bl	8020604 <_Znwj>
 800aa52:	4603      	mov	r3, r0
 800aa54:	e006      	b.n	800aa64 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800aa56:	2200      	movs	r2, #0
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 f9b1 	bl	800adc2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800aa60:	4603      	mov	r3, r0
 800aa62:	bf00      	nop
      { return __a.allocate(__n); }
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800aa6c:	b5b0      	push	{r4, r5, r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800aa7a:	68b8      	ldr	r0, [r7, #8]
 800aa7c:	f7f6 fbf3 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7f6 fede 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aa86:	4602      	mov	r2, r0
 800aa88:	f107 0318 	add.w	r3, r7, #24
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7f7 ff73 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800aa94:	f107 0418 	add.w	r4, r7, #24
 800aa98:	6838      	ldr	r0, [r7, #0]
 800aa9a:	f7f6 fbfa 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	2008      	movs	r0, #8
 800aaa4:	f7f5 fc44 	bl	8000330 <_ZnwjPv>
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	7f3b      	ldrb	r3, [r7, #28]
 800aaac:	4622      	mov	r2, r4
 800aaae:	7d39      	ldrb	r1, [r7, #20]
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 f8ec 	bl	800ac8e <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800aab6:	462b      	mov	r3, r5
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bdb0      	pop	{r4, r5, r7, pc}

0800aac0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7f6 fbc9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800aad4:	4604      	mov	r4, r0
 800aad6:	6838      	ldr	r0, [r7, #0]
 800aad8:	f7f6 feb3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aadc:	4605      	mov	r5, r0
 800aade:	6a38      	ldr	r0, [r7, #32]
 800aae0:	f7f6 fbd7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800aae4:	4603      	mov	r3, r0
 800aae6:	462a      	mov	r2, r5
 800aae8:	4621      	mov	r1, r4
 800aaea:	68b8      	ldr	r0, [r7, #8]
 800aaec:	f7ff ffbe 	bl	800aa6c <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800aaf0:	bf00      	nop
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bdb0      	pop	{r4, r5, r7, pc}

0800aaf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68da      	ldr	r2, [r3, #12]
 800ab04:	f107 030c 	add.w	r3, r7, #12
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fc4c 	bl	800a3a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ab26:	68b8      	ldr	r0, [r7, #8]
 800ab28:	f000 f8c5 	bl	800acb6 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7f7 fe3a 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	605a      	str	r2, [r3, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f8b9 	bl	800accc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
    }
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ab80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ab98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ab9c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff ffea 	bl	800ab78 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800aba4:	4603      	mov	r3, r0
 800aba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800aba8:	f107 0208 	add.w	r2, r7, #8
 800abac:	f107 030c 	add.w	r3, r7, #12
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7f8 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800abb8:	4603      	mov	r3, r0
 800abba:	681b      	ldr	r3, [r3, #0]
      }
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800abda:	b5b0      	push	{r4, r5, r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
 800abe6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 f8ab 	bl	800ad44 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800abee:	4604      	mov	r4, r0
 800abf0:	68b8      	ldr	r0, [r7, #8]
 800abf2:	f000 f8a7 	bl	800ad44 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800abf6:	4605      	mov	r5, r0
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f8a3 	bl	800ad44 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800abfe:	4602      	mov	r2, r0
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	4629      	mov	r1, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 f8a8 	bl	800ad5a <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ac0a:	4603      	mov	r3, r0
    }
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bdb0      	pop	{r4, r5, r7, pc}

0800ac14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d00a      	beq.n	800ac3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f8b5 	bl	800ad96 <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f8bc 	bl	800adac <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3304      	adds	r3, #4
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	e7f0      	b.n	800ac1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800ac68:	68b8      	ldr	r0, [r7, #8]
 800ac6a:	f7f8 f968 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f8 f959 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800ac76:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	605a      	str	r2, [r3, #4]
      { }
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ac8e:	b5b0      	push	{r4, r5, r7, lr}
 800ac90:	b086      	sub	sp, #24
 800ac92:	af02      	add	r7, sp, #8
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	7239      	strb	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
 800ac9a:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800ac9c:	463a      	mov	r2, r7
 800ac9e:	f88d 4000 	strb.w	r4, [sp]
 800aca2:	462b      	mov	r3, r5
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff ffd7 	bl	800ac5a <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bdb0      	pop	{r4, r5, r7, pc}

0800acb6 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	4413      	add	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	4619      	mov	r1, r3
 800acfa:	68b8      	ldr	r0, [r7, #8]
 800acfc:	f015 fc80 	bl	8020600 <_ZdlPvj>
      }
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 f877 	bl	800ae06 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	bf8c      	ite	hi
 800ad20:	2301      	movhi	r3, #1
 800ad22:	2300      	movls	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ad2a:	f015 fd32 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f015 fc66 	bl	8020604 <_Znwj>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	bf00      	nop
      }
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	109b      	asrs	r3, r3, #2
 800ad70:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dd06      	ble.n	800ad86 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68f9      	ldr	r1, [r7, #12]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f015 fd79 	bl	8020878 <memmove>
      return __result + __count;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	4413      	add	r3, r2
    }
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fe0b 	bl	800a9d0 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 f826 	bl	800ae20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800add4:	4602      	mov	r2, r0
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	4293      	cmp	r3, r2
 800adda:	bf8c      	ite	hi
 800addc:	2301      	movhi	r3, #1
 800adde:	2300      	movls	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ade6:	f015 fcd4 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4613      	mov	r3, r2
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	4413      	add	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	4618      	mov	r0, r3
 800adf6:	f015 fc05 	bl	8020604 <_Znwj>
 800adfa:	4603      	mov	r3, r0
 800adfc:	bf00      	nop
      }
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ae0e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ae28:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	05555555 	.word	0x05555555

0800ae3c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fd86 	bl	8009958 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <_Z41__static_initialization_and_destruction_0ii>:
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d10a      	bne.n	800ae7e <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d105      	bne.n	800ae7e <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800ae72:	480c      	ldr	r0, [pc, #48]	; (800aea4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae74:	f7fe fab0 	bl	80093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800ae78:	480b      	ldr	r0, [pc, #44]	; (800aea8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ae7a:	f7fe fad3 	bl	8009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10a      	bne.n	800ae9a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d105      	bne.n	800ae9a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ae8e:	4806      	ldr	r0, [pc, #24]	; (800aea8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ae90:	f7ff ffd4 	bl	800ae3c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800ae94:	4803      	ldr	r0, [pc, #12]	; (800aea4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae96:	f000 f809 	bl	800aeac <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	24000158 	.word	0x24000158
 800aea8:	24000164 	.word	0x24000164

0800aeac <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800aeac:	b5b0      	push	{r4, r5, r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681c      	ldr	r4, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff fb2c 	bl	800a51c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800aec4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aec6:	461a      	mov	r2, r3
 800aec8:	4629      	mov	r1, r5
 800aeca:	4620      	mov	r0, r4
 800aecc:	f7ff fb31 	bl	800a532 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fd07 	bl	80098e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bdb0      	pop	{r4, r5, r7, pc}

0800aee2 <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800aee2:	b580      	push	{r7, lr}
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aeea:	2001      	movs	r0, #1
 800aeec:	f7ff ffb4 	bl	800ae58 <_Z41__static_initialization_and_destruction_0ii>
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800aef2:	b580      	push	{r7, lr}
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aefa:	2000      	movs	r0, #0
 800aefc:	f7ff ffac 	bl	800ae58 <_Z41__static_initialization_and_destruction_0ii>
 800af00:	bd80      	pop	{r7, pc}

0800af02 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f83c 	bl	800af88 <_ZNSaIP6StreamED1Ev>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	f000 f81f 	bl	800af68 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff ffeb 	bl	800af1a <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f88c 	bl	800b076 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8ce 	bl	800b112 <_ZNSaIP6StreamEC1Ev>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 f8d6 	bl	800b12a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	689a      	ldr	r2, [r3, #8]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800afb6:	461a      	mov	r2, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f8ca 	bl	800b152 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff ff9e 	bl	800af02 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f8cd 	bl	800b178 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800affe:	b5b0      	push	{r4, r5, r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	1d38      	adds	r0, r7, #4
 800b008:	e880 0006 	stmia.w	r0, {r1, r2}
 800b00c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800b00e:	68fc      	ldr	r4, [r7, #12]
 800b010:	f107 0314 	add.w	r3, r7, #20
 800b014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f8b9 	bl	800b18e <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	461a      	mov	r2, r3
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	4620      	mov	r0, r4
 800b026:	f000 f8c0 	bl	800b1aa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800b02a:	f107 0314 	add.w	r3, r7, #20
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ffda 	bl	800afe8 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b034:	68fc      	ldr	r4, [r7, #12]
 800b036:	1d3b      	adds	r3, r7, #4
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f8d4 	bl	800b1e6 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b03e:	4605      	mov	r5, r0
 800b040:	1d3b      	adds	r3, r7, #4
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f8db 	bl	800b1fe <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800b048:	4603      	mov	r3, r0
 800b04a:	461a      	mov	r2, r3
 800b04c:	4629      	mov	r1, r5
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f8e7 	bl	800b222 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bdb0      	pop	{r4, r5, r7, pc}

0800b05e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f907 	bl	800b27a <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b076:	b580      	push	{r7, lr}
 800b078:	b082      	sub	sp, #8
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f925 	bl	800b2ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b084:	4603      	mov	r3, r0
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f901 	bl	800b290 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ffe4 	bl	800b05e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	bf0c      	ite	eq
 800b0b6:	2301      	moveq	r3, #1
 800b0b8:	2300      	movne	r3, #0
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	bf34      	ite	cc
 800b0e0:	2301      	movcc	r3, #1
 800b0e2:	2300      	movcs	r3, #0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa58 	bl	800b5d0 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	605a      	str	r2, [r3, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	609a      	str	r2, [r3, #8]
	{ }
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
	if (__p)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fa3b 	bl	800b5e6 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b170:	bf00      	nop
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa42 	bl	800b624 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b1aa:	b590      	push	{r4, r7, lr}
 800b1ac:	b087      	sub	sp, #28
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b1b6:	68fc      	ldr	r4, [r7, #12]
 800b1b8:	f107 0314 	add.w	r3, r7, #20
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fa3c 	bl	800b63c <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b1c4:	f107 0314 	add.w	r3, r7, #20
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fa42 	bl	800b656 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f84f 	bl	800b27a <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd90      	pop	{r4, r7, pc}

0800b1e6 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b1fe:	b590      	push	{r4, r7, lr}
 800b200:	b083      	sub	sp, #12
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ffed 	bl	800b1e6 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b20c:	4604      	mov	r4, r0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa3e 	bl	800b690 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b214:	4603      	mov	r3, r0
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	4423      	add	r3, r4
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}

0800b222 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b222:	b580      	push	{r7, lr}
 800b224:	b088      	sub	sp, #32
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b22e:	f107 0314 	add.w	r3, r7, #20
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	4618      	mov	r0, r3
 800b236:	f000 fa37 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d017      	beq.n	800b272 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 f84f 	bl	800b2e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b248:	4603      	mov	r3, r0
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	f107 021c 	add.w	r2, r7, #28
 800b250:	f107 0318 	add.w	r3, r7, #24
 800b254:	4611      	mov	r1, r2
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff ff4b 	bl	800b0f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b25c:	f107 0314 	add.w	r3, r7, #20
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	69b9      	ldr	r1, [r7, #24]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fa2e 	bl	800b6c6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3308      	adds	r3, #8
 800b26e:	60bb      	str	r3, [r7, #8]
 800b270:	e7e3      	b.n	800b23a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b272:	bf00      	nop
 800b274:	3720      	adds	r7, #32
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d012      	beq.n	800b2c6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b2a0:	6838      	ldr	r0, [r7, #0]
 800b2a2:	f000 fa43 	bl	800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff fff0 	bl	800b290 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b2b0:	6838      	ldr	r0, [r7, #0]
 800b2b2:	f000 fa47 	bl	800b744 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b2b6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f968 	bl	800b590 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b2c4:	e7e9      	b.n	800b29a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	1d1a      	adds	r2, r3, #4
 800b2f2:	f107 030c 	add.w	r3, r7, #12
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f95a 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3310      	adds	r3, #16
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fa2d 	bl	800b774 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b31a:	4603      	mov	r3, r0
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b08d      	sub	sp, #52	; 0x34
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b332:	1d3b      	adds	r3, r7, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fa3a 	bl	800b7ae <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b33a:	4603      	mov	r3, r0
 800b33c:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b33e:	69bc      	ldr	r4, [r7, #24]
 800b340:	68b8      	ldr	r0, [r7, #8]
 800b342:	f000 fa0b 	bl	800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b346:	4603      	mov	r3, r0
 800b348:	429c      	cmp	r4, r3
 800b34a:	bf0c      	ite	eq
 800b34c:	2301      	moveq	r3, #1
 800b34e:	2300      	movne	r3, #0
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d030      	beq.n	800b3b8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b356:	68b8      	ldr	r0, [r7, #8]
 800b358:	f000 fa3a 	bl	800b7d0 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b35c:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d013      	beq.n	800b38a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b362:	68bc      	ldr	r4, [r7, #8]
 800b364:	68b8      	ldr	r0, [r7, #8]
 800b366:	f000 fa3f 	bl	800b7e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b36a:	4603      	mov	r3, r0
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fa46 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b374:	4603      	mov	r3, r0
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4619      	mov	r1, r3
 800b37a:	4620      	mov	r0, r4
 800b37c:	f7ff fea4 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b386:	2301      	movs	r3, #1
 800b388:	e000      	b.n	800b38c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b38a:	2300      	movs	r3, #0
	  if (size() > 0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00c      	beq.n	800b3aa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b390:	2300      	movs	r3, #0
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	68b8      	ldr	r0, [r7, #8]
 800b396:	f000 fa27 	bl	800b7e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b39a:	4602      	mov	r2, r0
 800b39c:	f107 031c 	add.w	r3, r7, #28
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7f6 fd80 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b3a8:	e0db      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fa31 	bl	800b818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b3b6:	e0d4      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b3b8:	68bc      	ldr	r4, [r7, #8]
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fa1f 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7ff fe7d 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d057      	beq.n	800b484 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b3d8:	69bc      	ldr	r4, [r7, #24]
 800b3da:	68b8      	ldr	r0, [r7, #8]
 800b3dc:	f000 faa1 	bl	800b922 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	bf0c      	ite	eq
 800b3e8:	2301      	moveq	r3, #1
 800b3ea:	2300      	movne	r3, #0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00d      	beq.n	800b40e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b3f2:	68b8      	ldr	r0, [r7, #8]
 800b3f4:	f000 fa95 	bl	800b922 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f000 fa91 	bl	800b922 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	4621      	mov	r1, r4
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7f6 fdfa 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b40c:	e0a9      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b40e:	68bc      	ldr	r4, [r7, #8]
 800b410:	f107 0314 	add.w	r3, r7, #20
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fa90 	bl	800b93a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b41a:	4603      	mov	r3, r0
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f9ee 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b424:	4603      	mov	r3, r0
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4619      	mov	r1, r3
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7ff fe4c 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01f      	beq.n	800b476 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f977 	bl	800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	bf0c      	ite	eq
 800b444:	2301      	moveq	r3, #1
 800b446:	2300      	movne	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b44e:	2300      	movs	r3, #0
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	f107 0214 	add.w	r2, r7, #20
 800b456:	f107 0320 	add.w	r3, r7, #32
 800b45a:	4619      	mov	r1, r3
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7f6 fd23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b462:	e07e      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b464:	f107 0218 	add.w	r2, r7, #24
 800b468:	f107 0318 	add.w	r3, r7, #24
 800b46c:	4619      	mov	r1, r3
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7f6 fdc6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b474:	e075      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f9cb 	bl	800b818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b482:	e06e      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b484:	68bc      	ldr	r4, [r7, #8]
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 f9b9 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b48e:	4603      	mov	r3, r0
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	4619      	mov	r1, r3
 800b494:	4620      	mov	r0, r4
 800b496:	f7ff fe17 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d056      	beq.n	800b54e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b4a4:	69bc      	ldr	r4, [r7, #24]
 800b4a6:	68b8      	ldr	r0, [r7, #8]
 800b4a8:	f000 f99e 	bl	800b7e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	bf0c      	ite	eq
 800b4b4:	2301      	moveq	r3, #1
 800b4b6:	2300      	movne	r3, #0
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00c      	beq.n	800b4d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b4be:	2300      	movs	r3, #0
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c2:	68b8      	ldr	r0, [r7, #8]
 800b4c4:	f000 f990 	bl	800b7e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7f6 fce9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b4d6:	e044      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b4d8:	68bc      	ldr	r4, [r7, #8]
 800b4da:	f107 0310 	add.w	r3, r7, #16
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fa3c 	bl	800b95c <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 f989 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f7ff fde7 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01f      	beq.n	800b540 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f912 	bl	800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bf0c      	ite	eq
 800b50e:	2301      	moveq	r3, #1
 800b510:	2300      	movne	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00a      	beq.n	800b52e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b518:	2300      	movs	r3, #0
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b51c:	f107 0218 	add.w	r2, r7, #24
 800b520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b524:	4619      	mov	r1, r3
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7f6 fcbe 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b52c:	e019      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b52e:	f107 0210 	add.w	r2, r7, #16
 800b532:	f107 0310 	add.w	r3, r7, #16
 800b536:	4619      	mov	r1, r3
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f7f6 fd61 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b53e:	e010      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f966 	bl	800b818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b54c:	e009      	b.n	800b562 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b54e:	2300      	movs	r3, #0
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b552:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b556:	f107 0318 	add.w	r3, r7, #24
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7f6 fd8a 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	3734      	adds	r7, #52	; 0x34
 800b566:	46bd      	mov	sp, r7
 800b568:	bd90      	pop	{r4, r7, pc}

0800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa03 	bl	800b97e <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b578:	4602      	mov	r2, r0
 800b57a:	f107 030c 	add.w	r3, r7, #12
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fa0a 	bl	800b99a <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b586:	4603      	mov	r3, r0
      }
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fa08 	bl	800b9b2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa19 	bl	800b9dc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b088      	sub	sp, #32
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	607a      	str	r2, [r7, #4]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	61fb      	str	r3, [r7, #28]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	61bb      	str	r3, [r7, #24]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b5fe:	f7f4 fe8f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b608:	69b8      	ldr	r0, [r7, #24]
 800b60a:	f014 fff7 	bl	80205fc <_ZdlPv>
	    return;
 800b60e:	e005      	b.n	800b61c <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	69b9      	ldr	r1, [r7, #24]
 800b614:	69f8      	ldr	r0, [r7, #28]
 800b616:	f000 fb4a 	bl	800bcae <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b61a:	bf00      	nop
 800b61c:	bf00      	nop
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9f3 	bl	800ba32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f9f0 	bl	800ba48 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b668:	4603      	mov	r3, r0
 800b66a:	4619      	mov	r1, r3
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f9f6 	bl	800ba5e <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68b9      	ldr	r1, [r7, #8]
 800b676:	4618      	mov	r0, r3
 800b678:	f000 f9ff 	bl	800ba7a <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7f4 fe61 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b6c6:	b5b0      	push	{r4, r5, r7, lr}
 800b6c8:	b08a      	sub	sp, #40	; 0x28
 800b6ca:	af02      	add	r7, sp, #8
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b6d4:	f107 0318 	add.w	r3, r7, #24
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 f95d 	bl	800b99a <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f107 0010 	add.w	r0, r7, #16
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	68f9      	ldr	r1, [r7, #12]
 800b6ea:	f7ff fe1b 	bl	800b324 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00f      	beq.n	800b714 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b6f4:	693c      	ldr	r4, [r7, #16]
 800b6f6:	697d      	ldr	r5, [r7, #20]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f9ca 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b6fe:	4602      	mov	r2, r0
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	4613      	mov	r3, r2
 800b706:	462a      	mov	r2, r5
 800b708:	4621      	mov	r1, r4
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 f9cc 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b710:	4603      	mov	r3, r0
			  __node_gen);
 800b712:	e007      	b.n	800b724 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	f107 031c 	add.w	r3, r7, #28
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff48 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b722:	69fb      	ldr	r3, [r7, #28]
    }
 800b724:	4618      	mov	r0, r3
 800b726:	3720      	adds	r7, #32
 800b728:	46bd      	mov	sp, r7
 800b72a:	bdb0      	pop	{r4, r5, r7, pc}

0800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3304      	adds	r3, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f9dc 	bl	800bb3a <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b782:	4603      	mov	r3, r0
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f9db 	bl	800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2101      	movs	r1, #1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f9e1 	bl	800bb66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	f107 030c 	add.w	r3, r7, #12
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fef6 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3310      	adds	r3, #16
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff feae 	bl	800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b80e:	4603      	mov	r3, r0
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b08b      	sub	sp, #44	; 0x2c
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b824:	68b8      	ldr	r0, [r7, #8]
 800b826:	f7ff fd52 	bl	800b2ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b82a:	4603      	mov	r3, r0
 800b82c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b82e:	68b8      	ldr	r0, [r7, #8]
 800b830:	f7ff ff94 	bl	800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b834:	4603      	mov	r3, r0
 800b836:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d020      	beq.n	800b886 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b848:	68bc      	ldr	r4, [r7, #8]
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fe8c 	bl	800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	4620      	mov	r0, r4
 800b85a:	f7ff fc35 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff ff68 	bl	800b744 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b874:	4603      	mov	r3, r0
 800b876:	e004      	b.n	800b882 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff ff56 	bl	800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b880:	4603      	mov	r3, r0
 800b882:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b884:	e7db      	b.n	800b83e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	f107 0310 	add.w	r3, r7, #16
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff fe8f 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d01d      	beq.n	800b8d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800b89c:	68b8      	ldr	r0, [r7, #8]
 800b89e:	f000 f985 	bl	800bbac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	61fb      	str	r3, [r7, #28]
 800b8a6:	f107 021c 	add.w	r2, r7, #28
 800b8aa:	f107 0310 	add.w	r3, r7, #16
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff fbf5 	bl	800b0a0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d008      	beq.n	800b8ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800b8bc:	f107 0214 	add.w	r2, r7, #20
 800b8c0:	f107 0318 	add.w	r3, r7, #24
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 f981 	bl	800bbce <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b8cc:	e025      	b.n	800b91a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800b8ce:	f107 0310 	add.w	r3, r7, #16
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 f831 	bl	800b93a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b8d8:	68bc      	ldr	r4, [r7, #8]
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff ff8f 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f7ff fbed 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800b8f4:	f107 0214 	add.w	r2, r7, #20
 800b8f8:	f107 0318 	add.w	r3, r7, #24
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f965 	bl	800bbce <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b904:	e009      	b.n	800b91a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800b906:	2300      	movs	r3, #0
 800b908:	623b      	str	r3, [r7, #32]
 800b90a:	f107 0220 	add.w	r2, r7, #32
 800b90e:	f107 0310 	add.w	r3, r7, #16
 800b912:	4619      	mov	r1, r3
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f7f6 fbae 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	372c      	adds	r7, #44	; 0x2c
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd90      	pop	{r4, r7, pc}

0800b922 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800b922:	b480      	push	{r7}
 800b924:	b083      	sub	sp, #12
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	330c      	adds	r3, #12
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4618      	mov	r0, r3
 800b948:	f014 fec6 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b94c:	4602      	mov	r2, r0
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	601a      	str	r2, [r3, #0]
	return *this;
 800b952:	687b      	ldr	r3, [r7, #4]
      }
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f014 feb3 	bl	80206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b96e:	4602      	mov	r2, r0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
	return *this;
 800b974:	687b      	ldr	r3, [r7, #4]
      }
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3310      	adds	r3, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 f938 	bl	800bc00 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b990:	4603      	mov	r3, r0
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b9b2:	b590      	push	{r4, r7, lr}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f8c7 	bl	800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	6838      	ldr	r0, [r7, #0]
 800b9c6:	f7ff fc9f 	bl	800b308 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 f922 	bl	800bc18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd90      	pop	{r4, r7, pc}

0800b9dc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f8b2 	bl	800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f91c 	bl	800bc30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 f92c 	bl	800bc82 <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f92e 	bl	800bccc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
      { }
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800baa8:	b5b0      	push	{r4, r5, r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d11a      	bne.n	800baf2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff fe4d 	bl	800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800bac2:	4602      	mov	r2, r0
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d013      	beq.n	800baf2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800baca:	68fc      	ldr	r4, [r7, #12]
 800bacc:	f107 0310 	add.w	r3, r7, #16
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff ff61 	bl	800b99a <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800bad8:	4605      	mov	r5, r0
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff fe90 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800bae0:	4603      	mov	r3, r0
 800bae2:	461a      	mov	r2, r3
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff faee 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e000      	b.n	800baf8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800baf6:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800baf8:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800bafa:	6838      	ldr	r0, [r7, #0]
 800bafc:	f7ff ffc9 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb00:	4603      	mov	r3, r0
 800bb02:	4619      	mov	r1, r3
 800bb04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb06:	f000 f8ed 	bl	800bce4 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800bb0a:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800bb10:	7ff8      	ldrb	r0, [r7, #31]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	69b9      	ldr	r1, [r7, #24]
 800bb16:	f014 fde1 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800bb24:	f107 0314 	add.w	r3, r7, #20
 800bb28:	69b9      	ldr	r1, [r7, #24]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff fd41 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bb30:	697b      	ldr	r3, [r7, #20]
      }
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bdb0      	pop	{r4, r5, r7, pc}

0800bb3a <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4618      	mov	r0, r3
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800bb78:	f7f4 fbd2 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	4613      	mov	r3, r2
 800bb86:	005b      	lsls	r3, r3, #1
 800bb88:	4413      	add	r3, r2
 800bb8a:	00db      	lsls	r3, r3, #3
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f014 fd39 	bl	8020604 <_Znwj>
 800bb92:	4603      	mov	r3, r0
 800bb94:	e006      	b.n	800bba4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800bb96:	2200      	movs	r2, #0
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f910 	bl	800bdc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800bba0:	4603      	mov	r3, r0
 800bba2:	bf00      	nop
      { return __a.allocate(__n); }
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68da      	ldr	r2, [r3, #12]
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fcf7 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bbda:	68b8      	ldr	r0, [r7, #8]
 800bbdc:	f000 f896 	bl	800bd0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7f6 fde0 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f88a 	bl	800bd22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800bc22:	6838      	ldr	r0, [r7, #0]
 800bc24:	f000 f888 	bl	800bd38 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	61fb      	str	r3, [r7, #28]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bc48:	f7f4 fb6a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800bc52:	69b8      	ldr	r0, [r7, #24]
 800bc54:	f014 fcd2 	bl	80205fc <_ZdlPv>
	    return;
 800bc58:	e005      	b.n	800bc66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	69b9      	ldr	r1, [r7, #24]
 800bc5e:	69f8      	ldr	r0, [r7, #28]
 800bc60:	f000 f8d0 	bl	800be04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
    }
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800bc8c:	f7f4 fb48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d004      	beq.n	800bca0 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bc96:	6839      	ldr	r1, [r7, #0]
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 f857 	bl	800bd4c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800bc9e:	e003      	b.n	800bca8 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f86a 	bl	800bd7c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	f014 fc9d 	bl	8020600 <_ZdlPvj>
      }
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800bce4:	b590      	push	{r4, r7, lr}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681c      	ldr	r4, [r3, #0]
 800bcf2:	6838      	ldr	r0, [r7, #0]
 800bcf4:	f7ff fecd 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 f848 	bl	800bd92 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd90      	pop	{r4, r7, pc}

0800bd0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bd22:	b480      	push	{r7}
 800bd24:	b083      	sub	sp, #12
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    }
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d00a      	beq.n	800bd74 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f862 	bl	800be28 <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bd64:	4603      	mov	r3, r0
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 f869 	bl	800be3e <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	607b      	str	r3, [r7, #4]
 800bd72:	e7f0      	b.n	800bd56 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff fcf5 	bl	800b78c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bda2:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bda4:	6838      	ldr	r0, [r7, #0]
 800bda6:	f7ff fe74 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	461a      	mov	r2, r3
 800bdae:	68f9      	ldr	r1, [r7, #12]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f84f 	bl	800be54 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
	}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 f861 	bl	800be94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bf8c      	ite	hi
 800bdda:	2301      	movhi	r3, #1
 800bddc:	2300      	movls	r3, #0
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bde4:	f014 fcd5 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	005b      	lsls	r3, r3, #1
 800bdee:	4413      	add	r3, r2
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f014 fc06 	bl	8020604 <_Znwj>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	bf00      	nop
      }
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4619      	mov	r1, r3
 800be1c:	68b8      	ldr	r0, [r7, #8]
 800be1e:	f014 fbef 	bl	8020600 <_ZdlPvj>
      }
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff ff11 	bl	800bc6e <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800be54:	b5b0      	push	{r4, r5, r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	4619      	mov	r1, r3
 800be64:	2018      	movs	r0, #24
 800be66:	f7f4 fa63 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f7ff fe70 	bl	800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800be70:	4604      	mov	r4, r0
 800be72:	68b8      	ldr	r0, [r7, #8]
 800be74:	f7ff fa48 	bl	800b308 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800be78:	4605      	mov	r5, r0
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fe09 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	4629      	mov	r1, r5
 800be86:	4620      	mov	r0, r4
 800be88:	f000 f82c 	bl	800bee4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bdb0      	pop	{r4, r5, r7, pc}

0800be94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800be9c:	4b03      	ldr	r3, [pc, #12]	; (800beac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800be9e:	4618      	mov	r0, r3
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	05555555 	.word	0x05555555

0800beb0 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800beb0:	b5b0      	push	{r4, r5, r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800beba:	6838      	ldr	r0, [r7, #0]
 800bebc:	f7ff fde9 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bec0:	4605      	mov	r5, r0
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4619      	mov	r1, r3
 800bec6:	2008      	movs	r0, #8
 800bec8:	f7f4 fa32 	bl	8000330 <_ZnwjPv>
 800becc:	4604      	mov	r4, r0
 800bece:	4623      	mov	r3, r4
 800bed0:	462a      	mov	r2, r5
 800bed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bed6:	e883 0003 	stmia.w	r3, {r0, r1}
 800beda:	4623      	mov	r3, r4
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bdb0      	pop	{r4, r5, r7, pc}

0800bee4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fdce 	bl	800ba92 <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bef6:	4603      	mov	r3, r0
 800bef8:	4619      	mov	r1, r3
 800befa:	68b8      	ldr	r0, [r7, #8]
 800befc:	f7ff ffd8 	bl	800beb0 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800bf00:	bf00      	nop
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b090      	sub	sp, #64	; 0x40
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d13e      	bne.n	800bf96 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d139      	bne.n	800bf96 <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800bf22:	4826      	ldr	r0, [pc, #152]	; (800bfbc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bf24:	f7ff f806 	bl	800af34 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800bf28:	f107 0310 	add.w	r3, r7, #16
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4618      	mov	r0, r3
 800bf32:	f014 fcbb 	bl	80208ac <memset>
 800bf36:	2301      	movs	r3, #1
 800bf38:	743b      	strb	r3, [r7, #16]
 800bf3a:	23ff      	movs	r3, #255	; 0xff
 800bf3c:	617b      	str	r3, [r7, #20]
 800bf3e:	2302      	movs	r3, #2
 800bf40:	763b      	strb	r3, [r7, #24]
 800bf42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	2303      	movs	r3, #3
 800bf4a:	f887 3020 	strb.w	r3, [r7, #32]
 800bf4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
 800bf54:	2304      	movs	r3, #4
 800bf56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf60:	f107 0310 	add.w	r3, r7, #16
 800bf64:	60bb      	str	r3, [r7, #8]
 800bf66:	2304      	movs	r3, #4
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff f82e 	bl	800afd0 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800bf74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bf78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	f107 0208 	add.w	r2, r7, #8
 800bf84:	ca06      	ldmia	r2, {r1, r2}
 800bf86:	480e      	ldr	r0, [pc, #56]	; (800bfc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bf88:	f7ff f839 	bl	800affe <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800bf8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff f829 	bl	800afe8 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d105      	bne.n	800bfb2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800bfa6:	4806      	ldr	r0, [pc, #24]	; (800bfc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bfa8:	f7fe ffd1 	bl	800af4e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800bfac:	4803      	ldr	r0, [pc, #12]	; (800bfbc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bfae:	f000 f809 	bl	800bfc4 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800bfb2:	bf00      	nop
 800bfb4:	3738      	adds	r7, #56	; 0x38
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	24000180 	.word	0x24000180
 800bfc0:	2400018c 	.word	0x2400018c

0800bfc4 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bfc4:	b5b0      	push	{r4, r5, r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681c      	ldr	r4, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7ff fd12 	bl	800ba00 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800bfdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bfde:	461a      	mov	r2, r3
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff fd17 	bl	800ba16 <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fe ffd7 	bl	800af9e <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bdb0      	pop	{r4, r5, r7, pc}

0800bffa <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800bffa:	b580      	push	{r7, lr}
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c002:	2001      	movs	r0, #1
 800c004:	f7ff ff80 	bl	800bf08 <_Z41__static_initialization_and_destruction_0ii>
 800c008:	bd80      	pop	{r7, pc}

0800c00a <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800c00a:	b580      	push	{r7, lr}
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c012:	2000      	movs	r0, #0
 800c014:	f7ff ff78 	bl	800bf08 <_Z41__static_initialization_and_destruction_0ii>
 800c018:	bd80      	pop	{r7, pc}

0800c01a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f82f 	bl	800c086 <_ZNSaIP5TimerED1Ev>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 f812 	bl	800c066 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4618      	mov	r0, r3
 800c058:	f7ff ffeb 	bl	800c032 <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f82d 	bl	800c0ce <_ZNSaIP5TimerEC1Ev>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f835 	bl	800c0e6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f829 	bl	800c10e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff ffab 	bl	800c01a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f82c 	bl	800c134 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	605a      	str	r2, [r3, #4]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	609a      	str	r2, [r3, #8]
	{ }
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	if (__p)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d005      	beq.n	800c12c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f80f 	bl	800c14a <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800c12c:	bf00      	nop
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b088      	sub	sp, #32
 800c14e:	af00      	add	r7, sp, #0
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	61fb      	str	r3, [r7, #28]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	61bb      	str	r3, [r7, #24]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c162:	f7f4 f8dd 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c16c:	69b8      	ldr	r0, [r7, #24]
 800c16e:	f014 fa45 	bl	80205fc <_ZdlPv>
	    return;
 800c172:	e005      	b.n	800c180 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	69b9      	ldr	r1, [r7, #24]
 800c178:	69f8      	ldr	r0, [r7, #28]
 800c17a:	f000 f83e 	bl	800c1fa <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c17e:	bf00      	nop
 800c180:	bf00      	nop
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f80e 	bl	800c1ce <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
    }
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c1d8:	f7f4 f8a2 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f817 	bl	800c218 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c1ea:	e003      	b.n	800c1f4 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f82a 	bl	800c248 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4619      	mov	r1, r3
 800c20c:	68b8      	ldr	r0, [r7, #8]
 800c20e:	f014 f9f7 	bl	8020600 <_ZdlPvj>
      }
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d00a      	beq.n	800c240 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f817 	bl	800c25e <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c230:	4603      	mov	r3, r0
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f81e 	bl	800c274 <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3304      	adds	r3, #4
 800c23c:	607b      	str	r3, [r7, #4]
 800c23e:	e7f0      	b.n	800c222 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff ff9c 	bl	800c1ba <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d107      	bne.n	800c2ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d102      	bne.n	800c2ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c2a6:	4809      	ldr	r0, [pc, #36]	; (800c2cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c2a8:	f7ff fed0 	bl	800c04c <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d107      	bne.n	800c2c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d102      	bne.n	800c2c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c2bc:	4803      	ldr	r0, [pc, #12]	; (800c2cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c2be:	f000 f807 	bl	800c2d0 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	240001a4 	.word	0x240001a4

0800c2d0 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c2d0:	b5b0      	push	{r4, r5, r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681c      	ldr	r4, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff ff50 	bl	800c188 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c2e8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff ff55 	bl	800c19e <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fed0 	bl	800c09c <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bdb0      	pop	{r4, r5, r7, pc}

0800c306 <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c306:	b580      	push	{r7, lr}
 800c308:	af00      	add	r7, sp, #0
 800c30a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c30e:	2001      	movs	r0, #1
 800c310:	f7ff ffbc 	bl	800c28c <_Z41__static_initialization_and_destruction_0ii>
 800c314:	bd80      	pop	{r7, pc}

0800c316 <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c316:	b580      	push	{r7, lr}
 800c318:	af00      	add	r7, sp, #0
 800c31a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c31e:	2000      	movs	r0, #0
 800c320:	f7ff ffb4 	bl	800c28c <_Z41__static_initialization_and_destruction_0ii>
 800c324:	bd80      	pop	{r7, pc}

0800c326 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f834 	bl	800c39c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 f812 	bl	800c372 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4618      	mov	r0, r3
 800c364:	f7ff ffeb 	bl	800c33e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f82e 	bl	800c3dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f836 	bl	800c3f4 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f3 ffdb 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f844 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f820 	bl	800c40a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff ffaa 	bl	800c326 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 f83b 	bl	800c460 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
      { }
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d012      	beq.n	800c440 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c41a:	6838      	ldr	r0, [r7, #0]
 800c41c:	f000 f82b 	bl	800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c420:	4603      	mov	r3, r0
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff fff0 	bl	800c40a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c42a:	6838      	ldr	r0, [r7, #0]
 800c42c:	f000 f82f 	bl	800c48e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c430:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f836 	bl	800c4a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c43e:	e7e9      	b.n	800c414 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4618      	mov	r0, r3
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	4618      	mov	r0, r3
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f808 	bl	800c4c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f819 	bl	800c4f2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c4c8:	b590      	push	{r4, r7, lr}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f81f 	bl	800c516 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c4d8:	4604      	mov	r4, r0
 800c4da:	6838      	ldr	r0, [r7, #0]
 800c4dc:	f7f8 ffc4 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 f821 	bl	800c52c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd90      	pop	{r4, r7, pc}

0800c4f2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f80a 	bl	800c516 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c502:	4603      	mov	r3, r0
 800c504:	2201      	movs	r2, #1
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 f81b 	bl	800c544 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c536:	6838      	ldr	r0, [r7, #0]
 800c538:	f000 f823 	bl	800c582 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c53c:	bf00      	nop
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	61fb      	str	r3, [r7, #28]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	61bb      	str	r3, [r7, #24]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c55c:	f7f3 fee0 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c566:	69b8      	ldr	r0, [r7, #24]
 800c568:	f014 f848 	bl	80205fc <_ZdlPv>
	    return;
 800c56c:	e005      	b.n	800c57a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	69b9      	ldr	r1, [r7, #24]
 800c572:	69f8      	ldr	r0, [r7, #28]
 800c574:	f000 f80f 	bl	800c596 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	3720      	adds	r7, #32
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
    }
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	4413      	add	r3, r2
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	68b8      	ldr	r0, [r7, #8]
 800c5b0:	f014 f826 	bl	8020600 <_ZdlPvj>
      }
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fef4 	bl	800c3b2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d107      	bne.n	800c5f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d102      	bne.n	800c5f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c5ee:	4809      	ldr	r0, [pc, #36]	; (800c614 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c5f0:	f7ff feb2 	bl	800c358 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c600:	4293      	cmp	r3, r2
 800c602:	d102      	bne.n	800c60a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c604:	4803      	ldr	r0, [pc, #12]	; (800c614 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c606:	f7ff ffd8 	bl	800c5ba <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c60a:	bf00      	nop
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	240001b0 	.word	0x240001b0

0800c618 <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c620:	2001      	movs	r0, #1
 800c622:	f7ff ffd7 	bl	800c5d4 <_Z41__static_initialization_and_destruction_0ii>
 800c626:	bd80      	pop	{r7, pc}

0800c628 <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c630:	2000      	movs	r0, #0
 800c632:	f7ff ffcf 	bl	800c5d4 <_Z41__static_initialization_and_destruction_0ii>
 800c636:	bd80      	pop	{r7, pc}

0800c638 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f86f 	bl	800c724 <_ZNSaIP3PinED1Ev>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 f852 	bl	800c704 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff ffeb 	bl	800c650 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	4613      	mov	r3, r2
 800c690:	80fb      	strh	r3, [r7, #6]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	88fa      	ldrh	r2, [r7, #6]
 800c69c:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	f107 0314 	add.w	r3, r7, #20
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4803      	ldr	r0, [pc, #12]	; (800c6b8 <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c6aa:	f000 f85f 	bl	800c76c <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	240001c8 	.word	0x240001c8

0800c6bc <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c6c8:	887c      	ldrh	r4, [r7, #2]
 800c6ca:	480d      	ldr	r0, [pc, #52]	; (800c700 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c6cc:	f000 f85f 	bl	800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	429c      	cmp	r4, r3
 800c6d4:	bf34      	ite	cc
 800c6d6:	2301      	movcc	r3, #1
 800c6d8:	2300      	movcs	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00a      	beq.n	800c6f6 <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c6e0:	887b      	ldrh	r3, [r7, #2]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4806      	ldr	r0, [pc, #24]	; (800c700 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c6e6:	f000 f862 	bl	800c7ae <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f86d 	bl	800c7ce <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c6f4:	e000      	b.n	800c6f8 <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c6f6:	bf00      	nop
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd90      	pop	{r4, r7, pc}
 800c700:	240001c8 	.word	0x240001c8

0800c704 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f872 	bl	800c7f6 <_ZNSaIP3PinEC1Ev>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f000 f87a 	bl	800c80e <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4618      	mov	r0, r3
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b082      	sub	sp, #8
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	689a      	ldr	r2, [r3, #8]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c752:	461a      	mov	r2, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f86e 	bl	800c836 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff ff6b 	bl	800c638 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c776:	6838      	ldr	r0, [r7, #0]
 800c778:	f000 f870 	bl	800c85c <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c77c:	4603      	mov	r3, r0
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f876 	bl	800c872 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	685a      	ldr	r2, [r3, #4]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	109b      	asrs	r3, r3, #2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
      }
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c7ce:	b5b0      	push	{r4, r5, r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c7d8:	687c      	ldr	r4, [r7, #4]
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f000 f87b 	bl	800c8d6 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 f891 	bl	800c90e <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bdb0      	pop	{r4, r5, r7, pc}

0800c7f6 <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f89a 	bl	800c938 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	609a      	str	r2, [r3, #8]
	{ }
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4618      	mov	r0, r3
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	607a      	str	r2, [r7, #4]
	if (__p)
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f87d 	bl	800c94e <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c872:	b5b0      	push	{r4, r5, r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	429a      	cmp	r2, r3
 800c886:	d011      	beq.n	800c8ac <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c888:	687c      	ldr	r4, [r7, #4]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685d      	ldr	r5, [r3, #4]
 800c88e:	6838      	ldr	r0, [r7, #0]
 800c890:	f000 f87c 	bl	800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	4629      	mov	r1, r5
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 f896 	bl	800c9cc <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	1d1a      	adds	r2, r3, #4
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]
 800c8aa:	e00c      	b.n	800c8c6 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f89f 	bl	800c9f0 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	6838      	ldr	r0, [r7, #0]
 800c8b6:	f000 f869 	bl	800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	4621      	mov	r1, r4
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f8a7 	bl	800ca14 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f920 	bl	800cb0c <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800c8cc:	4603      	mov	r3, r0
      }
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bdb0      	pop	{r4, r5, r7, pc}

0800c8d6 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800c8ec:	b590      	push	{r4, r7, lr}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	7239      	strb	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f931 	bl	800cb66 <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd90      	pop	{r4, r7, pc}

0800c90e <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800c90e:	b5b0      	push	{r4, r5, r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	7239      	strb	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800c91a:	68fc      	ldr	r4, [r7, #12]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff ffda 	bl	800c8d6 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	4629      	mov	r1, r5
 800c928:	4620      	mov	r0, r4
 800c92a:	f7ff ffdf 	bl	800c8ec <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bdb0      	pop	{r4, r5, r7, pc}

0800c938 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4618      	mov	r0, r3
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c94e:	b580      	push	{r7, lr}
 800c950:	b088      	sub	sp, #32
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	607a      	str	r2, [r7, #4]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	61bb      	str	r3, [r7, #24]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c966:	f7f3 fcdb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c970:	69b8      	ldr	r0, [r7, #24]
 800c972:	f013 fe43 	bl	80205fc <_ZdlPv>
	    return;
 800c976:	e005      	b.n	800c984 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	69b9      	ldr	r1, [r7, #24]
 800c97c:	69f8      	ldr	r0, [r7, #28]
 800c97e:	f000 f9f7 	bl	800cd70 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c982:	bf00      	nop
 800c984:	bf00      	nop
 800c986:	3720      	adds	r7, #32
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c9a2:	b590      	push	{r4, r7, lr}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c9ac:	6838      	ldr	r0, [r7, #0]
 800c9ae:	f7ff ffed 	bl	800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	681c      	ldr	r4, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	2004      	movs	r0, #4
 800c9bc:	f7f3 fcb8 	bl	8000330 <_ZnwjPv>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	601c      	str	r4, [r3, #0]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd90      	pop	{r4, r7, pc}

0800c9cc <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff ffd7 	bl	800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	68b8      	ldr	r0, [r7, #8]
 800c9e4:	f7ff ffdd 	bl	800c9a2 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	1d1a      	adds	r2, r3, #4
 800c9fc:	f107 030c 	add.w	r3, r7, #12
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 f8c7 	bl	800cb96 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ca14:	b5b0      	push	{r4, r5, r7, lr}
 800ca16:	b08c      	sub	sp, #48	; 0x30
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ca20:	4a39      	ldr	r2, [pc, #228]	; (800cb08 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800ca22:	2101      	movs	r1, #1
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f8c6 	bl	800cbb6 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800ca2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 f903 	bl	800cc44 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	f107 0214 	add.w	r2, r7, #20
 800ca46:	f107 0308 	add.w	r3, r7, #8
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 f909 	bl	800cc64 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800ca52:	4603      	mov	r3, r0
 800ca54:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 f917 	bl	800cc8e <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800ca60:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800ca66:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800ca6c:	69fa      	ldr	r2, [r7, #28]
 800ca6e:	18d5      	adds	r5, r2, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ff8b 	bl	800c98c <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca76:	4603      	mov	r3, r0
 800ca78:	461a      	mov	r2, r3
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7ff ffa5 	bl	800c9cc <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800ca82:	2300      	movs	r3, #0
 800ca84:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 f927 	bl	800ccde <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800ca90:	4603      	mov	r3, r0
 800ca92:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f92c 	bl	800ccf4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ca9c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ca9e:	69fa      	ldr	r2, [r7, #28]
 800caa0:	4621      	mov	r1, r4
 800caa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa4:	f000 f907 	bl	800ccb6 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800caa8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	3304      	adds	r3, #4
 800caae:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 f912 	bl	800ccde <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800caba:	4603      	mov	r3, r0
 800cabc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 f917 	bl	800ccf4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800cac6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cacc:	4620      	mov	r0, r4
 800cace:	f000 f8f2 	bl	800ccb6 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cad2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800cad4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	689a      	ldr	r2, [r3, #8]
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800cae0:	461a      	mov	r2, r3
 800cae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cae4:	f7ff fea7 	bl	800c836 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	69fa      	ldr	r2, [r7, #28]
 800caec:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	69fa      	ldr	r2, [r7, #28]
 800cafa:	441a      	add	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	609a      	str	r2, [r3, #8]
    }
 800cb00:	bf00      	nop
 800cb02:	3730      	adds	r7, #48	; 0x30
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bdb0      	pop	{r4, r5, r7, pc}
 800cb08:	08020cb4 	.word	0x08020cb4

0800cb0c <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff ff6b 	bl	800c9f0 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	f107 030c 	add.w	r3, r7, #12
 800cb22:	2101      	movs	r1, #1
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f8fe 	bl	800cd26 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	60bb      	str	r3, [r7, #8]
 800cb2e:	f107 0308 	add.w	r3, r7, #8
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f910 	bl	800cd58 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800cb38:	4603      	mov	r3, r0
      }
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	7239      	strb	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fec1 	bl	800c8d6 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb54:	4603      	mov	r3, r0
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	601a      	str	r2, [r3, #0]
	    { }
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800cb66:	b5b0      	push	{r4, r5, r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	7239      	strb	r1, [r7, #8]
 800cb70:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800cb72:	68fc      	ldr	r4, [r7, #12]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff feae 	bl	800c8d6 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7ff ffde 	bl	800cb42 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	711a      	strb	r2, [r3, #4]
	{ }
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bdb0      	pop	{r4, r5, r7, pc}

0800cb96 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cb96:	b480      	push	{r7}
 800cb98:	b083      	sub	sp, #12
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cbb6:	b590      	push	{r4, r7, lr}
 800cbb8:	b087      	sub	sp, #28
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f8e3 	bl	800cd8e <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cbc8:	4604      	mov	r4, r0
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f7ff fddf 	bl	800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	1ae2      	subs	r2, r4, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	bf34      	ite	cc
 800cbda:	2301      	movcc	r3, #1
 800cbdc:	2300      	movcs	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f013 fdd7 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff fdcf 	bl	800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff fdcb 	bl	800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	f107 0208 	add.w	r2, r7, #8
 800cc00:	f107 0310 	add.w	r3, r7, #16
 800cc04:	4611      	mov	r1, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f5 fe23 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4423      	add	r3, r4
 800cc12:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fdba 	bl	800c78e <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d306      	bcc.n	800cc30 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f000 f8b3 	bl	800cd8e <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d904      	bls.n	800cc3a <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f000 f8ac 	bl	800cd8e <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cc36:	4603      	mov	r3, r0
 800cc38:	e000      	b.n	800cc3c <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cc3a:	697b      	ldr	r3, [r7, #20]
      }
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	371c      	adds	r7, #28
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd90      	pop	{r4, r7, pc}

0800cc44 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	4611      	mov	r1, r2
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff ff9e 	bl	800cb96 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cc64:	b590      	push	{r4, r7, lr}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f835 	bl	800ccde <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cc74:	4603      	mov	r3, r0
 800cc76:	681c      	ldr	r4, [r3, #0]
 800cc78:	6838      	ldr	r0, [r7, #0]
 800cc7a:	f000 f830 	bl	800ccde <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	1ae3      	subs	r3, r4, r3
 800cc84:	109b      	asrs	r3, r3, #2
 800cc86:	4618      	mov	r0, r3
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd90      	pop	{r4, r7, pc}

0800cc8e <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d006      	beq.n	800ccac <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f884 	bl	800cdb0 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	e000      	b.n	800ccae <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800ccac:	2300      	movs	r3, #0
      }
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800ccb6:	b590      	push	{r4, r7, lr}
 800ccb8:	b087      	sub	sp, #28
 800ccba:	af02      	add	r7, sp, #8
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
 800ccc2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800ccc4:	f88d 4000 	strb.w	r4, [sp]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	68b9      	ldr	r1, [r7, #8]
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 f88e 	bl	800cdf0 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800ccd4:	4603      	mov	r3, r0
      }
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd90      	pop	{r4, r7, pc}

0800ccde <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	60f8      	str	r0, [r7, #12]
 800cd12:	60b9      	str	r1, [r7, #8]
 800cd14:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 f885 	bl	800ce28 <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	425b      	negs	r3, r3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	f107 020c 	add.w	r2, r7, #12
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff ff24 	bl	800cb96 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4618      	mov	r0, r3
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4619      	mov	r1, r3
 800cd82:	68b8      	ldr	r0, [r7, #8]
 800cd84:	f013 fc3c 	bl	8020600 <_ZdlPvj>
      }
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 f881 	bl	800cea0 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f863 	bl	800ce6c <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800cda6:	4603      	mov	r3, r0
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800cdc2:	f7f3 faad 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d006      	beq.n	800cdda <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f013 fc17 	bl	8020604 <_Znwj>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	e006      	b.n	800cde8 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cdda:	2200      	movs	r2, #0
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f8a9 	bl	800cf36 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cde4:	4603      	mov	r3, r0
 800cde6:	bf00      	nop
      { return __a.allocate(__n); }
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f856 	bl	800ceb6 <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ce0a:	4603      	mov	r3, r0
      }
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
    }
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800ce32:	f7f3 fa75 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f856 	bl	800cef0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800ce44:	e003      	b.n	800ce4e <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f869 	bl	800cf20 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ce5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ce74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ce78:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7ff ffea 	bl	800ce54 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800ce80:	4603      	mov	r3, r0
 800ce82:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ce84:	f107 0208 	add.w	r2, r7, #8
 800ce88:	f107 030c 	add.w	r3, r7, #12
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f5 ffa9 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800ce94:	4603      	mov	r3, r0
 800ce96:	681b      	ldr	r3, [r3, #0]
      }
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ceb6:	b5b0      	push	{r4, r5, r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
 800cec2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f855 	bl	800cf74 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ceca:	4604      	mov	r4, r0
 800cecc:	68b8      	ldr	r0, [r7, #8]
 800cece:	f000 f851 	bl	800cf74 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ced2:	4605      	mov	r5, r0
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f84d 	bl	800cf74 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ceda:	4602      	mov	r2, r0
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	4629      	mov	r1, r5
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 f852 	bl	800cf8a <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800cee6:	4603      	mov	r3, r0
    }
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bdb0      	pop	{r4, r5, r7, pc}

0800cef0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d00a      	beq.n	800cf18 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f85f 	bl	800cfc6 <_ZSt11__addressofIP3PinEPT_RS2_>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 f866 	bl	800cfdc <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3304      	adds	r3, #4
 800cf14:	607b      	str	r3, [r7, #4]
 800cf16:	e7f0      	b.n	800cefa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f000 f855 	bl	800cff2 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	bf8c      	ite	hi
 800cf50:	2301      	movhi	r3, #1
 800cf52:	2300      	movls	r3, #0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cf5a:	f013 fc1a 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f013 fb4e 	bl	8020604 <_Znwj>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	bf00      	nop
      }
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b086      	sub	sp, #24
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	109b      	asrs	r3, r3, #2
 800cfa0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd06      	ble.n	800cfb6 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	461a      	mov	r2, r3
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f013 fc61 	bl	8020878 <memmove>
      return __result + __count;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	4413      	add	r3, r2
    }
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cfc6:	b480      	push	{r7}
 800cfc8:	b083      	sub	sp, #12
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff ff15 	bl	800ce14 <_ZSt10destroy_atIP3PinEvPT_>
    }
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cff2:	b480      	push	{r7}
 800cff4:	b083      	sub	sp, #12
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cffa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cffe:	4618      	mov	r0, r3
 800d000:	370c      	adds	r7, #12
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
	...

0800d00c <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	f040 82ad 	bne.w	800d578 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d024:	4293      	cmp	r3, r2
 800d026:	f040 82a7 	bne.w	800d578 <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800d02a:	48ba      	ldr	r0, [pc, #744]	; (800d314 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800d02c:	f7ff fb1d 	bl	800c66a <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800d030:	2201      	movs	r2, #1
 800d032:	49b9      	ldr	r1, [pc, #740]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d034:	48b9      	ldr	r0, [pc, #740]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800d036:	f7ff fb25 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800d03a:	2202      	movs	r2, #2
 800d03c:	49b6      	ldr	r1, [pc, #728]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d03e:	48b8      	ldr	r0, [pc, #736]	; (800d320 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800d040:	f7ff fb20 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800d044:	2204      	movs	r2, #4
 800d046:	49b4      	ldr	r1, [pc, #720]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d048:	48b6      	ldr	r0, [pc, #728]	; (800d324 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800d04a:	f7ff fb1b 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800d04e:	2208      	movs	r2, #8
 800d050:	49b1      	ldr	r1, [pc, #708]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d052:	48b5      	ldr	r0, [pc, #724]	; (800d328 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800d054:	f7ff fb16 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800d058:	2210      	movs	r2, #16
 800d05a:	49af      	ldr	r1, [pc, #700]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d05c:	48b3      	ldr	r0, [pc, #716]	; (800d32c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800d05e:	f7ff fb11 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800d062:	2220      	movs	r2, #32
 800d064:	49ac      	ldr	r1, [pc, #688]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d066:	48b2      	ldr	r0, [pc, #712]	; (800d330 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800d068:	f7ff fb0c 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800d06c:	2240      	movs	r2, #64	; 0x40
 800d06e:	49aa      	ldr	r1, [pc, #680]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d070:	48b0      	ldr	r0, [pc, #704]	; (800d334 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800d072:	f7ff fb07 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800d076:	2280      	movs	r2, #128	; 0x80
 800d078:	49a7      	ldr	r1, [pc, #668]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d07a:	48af      	ldr	r0, [pc, #700]	; (800d338 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800d07c:	f7ff fb02 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800d080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d084:	49a4      	ldr	r1, [pc, #656]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d086:	48ad      	ldr	r0, [pc, #692]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800d088:	f7ff fafc 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800d08c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d090:	49a1      	ldr	r1, [pc, #644]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d092:	48ab      	ldr	r0, [pc, #684]	; (800d340 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800d094:	f7ff faf6 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800d098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d09c:	499e      	ldr	r1, [pc, #632]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d09e:	48a9      	ldr	r0, [pc, #676]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800d0a0:	f7ff faf0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800d0a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0a8:	499b      	ldr	r1, [pc, #620]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d0aa:	48a7      	ldr	r0, [pc, #668]	; (800d348 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800d0ac:	f7ff faea 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800d0b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0b4:	4998      	ldr	r1, [pc, #608]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d0b6:	48a5      	ldr	r0, [pc, #660]	; (800d34c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800d0b8:	f7ff fae4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800d0bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d0c0:	4995      	ldr	r1, [pc, #596]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d0c2:	48a3      	ldr	r0, [pc, #652]	; (800d350 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800d0c4:	f7ff fade 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800d0c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d0cc:	4992      	ldr	r1, [pc, #584]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d0ce:	48a1      	ldr	r0, [pc, #644]	; (800d354 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d0d0:	f7ff fad8 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d0d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d0d8:	498f      	ldr	r1, [pc, #572]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d0da:	489f      	ldr	r0, [pc, #636]	; (800d358 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d0dc:	f7ff fad2 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	499e      	ldr	r1, [pc, #632]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0e4:	489e      	ldr	r0, [pc, #632]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d0e6:	f7ff facd 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	499b      	ldr	r1, [pc, #620]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0ee:	489d      	ldr	r0, [pc, #628]	; (800d364 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d0f0:	f7ff fac8 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	4999      	ldr	r1, [pc, #612]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0f8:	489b      	ldr	r0, [pc, #620]	; (800d368 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d0fa:	f7ff fac3 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d0fe:	2208      	movs	r2, #8
 800d100:	4996      	ldr	r1, [pc, #600]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d102:	489a      	ldr	r0, [pc, #616]	; (800d36c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d104:	f7ff fabe 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d108:	2210      	movs	r2, #16
 800d10a:	4994      	ldr	r1, [pc, #592]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d10c:	4898      	ldr	r0, [pc, #608]	; (800d370 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d10e:	f7ff fab9 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d112:	2220      	movs	r2, #32
 800d114:	4991      	ldr	r1, [pc, #580]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d116:	4897      	ldr	r0, [pc, #604]	; (800d374 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d118:	f7ff fab4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d11c:	2240      	movs	r2, #64	; 0x40
 800d11e:	498f      	ldr	r1, [pc, #572]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d120:	4895      	ldr	r0, [pc, #596]	; (800d378 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d122:	f7ff faaf 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d126:	2280      	movs	r2, #128	; 0x80
 800d128:	498c      	ldr	r1, [pc, #560]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d12a:	4894      	ldr	r0, [pc, #592]	; (800d37c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d12c:	f7ff faaa 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d130:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d134:	4989      	ldr	r1, [pc, #548]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d136:	4892      	ldr	r0, [pc, #584]	; (800d380 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d138:	f7ff faa4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d13c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d140:	4986      	ldr	r1, [pc, #536]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d142:	4890      	ldr	r0, [pc, #576]	; (800d384 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d144:	f7ff fa9e 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d14c:	4983      	ldr	r1, [pc, #524]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d14e:	488e      	ldr	r0, [pc, #568]	; (800d388 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d150:	f7ff fa98 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d158:	4980      	ldr	r1, [pc, #512]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d15a:	488c      	ldr	r0, [pc, #560]	; (800d38c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d15c:	f7ff fa92 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d164:	497d      	ldr	r1, [pc, #500]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d166:	488a      	ldr	r0, [pc, #552]	; (800d390 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d168:	f7ff fa8c 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d16c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d170:	497a      	ldr	r1, [pc, #488]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d172:	4888      	ldr	r0, [pc, #544]	; (800d394 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d174:	f7ff fa86 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d17c:	4977      	ldr	r1, [pc, #476]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d17e:	4886      	ldr	r0, [pc, #536]	; (800d398 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d180:	f7ff fa80 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d188:	4974      	ldr	r1, [pc, #464]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d18a:	4884      	ldr	r0, [pc, #528]	; (800d39c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d18c:	f7ff fa7a 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d190:	2201      	movs	r2, #1
 800d192:	4983      	ldr	r1, [pc, #524]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d194:	4883      	ldr	r0, [pc, #524]	; (800d3a4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d196:	f7ff fa75 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d19a:	2202      	movs	r2, #2
 800d19c:	4980      	ldr	r1, [pc, #512]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d19e:	4882      	ldr	r0, [pc, #520]	; (800d3a8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d1a0:	f7ff fa70 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d1a4:	2204      	movs	r2, #4
 800d1a6:	497e      	ldr	r1, [pc, #504]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1a8:	4880      	ldr	r0, [pc, #512]	; (800d3ac <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d1aa:	f7ff fa6b 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d1ae:	2208      	movs	r2, #8
 800d1b0:	497b      	ldr	r1, [pc, #492]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1b2:	487f      	ldr	r0, [pc, #508]	; (800d3b0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d1b4:	f7ff fa66 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d1b8:	2210      	movs	r2, #16
 800d1ba:	4979      	ldr	r1, [pc, #484]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1bc:	487d      	ldr	r0, [pc, #500]	; (800d3b4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d1be:	f7ff fa61 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d1c2:	2220      	movs	r2, #32
 800d1c4:	4976      	ldr	r1, [pc, #472]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1c6:	487c      	ldr	r0, [pc, #496]	; (800d3b8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d1c8:	f7ff fa5c 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d1cc:	2240      	movs	r2, #64	; 0x40
 800d1ce:	4974      	ldr	r1, [pc, #464]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1d0:	487a      	ldr	r0, [pc, #488]	; (800d3bc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d1d2:	f7ff fa57 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d1d6:	2280      	movs	r2, #128	; 0x80
 800d1d8:	4971      	ldr	r1, [pc, #452]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1da:	4879      	ldr	r0, [pc, #484]	; (800d3c0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d1dc:	f7ff fa52 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d1e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1e4:	496e      	ldr	r1, [pc, #440]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1e6:	4877      	ldr	r0, [pc, #476]	; (800d3c4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d1e8:	f7ff fa4c 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1f0:	496b      	ldr	r1, [pc, #428]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1f2:	4875      	ldr	r0, [pc, #468]	; (800d3c8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d1f4:	f7ff fa46 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d1f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1fc:	4968      	ldr	r1, [pc, #416]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d1fe:	4873      	ldr	r0, [pc, #460]	; (800d3cc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d200:	f7ff fa40 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d208:	4965      	ldr	r1, [pc, #404]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d20a:	4871      	ldr	r0, [pc, #452]	; (800d3d0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d20c:	f7ff fa3a 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d214:	4962      	ldr	r1, [pc, #392]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d216:	486f      	ldr	r0, [pc, #444]	; (800d3d4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d218:	f7ff fa34 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d21c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d220:	495f      	ldr	r1, [pc, #380]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d222:	486d      	ldr	r0, [pc, #436]	; (800d3d8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d224:	f7ff fa2e 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d228:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d22c:	495c      	ldr	r1, [pc, #368]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d22e:	486b      	ldr	r0, [pc, #428]	; (800d3dc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d230:	f7ff fa28 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d238:	4959      	ldr	r1, [pc, #356]	; (800d3a0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d23a:	4869      	ldr	r0, [pc, #420]	; (800d3e0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d23c:	f7ff fa22 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d240:	2201      	movs	r2, #1
 800d242:	4968      	ldr	r1, [pc, #416]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d244:	4868      	ldr	r0, [pc, #416]	; (800d3e8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d246:	f7ff fa1d 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d24a:	2202      	movs	r2, #2
 800d24c:	4965      	ldr	r1, [pc, #404]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d24e:	4867      	ldr	r0, [pc, #412]	; (800d3ec <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d250:	f7ff fa18 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d254:	2204      	movs	r2, #4
 800d256:	4963      	ldr	r1, [pc, #396]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d258:	4865      	ldr	r0, [pc, #404]	; (800d3f0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d25a:	f7ff fa13 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d25e:	2208      	movs	r2, #8
 800d260:	4960      	ldr	r1, [pc, #384]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d262:	4864      	ldr	r0, [pc, #400]	; (800d3f4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d264:	f7ff fa0e 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d268:	2210      	movs	r2, #16
 800d26a:	495e      	ldr	r1, [pc, #376]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d26c:	4862      	ldr	r0, [pc, #392]	; (800d3f8 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d26e:	f7ff fa09 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d272:	2220      	movs	r2, #32
 800d274:	495b      	ldr	r1, [pc, #364]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d276:	4861      	ldr	r0, [pc, #388]	; (800d3fc <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d278:	f7ff fa04 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d27c:	2240      	movs	r2, #64	; 0x40
 800d27e:	4959      	ldr	r1, [pc, #356]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d280:	485f      	ldr	r0, [pc, #380]	; (800d400 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d282:	f7ff f9ff 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d286:	2280      	movs	r2, #128	; 0x80
 800d288:	4956      	ldr	r1, [pc, #344]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d28a:	485e      	ldr	r0, [pc, #376]	; (800d404 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d28c:	f7ff f9fa 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d290:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d294:	4953      	ldr	r1, [pc, #332]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d296:	485c      	ldr	r0, [pc, #368]	; (800d408 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d298:	f7ff f9f4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d29c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2a0:	4950      	ldr	r1, [pc, #320]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2a2:	485a      	ldr	r0, [pc, #360]	; (800d40c <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d2a4:	f7ff f9ee 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d2a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2ac:	494d      	ldr	r1, [pc, #308]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2ae:	4858      	ldr	r0, [pc, #352]	; (800d410 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d2b0:	f7ff f9e8 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2b8:	494a      	ldr	r1, [pc, #296]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2ba:	4856      	ldr	r0, [pc, #344]	; (800d414 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d2bc:	f7ff f9e2 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d2c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d2c4:	4947      	ldr	r1, [pc, #284]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2c6:	4854      	ldr	r0, [pc, #336]	; (800d418 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d2c8:	f7ff f9dc 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d2cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d2d0:	4944      	ldr	r1, [pc, #272]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2d2:	4852      	ldr	r0, [pc, #328]	; (800d41c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d2d4:	f7ff f9d6 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d2d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d2dc:	4941      	ldr	r1, [pc, #260]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2de:	4850      	ldr	r0, [pc, #320]	; (800d420 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d2e0:	f7ff f9d0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d2e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d2e8:	493e      	ldr	r1, [pc, #248]	; (800d3e4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d2ea:	484e      	ldr	r0, [pc, #312]	; (800d424 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d2ec:	f7ff f9ca 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	494d      	ldr	r1, [pc, #308]	; (800d428 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d2f4:	484d      	ldr	r0, [pc, #308]	; (800d42c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d2f6:	f7ff f9c5 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	494a      	ldr	r1, [pc, #296]	; (800d428 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d2fe:	484c      	ldr	r0, [pc, #304]	; (800d430 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d300:	f7ff f9c0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d304:	2204      	movs	r2, #4
 800d306:	4948      	ldr	r1, [pc, #288]	; (800d428 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d308:	484a      	ldr	r0, [pc, #296]	; (800d434 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d30a:	f7ff f9bb 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d30e:	2208      	movs	r2, #8
 800d310:	e092      	b.n	800d438 <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d312:	bf00      	nop
 800d314:	240001c8 	.word	0x240001c8
 800d318:	58020000 	.word	0x58020000
 800d31c:	240001d4 	.word	0x240001d4
 800d320:	240001dc 	.word	0x240001dc
 800d324:	240001e4 	.word	0x240001e4
 800d328:	240001ec 	.word	0x240001ec
 800d32c:	240001f4 	.word	0x240001f4
 800d330:	240001fc 	.word	0x240001fc
 800d334:	24000204 	.word	0x24000204
 800d338:	2400020c 	.word	0x2400020c
 800d33c:	24000214 	.word	0x24000214
 800d340:	2400021c 	.word	0x2400021c
 800d344:	24000224 	.word	0x24000224
 800d348:	2400022c 	.word	0x2400022c
 800d34c:	24000234 	.word	0x24000234
 800d350:	2400023c 	.word	0x2400023c
 800d354:	24000244 	.word	0x24000244
 800d358:	2400024c 	.word	0x2400024c
 800d35c:	58020400 	.word	0x58020400
 800d360:	24000254 	.word	0x24000254
 800d364:	2400025c 	.word	0x2400025c
 800d368:	24000264 	.word	0x24000264
 800d36c:	2400026c 	.word	0x2400026c
 800d370:	24000274 	.word	0x24000274
 800d374:	2400027c 	.word	0x2400027c
 800d378:	24000284 	.word	0x24000284
 800d37c:	2400028c 	.word	0x2400028c
 800d380:	24000294 	.word	0x24000294
 800d384:	2400029c 	.word	0x2400029c
 800d388:	240002a4 	.word	0x240002a4
 800d38c:	240002ac 	.word	0x240002ac
 800d390:	240002b4 	.word	0x240002b4
 800d394:	240002bc 	.word	0x240002bc
 800d398:	240002c4 	.word	0x240002c4
 800d39c:	240002cc 	.word	0x240002cc
 800d3a0:	58020800 	.word	0x58020800
 800d3a4:	240002d4 	.word	0x240002d4
 800d3a8:	240002dc 	.word	0x240002dc
 800d3ac:	240002e4 	.word	0x240002e4
 800d3b0:	240002ec 	.word	0x240002ec
 800d3b4:	240002f4 	.word	0x240002f4
 800d3b8:	240002fc 	.word	0x240002fc
 800d3bc:	24000304 	.word	0x24000304
 800d3c0:	2400030c 	.word	0x2400030c
 800d3c4:	24000314 	.word	0x24000314
 800d3c8:	2400031c 	.word	0x2400031c
 800d3cc:	24000324 	.word	0x24000324
 800d3d0:	2400032c 	.word	0x2400032c
 800d3d4:	24000334 	.word	0x24000334
 800d3d8:	2400033c 	.word	0x2400033c
 800d3dc:	24000344 	.word	0x24000344
 800d3e0:	2400034c 	.word	0x2400034c
 800d3e4:	58020c00 	.word	0x58020c00
 800d3e8:	24000354 	.word	0x24000354
 800d3ec:	2400035c 	.word	0x2400035c
 800d3f0:	24000364 	.word	0x24000364
 800d3f4:	2400036c 	.word	0x2400036c
 800d3f8:	24000374 	.word	0x24000374
 800d3fc:	2400037c 	.word	0x2400037c
 800d400:	24000384 	.word	0x24000384
 800d404:	2400038c 	.word	0x2400038c
 800d408:	24000394 	.word	0x24000394
 800d40c:	2400039c 	.word	0x2400039c
 800d410:	240003a4 	.word	0x240003a4
 800d414:	240003ac 	.word	0x240003ac
 800d418:	240003b4 	.word	0x240003b4
 800d41c:	240003bc 	.word	0x240003bc
 800d420:	240003c4 	.word	0x240003c4
 800d424:	240003cc 	.word	0x240003cc
 800d428:	58021000 	.word	0x58021000
 800d42c:	240003d4 	.word	0x240003d4
 800d430:	240003dc 	.word	0x240003dc
 800d434:	240003e4 	.word	0x240003e4
 800d438:	4957      	ldr	r1, [pc, #348]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d43a:	4858      	ldr	r0, [pc, #352]	; (800d59c <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d43c:	f7ff f922 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d440:	2210      	movs	r2, #16
 800d442:	4955      	ldr	r1, [pc, #340]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d444:	4856      	ldr	r0, [pc, #344]	; (800d5a0 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d446:	f7ff f91d 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d44a:	2220      	movs	r2, #32
 800d44c:	4952      	ldr	r1, [pc, #328]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d44e:	4855      	ldr	r0, [pc, #340]	; (800d5a4 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d450:	f7ff f918 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d454:	2240      	movs	r2, #64	; 0x40
 800d456:	4950      	ldr	r1, [pc, #320]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d458:	4853      	ldr	r0, [pc, #332]	; (800d5a8 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d45a:	f7ff f913 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d45e:	2280      	movs	r2, #128	; 0x80
 800d460:	494d      	ldr	r1, [pc, #308]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d462:	4852      	ldr	r0, [pc, #328]	; (800d5ac <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d464:	f7ff f90e 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d46c:	494a      	ldr	r1, [pc, #296]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d46e:	4850      	ldr	r0, [pc, #320]	; (800d5b0 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d470:	f7ff f908 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d474:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d478:	4947      	ldr	r1, [pc, #284]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d47a:	484e      	ldr	r0, [pc, #312]	; (800d5b4 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d47c:	f7ff f902 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d484:	4944      	ldr	r1, [pc, #272]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d486:	484c      	ldr	r0, [pc, #304]	; (800d5b8 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d488:	f7ff f8fc 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d48c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d490:	4941      	ldr	r1, [pc, #260]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d492:	484a      	ldr	r0, [pc, #296]	; (800d5bc <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d494:	f7ff f8f6 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d49c:	493e      	ldr	r1, [pc, #248]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d49e:	4848      	ldr	r0, [pc, #288]	; (800d5c0 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d4a0:	f7ff f8f0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d4a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d4a8:	493b      	ldr	r1, [pc, #236]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d4aa:	4846      	ldr	r0, [pc, #280]	; (800d5c4 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d4ac:	f7ff f8ea 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d4b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4b4:	4938      	ldr	r1, [pc, #224]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d4b6:	4844      	ldr	r0, [pc, #272]	; (800d5c8 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d4b8:	f7ff f8e4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d4bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4c0:	4935      	ldr	r1, [pc, #212]	; (800d598 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d4c2:	4842      	ldr	r0, [pc, #264]	; (800d5cc <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d4c4:	f7ff f8de 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	4941      	ldr	r1, [pc, #260]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4cc:	4841      	ldr	r0, [pc, #260]	; (800d5d4 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d4ce:	f7ff f8d9 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	493e      	ldr	r1, [pc, #248]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4d6:	4840      	ldr	r0, [pc, #256]	; (800d5d8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d4d8:	f7ff f8d4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d4dc:	2204      	movs	r2, #4
 800d4de:	493c      	ldr	r1, [pc, #240]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4e0:	483e      	ldr	r0, [pc, #248]	; (800d5dc <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d4e2:	f7ff f8cf 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d4e6:	2208      	movs	r2, #8
 800d4e8:	4939      	ldr	r1, [pc, #228]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4ea:	483d      	ldr	r0, [pc, #244]	; (800d5e0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d4ec:	f7ff f8ca 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d4f0:	2210      	movs	r2, #16
 800d4f2:	4937      	ldr	r1, [pc, #220]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4f4:	483b      	ldr	r0, [pc, #236]	; (800d5e4 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d4f6:	f7ff f8c5 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d4fa:	2220      	movs	r2, #32
 800d4fc:	4934      	ldr	r1, [pc, #208]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4fe:	483a      	ldr	r0, [pc, #232]	; (800d5e8 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d500:	f7ff f8c0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d504:	2240      	movs	r2, #64	; 0x40
 800d506:	4932      	ldr	r1, [pc, #200]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d508:	4838      	ldr	r0, [pc, #224]	; (800d5ec <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d50a:	f7ff f8bb 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d50e:	2280      	movs	r2, #128	; 0x80
 800d510:	492f      	ldr	r1, [pc, #188]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d512:	4837      	ldr	r0, [pc, #220]	; (800d5f0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d514:	f7ff f8b6 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51c:	492c      	ldr	r1, [pc, #176]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d51e:	4835      	ldr	r0, [pc, #212]	; (800d5f4 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d520:	f7ff f8b0 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d524:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d528:	4929      	ldr	r1, [pc, #164]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d52a:	4833      	ldr	r0, [pc, #204]	; (800d5f8 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d52c:	f7ff f8aa 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d534:	4926      	ldr	r1, [pc, #152]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d536:	4831      	ldr	r0, [pc, #196]	; (800d5fc <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d538:	f7ff f8a4 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d53c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d540:	4923      	ldr	r1, [pc, #140]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d542:	482f      	ldr	r0, [pc, #188]	; (800d600 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d544:	f7ff f89e 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d54c:	4920      	ldr	r1, [pc, #128]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d54e:	482d      	ldr	r0, [pc, #180]	; (800d604 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d550:	f7ff f898 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d558:	491d      	ldr	r1, [pc, #116]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d55a:	482b      	ldr	r0, [pc, #172]	; (800d608 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d55c:	f7ff f892 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d564:	491a      	ldr	r1, [pc, #104]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d566:	4829      	ldr	r0, [pc, #164]	; (800d60c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d568:	f7ff f88c 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d56c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d570:	4917      	ldr	r1, [pc, #92]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d572:	4827      	ldr	r0, [pc, #156]	; (800d610 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d574:	f7ff f886 	bl	800c684 <_ZN3PinC1EP12GPIO_TypeDeft>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d584:	4293      	cmp	r3, r2
 800d586:	d102      	bne.n	800d58e <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d588:	4822      	ldr	r0, [pc, #136]	; (800d614 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d58a:	f000 f845 	bl	800d618 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	58021000 	.word	0x58021000
 800d59c:	240003ec 	.word	0x240003ec
 800d5a0:	240003f4 	.word	0x240003f4
 800d5a4:	240003fc 	.word	0x240003fc
 800d5a8:	24000404 	.word	0x24000404
 800d5ac:	2400040c 	.word	0x2400040c
 800d5b0:	24000414 	.word	0x24000414
 800d5b4:	2400041c 	.word	0x2400041c
 800d5b8:	24000424 	.word	0x24000424
 800d5bc:	2400042c 	.word	0x2400042c
 800d5c0:	24000434 	.word	0x24000434
 800d5c4:	2400043c 	.word	0x2400043c
 800d5c8:	24000444 	.word	0x24000444
 800d5cc:	2400044c 	.word	0x2400044c
 800d5d0:	58021400 	.word	0x58021400
 800d5d4:	24000454 	.word	0x24000454
 800d5d8:	2400045c 	.word	0x2400045c
 800d5dc:	24000464 	.word	0x24000464
 800d5e0:	2400046c 	.word	0x2400046c
 800d5e4:	24000474 	.word	0x24000474
 800d5e8:	2400047c 	.word	0x2400047c
 800d5ec:	24000484 	.word	0x24000484
 800d5f0:	2400048c 	.word	0x2400048c
 800d5f4:	24000494 	.word	0x24000494
 800d5f8:	2400049c 	.word	0x2400049c
 800d5fc:	240004a4 	.word	0x240004a4
 800d600:	240004ac 	.word	0x240004ac
 800d604:	240004b4 	.word	0x240004b4
 800d608:	240004bc 	.word	0x240004bc
 800d60c:	240004c4 	.word	0x240004c4
 800d610:	240004cc 	.word	0x240004cc
 800d614:	240001c8 	.word	0x240001c8

0800d618 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d618:	b5b0      	push	{r4, r5, r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681c      	ldr	r4, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff fb62 	bl	800ccf4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d630:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d632:	461a      	mov	r2, r3
 800d634:	4629      	mov	r1, r5
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff fb67 	bl	800cd0a <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff f87b 	bl	800c73a <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bdb0      	pop	{r4, r5, r7, pc}

0800d64e <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d64e:	b580      	push	{r7, lr}
 800d650:	af00      	add	r7, sp, #0
 800d652:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d656:	2001      	movs	r0, #1
 800d658:	f7ff fcd8 	bl	800d00c <_Z41__static_initialization_and_destruction_0ii>
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d65e:	b580      	push	{r7, lr}
 800d660:	af00      	add	r7, sp, #0
 800d662:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d666:	2000      	movs	r0, #0
 800d668:	f7ff fcd0 	bl	800d00c <_Z41__static_initialization_and_destruction_0ii>
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d66e:	b480      	push	{r7}
 800d670:	b083      	sub	sp, #12
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4618      	mov	r0, r3
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d69a:	b480      	push	{r7}
 800d69c:	b083      	sub	sp, #12
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	609a      	str	r2, [r3, #8]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d005      	beq.n	800d6d2 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	2203      	movs	r2, #3
 800d6d0:	4798      	blx	r3
    }
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	bf0c      	ite	eq
 800d6ec:	2301      	moveq	r3, #1
 800d6ee:	2300      	movne	r3, #0
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d6fe:	b480      	push	{r7}
 800d700:	b085      	sub	sp, #20
 800d702:	af00      	add	r7, sp, #0
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	ed87 0a02 	vstr	s0, [r7, #8]
 800d70a:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d70e:	ed97 7a02 	vldr	s14, [r7, #8]
 800d712:	edd7 7a01 	vldr	s15, [r7, #4]
 800d716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71e:	d501      	bpl.n	800d724 <_ZN5Timer3minEff+0x26>
			return n1;
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	e000      	b.n	800d726 <_ZN5Timer3minEff+0x28>
		return n2;
 800d724:	687b      	ldr	r3, [r7, #4]
	}
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eeb0 0a67 	vmov.f32	s0, s15
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <_ZN5Timer9interruptEv+0x16>
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d003      	beq.n	800d754 <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d74c:	e008      	b.n	800d760 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 f96a 	bl	800da28 <_ZN5Timer5resetEv>
			current_func();
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3308      	adds	r3, #8
 800d758:	4618      	mov	r0, r3
 800d75a:	f002 fba0 	bl	800fe9e <_ZNKSt8functionIFvvEEclEv>
			break;
 800d75e:	bf00      	nop
	}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d778:	2301      	movs	r3, #1
 800d77a:	e010      	b.n	800d79e <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d77c:	79fb      	ldrb	r3, [r7, #7]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d102      	bne.n	800d788 <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d786:	e00a      	b.n	800d79e <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d101      	bne.n	800d792 <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d78e:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d790:	e005      	b.n	800d79e <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	2b03      	cmp	r3, #3
 800d796:	d101      	bne.n	800d79c <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d79a:	e000      	b.n	800d79e <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d79c:	2300      	movs	r3, #0
	}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	000f4240 	.word	0x000f4240
 800d7b0:	3b9aca00 	.word	0x3b9aca00

0800d7b4 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff ff79 	bl	800d6b6 <_ZNSt14_Function_baseD1Ev>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
	...

0800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3308      	adds	r3, #8
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f002 fb73 	bl	800feca <_ZNSt8functionIFvvEEC1Ev>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	f107 030c 	add.w	r3, r7, #12
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4803      	ldr	r0, [pc, #12]	; (800d804 <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d7f6:	f002 fb75 	bl	800fee4 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	240001a4 	.word	0x240001a4

0800d808 <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08a      	sub	sp, #40	; 0x28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	4613      	mov	r3, r2
 800d814:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2200      	movs	r2, #0
 800d81e:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff ffa0 	bl	800d768 <_ZN5Timer10to_secondsENS_5UNITSE>
 800d828:	4602      	mov	r2, r0
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d830:	ee07 3a90 	vmov	s15, r3
 800d834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d838:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d83c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d8dc <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d840:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d848:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d84c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d850:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800d854:	eddf 0a22 	vldr	s1, [pc, #136]	; 800d8e0 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d858:	ed97 0a08 	vldr	s0, [r7, #32]
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7ff ff4e 	bl	800d6fe <_ZN5Timer3minEff>
 800d862:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d866:	edd7 7a07 	vldr	s15, [r7, #28]
 800d86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d86e:	ee17 2a90 	vmov	r2, s15
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3a01      	subs	r2, #1
 800d87a:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d884:	3301      	adds	r3, #1
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d88e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800d8dc <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d896:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800d89a:	edd7 6a06 	vldr	s13, [r7, #24]
 800d89e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a6:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800d8aa:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d8e0 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d8ae:	ed97 0a05 	vldr	s0, [r7, #20]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7ff ff23 	bl	800d6fe <_ZN5Timer3minEff>
 800d8b8:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d8bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8c4:	ee17 2a90 	vmov	r2, s15
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3a01      	subs	r2, #1
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d8d2:	bf00      	nop
 800d8d4:	3728      	adds	r7, #40	; 0x28
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	4d832156 	.word	0x4d832156
 800d8e0:	47800000 	.word	0x47800000

0800d8e4 <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d902:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d9a4 <_ZN5Timer13set_frequencyEm+0xc0>
 800d906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d90a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d90e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d912:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800d916:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d9a8 <_ZN5Timer13set_frequencyEm+0xc4>
 800d91a:	ed97 0a07 	vldr	s0, [r7, #28]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff feed 	bl	800d6fe <_ZN5Timer3minEff>
 800d924:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d928:	edd7 7a06 	vldr	s15, [r7, #24]
 800d92c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d930:	ee17 2a90 	vmov	r2, s15
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3a01      	subs	r2, #1
 800d93c:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d946:	3301      	adds	r3, #1
 800d948:	ee07 3a90 	vmov	s15, r3
 800d94c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d950:	eddf 6a14 	vldr	s13, [pc, #80]	; 800d9a4 <_ZN5Timer13set_frequencyEm+0xc0>
 800d954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d958:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	ee07 3a90 	vmov	s15, r3
 800d962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d966:	edd7 6a05 	vldr	s13, [r7, #20]
 800d96a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d96e:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800d972:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d9a8 <_ZN5Timer13set_frequencyEm+0xc4>
 800d976:	ed97 0a04 	vldr	s0, [r7, #16]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff febf 	bl	800d6fe <_ZN5Timer3minEff>
 800d980:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d984:	edd7 7a03 	vldr	s15, [r7, #12]
 800d988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98c:	ee17 2a90 	vmov	r2, s15
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3a01      	subs	r2, #1
 800d998:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d99a:	bf00      	nop
 800d99c:	3720      	adds	r7, #32
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	4d832156 	.word	0x4d832156
 800d9a8:	47800000 	.word	0x47800000

0800d9ac <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	607a      	str	r2, [r7, #4]
 800d9b8:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	68b9      	ldr	r1, [r7, #8]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f002 fa9a 	bl	800ff06 <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800d9d2:	78fb      	ldrb	r3, [r7, #3]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff ff15 	bl	800d808 <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f010 ff1e 	bl	801e824 <HAL_TIM_Base_Start_IT>
	}
 800d9e8:	bf00      	nop
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2201      	movs	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3308      	adds	r3, #8
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	4618      	mov	r0, r3
 800da0a:	f002 fa7c 	bl	800ff06 <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800da0e:	6879      	ldr	r1, [r7, #4]
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff ff67 	bl	800d8e4 <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f010 ff02 	bl	801e824 <HAL_TIM_Base_Start_IT>
	}
 800da20:	bf00      	nop
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <_ZN5Timer5resetEv>:

	void reset(){
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	4618      	mov	r0, r3
 800da36:	f010 ff7b 	bl	801e930 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
	}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800da5e:	b590      	push	{r4, r7, lr}
 800da60:	b083      	sub	sp, #12
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff ffed 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800da6e:	4603      	mov	r3, r0
 800da70:	681c      	ldr	r4, [r3, #0]
 800da72:	6838      	ldr	r0, [r7, #0]
 800da74:	f7ff ffe8 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800da78:	4603      	mov	r3, r0
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	429c      	cmp	r4, r3
 800da7e:	bf0c      	ite	eq
 800da80:	2301      	moveq	r3, #1
 800da82:	2300      	movne	r3, #0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd90      	pop	{r4, r7, pc}

0800da8e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
	++_M_current;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	601a      	str	r2, [r3, #0]
	return *this;
 800daa0:	687b      	ldr	r3, [r7, #4]
      }
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4618      	mov	r0, r3
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
	...

0800dac8 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	void start_interrupt(){
		HAL_TIM_Base_Start_IT(timer);
	}

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800dad0:	4b19      	ldr	r3, [pc, #100]	; (800db38 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	6978      	ldr	r0, [r7, #20]
 800dad6:	f002 fa31 	bl	800ff3c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800dada:	4603      	mov	r3, r0
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	6978      	ldr	r0, [r7, #20]
 800dae0:	f002 fa3c 	bl	800ff5c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800dae4:	4603      	mov	r3, r0
 800dae6:	60bb      	str	r3, [r7, #8]
 800dae8:	f107 0208 	add.w	r2, r7, #8
 800daec:	f107 030c 	add.w	r3, r7, #12
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff ffb3 	bl	800da5e <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800daf8:	4603      	mov	r3, r0
 800dafa:	f083 0301 	eor.w	r3, r3, #1
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d015      	beq.n	800db30 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800db04:	f107 030c 	add.w	r3, r7, #12
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff ffd0 	bl	800daae <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800db0e:	4603      	mov	r3, r0
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d102      	bne.n	800db24 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800db1e:	6938      	ldr	r0, [r7, #16]
 800db20:	f7ff fe0a 	bl	800d738 <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800db24:	f107 030c 	add.w	r3, r7, #12
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff ffb0 	bl	800da8e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800db2e:	e7db      	b.n	800dae8 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800db30:	bf00      	nop
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	240001a4 	.word	0x240001a4

0800db3c <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	ed87 0a01 	vstr	s0, [r7, #4]
 800db4a:	edc7 0a00 	vstr	s1, [r7]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	609a      	str	r2, [r3, #8]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	60da      	str	r2, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	611a      	str	r2, [r3, #16]
		do_scale = true;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2201      	movs	r2, #1
 800db6a:	751a      	strb	r2, [r3, #20]
		size = precision_mode;
 800db6c:	4b05      	ldr	r3, [pc, #20]	; (800db84 <_ZN13StreamMessageC1EPfff+0x48>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	605a      	str	r2, [r3, #4]
	}
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	24000001 	.word	0x24000001

0800db88 <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	611a      	str	r2, [r3, #16]
		do_scale = false;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	751a      	strb	r2, [r3, #20]
		size = 1;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	605a      	str	r2, [r3, #4]
	}
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4618      	mov	r0, r3
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	7d1b      	ldrb	r3, [r3, #20]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d03f      	beq.n	800dc4a <_ZN13StreamMessage7unparseEPh+0x92>
			if(ic != nullptr)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d004      	beq.n	800dbdc <_ZN13StreamMessage7unparseEPh+0x24>
				ic->get_duty();
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fb fe44 	bl	8009864 <_ZN12InputCapture8get_dutyEv>
			float scale = (*((float*) ptr) - min) / (max - min);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	ed93 7a00 	vldr	s14, [r3]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	edd3 7a02 	vldr	s15, [r3, #8]
 800dbea:	ee77 6a67 	vsub.f32	s13, s14, s15
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	ed93 7a03 	vldr	s14, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	edd3 7a02 	vldr	s15, [r3, #8]
 800dbfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dbfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc02:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	74fb      	strb	r3, [r7, #19]
 800dc0e:	f107 0313 	add.w	r3, r7, #19
 800dc12:	4619      	mov	r1, r3
 800dc14:	4813      	ldr	r0, [pc, #76]	; (800dc64 <_ZN13StreamMessage7unparseEPh+0xac>)
 800dc16:	f002 f9b3 	bl	800ff80 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	ee07 3a90 	vmov	s15, r3
 800dc22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dc26:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc32:	ee17 3a90 	vmov	r3, s15
 800dc36:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	f107 030c 	add.w	r3, r7, #12
 800dc40:	4619      	mov	r1, r3
 800dc42:	6838      	ldr	r0, [r7, #0]
 800dc44:	f012 fe0a 	bl	802085c <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800dc48:	e007      	b.n	800dc5a <_ZN13StreamMessage7unparseEPh+0xa2>
			memcpy(d, ptr, size);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6919      	ldr	r1, [r3, #16]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	461a      	mov	r2, r3
 800dc54:	6838      	ldr	r0, [r7, #0]
 800dc56:	f012 fe01 	bl	802085c <memcpy>
	}
 800dc5a:	bf00      	nop
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	2400018c 	.word	0x2400018c

0800dc68 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800dc68:	b590      	push	{r4, r7, lr}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800dc70:	2018      	movs	r0, #24
 800dc72:	f012 fcc7 	bl	8020604 <_Znwj>
 800dc76:	4603      	mov	r3, r0
 800dc78:	461c      	mov	r4, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dc98 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800dc82:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dc9c <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800dc86:	4619      	mov	r1, r3
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f7ff ff57 	bl	800db3c <_ZN13StreamMessageC1EPfff>
 800dc8e:	4623      	mov	r3, r4
	}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}
 800dc98:	40533333 	.word	0x40533333
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800dca8:	2018      	movs	r0, #24
 800dcaa:	f012 fcab 	bl	8020604 <_Znwj>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461c      	mov	r4, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff ff65 	bl	800db88 <_ZN13StreamMessageC1EPh>
 800dcbe:	4623      	mov	r3, r4
	}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd90      	pop	{r4, r7, pc}

0800dcc8 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800dcc8:	b590      	push	{r4, r7, lr}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
		StreamMessage* sm = new StreamMessage(&in->duty, 0, 100);
 800dcd0:	2018      	movs	r0, #24
 800dcd2:	f012 fc97 	bl	8020604 <_Znwj>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461c      	mov	r4, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	33bc      	adds	r3, #188	; 0xbc
 800dcde:	eddf 0a08 	vldr	s1, [pc, #32]	; 800dd00 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x38>
 800dce2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dd04 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x3c>
 800dce6:	4619      	mov	r1, r3
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7ff ff27 	bl	800db3c <_ZN13StreamMessageC1EPfff>
 800dcee:	60fc      	str	r4, [r7, #12]
		sm->ic = in;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
		return sm;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
	}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd90      	pop	{r4, r7, pc}
 800dd00:	42c80000 	.word	0x42c80000
 800dd04:	00000000 	.word	0x00000000

0800dd08 <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	799b      	ldrb	r3, [r3, #6]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d112      	bne.n	800dd40 <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800dd1a:	463b      	mov	r3, r7
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4822      	ldr	r0, [pc, #136]	; (800dda8 <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800dd20:	f7f2 fe1e 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dd24:	4603      	mov	r3, r0
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff ff9d 	bl	800dc68 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	60fb      	str	r3, [r7, #12]
 800dd32:	f107 030c 	add.w	r3, r7, #12
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f002 f981 	bl	8010040 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800dd3e:	e02e      	b.n	800dd9e <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	799b      	ldrb	r3, [r3, #6]
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d112      	bne.n	800dd6e <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800dd48:	463b      	mov	r3, r7
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4817      	ldr	r0, [pc, #92]	; (800ddac <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800dd4e:	f7f8 fcc5 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dd52:	4603      	mov	r3, r0
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff ffa2 	bl	800dca0 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	613b      	str	r3, [r7, #16]
 800dd60:	f107 0310 	add.w	r3, r7, #16
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f002 f96a 	bl	8010040 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dd6c:	e017      	b.n	800dd9e <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	799b      	ldrb	r3, [r3, #6]
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d112      	bne.n	800dd9c <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800dd76:	463b      	mov	r3, r7
 800dd78:	4619      	mov	r1, r3
 800dd7a:	480d      	ldr	r0, [pc, #52]	; (800ddb0 <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800dd7c:	f7fb fe38 	bl	80099f0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dd80:	4603      	mov	r3, r0
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff ff9f 	bl	800dcc8 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	f107 0314 	add.w	r3, r7, #20
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f002 f953 	bl	8010040 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dd9a:	e000      	b.n	800dd9e <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800dd9c:	bf00      	nop
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	240000bc 	.word	0x240000bc
 800ddac:	2400011c 	.word	0x2400011c
 800ddb0:	24000164 	.word	0x24000164

0800ddb4 <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	2b04      	cmp	r3, #4
 800ddc2:	d901      	bls.n	800ddc8 <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e003      	b.n	800ddd0 <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800ddc8:	4a04      	ldr	r2, [pc, #16]	; (800dddc <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	7013      	strb	r3, [r2, #0]
		return true;
 800ddce:	2301      	movs	r3, #1
	}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	24000001 	.word	0x24000001

0800dde0 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	bf0c      	ite	eq
 800ddf4:	2301      	moveq	r3, #1
 800ddf6:	2300      	movne	r3, #0
 800ddf8:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	695a      	ldr	r2, [r3, #20]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4413      	add	r3, r2
 800de02:	2b40      	cmp	r3, #64	; 0x40
 800de04:	bf8c      	ite	hi
 800de06:	2301      	movhi	r3, #1
 800de08:	2300      	movls	r3, #0
 800de0a:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	429a      	cmp	r2, r3
 800de14:	bf0c      	ite	eq
 800de16:	2301      	moveq	r3, #1
 800de18:	2300      	movne	r3, #0
 800de1a:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	f083 0301 	eor.w	r3, r3, #1
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d108      	bne.n	800de3a <_ZN6Stream12is_availableEjj+0x5a>
 800de28:	7d7b      	ldrb	r3, [r7, #21]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <_ZN6Stream12is_availableEjj+0x5e>
 800de2e:	7dbb      	ldrb	r3, [r7, #22]
 800de30:	f083 0301 	eor.w	r3, r3, #1
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <_ZN6Stream12is_availableEjj+0x5e>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e000      	b.n	800de40 <_ZN6Stream12is_availableEjj+0x60>
 800de3e:	2300      	movs	r3, #0
	}
 800de40:	4618      	mov	r0, r3
 800de42:	371c      	adds	r7, #28
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <_ZN6Stream16send_ok_responseEht>:

	void send_ok_response(uint8_t offset, uint16_t response_code){
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
 800de58:	4613      	mov	r3, r2
 800de5a:	803b      	strh	r3, [r7, #0]
		can->TxData[0] = Can::Ok;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a1b      	ldr	r3, [r3, #32]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	7e12      	ldrb	r2, [r2, #24]
 800de6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	78fa      	ldrb	r2, [r7, #3]
 800de78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(response_code, 3);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a1b      	ldr	r3, [r3, #32]
 800de80:	8839      	ldrh	r1, [r7, #0]
 800de82:	2203      	movs	r2, #3
 800de84:	4618      	mov	r0, r3
 800de86:	f7f6 ff73 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f002 f904 	bl	80100a8 <_ZNSaIP13StreamMessageED1Ev>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f002 f8e7 	bl	8010088 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff ffeb 	bl	800deaa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <_ZN6StreamC1EP5TimerP3Can>:
		return true;
	}

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3308      	adds	r3, #8
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff ffe4 	bl	800dec4 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	615a      	str	r2, [r3, #20]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	61da      	str	r2, [r3, #28]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	f107 0314 	add.w	r3, r7, #20
 800df16:	4619      	mov	r1, r3
 800df18:	4808      	ldr	r0, [pc, #32]	; (800df3c <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800df1a:	f002 f904 	bl	8010126 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800df1e:	4b08      	ldr	r3, [pc, #32]	; (800df40 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800df20:	781a      	ldrb	r2, [r3, #0]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800df26:	4b06      	ldr	r3, [pc, #24]	; (800df40 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	3301      	adds	r3, #1
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	4b04      	ldr	r3, [pc, #16]	; (800df40 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800df30:	701a      	strb	r2, [r3, #0]
	}
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	24000180 	.word	0x24000180
 800df40:	24000000 	.word	0x24000000

0800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800df5a:	b590      	push	{r4, r7, lr}
 800df5c:	b083      	sub	sp, #12
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff ffed 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800df6a:	4603      	mov	r3, r0
 800df6c:	681c      	ldr	r4, [r3, #0]
 800df6e:	6838      	ldr	r0, [r7, #0]
 800df70:	f7ff ffe8 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800df74:	4603      	mov	r3, r0
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	429c      	cmp	r4, r3
 800df7a:	bf0c      	ite	eq
 800df7c:	2301      	moveq	r3, #1
 800df7e:	2300      	movne	r3, #0
 800df80:	b2db      	uxtb	r3, r3
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	bd90      	pop	{r4, r7, pc}

0800df8a <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800df8a:	b480      	push	{r7}
 800df8c:	b083      	sub	sp, #12
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
	++_M_current;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	601a      	str	r2, [r3, #0]
	return *this;
 800df9c:	687b      	ldr	r3, [r7, #4]
      }
 800df9e:	4618      	mov	r0, r3
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dfaa:	b480      	push	{r7}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	370c      	adds	r7, #12
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b088      	sub	sp, #32
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	3350      	adds	r3, #80	; 0x50
 800dfd4:	2240      	movs	r2, #64	; 0x40
 800dfd6:	21ff      	movs	r1, #255	; 0xff
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f012 fc67 	bl	80208ac <memset>
		for(auto message : messages){
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	61bb      	str	r3, [r7, #24]
 800dfe4:	69b8      	ldr	r0, [r7, #24]
 800dfe6:	f002 f8af 	bl	8010148 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800dfea:	4603      	mov	r3, r0
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	69b8      	ldr	r0, [r7, #24]
 800dff0:	f002 f8ba 	bl	8010168 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800dff4:	4603      	mov	r3, r0
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	f107 020c 	add.w	r2, r7, #12
 800dffc:	f107 0310 	add.w	r3, r7, #16
 800e000:	4611      	mov	r1, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff ffa9 	bl	800df5a <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e008:	4603      	mov	r3, r0
 800e00a:	f083 0301 	eor.w	r3, r3, #1
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d01b      	beq.n	800e04c <_ZN6Stream17send_all_messagesEv+0x8a>
 800e014:	f107 0310 	add.w	r3, r7, #16
 800e018:	4618      	mov	r0, r3
 800e01a:	f7ff ffc6 	bl	800dfaa <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800e01e:	4603      	mov	r3, r0
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a1a      	ldr	r2, [r3, #32]
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	3350      	adds	r3, #80	; 0x50
 800e02c:	4413      	add	r3, r2
 800e02e:	4619      	mov	r1, r3
 800e030:	6978      	ldr	r0, [r7, #20]
 800e032:	f7ff fdc1 	bl	800dbb8 <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	69fa      	ldr	r2, [r7, #28]
 800e03c:	4413      	add	r3, r2
 800e03e:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800e040:	f107 0310 	add.w	r3, r7, #16
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff ffa0 	bl	800df8a <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800e04a:	e7d5      	b.n	800dff8 <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, this->size);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a18      	ldr	r0, [r3, #32]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7e1b      	ldrb	r3, [r3, #24]
 800e054:	b299      	uxth	r1, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	461a      	mov	r2, r3
 800e05c:	f7f6 fe88 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800e060:	bf00      	nop
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff ffa4 	bl	800dfc2 <_ZN6Stream17send_all_messagesEv>
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <_ZN6Stream11add_messageEmP13StreamMessaget>:
	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
 800e082:	b590      	push	{r4, r7, lr}
 800e084:	b089      	sub	sp, #36	; 0x24
 800e086:	af00      	add	r7, sp, #0
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
 800e08e:	807b      	strh	r3, [r7, #2]
		messages.push_back(message);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3308      	adds	r3, #8
 800e094:	1d3a      	adds	r2, r7, #4
 800e096:	4611      	mov	r1, r2
 800e098:	4618      	mov	r0, r3
 800e09a:	f002 f876 	bl	801018a <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d117      	bne.n	800e0d6 <_ZN6Stream11add_messageEmP13StreamMessaget+0x54>
			state = OCCUPIED;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	69dc      	ldr	r4, [r3, #28]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f002 f88b 	bl	80101d4 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>
 800e0be:	f107 0310 	add.w	r3, r7, #16
 800e0c2:	68ba      	ldr	r2, [r7, #8]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f7ff fc92 	bl	800d9f0 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e0cc:	f107 0310 	add.w	r3, r7, #16
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff fb6f 	bl	800d7b4 <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	68ba      	ldr	r2, [r7, #8]
 800e0da:	605a      	str	r2, [r3, #4]
		send_ok_response(size, response_code);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	887a      	ldrh	r2, [r7, #2]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f7ff feb0 	bl	800de4c <_ZN6Stream16send_ok_responseEht>
 		size += message->size;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	695a      	ldr	r2, [r3, #20]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	441a      	add	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	615a      	str	r2, [r3, #20]
	}
 800e0fa:	bf00      	nop
 800e0fc:	3724      	adds	r7, #36	; 0x24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}

0800e102 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e102:	b480      	push	{r7}
 800e104:	b083      	sub	sp, #12
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	791b      	ldrb	r3, [r3, #4]
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7ff ffed 	bl	800e102 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e128:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d004      	beq.n	800e138 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f002 f886 	bl	8010240 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e134:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e136:	e001      	b.n	800e13c <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e138:	f7f6 fc57 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e13c:	4618      	mov	r0, r3
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4618      	mov	r0, r3
 800e150:	370c      	adds	r7, #12
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr

0800e15a <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e15a:	b590      	push	{r4, r7, lr}
 800e15c:	b083      	sub	sp, #12
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff ffed 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e16a:	4603      	mov	r3, r0
 800e16c:	681c      	ldr	r4, [r3, #0]
 800e16e:	6838      	ldr	r0, [r7, #0]
 800e170:	f7ff ffe8 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e174:	4603      	mov	r3, r0
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	429c      	cmp	r4, r3
 800e17a:	bf0c      	ite	eq
 800e17c:	2301      	moveq	r3, #1
 800e17e:	2300      	movne	r3, #0
 800e180:	b2db      	uxtb	r3, r3
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	bd90      	pop	{r4, r7, pc}

0800e18a <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e18a:	b480      	push	{r7}
 800e18c:	b083      	sub	sp, #12
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	1d1a      	adds	r2, r3, #4
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	601a      	str	r2, [r3, #0]
	return *this;
 800e19c:	687b      	ldr	r3, [r7, #4]
      }
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e1aa:	b480      	push	{r7}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <_ZN6Stream10add_streamEjP3Pint>:

	static bool add_stream(unsigned int frequency, Pin* pin, uint16_t response_code) {
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b08c      	sub	sp, #48	; 0x30
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	80fb      	strh	r3, [r7, #6]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e1d2:	f107 031c 	add.w	r3, r7, #28
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fd95 	bl	800dd08 <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e1de:	f107 031c 	add.w	r3, r7, #28
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f002 f820 	bl	8010228 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d041      	beq.n	800e272 <_ZN6Stream10add_streamEjP3Pint+0xae>
			StreamMessage* message = message_optional.value();
 800e1ee:	f107 031c 	add.w	r3, r7, #28
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff ff91 	bl	800e11a <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(auto s : streams){
 800e1fe:	4b1f      	ldr	r3, [pc, #124]	; (800e27c <_ZN6Stream10add_streamEjP3Pint+0xb8>)
 800e200:	62bb      	str	r3, [r7, #40]	; 0x28
 800e202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e204:	f002 f829 	bl	801025a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e208:	4603      	mov	r3, r0
 800e20a:	61bb      	str	r3, [r7, #24]
 800e20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e20e:	f002 f834 	bl	801027a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e212:	4603      	mov	r3, r0
 800e214:	617b      	str	r3, [r7, #20]
 800e216:	f107 0214 	add.w	r2, r7, #20
 800e21a:	f107 0318 	add.w	r3, r7, #24
 800e21e:	4611      	mov	r1, r2
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff ff9a 	bl	800e15a <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e226:	4603      	mov	r3, r0
 800e228:	f083 0301 	eor.w	r3, r3, #1
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d01f      	beq.n	800e272 <_ZN6Stream10add_streamEjP3Pint+0xae>
 800e232:	f107 0318 	add.w	r3, r7, #24
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff ffb7 	bl	800e1aa <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e23c:	4603      	mov	r3, r0
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	627b      	str	r3, [r7, #36]	; 0x24
				if(s->is_available(frequency, message->size)){
 800e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	461a      	mov	r2, r3
 800e248:	68f9      	ldr	r1, [r7, #12]
 800e24a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e24c:	f7ff fdc8 	bl	800dde0 <_ZN6Stream12is_availableEjj>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <_ZN6Stream10add_streamEjP3Pint+0xa2>
					s->add_message(frequency, message, response_code);
 800e256:	88fb      	ldrh	r3, [r7, #6]
 800e258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e25a:	68f9      	ldr	r1, [r7, #12]
 800e25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e25e:	f7ff ff10 	bl	800e082 <_ZN6Stream11add_messageEmP13StreamMessaget>
					return true;
 800e262:	2301      	movs	r3, #1
 800e264:	e006      	b.n	800e274 <_ZN6Stream10add_streamEjP3Pint+0xb0>
			for(auto s : streams){
 800e266:	f107 0318 	add.w	r3, r7, #24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff ff8d 	bl	800e18a <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e270:	e7d1      	b.n	800e216 <_ZN6Stream10add_streamEjP3Pint+0x52>
				}
			}
		}
		return false;
 800e272:	2300      	movs	r3, #0
	}
 800e274:	4618      	mov	r0, r3
 800e276:	3730      	adds	r7, #48	; 0x30
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	24000180 	.word	0x24000180

0800e280 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e284:	f7fb fa70 	bl	8009768 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e288:	f7f5 f87c 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e28c:	f7f2 fa06 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e290:	f7f6 fcd2 	bl	8004c38 <_ZN3Can14start_all_cansEv>
}
 800e294:	bf00      	nop
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7fb fa91 	bl	80097c8 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e2a6:	bf00      	nop
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e2b6:	f7f2 fa21 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e2ba:	bf00      	nop
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b082      	sub	sp, #8
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fbfc 	bl	800dac8 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e2d0:	bf00      	nop
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800e2e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e2e6:	4805      	ldr	r0, [pc, #20]	; (800e2fc <HAL_FDCAN_RxFifo0Callback+0x24>)
 800e2e8:	f00c fe3b 	bl	801af62 <HAL_GPIO_TogglePin>
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7f6 fe74 	bl	8004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	58021800 	.word	0x58021800

0800e300 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	791b      	ldrb	r3, [r3, #4]
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff ffed 	bl	800e300 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e326:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f002 f895 	bl	801045c <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e332:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e334:	e001      	b.n	800e33a <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e336:	f7f6 fb58 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e33a:	4618      	mov	r0, r3
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <_Z23read_analog_in_callbackv>:

// MESSAGE CALLBACKS

void read_analog_in_callback(){
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e34a:	4b14      	ldr	r3, [pc, #80]	; (800e39c <_Z23read_analog_in_callbackv+0x58>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b29a      	uxth	r2, r3
 800e350:	1d3b      	adds	r3, r7, #4
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7fe f9b1 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e35a:	1d3b      	adds	r3, r7, #4
 800e35c:	4618      	mov	r0, r3
 800e35e:	f002 f871 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d016      	beq.n	800e396 <_Z23read_analog_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e368:	1d3b      	adds	r3, r7, #4
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff ffd4 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e370:	4603      	mov	r3, r0
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	603b      	str	r3, [r7, #0]
		AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e376:	463b      	mov	r3, r7
 800e378:	4619      	mov	r1, r3
 800e37a:	4809      	ldr	r0, [pc, #36]	; (800e3a0 <_Z23read_analog_in_callbackv+0x5c>)
 800e37c:	f7f2 faf0 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e380:	4603      	mov	r3, r0
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_ANALOG_IN_REPLY, (uint8_t*) &in->voltage, sizeof(float));
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f103 0214 	add.w	r2, r3, #20
 800e38c:	2304      	movs	r3, #4
 800e38e:	215d      	movs	r1, #93	; 0x5d
 800e390:	4804      	ldr	r0, [pc, #16]	; (800e3a4 <_Z23read_analog_in_callbackv+0x60>)
 800e392:	f7f6 fc95 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	24001538 	.word	0x24001538
 800e3a0:	240000bc 	.word	0x240000bc
 800e3a4:	24001468 	.word	0x24001468

0800e3a8 <_Z24read_digital_in_callbackv>:

void read_digital_in_callback(){
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e3ae:	4b14      	ldr	r3, [pc, #80]	; (800e400 <_Z24read_digital_in_callbackv+0x58>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	1d3b      	adds	r3, r7, #4
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe f97f 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e3be:	1d3b      	adds	r3, r7, #4
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f002 f83f 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d016      	beq.n	800e3fa <_Z24read_digital_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e3cc:	1d3b      	adds	r3, r7, #4
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7ff ffa2 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	603b      	str	r3, [r7, #0]
		DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e3da:	463b      	mov	r3, r7
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4809      	ldr	r0, [pc, #36]	; (800e404 <_Z24read_digital_in_callbackv+0x5c>)
 800e3e0:	f7f8 f97c 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_DIGITAL_IN_REPLY, (uint8_t*) &in->state, sizeof(uint8_t));
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f103 0208 	add.w	r2, r3, #8
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	215e      	movs	r1, #94	; 0x5e
 800e3f4:	4804      	ldr	r0, [pc, #16]	; (800e408 <_Z24read_digital_in_callbackv+0x60>)
 800e3f6:	f7f6 fc63 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	24001538 	.word	0x24001538
 800e404:	2400011c 	.word	0x2400011c
 800e408:	24001468 	.word	0x24001468

0800e40c <_Z27read_input_capture_callbackv>:

int MSG_INDEX = 0;
void read_input_capture_callback(){
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
	MSG_INDEX += 1;
 800e412:	4b18      	ldr	r3, [pc, #96]	; (800e474 <_Z27read_input_capture_callbackv+0x68>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	4a16      	ldr	r2, [pc, #88]	; (800e474 <_Z27read_input_capture_callbackv+0x68>)
 800e41a:	6013      	str	r3, [r2, #0]
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e41c:	4b16      	ldr	r3, [pc, #88]	; (800e478 <_Z27read_input_capture_callbackv+0x6c>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	b29a      	uxth	r2, r3
 800e422:	1d3b      	adds	r3, r7, #4
 800e424:	4611      	mov	r1, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe f948 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e42c:	1d3b      	adds	r3, r7, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f002 f808 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d019      	beq.n	800e46e <_Z27read_input_capture_callbackv+0x62>
		Pin* pin = pin_optional.value();
 800e43a:	1d3b      	adds	r3, r7, #4
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7ff ff6b 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e442:	4603      	mov	r3, r0
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	603b      	str	r3, [r7, #0]
		InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e448:	463b      	mov	r3, r7
 800e44a:	4619      	mov	r1, r3
 800e44c:	480b      	ldr	r0, [pc, #44]	; (800e47c <_Z27read_input_capture_callbackv+0x70>)
 800e44e:	f7fb facf 	bl	80099f0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e452:	4603      	mov	r3, r0
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
		in->get_duty();
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f7fb fa03 	bl	8009864 <_ZN12InputCapture8get_dutyEv>
		main_can.send_message(ID_READ_INPUT_CAPTURE_REPLY, (uint8_t*) &in->duty, sizeof(float));
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800e464:	2304      	movs	r3, #4
 800e466:	215c      	movs	r1, #92	; 0x5c
 800e468:	4805      	ldr	r0, [pc, #20]	; (800e480 <_Z27read_input_capture_callbackv+0x74>)
 800e46a:	f7f6 fc29 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	240016c8 	.word	0x240016c8
 800e478:	24001538 	.word	0x24001538
 800e47c:	24000164 	.word	0x24000164
 800e480:	24001468 	.word	0x24001468

0800e484 <_Z29stream_input_capture_callbackv>:
		if(pin->mode == INPUT_CAPTURE)
			id = ID_STREAM_INPUT_CAPTURE_REPLY;
	}
}

void stream_input_capture_callback(){
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e48a:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <_Z29stream_input_capture_callbackv+0x48>)
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	b29a      	uxth	r2, r3
 800e490:	1d3b      	adds	r3, r7, #4
 800e492:	4611      	mov	r1, r2
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe f911 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e49a:	1d3b      	adds	r3, r7, #4
 800e49c:	4618      	mov	r0, r3
 800e49e:	f001 ffd1 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00d      	beq.n	800e4c4 <_Z29stream_input_capture_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e4a8:	1d3b      	adds	r3, r7, #4
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7ff ff34 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_INPUT_CAPTURE_REPLY);
 800e4b6:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <_Z29stream_input_capture_callbackv+0x4c>)
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	225f      	movs	r2, #95	; 0x5f
 800e4bc:	68f9      	ldr	r1, [r7, #12]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7ff fe80 	bl	800e1c4 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	24001540 	.word	0x24001540
 800e4d0:	24001542 	.word	0x24001542

0800e4d4 <_Z25strean_analog_in_callbackv>:

void strean_analog_in_callback(){
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e4da:	4b10      	ldr	r3, [pc, #64]	; (800e51c <_Z25strean_analog_in_callbackv+0x48>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	1d3b      	adds	r3, r7, #4
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fe f8e9 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e4ea:	1d3b      	adds	r3, r7, #4
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 ffa9 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00d      	beq.n	800e514 <_Z25strean_analog_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e4f8:	1d3b      	adds	r3, r7, #4
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ff0c 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e500:	4603      	mov	r3, r0
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_ANALOG_IN_REPLY);
 800e506:	4b06      	ldr	r3, [pc, #24]	; (800e520 <_Z25strean_analog_in_callbackv+0x4c>)
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	2260      	movs	r2, #96	; 0x60
 800e50c:	68f9      	ldr	r1, [r7, #12]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7ff fe58 	bl	800e1c4 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e514:	bf00      	nop
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	24001540 	.word	0x24001540
 800e520:	24001542 	.word	0x24001542

0800e524 <_Z26stream_digital_in_callbackv>:

void stream_digital_in_callback(){
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e52a:	4b10      	ldr	r3, [pc, #64]	; (800e56c <_Z26stream_digital_in_callbackv+0x48>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b29a      	uxth	r2, r3
 800e530:	1d3b      	adds	r3, r7, #4
 800e532:	4611      	mov	r1, r2
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe f8c1 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e53a:	1d3b      	adds	r3, r7, #4
 800e53c:	4618      	mov	r0, r3
 800e53e:	f001 ff81 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00d      	beq.n	800e564 <_Z26stream_digital_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e548:	1d3b      	adds	r3, r7, #4
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7ff fee4 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e550:	4603      	mov	r3, r0
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_DIGITAL_IN_REPLY);
 800e556:	4b06      	ldr	r3, [pc, #24]	; (800e570 <_Z26stream_digital_in_callbackv+0x4c>)
 800e558:	881b      	ldrh	r3, [r3, #0]
 800e55a:	2261      	movs	r2, #97	; 0x61
 800e55c:	68f9      	ldr	r1, [r7, #12]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7ff fe30 	bl	800e1c4 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	24001540 	.word	0x24001540
 800e570:	24001542 	.word	0x24001542

0800e574 <_Z19write_once_callbackv>:


void write_once_callback(){
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e57a:	4b2f      	ldr	r3, [pc, #188]	; (800e638 <_Z19write_once_callbackv+0xc4>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	b29a      	uxth	r2, r3
 800e580:	f107 0308 	add.w	r3, r7, #8
 800e584:	4611      	mov	r1, r2
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe f898 	bl	800c6bc <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4618      	mov	r0, r3
 800e592:	f001 ff57 	bl	8010444 <_ZNKSt8optionalIP3PinEcvbEv>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d04a      	beq.n	800e632 <_Z19write_once_callbackv+0xbe>
		Pin* pin = pin_optional.value();
 800e59c:	f107 0308 	add.w	r3, r7, #8
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff feb9 	bl	800e318 <_ZNRSt8optionalIP3PinE5valueEv>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	799b      	ldrb	r3, [r3, #6]
 800e5b0:	2b04      	cmp	r3, #4
 800e5b2:	d109      	bne.n	800e5c8 <_Z19write_once_callbackv+0x54>
 800e5b4:	1d3b      	adds	r3, r7, #4
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4820      	ldr	r0, [pc, #128]	; (800e63c <_Z19write_once_callbackv+0xc8>)
 800e5ba:	f001 ff5c 	bl	8010476 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <_Z19write_once_callbackv+0x54>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e000      	b.n	800e5ca <_Z19write_once_callbackv+0x56>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00f      	beq.n	800e5ee <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e5ce:	1d3b      	adds	r3, r7, #4
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	481a      	ldr	r0, [pc, #104]	; (800e63c <_Z19write_once_callbackv+0xc8>)
 800e5d4:	f7f9 fc48 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e5de:	4b18      	ldr	r3, [pc, #96]	; (800e640 <_Z19write_once_callbackv+0xcc>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6938      	ldr	r0, [r7, #16]
 800e5e8:	f7f9 fb8c 	bl	8007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800e5ec:	e021      	b.n	800e632 <_Z19write_once_callbackv+0xbe>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)) {
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	799b      	ldrb	r3, [r3, #6]
 800e5f2:	2b05      	cmp	r3, #5
 800e5f4:	d109      	bne.n	800e60a <_Z19write_once_callbackv+0x96>
 800e5f6:	1d3b      	adds	r3, r7, #4
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4812      	ldr	r0, [pc, #72]	; (800e644 <_Z19write_once_callbackv+0xd0>)
 800e5fc:	f001 ff5d 	bl	80104ba <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d001      	beq.n	800e60a <_Z19write_once_callbackv+0x96>
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <_Z19write_once_callbackv+0x98>
 800e60a:	2300      	movs	r3, #0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d010      	beq.n	800e632 <_Z19write_once_callbackv+0xbe>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e610:	1d3b      	adds	r3, r7, #4
 800e612:	4619      	mov	r1, r3
 800e614:	480b      	ldr	r0, [pc, #44]	; (800e644 <_Z19write_once_callbackv+0xd0>)
 800e616:	f7f4 ff5f 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e61a:	4603      	mov	r3, r0
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e620:	4b07      	ldr	r3, [pc, #28]	; (800e640 <_Z19write_once_callbackv+0xcc>)
 800e622:	edd3 7a00 	vldr	s15, [r3]
 800e626:	eeb0 0a67 	vmov.f32	s0, s15
 800e62a:	6978      	ldr	r0, [r7, #20]
 800e62c:	f7f4 fde2 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			return;
 800e630:	bf00      	nop
		}
	}
}
 800e632:	3718      	adds	r7, #24
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	24001539 	.word	0x24001539
 800e63c:	24000140 	.word	0x24000140
 800e640:	2400153c 	.word	0x2400153c
 800e644:	240000e0 	.word	0x240000e0

0800e648 <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e64c:	4b0b      	ldr	r3, [pc, #44]	; (800e67c <_Z22set_precision_callbackv+0x34>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fbaf 	bl	800ddb4 <_ZN13StreamMessage18set_precision_modeEh>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d009      	beq.n	800e670 <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e65c:	4b08      	ldr	r3, [pc, #32]	; (800e680 <_Z22set_precision_callbackv+0x38>)
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(ID_SET_PRECISION,1);
 800e664:	2201      	movs	r2, #1
 800e666:	2159      	movs	r1, #89	; 0x59
 800e668:	4805      	ldr	r0, [pc, #20]	; (800e680 <_Z22set_precision_callbackv+0x38>)
 800e66a:	f7f6 fb81 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e66e:	e004      	b.n	800e67a <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot change precision");
 800e670:	4a04      	ldr	r2, [pc, #16]	; (800e684 <_Z22set_precision_callbackv+0x3c>)
 800e672:	215b      	movs	r1, #91	; 0x5b
 800e674:	4802      	ldr	r0, [pc, #8]	; (800e680 <_Z22set_precision_callbackv+0x38>)
 800e676:	f7f6 fbbe 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	24001544 	.word	0x24001544
 800e680:	24001468 	.word	0x24001468
 800e684:	08020cd0 	.word	0x08020cd0

0800e688 <_Z22cancel_stream_callbackv>:

void cancel_stream_callback(){
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e68c:	f009 f84f 	bl	801772e <HAL_NVIC_SystemReset>
}
 800e690:	bf00      	nop
 800e692:	bd80      	pop	{r7, pc}

0800e694 <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			//main_can.send_ok_message();
		}, 1000, Timer::MICROSEONDS);
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e6b0:	4b17      	ldr	r3, [pc, #92]	; (800e710 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	6978      	ldr	r0, [r7, #20]
 800e6b6:	f7f8 fd5a 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	6978      	ldr	r0, [r7, #20]
 800e6c0:	f7f8 fa3a 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	60bb      	str	r3, [r7, #8]
 800e6c8:	f107 0208 	add.w	r2, r7, #8
 800e6cc:	f107 030c 	add.w	r3, r7, #12
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 f81e 	bl	800e714 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f083 0301 	eor.w	r3, r3, #1
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d010      	beq.n	800e706 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7f8 fdca 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	613b      	str	r3, [r7, #16]
				in->get_value();
 800e6f4:	6938      	ldr	r0, [r7, #16]
 800e6f6:	f7f7 ff57 	bl	80065a8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800e6fa:	f107 030c 	add.w	r3, r7, #12
 800e6fe:	4618      	mov	r0, r3
 800e700:	f000 f820 	bl	800e744 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800e704:	e7e0      	b.n	800e6c8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800e706:	bf00      	nop
 800e708:	3718      	adds	r7, #24
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	24000110 	.word	0x24000110

0800e714 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7f8 fd72 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e724:	4603      	mov	r3, r0
 800e726:	681c      	ldr	r4, [r3, #0]
 800e728:	6838      	ldr	r0, [r7, #0]
 800e72a:	f7f8 fd6d 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e72e:	4603      	mov	r3, r0
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	429c      	cmp	r4, r3
 800e734:	bf0c      	ite	eq
 800e736:	2301      	moveq	r3, #1
 800e738:	2300      	movne	r3, #0
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	4618      	mov	r0, r3
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}

0800e744 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	1d1a      	adds	r2, r3, #4
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	601a      	str	r2, [r3, #0]
	return *this;
 800e756:	687b      	ldr	r3, [r7, #4]
      }
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800e764:	b5b0      	push	{r4, r5, r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
		start();
 800e76a:	f7ff fd89 	bl	800e280 <_Z5startv>
		timer_7.execute_every([](){
 800e76e:	463b      	mov	r3, r7
 800e770:	4629      	mov	r1, r5
 800e772:	4618      	mov	r0, r3
 800e774:	f001 fec4 	bl	8010500 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800e778:	4639      	mov	r1, r7
 800e77a:	2302      	movs	r3, #2
 800e77c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e780:	480e      	ldr	r0, [pc, #56]	; (800e7bc <_ZN8TUDTests5setupEv+0x58>)
 800e782:	f7ff f913 	bl	800d9ac <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e786:	463b      	mov	r3, r7
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff f813 	bl	800d7b4 <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800e78e:	f107 0310 	add.w	r3, r7, #16
 800e792:	4621      	mov	r1, r4
 800e794:	4618      	mov	r0, r3
 800e796:	f001 fedd 	bl	8010554 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800e79a:	f107 0110 	add.w	r1, r7, #16
 800e79e:	2302      	movs	r3, #2
 800e7a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7a4:	4806      	ldr	r0, [pc, #24]	; (800e7c0 <_ZN8TUDTests5setupEv+0x5c>)
 800e7a6:	f7ff f901 	bl	800d9ac <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e7aa:	f107 0310 	add.w	r3, r7, #16
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7ff f800 	bl	800d7b4 <_ZNSt8functionIFvvEED1Ev>
	}
 800e7b4:	bf00      	nop
 800e7b6:	3720      	adds	r7, #32
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e7bc:	240013a8 	.word	0x240013a8
 800e7c0:	240013c8 	.word	0x240013c8

0800e7c4 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800e7c4:	b480      	push	{r7}
 800e7c6:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800e7c8:	bf00      	nop
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800e7d6:	f006 fd65 	bl	80152a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e7da:	f000 f82f 	bl	800e83c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800e7de:	f000 f8b5 	bl	800e94c <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e7e2:	f001 fa1b 	bl	800fc1c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e7e6:	f001 f9f9 	bl	800fbdc <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800e7ea:	f000 fef9 	bl	800f5e0 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800e7ee:	f001 f875 	bl	800f8dc <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800e7f2:	f000 f9d5 	bl	800eba0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800e7f6:	f000 fa93 	bl	800ed20 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800e7fa:	f000 fb4f 	bl	800ee9c <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800e7fe:	f001 f92d 	bl	800fa5c <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800e802:	f000 f963 	bl	800eacc <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800e806:	f000 fc03 	bl	800f010 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800e80a:	f000 f8d7 	bl	800e9bc <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800e80e:	f000 fde9 	bl	800f3e4 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800e812:	f000 fd67 	bl	800f2e4 <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800e816:	f000 fcb5 	bl	800f184 <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800e81a:	f000 fda3 	bl	800f364 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800e81e:	f000 ff55 	bl	800f6cc <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800e822:	f000 ff7b 	bl	800f71c <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800e826:	f000 ffa1 	bl	800f76c <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800e82a:	f000 ffff 	bl	800f82c <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800e82e:	f001 f829 	bl	800f884 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800e832:	f7ff ff97 	bl	800e764 <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800e836:	f7ff ffc5 	bl	800e7c4 <_ZN8TUDTests4loopEv>
 800e83a:	e7fc      	b.n	800e836 <main+0x64>

0800e83c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b09c      	sub	sp, #112	; 0x70
 800e840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e846:	224c      	movs	r2, #76	; 0x4c
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f012 f82e 	bl	80208ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e850:	1d3b      	adds	r3, r7, #4
 800e852:	2220      	movs	r2, #32
 800e854:	2100      	movs	r1, #0
 800e856:	4618      	mov	r0, r3
 800e858:	f012 f828 	bl	80208ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e85c:	2002      	movs	r0, #2
 800e85e:	f00c fb9b 	bl	801af98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e862:	2300      	movs	r3, #0
 800e864:	603b      	str	r3, [r7, #0]
 800e866:	4b37      	ldr	r3, [pc, #220]	; (800e944 <_Z18SystemClock_Configv+0x108>)
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	4a36      	ldr	r2, [pc, #216]	; (800e944 <_Z18SystemClock_Configv+0x108>)
 800e86c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e870:	6193      	str	r3, [r2, #24]
 800e872:	4b34      	ldr	r3, [pc, #208]	; (800e944 <_Z18SystemClock_Configv+0x108>)
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e87a:	603b      	str	r3, [r7, #0]
 800e87c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800e87e:	4b31      	ldr	r3, [pc, #196]	; (800e944 <_Z18SystemClock_Configv+0x108>)
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e88a:	bf14      	ite	ne
 800e88c:	2301      	movne	r3, #1
 800e88e:	2300      	moveq	r3, #0
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d000      	beq.n	800e898 <_Z18SystemClock_Configv+0x5c>
 800e896:	e7f2      	b.n	800e87e <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800e898:	4b2b      	ldr	r3, [pc, #172]	; (800e948 <_Z18SystemClock_Configv+0x10c>)
 800e89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e89c:	f023 0303 	bic.w	r3, r3, #3
 800e8a0:	4a29      	ldr	r2, [pc, #164]	; (800e948 <_Z18SystemClock_Configv+0x10c>)
 800e8a2:	f043 0302 	orr.w	r3, r3, #2
 800e8a6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e8ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e8b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e8ba:	2304      	movs	r3, #4
 800e8bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800e8be:	f240 1313 	movw	r3, #275	; 0x113
 800e8c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e8c8:	2304      	movs	r3, #4
 800e8ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800e8d0:	2304      	movs	r3, #4
 800e8d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f00c fb93 	bl	801b00c <HAL_RCC_OscConfig>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	bf14      	ite	ne
 800e8ec:	2301      	movne	r3, #1
 800e8ee:	2300      	moveq	r3, #0
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800e8f6:	f001 facd 	bl	800fe94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e8fa:	233f      	movs	r3, #63	; 0x3f
 800e8fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e8fe:	2303      	movs	r3, #3
 800e900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800e902:	2300      	movs	r3, #0
 800e904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800e906:	2308      	movs	r3, #8
 800e908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800e90a:	2340      	movs	r3, #64	; 0x40
 800e90c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800e90e:	2340      	movs	r3, #64	; 0x40
 800e910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800e912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800e918:	2340      	movs	r3, #64	; 0x40
 800e91a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e91c:	1d3b      	adds	r3, r7, #4
 800e91e:	2103      	movs	r1, #3
 800e920:	4618      	mov	r0, r3
 800e922:	f00c ff4d 	bl	801b7c0 <HAL_RCC_ClockConfig>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bf14      	ite	ne
 800e92c:	2301      	movne	r3, #1
 800e92e:	2300      	moveq	r3, #0
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800e936:	f001 faad 	bl	800fe94 <Error_Handler>
  }
}
 800e93a:	bf00      	nop
 800e93c:	3770      	adds	r7, #112	; 0x70
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	58024800 	.word	0x58024800
 800e948:	58024400 	.word	0x58024400

0800e94c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b0ae      	sub	sp, #184	; 0xb8
 800e950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e952:	463b      	mov	r3, r7
 800e954:	22b8      	movs	r2, #184	; 0xb8
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f011 ffa7 	bl	80208ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800e95e:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800e962:	f04f 0300 	mov.w	r3, #0
 800e966:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800e96a:	2301      	movs	r3, #1
 800e96c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800e96e:	231e      	movs	r3, #30
 800e970:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800e972:	2304      	movs	r3, #4
 800e974:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800e976:	2304      	movs	r3, #4
 800e978:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800e97a:	2302      	movs	r3, #2
 800e97c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800e97e:	23c0      	movs	r3, #192	; 0xc0
 800e980:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800e982:	2300      	movs	r3, #0
 800e984:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800e986:	2300      	movs	r3, #0
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800e98a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e98e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800e990:	2300      	movs	r3, #0
 800e992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e996:	463b      	mov	r3, r7
 800e998:	4618      	mov	r0, r3
 800e99a:	f00d fa87 	bl	801beac <HAL_RCCEx_PeriphCLKConfig>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bf14      	ite	ne
 800e9a4:	2301      	movne	r3, #1
 800e9a6:	2300      	moveq	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800e9ae:	f001 fa71 	bl	800fe94 <Error_Handler>
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	37b8      	adds	r7, #184	; 0xb8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08c      	sub	sp, #48	; 0x30
 800e9c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800e9c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	605a      	str	r2, [r3, #4]
 800e9cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e9ce:	463b      	mov	r3, r7
 800e9d0:	2224      	movs	r2, #36	; 0x24
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f011 ff69 	bl	80208ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800e9da:	4b39      	ldr	r3, [pc, #228]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9dc:	4a39      	ldr	r2, [pc, #228]	; (800eac4 <_ZL12MX_ADC1_Initv+0x108>)
 800e9de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e9e0:	4b37      	ldr	r3, [pc, #220]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800e9e6:	4b36      	ldr	r3, [pc, #216]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e9ec:	4b34      	ldr	r3, [pc, #208]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e9f2:	4b33      	ldr	r3, [pc, #204]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9f4:	2208      	movs	r2, #8
 800e9f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e9f8:	4b31      	ldr	r3, [pc, #196]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e9fe:	4b30      	ldr	r3, [pc, #192]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800ea04:	4b2e      	ldr	r3, [pc, #184]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea06:	2201      	movs	r2, #1
 800ea08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ea0a:	4b2d      	ldr	r3, [pc, #180]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800ea12:	4b2b      	ldr	r3, [pc, #172]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea14:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800ea18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ea1a:	4b29      	ldr	r3, [pc, #164]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800ea22:	4b27      	ldr	r3, [pc, #156]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea24:	2203      	movs	r2, #3
 800ea26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ea28:	4b25      	ldr	r3, [pc, #148]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800ea2e:	4b24      	ldr	r3, [pc, #144]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800ea34:	4b22      	ldr	r3, [pc, #136]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ea3c:	4820      	ldr	r0, [pc, #128]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea3e:	f006 ffaf 	bl	80159a0 <HAL_ADC_Init>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	bf14      	ite	ne
 800ea48:	2301      	movne	r3, #1
 800ea4a:	2300      	moveq	r3, #0
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d001      	beq.n	800ea56 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800ea52:	f001 fa1f 	bl	800fe94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ea56:	2300      	movs	r3, #0
 800ea58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ea5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4817      	ldr	r0, [pc, #92]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800ea62:	f008 fc69 	bl	8017338 <HAL_ADCEx_MultiModeConfigChannel>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	bf14      	ite	ne
 800ea6c:	2301      	movne	r3, #1
 800ea6e:	2300      	moveq	r3, #0
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800ea76:	f001 fa0d 	bl	800fe94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <_ZL12MX_ADC1_Initv+0x10c>)
 800ea7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ea7e:	2306      	movs	r3, #6
 800ea80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ea86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ea8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800ea94:	2300      	movs	r3, #0
 800ea96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ea9a:	463b      	mov	r3, r7
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4808      	ldr	r0, [pc, #32]	; (800eac0 <_ZL12MX_ADC1_Initv+0x104>)
 800eaa0:	f007 fcba 	bl	8016418 <HAL_ADC_ConfigChannel>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	bf14      	ite	ne
 800eaaa:	2301      	movne	r3, #1
 800eaac:	2300      	moveq	r3, #0
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800eab4:	f001 f9ee 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800eab8:	bf00      	nop
 800eaba:	3730      	adds	r7, #48	; 0x30
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	240016cc 	.word	0x240016cc
 800eac4:	40022000 	.word	0x40022000
 800eac8:	0c900008 	.word	0x0c900008

0800eacc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ead0:	4b31      	ldr	r3, [pc, #196]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ead2:	4a32      	ldr	r2, [pc, #200]	; (800eb9c <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ead4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ead6:	4b30      	ldr	r3, [pc, #192]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ead8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800eadc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800eade:	4b2e      	ldr	r3, [pc, #184]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800eae4:	4b2c      	ldr	r3, [pc, #176]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800eaea:	4b2b      	ldr	r3, [pc, #172]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaec:	2200      	movs	r2, #0
 800eaee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800eaf0:	4b29      	ldr	r3, [pc, #164]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800eaf6:	4b28      	ldr	r3, [pc, #160]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaf8:	2203      	movs	r2, #3
 800eafa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800eafc:	4b26      	ldr	r3, [pc, #152]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eafe:	2202      	movs	r2, #2
 800eb00:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800eb02:	4b25      	ldr	r3, [pc, #148]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb04:	220f      	movs	r2, #15
 800eb06:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800eb08:	4b23      	ldr	r3, [pc, #140]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb0a:	2204      	movs	r2, #4
 800eb0c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800eb0e:	4b22      	ldr	r3, [pc, #136]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb10:	2203      	movs	r2, #3
 800eb12:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800eb14:	4b20      	ldr	r3, [pc, #128]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb16:	2201      	movs	r2, #1
 800eb18:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800eb1a:	4b1f      	ldr	r3, [pc, #124]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800eb20:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb22:	2201      	movs	r2, #1
 800eb24:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800eb26:	4b1c      	ldr	r3, [pc, #112]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800eb2c:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800eb32:	4b19      	ldr	r3, [pc, #100]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800eb38:	4b17      	ldr	r3, [pc, #92]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb3a:	2220      	movs	r2, #32
 800eb3c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800eb3e:	4b16      	ldr	r3, [pc, #88]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb40:	2212      	movs	r2, #18
 800eb42:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800eb44:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800eb4a:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb4c:	2204      	movs	r2, #4
 800eb4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800eb50:	4b11      	ldr	r3, [pc, #68]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb58:	2204      	movs	r2, #4
 800eb5a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800eb5c:	4b0e      	ldr	r3, [pc, #56]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800eb62:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800eb68:	4b0b      	ldr	r3, [pc, #44]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb6a:	2220      	movs	r2, #32
 800eb6c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800eb6e:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800eb74:	4b08      	ldr	r3, [pc, #32]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb76:	2212      	movs	r2, #18
 800eb78:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800eb7a:	4807      	ldr	r0, [pc, #28]	; (800eb98 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eb7c:	f00a febe 	bl	80198fc <HAL_FDCAN_Init>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	bf14      	ite	ne
 800eb86:	2301      	movne	r3, #1
 800eb88:	2300      	moveq	r3, #0
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800eb90:	f001 f980 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800eb94:	bf00      	nop
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	240017b4 	.word	0x240017b4
 800eb9c:	4000a000 	.word	0x4000a000

0800eba0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08c      	sub	sp, #48	; 0x30
 800eba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eba6:	f107 0320 	add.w	r3, r7, #32
 800ebaa:	2200      	movs	r2, #0
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	605a      	str	r2, [r3, #4]
 800ebb0:	609a      	str	r2, [r3, #8]
 800ebb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ebb4:	f107 0314 	add.w	r3, r7, #20
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]
 800ebbc:	605a      	str	r2, [r3, #4]
 800ebbe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ebc0:	1d3b      	adds	r3, r7, #4
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	605a      	str	r2, [r3, #4]
 800ebc8:	609a      	str	r2, [r3, #8]
 800ebca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ebcc:	4b52      	ldr	r3, [pc, #328]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebce:	4a53      	ldr	r2, [pc, #332]	; (800ed1c <_ZL12MX_TIM1_Initv+0x17c>)
 800ebd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ebd2:	4b51      	ldr	r3, [pc, #324]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ebd8:	4b4f      	ldr	r3, [pc, #316]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebda:	2200      	movs	r2, #0
 800ebdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800ebde:	4b4e      	ldr	r3, [pc, #312]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebe0:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ebe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ebe6:	4b4c      	ldr	r3, [pc, #304]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ebec:	4b4a      	ldr	r3, [pc, #296]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ebf2:	4b49      	ldr	r3, [pc, #292]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ebf8:	4847      	ldr	r0, [pc, #284]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ebfa:	f00f fd3d 	bl	801e678 <HAL_TIM_Base_Init>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	bf14      	ite	ne
 800ec04:	2301      	movne	r3, #1
 800ec06:	2300      	moveq	r3, #0
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800ec0e:	f001 f941 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ec12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ec18:	f107 0320 	add.w	r3, r7, #32
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	483e      	ldr	r0, [pc, #248]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ec20:	f010 fcc2 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	bf14      	ite	ne
 800ec2a:	2301      	movne	r3, #1
 800ec2c:	2300      	moveq	r3, #0
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800ec34:	f001 f92e 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800ec38:	4837      	ldr	r0, [pc, #220]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ec3a:	f010 f825 	bl	801ec88 <HAL_TIM_IC_Init>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	bf14      	ite	ne
 800ec44:	2301      	movne	r3, #1
 800ec46:	2300      	moveq	r3, #0
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800ec4e:	f001 f921 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ec56:	2300      	movs	r3, #0
 800ec58:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ec5e:	f107 0314 	add.w	r3, r7, #20
 800ec62:	4619      	mov	r1, r3
 800ec64:	482c      	ldr	r0, [pc, #176]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ec66:	f011 fb6f 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	bf14      	ite	ne
 800ec70:	2301      	movne	r3, #1
 800ec72:	2300      	moveq	r3, #0
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ec7a:	f001 f90b 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ec7e:	230a      	movs	r3, #10
 800ec80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ec82:	2301      	movs	r3, #1
 800ec84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ec86:	2300      	movs	r3, #0
 800ec88:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ec8e:	1d3b      	adds	r3, r7, #4
 800ec90:	2200      	movs	r2, #0
 800ec92:	4619      	mov	r1, r3
 800ec94:	4820      	ldr	r0, [pc, #128]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ec96:	f010 fad6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	bf14      	ite	ne
 800eca0:	2301      	movne	r3, #1
 800eca2:	2300      	moveq	r3, #0
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d001      	beq.n	800ecae <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800ecaa:	f001 f8f3 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ecae:	1d3b      	adds	r3, r7, #4
 800ecb0:	2204      	movs	r2, #4
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	4818      	ldr	r0, [pc, #96]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ecb6:	f010 fac6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	bf14      	ite	ne
 800ecc0:	2301      	movne	r3, #1
 800ecc2:	2300      	moveq	r3, #0
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800ecca:	f001 f8e3 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ecce:	1d3b      	adds	r3, r7, #4
 800ecd0:	2208      	movs	r2, #8
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	4810      	ldr	r0, [pc, #64]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ecd6:	f010 fab6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	bf14      	ite	ne
 800ece0:	2301      	movne	r3, #1
 800ece2:	2300      	moveq	r3, #0
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800ecea:	f001 f8d3 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ecee:	1d3b      	adds	r3, r7, #4
 800ecf0:	220c      	movs	r2, #12
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	4808      	ldr	r0, [pc, #32]	; (800ed18 <_ZL12MX_TIM1_Initv+0x178>)
 800ecf6:	f010 faa6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bf14      	ite	ne
 800ed00:	2301      	movne	r3, #1
 800ed02:	2300      	moveq	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800ed0a:	f001 f8c3 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ed0e:	bf00      	nop
 800ed10:	3730      	adds	r7, #48	; 0x30
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	24001854 	.word	0x24001854
 800ed1c:	40010000 	.word	0x40010000

0800ed20 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08c      	sub	sp, #48	; 0x30
 800ed24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ed26:	f107 0320 	add.w	r3, r7, #32
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	605a      	str	r2, [r3, #4]
 800ed30:	609a      	str	r2, [r3, #8]
 800ed32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ed34:	f107 0314 	add.w	r3, r7, #20
 800ed38:	2200      	movs	r2, #0
 800ed3a:	601a      	str	r2, [r3, #0]
 800ed3c:	605a      	str	r2, [r3, #4]
 800ed3e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ed40:	1d3b      	adds	r3, r7, #4
 800ed42:	2200      	movs	r2, #0
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	605a      	str	r2, [r3, #4]
 800ed48:	609a      	str	r2, [r3, #8]
 800ed4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ed4c:	4b52      	ldr	r3, [pc, #328]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ed54:	4b50      	ldr	r3, [pc, #320]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed5a:	4b4f      	ldr	r3, [pc, #316]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800ed60:	4b4d      	ldr	r3, [pc, #308]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed62:	f04f 32ff 	mov.w	r2, #4294967295
 800ed66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ed68:	4b4b      	ldr	r3, [pc, #300]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ed6e:	4b4a      	ldr	r3, [pc, #296]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ed74:	4848      	ldr	r0, [pc, #288]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed76:	f00f fc7f 	bl	801e678 <HAL_TIM_Base_Init>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	bf14      	ite	ne
 800ed80:	2301      	movne	r3, #1
 800ed82:	2300      	moveq	r3, #0
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800ed8a:	f001 f883 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ed8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed92:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ed94:	f107 0320 	add.w	r3, r7, #32
 800ed98:	4619      	mov	r1, r3
 800ed9a:	483f      	ldr	r0, [pc, #252]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ed9c:	f010 fc04 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	bf14      	ite	ne
 800eda6:	2301      	movne	r3, #1
 800eda8:	2300      	moveq	r3, #0
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800edb0:	f001 f870 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800edb4:	4838      	ldr	r0, [pc, #224]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800edb6:	f00f ff67 	bl	801ec88 <HAL_TIM_IC_Init>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	bf14      	ite	ne
 800edc0:	2301      	movne	r3, #1
 800edc2:	2300      	moveq	r3, #0
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800edca:	f001 f863 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800edd6:	f107 0314 	add.w	r3, r7, #20
 800edda:	4619      	mov	r1, r3
 800eddc:	482e      	ldr	r0, [pc, #184]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800edde:	f011 fab3 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bf14      	ite	ne
 800ede8:	2301      	movne	r3, #1
 800edea:	2300      	moveq	r3, #0
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800edf2:	f001 f84f 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800edf6:	230a      	movs	r3, #10
 800edf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800edfa:	2301      	movs	r3, #1
 800edfc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ee06:	1d3b      	adds	r3, r7, #4
 800ee08:	2200      	movs	r2, #0
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4822      	ldr	r0, [pc, #136]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ee0e:	f010 fa1a 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	bf14      	ite	ne
 800ee18:	2301      	movne	r3, #1
 800ee1a:	2300      	moveq	r3, #0
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800ee22:	f001 f837 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ee26:	2300      	movs	r3, #0
 800ee28:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ee2a:	1d3b      	adds	r3, r7, #4
 800ee2c:	2204      	movs	r2, #4
 800ee2e:	4619      	mov	r1, r3
 800ee30:	4819      	ldr	r0, [pc, #100]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ee32:	f010 fa08 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	bf14      	ite	ne
 800ee3c:	2301      	movne	r3, #1
 800ee3e:	2300      	moveq	r3, #0
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800ee46:	f001 f825 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ee4a:	230a      	movs	r3, #10
 800ee4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ee4e:	1d3b      	adds	r3, r7, #4
 800ee50:	2208      	movs	r2, #8
 800ee52:	4619      	mov	r1, r3
 800ee54:	4810      	ldr	r0, [pc, #64]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ee56:	f010 f9f6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	bf14      	ite	ne
 800ee60:	2301      	movne	r3, #1
 800ee62:	2300      	moveq	r3, #0
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <_ZL12MX_TIM2_Initv+0x14e>
  {
    Error_Handler();
 800ee6a:	f001 f813 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ee6e:	1d3b      	adds	r3, r7, #4
 800ee70:	220c      	movs	r2, #12
 800ee72:	4619      	mov	r1, r3
 800ee74:	4808      	ldr	r0, [pc, #32]	; (800ee98 <_ZL12MX_TIM2_Initv+0x178>)
 800ee76:	f010 f9e6 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bf14      	ite	ne
 800ee80:	2301      	movne	r3, #1
 800ee82:	2300      	moveq	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <_ZL12MX_TIM2_Initv+0x16e>
  {
    Error_Handler();
 800ee8a:	f001 f803 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ee8e:	bf00      	nop
 800ee90:	3730      	adds	r7, #48	; 0x30
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	240018a0 	.word	0x240018a0

0800ee9c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b08c      	sub	sp, #48	; 0x30
 800eea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eea2:	f107 0320 	add.w	r3, r7, #32
 800eea6:	2200      	movs	r2, #0
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	605a      	str	r2, [r3, #4]
 800eeac:	609a      	str	r2, [r3, #8]
 800eeae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eeb0:	f107 0314 	add.w	r3, r7, #20
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	605a      	str	r2, [r3, #4]
 800eeba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eebc:	1d3b      	adds	r3, r7, #4
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	605a      	str	r2, [r3, #4]
 800eec4:	609a      	str	r2, [r3, #8]
 800eec6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800eec8:	4b4f      	ldr	r3, [pc, #316]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eeca:	4a50      	ldr	r2, [pc, #320]	; (800f00c <_ZL12MX_TIM3_Initv+0x170>)
 800eecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800eece:	4b4e      	ldr	r3, [pc, #312]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eed4:	4b4c      	ldr	r3, [pc, #304]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800eeda:	4b4b      	ldr	r3, [pc, #300]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eedc:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eee2:	4b49      	ldr	r3, [pc, #292]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eee8:	4b47      	ldr	r3, [pc, #284]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800eeee:	4846      	ldr	r0, [pc, #280]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800eef0:	f00f fbc2 	bl	801e678 <HAL_TIM_Base_Init>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bf14      	ite	ne
 800eefa:	2301      	movne	r3, #1
 800eefc:	2300      	moveq	r3, #0
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800ef04:	f000 ffc6 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ef08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ef0e:	f107 0320 	add.w	r3, r7, #32
 800ef12:	4619      	mov	r1, r3
 800ef14:	483c      	ldr	r0, [pc, #240]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef16:	f010 fb47 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	bf14      	ite	ne
 800ef20:	2301      	movne	r3, #1
 800ef22:	2300      	moveq	r3, #0
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800ef2a:	f000 ffb3 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ef2e:	4836      	ldr	r0, [pc, #216]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef30:	f00f feaa 	bl	801ec88 <HAL_TIM_IC_Init>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bf14      	ite	ne
 800ef3a:	2301      	movne	r3, #1
 800ef3c:	2300      	moveq	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800ef44:	f000 ffa6 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ef50:	f107 0314 	add.w	r3, r7, #20
 800ef54:	4619      	mov	r1, r3
 800ef56:	482c      	ldr	r0, [pc, #176]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef58:	f011 f9f6 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	bf14      	ite	ne
 800ef62:	2301      	movne	r3, #1
 800ef64:	2300      	moveq	r3, #0
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800ef6c:	f000 ff92 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ef70:	230a      	movs	r3, #10
 800ef72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ef74:	2301      	movs	r3, #1
 800ef76:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ef80:	1d3b      	adds	r3, r7, #4
 800ef82:	2200      	movs	r2, #0
 800ef84:	4619      	mov	r1, r3
 800ef86:	4820      	ldr	r0, [pc, #128]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef88:	f010 f95d 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	bf14      	ite	ne
 800ef92:	2301      	movne	r3, #1
 800ef94:	2300      	moveq	r3, #0
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800ef9c:	f000 ff7a 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800efa0:	1d3b      	adds	r3, r7, #4
 800efa2:	2204      	movs	r2, #4
 800efa4:	4619      	mov	r1, r3
 800efa6:	4818      	ldr	r0, [pc, #96]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800efa8:	f010 f94d 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf14      	ite	ne
 800efb2:	2301      	movne	r3, #1
 800efb4:	2300      	moveq	r3, #0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800efbc:	f000 ff6a 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800efc0:	1d3b      	adds	r3, r7, #4
 800efc2:	2208      	movs	r2, #8
 800efc4:	4619      	mov	r1, r3
 800efc6:	4810      	ldr	r0, [pc, #64]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800efc8:	f010 f93d 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	bf14      	ite	ne
 800efd2:	2301      	movne	r3, #1
 800efd4:	2300      	moveq	r3, #0
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800efdc:	f000 ff5a 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800efe0:	1d3b      	adds	r3, r7, #4
 800efe2:	220c      	movs	r2, #12
 800efe4:	4619      	mov	r1, r3
 800efe6:	4808      	ldr	r0, [pc, #32]	; (800f008 <_ZL12MX_TIM3_Initv+0x16c>)
 800efe8:	f010 f92d 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	bf14      	ite	ne
 800eff2:	2301      	movne	r3, #1
 800eff4:	2300      	moveq	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800effc:	f000 ff4a 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f000:	bf00      	nop
 800f002:	3730      	adds	r7, #48	; 0x30
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	240018ec 	.word	0x240018ec
 800f00c:	40000400 	.word	0x40000400

0800f010 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08c      	sub	sp, #48	; 0x30
 800f014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f016:	f107 0320 	add.w	r3, r7, #32
 800f01a:	2200      	movs	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	605a      	str	r2, [r3, #4]
 800f020:	609a      	str	r2, [r3, #8]
 800f022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f024:	f107 0314 	add.w	r3, r7, #20
 800f028:	2200      	movs	r2, #0
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	605a      	str	r2, [r3, #4]
 800f02e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f030:	1d3b      	adds	r3, r7, #4
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	605a      	str	r2, [r3, #4]
 800f038:	609a      	str	r2, [r3, #8]
 800f03a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f03c:	4b4f      	ldr	r3, [pc, #316]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f03e:	4a50      	ldr	r2, [pc, #320]	; (800f180 <_ZL12MX_TIM4_Initv+0x170>)
 800f040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f042:	4b4e      	ldr	r3, [pc, #312]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f044:	2200      	movs	r2, #0
 800f046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f048:	4b4c      	ldr	r3, [pc, #304]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800f04e:	4b4b      	ldr	r3, [pc, #300]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f050:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f054:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f056:	4b49      	ldr	r3, [pc, #292]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f058:	2200      	movs	r2, #0
 800f05a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f05c:	4b47      	ldr	r3, [pc, #284]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f05e:	2200      	movs	r2, #0
 800f060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800f062:	4846      	ldr	r0, [pc, #280]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f064:	f00f fb08 	bl	801e678 <HAL_TIM_Base_Init>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	bf14      	ite	ne
 800f06e:	2301      	movne	r3, #1
 800f070:	2300      	moveq	r3, #0
 800f072:	b2db      	uxtb	r3, r3
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800f078:	f000 ff0c 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f07c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f080:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800f082:	f107 0320 	add.w	r3, r7, #32
 800f086:	4619      	mov	r1, r3
 800f088:	483c      	ldr	r0, [pc, #240]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f08a:	f010 fa8d 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	bf14      	ite	ne
 800f094:	2301      	movne	r3, #1
 800f096:	2300      	moveq	r3, #0
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800f09e:	f000 fef9 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800f0a2:	4836      	ldr	r0, [pc, #216]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f0a4:	f00f fdf0 	bl	801ec88 <HAL_TIM_IC_Init>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	bf14      	ite	ne
 800f0ae:	2301      	movne	r3, #1
 800f0b0:	2300      	moveq	r3, #0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d001      	beq.n	800f0bc <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800f0b8:	f000 feec 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	482c      	ldr	r0, [pc, #176]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f0cc:	f011 f93c 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	bf14      	ite	ne
 800f0d6:	2301      	movne	r3, #1
 800f0d8:	2300      	moveq	r3, #0
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800f0e0:	f000 fed8 	bl	800fe94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f0e4:	230a      	movs	r3, #10
 800f0e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f0f4:	1d3b      	adds	r3, r7, #4
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4820      	ldr	r0, [pc, #128]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f0fc:	f010 f8a3 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	bf14      	ite	ne
 800f106:	2301      	movne	r3, #1
 800f108:	2300      	moveq	r3, #0
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d001      	beq.n	800f114 <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800f110:	f000 fec0 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f114:	1d3b      	adds	r3, r7, #4
 800f116:	2204      	movs	r2, #4
 800f118:	4619      	mov	r1, r3
 800f11a:	4818      	ldr	r0, [pc, #96]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f11c:	f010 f893 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	bf14      	ite	ne
 800f126:	2301      	movne	r3, #1
 800f128:	2300      	moveq	r3, #0
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d001      	beq.n	800f134 <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800f130:	f000 feb0 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f134:	1d3b      	adds	r3, r7, #4
 800f136:	2208      	movs	r2, #8
 800f138:	4619      	mov	r1, r3
 800f13a:	4810      	ldr	r0, [pc, #64]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f13c:	f010 f883 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	bf14      	ite	ne
 800f146:	2301      	movne	r3, #1
 800f148:	2300      	moveq	r3, #0
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800f150:	f000 fea0 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f154:	1d3b      	adds	r3, r7, #4
 800f156:	220c      	movs	r2, #12
 800f158:	4619      	mov	r1, r3
 800f15a:	4808      	ldr	r0, [pc, #32]	; (800f17c <_ZL12MX_TIM4_Initv+0x16c>)
 800f15c:	f010 f873 	bl	801f246 <HAL_TIM_IC_ConfigChannel>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	bf14      	ite	ne
 800f166:	2301      	movne	r3, #1
 800f168:	2300      	moveq	r3, #0
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800f170:	f000 fe90 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f174:	bf00      	nop
 800f176:	3730      	adds	r7, #48	; 0x30
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	24001938 	.word	0x24001938
 800f180:	40000800 	.word	0x40000800

0800f184 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b08e      	sub	sp, #56	; 0x38
 800f188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f18a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f18e:	2200      	movs	r2, #0
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	605a      	str	r2, [r3, #4]
 800f194:	609a      	str	r2, [r3, #8]
 800f196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f198:	f107 031c 	add.w	r3, r7, #28
 800f19c:	2200      	movs	r2, #0
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	605a      	str	r2, [r3, #4]
 800f1a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f1a4:	463b      	mov	r3, r7
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	605a      	str	r2, [r3, #4]
 800f1ac:	609a      	str	r2, [r3, #8]
 800f1ae:	60da      	str	r2, [r3, #12]
 800f1b0:	611a      	str	r2, [r3, #16]
 800f1b2:	615a      	str	r2, [r3, #20]
 800f1b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f1b6:	4b49      	ldr	r3, [pc, #292]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1b8:	4a49      	ldr	r2, [pc, #292]	; (800f2e0 <_ZL12MX_TIM5_Initv+0x15c>)
 800f1ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f1bc:	4b47      	ldr	r3, [pc, #284]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1c2:	4b46      	ldr	r3, [pc, #280]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f1c8:	4b44      	ldr	r3, [pc, #272]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1ca:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f1ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1d0:	4b42      	ldr	r3, [pc, #264]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1d6:	4b41      	ldr	r3, [pc, #260]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f1dc:	483f      	ldr	r0, [pc, #252]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f1de:	f00f fa4b 	bl	801e678 <HAL_TIM_Base_Init>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bf14      	ite	ne
 800f1e8:	2301      	movne	r3, #1
 800f1ea:	2300      	moveq	r3, #0
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f1f2:	f000 fe4f 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f1f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f1fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f200:	4619      	mov	r1, r3
 800f202:	4836      	ldr	r0, [pc, #216]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f204:	f010 f9d0 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bf14      	ite	ne
 800f20e:	2301      	movne	r3, #1
 800f210:	2300      	moveq	r3, #0
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f218:	f000 fe3c 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f21c:	482f      	ldr	r0, [pc, #188]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f21e:	f00f fbb6 	bl	801e98e <HAL_TIM_PWM_Init>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	bf14      	ite	ne
 800f228:	2301      	movne	r3, #1
 800f22a:	2300      	moveq	r3, #0
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f232:	f000 fe2f 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f236:	2300      	movs	r3, #0
 800f238:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f23a:	2300      	movs	r3, #0
 800f23c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f23e:	f107 031c 	add.w	r3, r7, #28
 800f242:	4619      	mov	r1, r3
 800f244:	4825      	ldr	r0, [pc, #148]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f246:	f011 f87f 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bf14      	ite	ne
 800f250:	2301      	movne	r3, #1
 800f252:	2300      	moveq	r3, #0
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f25a:	f000 fe1b 	bl	800fe94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f25e:	2360      	movs	r3, #96	; 0x60
 800f260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f262:	2300      	movs	r3, #0
 800f264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f266:	2300      	movs	r3, #0
 800f268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f26a:	2300      	movs	r3, #0
 800f26c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f26e:	463b      	mov	r3, r7
 800f270:	2200      	movs	r2, #0
 800f272:	4619      	mov	r1, r3
 800f274:	4819      	ldr	r0, [pc, #100]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f276:	f010 f883 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	bf14      	ite	ne
 800f280:	2301      	movne	r3, #1
 800f282:	2300      	moveq	r3, #0
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f28a:	f000 fe03 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f28e:	463b      	mov	r3, r7
 800f290:	2208      	movs	r2, #8
 800f292:	4619      	mov	r1, r3
 800f294:	4811      	ldr	r0, [pc, #68]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f296:	f010 f873 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	bf14      	ite	ne
 800f2a0:	2301      	movne	r3, #1
 800f2a2:	2300      	moveq	r3, #0
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f2aa:	f000 fdf3 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	220c      	movs	r2, #12
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4809      	ldr	r0, [pc, #36]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f2b6:	f010 f863 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	bf14      	ite	ne
 800f2c0:	2301      	movne	r3, #1
 800f2c2:	2300      	moveq	r3, #0
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f2ca:	f000 fde3 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f2ce:	4803      	ldr	r0, [pc, #12]	; (800f2dc <_ZL12MX_TIM5_Initv+0x158>)
 800f2d0:	f005 fd22 	bl	8014d18 <HAL_TIM_MspPostInit>

}
 800f2d4:	bf00      	nop
 800f2d6:	3738      	adds	r7, #56	; 0x38
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	24001984 	.word	0x24001984
 800f2e0:	40000c00 	.word	0x40000c00

0800f2e4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f2ea:	1d3b      	adds	r3, r7, #4
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]
 800f2f0:	605a      	str	r2, [r3, #4]
 800f2f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f2f4:	4b19      	ldr	r3, [pc, #100]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f2f6:	4a1a      	ldr	r2, [pc, #104]	; (800f360 <_ZL12MX_TIM6_Initv+0x7c>)
 800f2f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f2fa:	4b18      	ldr	r3, [pc, #96]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f2fc:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f300:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f302:	4b16      	ldr	r3, [pc, #88]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f304:	2200      	movs	r2, #0
 800f306:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f308:	4b14      	ldr	r3, [pc, #80]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f30a:	22c7      	movs	r2, #199	; 0xc7
 800f30c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f30e:	4b13      	ldr	r3, [pc, #76]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f310:	2200      	movs	r2, #0
 800f312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f314:	4811      	ldr	r0, [pc, #68]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f316:	f00f f9af 	bl	801e678 <HAL_TIM_Base_Init>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bf14      	ite	ne
 800f320:	2301      	movne	r3, #1
 800f322:	2300      	moveq	r3, #0
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f32a:	f000 fdb3 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f32e:	2320      	movs	r3, #32
 800f330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f332:	2300      	movs	r3, #0
 800f334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f336:	1d3b      	adds	r3, r7, #4
 800f338:	4619      	mov	r1, r3
 800f33a:	4808      	ldr	r0, [pc, #32]	; (800f35c <_ZL12MX_TIM6_Initv+0x78>)
 800f33c:	f011 f804 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	bf14      	ite	ne
 800f346:	2301      	movne	r3, #1
 800f348:	2300      	moveq	r3, #0
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f350:	f000 fda0 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f354:	bf00      	nop
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	240019d0 	.word	0x240019d0
 800f360:	40001000 	.word	0x40001000

0800f364 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f36a:	1d3b      	adds	r3, r7, #4
 800f36c:	2200      	movs	r2, #0
 800f36e:	601a      	str	r2, [r3, #0]
 800f370:	605a      	str	r2, [r3, #4]
 800f372:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f374:	4b19      	ldr	r3, [pc, #100]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f376:	4a1a      	ldr	r2, [pc, #104]	; (800f3e0 <_ZL12MX_TIM7_Initv+0x7c>)
 800f378:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f37a:	4b18      	ldr	r3, [pc, #96]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f380:	4b16      	ldr	r3, [pc, #88]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f382:	2200      	movs	r2, #0
 800f384:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f386:	4b15      	ldr	r3, [pc, #84]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f38c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f38e:	4b13      	ldr	r3, [pc, #76]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f390:	2200      	movs	r2, #0
 800f392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f394:	4811      	ldr	r0, [pc, #68]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f396:	f00f f96f 	bl	801e678 <HAL_TIM_Base_Init>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bf14      	ite	ne
 800f3a0:	2301      	movne	r3, #1
 800f3a2:	2300      	moveq	r3, #0
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f3aa:	f000 fd73 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f3b6:	1d3b      	adds	r3, r7, #4
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4808      	ldr	r0, [pc, #32]	; (800f3dc <_ZL12MX_TIM7_Initv+0x78>)
 800f3bc:	f010 ffc4 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	bf14      	ite	ne
 800f3c6:	2301      	movne	r3, #1
 800f3c8:	2300      	moveq	r3, #0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d001      	beq.n	800f3d4 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f3d0:	f000 fd60 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f3d4:	bf00      	nop
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	24001a1c 	.word	0x24001a1c
 800f3e0:	40001400 	.word	0x40001400

0800f3e4 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b09c      	sub	sp, #112	; 0x70
 800f3e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f3ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	605a      	str	r2, [r3, #4]
 800f3f4:	609a      	str	r2, [r3, #8]
 800f3f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f3f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	605a      	str	r2, [r3, #4]
 800f402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	605a      	str	r2, [r3, #4]
 800f40e:	609a      	str	r2, [r3, #8]
 800f410:	60da      	str	r2, [r3, #12]
 800f412:	611a      	str	r2, [r3, #16]
 800f414:	615a      	str	r2, [r3, #20]
 800f416:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f418:	1d3b      	adds	r3, r7, #4
 800f41a:	2234      	movs	r2, #52	; 0x34
 800f41c:	2100      	movs	r1, #0
 800f41e:	4618      	mov	r0, r3
 800f420:	f011 fa44 	bl	80208ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f424:	4b6c      	ldr	r3, [pc, #432]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f426:	4a6d      	ldr	r2, [pc, #436]	; (800f5dc <_ZL12MX_TIM8_Initv+0x1f8>)
 800f428:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f42a:	4b6b      	ldr	r3, [pc, #428]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f430:	4b69      	ldr	r3, [pc, #420]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f432:	2200      	movs	r2, #0
 800f434:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f436:	4b68      	ldr	r3, [pc, #416]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f438:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f43c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f43e:	4b66      	ldr	r3, [pc, #408]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f440:	2200      	movs	r2, #0
 800f442:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f444:	4b64      	ldr	r3, [pc, #400]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f446:	2200      	movs	r2, #0
 800f448:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f44a:	4b63      	ldr	r3, [pc, #396]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f44c:	2200      	movs	r2, #0
 800f44e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f450:	4861      	ldr	r0, [pc, #388]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f452:	f00f f911 	bl	801e678 <HAL_TIM_Base_Init>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bf14      	ite	ne
 800f45c:	2301      	movne	r3, #1
 800f45e:	2300      	moveq	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f466:	f000 fd15 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f46e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f470:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f474:	4619      	mov	r1, r3
 800f476:	4858      	ldr	r0, [pc, #352]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f478:	f010 f896 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	bf14      	ite	ne
 800f482:	2301      	movne	r3, #1
 800f484:	2300      	moveq	r3, #0
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f48c:	f000 fd02 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f490:	4851      	ldr	r0, [pc, #324]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f492:	f00f fa7c 	bl	801e98e <HAL_TIM_PWM_Init>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bf14      	ite	ne
 800f49c:	2301      	movne	r3, #1
 800f49e:	2300      	moveq	r3, #0
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f4a6:	f000 fcf5 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f4b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4846      	ldr	r0, [pc, #280]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4be:	f010 ff43 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	bf14      	ite	ne
 800f4c8:	2301      	movne	r3, #1
 800f4ca:	2300      	moveq	r3, #0
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d001      	beq.n	800f4d6 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f4d2:	f000 fcdf 	bl	800fe94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f4d6:	2360      	movs	r3, #96	; 0x60
 800f4d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f4f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4837      	ldr	r0, [pc, #220]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4fc:	f00f ff40 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	bf14      	ite	ne
 800f506:	2301      	movne	r3, #1
 800f508:	2300      	moveq	r3, #0
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f510:	f000 fcc0 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f518:	2204      	movs	r2, #4
 800f51a:	4619      	mov	r1, r3
 800f51c:	482e      	ldr	r0, [pc, #184]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f51e:	f00f ff2f 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	bf14      	ite	ne
 800f528:	2301      	movne	r3, #1
 800f52a:	2300      	moveq	r3, #0
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f532:	f000 fcaf 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f53a:	2208      	movs	r2, #8
 800f53c:	4619      	mov	r1, r3
 800f53e:	4826      	ldr	r0, [pc, #152]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f540:	f00f ff1e 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	bf14      	ite	ne
 800f54a:	2301      	movne	r3, #1
 800f54c:	2300      	moveq	r3, #0
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f554:	f000 fc9e 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f55c:	220c      	movs	r2, #12
 800f55e:	4619      	mov	r1, r3
 800f560:	481d      	ldr	r0, [pc, #116]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f562:	f00f ff0d 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bf14      	ite	ne
 800f56c:	2301      	movne	r3, #1
 800f56e:	2300      	moveq	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f576:	f000 fc8d 	bl	800fe94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f57a:	2300      	movs	r3, #0
 800f57c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f57e:	2300      	movs	r3, #0
 800f580:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f582:	2300      	movs	r3, #0
 800f584:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f58e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f592:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f598:	2300      	movs	r3, #0
 800f59a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f59c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f5a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f5aa:	1d3b      	adds	r3, r7, #4
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	480a      	ldr	r0, [pc, #40]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5b0:	f010 ff66 	bl	8020480 <HAL_TIMEx_ConfigBreakDeadTime>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bf14      	ite	ne
 800f5ba:	2301      	movne	r3, #1
 800f5bc:	2300      	moveq	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f5c4:	f000 fc66 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f5c8:	4803      	ldr	r0, [pc, #12]	; (800f5d8 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5ca:	f005 fba5 	bl	8014d18 <HAL_TIM_MspPostInit>

}
 800f5ce:	bf00      	nop
 800f5d0:	3770      	adds	r7, #112	; 0x70
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	24001a68 	.word	0x24001a68
 800f5dc:	40010400 	.word	0x40010400

0800f5e0 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b08c      	sub	sp, #48	; 0x30
 800f5e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f5e6:	f107 0320 	add.w	r3, r7, #32
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	605a      	str	r2, [r3, #4]
 800f5f0:	609a      	str	r2, [r3, #8]
 800f5f2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f5f4:	1d3b      	adds	r3, r7, #4
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	605a      	str	r2, [r3, #4]
 800f5fc:	609a      	str	r2, [r3, #8]
 800f5fe:	60da      	str	r2, [r3, #12]
 800f600:	611a      	str	r2, [r3, #16]
 800f602:	615a      	str	r2, [r3, #20]
 800f604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f606:	4b2f      	ldr	r3, [pc, #188]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f608:	4a2f      	ldr	r2, [pc, #188]	; (800f6c8 <_ZL13MX_TIM12_Initv+0xe8>)
 800f60a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f60c:	4b2d      	ldr	r3, [pc, #180]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f60e:	2200      	movs	r2, #0
 800f610:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f612:	4b2c      	ldr	r3, [pc, #176]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f614:	2200      	movs	r2, #0
 800f616:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f618:	4b2a      	ldr	r3, [pc, #168]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f61a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f61e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f620:	4b28      	ldr	r3, [pc, #160]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f622:	2200      	movs	r2, #0
 800f624:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f626:	4b27      	ldr	r3, [pc, #156]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f628:	2200      	movs	r2, #0
 800f62a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f62c:	4825      	ldr	r0, [pc, #148]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f62e:	f00f f823 	bl	801e678 <HAL_TIM_Base_Init>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	bf14      	ite	ne
 800f638:	2301      	movne	r3, #1
 800f63a:	2300      	moveq	r3, #0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d001      	beq.n	800f646 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800f642:	f000 fc27 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f64a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f64c:	f107 0320 	add.w	r3, r7, #32
 800f650:	4619      	mov	r1, r3
 800f652:	481c      	ldr	r0, [pc, #112]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f654:	f00f ffa8 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	bf14      	ite	ne
 800f65e:	2301      	movne	r3, #1
 800f660:	2300      	moveq	r3, #0
 800f662:	b2db      	uxtb	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800f668:	f000 fc14 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f66c:	4815      	ldr	r0, [pc, #84]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f66e:	f00f f98e 	bl	801e98e <HAL_TIM_PWM_Init>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	bf14      	ite	ne
 800f678:	2301      	movne	r3, #1
 800f67a:	2300      	moveq	r3, #0
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800f682:	f000 fc07 	bl	800fe94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f686:	2360      	movs	r3, #96	; 0x60
 800f688:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f68e:	2300      	movs	r3, #0
 800f690:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f692:	2300      	movs	r3, #0
 800f694:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f696:	1d3b      	adds	r3, r7, #4
 800f698:	2200      	movs	r2, #0
 800f69a:	4619      	mov	r1, r3
 800f69c:	4809      	ldr	r0, [pc, #36]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f69e:	f00f fe6f 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	bf14      	ite	ne
 800f6a8:	2301      	movne	r3, #1
 800f6aa:	2300      	moveq	r3, #0
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800f6b2:	f000 fbef 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f6b6:	4803      	ldr	r0, [pc, #12]	; (800f6c4 <_ZL13MX_TIM12_Initv+0xe4>)
 800f6b8:	f005 fb2e 	bl	8014d18 <HAL_TIM_MspPostInit>

}
 800f6bc:	bf00      	nop
 800f6be:	3730      	adds	r7, #48	; 0x30
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	24001ab4 	.word	0x24001ab4
 800f6c8:	40001800 	.word	0x40001800

0800f6cc <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f6d0:	4b10      	ldr	r3, [pc, #64]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6d2:	4a11      	ldr	r2, [pc, #68]	; (800f718 <_ZL13MX_TIM13_Initv+0x4c>)
 800f6d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6d8:	2200      	movs	r2, #0
 800f6da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f6dc:	4b0d      	ldr	r3, [pc, #52]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f6e2:	4b0c      	ldr	r3, [pc, #48]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f6ea:	4b0a      	ldr	r3, [pc, #40]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f6f0:	4b08      	ldr	r3, [pc, #32]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f6f6:	4807      	ldr	r0, [pc, #28]	; (800f714 <_ZL13MX_TIM13_Initv+0x48>)
 800f6f8:	f00e ffbe 	bl	801e678 <HAL_TIM_Base_Init>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bf14      	ite	ne
 800f702:	2301      	movne	r3, #1
 800f704:	2300      	moveq	r3, #0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800f70c:	f000 fbc2 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800f710:	bf00      	nop
 800f712:	bd80      	pop	{r7, pc}
 800f714:	24001b00 	.word	0x24001b00
 800f718:	40001c00 	.word	0x40001c00

0800f71c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800f720:	4b10      	ldr	r3, [pc, #64]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f722:	4a11      	ldr	r2, [pc, #68]	; (800f768 <_ZL13MX_TIM14_Initv+0x4c>)
 800f724:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800f726:	4b0f      	ldr	r3, [pc, #60]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f728:	2200      	movs	r2, #0
 800f72a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f72c:	4b0d      	ldr	r3, [pc, #52]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f72e:	2200      	movs	r2, #0
 800f730:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800f732:	4b0c      	ldr	r3, [pc, #48]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f738:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f73a:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f740:	4b08      	ldr	r3, [pc, #32]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f742:	2200      	movs	r2, #0
 800f744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f746:	4807      	ldr	r0, [pc, #28]	; (800f764 <_ZL13MX_TIM14_Initv+0x48>)
 800f748:	f00e ff96 	bl	801e678 <HAL_TIM_Base_Init>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	bf14      	ite	ne
 800f752:	2301      	movne	r3, #1
 800f754:	2300      	moveq	r3, #0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d001      	beq.n	800f760 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800f75c:	f000 fb9a 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800f760:	bf00      	nop
 800f762:	bd80      	pop	{r7, pc}
 800f764:	24001b4c 	.word	0x24001b4c
 800f768:	40002000 	.word	0x40002000

0800f76c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f772:	f107 0310 	add.w	r3, r7, #16
 800f776:	2200      	movs	r2, #0
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	605a      	str	r2, [r3, #4]
 800f77c:	609a      	str	r2, [r3, #8]
 800f77e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f780:	1d3b      	adds	r3, r7, #4
 800f782:	2200      	movs	r2, #0
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	605a      	str	r2, [r3, #4]
 800f788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800f78a:	4b26      	ldr	r3, [pc, #152]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f78c:	4a26      	ldr	r2, [pc, #152]	; (800f828 <_ZL13MX_TIM15_Initv+0xbc>)
 800f78e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800f790:	4b24      	ldr	r3, [pc, #144]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f792:	2200      	movs	r2, #0
 800f794:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f796:	4b23      	ldr	r3, [pc, #140]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f798:	2200      	movs	r2, #0
 800f79a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800f79c:	4b21      	ldr	r3, [pc, #132]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f79e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7a2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7a4:	4b1f      	ldr	r3, [pc, #124]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f7aa:	4b1e      	ldr	r3, [pc, #120]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7b0:	4b1c      	ldr	r3, [pc, #112]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800f7b6:	481b      	ldr	r0, [pc, #108]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7b8:	f00e ff5e 	bl	801e678 <HAL_TIM_Base_Init>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	bf14      	ite	ne
 800f7c2:	2301      	movne	r3, #1
 800f7c4:	2300      	moveq	r3, #0
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800f7cc:	f000 fb62 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800f7d6:	f107 0310 	add.w	r3, r7, #16
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4811      	ldr	r0, [pc, #68]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7de:	f00f fee3 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	bf14      	ite	ne
 800f7e8:	2301      	movne	r3, #1
 800f7ea:	2300      	moveq	r3, #0
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800f7f2:	f000 fb4f 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f7fe:	1d3b      	adds	r3, r7, #4
 800f800:	4619      	mov	r1, r3
 800f802:	4808      	ldr	r0, [pc, #32]	; (800f824 <_ZL13MX_TIM15_Initv+0xb8>)
 800f804:	f010 fda0 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bf14      	ite	ne
 800f80e:	2301      	movne	r3, #1
 800f810:	2300      	moveq	r3, #0
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800f818:	f000 fb3c 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800f81c:	bf00      	nop
 800f81e:	3720      	adds	r7, #32
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	24001b98 	.word	0x24001b98
 800f828:	40014000 	.word	0x40014000

0800f82c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f830:	4b12      	ldr	r3, [pc, #72]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f832:	4a13      	ldr	r2, [pc, #76]	; (800f880 <_ZL13MX_TIM16_Initv+0x54>)
 800f834:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800f836:	4b11      	ldr	r3, [pc, #68]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f838:	2200      	movs	r2, #0
 800f83a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f83c:	4b0f      	ldr	r3, [pc, #60]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f83e:	2200      	movs	r2, #0
 800f840:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800f842:	4b0e      	ldr	r3, [pc, #56]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f848:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f84a:	4b0c      	ldr	r3, [pc, #48]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f850:	4b0a      	ldr	r3, [pc, #40]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f852:	2200      	movs	r2, #0
 800f854:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f856:	4b09      	ldr	r3, [pc, #36]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f858:	2200      	movs	r2, #0
 800f85a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f85c:	4807      	ldr	r0, [pc, #28]	; (800f87c <_ZL13MX_TIM16_Initv+0x50>)
 800f85e:	f00e ff0b 	bl	801e678 <HAL_TIM_Base_Init>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	bf14      	ite	ne
 800f868:	2301      	movne	r3, #1
 800f86a:	2300      	moveq	r3, #0
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800f872:	f000 fb0f 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800f876:	bf00      	nop
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	24001be4 	.word	0x24001be4
 800f880:	40014400 	.word	0x40014400

0800f884 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800f888:	4b12      	ldr	r3, [pc, #72]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f88a:	4a13      	ldr	r2, [pc, #76]	; (800f8d8 <_ZL13MX_TIM17_Initv+0x54>)
 800f88c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800f88e:	4b11      	ldr	r3, [pc, #68]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f890:	2200      	movs	r2, #0
 800f892:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f894:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f896:	2200      	movs	r2, #0
 800f898:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800f89a:	4b0e      	ldr	r3, [pc, #56]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f8ae:	4b09      	ldr	r3, [pc, #36]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f8b4:	4807      	ldr	r0, [pc, #28]	; (800f8d4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8b6:	f00e fedf 	bl	801e678 <HAL_TIM_Base_Init>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	bf14      	ite	ne
 800f8c0:	2301      	movne	r3, #1
 800f8c2:	2300      	moveq	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800f8ca:	f000 fae3 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800f8ce:	bf00      	nop
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	24001c30 	.word	0x24001c30
 800f8d8:	40014800 	.word	0x40014800

0800f8dc <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08e      	sub	sp, #56	; 0x38
 800f8e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f8e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	601a      	str	r2, [r3, #0]
 800f8ea:	605a      	str	r2, [r3, #4]
 800f8ec:	609a      	str	r2, [r3, #8]
 800f8ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f8f0:	f107 031c 	add.w	r3, r7, #28
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
 800f8f8:	605a      	str	r2, [r3, #4]
 800f8fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f8fc:	463b      	mov	r3, r7
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]
 800f902:	605a      	str	r2, [r3, #4]
 800f904:	609a      	str	r2, [r3, #8]
 800f906:	60da      	str	r2, [r3, #12]
 800f908:	611a      	str	r2, [r3, #16]
 800f90a:	615a      	str	r2, [r3, #20]
 800f90c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800f90e:	4b51      	ldr	r3, [pc, #324]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f910:	4a51      	ldr	r2, [pc, #324]	; (800fa58 <_ZL13MX_TIM23_Initv+0x17c>)
 800f912:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800f914:	4b4f      	ldr	r3, [pc, #316]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f916:	2200      	movs	r2, #0
 800f918:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f91a:	4b4e      	ldr	r3, [pc, #312]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800f920:	4b4c      	ldr	r3, [pc, #304]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f922:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f926:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f928:	4b4a      	ldr	r3, [pc, #296]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f92e:	4b49      	ldr	r3, [pc, #292]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f930:	2200      	movs	r2, #0
 800f932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800f934:	4847      	ldr	r0, [pc, #284]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f936:	f00e fe9f 	bl	801e678 <HAL_TIM_Base_Init>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	bf14      	ite	ne
 800f940:	2301      	movne	r3, #1
 800f942:	2300      	moveq	r3, #0
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800f94a:	f000 faa3 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f952:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800f954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f958:	4619      	mov	r1, r3
 800f95a:	483e      	ldr	r0, [pc, #248]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f95c:	f00f fe24 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	bf14      	ite	ne
 800f966:	2301      	movne	r3, #1
 800f968:	2300      	moveq	r3, #0
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800f970:	f000 fa90 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800f974:	4837      	ldr	r0, [pc, #220]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f976:	f00f f80a 	bl	801e98e <HAL_TIM_PWM_Init>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf14      	ite	ne
 800f980:	2301      	movne	r3, #1
 800f982:	2300      	moveq	r3, #0
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800f98a:	f000 fa83 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f98e:	2300      	movs	r3, #0
 800f990:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f992:	2300      	movs	r3, #0
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800f996:	f107 031c 	add.w	r3, r7, #28
 800f99a:	4619      	mov	r1, r3
 800f99c:	482d      	ldr	r0, [pc, #180]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f99e:	f010 fcd3 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bf14      	ite	ne
 800f9a8:	2301      	movne	r3, #1
 800f9aa:	2300      	moveq	r3, #0
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d001      	beq.n	800f9b6 <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800f9b2:	f000 fa6f 	bl	800fe94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f9b6:	2360      	movs	r3, #96	; 0x60
 800f9b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f9c6:	463b      	mov	r3, r7
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4821      	ldr	r0, [pc, #132]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f9ce:	f00f fcd7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	bf14      	ite	ne
 800f9d8:	2301      	movne	r3, #1
 800f9da:	2300      	moveq	r3, #0
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800f9e2:	f000 fa57 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f9e6:	463b      	mov	r3, r7
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4819      	ldr	r0, [pc, #100]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800f9ee:	f00f fcc7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	bf14      	ite	ne
 800f9f8:	2301      	movne	r3, #1
 800f9fa:	2300      	moveq	r3, #0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800fa02:	f000 fa47 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fa06:	463b      	mov	r3, r7
 800fa08:	2208      	movs	r2, #8
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4811      	ldr	r0, [pc, #68]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800fa0e:	f00f fcb7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	bf14      	ite	ne
 800fa18:	2301      	movne	r3, #1
 800fa1a:	2300      	moveq	r3, #0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800fa22:	f000 fa37 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fa26:	463b      	mov	r3, r7
 800fa28:	220c      	movs	r2, #12
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4809      	ldr	r0, [pc, #36]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800fa2e:	f00f fca7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	bf14      	ite	ne
 800fa38:	2301      	movne	r3, #1
 800fa3a:	2300      	moveq	r3, #0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800fa42:	f000 fa27 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800fa46:	4803      	ldr	r0, [pc, #12]	; (800fa54 <_ZL13MX_TIM23_Initv+0x178>)
 800fa48:	f005 f966 	bl	8014d18 <HAL_TIM_MspPostInit>

}
 800fa4c:	bf00      	nop
 800fa4e:	3738      	adds	r7, #56	; 0x38
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	24001c7c 	.word	0x24001c7c
 800fa58:	4000e000 	.word	0x4000e000

0800fa5c <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b08e      	sub	sp, #56	; 0x38
 800fa60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa66:	2200      	movs	r2, #0
 800fa68:	601a      	str	r2, [r3, #0]
 800fa6a:	605a      	str	r2, [r3, #4]
 800fa6c:	609a      	str	r2, [r3, #8]
 800fa6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa70:	f107 031c 	add.w	r3, r7, #28
 800fa74:	2200      	movs	r2, #0
 800fa76:	601a      	str	r2, [r3, #0]
 800fa78:	605a      	str	r2, [r3, #4]
 800fa7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fa7c:	463b      	mov	r3, r7
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	605a      	str	r2, [r3, #4]
 800fa84:	609a      	str	r2, [r3, #8]
 800fa86:	60da      	str	r2, [r3, #12]
 800fa88:	611a      	str	r2, [r3, #16]
 800fa8a:	615a      	str	r2, [r3, #20]
 800fa8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800fa8e:	4b51      	ldr	r3, [pc, #324]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fa90:	4a51      	ldr	r2, [pc, #324]	; (800fbd8 <_ZL13MX_TIM24_Initv+0x17c>)
 800fa92:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800fa94:	4b4f      	ldr	r3, [pc, #316]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa9a:	4b4e      	ldr	r3, [pc, #312]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800faa0:	4b4c      	ldr	r3, [pc, #304]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800faa2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800faa6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800faa8:	4b4a      	ldr	r3, [pc, #296]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800faaa:	2200      	movs	r2, #0
 800faac:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800faae:	4b49      	ldr	r3, [pc, #292]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800fab4:	4847      	ldr	r0, [pc, #284]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fab6:	f00e fddf 	bl	801e678 <HAL_TIM_Base_Init>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bf14      	ite	ne
 800fac0:	2301      	movne	r3, #1
 800fac2:	2300      	moveq	r3, #0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800faca:	f000 f9e3 	bl	800fe94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800face:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fad2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fad8:	4619      	mov	r1, r3
 800fada:	483e      	ldr	r0, [pc, #248]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fadc:	f00f fd64 	bl	801f5a8 <HAL_TIM_ConfigClockSource>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	bf14      	ite	ne
 800fae6:	2301      	movne	r3, #1
 800fae8:	2300      	moveq	r3, #0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d001      	beq.n	800faf4 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800faf0:	f000 f9d0 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800faf4:	4837      	ldr	r0, [pc, #220]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800faf6:	f00e ff4a 	bl	801e98e <HAL_TIM_PWM_Init>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	bf14      	ite	ne
 800fb00:	2301      	movne	r3, #1
 800fb02:	2300      	moveq	r3, #0
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d001      	beq.n	800fb0e <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fb0a:	f000 f9c3 	bl	800fe94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb12:	2300      	movs	r3, #0
 800fb14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fb16:	f107 031c 	add.w	r3, r7, #28
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	482d      	ldr	r0, [pc, #180]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb1e:	f010 fc13 	bl	8020348 <HAL_TIMEx_MasterConfigSynchronization>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	bf14      	ite	ne
 800fb28:	2301      	movne	r3, #1
 800fb2a:	2300      	moveq	r3, #0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fb32:	f000 f9af 	bl	800fe94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fb36:	2360      	movs	r3, #96	; 0x60
 800fb38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fb42:	2300      	movs	r3, #0
 800fb44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fb46:	463b      	mov	r3, r7
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4821      	ldr	r0, [pc, #132]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb4e:	f00f fc17 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	bf14      	ite	ne
 800fb58:	2301      	movne	r3, #1
 800fb5a:	2300      	moveq	r3, #0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800fb62:	f000 f997 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fb66:	463b      	mov	r3, r7
 800fb68:	2204      	movs	r2, #4
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	4819      	ldr	r0, [pc, #100]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb6e:	f00f fc07 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	bf14      	ite	ne
 800fb78:	2301      	movne	r3, #1
 800fb7a:	2300      	moveq	r3, #0
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800fb82:	f000 f987 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fb86:	463b      	mov	r3, r7
 800fb88:	2208      	movs	r2, #8
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	4811      	ldr	r0, [pc, #68]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb8e:	f00f fbf7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	bf14      	ite	ne
 800fb98:	2301      	movne	r3, #1
 800fb9a:	2300      	moveq	r3, #0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800fba2:	f000 f977 	bl	800fe94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fba6:	463b      	mov	r3, r7
 800fba8:	220c      	movs	r2, #12
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4809      	ldr	r0, [pc, #36]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fbae:	f00f fbe7 	bl	801f380 <HAL_TIM_PWM_ConfigChannel>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	bf14      	ite	ne
 800fbb8:	2301      	movne	r3, #1
 800fbba:	2300      	moveq	r3, #0
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d001      	beq.n	800fbc6 <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800fbc2:	f000 f967 	bl	800fe94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fbc6:	4803      	ldr	r0, [pc, #12]	; (800fbd4 <_ZL13MX_TIM24_Initv+0x178>)
 800fbc8:	f005 f8a6 	bl	8014d18 <HAL_TIM_MspPostInit>

}
 800fbcc:	bf00      	nop
 800fbce:	3738      	adds	r7, #56	; 0x38
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	24001cc8 	.word	0x24001cc8
 800fbd8:	4000e400 	.word	0x4000e400

0800fbdc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbe2:	4b0d      	ldr	r3, [pc, #52]	; (800fc18 <_ZL11MX_DMA_Initv+0x3c>)
 800fbe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fbe8:	4a0b      	ldr	r2, [pc, #44]	; (800fc18 <_ZL11MX_DMA_Initv+0x3c>)
 800fbea:	f043 0301 	orr.w	r3, r3, #1
 800fbee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fbf2:	4b09      	ldr	r3, [pc, #36]	; (800fc18 <_ZL11MX_DMA_Initv+0x3c>)
 800fbf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	607b      	str	r3, [r7, #4]
 800fbfe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800fc00:	2200      	movs	r2, #0
 800fc02:	2101      	movs	r1, #1
 800fc04:	200c      	movs	r0, #12
 800fc06:	f007 fd6a 	bl	80176de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800fc0a:	200c      	movs	r0, #12
 800fc0c:	f007 fd81 	bl	8017712 <HAL_NVIC_EnableIRQ>

}
 800fc10:	bf00      	nop
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	58024400 	.word	0x58024400

0800fc1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08e      	sub	sp, #56	; 0x38
 800fc20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc26:	2200      	movs	r2, #0
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	605a      	str	r2, [r3, #4]
 800fc2c:	609a      	str	r2, [r3, #8]
 800fc2e:	60da      	str	r2, [r3, #12]
 800fc30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fc32:	4b90      	ldr	r3, [pc, #576]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc38:	4a8e      	ldr	r2, [pc, #568]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc3a:	f043 0304 	orr.w	r3, r3, #4
 800fc3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc42:	4b8c      	ldr	r3, [pc, #560]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc48:	f003 0304 	and.w	r3, r3, #4
 800fc4c:	623b      	str	r3, [r7, #32]
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fc50:	4b88      	ldr	r3, [pc, #544]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc56:	4a87      	ldr	r2, [pc, #540]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc58:	f043 0320 	orr.w	r3, r3, #32
 800fc5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc60:	4b84      	ldr	r3, [pc, #528]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc66:	f003 0320 	and.w	r3, r3, #32
 800fc6a:	61fb      	str	r3, [r7, #28]
 800fc6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fc6e:	4b81      	ldr	r3, [pc, #516]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc74:	4a7f      	ldr	r2, [pc, #508]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc7e:	4b7d      	ldr	r3, [pc, #500]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc88:	61bb      	str	r3, [r7, #24]
 800fc8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc8c:	4b79      	ldr	r3, [pc, #484]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc92:	4a78      	ldr	r2, [pc, #480]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc94:	f043 0301 	orr.w	r3, r3, #1
 800fc98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc9c:	4b75      	ldr	r3, [pc, #468]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fc9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fca2:	f003 0301 	and.w	r3, r3, #1
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fcaa:	4b72      	ldr	r3, [pc, #456]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcb0:	4a70      	ldr	r2, [pc, #448]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcb2:	f043 0302 	orr.w	r3, r3, #2
 800fcb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcba:	4b6e      	ldr	r3, [pc, #440]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcc0:	f003 0302 	and.w	r3, r3, #2
 800fcc4:	613b      	str	r3, [r7, #16]
 800fcc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fcc8:	4b6a      	ldr	r3, [pc, #424]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcce:	4a69      	ldr	r2, [pc, #420]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcd0:	f043 0310 	orr.w	r3, r3, #16
 800fcd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcd8:	4b66      	ldr	r3, [pc, #408]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcde:	f003 0310 	and.w	r3, r3, #16
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fce6:	4b63      	ldr	r3, [pc, #396]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcec:	4a61      	ldr	r2, [pc, #388]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcee:	f043 0308 	orr.w	r3, r3, #8
 800fcf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcf6:	4b5f      	ldr	r3, [pc, #380]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fcf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcfc:	f003 0308 	and.w	r3, r3, #8
 800fd00:	60bb      	str	r3, [r7, #8]
 800fd02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fd04:	4b5b      	ldr	r3, [pc, #364]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fd06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd0a:	4a5a      	ldr	r2, [pc, #360]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fd0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fd14:	4b57      	ldr	r3, [pc, #348]	; (800fe74 <_ZL12MX_GPIO_Initv+0x258>)
 800fd16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd1e:	607b      	str	r3, [r7, #4]
 800fd20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fd22:	2200      	movs	r2, #0
 800fd24:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800fd28:	4853      	ldr	r0, [pc, #332]	; (800fe78 <_ZL12MX_GPIO_Initv+0x25c>)
 800fd2a:	f00b f901 	bl	801af30 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800fd2e:	2200      	movs	r2, #0
 800fd30:	21c0      	movs	r1, #192	; 0xc0
 800fd32:	4852      	ldr	r0, [pc, #328]	; (800fe7c <_ZL12MX_GPIO_Initv+0x260>)
 800fd34:	f00b f8fc 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd3e:	4850      	ldr	r0, [pc, #320]	; (800fe80 <_ZL12MX_GPIO_Initv+0x264>)
 800fd40:	f00b f8f6 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800fd44:	2200      	movs	r2, #0
 800fd46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd4a:	484e      	ldr	r0, [pc, #312]	; (800fe84 <_ZL12MX_GPIO_Initv+0x268>)
 800fd4c:	f00b f8f0 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800fd50:	2200      	movs	r2, #0
 800fd52:	2180      	movs	r1, #128	; 0x80
 800fd54:	484c      	ldr	r0, [pc, #304]	; (800fe88 <_ZL12MX_GPIO_Initv+0x26c>)
 800fd56:	f00b f8eb 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd60:	4849      	ldr	r0, [pc, #292]	; (800fe88 <_ZL12MX_GPIO_Initv+0x26c>)
 800fd62:	f00b f8e5 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800fd66:	2200      	movs	r2, #0
 800fd68:	2102      	movs	r1, #2
 800fd6a:	4848      	ldr	r0, [pc, #288]	; (800fe8c <_ZL12MX_GPIO_Initv+0x270>)
 800fd6c:	f00b f8e0 	bl	801af30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fd70:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800fd74:	627b      	str	r3, [r7, #36]	; 0x24
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd76:	2301      	movs	r3, #1
 800fd78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fd82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd86:	4619      	mov	r1, r3
 800fd88:	483b      	ldr	r0, [pc, #236]	; (800fe78 <_ZL12MX_GPIO_Initv+0x25c>)
 800fd8a:	f00a ff11 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fd8e:	2340      	movs	r3, #64	; 0x40
 800fd90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd92:	2301      	movs	r3, #1
 800fd94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd96:	2300      	movs	r3, #0
 800fd98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fd9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fda2:	4619      	mov	r1, r3
 800fda4:	4835      	ldr	r0, [pc, #212]	; (800fe7c <_ZL12MX_GPIO_Initv+0x260>)
 800fda6:	f00a ff03 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800fdaa:	2380      	movs	r3, #128	; 0x80
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800fdba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	482e      	ldr	r0, [pc, #184]	; (800fe7c <_ZL12MX_GPIO_Initv+0x260>)
 800fdc2:	f00a fef5 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800fdc6:	230e      	movs	r3, #14
 800fdc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fdce:	2302      	movs	r3, #2
 800fdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fdd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4827      	ldr	r0, [pc, #156]	; (800fe78 <_ZL12MX_GPIO_Initv+0x25c>)
 800fdda:	f00a fee9 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fdde:	2340      	movs	r3, #64	; 0x40
 800fde0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fde2:	2303      	movs	r3, #3
 800fde4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4827      	ldr	r0, [pc, #156]	; (800fe90 <_ZL12MX_GPIO_Initv+0x274>)
 800fdf2:	f00a fedd 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fdf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fe00:	2302      	movs	r3, #2
 800fe02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe04:	2300      	movs	r3, #0
 800fe06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fe08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	481c      	ldr	r0, [pc, #112]	; (800fe80 <_ZL12MX_GPIO_Initv+0x264>)
 800fe10:	f00a fece 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fe14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe22:	2300      	movs	r3, #0
 800fe24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fe26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	4815      	ldr	r0, [pc, #84]	; (800fe84 <_ZL12MX_GPIO_Initv+0x268>)
 800fe2e:	f00a febf 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800fe32:	f44f 7320 	mov.w	r3, #640	; 0x280
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe40:	2300      	movs	r3, #0
 800fe42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fe44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe48:	4619      	mov	r1, r3
 800fe4a:	480f      	ldr	r0, [pc, #60]	; (800fe88 <_ZL12MX_GPIO_Initv+0x26c>)
 800fe4c:	f00a feb0 	bl	801abb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800fe50:	2302      	movs	r3, #2
 800fe52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe54:	2301      	movs	r3, #1
 800fe56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800fe60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe64:	4619      	mov	r1, r3
 800fe66:	4809      	ldr	r0, [pc, #36]	; (800fe8c <_ZL12MX_GPIO_Initv+0x270>)
 800fe68:	f00a fea2 	bl	801abb0 <HAL_GPIO_Init>

}
 800fe6c:	bf00      	nop
 800fe6e:	3738      	adds	r7, #56	; 0x38
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	58024400 	.word	0x58024400
 800fe78:	58020800 	.word	0x58020800
 800fe7c:	58021400 	.word	0x58021400
 800fe80:	58020c00 	.word	0x58020c00
 800fe84:	58021800 	.word	0x58021800
 800fe88:	58020400 	.word	0x58020400
 800fe8c:	58021000 	.word	0x58021000
 800fe90:	58020000 	.word	0x58020000

0800fe94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fe94:	b480      	push	{r7}
 800fe96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fe98:	b672      	cpsid	i
}
 800fe9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fe9c:	e7fe      	b.n	800fe9c <Error_Handler+0x8>

0800fe9e <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b082      	sub	sp, #8
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fd fc17 	bl	800d6dc <_ZNKSt14_Function_base8_M_emptyEv>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800feb4:	f010 fc73 	bl	802079e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	4610      	mov	r0, r2
 800fec0:	4798      	blx	r3
 800fec2:	bf00      	nop
    }
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800feca:	b580      	push	{r7, lr}
 800fecc:	b082      	sub	sp, #8
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fd fbe0 	bl	800d69a <_ZNSt14_Function_baseC1Ev>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800feee:	6838      	ldr	r0, [r7, #0]
 800fef0:	f000 fb5a 	bl	80105a8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 800fef4:	4603      	mov	r3, r0
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fb60 	bl	80105be <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800fefe:	bf00      	nop
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b086      	sub	sp, #24
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ff10:	f107 0308 	add.w	r3, r7, #8
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 fb83 	bl	8010622 <_ZNSt8functionIFvvEEC1ERKS1_>
 800ff1c:	f107 0308 	add.w	r3, r7, #8
 800ff20:	6879      	ldr	r1, [r7, #4]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fb9f 	bl	8010666 <_ZNSt8functionIFvvEE4swapERS1_>
 800ff28:	f107 0308 	add.w	r3, r7, #8
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fd fc41 	bl	800d7b4 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800ff32:	687b      	ldr	r3, [r7, #4]
      }
 800ff34:	4618      	mov	r0, r3
 800ff36:	3718      	adds	r7, #24
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	f107 030c 	add.w	r3, r7, #12
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 fbab 	bl	80106a8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	4618      	mov	r0, r3
 800ff56:	3710      	adds	r7, #16
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	1d1a      	adds	r2, r3, #4
 800ff68:	f107 030c 	add.w	r3, r7, #12
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f000 fb9a 	bl	80106a8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
	...

0800ff80 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 800ff80:	b590      	push	{r4, r7, lr}
 800ff82:	b08b      	sub	sp, #44	; 0x2c
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fb9b 	bl	80106c8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 800ff92:	4603      	mov	r3, r0
 800ff94:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 fba5 	bl	80106e6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	60fb      	str	r3, [r7, #12]
 800ffa0:	f107 020c 	add.w	r2, r7, #12
 800ffa4:	f107 0308 	add.w	r3, r7, #8
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fb f878 	bl	800b0a0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d112      	bne.n	800ffdc <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fba2 	bl	8010700 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 800ffbc:	f107 0308 	add.w	r3, r7, #8
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f000 fbaa 	bl	801071a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	461a      	mov	r2, r3
 800ffca:	f107 0310 	add.w	r3, r7, #16
 800ffce:	6839      	ldr	r1, [r7, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fb f879 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e000      	b.n	800ffe2 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d01f      	beq.n	8010026 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ffe6:	687c      	ldr	r4, [r7, #4]
 800ffe8:	f107 0208 	add.w	r2, r7, #8
 800ffec:	f107 0314 	add.w	r3, r7, #20
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fb f87d 	bl	800b0f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 800fff8:	6838      	ldr	r0, [r7, #0]
 800fffa:	f000 fb9c 	bl	8010736 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 800fffe:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010000:	f107 0318 	add.w	r3, r7, #24
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f000 fba0 	bl	801074c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 801000c:	f107 0218 	add.w	r2, r7, #24
 8010010:	f107 031c 	add.w	r3, r7, #28
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	4613      	mov	r3, r2
 8010018:	4a08      	ldr	r2, [pc, #32]	; (801003c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 801001a:	6979      	ldr	r1, [r7, #20]
 801001c:	4620      	mov	r0, r4
 801001e:	f000 fba6 	bl	801076e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 8010022:	4603      	mov	r3, r0
 8010024:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010026:	f107 0308 	add.w	r3, r7, #8
 801002a:	4618      	mov	r0, r3
 801002c:	f000 fb75 	bl	801071a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 8010030:	4603      	mov	r3, r0
 8010032:	3304      	adds	r3, #4
      }
 8010034:	4618      	mov	r0, r3
 8010036:	3724      	adds	r7, #36	; 0x24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd90      	pop	{r4, r7, pc}
 801003c:	08020d58 	.word	0x08020d58

08010040 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 8010040:	b5b0      	push	{r4, r5, r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801004a:	687c      	ldr	r4, [r7, #4]
 801004c:	6838      	ldr	r0, [r7, #0]
 801004e:	f000 fbcc 	bl	80107ea <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010052:	4603      	mov	r3, r0
 8010054:	461a      	mov	r2, r3
 8010056:	4629      	mov	r1, r5
 8010058:	4620      	mov	r0, r4
 801005a:	f000 fbe2 	bl	8010822 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bdb0      	pop	{r4, r5, r7, pc}

08010068 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	109b      	asrs	r3, r3, #2
 801007c:	4618      	mov	r0, r3
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 fbdb 	bl	801084c <_ZNSaIP13StreamMessageEC1Ev>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 fbe3 	bl	8010864 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80100be:	b580      	push	{r7, lr}
 80100c0:	b082      	sub	sp, #8
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80100d6:	461a      	mov	r2, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fbd7 	bl	801088c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fd fed6 	bl	800de92 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80100f0:	b5b0      	push	{r4, r5, r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681c      	ldr	r4, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4618      	mov	r0, r3
 8010104:	f000 fbd5 	bl	80108b2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010108:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801010a:	461a      	mov	r2, r3
 801010c:	4629      	mov	r1, r5
 801010e:	4620      	mov	r0, r4
 8010110:	f000 fbda 	bl	80108c8 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff ffd1 	bl	80100be <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bdb0      	pop	{r4, r5, r7, pc}

08010126 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010130:	6838      	ldr	r0, [r7, #0]
 8010132:	f000 fbd7 	bl	80108e4 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 8010136:	4603      	mov	r3, r0
 8010138:	4619      	mov	r1, r3
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fbdd 	bl	80108fa <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	f107 030c 	add.w	r3, r7, #12
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f000 fc00 	bl	801095e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	4618      	mov	r0, r3
 8010162:	3710      	adds	r7, #16
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	f107 030c 	add.w	r3, r7, #12
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f000 fbef 	bl	801095e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	685a      	ldr	r2, [r3, #4]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	689b      	ldr	r3, [r3, #8]
 801019c:	429a      	cmp	r2, r3
 801019e:	d00c      	beq.n	80101ba <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	683a      	ldr	r2, [r7, #0]
 80101a8:	4619      	mov	r1, r3
 80101aa:	f000 fbfd 	bl	80109a8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	1d1a      	adds	r2, r3, #4
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	605a      	str	r2, [r3, #4]
      }
 80101b8:	e008      	b.n	80101cc <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff ffd4 	bl	8010168 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 80101c0:	4603      	mov	r3, r0
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	4619      	mov	r1, r3
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 fc00 	bl	80109cc <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80101cc:	bf00      	nop
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80101d4:	b590      	push	{r4, r7, lr}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fd fa5a 	bl	800d69a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80101e6:	463b      	mov	r3, r7
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 fc6b 	bl	8010ac4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00f      	beq.n	8010214 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80101f4:	687c      	ldr	r4, [r7, #4]
 80101f6:	463b      	mov	r3, r7
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 fc6e 	bl	8010ada <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 80101fe:	4603      	mov	r3, r0
 8010200:	4619      	mov	r1, r3
 8010202:	4620      	mov	r0, r4
 8010204:	f000 fc74 	bl	8010af0 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a05      	ldr	r2, [pc, #20]	; (8010220 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x4c>)
 801020c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a04      	ldr	r2, [pc, #16]	; (8010224 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x50>)
 8010212:	609a      	str	r2, [r3, #8]
      }
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4618      	mov	r0, r3
 8010218:	370c      	adds	r7, #12
 801021a:	46bd      	mov	sp, r7
 801021c:	bd90      	pop	{r4, r7, pc}
 801021e:	bf00      	nop
 8010220:	08010b15 	.word	0x08010b15
 8010224:	08010b33 	.word	0x08010b33

08010228 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7fd ff66 	bl	800e102 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010236:	4603      	mov	r3, r0
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f000 fc90 	bl	8010b70 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 8010250:	4603      	mov	r3, r0
      }
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	f107 030c 	add.w	r3, r7, #12
 8010268:	4611      	mov	r1, r2
 801026a:	4618      	mov	r0, r3
 801026c:	f000 fc8b 	bl	8010b86 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	4618      	mov	r0, r3
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	1d1a      	adds	r2, r3, #4
 8010286:	f107 030c 	add.w	r3, r7, #12
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f000 fc7a 	bl	8010b86 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fc8e 	bl	8010bc6 <_ZNSaIP5FieldIJEEED1Ev>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 fc71 	bl	8010ba6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4618      	mov	r0, r3
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff ffeb 	bl	80102b4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80102e8:	b590      	push	{r4, r7, lr}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	607a      	str	r2, [r7, #4]
 80102f2:	603b      	str	r3, [r7, #0]
 80102f4:	460b      	mov	r3, r1
 80102f6:	817b      	strh	r3, [r7, #10]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2200      	movs	r2, #0
 80102fc:	601a      	str	r2, [r3, #0]
 80102fe:	897a      	ldrh	r2, [r7, #10]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	809a      	strh	r2, [r3, #4]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	3308      	adds	r3, #8
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff ffe0 	bl	80102ce <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f000 fc94 	bl	8010c44 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801031c:	68fc      	ldr	r4, [r7, #12]
 801031e:	f107 030a 	add.w	r3, r7, #10
 8010322:	4619      	mov	r1, r3
 8010324:	4804      	ldr	r0, [pc, #16]	; (8010338 <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 8010326:	f000 fcb1 	bl	8010c8c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801032a:	4603      	mov	r3, r0
 801032c:	601c      	str	r4, [r3, #0]
    }
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	4618      	mov	r0, r3
 8010332:	3714      	adds	r7, #20
 8010334:	46bd      	mov	sp, r7
 8010336:	bd90      	pop	{r4, r7, pc}
 8010338:	240001b0 	.word	0x240001b0

0801033c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	607a      	str	r2, [r7, #4]
 8010346:	603b      	str	r3, [r7, #0]
 8010348:	460b      	mov	r3, r1
 801034a:	817b      	strh	r3, [r7, #10]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	897a      	ldrh	r2, [r7, #10]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	809a      	strh	r2, [r3, #4]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3308      	adds	r3, #8
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff ffb6 	bl	80102ce <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010368:	6a3a      	ldr	r2, [r7, #32]
 801036a:	6839      	ldr	r1, [r7, #0]
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 fce9 	bl	8010d44 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010372:	68fc      	ldr	r4, [r7, #12]
 8010374:	f107 030a 	add.w	r3, r7, #10
 8010378:	4619      	mov	r1, r3
 801037a:	4805      	ldr	r0, [pc, #20]	; (8010390 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 801037c:	f000 fc86 	bl	8010c8c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010380:	4603      	mov	r3, r0
 8010382:	601c      	str	r4, [r3, #0]
    }
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	4618      	mov	r0, r3
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	bd90      	pop	{r4, r7, pc}
 801038e:	bf00      	nop
 8010390:	240001b0 	.word	0x240001b0

08010394 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	607a      	str	r2, [r7, #4]
 801039e:	603b      	str	r3, [r7, #0]
 80103a0:	460b      	mov	r3, r1
 80103a2:	817b      	strh	r3, [r7, #10]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	897a      	ldrh	r2, [r7, #10]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	809a      	strh	r2, [r3, #4]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3308      	adds	r3, #8
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff ff8a 	bl	80102ce <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	615a      	str	r2, [r3, #20]
        build(fields...);
 80103c0:	6a3a      	ldr	r2, [r7, #32]
 80103c2:	6839      	ldr	r1, [r7, #0]
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f000 fce5 	bl	8010d94 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80103ca:	68fc      	ldr	r4, [r7, #12]
 80103cc:	f107 030a 	add.w	r3, r7, #10
 80103d0:	4619      	mov	r1, r3
 80103d2:	4805      	ldr	r0, [pc, #20]	; (80103e8 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 80103d4:	f000 fc5a 	bl	8010c8c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80103d8:	4603      	mov	r3, r0
 80103da:	601c      	str	r4, [r3, #0]
    }
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	4618      	mov	r0, r3
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd90      	pop	{r4, r7, pc}
 80103e6:	bf00      	nop
 80103e8:	240001b0 	.word	0x240001b0

080103ec <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80103ec:	b590      	push	{r4, r7, lr}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	460b      	mov	r3, r1
 80103fa:	817b      	strh	r3, [r7, #10]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
 8010402:	897a      	ldrh	r2, [r7, #10]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	809a      	strh	r2, [r3, #4]
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	3308      	adds	r3, #8
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff ff5e 	bl	80102ce <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010418:	6a3a      	ldr	r2, [r7, #32]
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f000 fce1 	bl	8010de4 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010422:	68fc      	ldr	r4, [r7, #12]
 8010424:	f107 030a 	add.w	r3, r7, #10
 8010428:	4619      	mov	r1, r3
 801042a:	4805      	ldr	r0, [pc, #20]	; (8010440 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 801042c:	f000 fc2e 	bl	8010c8c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010430:	4603      	mov	r3, r0
 8010432:	601c      	str	r4, [r3, #0]
    }
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4618      	mov	r0, r3
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	bd90      	pop	{r4, r7, pc}
 801043e:	bf00      	nop
 8010440:	240001b0 	.word	0x240001b0

08010444 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7fd ff57 	bl	800e300 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010452:	4603      	mov	r3, r0
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fce4 	bl	8010e34 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 801046c:	4603      	mov	r3, r0
      }
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 8010476:	b580      	push	{r7, lr}
 8010478:	b084      	sub	sp, #16
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6839      	ldr	r1, [r7, #0]
 8010484:	4618      	mov	r0, r3
 8010486:	f000 fce0 	bl	8010e4a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 801048a:	4603      	mov	r3, r0
 801048c:	60bb      	str	r3, [r7, #8]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	f000 fd19 	bl	8010ec8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010496:	4603      	mov	r3, r0
 8010498:	60fb      	str	r3, [r7, #12]
 801049a:	f107 020c 	add.w	r2, r7, #12
 801049e:	f107 0308 	add.w	r3, r7, #8
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f000 fd20 	bl	8010eea <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80104aa:	4603      	mov	r3, r0
 80104ac:	f083 0301 	eor.w	r3, r3, #1
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 fd22 	bl	8010f12 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80104ce:	4603      	mov	r3, r0
 80104d0:	60bb      	str	r3, [r7, #8]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fd5b 	bl	8010f90 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80104da:	4603      	mov	r3, r0
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	f107 020c 	add.w	r2, r7, #12
 80104e2:	f107 0308 	add.w	r3, r7, #8
 80104e6:	4611      	mov	r1, r2
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 fd62 	bl	8010fb2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 80104ee:	4603      	mov	r3, r0
 80104f0:	f083 0301 	eor.w	r3, r3, #1
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010500:	b590      	push	{r4, r7, lr}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4618      	mov	r0, r3
 801050e:	f7fd f8c4 	bl	800d69a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010512:	463b      	mov	r3, r7
 8010514:	4618      	mov	r0, r3
 8010516:	f000 fd60 	bl	8010fda <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00f      	beq.n	8010540 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010520:	687c      	ldr	r4, [r7, #4]
 8010522:	463b      	mov	r3, r7
 8010524:	4618      	mov	r0, r3
 8010526:	f000 fd63 	bl	8010ff0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801052a:	4603      	mov	r3, r0
 801052c:	4619      	mov	r1, r3
 801052e:	4620      	mov	r0, r4
 8010530:	f000 fd69 	bl	8011006 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a05      	ldr	r2, [pc, #20]	; (801054c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 8010538:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4a04      	ldr	r2, [pc, #16]	; (8010550 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 801053e:	609a      	str	r2, [r3, #8]
      }
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	4618      	mov	r0, r3
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	bd90      	pop	{r4, r7, pc}
 801054a:	bf00      	nop
 801054c:	0801102b 	.word	0x0801102b
 8010550:	08011049 	.word	0x08011049

08010554 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010554:	b590      	push	{r4, r7, lr}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	f7fd f89a 	bl	800d69a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010566:	463b      	mov	r3, r7
 8010568:	4618      	mov	r0, r3
 801056a:	f000 fd8c 	bl	8011086 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00f      	beq.n	8010594 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010574:	687c      	ldr	r4, [r7, #4]
 8010576:	463b      	mov	r3, r7
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fd8f 	bl	801109c <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 801057e:	4603      	mov	r3, r0
 8010580:	4619      	mov	r1, r3
 8010582:	4620      	mov	r0, r4
 8010584:	f000 fd95 	bl	80110b2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a05      	ldr	r2, [pc, #20]	; (80105a0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 801058c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a04      	ldr	r2, [pc, #16]	; (80105a4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 8010592:	609a      	str	r2, [r3, #8]
      }
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	bd90      	pop	{r4, r7, pc}
 801059e:	bf00      	nop
 80105a0:	080110d7 	.word	0x080110d7
 80105a4:	080110f5 	.word	0x080110f5

080105a8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4618      	mov	r0, r3
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80105be:	b5b0      	push	{r4, r5, r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	685a      	ldr	r2, [r3, #4]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d011      	beq.n	80105f8 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80105d4:	687c      	ldr	r4, [r7, #4]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	685d      	ldr	r5, [r3, #4]
 80105da:	6838      	ldr	r0, [r7, #0]
 80105dc:	f000 fda9 	bl	8011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80105e0:	4603      	mov	r3, r0
 80105e2:	461a      	mov	r2, r3
 80105e4:	4629      	mov	r1, r5
 80105e6:	4620      	mov	r0, r4
 80105e8:	f000 fdc3 	bl	8011172 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	1d1a      	adds	r2, r3, #4
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	605a      	str	r2, [r3, #4]
 80105f6:	e00c      	b.n	8010612 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fcaf 	bl	800ff5c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 80105fe:	4604      	mov	r4, r0
 8010600:	6838      	ldr	r0, [r7, #0]
 8010602:	f000 fd96 	bl	8011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010606:	4603      	mov	r3, r0
 8010608:	461a      	mov	r2, r3
 801060a:	4621      	mov	r1, r4
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fdc3 	bl	8011198 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fe3c 	bl	8011290 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 8010618:	4603      	mov	r3, r0
      }
 801061a:	4618      	mov	r0, r3
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bdb0      	pop	{r4, r5, r7, pc}

08010622 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8010622:	b580      	push	{r7, lr}
 8010624:	b082      	sub	sp, #8
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	6039      	str	r1, [r7, #0]
    : _Function_base()
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4618      	mov	r0, r3
 8010630:	f7fd f833 	bl	800d69a <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010634:	6838      	ldr	r0, [r7, #0]
 8010636:	f000 fe46 	bl	80112c6 <_ZNKSt8functionIFvvEEcvbEv>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00d      	beq.n	801065c <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	2202      	movs	r2, #2
 801064a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	68da      	ldr	r2, [r3, #12]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	689a      	ldr	r2, [r3, #8]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	609a      	str	r2, [r3, #8]
    }
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4618      	mov	r0, r3
 8010660:	3708      	adds	r7, #8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010666:	b580      	push	{r7, lr}
 8010668:	b082      	sub	sp, #8
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	4611      	mov	r1, r2
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fe35 	bl	80112e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f103 0208 	add.w	r2, r3, #8
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	3308      	adds	r3, #8
 8010686:	4619      	mov	r1, r3
 8010688:	4610      	mov	r0, r2
 801068a:	f000 fe53 	bl	8011334 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f103 020c 	add.w	r2, r3, #12
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	330c      	adds	r3, #12
 8010698:	4619      	mov	r1, r3
 801069a:	4610      	mov	r0, r2
 801069c:	f000 fe69 	bl	8011372 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6839      	ldr	r1, [r7, #0]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f000 fe6a 	bl	80113b0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 80106dc:	4603      	mov	r3, r0
 80106de:	4618      	mov	r0, r3
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b082      	sub	sp, #8
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fa fdf8 	bl	800b2e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 80106f6:	4603      	mov	r3, r0
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4618      	mov	r0, r3
 801070c:	f000 fe67 	bl	80113de <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010710:	bf00      	nop
 8010712:	4620      	mov	r0, r4
 8010714:	370c      	adds	r7, #12
 8010716:	46bd      	mov	sp, r7
 8010718:	bd90      	pop	{r4, r7, pc}

0801071a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801071a:	b580      	push	{r7, lr}
 801071c:	b082      	sub	sp, #8
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4618      	mov	r0, r3
 8010728:	f7fa fdee 	bl	800b308 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801072c:	4603      	mov	r3, r0
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8010756:	6838      	ldr	r0, [r7, #0]
 8010758:	f000 fe4c 	bl	80113f4 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801075c:	4603      	mov	r3, r0
 801075e:	4619      	mov	r1, r3
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 fe52 	bl	801140a <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801076e:	b5b0      	push	{r4, r5, r7, lr}
 8010770:	b088      	sub	sp, #32
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	607a      	str	r2, [r7, #4]
 801077a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7f0 fd72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010782:	4604      	mov	r4, r0
 8010784:	6838      	ldr	r0, [r7, #0]
 8010786:	f000 fe53 	bl	8011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801078a:	4605      	mov	r5, r0
 801078c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801078e:	f7f0 fd80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010792:	4603      	mov	r3, r0
 8010794:	462a      	mov	r2, r5
 8010796:	4621      	mov	r1, r4
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 fe54 	bl	8011446 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 801079e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80107a0:	69f8      	ldr	r0, [r7, #28]
 80107a2:	f7fa fee2 	bl	800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f107 0010 	add.w	r0, r7, #16
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68f9      	ldr	r1, [r7, #12]
 80107b0:	f7fa fdb8 	bl	800b324 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d007      	beq.n	80107ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80107ba:	6939      	ldr	r1, [r7, #16]
 80107bc:	697a      	ldr	r2, [r7, #20]
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f000 fe63 	bl	801148c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 80107c6:	4603      	mov	r3, r0
 80107c8:	e00b      	b.n	80107e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 80107ca:	69f9      	ldr	r1, [r7, #28]
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f7fa fedf 	bl	800b590 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	f107 0318 	add.w	r3, r7, #24
 80107d8:	4611      	mov	r1, r2
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fa fee9 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 80107e0:	69bb      	ldr	r3, [r7, #24]
      }
 80107e2:	4618      	mov	r0, r3
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bdb0      	pop	{r4, r5, r7, pc}

080107ea <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4618      	mov	r0, r3
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010800:	b590      	push	{r4, r7, lr}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	7239      	strb	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	4621      	mov	r1, r4
 8010812:	4618      	mov	r0, r3
 8010814:	f000 fe89 	bl	801152a <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	4618      	mov	r0, r3
 801081c:	3714      	adds	r7, #20
 801081e:	46bd      	mov	sp, r7
 8010820:	bd90      	pop	{r4, r7, pc}

08010822 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010822:	b5b0      	push	{r4, r5, r7, lr}
 8010824:	b084      	sub	sp, #16
 8010826:	af00      	add	r7, sp, #0
 8010828:	60f8      	str	r0, [r7, #12]
 801082a:	7239      	strb	r1, [r7, #8]
 801082c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801082e:	68fc      	ldr	r4, [r7, #12]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ffda 	bl	80107ea <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	4629      	mov	r1, r5
 801083c:	4620      	mov	r0, r4
 801083e:	f7ff ffdf 	bl	8010800 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bdb0      	pop	{r4, r5, r7, pc}

0801084c <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fe80 	bl	801155a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	3708      	adds	r7, #8
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	601a      	str	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	605a      	str	r2, [r3, #4]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2200      	movs	r2, #0
 801087c:	609a      	str	r2, [r3, #8]
	{ }
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
	if (__p)
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d005      	beq.n	80108aa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	68b9      	ldr	r1, [r7, #8]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f000 fe63 	bl	8011570 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 80108aa:	bf00      	nop
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80108b2:	b480      	push	{r7}
 80108b4:	b083      	sub	sp, #12
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80108d4:	68b9      	ldr	r1, [r7, #8]
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f000 fe69 	bl	80115ae <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 80108dc:	bf00      	nop
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4618      	mov	r0, r3
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80108fa:	b5b0      	push	{r4, r5, r7, lr}
 80108fc:	b082      	sub	sp, #8
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685a      	ldr	r2, [r3, #4]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	429a      	cmp	r2, r3
 801090e:	d011      	beq.n	8010934 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010910:	687c      	ldr	r4, [r7, #4]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685d      	ldr	r5, [r3, #4]
 8010916:	6838      	ldr	r0, [r7, #0]
 8010918:	f000 fe5f 	bl	80115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 801091c:	4603      	mov	r3, r0
 801091e:	461a      	mov	r2, r3
 8010920:	4629      	mov	r1, r5
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fe79 	bl	801161a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	1d1a      	adds	r2, r3, #4
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	605a      	str	r2, [r3, #4]
 8010932:	e00c      	b.n	801094e <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff fca0 	bl	801027a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 801093a:	4604      	mov	r4, r0
 801093c:	6838      	ldr	r0, [r7, #0]
 801093e:	f000 fe4c 	bl	80115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010942:	4603      	mov	r3, r0
 8010944:	461a      	mov	r2, r3
 8010946:	4621      	mov	r1, r4
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 fe79 	bl	8011640 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fef2 	bl	8011738 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 8010954:	4603      	mov	r3, r0
      }
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bdb0      	pop	{r4, r5, r7, pc}

0801095e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801095e:	b480      	push	{r7}
 8010960:	b083      	sub	sp, #12
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
 8010966:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	601a      	str	r2, [r3, #0]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	370c      	adds	r7, #12
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr

0801097e <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801097e:	b590      	push	{r4, r7, lr}
 8010980:	b083      	sub	sp, #12
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010988:	6838      	ldr	r0, [r7, #0]
 801098a:	f000 fef0 	bl	801176e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 801098e:	4603      	mov	r3, r0
 8010990:	681c      	ldr	r4, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4619      	mov	r1, r3
 8010996:	2004      	movs	r0, #4
 8010998:	f7ef fcca 	bl	8000330 <_ZnwjPv>
 801099c:	4603      	mov	r3, r0
 801099e:	601c      	str	r4, [r3, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd90      	pop	{r4, r7, pc}

080109a8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	60f8      	str	r0, [r7, #12]
 80109b0:	60b9      	str	r1, [r7, #8]
 80109b2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 feda 	bl	801176e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 80109ba:	4603      	mov	r3, r0
 80109bc:	4619      	mov	r1, r3
 80109be:	68b8      	ldr	r0, [r7, #8]
 80109c0:	f7ff ffdd 	bl	801097e <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 80109c4:	bf00      	nop
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80109cc:	b5b0      	push	{r4, r5, r7, lr}
 80109ce:	b08c      	sub	sp, #48	; 0x30
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80109d8:	4a39      	ldr	r2, [pc, #228]	; (8010ac0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80109da:	2101      	movs	r1, #1
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f000 fed1 	bl	8011784 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 80109e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f7ff fba9 	bl	8010148 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 80109f6:	4603      	mov	r3, r0
 80109f8:	617b      	str	r3, [r7, #20]
 80109fa:	f107 0214 	add.w	r2, r7, #20
 80109fe:	f107 0308 	add.w	r3, r7, #8
 8010a02:	4611      	mov	r1, r2
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 ff04 	bl	8011812 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 ff12 	bl	801183c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 8010a18:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010a1e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010a20:	6a3b      	ldr	r3, [r7, #32]
 8010a22:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010a24:	69fa      	ldr	r2, [r7, #28]
 8010a26:	18d5      	adds	r5, r2, r3
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 fea0 	bl	801176e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	461a      	mov	r2, r3
 8010a32:	4629      	mov	r1, r5
 8010a34:	4620      	mov	r0, r4
 8010a36:	f7ff ffb7 	bl	80109a8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010a3e:	f107 0308 	add.w	r3, r7, #8
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fd fa7e 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff ff2f 	bl	80108b2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010a54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010a56:	69fa      	ldr	r2, [r7, #28]
 8010a58:	4621      	mov	r1, r4
 8010a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a5c:	f000 ff02 	bl	8011864 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010a60:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	3304      	adds	r3, #4
 8010a66:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fd fa69 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010a72:	4603      	mov	r3, r0
 8010a74:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff ff1a 	bl	80108b2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010a7e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010a80:	69ba      	ldr	r2, [r7, #24]
 8010a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a84:	4620      	mov	r0, r4
 8010a86:	f000 feed 	bl	8011864 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010a8a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010a8c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	689a      	ldr	r2, [r3, #8]
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	1ad3      	subs	r3, r2, r3
 8010a96:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8010a98:	461a      	mov	r2, r3
 8010a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a9c:	f7ff fef6 	bl	801088c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	69fa      	ldr	r2, [r7, #28]
 8010aa4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	69ba      	ldr	r2, [r7, #24]
 8010aaa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	69fa      	ldr	r2, [r7, #28]
 8010ab2:	441a      	add	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	609a      	str	r2, [r3, #8]
    }
 8010ab8:	bf00      	nop
 8010aba:	3730      	adds	r7, #48	; 0x30
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bdb0      	pop	{r4, r5, r7, pc}
 8010ac0:	08020cf0 	.word	0x08020cf0

08010ac4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010ac4:	b480      	push	{r7}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010acc:	2301      	movs	r3, #1
 8010ace:	4618      	mov	r0, r3
 8010ad0:	370c      	adds	r7, #12
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010ada:	b480      	push	{r7}
 8010adc:	b083      	sub	sp, #12
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010af0:	b590      	push	{r4, r7, lr}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010afa:	6838      	ldr	r0, [r7, #0]
 8010afc:	f7ff ffed 	bl	8010ada <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010b00:	4603      	mov	r3, r0
 8010b02:	4622      	mov	r2, r4
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fec0 	bl	801188c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8010b0c:	bf00      	nop
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}

08010b14 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 fece 	bl	80118be <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010b22:	4603      	mov	r3, r0
 8010b24:	4618      	mov	r0, r3
 8010b26:	f000 feda 	bl	80118de <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8010b2a:	bf00      	nop
      }
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010b32:	b590      	push	{r4, r7, lr}
 8010b34:	b085      	sub	sp, #20
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	60f8      	str	r0, [r7, #12]
 8010b3a:	60b9      	str	r1, [r7, #8]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010b40:	79fb      	ldrb	r3, [r7, #7]
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d109      	bne.n	8010b5a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010b46:	68b8      	ldr	r0, [r7, #8]
 8010b48:	f000 feb9 	bl	80118be <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 fed5 	bl	80118fe <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8010b54:	4603      	mov	r3, r0
 8010b56:	601c      	str	r4, [r3, #0]
	    break;
 8010b58:	e005      	b.n	8010b66 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	68b9      	ldr	r1, [r7, #8]
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f000 fed8 	bl	8011916 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8010b66:	2300      	movs	r3, #0
      }
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd90      	pop	{r4, r7, pc}

08010b70 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr

08010b86 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010b86:	b480      	push	{r7}
 8010b88:	b083      	sub	sp, #12
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	601a      	str	r2, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 fedc 	bl	801196c <_ZNSaIP5FieldIJEEEC1Ev>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f000 fee4 	bl	8011984 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010bc6:	b480      	push	{r7}
 8010bc8:	b083      	sub	sp, #12
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	689a      	ldr	r2, [r3, #8]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	1ad3      	subs	r3, r2, r3
 8010bf2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fed8 	bl	80119ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fb4c 	bl	801029c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4618      	mov	r0, r3
 8010c08:	3708      	adds	r7, #8
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010c0e:	b5b0      	push	{r4, r5, r7, lr}
 8010c10:	b082      	sub	sp, #8
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681c      	ldr	r4, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 fed6 	bl	80119d2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8010c26:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010c28:	461a      	mov	r2, r3
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f000 fedb 	bl	80119e8 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7ff ffd1 	bl	8010bdc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3708      	adds	r7, #8
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bdb0      	pop	{r4, r5, r7, pc}

08010c44 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010c44:	b590      	push	{r4, r7, lr}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	1c5a      	adds	r2, r3, #1
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010c58:	2008      	movs	r0, #8
 8010c5a:	f00f fcd3 	bl	8020604 <_Znwj>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	461c      	mov	r4, r3
 8010c62:	6839      	ldr	r1, [r7, #0]
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 fedd 	bl	8011a24 <_ZN5FieldIJhEEC1EPh>
 8010c6a:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f103 0208 	add.w	r2, r3, #8
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	60bb      	str	r3, [r7, #8]
 8010c76:	f107 0308 	add.w	r3, r7, #8
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	f000 fee7 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8010c82:	bf00      	nop
    }
 8010c84:	3714      	adds	r7, #20
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd90      	pop	{r4, r7, pc}
	...

08010c8c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b08b      	sub	sp, #44	; 0x2c
 8010c90:	af02      	add	r7, sp, #8
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 feea 	bl	8011a72 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7f4 fa53 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	60fb      	str	r3, [r7, #12]
 8010cac:	f107 020c 	add.w	r2, r7, #12
 8010cb0:	f107 0308 	add.w	r3, r7, #8
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7f4 fa56 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d112      	bne.n	8010ce8 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 fee4 	bl	8011a90 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7f4 fa70 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	f107 0310 	add.w	r3, r7, #16
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f000 fee4 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e000      	b.n	8010cee <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8010cec:	2300      	movs	r3, #0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d01b      	beq.n	8010d2a <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010cf2:	687c      	ldr	r4, [r7, #4]
 8010cf4:	f107 0208 	add.w	r2, r7, #8
 8010cf8:	f107 0314 	add.w	r3, r7, #20
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f000 fef7 	bl	8011af2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8010d04:	f107 0318 	add.w	r3, r7, #24
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f000 fee2 	bl	8011ad4 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010d10:	f107 0218 	add.w	r2, r7, #24
 8010d14:	f107 031c 	add.w	r3, r7, #28
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	4a08      	ldr	r2, [pc, #32]	; (8010d40 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8010d1e:	6979      	ldr	r1, [r7, #20]
 8010d20:	4620      	mov	r0, r4
 8010d22:	f000 fef6 	bl	8011b12 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8010d26:	4603      	mov	r3, r0
 8010d28:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f4 fa3f 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	3304      	adds	r3, #4
      }
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3724      	adds	r7, #36	; 0x24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd90      	pop	{r4, r7, pc}
 8010d40:	08020d58 	.word	0x08020d58

08010d44 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010d5a:	2008      	movs	r0, #8
 8010d5c:	f00f fc52 	bl	8020604 <_Znwj>
 8010d60:	4603      	mov	r3, r0
 8010d62:	461c      	mov	r4, r3
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	4620      	mov	r0, r4
 8010d68:	f000 fe5c 	bl	8011a24 <_ZN5FieldIJhEEC1EPh>
 8010d6c:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f103 0208 	add.w	r2, r3, #8
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	613b      	str	r3, [r7, #16]
 8010d78:	f107 0310 	add.w	r3, r7, #16
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	4610      	mov	r0, r2
 8010d80:	f000 fe66 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f000 ff01 	bl	8011b8e <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 8010d8c:	bf00      	nop
 8010d8e:	371c      	adds	r7, #28
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd90      	pop	{r4, r7, pc}

08010d94 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010d94:	b590      	push	{r4, r7, lr}
 8010d96:	b087      	sub	sp, #28
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	1c5a      	adds	r2, r3, #1
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010daa:	2008      	movs	r0, #8
 8010dac:	f00f fc2a 	bl	8020604 <_Znwj>
 8010db0:	4603      	mov	r3, r0
 8010db2:	461c      	mov	r4, r3
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	4620      	mov	r0, r4
 8010db8:	f000 fe34 	bl	8011a24 <_ZN5FieldIJhEEC1EPh>
 8010dbc:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f103 0208 	add.w	r2, r3, #8
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	613b      	str	r3, [r7, #16]
 8010dc8:	f107 0310 	add.w	r3, r7, #16
 8010dcc:	4619      	mov	r1, r3
 8010dce:	4610      	mov	r0, r2
 8010dd0:	f000 fe3e 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010dd4:	6879      	ldr	r1, [r7, #4]
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f000 fefc 	bl	8011bd4 <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8010ddc:	bf00      	nop
 8010dde:	371c      	adds	r7, #28
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd90      	pop	{r4, r7, pc}

08010de4 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b087      	sub	sp, #28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010dfa:	2008      	movs	r0, #8
 8010dfc:	f00f fc02 	bl	8020604 <_Znwj>
 8010e00:	4603      	mov	r3, r0
 8010e02:	461c      	mov	r4, r3
 8010e04:	68b9      	ldr	r1, [r7, #8]
 8010e06:	4620      	mov	r0, r4
 8010e08:	f000 fe0c 	bl	8011a24 <_ZN5FieldIJhEEC1EPh>
 8010e0c:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f103 0208 	add.w	r2, r3, #8
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	613b      	str	r3, [r7, #16]
 8010e18:	f107 0310 	add.w	r3, r7, #16
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	4610      	mov	r0, r2
 8010e20:	f000 fe16 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010e24:	6879      	ldr	r1, [r7, #4]
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7ff ff0c 	bl	8010c44 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 8010e2c:	bf00      	nop
 8010e2e:	371c      	adds	r7, #28
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd90      	pop	{r4, r7, pc}

08010e34 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010e4a:	b5b0      	push	{r4, r5, r7, lr}
 8010e4c:	b084      	sub	sp, #16
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 fee0 	bl	8011c1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 fee8 	bl	8011c32 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010e62:	4602      	mov	r2, r0
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	4621      	mov	r1, r4
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 feee 	bl	8011c4a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 f828 	bl	8010ec8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	60fb      	str	r3, [r7, #12]
 8010e7c:	f107 020c 	add.w	r2, r7, #12
 8010e80:	f107 0308 	add.w	r3, r7, #8
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 f82f 	bl	8010eea <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8010e8c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d110      	bne.n	8010eb4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010e92:	687c      	ldr	r4, [r7, #4]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7f7 fe75 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010ea0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	4629      	mov	r1, r5
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f7f0 f816 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d004      	beq.n	8010ebe <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 f807 	bl	8010ec8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	e000      	b.n	8010ec0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010ebe:	68bb      	ldr	r3, [r7, #8]
    }
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bdb0      	pop	{r4, r5, r7, pc}

08010ec8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	1d1a      	adds	r2, r3, #4
 8010ed4:	f107 030c 	add.w	r3, r7, #12
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 fee8 	bl	8011cb0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3710      	adds	r7, #16
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010eea:	b480      	push	{r7}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	bf0c      	ite	eq
 8010f00:	2301      	moveq	r3, #1
 8010f02:	2300      	movne	r3, #0
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	4618      	mov	r0, r3
 8010f08:	370c      	adds	r7, #12
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010f12:	b5b0      	push	{r4, r5, r7, lr}
 8010f14:	b084      	sub	sp, #16
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 fed6 	bl	8011cce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010f22:	4604      	mov	r4, r0
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 fede 	bl	8011ce6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	4621      	mov	r1, r4
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fee4 	bl	8011cfe <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010f36:	4603      	mov	r3, r0
 8010f38:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f828 	bl	8010f90 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010f40:	4603      	mov	r3, r0
 8010f42:	60fb      	str	r3, [r7, #12]
 8010f44:	f107 020c 	add.w	r2, r7, #12
 8010f48:	f107 0308 	add.w	r3, r7, #8
 8010f4c:	4611      	mov	r1, r2
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 f82f 	bl	8010fb2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010f54:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d110      	bne.n	8010f7c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010f5a:	687c      	ldr	r4, [r7, #4]
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f3 f932 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010f68:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4629      	mov	r1, r5
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7ef ffb2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d004      	beq.n	8010f86 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 f807 	bl	8010f90 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010f82:	4603      	mov	r3, r0
 8010f84:	e000      	b.n	8010f88 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010f86:	68bb      	ldr	r3, [r7, #8]
    }
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bdb0      	pop	{r4, r5, r7, pc}

08010f90 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	1d1a      	adds	r2, r3, #4
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 fede 	bl	8011d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	4618      	mov	r0, r3
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010fb2:	b480      	push	{r7}
 8010fb4:	b083      	sub	sp, #12
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	bf0c      	ite	eq
 8010fc8:	2301      	moveq	r3, #1
 8010fca:	2300      	movne	r3, #0
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	4618      	mov	r0, r3
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010fda:	b480      	push	{r7}
 8010fdc:	b083      	sub	sp, #12
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr

08011006 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8011006:	b590      	push	{r4, r7, lr}
 8011008:	b083      	sub	sp, #12
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011010:	6838      	ldr	r0, [r7, #0]
 8011012:	f7ff ffed 	bl	8010ff0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011016:	4603      	mov	r3, r0
 8011018:	4622      	mov	r2, r4
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f000 feb0 	bl	8011d82 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011022:	bf00      	nop
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	bd90      	pop	{r4, r7, pc}

0801102a <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 feba 	bl	8011dac <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011038:	4603      	mov	r3, r0
 801103a:	4618      	mov	r0, r3
 801103c:	f000 fec6 	bl	8011dcc <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011040:	bf00      	nop
      }
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011048:	b590      	push	{r4, r7, lr}
 801104a:	b085      	sub	sp, #20
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	4613      	mov	r3, r2
 8011054:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011056:	79fb      	ldrb	r3, [r7, #7]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d109      	bne.n	8011070 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 801105c:	68b8      	ldr	r0, [r7, #8]
 801105e:	f000 fea5 	bl	8011dac <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011062:	4604      	mov	r4, r0
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f000 fec1 	bl	8011dec <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 801106a:	4603      	mov	r3, r0
 801106c:	601c      	str	r4, [r3, #0]
	    break;
 801106e:	e005      	b.n	801107c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	461a      	mov	r2, r3
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f000 fec4 	bl	8011e04 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 801107c:	2300      	movs	r3, #0
      }
 801107e:	4618      	mov	r0, r3
 8011080:	3714      	adds	r7, #20
 8011082:	46bd      	mov	sp, r7
 8011084:	bd90      	pop	{r4, r7, pc}

08011086 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011086:	b480      	push	{r7}
 8011088:	b083      	sub	sp, #12
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
	  { return true; }
 801108e:	2301      	movs	r3, #1
 8011090:	4618      	mov	r0, r3
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80110b2:	b590      	push	{r4, r7, lr}
 80110b4:	b083      	sub	sp, #12
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80110bc:	6838      	ldr	r0, [r7, #0]
 80110be:	f7ff ffed 	bl	801109c <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80110c2:	4603      	mov	r3, r0
 80110c4:	4622      	mov	r2, r4
 80110c6:	4619      	mov	r1, r3
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 fec6 	bl	8011e5a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80110ce:	bf00      	nop
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd90      	pop	{r4, r7, pc}

080110d6 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b082      	sub	sp, #8
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 fed0 	bl	8011e84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80110e4:	4603      	mov	r3, r0
 80110e6:	4618      	mov	r0, r3
 80110e8:	f000 fedc 	bl	8011ea4 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80110ec:	bf00      	nop
      }
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80110f4:	b590      	push	{r4, r7, lr}
 80110f6:	b085      	sub	sp, #20
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	4613      	mov	r3, r2
 8011100:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011102:	79fb      	ldrb	r3, [r7, #7]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d109      	bne.n	801111c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011108:	68b8      	ldr	r0, [r7, #8]
 801110a:	f000 febb 	bl	8011e84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801110e:	4604      	mov	r4, r0
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f000 fed7 	bl	8011ec4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011116:	4603      	mov	r3, r0
 8011118:	601c      	str	r4, [r3, #0]
	    break;
 801111a:	e005      	b.n	8011128 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 801111c:	79fb      	ldrb	r3, [r7, #7]
 801111e:	461a      	mov	r2, r3
 8011120:	68b9      	ldr	r1, [r7, #8]
 8011122:	68f8      	ldr	r0, [r7, #12]
 8011124:	f000 feda 	bl	8011edc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8011128:	2300      	movs	r3, #0
      }
 801112a:	4618      	mov	r0, r3
 801112c:	3714      	adds	r7, #20
 801112e:	46bd      	mov	sp, r7
 8011130:	bd90      	pop	{r4, r7, pc}

08011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011132:	b480      	push	{r7}
 8011134:	b083      	sub	sp, #12
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011148:	b590      	push	{r4, r7, lr}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011152:	6838      	ldr	r0, [r7, #0]
 8011154:	f7ff ffed 	bl	8011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011158:	4603      	mov	r3, r0
 801115a:	681c      	ldr	r4, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4619      	mov	r1, r3
 8011160:	2004      	movs	r0, #4
 8011162:	f7ef f8e5 	bl	8000330 <_ZnwjPv>
 8011166:	4603      	mov	r3, r0
 8011168:	601c      	str	r4, [r3, #0]
 801116a:	4618      	mov	r0, r3
 801116c:	370c      	adds	r7, #12
 801116e:	46bd      	mov	sp, r7
 8011170:	bd90      	pop	{r4, r7, pc}

08011172 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011172:	b580      	push	{r7, lr}
 8011174:	b084      	sub	sp, #16
 8011176:	af00      	add	r7, sp, #0
 8011178:	60f8      	str	r0, [r7, #12]
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7ff ffd7 	bl	8011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011184:	4603      	mov	r3, r0
 8011186:	4619      	mov	r1, r3
 8011188:	68b8      	ldr	r0, [r7, #8]
 801118a:	f7ff ffdd 	bl	8011148 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801118e:	bf00      	nop
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
	...

08011198 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011198:	b5b0      	push	{r4, r5, r7, lr}
 801119a:	b08c      	sub	sp, #48	; 0x30
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80111a4:	4a39      	ldr	r2, [pc, #228]	; (801128c <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80111a6:	2101      	movs	r1, #1
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f000 fec2 	bl	8011f32 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 80111ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7fe febd 	bl	800ff3c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 80111c2:	4603      	mov	r3, r0
 80111c4:	617b      	str	r3, [r7, #20]
 80111c6:	f107 0214 	add.w	r2, r7, #20
 80111ca:	f107 0308 	add.w	r3, r7, #8
 80111ce:	4611      	mov	r1, r2
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 fef5 	bl	8011fc0 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80111d6:	4603      	mov	r3, r0
 80111d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 ff03 	bl	8011fea <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 80111e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80111ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	18d5      	adds	r5, r2, r3
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7ff ff9c 	bl	8011132 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80111fa:	4603      	mov	r3, r0
 80111fc:	461a      	mov	r2, r3
 80111fe:	4629      	mov	r1, r5
 8011200:	4620      	mov	r0, r4
 8011202:	f7ff ffb6 	bl	8011172 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011206:	2300      	movs	r3, #0
 8011208:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801120a:	f107 0308 	add.w	r3, r7, #8
 801120e:	4618      	mov	r0, r3
 8011210:	f7fc fc1a 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011214:	4603      	mov	r3, r0
 8011216:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	4618      	mov	r0, r3
 801121c:	f7fa ffb4 	bl	800c188 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011220:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011222:	69fa      	ldr	r2, [r7, #28]
 8011224:	4621      	mov	r1, r4
 8011226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011228:	f000 fef3 	bl	8012012 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801122c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	3304      	adds	r3, #4
 8011232:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011234:	f107 0308 	add.w	r3, r7, #8
 8011238:	4618      	mov	r0, r3
 801123a:	f7fc fc05 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 801123e:	4603      	mov	r3, r0
 8011240:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	4618      	mov	r0, r3
 8011246:	f7fa ff9f 	bl	800c188 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 801124a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801124c:	69ba      	ldr	r2, [r7, #24]
 801124e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011250:	4620      	mov	r0, r4
 8011252:	f000 fede 	bl	8012012 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011256:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011258:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	689a      	ldr	r2, [r3, #8]
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011264:	461a      	mov	r2, r3
 8011266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011268:	f7fa ff51 	bl	800c10e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	69fa      	ldr	r2, [r7, #28]
 8011270:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	69ba      	ldr	r2, [r7, #24]
 8011276:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	69fa      	ldr	r2, [r7, #28]
 801127e:	441a      	add	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	609a      	str	r2, [r3, #8]
    }
 8011284:	bf00      	nop
 8011286:	3730      	adds	r7, #48	; 0x30
 8011288:	46bd      	mov	sp, r7
 801128a:	bdb0      	pop	{r4, r5, r7, pc}
 801128c:	08020cf0 	.word	0x08020cf0

08011290 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f7fe fe5f 	bl	800ff5c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 801129e:	4603      	mov	r3, r0
 80112a0:	60fb      	str	r3, [r7, #12]
 80112a2:	f107 030c 	add.w	r3, r7, #12
 80112a6:	2101      	movs	r1, #1
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 fec6 	bl	801203a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 80112ae:	4603      	mov	r3, r0
 80112b0:	60bb      	str	r3, [r7, #8]
 80112b2:	f107 0308 	add.w	r3, r7, #8
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7fc fbf9 	bl	800daae <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 80112bc:	4603      	mov	r3, r0
      }
 80112be:	4618      	mov	r0, r3
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b082      	sub	sp, #8
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fc fa03 	bl	800d6dc <_ZNKSt14_Function_base8_M_emptyEv>
 80112d6:	4603      	mov	r3, r0
 80112d8:	f083 0301 	eor.w	r3, r3, #1
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	4618      	mov	r0, r3
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 febb 	bl	801206c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80112f6:	4602      	mov	r2, r0
 80112f8:	f107 0308 	add.w	r3, r7, #8
 80112fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011300:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8011304:	6838      	ldr	r0, [r7, #0]
 8011306:	f000 feb1 	bl	801206c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801130a:	4602      	mov	r2, r0
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011312:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8011316:	f107 0308 	add.w	r3, r7, #8
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fea6 	bl	801206c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011320:	4602      	mov	r2, r0
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011328:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801132c:	bf00      	nop
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fe9f 	bl	8012082 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011344:	4603      	mov	r3, r0
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801134a:	6838      	ldr	r0, [r7, #0]
 801134c:	f000 fe99 	bl	8012082 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011350:	4603      	mov	r3, r0
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011358:	f107 030c 	add.w	r3, r7, #12
 801135c:	4618      	mov	r0, r3
 801135e:	f000 fe90 	bl	8012082 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011362:	4603      	mov	r3, r0
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	601a      	str	r2, [r3, #0]
    }
 801136a:	bf00      	nop
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8011372:	b580      	push	{r7, lr}
 8011374:	b084      	sub	sp, #16
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f000 fe8b 	bl	8012098 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8011382:	4603      	mov	r3, r0
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011388:	6838      	ldr	r0, [r7, #0]
 801138a:	f000 fe85 	bl	8012098 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 801138e:	4603      	mov	r3, r0
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011396:	f107 030c 	add.w	r3, r7, #12
 801139a:	4618      	mov	r0, r3
 801139c:	f000 fe7c 	bl	8012098 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80113a0:	4603      	mov	r3, r0
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	601a      	str	r2, [r3, #0]
    }
 80113a8:	bf00      	nop
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 80113b0:	b590      	push	{r4, r7, lr}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7f9 ff87 	bl	800b2ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 80113c0:	4604      	mov	r4, r0
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7fa f9ca 	bl	800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80113c8:	4602      	mov	r2, r0
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	4621      	mov	r1, r4
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 fe6d 	bl	80120ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 80113d4:	4603      	mov	r3, r0
 80113d6:	4618      	mov	r0, r3
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd90      	pop	{r4, r7, pc}

080113de <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 80113de:	b480      	push	{r7}
 80113e0:	b083      	sub	sp, #12
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80113e6:	bf00      	nop
 80113e8:	4618      	mov	r0, r3
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113f4:	b480      	push	{r7}
 80113f6:	b083      	sub	sp, #12
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr

0801140a <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 801140a:	b590      	push	{r4, r7, lr}
 801140c:	b083      	sub	sp, #12
 801140e:	af00      	add	r7, sp, #0
 8011410:	6078      	str	r0, [r7, #4]
 8011412:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8011414:	687c      	ldr	r4, [r7, #4]
 8011416:	6838      	ldr	r0, [r7, #0]
 8011418:	f7ff ffec 	bl	80113f4 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801141c:	4603      	mov	r3, r0
 801141e:	4619      	mov	r1, r3
 8011420:	4620      	mov	r0, r4
 8011422:	f000 fe75 	bl	8012110 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4618      	mov	r0, r3
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	bd90      	pop	{r4, r7, pc}

08011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	370c      	adds	r7, #12
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011446:	b5b0      	push	{r4, r5, r7, lr}
 8011448:	b088      	sub	sp, #32
 801144a:	af02      	add	r7, sp, #8
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	607a      	str	r2, [r7, #4]
 8011452:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7fa f999 	bl	800b78c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 801145a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801145c:	68b8      	ldr	r0, [r7, #8]
 801145e:	f7ef ff02 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011462:	4604      	mov	r4, r0
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7ff ffe3 	bl	8011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801146a:	4605      	mov	r5, r0
 801146c:	6838      	ldr	r0, [r7, #0]
 801146e:	f7ef ff10 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011472:	4603      	mov	r3, r0
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	462b      	mov	r3, r5
 8011478:	4622      	mov	r2, r4
 801147a:	6979      	ldr	r1, [r7, #20]
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f000 fe5a 	bl	8012136 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8011482:	697b      	ldr	r3, [r7, #20]
	}
 8011484:	4618      	mov	r0, r3
 8011486:	3718      	adds	r7, #24
 8011488:	46bd      	mov	sp, r7
 801148a:	bdb0      	pop	{r4, r5, r7, pc}

0801148c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801148c:	b5b0      	push	{r4, r5, r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
 8011498:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d117      	bne.n	80114d0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f7fa f95b 	bl	800b75c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80114a6:	4602      	mov	r2, r0
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d010      	beq.n	80114d0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80114ae:	68fc      	ldr	r4, [r7, #12]
 80114b0:	6838      	ldr	r0, [r7, #0]
 80114b2:	f7fa f85a 	bl	800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80114b6:	4605      	mov	r5, r0
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f7fa f9a1 	bl	800b800 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80114be:	4603      	mov	r3, r0
 80114c0:	461a      	mov	r2, r3
 80114c2:	4629      	mov	r1, r5
 80114c4:	4620      	mov	r0, r4
 80114c6:	f7f9 fdff 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 80114d4:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80114d6:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80114dc:	7df8      	ldrb	r0, [r7, #23]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	f00f f8fb 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80114f0:	f107 0310 	add.w	r3, r7, #16
 80114f4:	6839      	ldr	r1, [r7, #0]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fa f85b 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 80114fc:	693b      	ldr	r3, [r7, #16]
    }
 80114fe:	4618      	mov	r0, r3
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bdb0      	pop	{r4, r5, r7, pc}

08011506 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8011506:	b580      	push	{r7, lr}
 8011508:	b084      	sub	sp, #16
 801150a:	af00      	add	r7, sp, #0
 801150c:	60f8      	str	r0, [r7, #12]
 801150e:	7239      	strb	r1, [r7, #8]
 8011510:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7ff f969 	bl	80107ea <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011518:	4603      	mov	r3, r0
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	601a      	str	r2, [r3, #0]
	    { }
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	4618      	mov	r0, r3
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801152a:	b5b0      	push	{r4, r5, r7, lr}
 801152c:	b084      	sub	sp, #16
 801152e:	af00      	add	r7, sp, #0
 8011530:	60f8      	str	r0, [r7, #12]
 8011532:	7239      	strb	r1, [r7, #8]
 8011534:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8011536:	68fc      	ldr	r4, [r7, #12]
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7ff f956 	bl	80107ea <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801153e:	4603      	mov	r3, r0
 8011540:	461a      	mov	r2, r3
 8011542:	4629      	mov	r1, r5
 8011544:	4620      	mov	r0, r4
 8011546:	f7ff ffde 	bl	8011506 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2201      	movs	r2, #1
 801154e:	711a      	strb	r2, [r3, #4]
	{ }
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bdb0      	pop	{r4, r5, r7, pc}

0801155a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801155a:	b480      	push	{r7}
 801155c:	b083      	sub	sp, #12
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011570:	b580      	push	{r7, lr}
 8011572:	b088      	sub	sp, #32
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	61fb      	str	r3, [r7, #28]
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	61bb      	str	r3, [r7, #24]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011588:	f7ee feca 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d003      	beq.n	801159a <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8011592:	69b8      	ldr	r0, [r7, #24]
 8011594:	f00f f832 	bl	80205fc <_ZdlPv>
	    return;
 8011598:	e005      	b.n	80115a6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	69b9      	ldr	r1, [r7, #24]
 801159e:	69f8      	ldr	r0, [r7, #28]
 80115a0:	f001 fb65 	bl	8012c6e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80115a4:	bf00      	nop
 80115a6:	bf00      	nop
 80115a8:	3720      	adds	r7, #32
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b082      	sub	sp, #8
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
 80115b6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80115b8:	f7ee feb2 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d004      	beq.n	80115cc <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 fde3 	bl	8012190 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 80115ca:	e003      	b.n	80115d4 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 fdf6 	bl	80121c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115da:	b480      	push	{r7}
 80115dc:	b083      	sub	sp, #12
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4618      	mov	r0, r3
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80115f0:	b590      	push	{r4, r7, lr}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80115fa:	6838      	ldr	r0, [r7, #0]
 80115fc:	f7ff ffed 	bl	80115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011600:	4603      	mov	r3, r0
 8011602:	681c      	ldr	r4, [r3, #0]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4619      	mov	r1, r3
 8011608:	2004      	movs	r0, #4
 801160a:	f7ee fe91 	bl	8000330 <_ZnwjPv>
 801160e:	4603      	mov	r3, r0
 8011610:	601c      	str	r4, [r3, #0]
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	bd90      	pop	{r4, r7, pc}

0801161a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801161a:	b580      	push	{r7, lr}
 801161c:	b084      	sub	sp, #16
 801161e:	af00      	add	r7, sp, #0
 8011620:	60f8      	str	r0, [r7, #12]
 8011622:	60b9      	str	r1, [r7, #8]
 8011624:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff ffd7 	bl	80115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 801162c:	4603      	mov	r3, r0
 801162e:	4619      	mov	r1, r3
 8011630:	68b8      	ldr	r0, [r7, #8]
 8011632:	f7ff ffdd 	bl	80115f0 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011636:	bf00      	nop
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
	...

08011640 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011640:	b5b0      	push	{r4, r5, r7, lr}
 8011642:	b08c      	sub	sp, #48	; 0x30
 8011644:	af00      	add	r7, sp, #0
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801164c:	4a39      	ldr	r2, [pc, #228]	; (8011734 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801164e:	2101      	movs	r1, #1
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f000 fdc0 	bl	80121d6 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 8011656:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f7fe fdf8 	bl	801025a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 801166a:	4603      	mov	r3, r0
 801166c:	617b      	str	r3, [r7, #20]
 801166e:	f107 0214 	add.w	r2, r7, #20
 8011672:	f107 0308 	add.w	r3, r7, #8
 8011676:	4611      	mov	r1, r2
 8011678:	4618      	mov	r0, r3
 801167a:	f000 fdf3 	bl	8012264 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801167e:	4603      	mov	r3, r0
 8011680:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011686:	4618      	mov	r0, r3
 8011688:	f000 fe01 	bl	801228e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 801168c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011692:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011698:	69fa      	ldr	r2, [r7, #28]
 801169a:	18d5      	adds	r5, r2, r3
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff ff9c 	bl	80115da <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 80116a2:	4603      	mov	r3, r0
 80116a4:	461a      	mov	r2, r3
 80116a6:	4629      	mov	r1, r5
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7ff ffb6 	bl	801161a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80116ae:	2300      	movs	r3, #0
 80116b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116b2:	f107 0308 	add.w	r3, r7, #8
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7fc fd44 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80116bc:	4603      	mov	r3, r0
 80116be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fa f99c 	bl	800ba00 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 80116c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116ca:	69fa      	ldr	r2, [r7, #28]
 80116cc:	4621      	mov	r1, r4
 80116ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116d0:	f000 fdf1 	bl	80122b6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80116d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	3304      	adds	r3, #4
 80116da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80116dc:	f107 0308 	add.w	r3, r7, #8
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fc fd2f 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80116e6:	4603      	mov	r3, r0
 80116e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7fa f987 	bl	800ba00 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 80116f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80116f4:	69ba      	ldr	r2, [r7, #24]
 80116f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116f8:	4620      	mov	r0, r4
 80116fa:	f000 fddc 	bl	80122b6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80116fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011700:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	689a      	ldr	r2, [r3, #8]
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801170c:	461a      	mov	r2, r3
 801170e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011710:	f7f9 fd1f 	bl	800b152 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	69fa      	ldr	r2, [r7, #28]
 8011718:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	69ba      	ldr	r2, [r7, #24]
 801171e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	69fa      	ldr	r2, [r7, #28]
 8011726:	441a      	add	r2, r3
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	609a      	str	r2, [r3, #8]
    }
 801172c:	bf00      	nop
 801172e:	3730      	adds	r7, #48	; 0x30
 8011730:	46bd      	mov	sp, r7
 8011732:	bdb0      	pop	{r4, r5, r7, pc}
 8011734:	08020cf0 	.word	0x08020cf0

08011738 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7fe fd9a 	bl	801027a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8011746:	4603      	mov	r3, r0
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	f107 030c 	add.w	r3, r7, #12
 801174e:	2101      	movs	r1, #1
 8011750:	4618      	mov	r0, r3
 8011752:	f000 fdc4 	bl	80122de <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 8011756:	4603      	mov	r3, r0
 8011758:	60bb      	str	r3, [r7, #8]
 801175a:	f107 0308 	add.w	r3, r7, #8
 801175e:	4618      	mov	r0, r3
 8011760:	f7fc fd23 	bl	800e1aa <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8011764:	4603      	mov	r3, r0
      }
 8011766:	4618      	mov	r0, r3
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801176e:	b480      	push	{r7}
 8011770:	b083      	sub	sp, #12
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4618      	mov	r0, r3
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr

08011784 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f000 fdbd 	bl	8012310 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011796:	4604      	mov	r4, r0
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7fe fc65 	bl	8010068 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 801179e:	4603      	mov	r3, r0
 80117a0:	1ae2      	subs	r2, r4, r3
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	bf34      	ite	cc
 80117a8:	2301      	movcc	r3, #1
 80117aa:	2300      	movcs	r3, #0
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d002      	beq.n	80117b8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f00e fff0 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7fe fc55 	bl	8010068 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117be:	4604      	mov	r4, r0
 80117c0:	68f8      	ldr	r0, [r7, #12]
 80117c2:	f7fe fc51 	bl	8010068 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117c6:	4603      	mov	r3, r0
 80117c8:	613b      	str	r3, [r7, #16]
 80117ca:	f107 0208 	add.w	r2, r7, #8
 80117ce:	f107 0310 	add.w	r3, r7, #16
 80117d2:	4611      	mov	r1, r2
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f1 f83c 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80117da:	4603      	mov	r3, r0
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4423      	add	r3, r4
 80117e0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f7fe fc40 	bl	8010068 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117e8:	4602      	mov	r2, r0
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d306      	bcc.n	80117fe <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 fd8d 	bl	8012310 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 80117f6:	4602      	mov	r2, r0
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d904      	bls.n	8011808 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f000 fd86 	bl	8012310 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011804:	4603      	mov	r3, r0
 8011806:	e000      	b.n	801180a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011808:	697b      	ldr	r3, [r7, #20]
      }
 801180a:	4618      	mov	r0, r3
 801180c:	371c      	adds	r7, #28
 801180e:	46bd      	mov	sp, r7
 8011810:	bd90      	pop	{r4, r7, pc}

08011812 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011812:	b590      	push	{r4, r7, lr}
 8011814:	b083      	sub	sp, #12
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7fc fb91 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011822:	4603      	mov	r3, r0
 8011824:	681c      	ldr	r4, [r3, #0]
 8011826:	6838      	ldr	r0, [r7, #0]
 8011828:	f7fc fb8c 	bl	800df44 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801182c:	4603      	mov	r3, r0
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	1ae3      	subs	r3, r4, r3
 8011832:	109b      	asrs	r3, r3, #2
 8011834:	4618      	mov	r0, r3
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	bd90      	pop	{r4, r7, pc}

0801183c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d006      	beq.n	801185a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6839      	ldr	r1, [r7, #0]
 8011850:	4618      	mov	r0, r3
 8011852:	f000 fd6e 	bl	8012332 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 8011856:	4603      	mov	r3, r0
 8011858:	e000      	b.n	801185c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 801185a:	2300      	movs	r3, #0
      }
 801185c:	4618      	mov	r0, r3
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011864:	b590      	push	{r4, r7, lr}
 8011866:	b087      	sub	sp, #28
 8011868:	af02      	add	r7, sp, #8
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011872:	f88d 4000 	strb.w	r4, [sp]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	68b9      	ldr	r1, [r7, #8]
 801187c:	68f8      	ldr	r0, [r7, #12]
 801187e:	f000 fd78 	bl	8012372 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011882:	4603      	mov	r3, r0
      }
 8011884:	4618      	mov	r0, r3
 8011886:	3714      	adds	r7, #20
 8011888:	46bd      	mov	sp, r7
 801188a:	bd90      	pop	{r4, r7, pc}

0801188c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 801188c:	b590      	push	{r4, r7, lr}
 801188e:	b085      	sub	sp, #20
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011898:	68b8      	ldr	r0, [r7, #8]
 801189a:	f7ff f91e 	bl	8010ada <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 801189e:	4604      	mov	r4, r0
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f7fb fee4 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 80118a6:	4603      	mov	r3, r0
 80118a8:	4619      	mov	r1, r3
 80118aa:	2004      	movs	r0, #4
 80118ac:	f7ee fd40 	bl	8000330 <_ZnwjPv>
 80118b0:	4602      	mov	r2, r0
 80118b2:	6823      	ldr	r3, [r4, #0]
 80118b4:	6013      	str	r3, [r2, #0]
 80118b6:	bf00      	nop
 80118b8:	3714      	adds	r7, #20
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd90      	pop	{r4, r7, pc}

080118be <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80118be:	b580      	push	{r7, lr}
 80118c0:	b084      	sub	sp, #16
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 fd6f 	bl	80123aa <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 80118cc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f000 fd77 	bl	80123c2 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>
 80118d4:	4603      	mov	r3, r0
	}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80118de:	b590      	push	{r4, r7, lr}
 80118e0:	b083      	sub	sp, #12
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 fd76 	bl	80123d8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 80118ec:	4603      	mov	r3, r0
 80118ee:	4619      	mov	r1, r3
 80118f0:	4620      	mov	r0, r4
 80118f2:	f000 fd7c 	bl	80123ee <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80118f6:	bf00      	nop
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd90      	pop	{r4, r7, pc}

080118fe <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7fb feb1 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 801190c:	4603      	mov	r3, r0
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011916:	b5b0      	push	{r4, r5, r7, lr}
 8011918:	b084      	sub	sp, #16
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	4613      	mov	r3, r2
 8011922:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011924:	79fb      	ldrb	r3, [r7, #7]
 8011926:	2b03      	cmp	r3, #3
 8011928:	d016      	beq.n	8011958 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 801192a:	2b03      	cmp	r3, #3
 801192c:	dc19      	bgt.n	8011962 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 801192e:	2b01      	cmp	r3, #1
 8011930:	d002      	beq.n	8011938 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8011932:	2b02      	cmp	r3, #2
 8011934:	d00a      	beq.n	801194c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8011936:	e014      	b.n	8011962 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011938:	68b8      	ldr	r0, [r7, #8]
 801193a:	f7ff ffc0 	bl	80118be <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 801193e:	4604      	mov	r4, r0
 8011940:	68f8      	ldr	r0, [r7, #12]
 8011942:	f7ff ffdc 	bl	80118fe <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8011946:	4603      	mov	r3, r0
 8011948:	601c      	str	r4, [r3, #0]
	      break;
 801194a:	e00a      	b.n	8011962 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 801194c:	462a      	mov	r2, r5
 801194e:	68b9      	ldr	r1, [r7, #8]
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f000 fd5c 	bl	801240e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8011956:	e004      	b.n	8011962 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011958:	4621      	mov	r1, r4
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f000 fd70 	bl	8012440 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011960:	bf00      	nop
	  return false;
 8011962:	2300      	movs	r3, #0
	}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bdb0      	pop	{r4, r5, r7, pc}

0801196c <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fd6f 	bl	8012458 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	605a      	str	r2, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	609a      	str	r2, [r3, #8]
	{ }
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
	if (__p)
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d005      	beq.n	80119ca <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	68b9      	ldr	r1, [r7, #8]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f000 fd52 	bl	801246e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 80119ca:	bf00      	nop
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}

080119d2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80119d2:	b480      	push	{r7}
 80119d4:	b083      	sub	sp, #12
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80119f4:	68b9      	ldr	r1, [r7, #8]
 80119f6:	68f8      	ldr	r0, [r7, #12]
 80119f8:	f000 fd58 	bl	80124ac <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 80119fc:	bf00      	nop
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <_ZN5FieldIJEEC1Ev>:
class Field<> {
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	4a04      	ldr	r2, [pc, #16]	; (8011a20 <_ZN5FieldIJEEC1Ev+0x1c>)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4618      	mov	r0, r3
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	08020da0 	.word	0x08020da0

08011a24 <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff ffe7 	bl	8011a04 <_ZN5FieldIJEEC1Ev>
 8011a36:	4a05      	ldr	r2, [pc, #20]	; (8011a4c <_ZN5FieldIJhEEC1EPh+0x28>)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	601a      	str	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	605a      	str	r2, [r3, #4]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	08020d8c 	.word	0x08020d8c

08011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8011a5a:	6838      	ldr	r0, [r7, #0]
 8011a5c:	f000 fd3c 	bl	80124d8 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8011a60:	4603      	mov	r3, r0
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 fd42 	bl	80124ee <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 8011a6a:	bf00      	nop
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b082      	sub	sp, #8
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]
 8011a7a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6839      	ldr	r1, [r7, #0]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 fd66 	bl	8012552 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 8011a86:	4603      	mov	r3, r0
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f000 fd70 	bl	8012580 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 8011aa0:	bf00      	nop
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd90      	pop	{r4, r7, pc}

08011aaa <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8011aaa:	b480      	push	{r7}
 8011aac:	b085      	sub	sp, #20
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	60b9      	str	r1, [r7, #8]
 8011ab4:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	881a      	ldrh	r2, [r3, #0]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	881b      	ldrh	r3, [r3, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	bf34      	ite	cc
 8011ac2:	2301      	movcc	r3, #1
 8011ac4:	2300      	movcs	r3, #0
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3714      	adds	r7, #20
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 fd57 	bl	8012596 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	4618      	mov	r0, r3
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8011af2:	b480      	push	{r7}
 8011af4:	b083      	sub	sp, #12
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	4618      	mov	r0, r3
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011b12:	b5b0      	push	{r4, r5, r7, lr}
 8011b14:	b088      	sub	sp, #32
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	60f8      	str	r0, [r7, #12]
 8011b1a:	60b9      	str	r1, [r7, #8]
 8011b1c:	607a      	str	r2, [r7, #4]
 8011b1e:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ef fba0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b26:	4604      	mov	r4, r0
 8011b28:	6838      	ldr	r0, [r7, #0]
 8011b2a:	f000 fd43 	bl	80125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b32:	f7ef fbae 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b36:	4603      	mov	r3, r0
 8011b38:	462a      	mov	r2, r5
 8011b3a:	4621      	mov	r1, r4
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f000 fd44 	bl	80125ca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8011b42:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8011b44:	69f8      	ldr	r0, [r7, #28]
 8011b46:	f000 fe86 	bl	8012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	f107 0010 	add.w	r0, r7, #16
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	68f9      	ldr	r1, [r7, #12]
 8011b54:	f000 fd5c 	bl	8012610 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d007      	beq.n	8011b6e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011b5e:	6939      	ldr	r1, [r7, #16]
 8011b60:	697a      	ldr	r2, [r7, #20]
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f000 fe89 	bl	801287c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	e00b      	b.n	8011b86 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011b6e:	69f9      	ldr	r1, [r7, #28]
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7fa fc98 	bl	800c4a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8011b76:	693a      	ldr	r2, [r7, #16]
 8011b78:	f107 0318 	add.w	r3, r7, #24
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f3 fe11 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8011b84:	69bb      	ldr	r3, [r7, #24]
      }
 8011b86:	4618      	mov	r0, r3
 8011b88:	3720      	adds	r7, #32
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bdb0      	pop	{r4, r5, r7, pc}

08011b8e <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011b8e:	b590      	push	{r4, r7, lr}
 8011b90:	b085      	sub	sp, #20
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	1c9a      	adds	r2, r3, #2
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011ba2:	2008      	movs	r0, #8
 8011ba4:	f00e fd2e 	bl	8020604 <_Znwj>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	461c      	mov	r4, r3
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 fea2 	bl	80128f8 <_ZN5FieldIJtEEC1EPt>
 8011bb4:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f103 0208 	add.w	r2, r3, #8
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	60bb      	str	r3, [r7, #8]
 8011bc0:	f107 0308 	add.w	r3, r7, #8
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7ff ff42 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011bcc:	bf00      	nop
    }
 8011bce:	3714      	adds	r7, #20
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd90      	pop	{r4, r7, pc}

08011bd4 <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011bd4:	b590      	push	{r4, r7, lr}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	1d1a      	adds	r2, r3, #4
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011be8:	2008      	movs	r0, #8
 8011bea:	f00e fd0b 	bl	8020604 <_Znwj>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	461c      	mov	r4, r3
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f000 fe95 	bl	8012924 <_ZN5FieldIJmEEC1EPm>
 8011bfa:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f103 0208 	add.w	r2, r3, #8
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	60bb      	str	r3, [r7, #8]
 8011c06:	f107 0308 	add.w	r3, r7, #8
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	f7ff ff1f 	bl	8011a50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011c12:	bf00      	nop
    }
 8011c14:	3714      	adds	r7, #20
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd90      	pop	{r4, r7, pc}

08011c1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011c1a:	b480      	push	{r7}
 8011c1c:	b083      	sub	sp, #12
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	689b      	ldr	r3, [r3, #8]
      }
 8011c26:	4618      	mov	r0, r3
 8011c28:	370c      	adds	r7, #12
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011c32:	b480      	push	{r7}
 8011c34:	b083      	sub	sp, #12
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	3304      	adds	r3, #4
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011c4a:	b590      	push	{r4, r7, lr}
 8011c4c:	b087      	sub	sp, #28
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	60f8      	str	r0, [r7, #12]
 8011c52:	60b9      	str	r1, [r7, #8]
 8011c54:	607a      	str	r2, [r7, #4]
 8011c56:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d01d      	beq.n	8011c9a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011c5e:	68fc      	ldr	r4, [r7, #12]
 8011c60:	68b8      	ldr	r0, [r7, #8]
 8011c62:	f7f6 fd6b 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011c66:	4603      	mov	r3, r0
 8011c68:	6819      	ldr	r1, [r3, #0]
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	4620      	mov	r0, r4
 8011c72:	f7ef f932 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011c76:	4603      	mov	r3, r0
 8011c78:	f083 0301 	eor.w	r3, r3, #1
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d006      	beq.n	8011c90 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	607b      	str	r3, [r7, #4]
 8011c86:	68b8      	ldr	r0, [r7, #8]
 8011c88:	f000 fe62 	bl	8012950 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011c8c:	60b8      	str	r0, [r7, #8]
 8011c8e:	e7e3      	b.n	8011c58 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011c90:	68b8      	ldr	r0, [r7, #8]
 8011c92:	f000 fe69 	bl	8012968 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011c96:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011c98:	e7de      	b.n	8011c58 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011c9a:	f107 0314 	add.w	r3, r7, #20
 8011c9e:	6879      	ldr	r1, [r7, #4]
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 f805 	bl	8011cb0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011ca6:	697b      	ldr	r3, [r7, #20]
    }
 8011ca8:	4618      	mov	r0, r3
 8011caa:	371c      	adds	r7, #28
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd90      	pop	{r4, r7, pc}

08011cb0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	683a      	ldr	r2, [r7, #0]
 8011cbe:	601a      	str	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011cce:	b480      	push	{r7}
 8011cd0:	b083      	sub	sp, #12
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	689b      	ldr	r3, [r3, #8]
      }
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	370c      	adds	r7, #12
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr

08011cfe <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011cfe:	b590      	push	{r4, r7, lr}
 8011d00:	b087      	sub	sp, #28
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	60f8      	str	r0, [r7, #12]
 8011d06:	60b9      	str	r1, [r7, #8]
 8011d08:	607a      	str	r2, [r7, #4]
 8011d0a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d01d      	beq.n	8011d4e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011d12:	68fc      	ldr	r4, [r7, #12]
 8011d14:	68b8      	ldr	r0, [r7, #8]
 8011d16:	f7f2 f869 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	6819      	ldr	r1, [r3, #0]
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	4620      	mov	r0, r4
 8011d26:	f7ef f8d8 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	f083 0301 	eor.w	r3, r3, #1
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d006      	beq.n	8011d44 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	607b      	str	r3, [r7, #4]
 8011d3a:	68b8      	ldr	r0, [r7, #8]
 8011d3c:	f000 fe20 	bl	8012980 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011d40:	60b8      	str	r0, [r7, #8]
 8011d42:	e7e3      	b.n	8011d0c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011d44:	68b8      	ldr	r0, [r7, #8]
 8011d46:	f000 fe27 	bl	8012998 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011d4a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011d4c:	e7de      	b.n	8011d0c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011d4e:	f107 0314 	add.w	r3, r7, #20
 8011d52:	6879      	ldr	r1, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f000 f805 	bl	8011d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8011d5a:	697b      	ldr	r3, [r7, #20]
    }
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	371c      	adds	r7, #28
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd90      	pop	{r4, r7, pc}

08011d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4618      	mov	r0, r3
 8011d78:	370c      	adds	r7, #12
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b084      	sub	sp, #16
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	60f8      	str	r0, [r7, #12]
 8011d8a:	60b9      	str	r1, [r7, #8]
 8011d8c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011d8e:	68b8      	ldr	r0, [r7, #8]
 8011d90:	f7ff f92e 	bl	8010ff0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7fb fc6a 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	2001      	movs	r0, #1
 8011da0:	f7ee fac6 	bl	8000330 <_ZnwjPv>
 8011da4:	bf00      	nop
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fdfb 	bl	80129b0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8011dba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f000 fe03 	bl	80129c8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 8011dc2:	4603      	mov	r3, r0
	}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011dcc:	b590      	push	{r4, r7, lr}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fe02 	bl	80129de <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	4619      	mov	r1, r3
 8011dde:	4620      	mov	r0, r4
 8011de0:	f000 fe08 	bl	80129f4 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011de4:	bf00      	nop
 8011de6:	370c      	adds	r7, #12
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd90      	pop	{r4, r7, pc}

08011dec <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7fb fc3a 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e04:	b5b0      	push	{r4, r5, r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011e12:	79fb      	ldrb	r3, [r7, #7]
 8011e14:	2b03      	cmp	r3, #3
 8011e16:	d016      	beq.n	8011e46 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011e18:	2b03      	cmp	r3, #3
 8011e1a:	dc19      	bgt.n	8011e50 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d002      	beq.n	8011e26 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	d00a      	beq.n	8011e3a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011e24:	e014      	b.n	8011e50 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011e26:	68b8      	ldr	r0, [r7, #8]
 8011e28:	f7ff ffc0 	bl	8011dac <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f7ff ffdc 	bl	8011dec <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8011e34:	4603      	mov	r3, r0
 8011e36:	601c      	str	r4, [r3, #0]
	      break;
 8011e38:	e00a      	b.n	8011e50 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011e3a:	462a      	mov	r2, r5
 8011e3c:	68b9      	ldr	r1, [r7, #8]
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f000 fde8 	bl	8012a14 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011e44:	e004      	b.n	8011e50 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011e46:	4621      	mov	r1, r4
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f000 fdf8 	bl	8012a3e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011e4e:	bf00      	nop
	  return false;
 8011e50:	2300      	movs	r3, #0
	}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3710      	adds	r7, #16
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bdb0      	pop	{r4, r5, r7, pc}

08011e5a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b084      	sub	sp, #16
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	60f8      	str	r0, [r7, #12]
 8011e62:	60b9      	str	r1, [r7, #8]
 8011e64:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011e66:	68b8      	ldr	r0, [r7, #8]
 8011e68:	f7ff f918 	bl	801109c <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f7fb fbfe 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8011e72:	4603      	mov	r3, r0
 8011e74:	4619      	mov	r1, r3
 8011e76:	2001      	movs	r0, #1
 8011e78:	f7ee fa5a 	bl	8000330 <_ZnwjPv>
 8011e7c:	bf00      	nop
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f000 fde2 	bl	8012a56 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8011e92:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f000 fdea 	bl	8012a6e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8011e9a:	4603      	mov	r3, r0
	}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011ea4:	b590      	push	{r4, r7, lr}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fde9 	bl	8012a84 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 fdef 	bl	8012a9a <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011ebc:	bf00      	nop
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd90      	pop	{r4, r7, pc}

08011ec4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7fb fbce 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011edc:	b5b0      	push	{r4, r5, r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011eea:	79fb      	ldrb	r3, [r7, #7]
 8011eec:	2b03      	cmp	r3, #3
 8011eee:	d016      	beq.n	8011f1e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011ef0:	2b03      	cmp	r3, #3
 8011ef2:	dc19      	bgt.n	8011f28 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d002      	beq.n	8011efe <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	d00a      	beq.n	8011f12 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011efc:	e014      	b.n	8011f28 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f7ff ffc0 	bl	8011e84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011f04:	4604      	mov	r4, r0
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7ff ffdc 	bl	8011ec4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	601c      	str	r4, [r3, #0]
	      break;
 8011f10:	e00a      	b.n	8011f28 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011f12:	462a      	mov	r2, r5
 8011f14:	68b9      	ldr	r1, [r7, #8]
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f000 fdcf 	bl	8012aba <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011f1c:	e004      	b.n	8011f28 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011f1e:	4621      	mov	r1, r4
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f000 fddf 	bl	8012ae4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011f26:	bf00      	nop
	  return false;
 8011f28:	2300      	movs	r3, #0
	}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bdb0      	pop	{r4, r5, r7, pc}

08011f32 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011f32:	b590      	push	{r4, r7, lr}
 8011f34:	b087      	sub	sp, #28
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	60f8      	str	r0, [r7, #12]
 8011f3a:	60b9      	str	r1, [r7, #8]
 8011f3c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f000 fddc 	bl	8012afc <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011f44:	4604      	mov	r4, r0
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f000 fde9 	bl	8012b1e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	1ae2      	subs	r2, r4, r3
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	bf34      	ite	cc
 8011f56:	2301      	movcc	r3, #1
 8011f58:	2300      	movcs	r3, #0
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d002      	beq.n	8011f66 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f00e fc19 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f000 fdd9 	bl	8012b1e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f000 fdd5 	bl	8012b1e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f74:	4603      	mov	r3, r0
 8011f76:	613b      	str	r3, [r7, #16]
 8011f78:	f107 0208 	add.w	r2, r7, #8
 8011f7c:	f107 0310 	add.w	r3, r7, #16
 8011f80:	4611      	mov	r1, r2
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f0 fc65 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4423      	add	r3, r4
 8011f8e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011f90:	68f8      	ldr	r0, [r7, #12]
 8011f92:	f000 fdc4 	bl	8012b1e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f96:	4602      	mov	r2, r0
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d306      	bcc.n	8011fac <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f000 fdac 	bl	8012afc <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d904      	bls.n	8011fb6 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f000 fda5 	bl	8012afc <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	e000      	b.n	8011fb8 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011fb6:	697b      	ldr	r3, [r7, #20]
      }
 8011fb8:	4618      	mov	r0, r3
 8011fba:	371c      	adds	r7, #28
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd90      	pop	{r4, r7, pc}

08011fc0 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011fc0:	b590      	push	{r4, r7, lr}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fb fd3c 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	681c      	ldr	r4, [r3, #0]
 8011fd4:	6838      	ldr	r0, [r7, #0]
 8011fd6:	f7fb fd37 	bl	800da48 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	1ae3      	subs	r3, r4, r3
 8011fe0:	109b      	asrs	r3, r3, #2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd90      	pop	{r4, r7, pc}

08011fea <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011fea:	b580      	push	{r7, lr}
 8011fec:	b082      	sub	sp, #8
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
 8011ff2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d006      	beq.n	8012008 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	4618      	mov	r0, r3
 8012000:	f000 fd9d 	bl	8012b3e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 8012004:	4603      	mov	r3, r0
 8012006:	e000      	b.n	801200a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8012008:	2300      	movs	r3, #0
      }
 801200a:	4618      	mov	r0, r3
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012012:	b590      	push	{r4, r7, lr}
 8012014:	b087      	sub	sp, #28
 8012016:	af02      	add	r7, sp, #8
 8012018:	60f8      	str	r0, [r7, #12]
 801201a:	60b9      	str	r1, [r7, #8]
 801201c:	607a      	str	r2, [r7, #4]
 801201e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012020:	f88d 4000 	strb.w	r4, [sp]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	68b9      	ldr	r1, [r7, #8]
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f000 fda7 	bl	8012b7e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012030:	4603      	mov	r3, r0
      }
 8012032:	4618      	mov	r0, r3
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	bd90      	pop	{r4, r7, pc}

0801203a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
 8012042:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	425b      	negs	r3, r3
 801204e:	4413      	add	r3, r2
 8012050:	60fb      	str	r3, [r7, #12]
 8012052:	f107 020c 	add.w	r2, r7, #12
 8012056:	f107 0308 	add.w	r3, r7, #8
 801205a:	4611      	mov	r1, r2
 801205c:	4618      	mov	r0, r3
 801205e:	f7fe fb23 	bl	80106a8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr

08012082 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8012082:	b480      	push	{r7}
 8012084:	b083      	sub	sp, #12
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	370c      	adds	r7, #12
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4618      	mov	r0, r3
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80120ae:	b590      	push	{r4, r7, lr}
 80120b0:	b087      	sub	sp, #28
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	60b9      	str	r1, [r7, #8]
 80120b8:	607a      	str	r2, [r7, #4]
 80120ba:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d01b      	beq.n	80120fa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80120c2:	68fc      	ldr	r4, [r7, #12]
 80120c4:	68b8      	ldr	r0, [r7, #8]
 80120c6:	f7f9 fa50 	bl	800b56a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80120ca:	4603      	mov	r3, r0
 80120cc:	683a      	ldr	r2, [r7, #0]
 80120ce:	4619      	mov	r1, r3
 80120d0:	4620      	mov	r0, r4
 80120d2:	f7f8 fff9 	bl	800b0c8 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80120d6:	4603      	mov	r3, r0
 80120d8:	f083 0301 	eor.w	r3, r3, #1
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d006      	beq.n	80120f0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	607b      	str	r3, [r7, #4]
 80120e6:	68b8      	ldr	r0, [r7, #8]
 80120e8:	f7f9 fb2c 	bl	800b744 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80120ec:	60b8      	str	r0, [r7, #8]
 80120ee:	e7e5      	b.n	80120bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80120f0:	68b8      	ldr	r0, [r7, #8]
 80120f2:	f7f9 fb1b 	bl	800b72c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80120f6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80120f8:	e7e0      	b.n	80120bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 80120fa:	f107 0314 	add.w	r3, r7, #20
 80120fe:	6879      	ldr	r1, [r7, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	f7f9 fa56 	bl	800b5b2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8012106:	697b      	ldr	r3, [r7, #20]
    }
 8012108:	4618      	mov	r0, r3
 801210a:	371c      	adds	r7, #28
 801210c:	46bd      	mov	sp, r7
 801210e:	bd90      	pop	{r4, r7, pc}

08012110 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8012110:	b590      	push	{r4, r7, lr}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801211a:	687c      	ldr	r4, [r7, #4]
 801211c:	6838      	ldr	r0, [r7, #0]
 801211e:	f7ff f969 	bl	80113f4 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012122:	4603      	mov	r3, r0
 8012124:	4619      	mov	r1, r3
 8012126:	4620      	mov	r0, r4
 8012128:	f000 fd3b 	bl	8012ba2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	bd90      	pop	{r4, r7, pc}

08012136 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af02      	add	r7, sp, #8
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	4619      	mov	r1, r3
 801214a:	2018      	movs	r0, #24
 801214c:	f7ee f8f0 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7f9 fcfd 	bl	800bb50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8012156:	4604      	mov	r4, r0
 8012158:	68b8      	ldr	r0, [r7, #8]
 801215a:	f7f9 f8d5 	bl	800b308 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801215e:	4605      	mov	r5, r0
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ef f880 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012166:	4606      	mov	r6, r0
 8012168:	6838      	ldr	r0, [r7, #0]
 801216a:	f7ff f961 	bl	8011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801216e:	4680      	mov	r8, r0
 8012170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012172:	f7ef f88e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012176:	4603      	mov	r3, r0
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	4643      	mov	r3, r8
 801217c:	4632      	mov	r2, r6
 801217e:	4629      	mov	r1, r5
 8012180:	4620      	mov	r0, r4
 8012182:	f000 fd58 	bl	8012c36 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8012186:	bf00      	nop
 8012188:	3710      	adds	r7, #16
 801218a:	46bd      	mov	sp, r7
 801218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012190 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d00a      	beq.n	80121b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 fd72 	bl	8012c8c <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 80121a8:	4603      	mov	r3, r0
 80121aa:	4618      	mov	r0, r3
 80121ac:	f000 fd79 	bl	8012ca2 <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	3304      	adds	r3, #4
 80121b4:	607b      	str	r3, [r7, #4]
 80121b6:	e7f0      	b.n	801219a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
 80121ca:	bf00      	nop
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80121d6:	b590      	push	{r4, r7, lr}
 80121d8:	b087      	sub	sp, #28
 80121da:	af00      	add	r7, sp, #0
 80121dc:	60f8      	str	r0, [r7, #12]
 80121de:	60b9      	str	r1, [r7, #8]
 80121e0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f000 fd68 	bl	8012cb8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 80121e8:	4604      	mov	r4, r0
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f000 fd75 	bl	8012cda <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 80121f0:	4603      	mov	r3, r0
 80121f2:	1ae2      	subs	r2, r4, r3
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	bf34      	ite	cc
 80121fa:	2301      	movcc	r3, #1
 80121fc:	2300      	movcs	r3, #0
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f00e fac7 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f000 fd65 	bl	8012cda <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012210:	4604      	mov	r4, r0
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 fd61 	bl	8012cda <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012218:	4603      	mov	r3, r0
 801221a:	613b      	str	r3, [r7, #16]
 801221c:	f107 0208 	add.w	r2, r7, #8
 8012220:	f107 0310 	add.w	r3, r7, #16
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f7f0 fb13 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801222c:	4603      	mov	r3, r0
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4423      	add	r3, r4
 8012232:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f000 fd50 	bl	8012cda <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801223a:	4602      	mov	r2, r0
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	4293      	cmp	r3, r2
 8012240:	d306      	bcc.n	8012250 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f000 fd38 	bl	8012cb8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012248:	4602      	mov	r2, r0
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	4293      	cmp	r3, r2
 801224e:	d904      	bls.n	801225a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f000 fd31 	bl	8012cb8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012256:	4603      	mov	r3, r0
 8012258:	e000      	b.n	801225c <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 801225a:	697b      	ldr	r3, [r7, #20]
      }
 801225c:	4618      	mov	r0, r3
 801225e:	371c      	adds	r7, #28
 8012260:	46bd      	mov	sp, r7
 8012262:	bd90      	pop	{r4, r7, pc}

08012264 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012264:	b590      	push	{r4, r7, lr}
 8012266:	b083      	sub	sp, #12
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7fb ff68 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8012274:	4603      	mov	r3, r0
 8012276:	681c      	ldr	r4, [r3, #0]
 8012278:	6838      	ldr	r0, [r7, #0]
 801227a:	f7fb ff63 	bl	800e144 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 801227e:	4603      	mov	r3, r0
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	1ae3      	subs	r3, r4, r3
 8012284:	109b      	asrs	r3, r3, #2
 8012286:	4618      	mov	r0, r3
 8012288:	370c      	adds	r7, #12
 801228a:	46bd      	mov	sp, r7
 801228c:	bd90      	pop	{r4, r7, pc}

0801228e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801228e:	b580      	push	{r7, lr}
 8012290:	b082      	sub	sp, #8
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
 8012296:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d006      	beq.n	80122ac <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6839      	ldr	r1, [r7, #0]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f000 fd29 	bl	8012cfa <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 80122a8:	4603      	mov	r3, r0
 80122aa:	e000      	b.n	80122ae <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 80122ac:	2300      	movs	r3, #0
      }
 80122ae:	4618      	mov	r0, r3
 80122b0:	3708      	adds	r7, #8
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}

080122b6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80122b6:	b590      	push	{r4, r7, lr}
 80122b8:	b087      	sub	sp, #28
 80122ba:	af02      	add	r7, sp, #8
 80122bc:	60f8      	str	r0, [r7, #12]
 80122be:	60b9      	str	r1, [r7, #8]
 80122c0:	607a      	str	r2, [r7, #4]
 80122c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80122c4:	f88d 4000 	strb.w	r4, [sp]
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	68b9      	ldr	r1, [r7, #8]
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f000 fd33 	bl	8012d3a <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80122d4:	4603      	mov	r3, r0
      }
 80122d6:	4618      	mov	r0, r3
 80122d8:	3714      	adds	r7, #20
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd90      	pop	{r4, r7, pc}

080122de <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80122de:	b580      	push	{r7, lr}
 80122e0:	b084      	sub	sp, #16
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	425b      	negs	r3, r3
 80122f2:	4413      	add	r3, r2
 80122f4:	60fb      	str	r3, [r7, #12]
 80122f6:	f107 020c 	add.w	r2, r7, #12
 80122fa:	f107 0308 	add.w	r3, r7, #8
 80122fe:	4611      	mov	r1, r2
 8012300:	4618      	mov	r0, r3
 8012302:	f7fe fc40 	bl	8010b86 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4618      	mov	r0, r3
 801231c:	f000 fd45 	bl	8012daa <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8012320:	4603      	mov	r3, r0
 8012322:	4618      	mov	r0, r3
 8012324:	f000 fd27 	bl	8012d76 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8012328:	4603      	mov	r3, r0
 801232a:	4618      	mov	r0, r3
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012332:	b580      	push	{r7, lr}
 8012334:	b084      	sub	sp, #16
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012344:	f7ed ffec 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d006      	beq.n	801235c <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	4618      	mov	r0, r3
 8012354:	f00e f956 	bl	8020604 <_Znwj>
 8012358:	4603      	mov	r3, r0
 801235a:	e006      	b.n	801236a <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801235c:	2200      	movs	r2, #0
 801235e:	68b9      	ldr	r1, [r7, #8]
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f001 f8b6 	bl	80134d2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 8012366:	4603      	mov	r3, r0
 8012368:	bf00      	nop
      { return __a.allocate(__n); }
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012372:	b580      	push	{r7, lr}
 8012374:	b084      	sub	sp, #16
 8012376:	af00      	add	r7, sp, #0
 8012378:	60f8      	str	r0, [r7, #12]
 801237a:	60b9      	str	r1, [r7, #8]
 801237c:	607a      	str	r2, [r7, #4]
 801237e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	68b9      	ldr	r1, [r7, #8]
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f000 fd1a 	bl	8012dc0 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 801238c:	4603      	mov	r3, r0
      }
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 8012396:	b480      	push	{r7}
 8012398:	b083      	sub	sp, #12
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
    }
 801239e:	bf00      	nop
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>:
      _M_access() const
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b082      	sub	sp, #8
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7fb f966 	bl	800d684 <_ZNKSt9_Any_data9_M_accessEv>
 80123b8:	4603      	mov	r3, r0
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80123c2:	b480      	push	{r7}
 80123c4:	b083      	sub	sp, #12
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	370c      	adds	r7, #12
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr

080123d8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	370c      	adds	r7, #12
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr

080123ee <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b082      	sub	sp, #8
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	7138      	strb	r0, [r7, #4]
 80123f6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80123f8:	6838      	ldr	r0, [r7, #0]
 80123fa:	f7ff ffed 	bl	80123d8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 80123fe:	4603      	mov	r3, r0
 8012400:	4618      	mov	r0, r3
 8012402:	f7fb fe31 	bl	800e068 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>
 8012406:	bf00      	nop
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 801240e:	b590      	push	{r4, r7, lr}
 8012410:	b085      	sub	sp, #20
 8012412:	af00      	add	r7, sp, #0
 8012414:	60f8      	str	r0, [r7, #12]
 8012416:	60b9      	str	r1, [r7, #8]
 8012418:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 801241a:	68b8      	ldr	r0, [r7, #8]
 801241c:	f7ff ffc5 	bl	80123aa <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8012420:	4604      	mov	r4, r0
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f7fb f923 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8012428:	4603      	mov	r3, r0
 801242a:	4619      	mov	r1, r3
 801242c:	2004      	movs	r0, #4
 801242e:	f7ed ff7f 	bl	8000330 <_ZnwjPv>
 8012432:	4602      	mov	r2, r0
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	6013      	str	r3, [r2, #0]
	}
 8012438:	bf00      	nop
 801243a:	3714      	adds	r7, #20
 801243c:	46bd      	mov	sp, r7
 801243e:	bd90      	pop	{r4, r7, pc}

08012440 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fcd5 	bl	8012dfa <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
	}
 8012450:	bf00      	nop
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801246e:	b580      	push	{r7, lr}
 8012470:	b088      	sub	sp, #32
 8012472:	af00      	add	r7, sp, #0
 8012474:	60f8      	str	r0, [r7, #12]
 8012476:	60b9      	str	r1, [r7, #8]
 8012478:	607a      	str	r2, [r7, #4]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	61fb      	str	r3, [r7, #28]
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	61bb      	str	r3, [r7, #24]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012486:	f7ed ff4b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d003      	beq.n	8012498 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 8012490:	69b8      	ldr	r0, [r7, #24]
 8012492:	f00e f8b3 	bl	80205fc <_ZdlPv>
	    return;
 8012496:	e005      	b.n	80124a4 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012498:	697a      	ldr	r2, [r7, #20]
 801249a:	69b9      	ldr	r1, [r7, #24]
 801249c:	69f8      	ldr	r0, [r7, #28]
 801249e:	f001 f860 	bl	8013562 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80124a2:	bf00      	nop
 80124a4:	bf00      	nop
 80124a6:	3720      	adds	r7, #32
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80124b6:	f7ed ff33 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d004      	beq.n	80124ca <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80124c0:	6839      	ldr	r1, [r7, #0]
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 fca5 	bl	8012e12 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 80124c8:	e003      	b.n	80124d2 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 fcb8 	bl	8012e42 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4618      	mov	r0, r3
 80124e4:	370c      	adds	r7, #12
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 80124ee:	b5b0      	push	{r4, r5, r7, lr}
 80124f0:	b082      	sub	sp, #8
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	685a      	ldr	r2, [r3, #4]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	429a      	cmp	r2, r3
 8012502:	d011      	beq.n	8012528 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012504:	687c      	ldr	r4, [r7, #4]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	685d      	ldr	r5, [r3, #4]
 801250a:	6838      	ldr	r0, [r7, #0]
 801250c:	f000 fca4 	bl	8012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012510:	4603      	mov	r3, r0
 8012512:	461a      	mov	r2, r3
 8012514:	4629      	mov	r1, r5
 8012516:	4620      	mov	r0, r4
 8012518:	f000 fcbe 	bl	8012e98 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	1d1a      	adds	r2, r3, #4
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	605a      	str	r2, [r3, #4]
 8012526:	e00c      	b.n	8012542 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7f2 fdf2 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 801252e:	4604      	mov	r4, r0
 8012530:	6838      	ldr	r0, [r7, #0]
 8012532:	f000 fc91 	bl	8012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012536:	4603      	mov	r3, r0
 8012538:	461a      	mov	r2, r3
 801253a:	4621      	mov	r1, r4
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 fcbd 	bl	8012ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 fd36 	bl	8012fb4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 8012548:	4603      	mov	r3, r0
      }
 801254a:	4618      	mov	r0, r3
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bdb0      	pop	{r4, r5, r7, pc}

08012552 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8012552:	b590      	push	{r4, r7, lr}
 8012554:	b083      	sub	sp, #12
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f7f9 ff73 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8012562:	4604      	mov	r4, r0
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 fd40 	bl	8012fea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801256a:	4602      	mov	r2, r0
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	4621      	mov	r1, r4
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fd46 	bl	8013002 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8012576:	4603      	mov	r3, r0
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	bd90      	pop	{r4, r7, pc}

08012580 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8012588:	bf00      	nop
 801258a:	4618      	mov	r0, r3
 801258c:	370c      	adds	r7, #12
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr

08012596 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f000 fd5d 	bl	8013064 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	370c      	adds	r7, #12
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80125ca:	b5b0      	push	{r4, r5, r7, lr}
 80125cc:	b088      	sub	sp, #32
 80125ce:	af02      	add	r7, sp, #8
 80125d0:	60f8      	str	r0, [r7, #12]
 80125d2:	60b9      	str	r1, [r7, #8]
 80125d4:	607a      	str	r2, [r7, #4]
 80125d6:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f000 fd52 	bl	8013082 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 80125de:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80125e0:	68b8      	ldr	r0, [r7, #8]
 80125e2:	f7ee fe40 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80125e6:	4604      	mov	r4, r0
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff ffe3 	bl	80125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80125ee:	4605      	mov	r5, r0
 80125f0:	6838      	ldr	r0, [r7, #0]
 80125f2:	f7ee fe4e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80125f6:	4603      	mov	r3, r0
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	462b      	mov	r3, r5
 80125fc:	4622      	mov	r2, r4
 80125fe:	6979      	ldr	r1, [r7, #20]
 8012600:	68f8      	ldr	r0, [r7, #12]
 8012602:	f000 fd4f 	bl	80130a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8012606:	697b      	ldr	r3, [r7, #20]
	}
 8012608:	4618      	mov	r0, r3
 801260a:	3718      	adds	r7, #24
 801260c:	46bd      	mov	sp, r7
 801260e:	bdb0      	pop	{r4, r5, r7, pc}

08012610 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b08d      	sub	sp, #52	; 0x34
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
 801261c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801261e:	1d3b      	adds	r3, r7, #4
 8012620:	4618      	mov	r0, r3
 8012622:	f000 fd6c 	bl	80130fe <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 8012626:	4603      	mov	r3, r0
 8012628:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801262a:	69bc      	ldr	r4, [r7, #24]
 801262c:	68b8      	ldr	r0, [r7, #8]
 801262e:	f000 fcdc 	bl	8012fea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012632:	4603      	mov	r3, r0
 8012634:	429c      	cmp	r4, r3
 8012636:	bf0c      	ite	eq
 8012638:	2301      	moveq	r3, #1
 801263a:	2300      	movne	r3, #0
 801263c:	b2db      	uxtb	r3, r3
 801263e:	2b00      	cmp	r3, #0
 8012640:	d030      	beq.n	80126a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8012642:	68b8      	ldr	r0, [r7, #8]
 8012644:	f000 fd6c 	bl	8013120 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8012648:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801264a:	2b00      	cmp	r3, #0
 801264c:	d013      	beq.n	8012676 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801264e:	68bc      	ldr	r4, [r7, #8]
 8012650:	68b8      	ldr	r0, [r7, #8]
 8012652:	f000 fd71 	bl	8013138 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012656:	4603      	mov	r3, r0
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4618      	mov	r0, r3
 801265c:	f000 fd78 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012660:	4603      	mov	r3, r0
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	4619      	mov	r1, r3
 8012666:	4620      	mov	r0, r4
 8012668:	f7ff fa1f 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d001      	beq.n	8012676 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012672:	2301      	movs	r3, #1
 8012674:	e000      	b.n	8012678 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8012676:	2300      	movs	r3, #0
	  if (size() > 0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00c      	beq.n	8012696 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801267c:	2300      	movs	r3, #0
 801267e:	61fb      	str	r3, [r7, #28]
 8012680:	68b8      	ldr	r0, [r7, #8]
 8012682:	f000 fd59 	bl	8013138 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012686:	4602      	mov	r2, r0
 8012688:	f107 031c 	add.w	r3, r7, #28
 801268c:	4619      	mov	r1, r3
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ef fc0a 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012694:	e0db      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	683a      	ldr	r2, [r7, #0]
 801269a:	68b9      	ldr	r1, [r7, #8]
 801269c:	4618      	mov	r0, r3
 801269e:	f000 fd63 	bl	8013168 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80126a2:	e0d4      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80126a4:	68bc      	ldr	r4, [r7, #8]
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 fd51 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80126ae:	4603      	mov	r3, r0
 80126b0:	461a      	mov	r2, r3
 80126b2:	6839      	ldr	r1, [r7, #0]
 80126b4:	4620      	mov	r0, r4
 80126b6:	f7ff f9f8 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d057      	beq.n	8012770 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80126c4:	69bc      	ldr	r4, [r7, #24]
 80126c6:	68b8      	ldr	r0, [r7, #8]
 80126c8:	f000 fdd3 	bl	8013272 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126cc:	4603      	mov	r3, r0
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	429c      	cmp	r4, r3
 80126d2:	bf0c      	ite	eq
 80126d4:	2301      	moveq	r3, #1
 80126d6:	2300      	movne	r3, #0
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00d      	beq.n	80126fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80126de:	68b8      	ldr	r0, [r7, #8]
 80126e0:	f000 fdc7 	bl	8013272 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126e4:	4604      	mov	r4, r0
 80126e6:	68b8      	ldr	r0, [r7, #8]
 80126e8:	f000 fdc3 	bl	8013272 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126ec:	4603      	mov	r3, r0
 80126ee:	461a      	mov	r2, r3
 80126f0:	4621      	mov	r1, r4
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f7ef fc84 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80126f8:	e0a9      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80126fa:	68bc      	ldr	r4, [r7, #8]
 80126fc:	f107 0314 	add.w	r3, r7, #20
 8012700:	4618      	mov	r0, r3
 8012702:	f000 fdc2 	bl	801328a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 8012706:	4603      	mov	r3, r0
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4618      	mov	r0, r3
 801270c:	f000 fd20 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012710:	4603      	mov	r3, r0
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	4619      	mov	r1, r3
 8012716:	4620      	mov	r0, r4
 8012718:	f7ff f9c7 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d01f      	beq.n	8012762 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	4618      	mov	r0, r3
 8012726:	f7f9 fea6 	bl	800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	bf0c      	ite	eq
 8012730:	2301      	moveq	r3, #1
 8012732:	2300      	movne	r3, #0
 8012734:	b2db      	uxtb	r3, r3
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00a      	beq.n	8012750 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801273a:	2300      	movs	r3, #0
 801273c:	623b      	str	r3, [r7, #32]
 801273e:	f107 0214 	add.w	r2, r7, #20
 8012742:	f107 0320 	add.w	r3, r7, #32
 8012746:	4619      	mov	r1, r3
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ef fbad 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801274e:	e07e      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8012750:	f107 0218 	add.w	r2, r7, #24
 8012754:	f107 0318 	add.w	r3, r7, #24
 8012758:	4619      	mov	r1, r3
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7ef fc50 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012760:	e075      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	683a      	ldr	r2, [r7, #0]
 8012766:	68b9      	ldr	r1, [r7, #8]
 8012768:	4618      	mov	r0, r3
 801276a:	f000 fcfd 	bl	8013168 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 801276e:	e06e      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8012770:	68bc      	ldr	r4, [r7, #8]
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	4618      	mov	r0, r3
 8012776:	f000 fceb 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801277a:	4603      	mov	r3, r0
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	4619      	mov	r1, r3
 8012780:	4620      	mov	r0, r4
 8012782:	f7ff f992 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d056      	beq.n	801283a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8012790:	69bc      	ldr	r4, [r7, #24]
 8012792:	68b8      	ldr	r0, [r7, #8]
 8012794:	f000 fcd0 	bl	8013138 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012798:	4603      	mov	r3, r0
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	429c      	cmp	r4, r3
 801279e:	bf0c      	ite	eq
 80127a0:	2301      	moveq	r3, #1
 80127a2:	2300      	movne	r3, #0
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00c      	beq.n	80127c4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80127aa:	2300      	movs	r3, #0
 80127ac:	627b      	str	r3, [r7, #36]	; 0x24
 80127ae:	68b8      	ldr	r0, [r7, #8]
 80127b0:	f000 fcc2 	bl	8013138 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80127b4:	4602      	mov	r2, r0
 80127b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127ba:	4619      	mov	r1, r3
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f7ef fb73 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80127c2:	e044      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80127c4:	68bc      	ldr	r4, [r7, #8]
 80127c6:	f107 0310 	add.w	r3, r7, #16
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7f2 fce0 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 80127d0:	4603      	mov	r3, r0
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f000 fcbb 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127da:	4603      	mov	r3, r0
 80127dc:	461a      	mov	r2, r3
 80127de:	6839      	ldr	r1, [r7, #0]
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7ff f962 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d01f      	beq.n	801282c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80127ec:	69bb      	ldr	r3, [r7, #24]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7f9 fe41 	bl	800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	bf0c      	ite	eq
 80127fa:	2301      	moveq	r3, #1
 80127fc:	2300      	movne	r3, #0
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00a      	beq.n	801281a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8012804:	2300      	movs	r3, #0
 8012806:	62bb      	str	r3, [r7, #40]	; 0x28
 8012808:	f107 0218 	add.w	r2, r7, #24
 801280c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012810:	4619      	mov	r1, r3
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f7ef fb48 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012818:	e019      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801281a:	f107 0210 	add.w	r2, r7, #16
 801281e:	f107 0310 	add.w	r3, r7, #16
 8012822:	4619      	mov	r1, r3
 8012824:	68f8      	ldr	r0, [r7, #12]
 8012826:	f7ef fbeb 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801282a:	e010      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	683a      	ldr	r2, [r7, #0]
 8012830:	68b9      	ldr	r1, [r7, #8]
 8012832:	4618      	mov	r0, r3
 8012834:	f000 fc98 	bl	8013168 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012838:	e009      	b.n	801284e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801283a:	2300      	movs	r3, #0
 801283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801283e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012842:	f107 0318 	add.w	r3, r7, #24
 8012846:	4619      	mov	r1, r3
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f7ef fc14 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	3734      	adds	r7, #52	; 0x34
 8012852:	46bd      	mov	sp, r7
 8012854:	bd90      	pop	{r4, r7, pc}

08012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8012856:	b580      	push	{r7, lr}
 8012858:	b084      	sub	sp, #16
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 fd24 	bl	80132ac <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8012864:	4602      	mov	r2, r0
 8012866:	f107 030c 	add.w	r3, r7, #12
 801286a:	4611      	mov	r1, r2
 801286c:	4618      	mov	r0, r3
 801286e:	f000 fd2b 	bl	80132c8 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 8012872:	4603      	mov	r3, r0
      }
 8012874:	4618      	mov	r0, r3
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801287c:	b5b0      	push	{r4, r5, r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	607a      	str	r2, [r7, #4]
 8012888:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d117      	bne.n	80128c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 fbaa 	bl	8012fea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012896:	4602      	mov	r2, r0
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4293      	cmp	r3, r2
 801289c:	d010      	beq.n	80128c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801289e:	68fc      	ldr	r4, [r7, #12]
 80128a0:	6838      	ldr	r0, [r7, #0]
 80128a2:	f7ff ffd8 	bl	8012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80128a6:	4605      	mov	r5, r0
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 fc51 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80128ae:	4603      	mov	r3, r0
 80128b0:	461a      	mov	r2, r3
 80128b2:	4629      	mov	r1, r5
 80128b4:	4620      	mov	r0, r4
 80128b6:	f7ff f8f8 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d001      	beq.n	80128c4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80128c0:	2301      	movs	r3, #1
 80128c2:	e000      	b.n	80128c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 80128c4:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80128c6:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80128cc:	7df8      	ldrb	r0, [r7, #23]
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	6839      	ldr	r1, [r7, #0]
 80128d2:	f00d ff03 	bl	80206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	695b      	ldr	r3, [r3, #20]
 80128da:	1c5a      	adds	r2, r3, #1
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80128e0:	f107 0310 	add.w	r3, r7, #16
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f2 ff5d 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 80128ec:	693b      	ldr	r3, [r7, #16]
    }
 80128ee:	4618      	mov	r0, r3
 80128f0:	3718      	adds	r7, #24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080128f8 <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff f87d 	bl	8011a04 <_ZN5FieldIJEEC1Ev>
 801290a:	4a05      	ldr	r2, [pc, #20]	; (8012920 <_ZN5FieldIJtEEC1EPt+0x28>)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	683a      	ldr	r2, [r7, #0]
 8012914:	605a      	str	r2, [r3, #4]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	08020d78 	.word	0x08020d78

08012924 <_ZN5FieldIJmEEC1EPm>:
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4618      	mov	r0, r3
 8012932:	f7ff f867 	bl	8011a04 <_ZN5FieldIJEEC1Ev>
 8012936:	4a05      	ldr	r2, [pc, #20]	; (801294c <_ZN5FieldIJmEEC1EPm+0x28>)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	601a      	str	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	605a      	str	r2, [r3, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4618      	mov	r0, r3
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	08020d64 	.word	0x08020d64

08012950 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	689b      	ldr	r3, [r3, #8]
 801295c:	4618      	mov	r0, r3
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	4618      	mov	r0, r3
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	4618      	mov	r0, r3
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	68db      	ldr	r3, [r3, #12]
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f7fa fe63 	bl	800d684 <_ZNKSt9_Any_data9_M_accessEv>
 80129be:	4603      	mov	r3, r0
 80129c0:	4618      	mov	r0, r3
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	4618      	mov	r0, r3
 80129d4:	370c      	adds	r7, #12
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr

080129de <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129de:	b480      	push	{r7}
 80129e0:	b083      	sub	sp, #12
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4618      	mov	r0, r3
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	7138      	strb	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80129fe:	6838      	ldr	r0, [r7, #0]
 8012a00:	f7ff ffed 	bl	80129de <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012a04:	4603      	mov	r3, r0
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fb fe44 	bl	800e694 <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012a20:	68b8      	ldr	r0, [r7, #8]
 8012a22:	f7ff ffc5 	bl	80129b0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f7fa fe21 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	4619      	mov	r1, r3
 8012a30:	2001      	movs	r0, #1
 8012a32:	f7ed fc7d 	bl	8000330 <_ZnwjPv>
	}
 8012a36:	bf00      	nop
 8012a38:	3710      	adds	r7, #16
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b082      	sub	sp, #8
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fc49 	bl	80132e0 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 8012a4e:	bf00      	nop
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b082      	sub	sp, #8
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f7fa fe10 	bl	800d684 <_ZNKSt9_Any_data9_M_accessEv>
 8012a64:	4603      	mov	r3, r0
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}

08012a6e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012a6e:	b480      	push	{r7}
 8012a70:	b083      	sub	sp, #12
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012a9a:	b580      	push	{r7, lr}
 8012a9c:	b082      	sub	sp, #8
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	7138      	strb	r0, [r7, #4]
 8012aa2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012aa4:	6838      	ldr	r0, [r7, #0]
 8012aa6:	f7ff ffed 	bl	8012a84 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fb fdfb 	bl	800e6a8 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 8012ab2:	bf00      	nop
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b084      	sub	sp, #16
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	60f8      	str	r0, [r7, #12]
 8012ac2:	60b9      	str	r1, [r7, #8]
 8012ac4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012ac6:	68b8      	ldr	r0, [r7, #8]
 8012ac8:	f7ff ffc5 	bl	8012a56 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8012acc:	68f8      	ldr	r0, [r7, #12]
 8012ace:	f7fa fdce 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	f7ed fc2a 	bl	8000330 <_ZnwjPv>
	}
 8012adc:	bf00      	nop
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 fc02 	bl	80132f8 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8012af4:	bf00      	nop
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f000 fc28 	bl	801335c <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f000 fc0a 	bl	8013328 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012b14:	4603      	mov	r3, r0
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012b1e:	b480      	push	{r7}
 8012b20:	b083      	sub	sp, #12
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	685a      	ldr	r2, [r3, #4]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	109b      	asrs	r3, r3, #2
 8012b32:	4618      	mov	r0, r3
 8012b34:	370c      	adds	r7, #12
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b084      	sub	sp, #16
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
 8012b46:	6039      	str	r1, [r7, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	60fb      	str	r3, [r7, #12]
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012b50:	f7ed fbe6 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f00d fd50 	bl	8020604 <_Znwj>
 8012b64:	4603      	mov	r3, r0
 8012b66:	e006      	b.n	8012b76 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012b68:	2200      	movs	r2, #0
 8012b6a:	68b9      	ldr	r1, [r7, #8]
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f000 fe58 	bl	8013822 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012b72:	4603      	mov	r3, r0
 8012b74:	bf00      	nop
      { return __a.allocate(__n); }
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b084      	sub	sp, #16
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	607a      	str	r2, [r7, #4]
 8012b8a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	68b9      	ldr	r1, [r7, #8]
 8012b92:	68f8      	ldr	r0, [r7, #12]
 8012b94:	f000 fbed 	bl	8013372 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012b98:	4603      	mov	r3, r0
      }
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}

08012ba2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012ba2:	b580      	push	{r7, lr}
 8012ba4:	b082      	sub	sp, #8
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
 8012baa:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012bac:	6838      	ldr	r0, [r7, #0]
 8012bae:	f7fe fc21 	bl	80113f4 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	601a      	str	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b082      	sub	sp, #8
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
 8012bca:	6039      	str	r1, [r7, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	683a      	ldr	r2, [r7, #0]
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fbea 	bl	80133ac <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3708      	adds	r7, #8
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012be2:	b5b0      	push	{r4, r5, r7, lr}
 8012be4:	b088      	sub	sp, #32
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	60f8      	str	r0, [r7, #12]
 8012bea:	60b9      	str	r1, [r7, #8]
 8012bec:	607a      	str	r2, [r7, #4]
 8012bee:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012bf0:	68b8      	ldr	r0, [r7, #8]
 8012bf2:	f7ee fb38 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7fe fc1a 	bl	8011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	f107 0318 	add.w	r3, r7, #24
 8012c02:	4611      	mov	r1, r2
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7ff ffdc 	bl	8012bc2 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 8012c0a:	f107 0418 	add.w	r4, r7, #24
 8012c0e:	6838      	ldr	r0, [r7, #0]
 8012c10:	f7ee fb3f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	4619      	mov	r1, r3
 8012c18:	2008      	movs	r0, #8
 8012c1a:	f7ed fb89 	bl	8000330 <_ZnwjPv>
 8012c1e:	4605      	mov	r5, r0
 8012c20:	7f3b      	ldrb	r3, [r7, #28]
 8012c22:	4622      	mov	r2, r4
 8012c24:	7d39      	ldrb	r1, [r7, #20]
 8012c26:	4628      	mov	r0, r5
 8012c28:	f000 fbf1 	bl	801340e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8012c2c:	462b      	mov	r3, r5
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3720      	adds	r7, #32
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bdb0      	pop	{r4, r5, r7, pc}

08012c36 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012c36:	b5b0      	push	{r4, r5, r7, lr}
 8012c38:	b084      	sub	sp, #16
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
 8012c42:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ee fb0e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	6838      	ldr	r0, [r7, #0]
 8012c4e:	f7fe fbef 	bl	8011430 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012c52:	4605      	mov	r5, r0
 8012c54:	6a38      	ldr	r0, [r7, #32]
 8012c56:	f7ee fb1c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	462a      	mov	r2, r5
 8012c5e:	4621      	mov	r1, r4
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	f7ff ffbe 	bl	8012be2 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8012c66:	bf00      	nop
 8012c68:	3710      	adds	r7, #16
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bdb0      	pop	{r4, r5, r7, pc}

08012c6e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b084      	sub	sp, #16
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	60f8      	str	r0, [r7, #12]
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4619      	mov	r1, r3
 8012c80:	68b8      	ldr	r0, [r7, #8]
 8012c82:	f00d fcbd 	bl	8020600 <_ZdlPvj>
      }
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4618      	mov	r0, r3
 8012c98:	370c      	adds	r7, #12
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr

08012ca2 <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b082      	sub	sp, #8
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7ff fb73 	bl	8012396 <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8012cb0:	bf00      	nop
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f000 fbdd 	bl	8013482 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f000 fbbf 	bl	801344e <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3708      	adds	r7, #8
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}

08012cda <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012cda:	b480      	push	{r7}
 8012cdc:	b083      	sub	sp, #12
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685a      	ldr	r2, [r3, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	109b      	asrs	r3, r3, #2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	60fb      	str	r3, [r7, #12]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012d0c:	f7ed fb08 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d006      	beq.n	8012d24 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f00d fc72 	bl	8020604 <_Znwj>
 8012d20:	4603      	mov	r3, r0
 8012d22:	e006      	b.n	8012d32 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012d24:	2200      	movs	r2, #0
 8012d26:	68b9      	ldr	r1, [r7, #8]
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f000 fde7 	bl	80138fc <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	bf00      	nop
      { return __a.allocate(__n); }
 8012d32:	4618      	mov	r0, r3
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b084      	sub	sp, #16
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	60f8      	str	r0, [r7, #12]
 8012d42:	60b9      	str	r1, [r7, #8]
 8012d44:	607a      	str	r2, [r7, #4]
 8012d46:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f000 fba2 	bl	8013498 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012d54:	4603      	mov	r3, r0
      }
 8012d56:	4618      	mov	r0, r3
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012d5e:	b480      	push	{r7}
 8012d60:	b083      	sub	sp, #12
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012d66:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	370c      	adds	r7, #12
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d74:	4770      	bx	lr

08012d76 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012d76:	b580      	push	{r7, lr}
 8012d78:	b084      	sub	sp, #16
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012d7e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012d82:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff ffea 	bl	8012d5e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012d8e:	f107 0208 	add.w	r2, r7, #8
 8012d92:	f107 030c 	add.w	r3, r7, #12
 8012d96:	4611      	mov	r1, r2
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7f0 f824 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	681b      	ldr	r3, [r3, #0]
      }
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}

08012daa <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012daa:	b480      	push	{r7}
 8012dac:	b083      	sub	sp, #12
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012dc0:	b5b0      	push	{r4, r5, r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f000 fb9e 	bl	8013510 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	68b8      	ldr	r0, [r7, #8]
 8012dd8:	f000 fb9a 	bl	8013510 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012ddc:	4605      	mov	r5, r0
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 fb96 	bl	8013510 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012de4:	4602      	mov	r2, r0
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	4629      	mov	r1, r5
 8012dea:	4620      	mov	r0, r4
 8012dec:	f000 fb9b 	bl	8013526 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012df0:	4603      	mov	r3, r0
    }
 8012df2:	4618      	mov	r0, r3
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bdb0      	pop	{r4, r5, r7, pc}

08012dfa <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b082      	sub	sp, #8
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7fa fc33 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3708      	adds	r7, #8
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b082      	sub	sp, #8
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
 8012e1a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d00a      	beq.n	8012e3a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 fbab 	bl	8013580 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f000 fbb2 	bl	8013596 <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	3304      	adds	r3, #4
 8012e36:	607b      	str	r3, [r7, #4]
 8012e38:	e7f0      	b.n	8012e1c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 8012e3a:	bf00      	nop
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012e42:	b480      	push	{r7}
 8012e44:	b083      	sub	sp, #12
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
 8012e4a:	6039      	str	r1, [r7, #0]
 8012e4c:	bf00      	nop
 8012e4e:	370c      	adds	r7, #12
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4618      	mov	r0, r3
 8012e64:	370c      	adds	r7, #12
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012e6e:	b590      	push	{r4, r7, lr}
 8012e70:	b083      	sub	sp, #12
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012e78:	6838      	ldr	r0, [r7, #0]
 8012e7a:	f7ff ffed 	bl	8012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	681c      	ldr	r4, [r3, #0]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4619      	mov	r1, r3
 8012e86:	2004      	movs	r0, #4
 8012e88:	f7ed fa52 	bl	8000330 <_ZnwjPv>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	601c      	str	r4, [r3, #0]
 8012e90:	4618      	mov	r0, r3
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd90      	pop	{r4, r7, pc}

08012e98 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7ff ffd7 	bl	8012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	4619      	mov	r1, r3
 8012eae:	68b8      	ldr	r0, [r7, #8]
 8012eb0:	f7ff ffdd 	bl	8012e6e <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8012eb4:	bf00      	nop
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012ebc:	b5b0      	push	{r4, r5, r7, lr}
 8012ebe:	b08c      	sub	sp, #48	; 0x30
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012ec8:	4a39      	ldr	r2, [pc, #228]	; (8012fb0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8012eca:	2101      	movs	r1, #1
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f000 fb6d 	bl	80135ac <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8012ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f7f2 f906 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	617b      	str	r3, [r7, #20]
 8012eea:	f107 0214 	add.w	r2, r7, #20
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 fba0 	bl	801363a <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012efa:	4603      	mov	r3, r0
 8012efc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f02:	4618      	mov	r0, r3
 8012f04:	f000 fbae 	bl	8013664 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8012f08:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012f0e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012f14:	69fa      	ldr	r2, [r7, #28]
 8012f16:	18d5      	adds	r5, r2, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ff9d 	bl	8012e58 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	461a      	mov	r2, r3
 8012f22:	4629      	mov	r1, r5
 8012f24:	4620      	mov	r0, r4
 8012f26:	f7ff ffb7 	bl	8012e98 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012f2e:	f107 0308 	add.w	r3, r7, #8
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f1 fd5d 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fe fd47 	bl	80119d2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012f44:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012f46:	69fa      	ldr	r2, [r7, #28]
 8012f48:	4621      	mov	r1, r4
 8012f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f4c:	f000 fb9e 	bl	801368c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012f50:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	3304      	adds	r3, #4
 8012f56:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012f58:	f107 0308 	add.w	r3, r7, #8
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7f1 fd48 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012f62:	4603      	mov	r3, r0
 8012f64:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7fe fd32 	bl	80119d2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012f6e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012f70:	69ba      	ldr	r2, [r7, #24]
 8012f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 fb89 	bl	801368c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012f7a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8012f7c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	689a      	ldr	r2, [r3, #8]
 8012f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012f88:	461a      	mov	r2, r3
 8012f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f8c:	f7fe fd0e 	bl	80119ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	69fa      	ldr	r2, [r7, #28]
 8012f94:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	69ba      	ldr	r2, [r7, #24]
 8012f9a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	69fa      	ldr	r2, [r7, #28]
 8012fa2:	441a      	add	r2, r3
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	609a      	str	r2, [r3, #8]
    }
 8012fa8:	bf00      	nop
 8012faa:	3730      	adds	r7, #48	; 0x30
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bdb0      	pop	{r4, r5, r7, pc}
 8012fb0:	08020cf0 	.word	0x08020cf0

08012fb4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7f2 f8a8 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	f107 030c 	add.w	r3, r7, #12
 8012fca:	2101      	movs	r1, #1
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f000 fb71 	bl	80136b4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	60bb      	str	r3, [r7, #8]
 8012fd6:	f107 0308 	add.w	r3, r7, #8
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7f1 fd3c 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8012fe0:	4603      	mov	r3, r0
      }
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012fea:	b480      	push	{r7}
 8012fec:	b083      	sub	sp, #12
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	370c      	adds	r7, #12
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr

08013002 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013002:	b590      	push	{r4, r7, lr}
 8013004:	b087      	sub	sp, #28
 8013006:	af00      	add	r7, sp, #0
 8013008:	60f8      	str	r0, [r7, #12]
 801300a:	60b9      	str	r1, [r7, #8]
 801300c:	607a      	str	r2, [r7, #4]
 801300e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d01b      	beq.n	801304e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8013016:	68fc      	ldr	r4, [r7, #12]
 8013018:	68b8      	ldr	r0, [r7, #8]
 801301a:	f7ff fc1c 	bl	8012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801301e:	4603      	mov	r3, r0
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	4619      	mov	r1, r3
 8013024:	4620      	mov	r0, r4
 8013026:	f7fe fd40 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 801302a:	4603      	mov	r3, r0
 801302c:	f083 0301 	eor.w	r3, r3, #1
 8013030:	b2db      	uxtb	r3, r3
 8013032:	2b00      	cmp	r3, #0
 8013034:	d006      	beq.n	8013044 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	607b      	str	r3, [r7, #4]
 801303a:	68b8      	ldr	r0, [r7, #8]
 801303c:	f7f9 fa27 	bl	800c48e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013040:	60b8      	str	r0, [r7, #8]
 8013042:	e7e5      	b.n	8013010 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f7f9 fa16 	bl	800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801304a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801304c:	e7e0      	b.n	8013010 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801304e:	f107 0314 	add.w	r3, r7, #20
 8013052:	6879      	ldr	r1, [r7, #4]
 8013054:	4618      	mov	r0, r3
 8013056:	f7f2 fba6 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 801305a:	697b      	ldr	r3, [r7, #20]
    }
 801305c:	4618      	mov	r0, r3
 801305e:	371c      	adds	r7, #28
 8013060:	46bd      	mov	sp, r7
 8013062:	bd90      	pop	{r4, r7, pc}

08013064 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	601a      	str	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8013082:	b580      	push	{r7, lr}
 8013084:	b082      	sub	sp, #8
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7f9 fa43 	bl	800c516 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8013090:	4603      	mov	r3, r0
 8013092:	2101      	movs	r1, #1
 8013094:	4618      	mov	r0, r3
 8013096:	f000 fb26 	bl	80136e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 801309a:	4603      	mov	r3, r0
 801309c:	4618      	mov	r0, r3
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a8:	b086      	sub	sp, #24
 80130aa:	af02      	add	r7, sp, #8
 80130ac:	60f8      	str	r0, [r7, #12]
 80130ae:	60b9      	str	r1, [r7, #8]
 80130b0:	607a      	str	r2, [r7, #4]
 80130b2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	4619      	mov	r1, r3
 80130b8:	2018      	movs	r0, #24
 80130ba:	f7ed f939 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f7f9 fa29 	bl	800c516 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80130c4:	4604      	mov	r4, r0
 80130c6:	68b8      	ldr	r0, [r7, #8]
 80130c8:	f7f2 f9ce 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80130cc:	4605      	mov	r5, r0
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f7ee f8c9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80130d4:	4606      	mov	r6, r0
 80130d6:	6838      	ldr	r0, [r7, #0]
 80130d8:	f7ff fa6c 	bl	80125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80130dc:	4680      	mov	r8, r0
 80130de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130e0:	f7ee f8d7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80130e4:	4603      	mov	r3, r0
 80130e6:	9300      	str	r3, [sp, #0]
 80130e8:	4643      	mov	r3, r8
 80130ea:	4632      	mov	r2, r6
 80130ec:	4629      	mov	r1, r5
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 fb56 	bl	80137a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80130f4:	bf00      	nop
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130fe <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80130fe:	b580      	push	{r7, lr}
 8013100:	b084      	sub	sp, #16
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	f107 030c 	add.w	r3, r7, #12
 801310e:	4611      	mov	r1, r2
 8013110:	4618      	mov	r0, r3
 8013112:	f7f2 fb48 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	4618      	mov	r0, r3
 801311a:	3710      	adds	r7, #16
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	695b      	ldr	r3, [r3, #20]
 801312c:	4618      	mov	r0, r3
 801312e:	370c      	adds	r7, #12
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr

08013138 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	3310      	adds	r3, #16
 8013144:	4618      	mov	r0, r3
 8013146:	370c      	adds	r7, #12
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff fb7c 	bl	8012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801315e:	4603      	mov	r3, r0
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b08b      	sub	sp, #44	; 0x2c
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8013174:	68b8      	ldr	r0, [r7, #8]
 8013176:	f7f9 f967 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801317a:	4603      	mov	r3, r0
 801317c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801317e:	68b8      	ldr	r0, [r7, #8]
 8013180:	f7ff ff33 	bl	8012fea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013184:	4603      	mov	r3, r0
 8013186:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8013188:	2301      	movs	r3, #1
 801318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d020      	beq.n	80131d6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8013198:	68bc      	ldr	r4, [r7, #8]
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	4618      	mov	r0, r3
 801319e:	f7ff fb5a 	bl	8012856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80131a2:	4603      	mov	r3, r0
 80131a4:	461a      	mov	r2, r3
 80131a6:	6879      	ldr	r1, [r7, #4]
 80131a8:	4620      	mov	r0, r4
 80131aa:	f7fe fc7e 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 80131ae:	4603      	mov	r3, r0
 80131b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80131b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d005      	beq.n	80131c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f9 f965 	bl	800c48e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80131c4:	4603      	mov	r3, r0
 80131c6:	e004      	b.n	80131d2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80131c8:	69bb      	ldr	r3, [r7, #24]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7f9 f953 	bl	800c476 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80131d0:	4603      	mov	r3, r0
 80131d2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80131d4:	e7db      	b.n	801318e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80131d6:	697a      	ldr	r2, [r7, #20]
 80131d8:	f107 0310 	add.w	r3, r7, #16
 80131dc:	4611      	mov	r1, r2
 80131de:	4618      	mov	r0, r3
 80131e0:	f7f2 fae1 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80131e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d01d      	beq.n	8013228 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80131ec:	68b8      	ldr	r0, [r7, #8]
 80131ee:	f7f2 f919 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 80131f2:	4603      	mov	r3, r0
 80131f4:	61fb      	str	r3, [r7, #28]
 80131f6:	f107 021c 	add.w	r2, r7, #28
 80131fa:	f107 0310 	add.w	r3, r7, #16
 80131fe:	4611      	mov	r1, r2
 8013200:	4618      	mov	r0, r3
 8013202:	f7f1 ffb1 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d008      	beq.n	801321e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801320c:	f107 0214 	add.w	r2, r7, #20
 8013210:	f107 0318 	add.w	r3, r7, #24
 8013214:	4619      	mov	r1, r3
 8013216:	68f8      	ldr	r0, [r7, #12]
 8013218:	f000 fade 	bl	80137d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 801321c:	e025      	b.n	801326a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801321e:	f107 0310 	add.w	r3, r7, #16
 8013222:	4618      	mov	r0, r3
 8013224:	f000 f831 	bl	801328a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8013228:	68bc      	ldr	r4, [r7, #8]
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	4618      	mov	r0, r3
 801322e:	f7ff ff8f 	bl	8013150 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013232:	4603      	mov	r3, r0
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	4619      	mov	r1, r3
 8013238:	4620      	mov	r0, r4
 801323a:	f7fe fc36 	bl	8011aaa <_ZNKSt4lessItEclERKtS2_>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d008      	beq.n	8013256 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8013244:	f107 0214 	add.w	r2, r7, #20
 8013248:	f107 0318 	add.w	r3, r7, #24
 801324c:	4619      	mov	r1, r3
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f000 fac2 	bl	80137d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013254:	e009      	b.n	801326a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8013256:	2300      	movs	r3, #0
 8013258:	623b      	str	r3, [r7, #32]
 801325a:	f107 0220 	add.w	r2, r7, #32
 801325e:	f107 0310 	add.w	r3, r7, #16
 8013262:	4619      	mov	r1, r3
 8013264:	68f8      	ldr	r0, [r7, #12]
 8013266:	f7ee ff06 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	372c      	adds	r7, #44	; 0x2c
 801326e:	46bd      	mov	sp, r7
 8013270:	bd90      	pop	{r4, r7, pc}

08013272 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8013272:	b480      	push	{r7}
 8013274:	b083      	sub	sp, #12
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	330c      	adds	r3, #12
 801327e:	4618      	mov	r0, r3
 8013280:	370c      	adds	r7, #12
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801328a:	b580      	push	{r7, lr}
 801328c:	b082      	sub	sp, #8
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4618      	mov	r0, r3
 8013298:	f00d fa1e 	bl	80206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801329c:	4602      	mov	r2, r0
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	601a      	str	r2, [r3, #0]
	return *this;
 80132a2:	687b      	ldr	r3, [r7, #4]
      }
 80132a4:	4618      	mov	r0, r3
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	3310      	adds	r3, #16
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 faa6 	bl	801380a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 80132be:	4603      	mov	r3, r0
 80132c0:	4618      	mov	r0, r3
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	4618      	mov	r0, r3
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f7fa f9c0 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 80132ee:	4603      	mov	r3, r0
 80132f0:	4618      	mov	r0, r3
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7fa f9b4 	bl	800d66e <_ZNSt9_Any_data9_M_accessEv>
 8013306:	4603      	mov	r3, r0
 8013308:	4618      	mov	r0, r3
 801330a:	3708      	adds	r7, #8
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013310:	b480      	push	{r7}
 8013312:	b083      	sub	sp, #12
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013318:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801331c:	4618      	mov	r0, r3
 801331e:	370c      	adds	r7, #12
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013330:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013334:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7ff ffea 	bl	8013310 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 801333c:	4603      	mov	r3, r0
 801333e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013340:	f107 0208 	add.w	r2, r7, #8
 8013344:	f107 030c 	add.w	r3, r7, #12
 8013348:	4611      	mov	r1, r2
 801334a:	4618      	mov	r0, r3
 801334c:	f7ef fd4b 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013350:	4603      	mov	r3, r0
 8013352:	681b      	ldr	r3, [r3, #0]
      }
 8013354:	4618      	mov	r0, r3
 8013356:	3710      	adds	r7, #16
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4618      	mov	r0, r3
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr

08013372 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013372:	b5b0      	push	{r4, r5, r7, lr}
 8013374:	b084      	sub	sp, #16
 8013376:	af00      	add	r7, sp, #0
 8013378:	60f8      	str	r0, [r7, #12]
 801337a:	60b9      	str	r1, [r7, #8]
 801337c:	607a      	str	r2, [r7, #4]
 801337e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	f000 fa6d 	bl	8013860 <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013386:	4604      	mov	r4, r0
 8013388:	68b8      	ldr	r0, [r7, #8]
 801338a:	f000 fa69 	bl	8013860 <_ZSt12__niter_baseIPP5TimerET_S3_>
 801338e:	4605      	mov	r5, r0
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f000 fa65 	bl	8013860 <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013396:	4602      	mov	r2, r0
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	4629      	mov	r1, r5
 801339c:	4620      	mov	r0, r4
 801339e:	f000 fa6a 	bl	8013876 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80133a2:	4603      	mov	r3, r0
    }
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bdb0      	pop	{r4, r5, r7, pc}

080133ac <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80133ac:	b590      	push	{r4, r7, lr}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80133b6:	687c      	ldr	r4, [r7, #4]
 80133b8:	6838      	ldr	r0, [r7, #0]
 80133ba:	f000 fa7a 	bl	80138b2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 80133be:	4603      	mov	r3, r0
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 fa83 	bl	80138cc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 80133c6:	4603      	mov	r3, r0
 80133c8:	4619      	mov	r1, r3
 80133ca:	4620      	mov	r0, r4
 80133cc:	f7ff fbe9 	bl	8012ba2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	4618      	mov	r0, r3
 80133d4:	370c      	adds	r7, #12
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd90      	pop	{r4, r7, pc}

080133da <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80133da:	b580      	push	{r7, lr}
 80133dc:	b084      	sub	sp, #16
 80133de:	af00      	add	r7, sp, #0
 80133e0:	60f8      	str	r0, [r7, #12]
 80133e2:	60b9      	str	r1, [r7, #8]
 80133e4:	607a      	str	r2, [r7, #4]
 80133e6:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80133e8:	68b8      	ldr	r0, [r7, #8]
 80133ea:	f000 fa7a 	bl	80138e2 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80133ee:	4603      	mov	r3, r0
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 fa6b 	bl	80138cc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 80133f6:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80133f8:	781a      	ldrb	r2, [r3, #0]
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	701a      	strb	r2, [r3, #0]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2200      	movs	r2, #0
 8013402:	605a      	str	r2, [r3, #4]
      { }
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	4618      	mov	r0, r3
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801340e:	b5b0      	push	{r4, r5, r7, lr}
 8013410:	b086      	sub	sp, #24
 8013412:	af02      	add	r7, sp, #8
 8013414:	60f8      	str	r0, [r7, #12]
 8013416:	7239      	strb	r1, [r7, #8]
 8013418:	607a      	str	r2, [r7, #4]
 801341a:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801341c:	463a      	mov	r2, r7
 801341e:	f88d 4000 	strb.w	r4, [sp]
 8013422:	462b      	mov	r3, r5
 8013424:	6879      	ldr	r1, [r7, #4]
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ff ffd7 	bl	80133da <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bdb0      	pop	{r4, r5, r7, pc}

08013436 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013436:	b480      	push	{r7}
 8013438:	b083      	sub	sp, #12
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801343e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr

0801344e <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801344e:	b580      	push	{r7, lr}
 8013450:	b084      	sub	sp, #16
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013456:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801345a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7ff ffea 	bl	8013436 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 8013462:	4603      	mov	r3, r0
 8013464:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013466:	f107 0208 	add.w	r2, r7, #8
 801346a:	f107 030c 	add.w	r3, r7, #12
 801346e:	4611      	mov	r1, r2
 8013470:	4618      	mov	r0, r3
 8013472:	f7ef fcb8 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013476:	4603      	mov	r3, r0
 8013478:	681b      	ldr	r3, [r3, #0]
      }
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013482:	b480      	push	{r7}
 8013484:	b083      	sub	sp, #12
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013498:	b5b0      	push	{r4, r5, r7, lr}
 801349a:	b084      	sub	sp, #16
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f000 fa47 	bl	801393a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134ac:	4604      	mov	r4, r0
 80134ae:	68b8      	ldr	r0, [r7, #8]
 80134b0:	f000 fa43 	bl	801393a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134b4:	4605      	mov	r5, r0
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 fa3f 	bl	801393a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134bc:	4602      	mov	r2, r0
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	4629      	mov	r1, r5
 80134c2:	4620      	mov	r0, r4
 80134c4:	f000 fa44 	bl	8013950 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80134c8:	4603      	mov	r3, r0
    }
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bdb0      	pop	{r4, r5, r7, pc}

080134d2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b084      	sub	sp, #16
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	60f8      	str	r0, [r7, #12]
 80134da:	60b9      	str	r1, [r7, #8]
 80134dc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f000 fa54 	bl	801398c <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 80134e4:	4602      	mov	r2, r0
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	4293      	cmp	r3, r2
 80134ea:	bf8c      	ite	hi
 80134ec:	2301      	movhi	r3, #1
 80134ee:	2300      	movls	r3, #0
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d001      	beq.n	80134fa <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80134f6:	f00d f94c 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	4618      	mov	r0, r3
 8013500:	f00d f880 	bl	8020604 <_Znwj>
 8013504:	4603      	mov	r3, r0
 8013506:	bf00      	nop
      }
 8013508:	4618      	mov	r0, r3
 801350a:	3710      	adds	r7, #16
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	4618      	mov	r0, r3
 801351c:	370c      	adds	r7, #12
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr

08013526 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013526:	b580      	push	{r7, lr}
 8013528:	b086      	sub	sp, #24
 801352a:	af00      	add	r7, sp, #0
 801352c:	60f8      	str	r0, [r7, #12]
 801352e:	60b9      	str	r1, [r7, #8]
 8013530:	607a      	str	r2, [r7, #4]
 8013532:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013534:	68ba      	ldr	r2, [r7, #8]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	109b      	asrs	r3, r3, #2
 801353c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	2b00      	cmp	r3, #0
 8013542:	dd06      	ble.n	8013552 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	461a      	mov	r2, r3
 801354a:	68f9      	ldr	r1, [r7, #12]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f00d f993 	bl	8020878 <memmove>
      return __result + __count;
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	4413      	add	r3, r2
    }
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	60f8      	str	r0, [r7, #12]
 801356a:	60b9      	str	r1, [r7, #8]
 801356c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	4619      	mov	r1, r3
 8013574:	68b8      	ldr	r0, [r7, #8]
 8013576:	f00d f843 	bl	8020600 <_ZdlPvj>
      }
 801357a:	3710      	adds	r7, #16
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	370c      	adds	r7, #12
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr

08013596 <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8013596:	b580      	push	{r7, lr}
 8013598:	b082      	sub	sp, #8
 801359a:	af00      	add	r7, sp, #0
 801359c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f000 fa00 	bl	80139a4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 80135a4:	bf00      	nop
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80135ac:	b590      	push	{r4, r7, lr}
 80135ae:	b087      	sub	sp, #28
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 f9fd 	bl	80139b8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 80135be:	4604      	mov	r4, r0
 80135c0:	68f8      	ldr	r0, [r7, #12]
 80135c2:	f000 fa0a 	bl	80139da <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135c6:	4603      	mov	r3, r0
 80135c8:	1ae2      	subs	r2, r4, r3
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	bf34      	ite	cc
 80135d0:	2301      	movcc	r3, #1
 80135d2:	2300      	movcs	r3, #0
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d002      	beq.n	80135e0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f00d f8dc 	bl	8020798 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f000 f9fa 	bl	80139da <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135e6:	4604      	mov	r4, r0
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f000 f9f6 	bl	80139da <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135ee:	4603      	mov	r3, r0
 80135f0:	613b      	str	r3, [r7, #16]
 80135f2:	f107 0208 	add.w	r2, r7, #8
 80135f6:	f107 0310 	add.w	r3, r7, #16
 80135fa:	4611      	mov	r1, r2
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7ef f928 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8013602:	4603      	mov	r3, r0
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4423      	add	r3, r4
 8013608:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f000 f9e5 	bl	80139da <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013610:	4602      	mov	r2, r0
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	4293      	cmp	r3, r2
 8013616:	d306      	bcc.n	8013626 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f000 f9cd 	bl	80139b8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 801361e:	4602      	mov	r2, r0
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	4293      	cmp	r3, r2
 8013624:	d904      	bls.n	8013630 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f000 f9c6 	bl	80139b8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 801362c:	4603      	mov	r3, r0
 801362e:	e000      	b.n	8013632 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 8013630:	697b      	ldr	r3, [r7, #20]
      }
 8013632:	4618      	mov	r0, r3
 8013634:	371c      	adds	r7, #28
 8013636:	46bd      	mov	sp, r7
 8013638:	bd90      	pop	{r4, r7, pc}

0801363a <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801363a:	b590      	push	{r4, r7, lr}
 801363c:	b083      	sub	sp, #12
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
 8013642:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7f1 f9d4 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 801364a:	4603      	mov	r3, r0
 801364c:	681c      	ldr	r4, [r3, #0]
 801364e:	6838      	ldr	r0, [r7, #0]
 8013650:	f7f1 f9cf 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013654:	4603      	mov	r3, r0
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	1ae3      	subs	r3, r4, r3
 801365a:	109b      	asrs	r3, r3, #2
 801365c:	4618      	mov	r0, r3
 801365e:	370c      	adds	r7, #12
 8013660:	46bd      	mov	sp, r7
 8013662:	bd90      	pop	{r4, r7, pc}

08013664 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d006      	beq.n	8013682 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6839      	ldr	r1, [r7, #0]
 8013678:	4618      	mov	r0, r3
 801367a:	f000 f9be 	bl	80139fa <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 801367e:	4603      	mov	r3, r0
 8013680:	e000      	b.n	8013684 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 8013682:	2300      	movs	r3, #0
      }
 8013684:	4618      	mov	r0, r3
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801368c:	b590      	push	{r4, r7, lr}
 801368e:	b087      	sub	sp, #28
 8013690:	af02      	add	r7, sp, #8
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
 8013698:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801369a:	f88d 4000 	strb.w	r4, [sp]
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	68b9      	ldr	r1, [r7, #8]
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f000 f9c8 	bl	8013a3a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80136aa:	4603      	mov	r3, r0
      }
 80136ac:	4618      	mov	r0, r3
 80136ae:	3714      	adds	r7, #20
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd90      	pop	{r4, r7, pc}

080136b4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	425b      	negs	r3, r3
 80136c8:	4413      	add	r3, r2
 80136ca:	60fb      	str	r3, [r7, #12]
 80136cc:	f107 020c 	add.w	r2, r7, #12
 80136d0:	f107 0308 	add.w	r3, r7, #8
 80136d4:	4611      	mov	r1, r2
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7f1 fe94 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	4618      	mov	r0, r3
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b084      	sub	sp, #16
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
 80136ee:	6039      	str	r1, [r7, #0]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	60fb      	str	r3, [r7, #12]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80136f8:	f7ec fe12 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d009      	beq.n	8013716 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013702:	68ba      	ldr	r2, [r7, #8]
 8013704:	4613      	mov	r3, r2
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	4413      	add	r3, r2
 801370a:	00db      	lsls	r3, r3, #3
 801370c:	4618      	mov	r0, r3
 801370e:	f00c ff79 	bl	8020604 <_Znwj>
 8013712:	4603      	mov	r3, r0
 8013714:	e006      	b.n	8013724 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013716:	2200      	movs	r2, #0
 8013718:	68b9      	ldr	r1, [r7, #8]
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f000 fa78 	bl	8013c10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 8013720:	4603      	mov	r3, r0
 8013722:	bf00      	nop
      { return __a.allocate(__n); }
 8013724:	4618      	mov	r0, r3
 8013726:	3710      	adds	r7, #16
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	683a      	ldr	r2, [r7, #0]
 801373a:	4611      	mov	r1, r2
 801373c:	4618      	mov	r0, r3
 801373e:	f000 f98e 	bl	8013a5e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4618      	mov	r0, r3
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801374c:	b5b0      	push	{r4, r5, r7, lr}
 801374e:	b088      	sub	sp, #32
 8013750:	af00      	add	r7, sp, #0
 8013752:	60f8      	str	r0, [r7, #12]
 8013754:	60b9      	str	r1, [r7, #8]
 8013756:	607a      	str	r2, [r7, #4]
 8013758:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801375a:	68b8      	ldr	r0, [r7, #8]
 801375c:	f7ed fd83 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f7fe ff27 	bl	80125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013766:	4602      	mov	r2, r0
 8013768:	f107 0318 	add.w	r3, r7, #24
 801376c:	4611      	mov	r1, r2
 801376e:	4618      	mov	r0, r3
 8013770:	f7ff ffdc 	bl	801372c <_ZNSt5tupleIJRKtEEC1EOS2_>
 8013774:	f107 0418 	add.w	r4, r7, #24
 8013778:	6838      	ldr	r0, [r7, #0]
 801377a:	f7ed fd8a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	4619      	mov	r1, r3
 8013782:	2008      	movs	r0, #8
 8013784:	f7ec fdd4 	bl	8000330 <_ZnwjPv>
 8013788:	4605      	mov	r5, r0
 801378a:	7f3b      	ldrb	r3, [r7, #28]
 801378c:	4622      	mov	r2, r4
 801378e:	7d39      	ldrb	r1, [r7, #20]
 8013790:	4628      	mov	r0, r5
 8013792:	f000 f995 	bl	8013ac0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8013796:	462b      	mov	r3, r5
 8013798:	4618      	mov	r0, r3
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bdb0      	pop	{r4, r5, r7, pc}

080137a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80137a0:	b5b0      	push	{r4, r5, r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
 80137ac:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7ed fd59 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80137b4:	4604      	mov	r4, r0
 80137b6:	6838      	ldr	r0, [r7, #0]
 80137b8:	f7fe fefc 	bl	80125b4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80137bc:	4605      	mov	r5, r0
 80137be:	6a38      	ldr	r0, [r7, #32]
 80137c0:	f7ed fd67 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80137c4:	4603      	mov	r3, r0
 80137c6:	462a      	mov	r2, r5
 80137c8:	4621      	mov	r1, r4
 80137ca:	68b8      	ldr	r0, [r7, #8]
 80137cc:	f7ff ffbe 	bl	801374c <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 80137d0:	bf00      	nop
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bdb0      	pop	{r4, r5, r7, pc}

080137d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80137e4:	68b8      	ldr	r0, [r7, #8]
 80137e6:	f000 f97f 	bl	8013ae8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80137ea:	4603      	mov	r3, r0
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ee ffdb 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80137f8:	4603      	mov	r3, r0
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	605a      	str	r2, [r3, #4]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	4618      	mov	r0, r3
 8013804:	3710      	adds	r7, #16
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801380a:	b580      	push	{r7, lr}
 801380c:	b082      	sub	sp, #8
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 f973 	bl	8013afe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8013818:	4603      	mov	r3, r0
 801381a:	4618      	mov	r0, r3
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	60f8      	str	r0, [r7, #12]
 801382a:	60b9      	str	r1, [r7, #8]
 801382c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f000 f970 	bl	8013b14 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 8013834:	4602      	mov	r2, r0
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	4293      	cmp	r3, r2
 801383a:	bf8c      	ite	hi
 801383c:	2301      	movhi	r3, #1
 801383e:	2300      	movls	r3, #0
 8013840:	b2db      	uxtb	r3, r3
 8013842:	2b00      	cmp	r3, #0
 8013844:	d001      	beq.n	801384a <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013846:	f00c ffa4 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4618      	mov	r0, r3
 8013850:	f00c fed8 	bl	8020604 <_Znwj>
 8013854:	4603      	mov	r3, r0
 8013856:	bf00      	nop
      }
 8013858:	4618      	mov	r0, r3
 801385a:	3710      	adds	r7, #16
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	4618      	mov	r0, r3
 801386c:	370c      	adds	r7, #12
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr

08013876 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013876:	b580      	push	{r7, lr}
 8013878:	b086      	sub	sp, #24
 801387a:	af00      	add	r7, sp, #0
 801387c:	60f8      	str	r0, [r7, #12]
 801387e:	60b9      	str	r1, [r7, #8]
 8013880:	607a      	str	r2, [r7, #4]
 8013882:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	1ad3      	subs	r3, r2, r3
 801388a:	109b      	asrs	r3, r3, #2
 801388c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2b00      	cmp	r3, #0
 8013892:	dd06      	ble.n	80138a2 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	461a      	mov	r2, r3
 801389a:	68f9      	ldr	r1, [r7, #12]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f00c ffeb 	bl	8020878 <memmove>
      return __result + __count;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	4413      	add	r3, r2
    }
 80138aa:	4618      	mov	r0, r3
 80138ac:	3718      	adds	r7, #24
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}

080138b2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80138b2:	b580      	push	{r7, lr}
 80138b4:	b082      	sub	sp, #8
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	6078      	str	r0, [r7, #4]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4618      	mov	r0, r3
 80138be:	f000 f935 	bl	8013b2c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 80138c2:	4603      	mov	r3, r0
 80138c4:	4618      	mov	r0, r3
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	370c      	adds	r7, #12
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr

080138e2 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b082      	sub	sp, #8
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4618      	mov	r0, r3
 80138ee:	f000 f929 	bl	8013b44 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80138f2:	4603      	mov	r3, r0
 80138f4:	4618      	mov	r0, r3
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b084      	sub	sp, #16
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013908:	68f8      	ldr	r0, [r7, #12]
 801390a:	f000 f927 	bl	8013b5c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 801390e:	4602      	mov	r2, r0
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	4293      	cmp	r3, r2
 8013914:	bf8c      	ite	hi
 8013916:	2301      	movhi	r3, #1
 8013918:	2300      	movls	r3, #0
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013920:	f00c ff37 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	4618      	mov	r0, r3
 801392a:	f00c fe6b 	bl	8020604 <_Znwj>
 801392e:	4603      	mov	r3, r0
 8013930:	bf00      	nop
      }
 8013932:	4618      	mov	r0, r3
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 801393a:	b480      	push	{r7}
 801393c:	b083      	sub	sp, #12
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4618      	mov	r0, r3
 8013946:	370c      	adds	r7, #12
 8013948:	46bd      	mov	sp, r7
 801394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394e:	4770      	bx	lr

08013950 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013950:	b580      	push	{r7, lr}
 8013952:	b086      	sub	sp, #24
 8013954:	af00      	add	r7, sp, #0
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	607a      	str	r2, [r7, #4]
 801395c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801395e:	68ba      	ldr	r2, [r7, #8]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	109b      	asrs	r3, r3, #2
 8013966:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	2b00      	cmp	r3, #0
 801396c:	dd06      	ble.n	801397c <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	461a      	mov	r2, r3
 8013974:	68f9      	ldr	r1, [r7, #12]
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f00c ff7e 	bl	8020878 <memmove>
      return __result + __count;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	4413      	add	r3, r2
    }
 8013984:	4618      	mov	r0, r3
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801398c:	b480      	push	{r7}
 801398e:	b083      	sub	sp, #12
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013994:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013998:	4618      	mov	r0, r3
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
    }
 80139ac:	bf00      	nop
 80139ae:	370c      	adds	r7, #12
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr

080139b8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	4618      	mov	r0, r3
 80139c4:	f000 f8fc 	bl	8013bc0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80139c8:	4603      	mov	r3, r0
 80139ca:	4618      	mov	r0, r3
 80139cc:	f000 f8de 	bl	8013b8c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 80139d0:	4603      	mov	r3, r0
 80139d2:	4618      	mov	r0, r3
 80139d4:	3708      	adds	r7, #8
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80139da:	b480      	push	{r7}
 80139dc:	b083      	sub	sp, #12
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	685a      	ldr	r2, [r3, #4]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	109b      	asrs	r3, r3, #2
 80139ee:	4618      	mov	r0, r3
 80139f0:	370c      	adds	r7, #12
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr

080139fa <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80139fa:	b580      	push	{r7, lr}
 80139fc:	b084      	sub	sp, #16
 80139fe:	af00      	add	r7, sp, #0
 8013a00:	6078      	str	r0, [r7, #4]
 8013a02:	6039      	str	r1, [r7, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	60fb      	str	r3, [r7, #12]
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013a0c:	f7ec fc88 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d006      	beq.n	8013a24 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f00c fdf2 	bl	8020604 <_Znwj>
 8013a20:	4603      	mov	r3, r0
 8013a22:	e006      	b.n	8013a32 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013a24:	2200      	movs	r2, #0
 8013a26:	68b9      	ldr	r1, [r7, #8]
 8013a28:	68f8      	ldr	r0, [r7, #12]
 8013a2a:	f000 f938 	bl	8013c9e <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	bf00      	nop
      { return __a.allocate(__n); }
 8013a32:	4618      	mov	r0, r3
 8013a34:	3710      	adds	r7, #16
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b084      	sub	sp, #16
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	60f8      	str	r0, [r7, #12]
 8013a42:	60b9      	str	r1, [r7, #8]
 8013a44:	607a      	str	r2, [r7, #4]
 8013a46:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	f000 f8c1 	bl	8013bd6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8013a54:	4603      	mov	r3, r0
      }
 8013a56:	4618      	mov	r0, r3
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013a5e:	b590      	push	{r4, r7, lr}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013a68:	687c      	ldr	r4, [r7, #4]
 8013a6a:	6838      	ldr	r0, [r7, #0]
 8013a6c:	f000 f8f2 	bl	8013c54 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013a70:	4603      	mov	r3, r0
 8013a72:	4618      	mov	r0, r3
 8013a74:	f000 f8fb 	bl	8013c6e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f7ff faf1 	bl	8013064 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd90      	pop	{r4, r7, pc}

08013a8c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013a9a:	68b8      	ldr	r0, [r7, #8]
 8013a9c:	f000 f8f2 	bl	8013c84 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f000 f8e3 	bl	8013c6e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013aa8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013aaa:	881a      	ldrh	r2, [r3, #0]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	801a      	strh	r2, [r3, #0]
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	605a      	str	r2, [r3, #4]
      { }
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013ac0:	b5b0      	push	{r4, r5, r7, lr}
 8013ac2:	b086      	sub	sp, #24
 8013ac4:	af02      	add	r7, sp, #8
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	7239      	strb	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
 8013acc:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013ace:	463a      	mov	r2, r7
 8013ad0:	f88d 4000 	strb.w	r4, [sp]
 8013ad4:	462b      	mov	r3, r5
 8013ad6:	6879      	ldr	r1, [r7, #4]
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7ff ffd7 	bl	8013a8c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3710      	adds	r7, #16
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bdb0      	pop	{r4, r5, r7, pc}

08013ae8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4618      	mov	r0, r3
 8013af4:	370c      	adds	r7, #12
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 8013afe:	b480      	push	{r7}
 8013b00:	b083      	sub	sp, #12
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b14:	b480      	push	{r7}
 8013b16:	b083      	sub	sp, #12
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b1c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013b20:	4618      	mov	r0, r3
 8013b22:	370c      	adds	r7, #12
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr

08013b44 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b082      	sub	sp, #8
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f7ff feb0 	bl	80138b2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013b52:	4603      	mov	r3, r0
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b64:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013b68:	4618      	mov	r0, r3
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013b7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013b80:	4618      	mov	r0, r3
 8013b82:	370c      	adds	r7, #12
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013b94:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013b98:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f7ff ffea 	bl	8013b74 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013ba4:	f107 0208 	add.w	r2, r7, #8
 8013ba8:	f107 030c 	add.w	r3, r7, #12
 8013bac:	4611      	mov	r1, r2
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ef f919 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	681b      	ldr	r3, [r3, #0]
      }
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3710      	adds	r7, #16
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	370c      	adds	r7, #12
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr

08013bd6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013bd6:	b5b0      	push	{r4, r5, r7, lr}
 8013bd8:	b084      	sub	sp, #16
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	60f8      	str	r0, [r7, #12]
 8013bde:	60b9      	str	r1, [r7, #8]
 8013be0:	607a      	str	r2, [r7, #4]
 8013be2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f000 f879 	bl	8013cdc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013bea:	4604      	mov	r4, r0
 8013bec:	68b8      	ldr	r0, [r7, #8]
 8013bee:	f000 f875 	bl	8013cdc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 f871 	bl	8013cdc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	4629      	mov	r1, r5
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 f876 	bl	8013cf2 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8013c06:	4603      	mov	r3, r0
    }
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bdb0      	pop	{r4, r5, r7, pc}

08013c10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013c1c:	68f8      	ldr	r0, [r7, #12]
 8013c1e:	f000 f887 	bl	8013d30 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8013c22:	4602      	mov	r2, r0
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	4293      	cmp	r3, r2
 8013c28:	bf8c      	ite	hi
 8013c2a:	2301      	movhi	r3, #1
 8013c2c:	2300      	movls	r3, #0
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013c34:	f00c fdad 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c38:	68ba      	ldr	r2, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	005b      	lsls	r3, r3, #1
 8013c3e:	4413      	add	r3, r2
 8013c40:	00db      	lsls	r3, r3, #3
 8013c42:	4618      	mov	r0, r3
 8013c44:	f00c fcde 	bl	8020604 <_Znwj>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	bf00      	nop
      }
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f000 f874 	bl	8013d4c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8013c64:	4603      	mov	r3, r0
 8013c66:	4618      	mov	r0, r3
 8013c68:	3708      	adds	r7, #8
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013c6e:	b480      	push	{r7}
 8013c70:	b083      	sub	sp, #12
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	370c      	adds	r7, #12
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr

08013c84 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f000 f868 	bl	8013d64 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013c94:	4603      	mov	r3, r0
 8013c96:	4618      	mov	r0, r3
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b084      	sub	sp, #16
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	60f8      	str	r0, [r7, #12]
 8013ca6:	60b9      	str	r1, [r7, #8]
 8013ca8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	f000 f866 	bl	8013d7c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	bf8c      	ite	hi
 8013cb8:	2301      	movhi	r3, #1
 8013cba:	2300      	movls	r3, #0
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d001      	beq.n	8013cc6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013cc2:	f00c fd66 	bl	8020792 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	009b      	lsls	r3, r3, #2
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f00c fc9a 	bl	8020604 <_Znwj>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	bf00      	nop
      }
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3710      	adds	r7, #16
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr

08013cf2 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013cf2:	b580      	push	{r7, lr}
 8013cf4:	b086      	sub	sp, #24
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	60f8      	str	r0, [r7, #12]
 8013cfa:	60b9      	str	r1, [r7, #8]
 8013cfc:	607a      	str	r2, [r7, #4]
 8013cfe:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	1ad3      	subs	r3, r2, r3
 8013d06:	109b      	asrs	r3, r3, #2
 8013d08:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	dd06      	ble.n	8013d1e <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	461a      	mov	r2, r3
 8013d16:	68f9      	ldr	r1, [r7, #12]
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f00c fdad 	bl	8020878 <memmove>
      return __result + __count;
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	4413      	add	r3, r2
    }
 8013d26:	4618      	mov	r0, r3
 8013d28:	3718      	adds	r7, #24
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
	...

08013d30 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013d30:	b480      	push	{r7}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013d38:	4b03      	ldr	r3, [pc, #12]	; (8013d48 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	05555555 	.word	0x05555555

08013d4c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f7ff ff71 	bl	8013c54 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013d72:	4603      	mov	r3, r0
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013d84:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013d88:	4618      	mov	r0, r3
 8013d8a:	370c      	adds	r7, #12
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <_ZN6StreamD1Ev>:
class Stream {
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	3308      	adds	r3, #8
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fc f9a5 	bl	80100f0 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <_ZN6PacketD1Ev>:
class Packet {
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	3308      	adds	r3, #8
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fc ff26 	bl	8010c0e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <_ZN5TimerD1Ev>:
class Timer {
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	3308      	adds	r3, #8
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f9 fceb 	bl	800d7b4 <_ZNSt8functionIFvvEED1Ev>
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	4618      	mov	r0, r3
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af02      	add	r7, sp, #8
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	f040 82ab 	bne.w	8014350 <_Z41__static_initialization_and_destruction_0ii+0x568>
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e00:	4293      	cmp	r3, r2
 8013e02:	f040 82a5 	bne.w	8014350 <_Z41__static_initialization_and_destruction_0ii+0x568>
InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
 8013e06:	4bad      	ldr	r3, [pc, #692]	; (80140bc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8013e08:	2204      	movs	r2, #4
 8013e0a:	49ad      	ldr	r1, [pc, #692]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013e0c:	48ad      	ldr	r0, [pc, #692]	; (80140c4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013e0e:	f7f5 fb23 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
 8013e12:	4bad      	ldr	r3, [pc, #692]	; (80140c8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8013e14:	2200      	movs	r2, #0
 8013e16:	49aa      	ldr	r1, [pc, #680]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013e18:	48ac      	ldr	r0, [pc, #688]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8013e1a:	f7f5 fb1d 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
 8013e1e:	4bac      	ldr	r3, [pc, #688]	; (80140d0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8013e20:	2208      	movs	r2, #8
 8013e22:	49ac      	ldr	r1, [pc, #688]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013e24:	48ac      	ldr	r0, [pc, #688]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013e26:	f7f5 fb17 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
 8013e2a:	4bac      	ldr	r3, [pc, #688]	; (80140dc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8013e2c:	220c      	movs	r2, #12
 8013e2e:	49a9      	ldr	r1, [pc, #676]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013e30:	48ab      	ldr	r0, [pc, #684]	; (80140e0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8013e32:	f7f5 fb11 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 8013e36:	4bab      	ldr	r3, [pc, #684]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	49a6      	ldr	r1, [pc, #664]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013e3c:	48aa      	ldr	r0, [pc, #680]	; (80140e8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8013e3e:	f7f5 fb0b 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
 8013e42:	4baa      	ldr	r3, [pc, #680]	; (80140ec <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8013e44:	2204      	movs	r2, #4
 8013e46:	49a3      	ldr	r1, [pc, #652]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013e48:	48a9      	ldr	r0, [pc, #676]	; (80140f0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013e4a:	f7f5 fb05 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
 8013e4e:	4ba9      	ldr	r3, [pc, #676]	; (80140f4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8013e50:	2208      	movs	r2, #8
 8013e52:	499b      	ldr	r1, [pc, #620]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013e54:	48a8      	ldr	r0, [pc, #672]	; (80140f8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8013e56:	f7f5 faff 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
 8013e5a:	4ba8      	ldr	r3, [pc, #672]	; (80140fc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013e5c:	220c      	movs	r2, #12
 8013e5e:	4998      	ldr	r1, [pc, #608]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013e60:	48a7      	ldr	r0, [pc, #668]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8013e62:	f7f5 faf9 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
 8013e66:	4ba7      	ldr	r3, [pc, #668]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013e68:	2200      	movs	r2, #0
 8013e6a:	49a7      	ldr	r1, [pc, #668]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013e6c:	48a7      	ldr	r0, [pc, #668]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8013e6e:	f7f5 faf3 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8013e72:	4ba7      	ldr	r3, [pc, #668]	; (8014110 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	49a7      	ldr	r1, [pc, #668]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e78:	48a7      	ldr	r0, [pc, #668]	; (8014118 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013e7a:	f7f5 faed 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
 8013e7e:	4ba7      	ldr	r3, [pc, #668]	; (801411c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8013e80:	2204      	movs	r2, #4
 8013e82:	49a4      	ldr	r1, [pc, #656]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e84:	48a6      	ldr	r0, [pc, #664]	; (8014120 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8013e86:	f7f5 fae7 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
 8013e8a:	4ba6      	ldr	r3, [pc, #664]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013e8c:	2208      	movs	r2, #8
 8013e8e:	49a1      	ldr	r1, [pc, #644]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e90:	48a5      	ldr	r0, [pc, #660]	; (8014128 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8013e92:	f7f5 fae1 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
 8013e96:	4ba5      	ldr	r3, [pc, #660]	; (801412c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8013e98:	220c      	movs	r2, #12
 8013e9a:	499e      	ldr	r1, [pc, #632]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e9c:	48a4      	ldr	r0, [pc, #656]	; (8014130 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013e9e:	f7f5 fadb 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
 8013ea2:	4ba4      	ldr	r3, [pc, #656]	; (8014134 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	49a4      	ldr	r1, [pc, #656]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013ea8:	48a4      	ldr	r0, [pc, #656]	; (801413c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013eaa:	f7f5 fad5 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
 8013eae:	4ba4      	ldr	r3, [pc, #656]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8013eb0:	2204      	movs	r2, #4
 8013eb2:	49a1      	ldr	r1, [pc, #644]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013eb4:	48a3      	ldr	r0, [pc, #652]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8013eb6:	f7f5 facf 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
 8013eba:	4ba3      	ldr	r3, [pc, #652]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8013ebc:	2208      	movs	r2, #8
 8013ebe:	499e      	ldr	r1, [pc, #632]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013ec0:	48a2      	ldr	r0, [pc, #648]	; (801414c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8013ec2:	f7f5 fac9 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);
 8013ec6:	4ba2      	ldr	r3, [pc, #648]	; (8014150 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013ec8:	220c      	movs	r2, #12
 8013eca:	499b      	ldr	r1, [pc, #620]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013ecc:	48a1      	ldr	r0, [pc, #644]	; (8014154 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8013ece:	f7f5 fac3 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8013ed2:	49a1      	ldr	r1, [pc, #644]	; (8014158 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8013ed4:	48a1      	ldr	r0, [pc, #644]	; (801415c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013ed6:	f7f2 fb3f 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8013eda:	49a1      	ldr	r1, [pc, #644]	; (8014160 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8013edc:	48a1      	ldr	r0, [pc, #644]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8013ede:	f7f2 fb3b 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8013ee2:	49a1      	ldr	r1, [pc, #644]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8013ee4:	48a1      	ldr	r0, [pc, #644]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013ee6:	f7f2 fb37 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8013eea:	4ba1      	ldr	r3, [pc, #644]	; (8014170 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013eec:	4aa1      	ldr	r2, [pc, #644]	; (8014174 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013eee:	49a2      	ldr	r1, [pc, #648]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013ef0:	48a2      	ldr	r0, [pc, #648]	; (801417c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013ef2:	f7ec fafb 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8013ef6:	4ba2      	ldr	r3, [pc, #648]	; (8014180 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013ef8:	2204      	movs	r2, #4
 8013efa:	49a2      	ldr	r1, [pc, #648]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013efc:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f00:	48a2      	ldr	r0, [pc, #648]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013f02:	f7ef f945 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8013f06:	4ba2      	ldr	r3, [pc, #648]	; (8014190 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013f08:	2200      	movs	r2, #0
 8013f0a:	499e      	ldr	r1, [pc, #632]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013f0c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f10:	48a0      	ldr	r0, [pc, #640]	; (8014194 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013f12:	f7ef f93d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8013f16:	4ba0      	ldr	r3, [pc, #640]	; (8014198 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013f18:	2200      	movs	r2, #0
 8013f1a:	49a0      	ldr	r1, [pc, #640]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013f1c:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f20:	489f      	ldr	r0, [pc, #636]	; (80141a0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013f22:	f7ef f935 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8013f26:	4b9f      	ldr	r3, [pc, #636]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8013f28:	2208      	movs	r2, #8
 8013f2a:	499c      	ldr	r1, [pc, #624]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013f2c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f30:	489d      	ldr	r0, [pc, #628]	; (80141a8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8013f32:	f7ef f92d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8013f36:	4b9d      	ldr	r3, [pc, #628]	; (80141ac <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8013f38:	220c      	movs	r2, #12
 8013f3a:	4998      	ldr	r1, [pc, #608]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013f3c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f40:	489b      	ldr	r0, [pc, #620]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8013f42:	f7ef f925 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8013f46:	4b9b      	ldr	r3, [pc, #620]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8013f48:	2204      	movs	r2, #4
 8013f4a:	496f      	ldr	r1, [pc, #444]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013f4c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f50:	4899      	ldr	r0, [pc, #612]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8013f52:	f7ef f91d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 8013f56:	4b6b      	ldr	r3, [pc, #428]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013f58:	2200      	movs	r2, #0
 8013f5a:	496b      	ldr	r1, [pc, #428]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013f5c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f60:	4896      	ldr	r0, [pc, #600]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8013f62:	f7ef f915 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 8013f66:	4b96      	ldr	r3, [pc, #600]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013f68:	2208      	movs	r2, #8
 8013f6a:	4967      	ldr	r1, [pc, #412]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013f6c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f70:	4894      	ldr	r0, [pc, #592]	; (80141c4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013f72:	f7ef f90d 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 8013f76:	4b94      	ldr	r3, [pc, #592]	; (80141c8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013f78:	220c      	movs	r2, #12
 8013f7a:	4963      	ldr	r1, [pc, #396]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013f7c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f80:	4892      	ldr	r0, [pc, #584]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013f82:	f7ef f905 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 8013f86:	4b92      	ldr	r3, [pc, #584]	; (80141d0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013f88:	2208      	movs	r2, #8
 8013f8a:	497e      	ldr	r1, [pc, #504]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013f8c:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f90:	4890      	ldr	r0, [pc, #576]	; (80141d4 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8013f92:	f7ef f8fd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 8013f96:	4b90      	ldr	r3, [pc, #576]	; (80141d8 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8013f98:	2208      	movs	r2, #8
 8013f9a:	4990      	ldr	r1, [pc, #576]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013f9c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013fa0:	488f      	ldr	r0, [pc, #572]	; (80141e0 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8013fa2:	f7ef f8f5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 8013fa6:	4b8f      	ldr	r3, [pc, #572]	; (80141e4 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8013fa8:	2204      	movs	r2, #4
 8013faa:	498c      	ldr	r1, [pc, #560]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013fac:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013fb0:	488d      	ldr	r0, [pc, #564]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8013fb2:	f7ef f8ed 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 8013fb6:	4b8d      	ldr	r3, [pc, #564]	; (80141ec <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8013fb8:	2200      	movs	r2, #0
 8013fba:	498d      	ldr	r1, [pc, #564]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8013fbc:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013fc0:	488c      	ldr	r0, [pc, #560]	; (80141f4 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8013fc2:	f7ef f8e5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 8013fc6:	4b8c      	ldr	r3, [pc, #560]	; (80141f8 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8013fc8:	220c      	movs	r2, #12
 8013fca:	4984      	ldr	r1, [pc, #528]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013fcc:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013fd0:	488a      	ldr	r0, [pc, #552]	; (80141fc <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8013fd2:	f7ef f8dd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 8013fd6:	4b8a      	ldr	r3, [pc, #552]	; (8014200 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8013fd8:	220c      	movs	r2, #12
 8013fda:	496a      	ldr	r1, [pc, #424]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013fdc:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013fe0:	4888      	ldr	r0, [pc, #544]	; (8014204 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8013fe2:	f7ef f8d5 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 8013fe6:	4b88      	ldr	r3, [pc, #544]	; (8014208 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8013fe8:	2200      	movs	r2, #0
 8013fea:	497c      	ldr	r1, [pc, #496]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013fec:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8014188 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ff0:	4886      	ldr	r0, [pc, #536]	; (801420c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8013ff2:	f7ef f8cd 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 8013ff6:	4986      	ldr	r1, [pc, #536]	; (8014210 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013ff8:	4886      	ldr	r0, [pc, #536]	; (8014214 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013ffa:	f7f3 fe5b 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8013ffe:	4986      	ldr	r1, [pc, #536]	; (8014218 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8014000:	4886      	ldr	r0, [pc, #536]	; (801421c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8014002:	f7f3 fe57 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 8014006:	4986      	ldr	r1, [pc, #536]	; (8014220 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8014008:	4886      	ldr	r0, [pc, #536]	; (8014224 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 801400a:	f7f3 fe53 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 801400e:	4986      	ldr	r1, [pc, #536]	; (8014228 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8014010:	4886      	ldr	r0, [pc, #536]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8014012:	f7f3 fe4f 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 8014016:	4986      	ldr	r1, [pc, #536]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8014018:	4886      	ldr	r0, [pc, #536]	; (8014234 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 801401a:	f7f3 fe4b 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 801401e:	4986      	ldr	r1, [pc, #536]	; (8014238 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8014020:	4886      	ldr	r0, [pc, #536]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8014022:	f7f3 fe47 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 8014026:	4986      	ldr	r1, [pc, #536]	; (8014240 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8014028:	4886      	ldr	r0, [pc, #536]	; (8014244 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 801402a:	f7f3 fe43 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 801402e:	4986      	ldr	r1, [pc, #536]	; (8014248 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8014030:	4886      	ldr	r0, [pc, #536]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8014032:	f7f3 fe3f 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 8014036:	4986      	ldr	r1, [pc, #536]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8014038:	4886      	ldr	r0, [pc, #536]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 801403a:	f7f3 fe3b 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 801403e:	4986      	ldr	r1, [pc, #536]	; (8014258 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8014040:	4886      	ldr	r0, [pc, #536]	; (801425c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8014042:	f7f3 fe37 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 8014046:	4986      	ldr	r1, [pc, #536]	; (8014260 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8014048:	4886      	ldr	r0, [pc, #536]	; (8014264 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 801404a:	f7f3 fe33 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 801404e:	4986      	ldr	r1, [pc, #536]	; (8014268 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8014050:	4886      	ldr	r0, [pc, #536]	; (801426c <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8014052:	f7f9 fbbd 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 8014056:	4986      	ldr	r1, [pc, #536]	; (8014270 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014058:	4886      	ldr	r0, [pc, #536]	; (8014274 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 801405a:	f7f9 fbb9 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 801405e:	4986      	ldr	r1, [pc, #536]	; (8014278 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8014060:	4886      	ldr	r0, [pc, #536]	; (801427c <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8014062:	f7f9 fbb5 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 8014066:	4986      	ldr	r1, [pc, #536]	; (8014280 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8014068:	4886      	ldr	r0, [pc, #536]	; (8014284 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 801406a:	f7f9 fbb1 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 801406e:	4986      	ldr	r1, [pc, #536]	; (8014288 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8014070:	4886      	ldr	r0, [pc, #536]	; (801428c <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8014072:	f7f9 fbad 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 8014076:	4986      	ldr	r1, [pc, #536]	; (8014290 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8014078:	4886      	ldr	r0, [pc, #536]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 801407a:	f7f9 fba9 	bl	800d7d0 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 801407e:	4986      	ldr	r1, [pc, #536]	; (8014298 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 8014080:	4886      	ldr	r0, [pc, #536]	; (801429c <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 8014082:	f7f0 fd81 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 8014086:	4b86      	ldr	r3, [pc, #536]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8014088:	4a86      	ldr	r2, [pc, #536]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 801408a:	2151      	movs	r1, #81	; 0x51
 801408c:	4886      	ldr	r0, [pc, #536]	; (80142a8 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 801408e:	f7fc f92b 	bl	80102e8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 8014092:	4b83      	ldr	r3, [pc, #524]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8014094:	4a85      	ldr	r2, [pc, #532]	; (80142ac <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 8014096:	2152      	movs	r1, #82	; 0x52
 8014098:	4885      	ldr	r0, [pc, #532]	; (80142b0 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 801409a:	f7fc f925 	bl	80102e8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 801409e:	4b80      	ldr	r3, [pc, #512]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 80140a0:	4a84      	ldr	r2, [pc, #528]	; (80142b4 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 80140a2:	2153      	movs	r1, #83	; 0x53
 80140a4:	4884      	ldr	r0, [pc, #528]	; (80142b8 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 80140a6:	f7fc f91f 	bl	80102e8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80140aa:	4b84      	ldr	r3, [pc, #528]	; (80142bc <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	4b84      	ldr	r3, [pc, #528]	; (80142c0 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 80140b0:	4a84      	ldr	r2, [pc, #528]	; (80142c4 <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 80140b2:	2154      	movs	r1, #84	; 0x54
 80140b4:	4884      	ldr	r0, [pc, #528]	; (80142c8 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 80140b6:	f7fc f941 	bl	801033c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
 80140ba:	e107      	b.n	80142cc <_Z41__static_initialization_and_destruction_0ii+0x4e4>
 80140bc:	240001dc 	.word	0x240001dc
 80140c0:	240018a0 	.word	0x240018a0
 80140c4:	240004d4 	.word	0x240004d4
 80140c8:	240001fc 	.word	0x240001fc
 80140cc:	24000594 	.word	0x24000594
 80140d0:	24000254 	.word	0x24000254
 80140d4:	240018ec 	.word	0x240018ec
 80140d8:	24000654 	.word	0x24000654
 80140dc:	2400025c 	.word	0x2400025c
 80140e0:	24000714 	.word	0x24000714
 80140e4:	24000274 	.word	0x24000274
 80140e8:	240007d4 	.word	0x240007d4
 80140ec:	2400027c 	.word	0x2400027c
 80140f0:	24000894 	.word	0x24000894
 80140f4:	240002a4 	.word	0x240002a4
 80140f8:	24000954 	.word	0x24000954
 80140fc:	240002ac 	.word	0x240002ac
 8014100:	24000a14 	.word	0x24000a14
 8014104:	24000304 	.word	0x24000304
 8014108:	24001a68 	.word	0x24001a68
 801410c:	24000ad4 	.word	0x24000ad4
 8014110:	240003b4 	.word	0x240003b4
 8014114:	24001938 	.word	0x24001938
 8014118:	24000b94 	.word	0x24000b94
 801411c:	240003bc 	.word	0x240003bc
 8014120:	24000c54 	.word	0x24000c54
 8014124:	240003c4 	.word	0x240003c4
 8014128:	24000d14 	.word	0x24000d14
 801412c:	240003cc 	.word	0x240003cc
 8014130:	24000dd4 	.word	0x24000dd4
 8014134:	2400041c 	.word	0x2400041c
 8014138:	24001854 	.word	0x24001854
 801413c:	24000e94 	.word	0x24000e94
 8014140:	2400042c 	.word	0x2400042c
 8014144:	24000f54 	.word	0x24000f54
 8014148:	2400043c 	.word	0x2400043c
 801414c:	24001014 	.word	0x24001014
 8014150:	24000444 	.word	0x24000444
 8014154:	240010d4 	.word	0x240010d4
 8014158:	240002dc 	.word	0x240002dc
 801415c:	24001194 	.word	0x24001194
 8014160:	240002e4 	.word	0x240002e4
 8014164:	240011a0 	.word	0x240011a0
 8014168:	240002ec 	.word	0x240002ec
 801416c:	240011ac 	.word	0x240011ac
 8014170:	24000204 	.word	0x24000204
 8014174:	240019d0 	.word	0x240019d0
 8014178:	240016cc 	.word	0x240016cc
 801417c:	240011b8 	.word	0x240011b8
 8014180:	2400045c 	.word	0x2400045c
 8014184:	24001c7c 	.word	0x24001c7c
 8014188:	40533333 	.word	0x40533333
 801418c:	240011d0 	.word	0x240011d0
 8014190:	24000454 	.word	0x24000454
 8014194:	240011e8 	.word	0x240011e8
 8014198:	240001d4 	.word	0x240001d4
 801419c:	24001984 	.word	0x24001984
 80141a0:	24001200 	.word	0x24001200
 80141a4:	240001e4 	.word	0x240001e4
 80141a8:	24001218 	.word	0x24001218
 80141ac:	240001ec 	.word	0x240001ec
 80141b0:	24001230 	.word	0x24001230
 80141b4:	2400030c 	.word	0x2400030c
 80141b8:	24001248 	.word	0x24001248
 80141bc:	24001260 	.word	0x24001260
 80141c0:	24000314 	.word	0x24000314
 80141c4:	24001278 	.word	0x24001278
 80141c8:	2400031c 	.word	0x2400031c
 80141cc:	24001290 	.word	0x24001290
 80141d0:	24000464 	.word	0x24000464
 80141d4:	240012a8 	.word	0x240012a8
 80141d8:	240004bc 	.word	0x240004bc
 80141dc:	24001cc8 	.word	0x24001cc8
 80141e0:	240012c0 	.word	0x240012c0
 80141e4:	240004b4 	.word	0x240004b4
 80141e8:	240012d8 	.word	0x240012d8
 80141ec:	240002c4 	.word	0x240002c4
 80141f0:	24001ab4 	.word	0x24001ab4
 80141f4:	240012f0 	.word	0x240012f0
 80141f8:	240004c4 	.word	0x240004c4
 80141fc:	24001308 	.word	0x24001308
 8014200:	2400046c 	.word	0x2400046c
 8014204:	24001320 	.word	0x24001320
 8014208:	240004ac 	.word	0x240004ac
 801420c:	24001338 	.word	0x24001338
 8014210:	24000324 	.word	0x24000324
 8014214:	24001350 	.word	0x24001350
 8014218:	2400032c 	.word	0x2400032c
 801421c:	24001358 	.word	0x24001358
 8014220:	24000334 	.word	0x24000334
 8014224:	24001360 	.word	0x24001360
 8014228:	2400033c 	.word	0x2400033c
 801422c:	24001368 	.word	0x24001368
 8014230:	24000344 	.word	0x24000344
 8014234:	24001370 	.word	0x24001370
 8014238:	2400034c 	.word	0x2400034c
 801423c:	24001378 	.word	0x24001378
 8014240:	24000484 	.word	0x24000484
 8014244:	24001380 	.word	0x24001380
 8014248:	2400048c 	.word	0x2400048c
 801424c:	24001388 	.word	0x24001388
 8014250:	2400028c 	.word	0x2400028c
 8014254:	24001390 	.word	0x24001390
 8014258:	2400029c 	.word	0x2400029c
 801425c:	24001398 	.word	0x24001398
 8014260:	24000394 	.word	0x24000394
 8014264:	240013a0 	.word	0x240013a0
 8014268:	24001a1c 	.word	0x24001a1c
 801426c:	240013a8 	.word	0x240013a8
 8014270:	24001b00 	.word	0x24001b00
 8014274:	240013c8 	.word	0x240013c8
 8014278:	24001b4c 	.word	0x24001b4c
 801427c:	240013e8 	.word	0x240013e8
 8014280:	24001b98 	.word	0x24001b98
 8014284:	24001408 	.word	0x24001408
 8014288:	24001be4 	.word	0x24001be4
 801428c:	24001428 	.word	0x24001428
 8014290:	24001c30 	.word	0x24001c30
 8014294:	24001448 	.word	0x24001448
 8014298:	240017b4 	.word	0x240017b4
 801429c:	24001468 	.word	0x24001468
 80142a0:	24001538 	.word	0x24001538
 80142a4:	0800e40d 	.word	0x0800e40d
 80142a8:	24001548 	.word	0x24001548
 80142ac:	0800e345 	.word	0x0800e345
 80142b0:	24001560 	.word	0x24001560
 80142b4:	0800e3a9 	.word	0x0800e3a9
 80142b8:	24001578 	.word	0x24001578
 80142bc:	24001542 	.word	0x24001542
 80142c0:	24001540 	.word	0x24001540
 80142c4:	0800e485 	.word	0x0800e485
 80142c8:	24001590 	.word	0x24001590
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80142cc:	4b44      	ldr	r3, [pc, #272]	; (80143e0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80142ce:	9300      	str	r3, [sp, #0]
 80142d0:	4b44      	ldr	r3, [pc, #272]	; (80143e4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80142d2:	4a45      	ldr	r2, [pc, #276]	; (80143e8 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80142d4:	2155      	movs	r1, #85	; 0x55
 80142d6:	4845      	ldr	r0, [pc, #276]	; (80143ec <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80142d8:	f7fc f830 	bl	801033c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 80142dc:	4b40      	ldr	r3, [pc, #256]	; (80143e0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	4b40      	ldr	r3, [pc, #256]	; (80143e4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80142e2:	4a43      	ldr	r2, [pc, #268]	; (80143f0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80142e4:	2156      	movs	r1, #86	; 0x56
 80142e6:	4843      	ldr	r0, [pc, #268]	; (80143f4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80142e8:	f7fc f828 	bl	801033c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 80142ec:	4b42      	ldr	r3, [pc, #264]	; (80143f8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	4b42      	ldr	r3, [pc, #264]	; (80143fc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80142f2:	4a43      	ldr	r2, [pc, #268]	; (8014400 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80142f4:	2158      	movs	r1, #88	; 0x58
 80142f6:	4843      	ldr	r0, [pc, #268]	; (8014404 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80142f8:	f7fc f84c 	bl	8010394 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 80142fc:	4b3e      	ldr	r3, [pc, #248]	; (80143f8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	4b3e      	ldr	r3, [pc, #248]	; (80143fc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8014302:	4a3f      	ldr	r2, [pc, #252]	; (8014400 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8014304:	2157      	movs	r1, #87	; 0x57
 8014306:	4840      	ldr	r0, [pc, #256]	; (8014408 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8014308:	f7fc f844 	bl	8010394 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 801430c:	4b3f      	ldr	r3, [pc, #252]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x624>)
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	4b3f      	ldr	r3, [pc, #252]	; (8014410 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 8014312:	4a40      	ldr	r2, [pc, #256]	; (8014414 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8014314:	210a      	movs	r1, #10
 8014316:	4840      	ldr	r0, [pc, #256]	; (8014418 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8014318:	f7fc f868 	bl	80103ec <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 801431c:	4b3f      	ldr	r3, [pc, #252]	; (801441c <_Z41__static_initialization_and_destruction_0ii+0x634>)
 801431e:	4a40      	ldr	r2, [pc, #256]	; (8014420 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8014320:	2159      	movs	r1, #89	; 0x59
 8014322:	4840      	ldr	r0, [pc, #256]	; (8014424 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8014324:	f7fb ffe0 	bl	80102e8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8014328:	4a3f      	ldr	r2, [pc, #252]	; (8014428 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 801432a:	4940      	ldr	r1, [pc, #256]	; (801442c <_Z41__static_initialization_and_destruction_0ii+0x644>)
 801432c:	4840      	ldr	r0, [pc, #256]	; (8014430 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 801432e:	f7f9 fdd7 	bl	800dee0 <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 8014332:	4a3d      	ldr	r2, [pc, #244]	; (8014428 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014334:	493f      	ldr	r1, [pc, #252]	; (8014434 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8014336:	4840      	ldr	r0, [pc, #256]	; (8014438 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8014338:	f7f9 fdd2 	bl	800dee0 <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 801433c:	4a3a      	ldr	r2, [pc, #232]	; (8014428 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 801433e:	493f      	ldr	r1, [pc, #252]	; (801443c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8014340:	483f      	ldr	r0, [pc, #252]	; (8014440 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8014342:	f7f9 fdcd 	bl	800dee0 <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 8014346:	4a38      	ldr	r2, [pc, #224]	; (8014428 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014348:	493e      	ldr	r1, [pc, #248]	; (8014444 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 801434a:	483f      	ldr	r0, [pc, #252]	; (8014448 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 801434c:	f7f9 fdc8 	bl	800dee0 <_ZN6StreamC1EP5TimerP3Can>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d140      	bne.n	80143d8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801435c:	4293      	cmp	r3, r2
 801435e:	d13b      	bne.n	80143d8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 8014360:	4839      	ldr	r0, [pc, #228]	; (8014448 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8014362:	f7ff fd17 	bl	8013d94 <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 8014366:	4836      	ldr	r0, [pc, #216]	; (8014440 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8014368:	f7ff fd14 	bl	8013d94 <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 801436c:	4832      	ldr	r0, [pc, #200]	; (8014438 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 801436e:	f7ff fd11 	bl	8013d94 <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 8014372:	482f      	ldr	r0, [pc, #188]	; (8014430 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8014374:	f7ff fd0e 	bl	8013d94 <_ZN6StreamD1Ev>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8014378:	482a      	ldr	r0, [pc, #168]	; (8014424 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 801437a:	f7ff fd19 	bl	8013db0 <_ZN6PacketD1Ev>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 801437e:	4826      	ldr	r0, [pc, #152]	; (8014418 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8014380:	f7ff fd16 	bl	8013db0 <_ZN6PacketD1Ev>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 8014384:	4820      	ldr	r0, [pc, #128]	; (8014408 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8014386:	f7ff fd13 	bl	8013db0 <_ZN6PacketD1Ev>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 801438a:	481e      	ldr	r0, [pc, #120]	; (8014404 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801438c:	f7ff fd10 	bl	8013db0 <_ZN6PacketD1Ev>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 8014390:	4818      	ldr	r0, [pc, #96]	; (80143f4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8014392:	f7ff fd0d 	bl	8013db0 <_ZN6PacketD1Ev>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 8014396:	4815      	ldr	r0, [pc, #84]	; (80143ec <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8014398:	f7ff fd0a 	bl	8013db0 <_ZN6PacketD1Ev>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 801439c:	482b      	ldr	r0, [pc, #172]	; (801444c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 801439e:	f7ff fd07 	bl	8013db0 <_ZN6PacketD1Ev>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80143a2:	482b      	ldr	r0, [pc, #172]	; (8014450 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80143a4:	f7ff fd04 	bl	8013db0 <_ZN6PacketD1Ev>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80143a8:	482a      	ldr	r0, [pc, #168]	; (8014454 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80143aa:	f7ff fd01 	bl	8013db0 <_ZN6PacketD1Ev>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80143ae:	482a      	ldr	r0, [pc, #168]	; (8014458 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80143b0:	f7ff fcfe 	bl	8013db0 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 80143b4:	4823      	ldr	r0, [pc, #140]	; (8014444 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80143b6:	f7ff fd09 	bl	8013dcc <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 80143ba:	4820      	ldr	r0, [pc, #128]	; (801443c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80143bc:	f7ff fd06 	bl	8013dcc <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 80143c0:	481c      	ldr	r0, [pc, #112]	; (8014434 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80143c2:	f7ff fd03 	bl	8013dcc <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 80143c6:	4819      	ldr	r0, [pc, #100]	; (801442c <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80143c8:	f7ff fd00 	bl	8013dcc <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 80143cc:	4823      	ldr	r0, [pc, #140]	; (801445c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80143ce:	f7ff fcfd 	bl	8013dcc <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 80143d2:	4823      	ldr	r0, [pc, #140]	; (8014460 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80143d4:	f7ff fcfa 	bl	8013dcc <_ZN5TimerD1Ev>
 80143d8:	bf00      	nop
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	24001542 	.word	0x24001542
 80143e4:	24001540 	.word	0x24001540
 80143e8:	0800e4d5 	.word	0x0800e4d5
 80143ec:	240015a8 	.word	0x240015a8
 80143f0:	0800e525 	.word	0x0800e525
 80143f4:	240015c0 	.word	0x240015c0
 80143f8:	2400153c 	.word	0x2400153c
 80143fc:	24001539 	.word	0x24001539
 8014400:	0800e575 	.word	0x0800e575
 8014404:	240015d8 	.word	0x240015d8
 8014408:	240015f0 	.word	0x240015f0
 801440c:	24001546 	.word	0x24001546
 8014410:	24001545 	.word	0x24001545
 8014414:	0800e689 	.word	0x0800e689
 8014418:	24001608 	.word	0x24001608
 801441c:	24001544 	.word	0x24001544
 8014420:	0800e649 	.word	0x0800e649
 8014424:	24001620 	.word	0x24001620
 8014428:	24001468 	.word	0x24001468
 801442c:	240013e8 	.word	0x240013e8
 8014430:	24001638 	.word	0x24001638
 8014434:	24001408 	.word	0x24001408
 8014438:	2400165c 	.word	0x2400165c
 801443c:	24001428 	.word	0x24001428
 8014440:	24001680 	.word	0x24001680
 8014444:	24001448 	.word	0x24001448
 8014448:	240016a4 	.word	0x240016a4
 801444c:	24001590 	.word	0x24001590
 8014450:	24001578 	.word	0x24001578
 8014454:	24001560 	.word	0x24001560
 8014458:	24001548 	.word	0x24001548
 801445c:	240013c8 	.word	0x240013c8
 8014460:	240013a8 	.word	0x240013a8

08014464 <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	683a      	ldr	r2, [r7, #0]
 8014474:	6812      	ldr	r2, [r2, #0]
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	bf00      	nop
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr

08014484 <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	6039      	str	r1, [r7, #0]
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	bf00      	nop
 801449a:	370c      	adds	r7, #12
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr

080144a4 <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	2304      	movs	r3, #4
 80144ae:	4618      	mov	r0, r3
 80144b0:	370c      	adds	r7, #12
 80144b2:	46bd      	mov	sp, r7
 80144b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b8:	4770      	bx	lr

080144ba <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80144ba:	b480      	push	{r7}
 80144bc:	b083      	sub	sp, #12
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
 80144c2:	6039      	str	r1, [r7, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	683a      	ldr	r2, [r7, #0]
 80144ca:	8812      	ldrh	r2, [r2, #0]
 80144cc:	801a      	strh	r2, [r3, #0]
 80144ce:	bf00      	nop
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr

080144da <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80144da:	b480      	push	{r7}
 80144dc:	b083      	sub	sp, #12
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
 80144e2:	6039      	str	r1, [r7, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	881a      	ldrh	r2, [r3, #0]
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	801a      	strh	r2, [r3, #0]
 80144ee:	bf00      	nop
 80144f0:	370c      	adds	r7, #12
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr

080144fa <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80144fa:	b480      	push	{r7}
 80144fc:	b083      	sub	sp, #12
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	2302      	movs	r3, #2
 8014504:	4618      	mov	r0, r3
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	683a      	ldr	r2, [r7, #0]
 8014520:	7812      	ldrb	r2, [r2, #0]
 8014522:	701a      	strb	r2, [r3, #0]
 8014524:	bf00      	nop
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	781a      	ldrb	r2, [r3, #0]
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	701a      	strb	r2, [r3, #0]
 8014544:	bf00      	nop
 8014546:	370c      	adds	r7, #12
 8014548:	46bd      	mov	sp, r7
 801454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454e:	4770      	bx	lr

08014550 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	2301      	movs	r3, #1
 801455a:	4618      	mov	r0, r3
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <_GLOBAL__sub_I_data_adc_1>:
 8014566:	b580      	push	{r7, lr}
 8014568:	af00      	add	r7, sp, #0
 801456a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801456e:	2001      	movs	r0, #1
 8014570:	f7ff fc3a 	bl	8013de8 <_Z41__static_initialization_and_destruction_0ii>
 8014574:	bd80      	pop	{r7, pc}

08014576 <_GLOBAL__sub_D_data_adc_1>:
 8014576:	b580      	push	{r7, lr}
 8014578:	af00      	add	r7, sp, #0
 801457a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801457e:	2000      	movs	r0, #0
 8014580:	f7ff fc32 	bl	8013de8 <_Z41__static_initialization_and_destruction_0ii>
 8014584:	bd80      	pop	{r7, pc}
	...

08014588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801458e:	4b1b      	ldr	r3, [pc, #108]	; (80145fc <HAL_MspInit+0x74>)
 8014590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014594:	4a19      	ldr	r2, [pc, #100]	; (80145fc <HAL_MspInit+0x74>)
 8014596:	f043 0302 	orr.w	r3, r3, #2
 801459a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801459e:	4b17      	ldr	r3, [pc, #92]	; (80145fc <HAL_MspInit+0x74>)
 80145a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80145a4:	f003 0302 	and.w	r3, r3, #2
 80145a8:	607b      	str	r3, [r7, #4]
 80145aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80145ac:	2200      	movs	r2, #0
 80145ae:	2101      	movs	r1, #1
 80145b0:	f06f 000b 	mvn.w	r0, #11
 80145b4:	f003 f893 	bl	80176de <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80145b8:	2200      	movs	r2, #0
 80145ba:	2101      	movs	r1, #1
 80145bc:	f06f 000a 	mvn.w	r0, #10
 80145c0:	f003 f88d 	bl	80176de <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80145c4:	2200      	movs	r2, #0
 80145c6:	2101      	movs	r1, #1
 80145c8:	f06f 0009 	mvn.w	r0, #9
 80145cc:	f003 f887 	bl	80176de <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80145d0:	2200      	movs	r2, #0
 80145d2:	2101      	movs	r1, #1
 80145d4:	f06f 0004 	mvn.w	r0, #4
 80145d8:	f003 f881 	bl	80176de <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80145dc:	2200      	movs	r2, #0
 80145de:	2101      	movs	r1, #1
 80145e0:	f06f 0003 	mvn.w	r0, #3
 80145e4:	f003 f87b 	bl	80176de <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80145e8:	2200      	movs	r2, #0
 80145ea:	2101      	movs	r1, #1
 80145ec:	f06f 0001 	mvn.w	r0, #1
 80145f0:	f003 f875 	bl	80176de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80145f4:	bf00      	nop
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	58024400 	.word	0x58024400

08014600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b08a      	sub	sp, #40	; 0x28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014608:	f107 0314 	add.w	r3, r7, #20
 801460c:	2200      	movs	r2, #0
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	605a      	str	r2, [r3, #4]
 8014612:	609a      	str	r2, [r3, #8]
 8014614:	60da      	str	r2, [r3, #12]
 8014616:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a34      	ldr	r2, [pc, #208]	; (80146f0 <HAL_ADC_MspInit+0xf0>)
 801461e:	4293      	cmp	r3, r2
 8014620:	d161      	bne.n	80146e6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8014622:	4b34      	ldr	r3, [pc, #208]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 8014624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014628:	4a32      	ldr	r2, [pc, #200]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 801462a:	f043 0320 	orr.w	r3, r3, #32
 801462e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014632:	4b30      	ldr	r3, [pc, #192]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 8014634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014638:	f003 0320 	and.w	r3, r3, #32
 801463c:	613b      	str	r3, [r7, #16]
 801463e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014640:	4b2c      	ldr	r3, [pc, #176]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 8014642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014646:	4a2b      	ldr	r2, [pc, #172]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 8014648:	f043 0301 	orr.w	r3, r3, #1
 801464c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014650:	4b28      	ldr	r3, [pc, #160]	; (80146f4 <HAL_ADC_MspInit+0xf4>)
 8014652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014656:	f003 0301 	and.w	r3, r3, #1
 801465a:	60fb      	str	r3, [r7, #12]
 801465c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801465e:	2340      	movs	r3, #64	; 0x40
 8014660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014662:	2303      	movs	r3, #3
 8014664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014666:	2300      	movs	r3, #0
 8014668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801466a:	f107 0314 	add.w	r3, r7, #20
 801466e:	4619      	mov	r1, r3
 8014670:	4821      	ldr	r0, [pc, #132]	; (80146f8 <HAL_ADC_MspInit+0xf8>)
 8014672:	f006 fa9d 	bl	801abb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8014676:	4b21      	ldr	r3, [pc, #132]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 8014678:	4a21      	ldr	r2, [pc, #132]	; (8014700 <HAL_ADC_MspInit+0x100>)
 801467a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801467c:	4b1f      	ldr	r3, [pc, #124]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 801467e:	2209      	movs	r2, #9
 8014680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014682:	4b1e      	ldr	r3, [pc, #120]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 8014684:	2200      	movs	r2, #0
 8014686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014688:	4b1c      	ldr	r3, [pc, #112]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 801468a:	2200      	movs	r2, #0
 801468c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801468e:	4b1b      	ldr	r3, [pc, #108]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 8014690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014694:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014696:	4b19      	ldr	r3, [pc, #100]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 8014698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801469c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801469e:	4b17      	ldr	r3, [pc, #92]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80146a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80146a6:	4b15      	ldr	r3, [pc, #84]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80146ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80146ae:	4b13      	ldr	r3, [pc, #76]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146b0:	2200      	movs	r2, #0
 80146b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80146b4:	4b11      	ldr	r3, [pc, #68]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80146ba:	4810      	ldr	r0, [pc, #64]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146bc:	f003 f848 	bl	8017750 <HAL_DMA_Init>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d001      	beq.n	80146ca <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80146c6:	f7fb fbe5 	bl	800fe94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4a0b      	ldr	r2, [pc, #44]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146ce:	659a      	str	r2, [r3, #88]	; 0x58
 80146d0:	4a0a      	ldr	r2, [pc, #40]	; (80146fc <HAL_ADC_MspInit+0xfc>)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80146d6:	2200      	movs	r2, #0
 80146d8:	2101      	movs	r1, #1
 80146da:	2012      	movs	r0, #18
 80146dc:	f002 ffff 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80146e0:	2012      	movs	r0, #18
 80146e2:	f003 f816 	bl	8017712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80146e6:	bf00      	nop
 80146e8:	3728      	adds	r7, #40	; 0x28
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	40022000 	.word	0x40022000
 80146f4:	58024400 	.word	0x58024400
 80146f8:	58020000 	.word	0x58020000
 80146fc:	2400173c 	.word	0x2400173c
 8014700:	40020028 	.word	0x40020028

08014704 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b08a      	sub	sp, #40	; 0x28
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801470c:	f107 0314 	add.w	r3, r7, #20
 8014710:	2200      	movs	r2, #0
 8014712:	601a      	str	r2, [r3, #0]
 8014714:	605a      	str	r2, [r3, #4]
 8014716:	609a      	str	r2, [r3, #8]
 8014718:	60da      	str	r2, [r3, #12]
 801471a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	4a22      	ldr	r2, [pc, #136]	; (80147ac <HAL_FDCAN_MspInit+0xa8>)
 8014722:	4293      	cmp	r3, r2
 8014724:	d13e      	bne.n	80147a4 <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8014726:	4b22      	ldr	r3, [pc, #136]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 8014728:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801472c:	4a20      	ldr	r2, [pc, #128]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 801472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014732:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014736:	4b1e      	ldr	r3, [pc, #120]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 8014738:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014740:	613b      	str	r3, [r7, #16]
 8014742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014744:	4b1a      	ldr	r3, [pc, #104]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 8014746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801474a:	4a19      	ldr	r2, [pc, #100]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 801474c:	f043 0301 	orr.w	r3, r3, #1
 8014750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014754:	4b16      	ldr	r3, [pc, #88]	; (80147b0 <HAL_FDCAN_MspInit+0xac>)
 8014756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801475a:	f003 0301 	and.w	r3, r3, #1
 801475e:	60fb      	str	r3, [r7, #12]
 8014760:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014768:	2302      	movs	r3, #2
 801476a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801476c:	2300      	movs	r3, #0
 801476e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014770:	2300      	movs	r3, #0
 8014772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8014774:	2309      	movs	r3, #9
 8014776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014778:	f107 0314 	add.w	r3, r7, #20
 801477c:	4619      	mov	r1, r3
 801477e:	480d      	ldr	r0, [pc, #52]	; (80147b4 <HAL_FDCAN_MspInit+0xb0>)
 8014780:	f006 fa16 	bl	801abb0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8014784:	2200      	movs	r2, #0
 8014786:	2101      	movs	r1, #1
 8014788:	2013      	movs	r0, #19
 801478a:	f002 ffa8 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801478e:	2013      	movs	r0, #19
 8014790:	f002 ffbf 	bl	8017712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 8014794:	2200      	movs	r2, #0
 8014796:	2101      	movs	r1, #1
 8014798:	2015      	movs	r0, #21
 801479a:	f002 ffa0 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 801479e:	2015      	movs	r0, #21
 80147a0:	f002 ffb7 	bl	8017712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80147a4:	bf00      	nop
 80147a6:	3728      	adds	r7, #40	; 0x28
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	4000a000 	.word	0x4000a000
 80147b0:	58024400 	.word	0x58024400
 80147b4:	58020000 	.word	0x58020000

080147b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b09c      	sub	sp, #112	; 0x70
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80147c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80147c4:	2200      	movs	r2, #0
 80147c6:	601a      	str	r2, [r3, #0]
 80147c8:	605a      	str	r2, [r3, #4]
 80147ca:	609a      	str	r2, [r3, #8]
 80147cc:	60da      	str	r2, [r3, #12]
 80147ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4aac      	ldr	r2, [pc, #688]	; (8014a88 <HAL_TIM_Base_MspInit+0x2d0>)
 80147d6:	4293      	cmp	r3, r2
 80147d8:	d137      	bne.n	801484a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80147da:	4bac      	ldr	r3, [pc, #688]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80147dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80147e0:	4aaa      	ldr	r2, [pc, #680]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80147e2:	f043 0301 	orr.w	r3, r3, #1
 80147e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80147ea:	4ba8      	ldr	r3, [pc, #672]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80147ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80147f0:	f003 0301 	and.w	r3, r3, #1
 80147f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80147f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80147f8:	4ba4      	ldr	r3, [pc, #656]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80147fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147fe:	4aa3      	ldr	r2, [pc, #652]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014800:	f043 0310 	orr.w	r3, r3, #16
 8014804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014808:	4ba0      	ldr	r3, [pc, #640]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801480a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801480e:	f003 0310 	and.w	r3, r3, #16
 8014812:	657b      	str	r3, [r7, #84]	; 0x54
 8014814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 8014816:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 801481a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801481c:	2302      	movs	r3, #2
 801481e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014820:	2302      	movs	r3, #2
 8014822:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014824:	2300      	movs	r3, #0
 8014826:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014828:	2301      	movs	r3, #1
 801482a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801482c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014830:	4619      	mov	r1, r3
 8014832:	4897      	ldr	r0, [pc, #604]	; (8014a90 <HAL_TIM_Base_MspInit+0x2d8>)
 8014834:	f006 f9bc 	bl	801abb0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8014838:	2200      	movs	r2, #0
 801483a:	2101      	movs	r1, #1
 801483c:	201b      	movs	r0, #27
 801483e:	f002 ff4e 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014842:	201b      	movs	r0, #27
 8014844:	f002 ff65 	bl	8017712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8014848:	e24b      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM2)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014852:	d166      	bne.n	8014922 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014854:	4b8d      	ldr	r3, [pc, #564]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801485a:	4a8c      	ldr	r2, [pc, #560]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801485c:	f043 0301 	orr.w	r3, r3, #1
 8014860:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014864:	4b89      	ldr	r3, [pc, #548]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801486a:	f003 0301 	and.w	r3, r3, #1
 801486e:	653b      	str	r3, [r7, #80]	; 0x50
 8014870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014872:	4b86      	ldr	r3, [pc, #536]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014878:	4a84      	ldr	r2, [pc, #528]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801487a:	f043 0301 	orr.w	r3, r3, #1
 801487e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014882:	4b82      	ldr	r3, [pc, #520]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014888:	f003 0301 	and.w	r3, r3, #1
 801488c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014890:	4b7e      	ldr	r3, [pc, #504]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014896:	4a7d      	ldr	r2, [pc, #500]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014898:	f043 0302 	orr.w	r3, r3, #2
 801489c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80148a0:	4b7a      	ldr	r3, [pc, #488]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80148a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80148a6:	f003 0302 	and.w	r3, r3, #2
 80148aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80148ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80148ae:	2302      	movs	r3, #2
 80148b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148b2:	2302      	movs	r3, #2
 80148b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148b6:	2300      	movs	r3, #0
 80148b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148ba:	2300      	movs	r3, #0
 80148bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80148be:	2301      	movs	r3, #1
 80148c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80148c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148c6:	4619      	mov	r1, r3
 80148c8:	4872      	ldr	r0, [pc, #456]	; (8014a94 <HAL_TIM_Base_MspInit+0x2dc>)
 80148ca:	f006 f971 	bl	801abb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_1A5_Pin;
 80148ce:	2320      	movs	r3, #32
 80148d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148d2:	2302      	movs	r3, #2
 80148d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80148d6:	2302      	movs	r3, #2
 80148d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148da:	2300      	movs	r3, #0
 80148dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80148de:	2301      	movs	r3, #1
 80148e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SENSOR_3V_1A5_GPIO_Port, &GPIO_InitStruct);
 80148e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148e6:	4619      	mov	r1, r3
 80148e8:	486a      	ldr	r0, [pc, #424]	; (8014a94 <HAL_TIM_Base_MspInit+0x2dc>)
 80148ea:	f006 f961 	bl	801abb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 80148ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80148f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148f4:	2302      	movs	r3, #2
 80148f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148f8:	2300      	movs	r3, #0
 80148fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148fc:	2300      	movs	r3, #0
 80148fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014900:	2301      	movs	r3, #1
 8014902:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014908:	4619      	mov	r1, r3
 801490a:	4863      	ldr	r0, [pc, #396]	; (8014a98 <HAL_TIM_Base_MspInit+0x2e0>)
 801490c:	f006 f950 	bl	801abb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8014910:	2200      	movs	r2, #0
 8014912:	2100      	movs	r1, #0
 8014914:	201c      	movs	r0, #28
 8014916:	f002 fee2 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801491a:	201c      	movs	r0, #28
 801491c:	f002 fef9 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014920:	e1df      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM3)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4a5d      	ldr	r2, [pc, #372]	; (8014a9c <HAL_TIM_Base_MspInit+0x2e4>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d136      	bne.n	801499a <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801492c:	4b57      	ldr	r3, [pc, #348]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801492e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014932:	4a56      	ldr	r2, [pc, #344]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014934:	f043 0302 	orr.w	r3, r3, #2
 8014938:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801493c:	4b53      	ldr	r3, [pc, #332]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801493e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014942:	f003 0302 	and.w	r3, r3, #2
 8014946:	647b      	str	r3, [r7, #68]	; 0x44
 8014948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801494a:	4b50      	ldr	r3, [pc, #320]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801494c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014950:	4a4e      	ldr	r2, [pc, #312]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014952:	f043 0302 	orr.w	r3, r3, #2
 8014956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801495a:	4b4c      	ldr	r3, [pc, #304]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 801495c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014960:	f003 0302 	and.w	r3, r3, #2
 8014964:	643b      	str	r3, [r7, #64]	; 0x40
 8014966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 8014968:	2333      	movs	r3, #51	; 0x33
 801496a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801496c:	2302      	movs	r3, #2
 801496e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014970:	2302      	movs	r3, #2
 8014972:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014974:	2300      	movs	r3, #0
 8014976:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014978:	2302      	movs	r3, #2
 801497a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801497c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014980:	4619      	mov	r1, r3
 8014982:	4845      	ldr	r0, [pc, #276]	; (8014a98 <HAL_TIM_Base_MspInit+0x2e0>)
 8014984:	f006 f914 	bl	801abb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8014988:	2200      	movs	r2, #0
 801498a:	2101      	movs	r1, #1
 801498c:	201d      	movs	r0, #29
 801498e:	f002 fea6 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8014992:	201d      	movs	r0, #29
 8014994:	f002 febd 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014998:	e1a3      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM4)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	4a40      	ldr	r2, [pc, #256]	; (8014aa0 <HAL_TIM_Base_MspInit+0x2e8>)
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d137      	bne.n	8014a14 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80149a4:	4b39      	ldr	r3, [pc, #228]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149aa:	4a38      	ldr	r2, [pc, #224]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149ac:	f043 0304 	orr.w	r3, r3, #4
 80149b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80149b4:	4b35      	ldr	r3, [pc, #212]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149ba:	f003 0304 	and.w	r3, r3, #4
 80149be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80149c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80149c2:	4b32      	ldr	r3, [pc, #200]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80149c8:	4a30      	ldr	r2, [pc, #192]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149ca:	f043 0308 	orr.w	r3, r3, #8
 80149ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80149d2:	4b2e      	ldr	r3, [pc, #184]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 80149d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80149d8:	f003 0308 	and.w	r3, r3, #8
 80149dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80149de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 80149e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80149e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149e6:	2302      	movs	r3, #2
 80149e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80149ee:	2300      	movs	r3, #0
 80149f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80149f2:	2302      	movs	r3, #2
 80149f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80149f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80149fa:	4619      	mov	r1, r3
 80149fc:	4829      	ldr	r0, [pc, #164]	; (8014aa4 <HAL_TIM_Base_MspInit+0x2ec>)
 80149fe:	f006 f8d7 	bl	801abb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8014a02:	2200      	movs	r2, #0
 8014a04:	2101      	movs	r1, #1
 8014a06:	201e      	movs	r0, #30
 8014a08:	f002 fe69 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8014a0c:	201e      	movs	r0, #30
 8014a0e:	f002 fe80 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014a12:	e166      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM5)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4a23      	ldr	r2, [pc, #140]	; (8014aa8 <HAL_TIM_Base_MspInit+0x2f0>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d117      	bne.n	8014a4e <HAL_TIM_Base_MspInit+0x296>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014a1e:	4b1b      	ldr	r3, [pc, #108]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a24:	4a19      	ldr	r2, [pc, #100]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a26:	f043 0308 	orr.w	r3, r3, #8
 8014a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a2e:	4b17      	ldr	r3, [pc, #92]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a34:	f003 0308 	and.w	r3, r3, #8
 8014a38:	637b      	str	r3, [r7, #52]	; 0x34
 8014a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	2101      	movs	r1, #1
 8014a40:	2032      	movs	r0, #50	; 0x32
 8014a42:	f002 fe4c 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8014a46:	2032      	movs	r0, #50	; 0x32
 8014a48:	f002 fe63 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014a4c:	e149      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM6)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	4a16      	ldr	r2, [pc, #88]	; (8014aac <HAL_TIM_Base_MspInit+0x2f4>)
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d12b      	bne.n	8014ab0 <HAL_TIM_Base_MspInit+0x2f8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8014a58:	4b0c      	ldr	r3, [pc, #48]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a5e:	4a0b      	ldr	r2, [pc, #44]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a60:	f043 0310 	orr.w	r3, r3, #16
 8014a64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a68:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <HAL_TIM_Base_MspInit+0x2d4>)
 8014a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a6e:	f003 0310 	and.w	r3, r3, #16
 8014a72:	633b      	str	r3, [r7, #48]	; 0x30
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8014a76:	2200      	movs	r2, #0
 8014a78:	2101      	movs	r1, #1
 8014a7a:	2036      	movs	r0, #54	; 0x36
 8014a7c:	f002 fe2f 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014a80:	2036      	movs	r0, #54	; 0x36
 8014a82:	f002 fe46 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014a86:	e12c      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
 8014a88:	40010000 	.word	0x40010000
 8014a8c:	58024400 	.word	0x58024400
 8014a90:	58021000 	.word	0x58021000
 8014a94:	58020000 	.word	0x58020000
 8014a98:	58020400 	.word	0x58020400
 8014a9c:	40000400 	.word	0x40000400
 8014aa0:	40000800 	.word	0x40000800
 8014aa4:	58020c00 	.word	0x58020c00
 8014aa8:	40000c00 	.word	0x40000c00
 8014aac:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM7)
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	4a8d      	ldr	r2, [pc, #564]	; (8014cec <HAL_TIM_Base_MspInit+0x534>)
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d117      	bne.n	8014aea <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014aba:	4b8d      	ldr	r3, [pc, #564]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ac0:	4a8b      	ldr	r2, [pc, #556]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014ac2:	f043 0320 	orr.w	r3, r3, #32
 8014ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014aca:	4b89      	ldr	r3, [pc, #548]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ad0:	f003 0320 	and.w	r3, r3, #32
 8014ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8014ad8:	2200      	movs	r2, #0
 8014ada:	2101      	movs	r1, #1
 8014adc:	2037      	movs	r0, #55	; 0x37
 8014ade:	f002 fdfe 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8014ae2:	2037      	movs	r0, #55	; 0x37
 8014ae4:	f002 fe15 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014ae8:	e0fb      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM8)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	4a81      	ldr	r2, [pc, #516]	; (8014cf4 <HAL_TIM_Base_MspInit+0x53c>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	d127      	bne.n	8014b44 <HAL_TIM_Base_MspInit+0x38c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014af4:	4b7e      	ldr	r3, [pc, #504]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014afa:	4a7d      	ldr	r2, [pc, #500]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014afc:	f043 0302 	orr.w	r3, r3, #2
 8014b00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b04:	4b7a      	ldr	r3, [pc, #488]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b0a:	f003 0302 	and.w	r3, r3, #2
 8014b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014b12:	2200      	movs	r2, #0
 8014b14:	2101      	movs	r1, #1
 8014b16:	202c      	movs	r0, #44	; 0x2c
 8014b18:	f002 fde1 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014b1c:	202c      	movs	r0, #44	; 0x2c
 8014b1e:	f002 fdf8 	bl	8017712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014b22:	2200      	movs	r2, #0
 8014b24:	2101      	movs	r1, #1
 8014b26:	202d      	movs	r0, #45	; 0x2d
 8014b28:	f002 fdd9 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014b2c:	202d      	movs	r0, #45	; 0x2d
 8014b2e:	f002 fdf0 	bl	8017712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8014b32:	2200      	movs	r2, #0
 8014b34:	2101      	movs	r1, #1
 8014b36:	202e      	movs	r0, #46	; 0x2e
 8014b38:	f002 fdd1 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8014b3c:	202e      	movs	r0, #46	; 0x2e
 8014b3e:	f002 fde8 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014b42:	e0ce      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM12)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	4a6b      	ldr	r2, [pc, #428]	; (8014cf8 <HAL_TIM_Base_MspInit+0x540>)
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d10f      	bne.n	8014b6e <HAL_TIM_Base_MspInit+0x3b6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014b4e:	4b68      	ldr	r3, [pc, #416]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b54:	4a66      	ldr	r2, [pc, #408]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014b5e:	4b64      	ldr	r3, [pc, #400]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b68:	627b      	str	r3, [r7, #36]	; 0x24
 8014b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014b6c:	e0b9      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM13)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4a62      	ldr	r2, [pc, #392]	; (8014cfc <HAL_TIM_Base_MspInit+0x544>)
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d117      	bne.n	8014ba8 <HAL_TIM_Base_MspInit+0x3f0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8014b78:	4b5d      	ldr	r3, [pc, #372]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b7e:	4a5c      	ldr	r2, [pc, #368]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014b88:	4b59      	ldr	r3, [pc, #356]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b92:	623b      	str	r3, [r7, #32]
 8014b94:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014b96:	2200      	movs	r2, #0
 8014b98:	2101      	movs	r1, #1
 8014b9a:	202c      	movs	r0, #44	; 0x2c
 8014b9c:	f002 fd9f 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014ba0:	202c      	movs	r0, #44	; 0x2c
 8014ba2:	f002 fdb6 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014ba6:	e09c      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM14)
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4a54      	ldr	r2, [pc, #336]	; (8014d00 <HAL_TIM_Base_MspInit+0x548>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d117      	bne.n	8014be2 <HAL_TIM_Base_MspInit+0x42a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8014bb2:	4b4f      	ldr	r3, [pc, #316]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014bb8:	4a4d      	ldr	r2, [pc, #308]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014bc2:	4b4b      	ldr	r3, [pc, #300]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bcc:	61fb      	str	r3, [r7, #28]
 8014bce:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	2101      	movs	r1, #1
 8014bd4:	202d      	movs	r0, #45	; 0x2d
 8014bd6:	f002 fd82 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014bda:	202d      	movs	r0, #45	; 0x2d
 8014bdc:	f002 fd99 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014be0:	e07f      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM15)
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	4a47      	ldr	r2, [pc, #284]	; (8014d04 <HAL_TIM_Base_MspInit+0x54c>)
 8014be8:	4293      	cmp	r3, r2
 8014bea:	d117      	bne.n	8014c1c <HAL_TIM_Base_MspInit+0x464>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8014bec:	4b40      	ldr	r3, [pc, #256]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bf2:	4a3f      	ldr	r2, [pc, #252]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014bf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014bfc:	4b3c      	ldr	r3, [pc, #240]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014c06:	61bb      	str	r3, [r7, #24]
 8014c08:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	2101      	movs	r1, #1
 8014c0e:	2074      	movs	r0, #116	; 0x74
 8014c10:	f002 fd65 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014c14:	2074      	movs	r0, #116	; 0x74
 8014c16:	f002 fd7c 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014c1a:	e062      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM16)
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a39      	ldr	r2, [pc, #228]	; (8014d08 <HAL_TIM_Base_MspInit+0x550>)
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d117      	bne.n	8014c56 <HAL_TIM_Base_MspInit+0x49e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8014c26:	4b32      	ldr	r3, [pc, #200]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014c2c:	4a30      	ldr	r2, [pc, #192]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014c36:	4b2e      	ldr	r3, [pc, #184]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c40:	617b      	str	r3, [r7, #20]
 8014c42:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8014c44:	2200      	movs	r2, #0
 8014c46:	2101      	movs	r1, #1
 8014c48:	2075      	movs	r0, #117	; 0x75
 8014c4a:	f002 fd48 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8014c4e:	2075      	movs	r0, #117	; 0x75
 8014c50:	f002 fd5f 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014c54:	e045      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM17)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4a2c      	ldr	r2, [pc, #176]	; (8014d0c <HAL_TIM_Base_MspInit+0x554>)
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	d117      	bne.n	8014c90 <HAL_TIM_Base_MspInit+0x4d8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8014c60:	4b23      	ldr	r3, [pc, #140]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014c66:	4a22      	ldr	r2, [pc, #136]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014c6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014c70:	4b1f      	ldr	r3, [pc, #124]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014c7a:	613b      	str	r3, [r7, #16]
 8014c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 8014c7e:	2200      	movs	r2, #0
 8014c80:	2101      	movs	r1, #1
 8014c82:	2076      	movs	r0, #118	; 0x76
 8014c84:	f002 fd2b 	bl	80176de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8014c88:	2076      	movs	r0, #118	; 0x76
 8014c8a:	f002 fd42 	bl	8017712 <HAL_NVIC_EnableIRQ>
}
 8014c8e:	e028      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM23)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	4a1e      	ldr	r2, [pc, #120]	; (8014d10 <HAL_TIM_Base_MspInit+0x558>)
 8014c96:	4293      	cmp	r3, r2
 8014c98:	d10f      	bne.n	8014cba <HAL_TIM_Base_MspInit+0x502>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8014c9a:	4b15      	ldr	r3, [pc, #84]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014c9c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014ca0:	4a13      	ldr	r2, [pc, #76]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014ca6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014caa:	4b11      	ldr	r3, [pc, #68]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014cac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014cb4:	60fb      	str	r3, [r7, #12]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
}
 8014cb8:	e013      	b.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM24)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4a15      	ldr	r2, [pc, #84]	; (8014d14 <HAL_TIM_Base_MspInit+0x55c>)
 8014cc0:	4293      	cmp	r3, r2
 8014cc2:	d10e      	bne.n	8014ce2 <HAL_TIM_Base_MspInit+0x52a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8014cc4:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014cc6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014cca:	4a09      	ldr	r2, [pc, #36]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014cd0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <HAL_TIM_Base_MspInit+0x538>)
 8014cd6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014cde:	60bb      	str	r3, [r7, #8]
 8014ce0:	68bb      	ldr	r3, [r7, #8]
}
 8014ce2:	bf00      	nop
 8014ce4:	3770      	adds	r7, #112	; 0x70
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	40001400 	.word	0x40001400
 8014cf0:	58024400 	.word	0x58024400
 8014cf4:	40010400 	.word	0x40010400
 8014cf8:	40001800 	.word	0x40001800
 8014cfc:	40001c00 	.word	0x40001c00
 8014d00:	40002000 	.word	0x40002000
 8014d04:	40014000 	.word	0x40014000
 8014d08:	40014400 	.word	0x40014400
 8014d0c:	40014800 	.word	0x40014800
 8014d10:	4000e000 	.word	0x4000e000
 8014d14:	4000e400 	.word	0x4000e400

08014d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b08c      	sub	sp, #48	; 0x30
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d20:	f107 031c 	add.w	r3, r7, #28
 8014d24:	2200      	movs	r2, #0
 8014d26:	601a      	str	r2, [r3, #0]
 8014d28:	605a      	str	r2, [r3, #4]
 8014d2a:	609a      	str	r2, [r3, #8]
 8014d2c:	60da      	str	r2, [r3, #12]
 8014d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	4a66      	ldr	r2, [pc, #408]	; (8014ed0 <HAL_TIM_MspPostInit+0x1b8>)
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d11f      	bne.n	8014d7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d3a:	4b66      	ldr	r3, [pc, #408]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d40:	4a64      	ldr	r2, [pc, #400]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d42:	f043 0301 	orr.w	r3, r3, #1
 8014d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d4a:	4b62      	ldr	r3, [pc, #392]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d50:	f003 0301 	and.w	r3, r3, #1
 8014d54:	61bb      	str	r3, [r7, #24]
 8014d56:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014d58:	230d      	movs	r3, #13
 8014d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d5c:	2302      	movs	r3, #2
 8014d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d64:	2300      	movs	r3, #0
 8014d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014d68:	2302      	movs	r3, #2
 8014d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d6c:	f107 031c 	add.w	r3, r7, #28
 8014d70:	4619      	mov	r1, r3
 8014d72:	4859      	ldr	r0, [pc, #356]	; (8014ed8 <HAL_TIM_MspPostInit+0x1c0>)
 8014d74:	f005 ff1c 	bl	801abb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8014d78:	e0a5      	b.n	8014ec6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4a57      	ldr	r2, [pc, #348]	; (8014edc <HAL_TIM_MspPostInit+0x1c4>)
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d130      	bne.n	8014de6 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014d84:	4b53      	ldr	r3, [pc, #332]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d8a:	4a52      	ldr	r2, [pc, #328]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d8c:	f043 0304 	orr.w	r3, r3, #4
 8014d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d94:	4b4f      	ldr	r3, [pc, #316]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d9a:	f003 0304 	and.w	r3, r3, #4
 8014d9e:	617b      	str	r3, [r7, #20]
 8014da0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014da2:	2340      	movs	r3, #64	; 0x40
 8014da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014da6:	2302      	movs	r3, #2
 8014da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014daa:	2302      	movs	r3, #2
 8014dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dae:	2300      	movs	r3, #0
 8014db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014db2:	2303      	movs	r3, #3
 8014db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014db6:	f107 031c 	add.w	r3, r7, #28
 8014dba:	4619      	mov	r1, r3
 8014dbc:	4848      	ldr	r0, [pc, #288]	; (8014ee0 <HAL_TIM_MspPostInit+0x1c8>)
 8014dbe:	f005 fef7 	bl	801abb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 8014dc2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8014dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dc8:	2302      	movs	r3, #2
 8014dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014dd4:	2303      	movs	r3, #3
 8014dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014dd8:	f107 031c 	add.w	r3, r7, #28
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4840      	ldr	r0, [pc, #256]	; (8014ee0 <HAL_TIM_MspPostInit+0x1c8>)
 8014de0:	f005 fee6 	bl	801abb0 <HAL_GPIO_Init>
}
 8014de4:	e06f      	b.n	8014ec6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4a3e      	ldr	r2, [pc, #248]	; (8014ee4 <HAL_TIM_MspPostInit+0x1cc>)
 8014dec:	4293      	cmp	r3, r2
 8014dee:	d120      	bne.n	8014e32 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014df0:	4b38      	ldr	r3, [pc, #224]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014df6:	4a37      	ldr	r2, [pc, #220]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014df8:	f043 0302 	orr.w	r3, r3, #2
 8014dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e00:	4b34      	ldr	r3, [pc, #208]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e06:	f003 0302 	and.w	r3, r3, #2
 8014e0a:	613b      	str	r3, [r7, #16]
 8014e0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8014e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e14:	2302      	movs	r3, #2
 8014e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8014e20:	2302      	movs	r3, #2
 8014e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8014e24:	f107 031c 	add.w	r3, r7, #28
 8014e28:	4619      	mov	r1, r3
 8014e2a:	482f      	ldr	r0, [pc, #188]	; (8014ee8 <HAL_TIM_MspPostInit+0x1d0>)
 8014e2c:	f005 fec0 	bl	801abb0 <HAL_GPIO_Init>
}
 8014e30:	e049      	b.n	8014ec6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	4a2d      	ldr	r2, [pc, #180]	; (8014eec <HAL_TIM_MspPostInit+0x1d4>)
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	d11f      	bne.n	8014e7c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014e3c:	4b25      	ldr	r3, [pc, #148]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e42:	4a24      	ldr	r2, [pc, #144]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e44:	f043 0320 	orr.w	r3, r3, #32
 8014e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e4c:	4b21      	ldr	r3, [pc, #132]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e52:	f003 0320 	and.w	r3, r3, #32
 8014e56:	60fb      	str	r3, [r7, #12]
 8014e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8014e5a:	230f      	movs	r3, #15
 8014e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e5e:	2302      	movs	r3, #2
 8014e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e66:	2300      	movs	r3, #0
 8014e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8014e6a:	230d      	movs	r3, #13
 8014e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014e6e:	f107 031c 	add.w	r3, r7, #28
 8014e72:	4619      	mov	r1, r3
 8014e74:	481e      	ldr	r0, [pc, #120]	; (8014ef0 <HAL_TIM_MspPostInit+0x1d8>)
 8014e76:	f005 fe9b 	bl	801abb0 <HAL_GPIO_Init>
}
 8014e7a:	e024      	b.n	8014ec6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a1c      	ldr	r2, [pc, #112]	; (8014ef4 <HAL_TIM_MspPostInit+0x1dc>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d11f      	bne.n	8014ec6 <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014e86:	4b13      	ldr	r3, [pc, #76]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e8c:	4a11      	ldr	r2, [pc, #68]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e8e:	f043 0320 	orr.w	r3, r3, #32
 8014e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e96:	4b0f      	ldr	r3, [pc, #60]	; (8014ed4 <HAL_TIM_MspPostInit+0x1bc>)
 8014e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e9c:	f003 0320 	and.w	r3, r3, #32
 8014ea0:	60bb      	str	r3, [r7, #8]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8014ea4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8014ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014eaa:	2302      	movs	r3, #2
 8014eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8014eb6:	230e      	movs	r3, #14
 8014eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014eba:	f107 031c 	add.w	r3, r7, #28
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	480b      	ldr	r0, [pc, #44]	; (8014ef0 <HAL_TIM_MspPostInit+0x1d8>)
 8014ec2:	f005 fe75 	bl	801abb0 <HAL_GPIO_Init>
}
 8014ec6:	bf00      	nop
 8014ec8:	3730      	adds	r7, #48	; 0x30
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	40000c00 	.word	0x40000c00
 8014ed4:	58024400 	.word	0x58024400
 8014ed8:	58020000 	.word	0x58020000
 8014edc:	40010400 	.word	0x40010400
 8014ee0:	58020800 	.word	0x58020800
 8014ee4:	40001800 	.word	0x40001800
 8014ee8:	58020400 	.word	0x58020400
 8014eec:	4000e000 	.word	0x4000e000
 8014ef0:	58021400 	.word	0x58021400
 8014ef4:	4000e400 	.word	0x4000e400

08014ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014efc:	e7fe      	b.n	8014efc <NMI_Handler+0x4>

08014efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014efe:	b480      	push	{r7}
 8014f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014f02:	e7fe      	b.n	8014f02 <HardFault_Handler+0x4>

08014f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014f04:	b480      	push	{r7}
 8014f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014f08:	e7fe      	b.n	8014f08 <MemManage_Handler+0x4>

08014f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014f0a:	b480      	push	{r7}
 8014f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014f0e:	e7fe      	b.n	8014f0e <BusFault_Handler+0x4>

08014f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014f10:	b480      	push	{r7}
 8014f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014f14:	e7fe      	b.n	8014f14 <UsageFault_Handler+0x4>

08014f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014f16:	b480      	push	{r7}
 8014f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014f1a:	bf00      	nop
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr

08014f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014f24:	b480      	push	{r7}
 8014f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014f28:	bf00      	nop
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr

08014f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014f32:	b480      	push	{r7}
 8014f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014f36:	bf00      	nop
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014f44:	f000 fa20 	bl	8015388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014f48:	bf00      	nop
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014f50:	4802      	ldr	r0, [pc, #8]	; (8014f5c <DMA1_Stream1_IRQHandler+0x10>)
 8014f52:	f003 f9c1 	bl	80182d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014f56:	bf00      	nop
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	2400173c 	.word	0x2400173c

08014f60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014f64:	4802      	ldr	r0, [pc, #8]	; (8014f70 <ADC_IRQHandler+0x10>)
 8014f66:	f000 ffff 	bl	8015f68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8014f6a:	bf00      	nop
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	240016cc 	.word	0x240016cc

08014f74 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014f78:	4802      	ldr	r0, [pc, #8]	; (8014f84 <FDCAN1_IT0_IRQHandler+0x10>)
 8014f7a:	f005 f90b 	bl	801a194 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8014f7e:	bf00      	nop
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	240017b4 	.word	0x240017b4

08014f88 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014f8c:	4802      	ldr	r0, [pc, #8]	; (8014f98 <FDCAN1_IT1_IRQHandler+0x10>)
 8014f8e:	f005 f901 	bl	801a194 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8014f92:	bf00      	nop
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	240017b4 	.word	0x240017b4

08014f9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014fa0:	4802      	ldr	r0, [pc, #8]	; (8014fac <TIM1_CC_IRQHandler+0x10>)
 8014fa2:	f00a f831 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014fa6:	bf00      	nop
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	24001854 	.word	0x24001854

08014fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014fb4:	4802      	ldr	r0, [pc, #8]	; (8014fc0 <TIM2_IRQHandler+0x10>)
 8014fb6:	f00a f827 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014fba:	bf00      	nop
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	240018a0 	.word	0x240018a0

08014fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014fc8:	4802      	ldr	r0, [pc, #8]	; (8014fd4 <TIM3_IRQHandler+0x10>)
 8014fca:	f00a f81d 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014fce:	bf00      	nop
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	240018ec 	.word	0x240018ec

08014fd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014fdc:	4802      	ldr	r0, [pc, #8]	; (8014fe8 <TIM4_IRQHandler+0x10>)
 8014fde:	f00a f813 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014fe2:	bf00      	nop
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	24001938 	.word	0x24001938

08014fec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014ff0:	4803      	ldr	r0, [pc, #12]	; (8015000 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8014ff2:	f00a f809 	bl	801f008 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8014ff6:	4803      	ldr	r0, [pc, #12]	; (8015004 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8014ff8:	f00a f806 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8014ffc:	bf00      	nop
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	24001a68 	.word	0x24001a68
 8015004:	24001b00 	.word	0x24001b00

08015008 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801500c:	4803      	ldr	r0, [pc, #12]	; (801501c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 801500e:	f009 fffb 	bl	801f008 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8015012:	4803      	ldr	r0, [pc, #12]	; (8015020 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8015014:	f009 fff8 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8015018:	bf00      	nop
 801501a:	bd80      	pop	{r7, pc}
 801501c:	24001a68 	.word	0x24001a68
 8015020:	24001b4c 	.word	0x24001b4c

08015024 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015028:	4802      	ldr	r0, [pc, #8]	; (8015034 <TIM8_CC_IRQHandler+0x10>)
 801502a:	f009 ffed 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 801502e:	bf00      	nop
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	24001a68 	.word	0x24001a68

08015038 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801503c:	4802      	ldr	r0, [pc, #8]	; (8015048 <TIM5_IRQHandler+0x10>)
 801503e:	f009 ffe3 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8015042:	bf00      	nop
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	24001984 	.word	0x24001984

0801504c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015050:	4802      	ldr	r0, [pc, #8]	; (801505c <TIM6_DAC_IRQHandler+0x10>)
 8015052:	f009 ffd9 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8015056:	bf00      	nop
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	240019d0 	.word	0x240019d0

08015060 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8015064:	4802      	ldr	r0, [pc, #8]	; (8015070 <TIM7_IRQHandler+0x10>)
 8015066:	f009 ffcf 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801506a:	bf00      	nop
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	24001a1c 	.word	0x24001a1c

08015074 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8015078:	4802      	ldr	r0, [pc, #8]	; (8015084 <TIM15_IRQHandler+0x10>)
 801507a:	f009 ffc5 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 801507e:	bf00      	nop
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	24001b98 	.word	0x24001b98

08015088 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 801508c:	4802      	ldr	r0, [pc, #8]	; (8015098 <TIM16_IRQHandler+0x10>)
 801508e:	f009 ffbb 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8015092:	bf00      	nop
 8015094:	bd80      	pop	{r7, pc}
 8015096:	bf00      	nop
 8015098:	24001be4 	.word	0x24001be4

0801509c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80150a0:	4802      	ldr	r0, [pc, #8]	; (80150ac <TIM17_IRQHandler+0x10>)
 80150a2:	f009 ffb1 	bl	801f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80150a6:	bf00      	nop
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	24001c30 	.word	0x24001c30

080150b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	af00      	add	r7, sp, #0
  return 1;
 80150b4:	2301      	movs	r3, #1
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr

080150c0 <_kill>:

int _kill(int pid, int sig)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b082      	sub	sp, #8
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80150ca:	f00b fb8d 	bl	80207e8 <__errno>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2216      	movs	r2, #22
 80150d2:	601a      	str	r2, [r3, #0]
  return -1;
 80150d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <_exit>:

void _exit (int status)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80150e8:	f04f 31ff 	mov.w	r1, #4294967295
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7ff ffe7 	bl	80150c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80150f2:	e7fe      	b.n	80150f2 <_exit+0x12>

080150f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80150fc:	4a14      	ldr	r2, [pc, #80]	; (8015150 <_sbrk+0x5c>)
 80150fe:	4b15      	ldr	r3, [pc, #84]	; (8015154 <_sbrk+0x60>)
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015108:	4b13      	ldr	r3, [pc, #76]	; (8015158 <_sbrk+0x64>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d102      	bne.n	8015116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015110:	4b11      	ldr	r3, [pc, #68]	; (8015158 <_sbrk+0x64>)
 8015112:	4a12      	ldr	r2, [pc, #72]	; (801515c <_sbrk+0x68>)
 8015114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015116:	4b10      	ldr	r3, [pc, #64]	; (8015158 <_sbrk+0x64>)
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	4413      	add	r3, r2
 801511e:	693a      	ldr	r2, [r7, #16]
 8015120:	429a      	cmp	r2, r3
 8015122:	d207      	bcs.n	8015134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8015124:	f00b fb60 	bl	80207e8 <__errno>
 8015128:	4603      	mov	r3, r0
 801512a:	220c      	movs	r2, #12
 801512c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801512e:	f04f 33ff 	mov.w	r3, #4294967295
 8015132:	e009      	b.n	8015148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015134:	4b08      	ldr	r3, [pc, #32]	; (8015158 <_sbrk+0x64>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801513a:	4b07      	ldr	r3, [pc, #28]	; (8015158 <_sbrk+0x64>)
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	4413      	add	r3, r2
 8015142:	4a05      	ldr	r2, [pc, #20]	; (8015158 <_sbrk+0x64>)
 8015144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015146:	68fb      	ldr	r3, [r7, #12]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3718      	adds	r7, #24
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	24050000 	.word	0x24050000
 8015154:	00000400 	.word	0x00000400
 8015158:	24001d14 	.word	0x24001d14
 801515c:	24001d30 	.word	0x24001d30

08015160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015160:	b480      	push	{r7}
 8015162:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8015164:	4b32      	ldr	r3, [pc, #200]	; (8015230 <SystemInit+0xd0>)
 8015166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801516a:	4a31      	ldr	r2, [pc, #196]	; (8015230 <SystemInit+0xd0>)
 801516c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015174:	4b2f      	ldr	r3, [pc, #188]	; (8015234 <SystemInit+0xd4>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f003 030f 	and.w	r3, r3, #15
 801517c:	2b06      	cmp	r3, #6
 801517e:	d807      	bhi.n	8015190 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015180:	4b2c      	ldr	r3, [pc, #176]	; (8015234 <SystemInit+0xd4>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f023 030f 	bic.w	r3, r3, #15
 8015188:	4a2a      	ldr	r2, [pc, #168]	; (8015234 <SystemInit+0xd4>)
 801518a:	f043 0307 	orr.w	r3, r3, #7
 801518e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8015190:	4b29      	ldr	r3, [pc, #164]	; (8015238 <SystemInit+0xd8>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	4a28      	ldr	r2, [pc, #160]	; (8015238 <SystemInit+0xd8>)
 8015196:	f043 0301 	orr.w	r3, r3, #1
 801519a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801519c:	4b26      	ldr	r3, [pc, #152]	; (8015238 <SystemInit+0xd8>)
 801519e:	2200      	movs	r2, #0
 80151a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80151a2:	4b25      	ldr	r3, [pc, #148]	; (8015238 <SystemInit+0xd8>)
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	4924      	ldr	r1, [pc, #144]	; (8015238 <SystemInit+0xd8>)
 80151a8:	4b24      	ldr	r3, [pc, #144]	; (801523c <SystemInit+0xdc>)
 80151aa:	4013      	ands	r3, r2
 80151ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80151ae:	4b21      	ldr	r3, [pc, #132]	; (8015234 <SystemInit+0xd4>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f003 0308 	and.w	r3, r3, #8
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d007      	beq.n	80151ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80151ba:	4b1e      	ldr	r3, [pc, #120]	; (8015234 <SystemInit+0xd4>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f023 030f 	bic.w	r3, r3, #15
 80151c2:	4a1c      	ldr	r2, [pc, #112]	; (8015234 <SystemInit+0xd4>)
 80151c4:	f043 0307 	orr.w	r3, r3, #7
 80151c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80151ca:	4b1b      	ldr	r3, [pc, #108]	; (8015238 <SystemInit+0xd8>)
 80151cc:	2200      	movs	r2, #0
 80151ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80151d0:	4b19      	ldr	r3, [pc, #100]	; (8015238 <SystemInit+0xd8>)
 80151d2:	2200      	movs	r2, #0
 80151d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80151d6:	4b18      	ldr	r3, [pc, #96]	; (8015238 <SystemInit+0xd8>)
 80151d8:	2200      	movs	r2, #0
 80151da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80151dc:	4b16      	ldr	r3, [pc, #88]	; (8015238 <SystemInit+0xd8>)
 80151de:	4a18      	ldr	r2, [pc, #96]	; (8015240 <SystemInit+0xe0>)
 80151e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80151e2:	4b15      	ldr	r3, [pc, #84]	; (8015238 <SystemInit+0xd8>)
 80151e4:	4a17      	ldr	r2, [pc, #92]	; (8015244 <SystemInit+0xe4>)
 80151e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80151e8:	4b13      	ldr	r3, [pc, #76]	; (8015238 <SystemInit+0xd8>)
 80151ea:	4a17      	ldr	r2, [pc, #92]	; (8015248 <SystemInit+0xe8>)
 80151ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80151ee:	4b12      	ldr	r3, [pc, #72]	; (8015238 <SystemInit+0xd8>)
 80151f0:	2200      	movs	r2, #0
 80151f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80151f4:	4b10      	ldr	r3, [pc, #64]	; (8015238 <SystemInit+0xd8>)
 80151f6:	4a14      	ldr	r2, [pc, #80]	; (8015248 <SystemInit+0xe8>)
 80151f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80151fa:	4b0f      	ldr	r3, [pc, #60]	; (8015238 <SystemInit+0xd8>)
 80151fc:	2200      	movs	r2, #0
 80151fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015200:	4b0d      	ldr	r3, [pc, #52]	; (8015238 <SystemInit+0xd8>)
 8015202:	4a11      	ldr	r2, [pc, #68]	; (8015248 <SystemInit+0xe8>)
 8015204:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8015206:	4b0c      	ldr	r3, [pc, #48]	; (8015238 <SystemInit+0xd8>)
 8015208:	2200      	movs	r2, #0
 801520a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801520c:	4b0a      	ldr	r3, [pc, #40]	; (8015238 <SystemInit+0xd8>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4a09      	ldr	r2, [pc, #36]	; (8015238 <SystemInit+0xd8>)
 8015212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015216:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015218:	4b07      	ldr	r3, [pc, #28]	; (8015238 <SystemInit+0xd8>)
 801521a:	2200      	movs	r2, #0
 801521c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 801521e:	4b0b      	ldr	r3, [pc, #44]	; (801524c <SystemInit+0xec>)
 8015220:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015224:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8015226:	bf00      	nop
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr
 8015230:	e000ed00 	.word	0xe000ed00
 8015234:	52002000 	.word	0x52002000
 8015238:	58024400 	.word	0x58024400
 801523c:	eaf6ed7f 	.word	0xeaf6ed7f
 8015240:	02020200 	.word	0x02020200
 8015244:	01ff0000 	.word	0x01ff0000
 8015248:	01010280 	.word	0x01010280
 801524c:	52004000 	.word	0x52004000

08015250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015288 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8015254:	f7ff ff84 	bl	8015160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8015258:	480c      	ldr	r0, [pc, #48]	; (801528c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801525a:	490d      	ldr	r1, [pc, #52]	; (8015290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801525c:	4a0d      	ldr	r2, [pc, #52]	; (8015294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801525e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015260:	e002      	b.n	8015268 <LoopCopyDataInit>

08015262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015266:	3304      	adds	r3, #4

08015268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801526a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801526c:	d3f9      	bcc.n	8015262 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801526e:	4a0a      	ldr	r2, [pc, #40]	; (8015298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8015270:	4c0a      	ldr	r4, [pc, #40]	; (801529c <LoopFillZerobss+0x22>)
  movs r3, #0
 8015272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015274:	e001      	b.n	801527a <LoopFillZerobss>

08015276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015278:	3204      	adds	r2, #4

0801527a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801527a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801527c:	d3fb      	bcc.n	8015276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801527e:	f00b fab9 	bl	80207f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015282:	f7f9 faa6 	bl	800e7d2 <main>
  bx  lr
 8015286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015288:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 801528c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8015290:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8015294:	08020e34 	.word	0x08020e34
  ldr r2, =_sbss
 8015298:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 801529c:	24001d30 	.word	0x24001d30

080152a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80152a0:	e7fe      	b.n	80152a0 <ADC3_IRQHandler>
	...

080152a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80152aa:	2003      	movs	r0, #3
 80152ac:	f002 fa0c 	bl	80176c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80152b0:	f006 fc3c 	bl	801bb2c <HAL_RCC_GetSysClockFreq>
 80152b4:	4602      	mov	r2, r0
 80152b6:	4b15      	ldr	r3, [pc, #84]	; (801530c <HAL_Init+0x68>)
 80152b8:	699b      	ldr	r3, [r3, #24]
 80152ba:	0a1b      	lsrs	r3, r3, #8
 80152bc:	f003 030f 	and.w	r3, r3, #15
 80152c0:	4913      	ldr	r1, [pc, #76]	; (8015310 <HAL_Init+0x6c>)
 80152c2:	5ccb      	ldrb	r3, [r1, r3]
 80152c4:	f003 031f 	and.w	r3, r3, #31
 80152c8:	fa22 f303 	lsr.w	r3, r2, r3
 80152cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80152ce:	4b0f      	ldr	r3, [pc, #60]	; (801530c <HAL_Init+0x68>)
 80152d0:	699b      	ldr	r3, [r3, #24]
 80152d2:	f003 030f 	and.w	r3, r3, #15
 80152d6:	4a0e      	ldr	r2, [pc, #56]	; (8015310 <HAL_Init+0x6c>)
 80152d8:	5cd3      	ldrb	r3, [r2, r3]
 80152da:	f003 031f 	and.w	r3, r3, #31
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	fa22 f303 	lsr.w	r3, r2, r3
 80152e4:	4a0b      	ldr	r2, [pc, #44]	; (8015314 <HAL_Init+0x70>)
 80152e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80152e8:	4a0b      	ldr	r2, [pc, #44]	; (8015318 <HAL_Init+0x74>)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80152ee:	2001      	movs	r0, #1
 80152f0:	f000 f814 	bl	801531c <HAL_InitTick>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d001      	beq.n	80152fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80152fa:	2301      	movs	r3, #1
 80152fc:	e002      	b.n	8015304 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80152fe:	f7ff f943 	bl	8014588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015302:	2300      	movs	r3, #0
}
 8015304:	4618      	mov	r0, r3
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	58024400 	.word	0x58024400
 8015310:	08020dac 	.word	0x08020dac
 8015314:	24000008 	.word	0x24000008
 8015318:	24000004 	.word	0x24000004

0801531c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8015324:	4b15      	ldr	r3, [pc, #84]	; (801537c <HAL_InitTick+0x60>)
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d101      	bne.n	8015330 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801532c:	2301      	movs	r3, #1
 801532e:	e021      	b.n	8015374 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015330:	4b13      	ldr	r3, [pc, #76]	; (8015380 <HAL_InitTick+0x64>)
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	4b11      	ldr	r3, [pc, #68]	; (801537c <HAL_InitTick+0x60>)
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	4619      	mov	r1, r3
 801533a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801533e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015342:	fbb2 f3f3 	udiv	r3, r2, r3
 8015346:	4618      	mov	r0, r3
 8015348:	f002 f9f5 	bl	8017736 <HAL_SYSTICK_Config>
 801534c:	4603      	mov	r3, r0
 801534e:	2b00      	cmp	r3, #0
 8015350:	d001      	beq.n	8015356 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8015352:	2301      	movs	r3, #1
 8015354:	e00e      	b.n	8015374 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2b0f      	cmp	r3, #15
 801535a:	d80a      	bhi.n	8015372 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801535c:	2200      	movs	r2, #0
 801535e:	6879      	ldr	r1, [r7, #4]
 8015360:	f04f 30ff 	mov.w	r0, #4294967295
 8015364:	f002 f9bb 	bl	80176de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015368:	4a06      	ldr	r2, [pc, #24]	; (8015384 <HAL_InitTick+0x68>)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801536e:	2300      	movs	r3, #0
 8015370:	e000      	b.n	8015374 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8015372:	2301      	movs	r3, #1
}
 8015374:	4618      	mov	r0, r3
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}
 801537c:	24000010 	.word	0x24000010
 8015380:	24000004 	.word	0x24000004
 8015384:	2400000c 	.word	0x2400000c

08015388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015388:	b480      	push	{r7}
 801538a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801538c:	4b06      	ldr	r3, [pc, #24]	; (80153a8 <HAL_IncTick+0x20>)
 801538e:	781b      	ldrb	r3, [r3, #0]
 8015390:	461a      	mov	r2, r3
 8015392:	4b06      	ldr	r3, [pc, #24]	; (80153ac <HAL_IncTick+0x24>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4413      	add	r3, r2
 8015398:	4a04      	ldr	r2, [pc, #16]	; (80153ac <HAL_IncTick+0x24>)
 801539a:	6013      	str	r3, [r2, #0]
}
 801539c:	bf00      	nop
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop
 80153a8:	24000010 	.word	0x24000010
 80153ac:	24001d18 	.word	0x24001d18

080153b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80153b0:	b480      	push	{r7}
 80153b2:	af00      	add	r7, sp, #0
  return uwTick;
 80153b4:	4b03      	ldr	r3, [pc, #12]	; (80153c4 <HAL_GetTick+0x14>)
 80153b6:	681b      	ldr	r3, [r3, #0]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr
 80153c2:	bf00      	nop
 80153c4:	24001d18 	.word	0x24001d18

080153c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80153c8:	b480      	push	{r7}
 80153ca:	b083      	sub	sp, #12
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	689b      	ldr	r3, [r3, #8]
 80153d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	431a      	orrs	r2, r3
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	609a      	str	r2, [r3, #8]
}
 80153e2:	bf00      	nop
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80153ee:	b480      	push	{r7}
 80153f0:	b083      	sub	sp, #12
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	689b      	ldr	r3, [r3, #8]
 80153fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	431a      	orrs	r2, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	609a      	str	r2, [r3, #8]
}
 8015408:	bf00      	nop
 801540a:	370c      	adds	r7, #12
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8015424:	4618      	mov	r0, r3
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015430:	b480      	push	{r7}
 8015432:	b087      	sub	sp, #28
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	3360      	adds	r3, #96	; 0x60
 8015442:	461a      	mov	r2, r3
 8015444:	68bb      	ldr	r3, [r7, #8]
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4413      	add	r3, r2
 801544a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	4a10      	ldr	r2, [pc, #64]	; (8015490 <LL_ADC_SetOffset+0x60>)
 8015450:	4293      	cmp	r3, r2
 8015452:	d10b      	bne.n	801546c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	4313      	orrs	r3, r2
 8015462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 801546a:	e00b      	b.n	8015484 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	430b      	orrs	r3, r1
 801547e:	431a      	orrs	r2, r3
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	601a      	str	r2, [r3, #0]
}
 8015484:	bf00      	nop
 8015486:	371c      	adds	r7, #28
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	58026000 	.word	0x58026000

08015494 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	3360      	adds	r3, #96	; 0x60
 80154a2:	461a      	mov	r2, r3
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4413      	add	r3, r2
 80154aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3714      	adds	r7, #20
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr

080154c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80154c0:	b480      	push	{r7}
 80154c2:	b085      	sub	sp, #20
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	691b      	ldr	r3, [r3, #16]
 80154d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	f003 031f 	and.w	r3, r3, #31
 80154da:	6879      	ldr	r1, [r7, #4]
 80154dc:	fa01 f303 	lsl.w	r3, r1, r3
 80154e0:	431a      	orrs	r2, r3
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	611a      	str	r2, [r3, #16]
}
 80154e6:	bf00      	nop
 80154e8:	3714      	adds	r7, #20
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
	...

080154f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b087      	sub	sp, #28
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	4a0c      	ldr	r2, [pc, #48]	; (8015534 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8015504:	4293      	cmp	r3, r2
 8015506:	d00e      	beq.n	8015526 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	3360      	adds	r3, #96	; 0x60
 801550c:	461a      	mov	r2, r3
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	4413      	add	r3, r2
 8015514:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	431a      	orrs	r2, r3
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	601a      	str	r2, [r3, #0]
  }
}
 8015526:	bf00      	nop
 8015528:	371c      	adds	r7, #28
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr
 8015532:	bf00      	nop
 8015534:	58026000 	.word	0x58026000

08015538 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8015538:	b480      	push	{r7}
 801553a:	b087      	sub	sp, #28
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	4a0c      	ldr	r2, [pc, #48]	; (8015578 <LL_ADC_SetOffsetSaturation+0x40>)
 8015548:	4293      	cmp	r3, r2
 801554a:	d10e      	bne.n	801556a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	3360      	adds	r3, #96	; 0x60
 8015550:	461a      	mov	r2, r3
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4413      	add	r3, r2
 8015558:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	431a      	orrs	r2, r3
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 801556a:	bf00      	nop
 801556c:	371c      	adds	r7, #28
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop
 8015578:	58026000 	.word	0x58026000

0801557c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801557c:	b480      	push	{r7}
 801557e:	b087      	sub	sp, #28
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	4a0c      	ldr	r2, [pc, #48]	; (80155bc <LL_ADC_SetOffsetSign+0x40>)
 801558c:	4293      	cmp	r3, r2
 801558e:	d10e      	bne.n	80155ae <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	3360      	adds	r3, #96	; 0x60
 8015594:	461a      	mov	r2, r3
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	4413      	add	r3, r2
 801559c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	431a      	orrs	r2, r3
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80155ae:	bf00      	nop
 80155b0:	371c      	adds	r7, #28
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr
 80155ba:	bf00      	nop
 80155bc:	58026000 	.word	0x58026000

080155c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80155c0:	b480      	push	{r7}
 80155c2:	b087      	sub	sp, #28
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	3360      	adds	r3, #96	; 0x60
 80155d0:	461a      	mov	r2, r3
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4413      	add	r3, r2
 80155d8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	4a0c      	ldr	r2, [pc, #48]	; (8015610 <LL_ADC_SetOffsetState+0x50>)
 80155de:	4293      	cmp	r3, r2
 80155e0:	d108      	bne.n	80155f4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	431a      	orrs	r2, r3
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80155f2:	e007      	b.n	8015604 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	431a      	orrs	r2, r3
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	601a      	str	r2, [r3, #0]
}
 8015604:	bf00      	nop
 8015606:	371c      	adds	r7, #28
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr
 8015610:	58026000 	.word	0x58026000

08015614 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8015628:	2301      	movs	r3, #1
 801562a:	e000      	b.n	801562e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801562c:	2300      	movs	r3, #0
}
 801562e:	4618      	mov	r0, r3
 8015630:	370c      	adds	r7, #12
 8015632:	46bd      	mov	sp, r7
 8015634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015638:	4770      	bx	lr

0801563a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801563a:	b480      	push	{r7}
 801563c:	b087      	sub	sp, #28
 801563e:	af00      	add	r7, sp, #0
 8015640:	60f8      	str	r0, [r7, #12]
 8015642:	60b9      	str	r1, [r7, #8]
 8015644:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	3330      	adds	r3, #48	; 0x30
 801564a:	461a      	mov	r2, r3
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	0a1b      	lsrs	r3, r3, #8
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	f003 030c 	and.w	r3, r3, #12
 8015656:	4413      	add	r3, r2
 8015658:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	f003 031f 	and.w	r3, r3, #31
 8015664:	211f      	movs	r1, #31
 8015666:	fa01 f303 	lsl.w	r3, r1, r3
 801566a:	43db      	mvns	r3, r3
 801566c:	401a      	ands	r2, r3
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	0e9b      	lsrs	r3, r3, #26
 8015672:	f003 011f 	and.w	r1, r3, #31
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	f003 031f 	and.w	r3, r3, #31
 801567c:	fa01 f303 	lsl.w	r3, r1, r3
 8015680:	431a      	orrs	r2, r3
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8015686:	bf00      	nop
 8015688:	371c      	adds	r7, #28
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8015692:	b480      	push	{r7}
 8015694:	b083      	sub	sp, #12
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	68db      	ldr	r3, [r3, #12]
 80156a0:	f023 0203 	bic.w	r2, r3, #3
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	431a      	orrs	r2, r3
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	60da      	str	r2, [r3, #12]
}
 80156ac:	bf00      	nop
 80156ae:	370c      	adds	r7, #12
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr

080156b8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b083      	sub	sp, #12
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	f043 0201 	orr.w	r2, r3, #1
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	60da      	str	r2, [r3, #12]
}
 80156cc:	bf00      	nop
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4a08      	ldr	r2, [pc, #32]	; (8015708 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80156e6:	4293      	cmp	r3, r2
 80156e8:	d107      	bne.n	80156fa <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	68db      	ldr	r3, [r3, #12]
 80156ee:	f023 0203 	bic.w	r2, r3, #3
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	431a      	orrs	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	60da      	str	r2, [r3, #12]
  }
}
 80156fa:	bf00      	nop
 80156fc:	370c      	adds	r7, #12
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr
 8015706:	bf00      	nop
 8015708:	58026000 	.word	0x58026000

0801570c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015718:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801571c:	2b00      	cmp	r3, #0
 801571e:	d101      	bne.n	8015724 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8015720:	2301      	movs	r3, #1
 8015722:	e000      	b.n	8015726 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8015724:	2300      	movs	r3, #0
}
 8015726:	4618      	mov	r0, r3
 8015728:	370c      	adds	r7, #12
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8015732:	b480      	push	{r7}
 8015734:	b087      	sub	sp, #28
 8015736:	af00      	add	r7, sp, #0
 8015738:	60f8      	str	r0, [r7, #12]
 801573a:	60b9      	str	r1, [r7, #8]
 801573c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	3314      	adds	r3, #20
 8015742:	461a      	mov	r2, r3
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	0e5b      	lsrs	r3, r3, #25
 8015748:	009b      	lsls	r3, r3, #2
 801574a:	f003 0304 	and.w	r3, r3, #4
 801574e:	4413      	add	r3, r2
 8015750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	0d1b      	lsrs	r3, r3, #20
 801575a:	f003 031f 	and.w	r3, r3, #31
 801575e:	2107      	movs	r1, #7
 8015760:	fa01 f303 	lsl.w	r3, r1, r3
 8015764:	43db      	mvns	r3, r3
 8015766:	401a      	ands	r2, r3
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	0d1b      	lsrs	r3, r3, #20
 801576c:	f003 031f 	and.w	r3, r3, #31
 8015770:	6879      	ldr	r1, [r7, #4]
 8015772:	fa01 f303 	lsl.w	r3, r1, r3
 8015776:	431a      	orrs	r2, r3
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801577c:	bf00      	nop
 801577e:	371c      	adds	r7, #28
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8015788:	b480      	push	{r7}
 801578a:	b085      	sub	sp, #20
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	4a1a      	ldr	r2, [pc, #104]	; (8015800 <LL_ADC_SetChannelSingleDiff+0x78>)
 8015798:	4293      	cmp	r3, r2
 801579a:	d115      	bne.n	80157c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157a8:	43db      	mvns	r3, r3
 80157aa:	401a      	ands	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f003 0318 	and.w	r3, r3, #24
 80157b2:	4914      	ldr	r1, [pc, #80]	; (8015804 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80157b4:	40d9      	lsrs	r1, r3
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	400b      	ands	r3, r1
 80157ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157be:	431a      	orrs	r2, r3
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80157c6:	e014      	b.n	80157f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157d4:	43db      	mvns	r3, r3
 80157d6:	401a      	ands	r2, r3
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f003 0318 	and.w	r3, r3, #24
 80157de:	4909      	ldr	r1, [pc, #36]	; (8015804 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80157e0:	40d9      	lsrs	r1, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	400b      	ands	r3, r1
 80157e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157ea:	431a      	orrs	r2, r3
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80157f2:	bf00      	nop
 80157f4:	3714      	adds	r7, #20
 80157f6:	46bd      	mov	sp, r7
 80157f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fc:	4770      	bx	lr
 80157fe:	bf00      	nop
 8015800:	58026000 	.word	0x58026000
 8015804:	000fffff 	.word	0x000fffff

08015808 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	f003 031f 	and.w	r3, r3, #31
}
 8015818:	4618      	mov	r0, r3
 801581a:	370c      	adds	r7, #12
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8015834:	4618      	mov	r0, r3
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	689a      	ldr	r2, [r3, #8]
 801584c:	4b04      	ldr	r3, [pc, #16]	; (8015860 <LL_ADC_DisableDeepPowerDown+0x20>)
 801584e:	4013      	ands	r3, r2
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	6093      	str	r3, [r2, #8]
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr
 8015860:	5fffffc0 	.word	0x5fffffc0

08015864 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	689b      	ldr	r3, [r3, #8]
 8015870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015878:	d101      	bne.n	801587e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801587a:	2301      	movs	r3, #1
 801587c:	e000      	b.n	8015880 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801587e:	2300      	movs	r3, #0
}
 8015880:	4618      	mov	r0, r3
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588a:	4770      	bx	lr

0801588c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	689a      	ldr	r2, [r3, #8]
 8015898:	4b05      	ldr	r3, [pc, #20]	; (80158b0 <LL_ADC_EnableInternalRegulator+0x24>)
 801589a:	4013      	ands	r3, r2
 801589c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80158a4:	bf00      	nop
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr
 80158b0:	6fffffc0 	.word	0x6fffffc0

080158b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80158b4:	b480      	push	{r7}
 80158b6:	b083      	sub	sp, #12
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80158c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80158c8:	d101      	bne.n	80158ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80158ca:	2301      	movs	r3, #1
 80158cc:	e000      	b.n	80158d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr

080158dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80158dc:	b480      	push	{r7}
 80158de:	b083      	sub	sp, #12
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	689a      	ldr	r2, [r3, #8]
 80158e8:	4b05      	ldr	r3, [pc, #20]	; (8015900 <LL_ADC_Enable+0x24>)
 80158ea:	4013      	ands	r3, r2
 80158ec:	f043 0201 	orr.w	r2, r3, #1
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80158f4:	bf00      	nop
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr
 8015900:	7fffffc0 	.word	0x7fffffc0

08015904 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	f003 0301 	and.w	r3, r3, #1
 8015914:	2b01      	cmp	r3, #1
 8015916:	d101      	bne.n	801591c <LL_ADC_IsEnabled+0x18>
 8015918:	2301      	movs	r3, #1
 801591a:	e000      	b.n	801591e <LL_ADC_IsEnabled+0x1a>
 801591c:	2300      	movs	r3, #0
}
 801591e:	4618      	mov	r0, r3
 8015920:	370c      	adds	r7, #12
 8015922:	46bd      	mov	sp, r7
 8015924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015928:	4770      	bx	lr
	...

0801592c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	689a      	ldr	r2, [r3, #8]
 8015938:	4b05      	ldr	r3, [pc, #20]	; (8015950 <LL_ADC_REG_StartConversion+0x24>)
 801593a:	4013      	ands	r3, r2
 801593c:	f043 0204 	orr.w	r2, r3, #4
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8015944:	bf00      	nop
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	7fffffc0 	.word	0x7fffffc0

08015954 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	f003 0304 	and.w	r3, r3, #4
 8015964:	2b04      	cmp	r3, #4
 8015966:	d101      	bne.n	801596c <LL_ADC_REG_IsConversionOngoing+0x18>
 8015968:	2301      	movs	r3, #1
 801596a:	e000      	b.n	801596e <LL_ADC_REG_IsConversionOngoing+0x1a>
 801596c:	2300      	movs	r3, #0
}
 801596e:	4618      	mov	r0, r3
 8015970:	370c      	adds	r7, #12
 8015972:	46bd      	mov	sp, r7
 8015974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015978:	4770      	bx	lr

0801597a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801597a:	b480      	push	{r7}
 801597c:	b083      	sub	sp, #12
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	689b      	ldr	r3, [r3, #8]
 8015986:	f003 0308 	and.w	r3, r3, #8
 801598a:	2b08      	cmp	r3, #8
 801598c:	d101      	bne.n	8015992 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801598e:	2301      	movs	r3, #1
 8015990:	e000      	b.n	8015994 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8015992:	2300      	movs	r3, #0
}
 8015994:	4618      	mov	r0, r3
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr

080159a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80159a0:	b590      	push	{r4, r7, lr}
 80159a2:	b089      	sub	sp, #36	; 0x24
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80159a8:	2300      	movs	r3, #0
 80159aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80159ac:	2300      	movs	r3, #0
 80159ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d101      	bne.n	80159ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80159b6:	2301      	movs	r3, #1
 80159b8:	e1ee      	b.n	8015d98 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	691b      	ldr	r3, [r3, #16]
 80159be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d109      	bne.n	80159dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7fe fe19 	bl	8014600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff ff3f 	bl	8015864 <LL_ADC_IsDeepPowerDownEnabled>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d004      	beq.n	80159f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7ff ff25 	bl	8015840 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7ff ff5a 	bl	80158b4 <LL_ADC_IsInternalRegulatorEnabled>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d114      	bne.n	8015a30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ff ff3e 	bl	801588c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015a10:	4b8e      	ldr	r3, [pc, #568]	; (8015c4c <HAL_ADC_Init+0x2ac>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	099b      	lsrs	r3, r3, #6
 8015a16:	4a8e      	ldr	r2, [pc, #568]	; (8015c50 <HAL_ADC_Init+0x2b0>)
 8015a18:	fba2 2303 	umull	r2, r3, r2, r3
 8015a1c:	099b      	lsrs	r3, r3, #6
 8015a1e:	3301      	adds	r3, #1
 8015a20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015a22:	e002      	b.n	8015a2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	3b01      	subs	r3, #1
 8015a28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d1f9      	bne.n	8015a24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ff ff3d 	bl	80158b4 <LL_ADC_IsInternalRegulatorEnabled>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d10d      	bne.n	8015a5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a44:	f043 0210 	orr.w	r2, r3, #16
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a50:	f043 0201 	orr.w	r2, r3, #1
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7ff ff77 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 8015a66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a6c:	f003 0310 	and.w	r3, r3, #16
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	f040 8188 	bne.w	8015d86 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	f040 8184 	bne.w	8015d86 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8015a86:	f043 0202 	orr.w	r2, r3, #2
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ff ff36 	bl	8015904 <LL_ADC_IsEnabled>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d136      	bne.n	8015b0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	4a6c      	ldr	r2, [pc, #432]	; (8015c54 <HAL_ADC_Init+0x2b4>)
 8015aa4:	4293      	cmp	r3, r2
 8015aa6:	d004      	beq.n	8015ab2 <HAL_ADC_Init+0x112>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4a6a      	ldr	r2, [pc, #424]	; (8015c58 <HAL_ADC_Init+0x2b8>)
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d10e      	bne.n	8015ad0 <HAL_ADC_Init+0x130>
 8015ab2:	4868      	ldr	r0, [pc, #416]	; (8015c54 <HAL_ADC_Init+0x2b4>)
 8015ab4:	f7ff ff26 	bl	8015904 <LL_ADC_IsEnabled>
 8015ab8:	4604      	mov	r4, r0
 8015aba:	4867      	ldr	r0, [pc, #412]	; (8015c58 <HAL_ADC_Init+0x2b8>)
 8015abc:	f7ff ff22 	bl	8015904 <LL_ADC_IsEnabled>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	4323      	orrs	r3, r4
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	bf0c      	ite	eq
 8015ac8:	2301      	moveq	r3, #1
 8015aca:	2300      	movne	r3, #0
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	e008      	b.n	8015ae2 <HAL_ADC_Init+0x142>
 8015ad0:	4862      	ldr	r0, [pc, #392]	; (8015c5c <HAL_ADC_Init+0x2bc>)
 8015ad2:	f7ff ff17 	bl	8015904 <LL_ADC_IsEnabled>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	bf0c      	ite	eq
 8015adc:	2301      	moveq	r3, #1
 8015ade:	2300      	movne	r3, #0
 8015ae0:	b2db      	uxtb	r3, r3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d012      	beq.n	8015b0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	4a5a      	ldr	r2, [pc, #360]	; (8015c54 <HAL_ADC_Init+0x2b4>)
 8015aec:	4293      	cmp	r3, r2
 8015aee:	d004      	beq.n	8015afa <HAL_ADC_Init+0x15a>
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	4a58      	ldr	r2, [pc, #352]	; (8015c58 <HAL_ADC_Init+0x2b8>)
 8015af6:	4293      	cmp	r3, r2
 8015af8:	d101      	bne.n	8015afe <HAL_ADC_Init+0x15e>
 8015afa:	4a59      	ldr	r2, [pc, #356]	; (8015c60 <HAL_ADC_Init+0x2c0>)
 8015afc:	e000      	b.n	8015b00 <HAL_ADC_Init+0x160>
 8015afe:	4a59      	ldr	r2, [pc, #356]	; (8015c64 <HAL_ADC_Init+0x2c4>)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	4619      	mov	r1, r3
 8015b06:	4610      	mov	r0, r2
 8015b08:	f7ff fc5e 	bl	80153c8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4a52      	ldr	r2, [pc, #328]	; (8015c5c <HAL_ADC_Init+0x2bc>)
 8015b12:	4293      	cmp	r3, r2
 8015b14:	d129      	bne.n	8015b6a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	7e5b      	ldrb	r3, [r3, #25]
 8015b1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015b20:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8015b26:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	689b      	ldr	r3, [r3, #8]
 8015b2c:	2b08      	cmp	r3, #8
 8015b2e:	d013      	beq.n	8015b58 <HAL_ADC_Init+0x1b8>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	689b      	ldr	r3, [r3, #8]
 8015b34:	2b0c      	cmp	r3, #12
 8015b36:	d00d      	beq.n	8015b54 <HAL_ADC_Init+0x1b4>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	2b1c      	cmp	r3, #28
 8015b3e:	d007      	beq.n	8015b50 <HAL_ADC_Init+0x1b0>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	689b      	ldr	r3, [r3, #8]
 8015b44:	2b18      	cmp	r3, #24
 8015b46:	d101      	bne.n	8015b4c <HAL_ADC_Init+0x1ac>
 8015b48:	2318      	movs	r3, #24
 8015b4a:	e006      	b.n	8015b5a <HAL_ADC_Init+0x1ba>
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	e004      	b.n	8015b5a <HAL_ADC_Init+0x1ba>
 8015b50:	2310      	movs	r3, #16
 8015b52:	e002      	b.n	8015b5a <HAL_ADC_Init+0x1ba>
 8015b54:	2308      	movs	r3, #8
 8015b56:	e000      	b.n	8015b5a <HAL_ADC_Init+0x1ba>
 8015b58:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8015b5a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015b64:	4313      	orrs	r3, r2
 8015b66:	61bb      	str	r3, [r7, #24]
 8015b68:	e00e      	b.n	8015b88 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	7e5b      	ldrb	r3, [r3, #25]
 8015b6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015b74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8015b7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b82:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015b84:	4313      	orrs	r3, r2
 8015b86:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d106      	bne.n	8015ba0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b96:	3b01      	subs	r3, #1
 8015b98:	045b      	lsls	r3, r3, #17
 8015b9a:	69ba      	ldr	r2, [r7, #24]
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d009      	beq.n	8015bbc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015bb6:	69ba      	ldr	r2, [r7, #24]
 8015bb8:	4313      	orrs	r3, r2
 8015bba:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4a26      	ldr	r2, [pc, #152]	; (8015c5c <HAL_ADC_Init+0x2bc>)
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d115      	bne.n	8015bf2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68da      	ldr	r2, [r3, #12]
 8015bcc:	4b26      	ldr	r3, [pc, #152]	; (8015c68 <HAL_ADC_Init+0x2c8>)
 8015bce:	4013      	ands	r3, r2
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	6812      	ldr	r2, [r2, #0]
 8015bd4:	69b9      	ldr	r1, [r7, #24]
 8015bd6:	430b      	orrs	r3, r1
 8015bd8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	691b      	ldr	r3, [r3, #16]
 8015be0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	430a      	orrs	r2, r1
 8015bee:	611a      	str	r2, [r3, #16]
 8015bf0:	e009      	b.n	8015c06 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	68da      	ldr	r2, [r3, #12]
 8015bf8:	4b1c      	ldr	r3, [pc, #112]	; (8015c6c <HAL_ADC_Init+0x2cc>)
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	687a      	ldr	r2, [r7, #4]
 8015bfe:	6812      	ldr	r2, [r2, #0]
 8015c00:	69b9      	ldr	r1, [r7, #24]
 8015c02:	430b      	orrs	r3, r1
 8015c04:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff fea2 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 8015c10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff feaf 	bl	801597a <LL_ADC_INJ_IsConversionOngoing>
 8015c1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f040 808e 	bne.w	8015d42 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f040 808a 	bne.w	8015d42 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	4a0a      	ldr	r2, [pc, #40]	; (8015c5c <HAL_ADC_Init+0x2bc>)
 8015c34:	4293      	cmp	r3, r2
 8015c36:	d11b      	bne.n	8015c70 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	7e1b      	ldrb	r3, [r3, #24]
 8015c3c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015c44:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8015c46:	4313      	orrs	r3, r2
 8015c48:	61bb      	str	r3, [r7, #24]
 8015c4a:	e018      	b.n	8015c7e <HAL_ADC_Init+0x2de>
 8015c4c:	24000004 	.word	0x24000004
 8015c50:	053e2d63 	.word	0x053e2d63
 8015c54:	40022000 	.word	0x40022000
 8015c58:	40022100 	.word	0x40022100
 8015c5c:	58026000 	.word	0x58026000
 8015c60:	40022300 	.word	0x40022300
 8015c64:	58026300 	.word	0x58026300
 8015c68:	fff04007 	.word	0xfff04007
 8015c6c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	7e1b      	ldrb	r3, [r3, #24]
 8015c74:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8015c7a:	4313      	orrs	r3, r2
 8015c7c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	68da      	ldr	r2, [r3, #12]
 8015c84:	4b46      	ldr	r3, [pc, #280]	; (8015da0 <HAL_ADC_Init+0x400>)
 8015c86:	4013      	ands	r3, r2
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	6812      	ldr	r2, [r2, #0]
 8015c8c:	69b9      	ldr	r1, [r7, #24]
 8015c8e:	430b      	orrs	r3, r1
 8015c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d137      	bne.n	8015d0c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ca0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	4a3f      	ldr	r2, [pc, #252]	; (8015da4 <HAL_ADC_Init+0x404>)
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	d116      	bne.n	8015cda <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	691a      	ldr	r2, [r3, #16]
 8015cb2:	4b3d      	ldr	r3, [pc, #244]	; (8015da8 <HAL_ADC_Init+0x408>)
 8015cb4:	4013      	ands	r3, r2
 8015cb6:	687a      	ldr	r2, [r7, #4]
 8015cb8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015cbe:	4311      	orrs	r1, r2
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015cc4:	4311      	orrs	r1, r2
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015cca:	430a      	orrs	r2, r1
 8015ccc:	431a      	orrs	r2, r3
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	f042 0201 	orr.w	r2, r2, #1
 8015cd6:	611a      	str	r2, [r3, #16]
 8015cd8:	e020      	b.n	8015d1c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	691a      	ldr	r2, [r3, #16]
 8015ce0:	4b32      	ldr	r3, [pc, #200]	; (8015dac <HAL_ADC_Init+0x40c>)
 8015ce2:	4013      	ands	r3, r2
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015ce8:	3a01      	subs	r2, #1
 8015cea:	0411      	lsls	r1, r2, #16
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015cf0:	4311      	orrs	r1, r2
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015cf6:	4311      	orrs	r1, r2
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015cfc:	430a      	orrs	r2, r1
 8015cfe:	431a      	orrs	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	f042 0201 	orr.w	r2, r2, #1
 8015d08:	611a      	str	r2, [r3, #16]
 8015d0a:	e007      	b.n	8015d1c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	691a      	ldr	r2, [r3, #16]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	f022 0201 	bic.w	r2, r2, #1
 8015d1a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	691b      	ldr	r3, [r3, #16]
 8015d22:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	430a      	orrs	r2, r1
 8015d30:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	4a1b      	ldr	r2, [pc, #108]	; (8015da4 <HAL_ADC_Init+0x404>)
 8015d38:	4293      	cmp	r3, r2
 8015d3a:	d002      	beq.n	8015d42 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f001 f9b5 	bl	80170ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	691b      	ldr	r3, [r3, #16]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d10c      	bne.n	8015d64 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d50:	f023 010f 	bic.w	r1, r3, #15
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	69db      	ldr	r3, [r3, #28]
 8015d58:	1e5a      	subs	r2, r3, #1
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	430a      	orrs	r2, r1
 8015d60:	631a      	str	r2, [r3, #48]	; 0x30
 8015d62:	e007      	b.n	8015d74 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f022 020f 	bic.w	r2, r2, #15
 8015d72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d78:	f023 0303 	bic.w	r3, r3, #3
 8015d7c:	f043 0201 	orr.w	r2, r3, #1
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	661a      	str	r2, [r3, #96]	; 0x60
 8015d84:	e007      	b.n	8015d96 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d8a:	f043 0210 	orr.w	r2, r3, #16
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8015d92:	2301      	movs	r3, #1
 8015d94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8015d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3724      	adds	r7, #36	; 0x24
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd90      	pop	{r4, r7, pc}
 8015da0:	ffffbffc 	.word	0xffffbffc
 8015da4:	58026000 	.word	0x58026000
 8015da8:	fc00f81f 	.word	0xfc00f81f
 8015dac:	fc00f81e 	.word	0xfc00f81e

08015db0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b086      	sub	sp, #24
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4a60      	ldr	r2, [pc, #384]	; (8015f44 <HAL_ADC_Start_DMA+0x194>)
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	d004      	beq.n	8015dd0 <HAL_ADC_Start_DMA+0x20>
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	4a5f      	ldr	r2, [pc, #380]	; (8015f48 <HAL_ADC_Start_DMA+0x198>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d101      	bne.n	8015dd4 <HAL_ADC_Start_DMA+0x24>
 8015dd0:	4b5e      	ldr	r3, [pc, #376]	; (8015f4c <HAL_ADC_Start_DMA+0x19c>)
 8015dd2:	e000      	b.n	8015dd6 <HAL_ADC_Start_DMA+0x26>
 8015dd4:	4b5e      	ldr	r3, [pc, #376]	; (8015f50 <HAL_ADC_Start_DMA+0x1a0>)
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7ff fd16 	bl	8015808 <LL_ADC_GetMultimode>
 8015ddc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7ff fdb6 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	f040 80a2 	bne.w	8015f34 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d101      	bne.n	8015dfe <HAL_ADC_Start_DMA+0x4e>
 8015dfa:	2302      	movs	r3, #2
 8015dfc:	e09d      	b.n	8015f3a <HAL_ADC_Start_DMA+0x18a>
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2201      	movs	r2, #1
 8015e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d006      	beq.n	8015e1a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015e0c:	693b      	ldr	r3, [r7, #16]
 8015e0e:	2b05      	cmp	r3, #5
 8015e10:	d003      	beq.n	8015e1a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	2b09      	cmp	r3, #9
 8015e16:	f040 8086 	bne.w	8015f26 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f001 f828 	bl	8016e70 <ADC_Enable>
 8015e20:	4603      	mov	r3, r0
 8015e22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8015e24:	7dfb      	ldrb	r3, [r7, #23]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d178      	bne.n	8015f1c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015e2e:	4b49      	ldr	r3, [pc, #292]	; (8015f54 <HAL_ADC_Start_DMA+0x1a4>)
 8015e30:	4013      	ands	r3, r2
 8015e32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	4a42      	ldr	r2, [pc, #264]	; (8015f48 <HAL_ADC_Start_DMA+0x198>)
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d002      	beq.n	8015e4a <HAL_ADC_Start_DMA+0x9a>
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	e000      	b.n	8015e4c <HAL_ADC_Start_DMA+0x9c>
 8015e4a:	4b3e      	ldr	r3, [pc, #248]	; (8015f44 <HAL_ADC_Start_DMA+0x194>)
 8015e4c:	68fa      	ldr	r2, [r7, #12]
 8015e4e:	6812      	ldr	r2, [r2, #0]
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d002      	beq.n	8015e5a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015e54:	693b      	ldr	r3, [r7, #16]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d105      	bne.n	8015e66 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d006      	beq.n	8015e80 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e76:	f023 0206 	bic.w	r2, r3, #6
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	665a      	str	r2, [r3, #100]	; 0x64
 8015e7e:	e002      	b.n	8015e86 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2200      	movs	r2, #0
 8015e84:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e8a:	4a33      	ldr	r2, [pc, #204]	; (8015f58 <HAL_ADC_Start_DMA+0x1a8>)
 8015e8c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e92:	4a32      	ldr	r2, [pc, #200]	; (8015f5c <HAL_ADC_Start_DMA+0x1ac>)
 8015e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e9a:	4a31      	ldr	r2, [pc, #196]	; (8015f60 <HAL_ADC_Start_DMA+0x1b0>)
 8015e9c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	221c      	movs	r2, #28
 8015ea4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	685a      	ldr	r2, [r3, #4]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f042 0210 	orr.w	r2, r2, #16
 8015ebc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4a28      	ldr	r2, [pc, #160]	; (8015f64 <HAL_ADC_Start_DMA+0x1b4>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d10f      	bne.n	8015ee8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	4619      	mov	r1, r3
 8015ed6:	4610      	mov	r0, r2
 8015ed8:	f7ff fbfe 	bl	80156d8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff fbe9 	bl	80156b8 <LL_ADC_EnableDMAReq>
 8015ee6:	e007      	b.n	8015ef8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	4610      	mov	r0, r2
 8015ef4:	f7ff fbcd 	bl	8015692 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	3340      	adds	r3, #64	; 0x40
 8015f02:	4619      	mov	r1, r3
 8015f04:	68ba      	ldr	r2, [r7, #8]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f001 ff7c 	bl	8017e04 <HAL_DMA_Start_IT>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7ff fd09 	bl	801592c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8015f1a:	e00d      	b.n	8015f38 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8015f24:	e008      	b.n	8015f38 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8015f26:	2301      	movs	r3, #1
 8015f28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8015f32:	e001      	b.n	8015f38 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015f34:	2302      	movs	r3, #2
 8015f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8015f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	40022000 	.word	0x40022000
 8015f48:	40022100 	.word	0x40022100
 8015f4c:	40022300 	.word	0x40022300
 8015f50:	58026300 	.word	0x58026300
 8015f54:	fffff0fe 	.word	0xfffff0fe
 8015f58:	08016f85 	.word	0x08016f85
 8015f5c:	0801705d 	.word	0x0801705d
 8015f60:	08017079 	.word	0x08017079
 8015f64:	58026000 	.word	0x58026000

08015f68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015f70:	2300      	movs	r3, #0
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4a87      	ldr	r2, [pc, #540]	; (80161a8 <HAL_ADC_IRQHandler+0x240>)
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d004      	beq.n	8015f98 <HAL_ADC_IRQHandler+0x30>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	4a86      	ldr	r2, [pc, #536]	; (80161ac <HAL_ADC_IRQHandler+0x244>)
 8015f94:	4293      	cmp	r3, r2
 8015f96:	d101      	bne.n	8015f9c <HAL_ADC_IRQHandler+0x34>
 8015f98:	4b85      	ldr	r3, [pc, #532]	; (80161b0 <HAL_ADC_IRQHandler+0x248>)
 8015f9a:	e000      	b.n	8015f9e <HAL_ADC_IRQHandler+0x36>
 8015f9c:	4b85      	ldr	r3, [pc, #532]	; (80161b4 <HAL_ADC_IRQHandler+0x24c>)
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7ff fc32 	bl	8015808 <LL_ADC_GetMultimode>
 8015fa4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015fa6:	69fb      	ldr	r3, [r7, #28]
 8015fa8:	f003 0302 	and.w	r3, r3, #2
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d017      	beq.n	8015fe0 <HAL_ADC_IRQHandler+0x78>
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	f003 0302 	and.w	r3, r3, #2
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d012      	beq.n	8015fe0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015fbe:	f003 0310 	and.w	r3, r3, #16
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d105      	bne.n	8015fd2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015fca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f001 f9a6 	bl	8017324 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2202      	movs	r2, #2
 8015fde:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	f003 0304 	and.w	r3, r3, #4
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d004      	beq.n	8015ff4 <HAL_ADC_IRQHandler+0x8c>
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	f003 0304 	and.w	r3, r3, #4
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10a      	bne.n	801600a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	f000 8083 	beq.w	8016106 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	f003 0308 	and.w	r3, r3, #8
 8016006:	2b00      	cmp	r3, #0
 8016008:	d07d      	beq.n	8016106 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801600e:	f003 0310 	and.w	r3, r3, #16
 8016012:	2b00      	cmp	r3, #0
 8016014:	d105      	bne.n	8016022 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801601a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4618      	mov	r0, r3
 8016028:	f7ff faf4 	bl	8015614 <LL_ADC_REG_IsTriggerSourceSWStart>
 801602c:	4603      	mov	r3, r0
 801602e:	2b00      	cmp	r3, #0
 8016030:	d062      	beq.n	80160f8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4a5d      	ldr	r2, [pc, #372]	; (80161ac <HAL_ADC_IRQHandler+0x244>)
 8016038:	4293      	cmp	r3, r2
 801603a:	d002      	beq.n	8016042 <HAL_ADC_IRQHandler+0xda>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	e000      	b.n	8016044 <HAL_ADC_IRQHandler+0xdc>
 8016042:	4b59      	ldr	r3, [pc, #356]	; (80161a8 <HAL_ADC_IRQHandler+0x240>)
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	6812      	ldr	r2, [r2, #0]
 8016048:	4293      	cmp	r3, r2
 801604a:	d008      	beq.n	801605e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d005      	beq.n	801605e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8016052:	697b      	ldr	r3, [r7, #20]
 8016054:	2b05      	cmp	r3, #5
 8016056:	d002      	beq.n	801605e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	2b09      	cmp	r3, #9
 801605c:	d104      	bne.n	8016068 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	68db      	ldr	r3, [r3, #12]
 8016064:	623b      	str	r3, [r7, #32]
 8016066:	e00c      	b.n	8016082 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4a4f      	ldr	r2, [pc, #316]	; (80161ac <HAL_ADC_IRQHandler+0x244>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d002      	beq.n	8016078 <HAL_ADC_IRQHandler+0x110>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	e000      	b.n	801607a <HAL_ADC_IRQHandler+0x112>
 8016078:	4b4b      	ldr	r3, [pc, #300]	; (80161a8 <HAL_ADC_IRQHandler+0x240>)
 801607a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8016082:	6a3b      	ldr	r3, [r7, #32]
 8016084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016088:	2b00      	cmp	r3, #0
 801608a:	d135      	bne.n	80160f8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	f003 0308 	and.w	r3, r3, #8
 8016096:	2b08      	cmp	r3, #8
 8016098:	d12e      	bne.n	80160f8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ff fc58 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d11a      	bne.n	80160e0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	685a      	ldr	r2, [r3, #4]
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f022 020c 	bic.w	r2, r2, #12
 80160b8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d112      	bne.n	80160f8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160d6:	f043 0201 	orr.w	r2, r3, #1
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	661a      	str	r2, [r3, #96]	; 0x60
 80160de:	e00b      	b.n	80160f8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160e4:	f043 0210 	orr.w	r2, r3, #16
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160f0:	f043 0201 	orr.w	r2, r3, #1
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f7f8 f8d8 	bl	800e2ae <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	220c      	movs	r2, #12
 8016104:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016106:	69fb      	ldr	r3, [r7, #28]
 8016108:	f003 0320 	and.w	r3, r3, #32
 801610c:	2b00      	cmp	r3, #0
 801610e:	d004      	beq.n	801611a <HAL_ADC_IRQHandler+0x1b2>
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	f003 0320 	and.w	r3, r3, #32
 8016116:	2b00      	cmp	r3, #0
 8016118:	d10b      	bne.n	8016132 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801611a:	69fb      	ldr	r3, [r7, #28]
 801611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016120:	2b00      	cmp	r3, #0
 8016122:	f000 80a0 	beq.w	8016266 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016126:	69bb      	ldr	r3, [r7, #24]
 8016128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801612c:	2b00      	cmp	r3, #0
 801612e:	f000 809a 	beq.w	8016266 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016136:	f003 0310 	and.w	r3, r3, #16
 801613a:	2b00      	cmp	r3, #0
 801613c:	d105      	bne.n	801614a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016142:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	4618      	mov	r0, r3
 8016150:	f7ff fadc 	bl	801570c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8016154:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4618      	mov	r0, r3
 801615c:	f7ff fa5a 	bl	8015614 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016160:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4a11      	ldr	r2, [pc, #68]	; (80161ac <HAL_ADC_IRQHandler+0x244>)
 8016168:	4293      	cmp	r3, r2
 801616a:	d002      	beq.n	8016172 <HAL_ADC_IRQHandler+0x20a>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	e000      	b.n	8016174 <HAL_ADC_IRQHandler+0x20c>
 8016172:	4b0d      	ldr	r3, [pc, #52]	; (80161a8 <HAL_ADC_IRQHandler+0x240>)
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	6812      	ldr	r2, [r2, #0]
 8016178:	4293      	cmp	r3, r2
 801617a:	d008      	beq.n	801618e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d005      	beq.n	801618e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2b06      	cmp	r3, #6
 8016186:	d002      	beq.n	801618e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	2b07      	cmp	r3, #7
 801618c:	d104      	bne.n	8016198 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	623b      	str	r3, [r7, #32]
 8016196:	e014      	b.n	80161c2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	4a03      	ldr	r2, [pc, #12]	; (80161ac <HAL_ADC_IRQHandler+0x244>)
 801619e:	4293      	cmp	r3, r2
 80161a0:	d00a      	beq.n	80161b8 <HAL_ADC_IRQHandler+0x250>
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	e008      	b.n	80161ba <HAL_ADC_IRQHandler+0x252>
 80161a8:	40022000 	.word	0x40022000
 80161ac:	40022100 	.word	0x40022100
 80161b0:	40022300 	.word	0x40022300
 80161b4:	58026300 	.word	0x58026300
 80161b8:	4b84      	ldr	r3, [pc, #528]	; (80163cc <HAL_ADC_IRQHandler+0x464>)
 80161ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	68db      	ldr	r3, [r3, #12]
 80161c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d047      	beq.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80161c8:	6a3b      	ldr	r3, [r7, #32]
 80161ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d007      	beq.n	80161e2 <HAL_ADC_IRQHandler+0x27a>
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d03f      	beq.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80161d8:	6a3b      	ldr	r3, [r7, #32]
 80161da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d13a      	bne.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161ec:	2b40      	cmp	r3, #64	; 0x40
 80161ee:	d133      	bne.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d12e      	bne.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	4618      	mov	r0, r3
 8016200:	f7ff fbbb 	bl	801597a <LL_ADC_INJ_IsConversionOngoing>
 8016204:	4603      	mov	r3, r0
 8016206:	2b00      	cmp	r3, #0
 8016208:	d11a      	bne.n	8016240 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	685a      	ldr	r2, [r3, #4]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016218:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801621e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801622e:	2b00      	cmp	r3, #0
 8016230:	d112      	bne.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016236:	f043 0201 	orr.w	r2, r3, #1
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	661a      	str	r2, [r3, #96]	; 0x60
 801623e:	e00b      	b.n	8016258 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016244:	f043 0210 	orr.w	r2, r3, #16
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016250:	f043 0201 	orr.w	r2, r3, #1
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f001 f83b 	bl	80172d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	2260      	movs	r2, #96	; 0x60
 8016264:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8016266:	69fb      	ldr	r3, [r7, #28]
 8016268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801626c:	2b00      	cmp	r3, #0
 801626e:	d011      	beq.n	8016294 <HAL_ADC_IRQHandler+0x32c>
 8016270:	69bb      	ldr	r3, [r7, #24]
 8016272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00c      	beq.n	8016294 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801627e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 f8b2 	bl	80163f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2280      	movs	r2, #128	; 0x80
 8016292:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8016294:	69fb      	ldr	r3, [r7, #28]
 8016296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801629a:	2b00      	cmp	r3, #0
 801629c:	d012      	beq.n	80162c4 <HAL_ADC_IRQHandler+0x35c>
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d00d      	beq.n	80162c4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f001 f821 	bl	80172fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80162c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80162c4:	69fb      	ldr	r3, [r7, #28]
 80162c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d012      	beq.n	80162f4 <HAL_ADC_IRQHandler+0x38c>
 80162ce:	69bb      	ldr	r3, [r7, #24]
 80162d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d00d      	beq.n	80162f4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f001 f813 	bl	8017310 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80162f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	f003 0310 	and.w	r3, r3, #16
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d043      	beq.n	8016386 <HAL_ADC_IRQHandler+0x41e>
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	f003 0310 	and.w	r3, r3, #16
 8016304:	2b00      	cmp	r3, #0
 8016306:	d03e      	beq.n	8016386 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801630c:	2b00      	cmp	r3, #0
 801630e:	d102      	bne.n	8016316 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8016310:	2301      	movs	r3, #1
 8016312:	627b      	str	r3, [r7, #36]	; 0x24
 8016314:	e021      	b.n	801635a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d015      	beq.n	8016348 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4a2a      	ldr	r2, [pc, #168]	; (80163cc <HAL_ADC_IRQHandler+0x464>)
 8016322:	4293      	cmp	r3, r2
 8016324:	d004      	beq.n	8016330 <HAL_ADC_IRQHandler+0x3c8>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4a29      	ldr	r2, [pc, #164]	; (80163d0 <HAL_ADC_IRQHandler+0x468>)
 801632c:	4293      	cmp	r3, r2
 801632e:	d101      	bne.n	8016334 <HAL_ADC_IRQHandler+0x3cc>
 8016330:	4b28      	ldr	r3, [pc, #160]	; (80163d4 <HAL_ADC_IRQHandler+0x46c>)
 8016332:	e000      	b.n	8016336 <HAL_ADC_IRQHandler+0x3ce>
 8016334:	4b28      	ldr	r3, [pc, #160]	; (80163d8 <HAL_ADC_IRQHandler+0x470>)
 8016336:	4618      	mov	r0, r3
 8016338:	f7ff fa74 	bl	8015824 <LL_ADC_GetMultiDMATransfer>
 801633c:	4603      	mov	r3, r0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d00b      	beq.n	801635a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016342:	2301      	movs	r3, #1
 8016344:	627b      	str	r3, [r7, #36]	; 0x24
 8016346:	e008      	b.n	801635a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	68db      	ldr	r3, [r3, #12]
 801634e:	f003 0303 	and.w	r3, r3, #3
 8016352:	2b00      	cmp	r3, #0
 8016354:	d001      	beq.n	801635a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016356:	2301      	movs	r3, #1
 8016358:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635c:	2b01      	cmp	r3, #1
 801635e:	d10e      	bne.n	801637e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016364:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016370:	f043 0202 	orr.w	r2, r3, #2
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f000 f843 	bl	8016404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2210      	movs	r2, #16
 8016384:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801638c:	2b00      	cmp	r3, #0
 801638e:	d018      	beq.n	80163c2 <HAL_ADC_IRQHandler+0x45a>
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016396:	2b00      	cmp	r3, #0
 8016398:	d013      	beq.n	80163c2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801639e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163aa:	f043 0208 	orr.w	r2, r3, #8
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80163ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 ff93 	bl	80172e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80163c2:	bf00      	nop
 80163c4:	3728      	adds	r7, #40	; 0x28
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	40022000 	.word	0x40022000
 80163d0:	40022100 	.word	0x40022100
 80163d4:	40022300 	.word	0x40022300
 80163d8:	58026300 	.word	0x58026300

080163dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80163e4:	bf00      	nop
 80163e6:	370c      	adds	r7, #12
 80163e8:	46bd      	mov	sp, r7
 80163ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ee:	4770      	bx	lr

080163f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80163f0:	b480      	push	{r7}
 80163f2:	b083      	sub	sp, #12
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80163f8:	bf00      	nop
 80163fa:	370c      	adds	r7, #12
 80163fc:	46bd      	mov	sp, r7
 80163fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016402:	4770      	bx	lr

08016404 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801640c:	bf00      	nop
 801640e:	370c      	adds	r7, #12
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr

08016418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016418:	b590      	push	{r4, r7, lr}
 801641a:	b0b9      	sub	sp, #228	; 0xe4
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016422:	2300      	movs	r3, #0
 8016424:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016428:	2300      	movs	r3, #0
 801642a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016432:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	68db      	ldr	r3, [r3, #12]
 8016438:	4aa9      	ldr	r2, [pc, #676]	; (80166e0 <HAL_ADC_ConfigChannel+0x2c8>)
 801643a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016442:	2b01      	cmp	r3, #1
 8016444:	d102      	bne.n	801644c <HAL_ADC_ConfigChannel+0x34>
 8016446:	2302      	movs	r3, #2
 8016448:	f000 bcfa 	b.w	8016e40 <HAL_ADC_ConfigChannel+0xa28>
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2201      	movs	r2, #1
 8016450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	4618      	mov	r0, r3
 801645a:	f7ff fa7b 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	f040 84de 	bne.w	8016e22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	4a9e      	ldr	r2, [pc, #632]	; (80166e4 <HAL_ADC_ConfigChannel+0x2cc>)
 801646c:	4293      	cmp	r3, r2
 801646e:	d033      	beq.n	80164d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016478:	2b00      	cmp	r3, #0
 801647a:	d108      	bne.n	801648e <HAL_ADC_ConfigChannel+0x76>
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	0e9b      	lsrs	r3, r3, #26
 8016482:	f003 031f 	and.w	r3, r3, #31
 8016486:	2201      	movs	r2, #1
 8016488:	fa02 f303 	lsl.w	r3, r2, r3
 801648c:	e01d      	b.n	80164ca <HAL_ADC_ConfigChannel+0xb2>
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801649a:	fa93 f3a3 	rbit	r3, r3
 801649e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80164a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80164a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80164aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d101      	bne.n	80164b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80164b2:	2320      	movs	r3, #32
 80164b4:	e004      	b.n	80164c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80164b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80164ba:	fab3 f383 	clz	r3, r3
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	f003 031f 	and.w	r3, r3, #31
 80164c4:	2201      	movs	r2, #1
 80164c6:	fa02 f303 	lsl.w	r3, r2, r3
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	6812      	ldr	r2, [r2, #0]
 80164ce:	69d1      	ldr	r1, [r2, #28]
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	6812      	ldr	r2, [r2, #0]
 80164d4:	430b      	orrs	r3, r1
 80164d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	6818      	ldr	r0, [r3, #0]
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	6859      	ldr	r1, [r3, #4]
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	461a      	mov	r2, r3
 80164e6:	f7ff f8a8 	bl	801563a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7ff fa30 	bl	8015954 <LL_ADC_REG_IsConversionOngoing>
 80164f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	4618      	mov	r0, r3
 80164fe:	f7ff fa3c 	bl	801597a <LL_ADC_INJ_IsConversionOngoing>
 8016502:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801650a:	2b00      	cmp	r3, #0
 801650c:	f040 8270 	bne.w	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016510:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016514:	2b00      	cmp	r3, #0
 8016516:	f040 826b 	bne.w	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	6818      	ldr	r0, [r3, #0]
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	689b      	ldr	r3, [r3, #8]
 8016526:	461a      	mov	r2, r3
 8016528:	f7ff f903 	bl	8015732 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	4a6c      	ldr	r2, [pc, #432]	; (80166e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8016532:	4293      	cmp	r3, r2
 8016534:	d10d      	bne.n	8016552 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	695a      	ldr	r2, [r3, #20]
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	08db      	lsrs	r3, r3, #3
 8016542:	f003 0303 	and.w	r3, r3, #3
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	fa02 f303 	lsl.w	r3, r2, r3
 801654c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016550:	e032      	b.n	80165b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016552:	4b65      	ldr	r3, [pc, #404]	; (80166e8 <HAL_ADC_ConfigChannel+0x2d0>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801655a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801655e:	d10b      	bne.n	8016578 <HAL_ADC_ConfigChannel+0x160>
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	695a      	ldr	r2, [r3, #20]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	089b      	lsrs	r3, r3, #2
 801656c:	f003 0307 	and.w	r3, r3, #7
 8016570:	005b      	lsls	r3, r3, #1
 8016572:	fa02 f303 	lsl.w	r3, r2, r3
 8016576:	e01d      	b.n	80165b4 <HAL_ADC_ConfigChannel+0x19c>
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	f003 0310 	and.w	r3, r3, #16
 8016582:	2b00      	cmp	r3, #0
 8016584:	d10b      	bne.n	801659e <HAL_ADC_ConfigChannel+0x186>
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	695a      	ldr	r2, [r3, #20]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	68db      	ldr	r3, [r3, #12]
 8016590:	089b      	lsrs	r3, r3, #2
 8016592:	f003 0307 	and.w	r3, r3, #7
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	fa02 f303 	lsl.w	r3, r2, r3
 801659c:	e00a      	b.n	80165b4 <HAL_ADC_ConfigChannel+0x19c>
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	695a      	ldr	r2, [r3, #20]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	089b      	lsrs	r3, r3, #2
 80165aa:	f003 0304 	and.w	r3, r3, #4
 80165ae:	005b      	lsls	r3, r3, #1
 80165b0:	fa02 f303 	lsl.w	r3, r2, r3
 80165b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	691b      	ldr	r3, [r3, #16]
 80165bc:	2b04      	cmp	r3, #4
 80165be:	d048      	beq.n	8016652 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6818      	ldr	r0, [r3, #0]
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	6919      	ldr	r1, [r3, #16]
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165d0:	f7fe ff2e 	bl	8015430 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	4a42      	ldr	r2, [pc, #264]	; (80166e4 <HAL_ADC_ConfigChannel+0x2cc>)
 80165da:	4293      	cmp	r3, r2
 80165dc:	d119      	bne.n	8016612 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	6818      	ldr	r0, [r3, #0]
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	6919      	ldr	r1, [r3, #16]
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	69db      	ldr	r3, [r3, #28]
 80165ea:	461a      	mov	r2, r3
 80165ec:	f7fe ffc6 	bl	801557c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6818      	ldr	r0, [r3, #0]
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	6919      	ldr	r1, [r3, #16]
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80165fe:	2b01      	cmp	r3, #1
 8016600:	d102      	bne.n	8016608 <HAL_ADC_ConfigChannel+0x1f0>
 8016602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016606:	e000      	b.n	801660a <HAL_ADC_ConfigChannel+0x1f2>
 8016608:	2300      	movs	r3, #0
 801660a:	461a      	mov	r2, r3
 801660c:	f7fe ff94 	bl	8015538 <LL_ADC_SetOffsetSaturation>
 8016610:	e1ee      	b.n	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6818      	ldr	r0, [r3, #0]
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	6919      	ldr	r1, [r3, #16]
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016620:	2b01      	cmp	r3, #1
 8016622:	d102      	bne.n	801662a <HAL_ADC_ConfigChannel+0x212>
 8016624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016628:	e000      	b.n	801662c <HAL_ADC_ConfigChannel+0x214>
 801662a:	2300      	movs	r3, #0
 801662c:	461a      	mov	r2, r3
 801662e:	f7fe ff61 	bl	80154f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6818      	ldr	r0, [r3, #0]
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	6919      	ldr	r1, [r3, #16]
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	7e1b      	ldrb	r3, [r3, #24]
 801663e:	2b01      	cmp	r3, #1
 8016640:	d102      	bne.n	8016648 <HAL_ADC_ConfigChannel+0x230>
 8016642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016646:	e000      	b.n	801664a <HAL_ADC_ConfigChannel+0x232>
 8016648:	2300      	movs	r3, #0
 801664a:	461a      	mov	r2, r3
 801664c:	f7fe ff38 	bl	80154c0 <LL_ADC_SetDataRightShift>
 8016650:	e1ce      	b.n	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	4a23      	ldr	r2, [pc, #140]	; (80166e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8016658:	4293      	cmp	r3, r2
 801665a:	f040 8181 	bne.w	8016960 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	2100      	movs	r1, #0
 8016664:	4618      	mov	r0, r3
 8016666:	f7fe ff15 	bl	8015494 <LL_ADC_GetOffsetChannel>
 801666a:	4603      	mov	r3, r0
 801666c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016670:	2b00      	cmp	r3, #0
 8016672:	d10a      	bne.n	801668a <HAL_ADC_ConfigChannel+0x272>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	2100      	movs	r1, #0
 801667a:	4618      	mov	r0, r3
 801667c:	f7fe ff0a 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016680:	4603      	mov	r3, r0
 8016682:	0e9b      	lsrs	r3, r3, #26
 8016684:	f003 021f 	and.w	r2, r3, #31
 8016688:	e01e      	b.n	80166c8 <HAL_ADC_ConfigChannel+0x2b0>
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	2100      	movs	r1, #0
 8016690:	4618      	mov	r0, r3
 8016692:	f7fe feff 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016696:	4603      	mov	r3, r0
 8016698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801669c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80166a0:	fa93 f3a3 	rbit	r3, r3
 80166a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80166a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80166b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d101      	bne.n	80166bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80166b8:	2320      	movs	r3, #32
 80166ba:	e004      	b.n	80166c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80166bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80166c0:	fab3 f383 	clz	r3, r3
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	461a      	mov	r2, r3
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d10b      	bne.n	80166ec <HAL_ADC_ConfigChannel+0x2d4>
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	0e9b      	lsrs	r3, r3, #26
 80166da:	f003 031f 	and.w	r3, r3, #31
 80166de:	e01e      	b.n	801671e <HAL_ADC_ConfigChannel+0x306>
 80166e0:	47ff0000 	.word	0x47ff0000
 80166e4:	58026000 	.word	0x58026000
 80166e8:	5c001000 	.word	0x5c001000
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80166f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166f8:	fa93 f3a3 	rbit	r3, r3
 80166fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8016700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8016708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801670c:	2b00      	cmp	r3, #0
 801670e:	d101      	bne.n	8016714 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8016710:	2320      	movs	r3, #32
 8016712:	e004      	b.n	801671e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8016714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016718:	fab3 f383 	clz	r3, r3
 801671c:	b2db      	uxtb	r3, r3
 801671e:	429a      	cmp	r2, r3
 8016720:	d106      	bne.n	8016730 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	2200      	movs	r2, #0
 8016728:	2100      	movs	r1, #0
 801672a:	4618      	mov	r0, r3
 801672c:	f7fe ff48 	bl	80155c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2101      	movs	r1, #1
 8016736:	4618      	mov	r0, r3
 8016738:	f7fe feac 	bl	8015494 <LL_ADC_GetOffsetChannel>
 801673c:	4603      	mov	r3, r0
 801673e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016742:	2b00      	cmp	r3, #0
 8016744:	d10a      	bne.n	801675c <HAL_ADC_ConfigChannel+0x344>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2101      	movs	r1, #1
 801674c:	4618      	mov	r0, r3
 801674e:	f7fe fea1 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016752:	4603      	mov	r3, r0
 8016754:	0e9b      	lsrs	r3, r3, #26
 8016756:	f003 021f 	and.w	r2, r3, #31
 801675a:	e01e      	b.n	801679a <HAL_ADC_ConfigChannel+0x382>
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	2101      	movs	r1, #1
 8016762:	4618      	mov	r0, r3
 8016764:	f7fe fe96 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016768:	4603      	mov	r3, r0
 801676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801676e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016772:	fa93 f3a3 	rbit	r3, r3
 8016776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 801677a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801677e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8016782:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016786:	2b00      	cmp	r3, #0
 8016788:	d101      	bne.n	801678e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 801678a:	2320      	movs	r3, #32
 801678c:	e004      	b.n	8016798 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 801678e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016792:	fab3 f383 	clz	r3, r3
 8016796:	b2db      	uxtb	r3, r3
 8016798:	461a      	mov	r2, r3
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d105      	bne.n	80167b2 <HAL_ADC_ConfigChannel+0x39a>
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	0e9b      	lsrs	r3, r3, #26
 80167ac:	f003 031f 	and.w	r3, r3, #31
 80167b0:	e018      	b.n	80167e4 <HAL_ADC_ConfigChannel+0x3cc>
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80167be:	fa93 f3a3 	rbit	r3, r3
 80167c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80167c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80167ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80167ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d101      	bne.n	80167da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80167d6:	2320      	movs	r3, #32
 80167d8:	e004      	b.n	80167e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80167da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80167de:	fab3 f383 	clz	r3, r3
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d106      	bne.n	80167f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2200      	movs	r2, #0
 80167ee:	2101      	movs	r1, #1
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7fe fee5 	bl	80155c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	2102      	movs	r1, #2
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7fe fe49 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016802:	4603      	mov	r3, r0
 8016804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016808:	2b00      	cmp	r3, #0
 801680a:	d10a      	bne.n	8016822 <HAL_ADC_ConfigChannel+0x40a>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2102      	movs	r1, #2
 8016812:	4618      	mov	r0, r3
 8016814:	f7fe fe3e 	bl	8015494 <LL_ADC_GetOffsetChannel>
 8016818:	4603      	mov	r3, r0
 801681a:	0e9b      	lsrs	r3, r3, #26
 801681c:	f003 021f 	and.w	r2, r3, #31
 8016820:	e01e      	b.n	8016860 <HAL_ADC_ConfigChannel+0x448>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2102      	movs	r1, #2
 8016828:	4618      	mov	r0, r3
 801682a:	f7fe fe33 	bl	8015494 <LL_ADC_GetOffsetChannel>
 801682e:	4603      	mov	r3, r0
 8016830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016838:	fa93 f3a3 	rbit	r3, r3
 801683c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8016840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8016848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801684c:	2b00      	cmp	r3, #0
 801684e:	d101      	bne.n	8016854 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8016850:	2320      	movs	r3, #32
 8016852:	e004      	b.n	801685e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8016854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016858:	fab3 f383 	clz	r3, r3
 801685c:	b2db      	uxtb	r3, r3
 801685e:	461a      	mov	r2, r3
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016868:	2b00      	cmp	r3, #0
 801686a:	d105      	bne.n	8016878 <HAL_ADC_ConfigChannel+0x460>
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	0e9b      	lsrs	r3, r3, #26
 8016872:	f003 031f 	and.w	r3, r3, #31
 8016876:	e014      	b.n	80168a2 <HAL_ADC_ConfigChannel+0x48a>
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801687e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016880:	fa93 f3a3 	rbit	r3, r3
 8016884:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8016886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 801688c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016890:	2b00      	cmp	r3, #0
 8016892:	d101      	bne.n	8016898 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8016894:	2320      	movs	r3, #32
 8016896:	e004      	b.n	80168a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8016898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801689c:	fab3 f383 	clz	r3, r3
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d106      	bne.n	80168b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2200      	movs	r2, #0
 80168ac:	2102      	movs	r1, #2
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7fe fe86 	bl	80155c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2103      	movs	r1, #3
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fe fdea 	bl	8015494 <LL_ADC_GetOffsetChannel>
 80168c0:	4603      	mov	r3, r0
 80168c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d10a      	bne.n	80168e0 <HAL_ADC_ConfigChannel+0x4c8>
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2103      	movs	r1, #3
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7fe fddf 	bl	8015494 <LL_ADC_GetOffsetChannel>
 80168d6:	4603      	mov	r3, r0
 80168d8:	0e9b      	lsrs	r3, r3, #26
 80168da:	f003 021f 	and.w	r2, r3, #31
 80168de:	e017      	b.n	8016910 <HAL_ADC_ConfigChannel+0x4f8>
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	2103      	movs	r1, #3
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fe fdd4 	bl	8015494 <LL_ADC_GetOffsetChannel>
 80168ec:	4603      	mov	r3, r0
 80168ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80168f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168f2:	fa93 f3a3 	rbit	r3, r3
 80168f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80168f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80168fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d101      	bne.n	8016906 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8016902:	2320      	movs	r3, #32
 8016904:	e003      	b.n	801690e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8016906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016908:	fab3 f383 	clz	r3, r3
 801690c:	b2db      	uxtb	r3, r3
 801690e:	461a      	mov	r2, r3
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016918:	2b00      	cmp	r3, #0
 801691a:	d105      	bne.n	8016928 <HAL_ADC_ConfigChannel+0x510>
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	0e9b      	lsrs	r3, r3, #26
 8016922:	f003 031f 	and.w	r3, r3, #31
 8016926:	e011      	b.n	801694c <HAL_ADC_ConfigChannel+0x534>
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801692e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016930:	fa93 f3a3 	rbit	r3, r3
 8016934:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8016936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016938:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 801693a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801693c:	2b00      	cmp	r3, #0
 801693e:	d101      	bne.n	8016944 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8016940:	2320      	movs	r3, #32
 8016942:	e003      	b.n	801694c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8016944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016946:	fab3 f383 	clz	r3, r3
 801694a:	b2db      	uxtb	r3, r3
 801694c:	429a      	cmp	r2, r3
 801694e:	d14f      	bne.n	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	2200      	movs	r2, #0
 8016956:	2103      	movs	r1, #3
 8016958:	4618      	mov	r0, r3
 801695a:	f7fe fe31 	bl	80155c0 <LL_ADC_SetOffsetState>
 801695e:	e047      	b.n	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	069b      	lsls	r3, r3, #26
 8016970:	429a      	cmp	r2, r3
 8016972:	d107      	bne.n	8016984 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016982:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801698a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	069b      	lsls	r3, r3, #26
 8016994:	429a      	cmp	r2, r3
 8016996:	d107      	bne.n	80169a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80169a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80169ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	069b      	lsls	r3, r3, #26
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d107      	bne.n	80169cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80169ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	069b      	lsls	r3, r3, #26
 80169dc:	429a      	cmp	r2, r3
 80169de:	d107      	bne.n	80169f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80169ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7fe ff85 	bl	8015904 <LL_ADC_IsEnabled>
 80169fa:	4603      	mov	r3, r0
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	f040 8219 	bne.w	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	6818      	ldr	r0, [r3, #0]
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	6819      	ldr	r1, [r3, #0]
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	68db      	ldr	r3, [r3, #12]
 8016a0e:	461a      	mov	r2, r3
 8016a10:	f7fe feba 	bl	8015788 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	68db      	ldr	r3, [r3, #12]
 8016a18:	4aa1      	ldr	r2, [pc, #644]	; (8016ca0 <HAL_ADC_ConfigChannel+0x888>)
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	f040 812e 	bne.w	8016c7c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10b      	bne.n	8016a48 <HAL_ADC_ConfigChannel+0x630>
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	0e9b      	lsrs	r3, r3, #26
 8016a36:	3301      	adds	r3, #1
 8016a38:	f003 031f 	and.w	r3, r3, #31
 8016a3c:	2b09      	cmp	r3, #9
 8016a3e:	bf94      	ite	ls
 8016a40:	2301      	movls	r3, #1
 8016a42:	2300      	movhi	r3, #0
 8016a44:	b2db      	uxtb	r3, r3
 8016a46:	e019      	b.n	8016a7c <HAL_ADC_ConfigChannel+0x664>
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016a50:	fa93 f3a3 	rbit	r3, r3
 8016a54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8016a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8016a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d101      	bne.n	8016a64 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8016a60:	2320      	movs	r3, #32
 8016a62:	e003      	b.n	8016a6c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8016a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a66:	fab3 f383 	clz	r3, r3
 8016a6a:	b2db      	uxtb	r3, r3
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	f003 031f 	and.w	r3, r3, #31
 8016a72:	2b09      	cmp	r3, #9
 8016a74:	bf94      	ite	ls
 8016a76:	2301      	movls	r3, #1
 8016a78:	2300      	movhi	r3, #0
 8016a7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d079      	beq.n	8016b74 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d107      	bne.n	8016a9c <HAL_ADC_ConfigChannel+0x684>
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	0e9b      	lsrs	r3, r3, #26
 8016a92:	3301      	adds	r3, #1
 8016a94:	069b      	lsls	r3, r3, #26
 8016a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a9a:	e015      	b.n	8016ac8 <HAL_ADC_ConfigChannel+0x6b0>
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016aa4:	fa93 f3a3 	rbit	r3, r3
 8016aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8016aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016aac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8016aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d101      	bne.n	8016ab8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8016ab4:	2320      	movs	r3, #32
 8016ab6:	e003      	b.n	8016ac0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8016ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016aba:	fab3 f383 	clz	r3, r3
 8016abe:	b2db      	uxtb	r3, r3
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	069b      	lsls	r3, r3, #26
 8016ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d109      	bne.n	8016ae8 <HAL_ADC_ConfigChannel+0x6d0>
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	0e9b      	lsrs	r3, r3, #26
 8016ada:	3301      	adds	r3, #1
 8016adc:	f003 031f 	and.w	r3, r3, #31
 8016ae0:	2101      	movs	r1, #1
 8016ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ae6:	e017      	b.n	8016b18 <HAL_ADC_ConfigChannel+0x700>
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016af0:	fa93 f3a3 	rbit	r3, r3
 8016af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8016af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016af8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8016afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d101      	bne.n	8016b04 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8016b00:	2320      	movs	r3, #32
 8016b02:	e003      	b.n	8016b0c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8016b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b06:	fab3 f383 	clz	r3, r3
 8016b0a:	b2db      	uxtb	r3, r3
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	f003 031f 	and.w	r3, r3, #31
 8016b12:	2101      	movs	r1, #1
 8016b14:	fa01 f303 	lsl.w	r3, r1, r3
 8016b18:	ea42 0103 	orr.w	r1, r2, r3
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d10a      	bne.n	8016b3e <HAL_ADC_ConfigChannel+0x726>
 8016b28:	683b      	ldr	r3, [r7, #0]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	0e9b      	lsrs	r3, r3, #26
 8016b2e:	3301      	adds	r3, #1
 8016b30:	f003 021f 	and.w	r2, r3, #31
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	051b      	lsls	r3, r3, #20
 8016b3c:	e018      	b.n	8016b70 <HAL_ADC_ConfigChannel+0x758>
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b46:	fa93 f3a3 	rbit	r3, r3
 8016b4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8016b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8016b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d101      	bne.n	8016b5a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8016b56:	2320      	movs	r3, #32
 8016b58:	e003      	b.n	8016b62 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8016b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5c:	fab3 f383 	clz	r3, r3
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	3301      	adds	r3, #1
 8016b64:	f003 021f 	and.w	r2, r3, #31
 8016b68:	4613      	mov	r3, r2
 8016b6a:	005b      	lsls	r3, r3, #1
 8016b6c:	4413      	add	r3, r2
 8016b6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016b70:	430b      	orrs	r3, r1
 8016b72:	e07e      	b.n	8016c72 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d107      	bne.n	8016b90 <HAL_ADC_ConfigChannel+0x778>
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	0e9b      	lsrs	r3, r3, #26
 8016b86:	3301      	adds	r3, #1
 8016b88:	069b      	lsls	r3, r3, #26
 8016b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016b8e:	e015      	b.n	8016bbc <HAL_ADC_ConfigChannel+0x7a4>
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b98:	fa93 f3a3 	rbit	r3, r3
 8016b9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8016ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d101      	bne.n	8016bac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8016ba8:	2320      	movs	r3, #32
 8016baa:	e003      	b.n	8016bb4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8016bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bae:	fab3 f383 	clz	r3, r3
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	069b      	lsls	r3, r3, #26
 8016bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d109      	bne.n	8016bdc <HAL_ADC_ConfigChannel+0x7c4>
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	0e9b      	lsrs	r3, r3, #26
 8016bce:	3301      	adds	r3, #1
 8016bd0:	f003 031f 	and.w	r3, r3, #31
 8016bd4:	2101      	movs	r1, #1
 8016bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8016bda:	e017      	b.n	8016c0c <HAL_ADC_ConfigChannel+0x7f4>
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	fa93 f3a3 	rbit	r3, r3
 8016be8:	61bb      	str	r3, [r7, #24]
  return result;
 8016bea:	69bb      	ldr	r3, [r7, #24]
 8016bec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8016bee:	6a3b      	ldr	r3, [r7, #32]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d101      	bne.n	8016bf8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8016bf4:	2320      	movs	r3, #32
 8016bf6:	e003      	b.n	8016c00 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8016bf8:	6a3b      	ldr	r3, [r7, #32]
 8016bfa:	fab3 f383 	clz	r3, r3
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	3301      	adds	r3, #1
 8016c02:	f003 031f 	and.w	r3, r3, #31
 8016c06:	2101      	movs	r1, #1
 8016c08:	fa01 f303 	lsl.w	r3, r1, r3
 8016c0c:	ea42 0103 	orr.w	r1, r2, r3
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d10d      	bne.n	8016c38 <HAL_ADC_ConfigChannel+0x820>
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	0e9b      	lsrs	r3, r3, #26
 8016c22:	3301      	adds	r3, #1
 8016c24:	f003 021f 	and.w	r2, r3, #31
 8016c28:	4613      	mov	r3, r2
 8016c2a:	005b      	lsls	r3, r3, #1
 8016c2c:	4413      	add	r3, r2
 8016c2e:	3b1e      	subs	r3, #30
 8016c30:	051b      	lsls	r3, r3, #20
 8016c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016c36:	e01b      	b.n	8016c70 <HAL_ADC_ConfigChannel+0x858>
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	fa93 f3a3 	rbit	r3, r3
 8016c44:	60fb      	str	r3, [r7, #12]
  return result;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016c4a:	697b      	ldr	r3, [r7, #20]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d101      	bne.n	8016c54 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8016c50:	2320      	movs	r3, #32
 8016c52:	e003      	b.n	8016c5c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	fab3 f383 	clz	r3, r3
 8016c5a:	b2db      	uxtb	r3, r3
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	f003 021f 	and.w	r2, r3, #31
 8016c62:	4613      	mov	r3, r2
 8016c64:	005b      	lsls	r3, r3, #1
 8016c66:	4413      	add	r3, r2
 8016c68:	3b1e      	subs	r3, #30
 8016c6a:	051b      	lsls	r3, r3, #20
 8016c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016c70:	430b      	orrs	r3, r1
 8016c72:	683a      	ldr	r2, [r7, #0]
 8016c74:	6892      	ldr	r2, [r2, #8]
 8016c76:	4619      	mov	r1, r3
 8016c78:	f7fe fd5b 	bl	8015732 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f280 80d7 	bge.w	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	4a06      	ldr	r2, [pc, #24]	; (8016ca4 <HAL_ADC_ConfigChannel+0x88c>)
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	d004      	beq.n	8016c9a <HAL_ADC_ConfigChannel+0x882>
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	4a04      	ldr	r2, [pc, #16]	; (8016ca8 <HAL_ADC_ConfigChannel+0x890>)
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d10a      	bne.n	8016cb0 <HAL_ADC_ConfigChannel+0x898>
 8016c9a:	4b04      	ldr	r3, [pc, #16]	; (8016cac <HAL_ADC_ConfigChannel+0x894>)
 8016c9c:	e009      	b.n	8016cb2 <HAL_ADC_ConfigChannel+0x89a>
 8016c9e:	bf00      	nop
 8016ca0:	47ff0000 	.word	0x47ff0000
 8016ca4:	40022000 	.word	0x40022000
 8016ca8:	40022100 	.word	0x40022100
 8016cac:	40022300 	.word	0x40022300
 8016cb0:	4b65      	ldr	r3, [pc, #404]	; (8016e48 <HAL_ADC_ConfigChannel+0xa30>)
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7fe fbae 	bl	8015414 <LL_ADC_GetCommonPathInternalCh>
 8016cb8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	4a62      	ldr	r2, [pc, #392]	; (8016e4c <HAL_ADC_ConfigChannel+0xa34>)
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	d004      	beq.n	8016cd0 <HAL_ADC_ConfigChannel+0x8b8>
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4a61      	ldr	r2, [pc, #388]	; (8016e50 <HAL_ADC_ConfigChannel+0xa38>)
 8016ccc:	4293      	cmp	r3, r2
 8016cce:	d10e      	bne.n	8016cee <HAL_ADC_ConfigChannel+0x8d6>
 8016cd0:	485e      	ldr	r0, [pc, #376]	; (8016e4c <HAL_ADC_ConfigChannel+0xa34>)
 8016cd2:	f7fe fe17 	bl	8015904 <LL_ADC_IsEnabled>
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	485d      	ldr	r0, [pc, #372]	; (8016e50 <HAL_ADC_ConfigChannel+0xa38>)
 8016cda:	f7fe fe13 	bl	8015904 <LL_ADC_IsEnabled>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	4323      	orrs	r3, r4
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	bf0c      	ite	eq
 8016ce6:	2301      	moveq	r3, #1
 8016ce8:	2300      	movne	r3, #0
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	e008      	b.n	8016d00 <HAL_ADC_ConfigChannel+0x8e8>
 8016cee:	4859      	ldr	r0, [pc, #356]	; (8016e54 <HAL_ADC_ConfigChannel+0xa3c>)
 8016cf0:	f7fe fe08 	bl	8015904 <LL_ADC_IsEnabled>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	bf0c      	ite	eq
 8016cfa:	2301      	moveq	r3, #1
 8016cfc:	2300      	movne	r3, #0
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	f000 8084 	beq.w	8016e0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4a53      	ldr	r2, [pc, #332]	; (8016e58 <HAL_ADC_ConfigChannel+0xa40>)
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d132      	bne.n	8016d76 <HAL_ADC_ConfigChannel+0x95e>
 8016d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d12c      	bne.n	8016d76 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4a4c      	ldr	r2, [pc, #304]	; (8016e54 <HAL_ADC_ConfigChannel+0xa3c>)
 8016d22:	4293      	cmp	r3, r2
 8016d24:	f040 8086 	bne.w	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	4a47      	ldr	r2, [pc, #284]	; (8016e4c <HAL_ADC_ConfigChannel+0xa34>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d004      	beq.n	8016d3c <HAL_ADC_ConfigChannel+0x924>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4a46      	ldr	r2, [pc, #280]	; (8016e50 <HAL_ADC_ConfigChannel+0xa38>)
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d101      	bne.n	8016d40 <HAL_ADC_ConfigChannel+0x928>
 8016d3c:	4a47      	ldr	r2, [pc, #284]	; (8016e5c <HAL_ADC_ConfigChannel+0xa44>)
 8016d3e:	e000      	b.n	8016d42 <HAL_ADC_ConfigChannel+0x92a>
 8016d40:	4a41      	ldr	r2, [pc, #260]	; (8016e48 <HAL_ADC_ConfigChannel+0xa30>)
 8016d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	4610      	mov	r0, r2
 8016d4e:	f7fe fb4e 	bl	80153ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016d52:	4b43      	ldr	r3, [pc, #268]	; (8016e60 <HAL_ADC_ConfigChannel+0xa48>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	099b      	lsrs	r3, r3, #6
 8016d58:	4a42      	ldr	r2, [pc, #264]	; (8016e64 <HAL_ADC_ConfigChannel+0xa4c>)
 8016d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8016d5e:	099b      	lsrs	r3, r3, #6
 8016d60:	3301      	adds	r3, #1
 8016d62:	005b      	lsls	r3, r3, #1
 8016d64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016d66:	e002      	b.n	8016d6e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	3b01      	subs	r3, #1
 8016d6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d1f9      	bne.n	8016d68 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016d74:	e05e      	b.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	4a3b      	ldr	r2, [pc, #236]	; (8016e68 <HAL_ADC_ConfigChannel+0xa50>)
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	d120      	bne.n	8016dc2 <HAL_ADC_ConfigChannel+0x9aa>
 8016d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d11a      	bne.n	8016dc2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	4a30      	ldr	r2, [pc, #192]	; (8016e54 <HAL_ADC_ConfigChannel+0xa3c>)
 8016d92:	4293      	cmp	r3, r2
 8016d94:	d14e      	bne.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	4a2c      	ldr	r2, [pc, #176]	; (8016e4c <HAL_ADC_ConfigChannel+0xa34>)
 8016d9c:	4293      	cmp	r3, r2
 8016d9e:	d004      	beq.n	8016daa <HAL_ADC_ConfigChannel+0x992>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4a2a      	ldr	r2, [pc, #168]	; (8016e50 <HAL_ADC_ConfigChannel+0xa38>)
 8016da6:	4293      	cmp	r3, r2
 8016da8:	d101      	bne.n	8016dae <HAL_ADC_ConfigChannel+0x996>
 8016daa:	4a2c      	ldr	r2, [pc, #176]	; (8016e5c <HAL_ADC_ConfigChannel+0xa44>)
 8016dac:	e000      	b.n	8016db0 <HAL_ADC_ConfigChannel+0x998>
 8016dae:	4a26      	ldr	r2, [pc, #152]	; (8016e48 <HAL_ADC_ConfigChannel+0xa30>)
 8016db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016db8:	4619      	mov	r1, r3
 8016dba:	4610      	mov	r0, r2
 8016dbc:	f7fe fb17 	bl	80153ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016dc0:	e038      	b.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	4a29      	ldr	r2, [pc, #164]	; (8016e6c <HAL_ADC_ConfigChannel+0xa54>)
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	d133      	bne.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
 8016dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d12d      	bne.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	4a1d      	ldr	r2, [pc, #116]	; (8016e54 <HAL_ADC_ConfigChannel+0xa3c>)
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d128      	bne.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	4a19      	ldr	r2, [pc, #100]	; (8016e4c <HAL_ADC_ConfigChannel+0xa34>)
 8016de8:	4293      	cmp	r3, r2
 8016dea:	d004      	beq.n	8016df6 <HAL_ADC_ConfigChannel+0x9de>
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	4a17      	ldr	r2, [pc, #92]	; (8016e50 <HAL_ADC_ConfigChannel+0xa38>)
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d101      	bne.n	8016dfa <HAL_ADC_ConfigChannel+0x9e2>
 8016df6:	4a19      	ldr	r2, [pc, #100]	; (8016e5c <HAL_ADC_ConfigChannel+0xa44>)
 8016df8:	e000      	b.n	8016dfc <HAL_ADC_ConfigChannel+0x9e4>
 8016dfa:	4a13      	ldr	r2, [pc, #76]	; (8016e48 <HAL_ADC_ConfigChannel+0xa30>)
 8016dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016e04:	4619      	mov	r1, r3
 8016e06:	4610      	mov	r0, r2
 8016e08:	f7fe faf1 	bl	80153ee <LL_ADC_SetCommonPathInternalCh>
 8016e0c:	e012      	b.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e12:	f043 0220 	orr.w	r2, r3, #32
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8016e20:	e008      	b.n	8016e34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e26:	f043 0220 	orr.w	r2, r3, #32
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016e2e:	2301      	movs	r3, #1
 8016e30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	2200      	movs	r2, #0
 8016e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8016e3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	37e4      	adds	r7, #228	; 0xe4
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd90      	pop	{r4, r7, pc}
 8016e48:	58026300 	.word	0x58026300
 8016e4c:	40022000 	.word	0x40022000
 8016e50:	40022100 	.word	0x40022100
 8016e54:	58026000 	.word	0x58026000
 8016e58:	c7520000 	.word	0xc7520000
 8016e5c:	40022300 	.word	0x40022300
 8016e60:	24000004 	.word	0x24000004
 8016e64:	053e2d63 	.word	0x053e2d63
 8016e68:	c3210000 	.word	0xc3210000
 8016e6c:	cb840000 	.word	0xcb840000

08016e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7fe fd41 	bl	8015904 <LL_ADC_IsEnabled>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d16e      	bne.n	8016f66 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	689a      	ldr	r2, [r3, #8]
 8016e8e:	4b38      	ldr	r3, [pc, #224]	; (8016f70 <ADC_Enable+0x100>)
 8016e90:	4013      	ands	r3, r2
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00d      	beq.n	8016eb2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e9a:	f043 0210 	orr.w	r2, r3, #16
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ea6:	f043 0201 	orr.w	r2, r3, #1
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e05a      	b.n	8016f68 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fe fd10 	bl	80158dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016ebc:	f7fe fa78 	bl	80153b0 <HAL_GetTick>
 8016ec0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	4a2b      	ldr	r2, [pc, #172]	; (8016f74 <ADC_Enable+0x104>)
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	d004      	beq.n	8016ed6 <ADC_Enable+0x66>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4a29      	ldr	r2, [pc, #164]	; (8016f78 <ADC_Enable+0x108>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d101      	bne.n	8016eda <ADC_Enable+0x6a>
 8016ed6:	4b29      	ldr	r3, [pc, #164]	; (8016f7c <ADC_Enable+0x10c>)
 8016ed8:	e000      	b.n	8016edc <ADC_Enable+0x6c>
 8016eda:	4b29      	ldr	r3, [pc, #164]	; (8016f80 <ADC_Enable+0x110>)
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7fe fc93 	bl	8015808 <LL_ADC_GetMultimode>
 8016ee2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	4a23      	ldr	r2, [pc, #140]	; (8016f78 <ADC_Enable+0x108>)
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d002      	beq.n	8016ef4 <ADC_Enable+0x84>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	e000      	b.n	8016ef6 <ADC_Enable+0x86>
 8016ef4:	4b1f      	ldr	r3, [pc, #124]	; (8016f74 <ADC_Enable+0x104>)
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	6812      	ldr	r2, [r2, #0]
 8016efa:	4293      	cmp	r3, r2
 8016efc:	d02c      	beq.n	8016f58 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d130      	bne.n	8016f66 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016f04:	e028      	b.n	8016f58 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7fe fcfa 	bl	8015904 <LL_ADC_IsEnabled>
 8016f10:	4603      	mov	r3, r0
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d104      	bne.n	8016f20 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7fe fcde 	bl	80158dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016f20:	f7fe fa46 	bl	80153b0 <HAL_GetTick>
 8016f24:	4602      	mov	r2, r0
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	1ad3      	subs	r3, r2, r3
 8016f2a:	2b02      	cmp	r3, #2
 8016f2c:	d914      	bls.n	8016f58 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f003 0301 	and.w	r3, r3, #1
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d00d      	beq.n	8016f58 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f40:	f043 0210 	orr.w	r2, r3, #16
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f4c:	f043 0201 	orr.w	r2, r3, #1
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8016f54:	2301      	movs	r3, #1
 8016f56:	e007      	b.n	8016f68 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	f003 0301 	and.w	r3, r3, #1
 8016f62:	2b01      	cmp	r3, #1
 8016f64:	d1cf      	bne.n	8016f06 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016f66:	2300      	movs	r3, #0
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3710      	adds	r7, #16
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}
 8016f70:	8000003f 	.word	0x8000003f
 8016f74:	40022000 	.word	0x40022000
 8016f78:	40022100 	.word	0x40022100
 8016f7c:	40022300 	.word	0x40022300
 8016f80:	58026300 	.word	0x58026300

08016f84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b084      	sub	sp, #16
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d14b      	bne.n	8017036 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f003 0308 	and.w	r3, r3, #8
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d021      	beq.n	8016ffc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7fe fb29 	bl	8015614 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d032      	beq.n	801702e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	68db      	ldr	r3, [r3, #12]
 8016fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d12b      	bne.n	801702e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d11f      	bne.n	801702e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ff2:	f043 0201 	orr.w	r2, r3, #1
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	661a      	str	r2, [r3, #96]	; 0x60
 8016ffa:	e018      	b.n	801702e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	68db      	ldr	r3, [r3, #12]
 8017002:	f003 0303 	and.w	r3, r3, #3
 8017006:	2b00      	cmp	r3, #0
 8017008:	d111      	bne.n	801702e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801700e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801701a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801701e:	2b00      	cmp	r3, #0
 8017020:	d105      	bne.n	801702e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017026:	f043 0201 	orr.w	r2, r3, #1
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	f7f7 f93d 	bl	800e2ae <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8017034:	e00e      	b.n	8017054 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801703a:	f003 0310 	and.w	r3, r3, #16
 801703e:	2b00      	cmp	r3, #0
 8017040:	d003      	beq.n	801704a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f7ff f9de 	bl	8016404 <HAL_ADC_ErrorCallback>
}
 8017048:	e004      	b.n	8017054 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	4798      	blx	r3
}
 8017054:	bf00      	nop
 8017056:	3710      	adds	r7, #16
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}

0801705c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b084      	sub	sp, #16
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017068:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801706a:	68f8      	ldr	r0, [r7, #12]
 801706c:	f7ff f9b6 	bl	80163dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017070:	bf00      	nop
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017084:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801708a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017096:	f043 0204 	orr.w	r2, r3, #4
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801709e:	68f8      	ldr	r0, [r7, #12]
 80170a0:	f7ff f9b0 	bl	8016404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80170a4:	bf00      	nop
 80170a6:	3710      	adds	r7, #16
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b084      	sub	sp, #16
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	4a6c      	ldr	r2, [pc, #432]	; (801726c <ADC_ConfigureBoostMode+0x1c0>)
 80170ba:	4293      	cmp	r3, r2
 80170bc:	d004      	beq.n	80170c8 <ADC_ConfigureBoostMode+0x1c>
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	4a6b      	ldr	r2, [pc, #428]	; (8017270 <ADC_ConfigureBoostMode+0x1c4>)
 80170c4:	4293      	cmp	r3, r2
 80170c6:	d109      	bne.n	80170dc <ADC_ConfigureBoostMode+0x30>
 80170c8:	4b6a      	ldr	r3, [pc, #424]	; (8017274 <ADC_ConfigureBoostMode+0x1c8>)
 80170ca:	689b      	ldr	r3, [r3, #8]
 80170cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	bf14      	ite	ne
 80170d4:	2301      	movne	r3, #1
 80170d6:	2300      	moveq	r3, #0
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	e008      	b.n	80170ee <ADC_ConfigureBoostMode+0x42>
 80170dc:	4b66      	ldr	r3, [pc, #408]	; (8017278 <ADC_ConfigureBoostMode+0x1cc>)
 80170de:	689b      	ldr	r3, [r3, #8]
 80170e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	bf14      	ite	ne
 80170e8:	2301      	movne	r3, #1
 80170ea:	2300      	moveq	r3, #0
 80170ec:	b2db      	uxtb	r3, r3
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d01c      	beq.n	801712c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80170f2:	f004 fe95 	bl	801be20 <HAL_RCC_GetHCLKFreq>
 80170f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017100:	d010      	beq.n	8017124 <ADC_ConfigureBoostMode+0x78>
 8017102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017106:	d873      	bhi.n	80171f0 <ADC_ConfigureBoostMode+0x144>
 8017108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801710c:	d002      	beq.n	8017114 <ADC_ConfigureBoostMode+0x68>
 801710e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017112:	d16d      	bne.n	80171f0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	0c1b      	lsrs	r3, r3, #16
 801711a:	68fa      	ldr	r2, [r7, #12]
 801711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017120:	60fb      	str	r3, [r7, #12]
        break;
 8017122:	e068      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	089b      	lsrs	r3, r3, #2
 8017128:	60fb      	str	r3, [r7, #12]
        break;
 801712a:	e064      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 801712c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017130:	f04f 0100 	mov.w	r1, #0
 8017134:	f006 f85a 	bl	801d1ec <HAL_RCCEx_GetPeriphCLKFreq>
 8017138:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	685b      	ldr	r3, [r3, #4]
 801713e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017142:	d051      	beq.n	80171e8 <ADC_ConfigureBoostMode+0x13c>
 8017144:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017148:	d854      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 801714a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 801714e:	d047      	beq.n	80171e0 <ADC_ConfigureBoostMode+0x134>
 8017150:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017154:	d84e      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 8017156:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 801715a:	d03d      	beq.n	80171d8 <ADC_ConfigureBoostMode+0x12c>
 801715c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017160:	d848      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 8017162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017166:	d033      	beq.n	80171d0 <ADC_ConfigureBoostMode+0x124>
 8017168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801716c:	d842      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 801716e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017172:	d029      	beq.n	80171c8 <ADC_ConfigureBoostMode+0x11c>
 8017174:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017178:	d83c      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 801717a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 801717e:	d01a      	beq.n	80171b6 <ADC_ConfigureBoostMode+0x10a>
 8017180:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8017184:	d836      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 8017186:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 801718a:	d014      	beq.n	80171b6 <ADC_ConfigureBoostMode+0x10a>
 801718c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8017190:	d830      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 8017192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017196:	d00e      	beq.n	80171b6 <ADC_ConfigureBoostMode+0x10a>
 8017198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801719c:	d82a      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 801719e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80171a2:	d008      	beq.n	80171b6 <ADC_ConfigureBoostMode+0x10a>
 80171a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80171a8:	d824      	bhi.n	80171f4 <ADC_ConfigureBoostMode+0x148>
 80171aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80171ae:	d002      	beq.n	80171b6 <ADC_ConfigureBoostMode+0x10a>
 80171b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80171b4:	d11e      	bne.n	80171f4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	0c9b      	lsrs	r3, r3, #18
 80171bc:	005b      	lsls	r3, r3, #1
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80171c4:	60fb      	str	r3, [r7, #12]
        break;
 80171c6:	e016      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	091b      	lsrs	r3, r3, #4
 80171cc:	60fb      	str	r3, [r7, #12]
        break;
 80171ce:	e012      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	095b      	lsrs	r3, r3, #5
 80171d4:	60fb      	str	r3, [r7, #12]
        break;
 80171d6:	e00e      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	099b      	lsrs	r3, r3, #6
 80171dc:	60fb      	str	r3, [r7, #12]
        break;
 80171de:	e00a      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	09db      	lsrs	r3, r3, #7
 80171e4:	60fb      	str	r3, [r7, #12]
        break;
 80171e6:	e006      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	0a1b      	lsrs	r3, r3, #8
 80171ec:	60fb      	str	r3, [r7, #12]
        break;
 80171ee:	e002      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80171f0:	bf00      	nop
 80171f2:	e000      	b.n	80171f6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80171f4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	085b      	lsrs	r3, r3, #1
 80171fa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	4a1f      	ldr	r2, [pc, #124]	; (801727c <ADC_ConfigureBoostMode+0x1d0>)
 8017200:	4293      	cmp	r3, r2
 8017202:	d808      	bhi.n	8017216 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	689a      	ldr	r2, [r3, #8]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017212:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8017214:	e025      	b.n	8017262 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	4a19      	ldr	r2, [pc, #100]	; (8017280 <ADC_ConfigureBoostMode+0x1d4>)
 801721a:	4293      	cmp	r3, r2
 801721c:	d80a      	bhi.n	8017234 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	689b      	ldr	r3, [r3, #8]
 8017224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017230:	609a      	str	r2, [r3, #8]
}
 8017232:	e016      	b.n	8017262 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	4a13      	ldr	r2, [pc, #76]	; (8017284 <ADC_ConfigureBoostMode+0x1d8>)
 8017238:	4293      	cmp	r3, r2
 801723a:	d80a      	bhi.n	8017252 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	689b      	ldr	r3, [r3, #8]
 8017242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801724e:	609a      	str	r2, [r3, #8]
}
 8017250:	e007      	b.n	8017262 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	689a      	ldr	r2, [r3, #8]
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017260:	609a      	str	r2, [r3, #8]
}
 8017262:	bf00      	nop
 8017264:	3710      	adds	r7, #16
 8017266:	46bd      	mov	sp, r7
 8017268:	bd80      	pop	{r7, pc}
 801726a:	bf00      	nop
 801726c:	40022000 	.word	0x40022000
 8017270:	40022100 	.word	0x40022100
 8017274:	40022300 	.word	0x40022300
 8017278:	58026300 	.word	0x58026300
 801727c:	005f5e10 	.word	0x005f5e10
 8017280:	00bebc20 	.word	0x00bebc20
 8017284:	017d7840 	.word	0x017d7840

08017288 <LL_ADC_IsEnabled>:
{
 8017288:	b480      	push	{r7}
 801728a:	b083      	sub	sp, #12
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	689b      	ldr	r3, [r3, #8]
 8017294:	f003 0301 	and.w	r3, r3, #1
 8017298:	2b01      	cmp	r3, #1
 801729a:	d101      	bne.n	80172a0 <LL_ADC_IsEnabled+0x18>
 801729c:	2301      	movs	r3, #1
 801729e:	e000      	b.n	80172a2 <LL_ADC_IsEnabled+0x1a>
 80172a0:	2300      	movs	r3, #0
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	370c      	adds	r7, #12
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr

080172ae <LL_ADC_REG_IsConversionOngoing>:
{
 80172ae:	b480      	push	{r7}
 80172b0:	b083      	sub	sp, #12
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	689b      	ldr	r3, [r3, #8]
 80172ba:	f003 0304 	and.w	r3, r3, #4
 80172be:	2b04      	cmp	r3, #4
 80172c0:	d101      	bne.n	80172c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80172c2:	2301      	movs	r3, #1
 80172c4:	e000      	b.n	80172c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr

080172d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80172d4:	b480      	push	{r7}
 80172d6:	b083      	sub	sp, #12
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80172dc:	bf00      	nop
 80172de:	370c      	adds	r7, #12
 80172e0:	46bd      	mov	sp, r7
 80172e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e6:	4770      	bx	lr

080172e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80172e8:	b480      	push	{r7}
 80172ea:	b083      	sub	sp, #12
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80172f0:	bf00      	nop
 80172f2:	370c      	adds	r7, #12
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr

080172fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80172fc:	b480      	push	{r7}
 80172fe:	b083      	sub	sp, #12
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8017304:	bf00      	nop
 8017306:	370c      	adds	r7, #12
 8017308:	46bd      	mov	sp, r7
 801730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730e:	4770      	bx	lr

08017310 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8017310:	b480      	push	{r7}
 8017312:	b083      	sub	sp, #12
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8017318:	bf00      	nop
 801731a:	370c      	adds	r7, #12
 801731c:	46bd      	mov	sp, r7
 801731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017322:	4770      	bx	lr

08017324 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801732c:	bf00      	nop
 801732e:	370c      	adds	r7, #12
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr

08017338 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8017338:	b590      	push	{r4, r7, lr}
 801733a:	b0a3      	sub	sp, #140	; 0x8c
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017342:	2300      	movs	r3, #0
 8017344:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801734e:	2b01      	cmp	r3, #1
 8017350:	d101      	bne.n	8017356 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8017352:	2302      	movs	r3, #2
 8017354:	e0c1      	b.n	80174da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2201      	movs	r2, #1
 801735a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 801735e:	2300      	movs	r3, #0
 8017360:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8017362:	2300      	movs	r3, #0
 8017364:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	4a5e      	ldr	r2, [pc, #376]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801736c:	4293      	cmp	r3, r2
 801736e:	d102      	bne.n	8017376 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8017370:	4b5d      	ldr	r3, [pc, #372]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017372:	60fb      	str	r3, [r7, #12]
 8017374:	e001      	b.n	801737a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8017376:	2300      	movs	r3, #0
 8017378:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d10b      	bne.n	8017398 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017384:	f043 0220 	orr.w	r2, r3, #32
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2200      	movs	r2, #0
 8017390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8017394:	2301      	movs	r3, #1
 8017396:	e0a0      	b.n	80174da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	4618      	mov	r0, r3
 801739c:	f7ff ff87 	bl	80172ae <LL_ADC_REG_IsConversionOngoing>
 80173a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7ff ff80 	bl	80172ae <LL_ADC_REG_IsConversionOngoing>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	f040 8081 	bne.w	80174b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80173b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d17c      	bne.n	80174b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	4a48      	ldr	r2, [pc, #288]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173c4:	4293      	cmp	r3, r2
 80173c6:	d004      	beq.n	80173d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	4a46      	ldr	r2, [pc, #280]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d101      	bne.n	80173d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80173d2:	4b46      	ldr	r3, [pc, #280]	; (80174ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80173d4:	e000      	b.n	80173d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80173d6:	4b46      	ldr	r3, [pc, #280]	; (80174f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80173d8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d039      	beq.n	8017456 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80173e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173e4:	689b      	ldr	r3, [r3, #8]
 80173e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	431a      	orrs	r2, r3
 80173f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	4a3a      	ldr	r2, [pc, #232]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d004      	beq.n	8017408 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	4a39      	ldr	r2, [pc, #228]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017404:	4293      	cmp	r3, r2
 8017406:	d10e      	bne.n	8017426 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8017408:	4836      	ldr	r0, [pc, #216]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801740a:	f7ff ff3d 	bl	8017288 <LL_ADC_IsEnabled>
 801740e:	4604      	mov	r4, r0
 8017410:	4835      	ldr	r0, [pc, #212]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017412:	f7ff ff39 	bl	8017288 <LL_ADC_IsEnabled>
 8017416:	4603      	mov	r3, r0
 8017418:	4323      	orrs	r3, r4
 801741a:	2b00      	cmp	r3, #0
 801741c:	bf0c      	ite	eq
 801741e:	2301      	moveq	r3, #1
 8017420:	2300      	movne	r3, #0
 8017422:	b2db      	uxtb	r3, r3
 8017424:	e008      	b.n	8017438 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8017426:	4833      	ldr	r0, [pc, #204]	; (80174f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017428:	f7ff ff2e 	bl	8017288 <LL_ADC_IsEnabled>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	bf0c      	ite	eq
 8017432:	2301      	moveq	r3, #1
 8017434:	2300      	movne	r3, #0
 8017436:	b2db      	uxtb	r3, r3
 8017438:	2b00      	cmp	r3, #0
 801743a:	d047      	beq.n	80174cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801743c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801743e:	689a      	ldr	r2, [r3, #8]
 8017440:	4b2d      	ldr	r3, [pc, #180]	; (80174f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017442:	4013      	ands	r3, r2
 8017444:	683a      	ldr	r2, [r7, #0]
 8017446:	6811      	ldr	r1, [r2, #0]
 8017448:	683a      	ldr	r2, [r7, #0]
 801744a:	6892      	ldr	r2, [r2, #8]
 801744c:	430a      	orrs	r2, r1
 801744e:	431a      	orrs	r2, r3
 8017450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017452:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017454:	e03a      	b.n	80174cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8017456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017458:	689b      	ldr	r3, [r3, #8]
 801745a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801745e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017460:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	4a1f      	ldr	r2, [pc, #124]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017468:	4293      	cmp	r3, r2
 801746a:	d004      	beq.n	8017476 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	4a1d      	ldr	r2, [pc, #116]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017472:	4293      	cmp	r3, r2
 8017474:	d10e      	bne.n	8017494 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8017476:	481b      	ldr	r0, [pc, #108]	; (80174e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017478:	f7ff ff06 	bl	8017288 <LL_ADC_IsEnabled>
 801747c:	4604      	mov	r4, r0
 801747e:	481a      	ldr	r0, [pc, #104]	; (80174e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017480:	f7ff ff02 	bl	8017288 <LL_ADC_IsEnabled>
 8017484:	4603      	mov	r3, r0
 8017486:	4323      	orrs	r3, r4
 8017488:	2b00      	cmp	r3, #0
 801748a:	bf0c      	ite	eq
 801748c:	2301      	moveq	r3, #1
 801748e:	2300      	movne	r3, #0
 8017490:	b2db      	uxtb	r3, r3
 8017492:	e008      	b.n	80174a6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8017494:	4817      	ldr	r0, [pc, #92]	; (80174f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017496:	f7ff fef7 	bl	8017288 <LL_ADC_IsEnabled>
 801749a:	4603      	mov	r3, r0
 801749c:	2b00      	cmp	r3, #0
 801749e:	bf0c      	ite	eq
 80174a0:	2301      	moveq	r3, #1
 80174a2:	2300      	movne	r3, #0
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d010      	beq.n	80174cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80174aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80174ac:	689a      	ldr	r2, [r3, #8]
 80174ae:	4b12      	ldr	r3, [pc, #72]	; (80174f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80174b0:	4013      	ands	r3, r2
 80174b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80174b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80174b6:	e009      	b.n	80174cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174bc:	f043 0220 	orr.w	r2, r3, #32
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80174c4:	2301      	movs	r3, #1
 80174c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80174ca:	e000      	b.n	80174ce <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80174cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2200      	movs	r2, #0
 80174d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80174d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80174da:	4618      	mov	r0, r3
 80174dc:	378c      	adds	r7, #140	; 0x8c
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd90      	pop	{r4, r7, pc}
 80174e2:	bf00      	nop
 80174e4:	40022000 	.word	0x40022000
 80174e8:	40022100 	.word	0x40022100
 80174ec:	40022300 	.word	0x40022300
 80174f0:	58026300 	.word	0x58026300
 80174f4:	58026000 	.word	0x58026000
 80174f8:	fffff0e0 	.word	0xfffff0e0

080174fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80174fc:	b480      	push	{r7}
 80174fe:	b085      	sub	sp, #20
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f003 0307 	and.w	r3, r3, #7
 801750a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801750c:	4b0b      	ldr	r3, [pc, #44]	; (801753c <__NVIC_SetPriorityGrouping+0x40>)
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017512:	68ba      	ldr	r2, [r7, #8]
 8017514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017518:	4013      	ands	r3, r2
 801751a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8017524:	4b06      	ldr	r3, [pc, #24]	; (8017540 <__NVIC_SetPriorityGrouping+0x44>)
 8017526:	4313      	orrs	r3, r2
 8017528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801752a:	4a04      	ldr	r2, [pc, #16]	; (801753c <__NVIC_SetPriorityGrouping+0x40>)
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	60d3      	str	r3, [r2, #12]
}
 8017530:	bf00      	nop
 8017532:	3714      	adds	r7, #20
 8017534:	46bd      	mov	sp, r7
 8017536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753a:	4770      	bx	lr
 801753c:	e000ed00 	.word	0xe000ed00
 8017540:	05fa0000 	.word	0x05fa0000

08017544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017544:	b480      	push	{r7}
 8017546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017548:	4b04      	ldr	r3, [pc, #16]	; (801755c <__NVIC_GetPriorityGrouping+0x18>)
 801754a:	68db      	ldr	r3, [r3, #12]
 801754c:	0a1b      	lsrs	r3, r3, #8
 801754e:	f003 0307 	and.w	r3, r3, #7
}
 8017552:	4618      	mov	r0, r3
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr
 801755c:	e000ed00 	.word	0xe000ed00

08017560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017560:	b480      	push	{r7}
 8017562:	b083      	sub	sp, #12
 8017564:	af00      	add	r7, sp, #0
 8017566:	4603      	mov	r3, r0
 8017568:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801756a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801756e:	2b00      	cmp	r3, #0
 8017570:	db0b      	blt.n	801758a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017572:	88fb      	ldrh	r3, [r7, #6]
 8017574:	f003 021f 	and.w	r2, r3, #31
 8017578:	4907      	ldr	r1, [pc, #28]	; (8017598 <__NVIC_EnableIRQ+0x38>)
 801757a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801757e:	095b      	lsrs	r3, r3, #5
 8017580:	2001      	movs	r0, #1
 8017582:	fa00 f202 	lsl.w	r2, r0, r2
 8017586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801758a:	bf00      	nop
 801758c:	370c      	adds	r7, #12
 801758e:	46bd      	mov	sp, r7
 8017590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017594:	4770      	bx	lr
 8017596:	bf00      	nop
 8017598:	e000e100 	.word	0xe000e100

0801759c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801759c:	b480      	push	{r7}
 801759e:	b083      	sub	sp, #12
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	4603      	mov	r3, r0
 80175a4:	6039      	str	r1, [r7, #0]
 80175a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80175a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	db0a      	blt.n	80175c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	b2da      	uxtb	r2, r3
 80175b4:	490c      	ldr	r1, [pc, #48]	; (80175e8 <__NVIC_SetPriority+0x4c>)
 80175b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80175ba:	0112      	lsls	r2, r2, #4
 80175bc:	b2d2      	uxtb	r2, r2
 80175be:	440b      	add	r3, r1
 80175c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80175c4:	e00a      	b.n	80175dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80175c6:	683b      	ldr	r3, [r7, #0]
 80175c8:	b2da      	uxtb	r2, r3
 80175ca:	4908      	ldr	r1, [pc, #32]	; (80175ec <__NVIC_SetPriority+0x50>)
 80175cc:	88fb      	ldrh	r3, [r7, #6]
 80175ce:	f003 030f 	and.w	r3, r3, #15
 80175d2:	3b04      	subs	r3, #4
 80175d4:	0112      	lsls	r2, r2, #4
 80175d6:	b2d2      	uxtb	r2, r2
 80175d8:	440b      	add	r3, r1
 80175da:	761a      	strb	r2, [r3, #24]
}
 80175dc:	bf00      	nop
 80175de:	370c      	adds	r7, #12
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr
 80175e8:	e000e100 	.word	0xe000e100
 80175ec:	e000ed00 	.word	0xe000ed00

080175f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b089      	sub	sp, #36	; 0x24
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f003 0307 	and.w	r3, r3, #7
 8017602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	f1c3 0307 	rsb	r3, r3, #7
 801760a:	2b04      	cmp	r3, #4
 801760c:	bf28      	it	cs
 801760e:	2304      	movcs	r3, #4
 8017610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	3304      	adds	r3, #4
 8017616:	2b06      	cmp	r3, #6
 8017618:	d902      	bls.n	8017620 <NVIC_EncodePriority+0x30>
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	3b03      	subs	r3, #3
 801761e:	e000      	b.n	8017622 <NVIC_EncodePriority+0x32>
 8017620:	2300      	movs	r3, #0
 8017622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017624:	f04f 32ff 	mov.w	r2, #4294967295
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	fa02 f303 	lsl.w	r3, r2, r3
 801762e:	43da      	mvns	r2, r3
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	401a      	ands	r2, r3
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017638:	f04f 31ff 	mov.w	r1, #4294967295
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	fa01 f303 	lsl.w	r3, r1, r3
 8017642:	43d9      	mvns	r1, r3
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017648:	4313      	orrs	r3, r2
         );
}
 801764a:	4618      	mov	r0, r3
 801764c:	3724      	adds	r7, #36	; 0x24
 801764e:	46bd      	mov	sp, r7
 8017650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017654:	4770      	bx	lr
	...

08017658 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8017658:	b480      	push	{r7}
 801765a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801765c:	f3bf 8f4f 	dsb	sy
}
 8017660:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017662:	4b06      	ldr	r3, [pc, #24]	; (801767c <__NVIC_SystemReset+0x24>)
 8017664:	68db      	ldr	r3, [r3, #12]
 8017666:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801766a:	4904      	ldr	r1, [pc, #16]	; (801767c <__NVIC_SystemReset+0x24>)
 801766c:	4b04      	ldr	r3, [pc, #16]	; (8017680 <__NVIC_SystemReset+0x28>)
 801766e:	4313      	orrs	r3, r2
 8017670:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017672:	f3bf 8f4f 	dsb	sy
}
 8017676:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8017678:	bf00      	nop
 801767a:	e7fd      	b.n	8017678 <__NVIC_SystemReset+0x20>
 801767c:	e000ed00 	.word	0xe000ed00
 8017680:	05fa0004 	.word	0x05fa0004

08017684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	3b01      	subs	r3, #1
 8017690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017694:	d301      	bcc.n	801769a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017696:	2301      	movs	r3, #1
 8017698:	e00f      	b.n	80176ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801769a:	4a0a      	ldr	r2, [pc, #40]	; (80176c4 <SysTick_Config+0x40>)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	3b01      	subs	r3, #1
 80176a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80176a2:	210f      	movs	r1, #15
 80176a4:	f04f 30ff 	mov.w	r0, #4294967295
 80176a8:	f7ff ff78 	bl	801759c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80176ac:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <SysTick_Config+0x40>)
 80176ae:	2200      	movs	r2, #0
 80176b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80176b2:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <SysTick_Config+0x40>)
 80176b4:	2207      	movs	r2, #7
 80176b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80176b8:	2300      	movs	r3, #0
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3708      	adds	r7, #8
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	e000e010 	.word	0xe000e010

080176c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7ff ff13 	bl	80174fc <__NVIC_SetPriorityGrouping>
}
 80176d6:	bf00      	nop
 80176d8:	3708      	adds	r7, #8
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}

080176de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80176de:	b580      	push	{r7, lr}
 80176e0:	b086      	sub	sp, #24
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	4603      	mov	r3, r0
 80176e6:	60b9      	str	r1, [r7, #8]
 80176e8:	607a      	str	r2, [r7, #4]
 80176ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80176ec:	f7ff ff2a 	bl	8017544 <__NVIC_GetPriorityGrouping>
 80176f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	68b9      	ldr	r1, [r7, #8]
 80176f6:	6978      	ldr	r0, [r7, #20]
 80176f8:	f7ff ff7a 	bl	80175f0 <NVIC_EncodePriority>
 80176fc:	4602      	mov	r2, r0
 80176fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017702:	4611      	mov	r1, r2
 8017704:	4618      	mov	r0, r3
 8017706:	f7ff ff49 	bl	801759c <__NVIC_SetPriority>
}
 801770a:	bf00      	nop
 801770c:	3718      	adds	r7, #24
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}

08017712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017712:	b580      	push	{r7, lr}
 8017714:	b082      	sub	sp, #8
 8017716:	af00      	add	r7, sp, #0
 8017718:	4603      	mov	r3, r0
 801771a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801771c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017720:	4618      	mov	r0, r3
 8017722:	f7ff ff1d 	bl	8017560 <__NVIC_EnableIRQ>
}
 8017726:	bf00      	nop
 8017728:	3708      	adds	r7, #8
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}

0801772e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801772e:	b580      	push	{r7, lr}
 8017730:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8017732:	f7ff ff91 	bl	8017658 <__NVIC_SystemReset>

08017736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017736:	b580      	push	{r7, lr}
 8017738:	b082      	sub	sp, #8
 801773a:	af00      	add	r7, sp, #0
 801773c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7ff ffa0 	bl	8017684 <SysTick_Config>
 8017744:	4603      	mov	r3, r0
}
 8017746:	4618      	mov	r0, r3
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
	...

08017750 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8017758:	f7fd fe2a 	bl	80153b0 <HAL_GetTick>
 801775c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d101      	bne.n	8017768 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8017764:	2301      	movs	r3, #1
 8017766:	e314      	b.n	8017d92 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	4a66      	ldr	r2, [pc, #408]	; (8017908 <HAL_DMA_Init+0x1b8>)
 801776e:	4293      	cmp	r3, r2
 8017770:	d04a      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4a65      	ldr	r2, [pc, #404]	; (801790c <HAL_DMA_Init+0x1bc>)
 8017778:	4293      	cmp	r3, r2
 801777a:	d045      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	4a63      	ldr	r2, [pc, #396]	; (8017910 <HAL_DMA_Init+0x1c0>)
 8017782:	4293      	cmp	r3, r2
 8017784:	d040      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	4a62      	ldr	r2, [pc, #392]	; (8017914 <HAL_DMA_Init+0x1c4>)
 801778c:	4293      	cmp	r3, r2
 801778e:	d03b      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	4a60      	ldr	r2, [pc, #384]	; (8017918 <HAL_DMA_Init+0x1c8>)
 8017796:	4293      	cmp	r3, r2
 8017798:	d036      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	4a5f      	ldr	r2, [pc, #380]	; (801791c <HAL_DMA_Init+0x1cc>)
 80177a0:	4293      	cmp	r3, r2
 80177a2:	d031      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4a5d      	ldr	r2, [pc, #372]	; (8017920 <HAL_DMA_Init+0x1d0>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d02c      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	4a5c      	ldr	r2, [pc, #368]	; (8017924 <HAL_DMA_Init+0x1d4>)
 80177b4:	4293      	cmp	r3, r2
 80177b6:	d027      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	4a5a      	ldr	r2, [pc, #360]	; (8017928 <HAL_DMA_Init+0x1d8>)
 80177be:	4293      	cmp	r3, r2
 80177c0:	d022      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	4a59      	ldr	r2, [pc, #356]	; (801792c <HAL_DMA_Init+0x1dc>)
 80177c8:	4293      	cmp	r3, r2
 80177ca:	d01d      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	4a57      	ldr	r2, [pc, #348]	; (8017930 <HAL_DMA_Init+0x1e0>)
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d018      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	4a56      	ldr	r2, [pc, #344]	; (8017934 <HAL_DMA_Init+0x1e4>)
 80177dc:	4293      	cmp	r3, r2
 80177de:	d013      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	4a54      	ldr	r2, [pc, #336]	; (8017938 <HAL_DMA_Init+0x1e8>)
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d00e      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	4a53      	ldr	r2, [pc, #332]	; (801793c <HAL_DMA_Init+0x1ec>)
 80177f0:	4293      	cmp	r3, r2
 80177f2:	d009      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	4a51      	ldr	r2, [pc, #324]	; (8017940 <HAL_DMA_Init+0x1f0>)
 80177fa:	4293      	cmp	r3, r2
 80177fc:	d004      	beq.n	8017808 <HAL_DMA_Init+0xb8>
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	4a50      	ldr	r2, [pc, #320]	; (8017944 <HAL_DMA_Init+0x1f4>)
 8017804:	4293      	cmp	r3, r2
 8017806:	d101      	bne.n	801780c <HAL_DMA_Init+0xbc>
 8017808:	2301      	movs	r3, #1
 801780a:	e000      	b.n	801780e <HAL_DMA_Init+0xbe>
 801780c:	2300      	movs	r3, #0
 801780e:	2b00      	cmp	r3, #0
 8017810:	f000 813c 	beq.w	8017a8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2202      	movs	r2, #2
 8017818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2200      	movs	r2, #0
 8017820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	4a37      	ldr	r2, [pc, #220]	; (8017908 <HAL_DMA_Init+0x1b8>)
 801782a:	4293      	cmp	r3, r2
 801782c:	d04a      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	4a36      	ldr	r2, [pc, #216]	; (801790c <HAL_DMA_Init+0x1bc>)
 8017834:	4293      	cmp	r3, r2
 8017836:	d045      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	4a34      	ldr	r2, [pc, #208]	; (8017910 <HAL_DMA_Init+0x1c0>)
 801783e:	4293      	cmp	r3, r2
 8017840:	d040      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	4a33      	ldr	r2, [pc, #204]	; (8017914 <HAL_DMA_Init+0x1c4>)
 8017848:	4293      	cmp	r3, r2
 801784a:	d03b      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	4a31      	ldr	r2, [pc, #196]	; (8017918 <HAL_DMA_Init+0x1c8>)
 8017852:	4293      	cmp	r3, r2
 8017854:	d036      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	4a30      	ldr	r2, [pc, #192]	; (801791c <HAL_DMA_Init+0x1cc>)
 801785c:	4293      	cmp	r3, r2
 801785e:	d031      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	4a2e      	ldr	r2, [pc, #184]	; (8017920 <HAL_DMA_Init+0x1d0>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d02c      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4a2d      	ldr	r2, [pc, #180]	; (8017924 <HAL_DMA_Init+0x1d4>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d027      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4a2b      	ldr	r2, [pc, #172]	; (8017928 <HAL_DMA_Init+0x1d8>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d022      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	4a2a      	ldr	r2, [pc, #168]	; (801792c <HAL_DMA_Init+0x1dc>)
 8017884:	4293      	cmp	r3, r2
 8017886:	d01d      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	4a28      	ldr	r2, [pc, #160]	; (8017930 <HAL_DMA_Init+0x1e0>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d018      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	4a27      	ldr	r2, [pc, #156]	; (8017934 <HAL_DMA_Init+0x1e4>)
 8017898:	4293      	cmp	r3, r2
 801789a:	d013      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	4a25      	ldr	r2, [pc, #148]	; (8017938 <HAL_DMA_Init+0x1e8>)
 80178a2:	4293      	cmp	r3, r2
 80178a4:	d00e      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4a24      	ldr	r2, [pc, #144]	; (801793c <HAL_DMA_Init+0x1ec>)
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d009      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	4a22      	ldr	r2, [pc, #136]	; (8017940 <HAL_DMA_Init+0x1f0>)
 80178b6:	4293      	cmp	r3, r2
 80178b8:	d004      	beq.n	80178c4 <HAL_DMA_Init+0x174>
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	4a21      	ldr	r2, [pc, #132]	; (8017944 <HAL_DMA_Init+0x1f4>)
 80178c0:	4293      	cmp	r3, r2
 80178c2:	d108      	bne.n	80178d6 <HAL_DMA_Init+0x186>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	681a      	ldr	r2, [r3, #0]
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	f022 0201 	bic.w	r2, r2, #1
 80178d2:	601a      	str	r2, [r3, #0]
 80178d4:	e007      	b.n	80178e6 <HAL_DMA_Init+0x196>
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	f022 0201 	bic.w	r2, r2, #1
 80178e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80178e6:	e02f      	b.n	8017948 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80178e8:	f7fd fd62 	bl	80153b0 <HAL_GetTick>
 80178ec:	4602      	mov	r2, r0
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	1ad3      	subs	r3, r2, r3
 80178f2:	2b05      	cmp	r3, #5
 80178f4:	d928      	bls.n	8017948 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	2220      	movs	r2, #32
 80178fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2203      	movs	r2, #3
 8017900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8017904:	2301      	movs	r3, #1
 8017906:	e244      	b.n	8017d92 <HAL_DMA_Init+0x642>
 8017908:	40020010 	.word	0x40020010
 801790c:	40020028 	.word	0x40020028
 8017910:	40020040 	.word	0x40020040
 8017914:	40020058 	.word	0x40020058
 8017918:	40020070 	.word	0x40020070
 801791c:	40020088 	.word	0x40020088
 8017920:	400200a0 	.word	0x400200a0
 8017924:	400200b8 	.word	0x400200b8
 8017928:	40020410 	.word	0x40020410
 801792c:	40020428 	.word	0x40020428
 8017930:	40020440 	.word	0x40020440
 8017934:	40020458 	.word	0x40020458
 8017938:	40020470 	.word	0x40020470
 801793c:	40020488 	.word	0x40020488
 8017940:	400204a0 	.word	0x400204a0
 8017944:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f003 0301 	and.w	r3, r3, #1
 8017952:	2b00      	cmp	r3, #0
 8017954:	d1c8      	bne.n	80178e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801795e:	697a      	ldr	r2, [r7, #20]
 8017960:	4b84      	ldr	r3, [pc, #528]	; (8017b74 <HAL_DMA_Init+0x424>)
 8017962:	4013      	ands	r3, r2
 8017964:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801796e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	691b      	ldr	r3, [r3, #16]
 8017974:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801797a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	699b      	ldr	r3, [r3, #24]
 8017980:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017986:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6a1b      	ldr	r3, [r3, #32]
 801798c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801798e:	697a      	ldr	r2, [r7, #20]
 8017990:	4313      	orrs	r3, r2
 8017992:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017998:	2b04      	cmp	r3, #4
 801799a:	d107      	bne.n	80179ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179a4:	4313      	orrs	r3, r2
 80179a6:	697a      	ldr	r2, [r7, #20]
 80179a8:	4313      	orrs	r3, r2
 80179aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	2b28      	cmp	r3, #40	; 0x28
 80179b2:	d903      	bls.n	80179bc <HAL_DMA_Init+0x26c>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	2b2e      	cmp	r3, #46	; 0x2e
 80179ba:	d91f      	bls.n	80179fc <HAL_DMA_Init+0x2ac>
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	2b3e      	cmp	r3, #62	; 0x3e
 80179c2:	d903      	bls.n	80179cc <HAL_DMA_Init+0x27c>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	2b42      	cmp	r3, #66	; 0x42
 80179ca:	d917      	bls.n	80179fc <HAL_DMA_Init+0x2ac>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	2b46      	cmp	r3, #70	; 0x46
 80179d2:	d903      	bls.n	80179dc <HAL_DMA_Init+0x28c>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	2b48      	cmp	r3, #72	; 0x48
 80179da:	d90f      	bls.n	80179fc <HAL_DMA_Init+0x2ac>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	2b4e      	cmp	r3, #78	; 0x4e
 80179e2:	d903      	bls.n	80179ec <HAL_DMA_Init+0x29c>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	2b52      	cmp	r3, #82	; 0x52
 80179ea:	d907      	bls.n	80179fc <HAL_DMA_Init+0x2ac>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	2b73      	cmp	r3, #115	; 0x73
 80179f2:	d905      	bls.n	8017a00 <HAL_DMA_Init+0x2b0>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	2b77      	cmp	r3, #119	; 0x77
 80179fa:	d801      	bhi.n	8017a00 <HAL_DMA_Init+0x2b0>
 80179fc:	2301      	movs	r3, #1
 80179fe:	e000      	b.n	8017a02 <HAL_DMA_Init+0x2b2>
 8017a00:	2300      	movs	r3, #0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d003      	beq.n	8017a0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017a0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	697a      	ldr	r2, [r7, #20]
 8017a14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	695b      	ldr	r3, [r3, #20]
 8017a1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	f023 0307 	bic.w	r3, r3, #7
 8017a24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a2a:	697a      	ldr	r2, [r7, #20]
 8017a2c:	4313      	orrs	r3, r2
 8017a2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a34:	2b04      	cmp	r3, #4
 8017a36:	d117      	bne.n	8017a68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a3c:	697a      	ldr	r2, [r7, #20]
 8017a3e:	4313      	orrs	r3, r2
 8017a40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d00e      	beq.n	8017a68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f001 fdcc 	bl	80195e8 <DMA_CheckFifoParam>
 8017a50:	4603      	mov	r3, r0
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d008      	beq.n	8017a68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2240      	movs	r2, #64	; 0x40
 8017a5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2201      	movs	r2, #1
 8017a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8017a64:	2301      	movs	r3, #1
 8017a66:	e194      	b.n	8017d92 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	697a      	ldr	r2, [r7, #20]
 8017a6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017a70:	6878      	ldr	r0, [r7, #4]
 8017a72:	f001 fd07 	bl	8019484 <DMA_CalcBaseAndBitshift>
 8017a76:	4603      	mov	r3, r0
 8017a78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a7e:	f003 031f 	and.w	r3, r3, #31
 8017a82:	223f      	movs	r2, #63	; 0x3f
 8017a84:	409a      	lsls	r2, r3
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	609a      	str	r2, [r3, #8]
 8017a8a:	e0ca      	b.n	8017c22 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	4a39      	ldr	r2, [pc, #228]	; (8017b78 <HAL_DMA_Init+0x428>)
 8017a92:	4293      	cmp	r3, r2
 8017a94:	d022      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	4a38      	ldr	r2, [pc, #224]	; (8017b7c <HAL_DMA_Init+0x42c>)
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	d01d      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	4a36      	ldr	r2, [pc, #216]	; (8017b80 <HAL_DMA_Init+0x430>)
 8017aa6:	4293      	cmp	r3, r2
 8017aa8:	d018      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	4a35      	ldr	r2, [pc, #212]	; (8017b84 <HAL_DMA_Init+0x434>)
 8017ab0:	4293      	cmp	r3, r2
 8017ab2:	d013      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	4a33      	ldr	r2, [pc, #204]	; (8017b88 <HAL_DMA_Init+0x438>)
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d00e      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	4a32      	ldr	r2, [pc, #200]	; (8017b8c <HAL_DMA_Init+0x43c>)
 8017ac4:	4293      	cmp	r3, r2
 8017ac6:	d009      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	4a30      	ldr	r2, [pc, #192]	; (8017b90 <HAL_DMA_Init+0x440>)
 8017ace:	4293      	cmp	r3, r2
 8017ad0:	d004      	beq.n	8017adc <HAL_DMA_Init+0x38c>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	4a2f      	ldr	r2, [pc, #188]	; (8017b94 <HAL_DMA_Init+0x444>)
 8017ad8:	4293      	cmp	r3, r2
 8017ada:	d101      	bne.n	8017ae0 <HAL_DMA_Init+0x390>
 8017adc:	2301      	movs	r3, #1
 8017ade:	e000      	b.n	8017ae2 <HAL_DMA_Init+0x392>
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f000 8094 	beq.w	8017c10 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	4a22      	ldr	r2, [pc, #136]	; (8017b78 <HAL_DMA_Init+0x428>)
 8017aee:	4293      	cmp	r3, r2
 8017af0:	d021      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	4a21      	ldr	r2, [pc, #132]	; (8017b7c <HAL_DMA_Init+0x42c>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d01c      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4a1f      	ldr	r2, [pc, #124]	; (8017b80 <HAL_DMA_Init+0x430>)
 8017b02:	4293      	cmp	r3, r2
 8017b04:	d017      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	4a1e      	ldr	r2, [pc, #120]	; (8017b84 <HAL_DMA_Init+0x434>)
 8017b0c:	4293      	cmp	r3, r2
 8017b0e:	d012      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	4a1c      	ldr	r2, [pc, #112]	; (8017b88 <HAL_DMA_Init+0x438>)
 8017b16:	4293      	cmp	r3, r2
 8017b18:	d00d      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	4a1b      	ldr	r2, [pc, #108]	; (8017b8c <HAL_DMA_Init+0x43c>)
 8017b20:	4293      	cmp	r3, r2
 8017b22:	d008      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4a19      	ldr	r2, [pc, #100]	; (8017b90 <HAL_DMA_Init+0x440>)
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	d003      	beq.n	8017b36 <HAL_DMA_Init+0x3e6>
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	4a18      	ldr	r2, [pc, #96]	; (8017b94 <HAL_DMA_Init+0x444>)
 8017b34:	4293      	cmp	r3, r2
 8017b36:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2202      	movs	r2, #2
 8017b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2200      	movs	r2, #0
 8017b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017b50:	697a      	ldr	r2, [r7, #20]
 8017b52:	4b11      	ldr	r3, [pc, #68]	; (8017b98 <HAL_DMA_Init+0x448>)
 8017b54:	4013      	ands	r3, r2
 8017b56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	689b      	ldr	r3, [r3, #8]
 8017b5c:	2b40      	cmp	r3, #64	; 0x40
 8017b5e:	d01d      	beq.n	8017b9c <HAL_DMA_Init+0x44c>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	2b80      	cmp	r3, #128	; 0x80
 8017b66:	d102      	bne.n	8017b6e <HAL_DMA_Init+0x41e>
 8017b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017b6c:	e017      	b.n	8017b9e <HAL_DMA_Init+0x44e>
 8017b6e:	2300      	movs	r3, #0
 8017b70:	e015      	b.n	8017b9e <HAL_DMA_Init+0x44e>
 8017b72:	bf00      	nop
 8017b74:	fe10803f 	.word	0xfe10803f
 8017b78:	58025408 	.word	0x58025408
 8017b7c:	5802541c 	.word	0x5802541c
 8017b80:	58025430 	.word	0x58025430
 8017b84:	58025444 	.word	0x58025444
 8017b88:	58025458 	.word	0x58025458
 8017b8c:	5802546c 	.word	0x5802546c
 8017b90:	58025480 	.word	0x58025480
 8017b94:	58025494 	.word	0x58025494
 8017b98:	fffe000f 	.word	0xfffe000f
 8017b9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	68d2      	ldr	r2, [r2, #12]
 8017ba2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	691b      	ldr	r3, [r3, #16]
 8017baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	695b      	ldr	r3, [r3, #20]
 8017bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	699b      	ldr	r3, [r3, #24]
 8017bba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	69db      	ldr	r3, [r3, #28]
 8017bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6a1b      	ldr	r3, [r3, #32]
 8017bca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017bcc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017bce:	697a      	ldr	r2, [r7, #20]
 8017bd0:	4313      	orrs	r3, r2
 8017bd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	697a      	ldr	r2, [r7, #20]
 8017bda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	461a      	mov	r2, r3
 8017be2:	4b6e      	ldr	r3, [pc, #440]	; (8017d9c <HAL_DMA_Init+0x64c>)
 8017be4:	4413      	add	r3, r2
 8017be6:	4a6e      	ldr	r2, [pc, #440]	; (8017da0 <HAL_DMA_Init+0x650>)
 8017be8:	fba2 2303 	umull	r2, r3, r2, r3
 8017bec:	091b      	lsrs	r3, r3, #4
 8017bee:	009a      	lsls	r2, r3, #2
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f001 fc45 	bl	8019484 <DMA_CalcBaseAndBitshift>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c02:	f003 031f 	and.w	r3, r3, #31
 8017c06:	2201      	movs	r2, #1
 8017c08:	409a      	lsls	r2, r3
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	605a      	str	r2, [r3, #4]
 8017c0e:	e008      	b.n	8017c22 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2240      	movs	r2, #64	; 0x40
 8017c14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	2203      	movs	r2, #3
 8017c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e0b7      	b.n	8017d92 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	4a5f      	ldr	r2, [pc, #380]	; (8017da4 <HAL_DMA_Init+0x654>)
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	d072      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	4a5d      	ldr	r2, [pc, #372]	; (8017da8 <HAL_DMA_Init+0x658>)
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d06d      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4a5c      	ldr	r2, [pc, #368]	; (8017dac <HAL_DMA_Init+0x65c>)
 8017c3c:	4293      	cmp	r3, r2
 8017c3e:	d068      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	4a5a      	ldr	r2, [pc, #360]	; (8017db0 <HAL_DMA_Init+0x660>)
 8017c46:	4293      	cmp	r3, r2
 8017c48:	d063      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	4a59      	ldr	r2, [pc, #356]	; (8017db4 <HAL_DMA_Init+0x664>)
 8017c50:	4293      	cmp	r3, r2
 8017c52:	d05e      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	4a57      	ldr	r2, [pc, #348]	; (8017db8 <HAL_DMA_Init+0x668>)
 8017c5a:	4293      	cmp	r3, r2
 8017c5c:	d059      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	4a56      	ldr	r2, [pc, #344]	; (8017dbc <HAL_DMA_Init+0x66c>)
 8017c64:	4293      	cmp	r3, r2
 8017c66:	d054      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	4a54      	ldr	r2, [pc, #336]	; (8017dc0 <HAL_DMA_Init+0x670>)
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d04f      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	4a53      	ldr	r2, [pc, #332]	; (8017dc4 <HAL_DMA_Init+0x674>)
 8017c78:	4293      	cmp	r3, r2
 8017c7a:	d04a      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	4a51      	ldr	r2, [pc, #324]	; (8017dc8 <HAL_DMA_Init+0x678>)
 8017c82:	4293      	cmp	r3, r2
 8017c84:	d045      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	4a50      	ldr	r2, [pc, #320]	; (8017dcc <HAL_DMA_Init+0x67c>)
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d040      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4a4e      	ldr	r2, [pc, #312]	; (8017dd0 <HAL_DMA_Init+0x680>)
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d03b      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4a4d      	ldr	r2, [pc, #308]	; (8017dd4 <HAL_DMA_Init+0x684>)
 8017ca0:	4293      	cmp	r3, r2
 8017ca2:	d036      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a4b      	ldr	r2, [pc, #300]	; (8017dd8 <HAL_DMA_Init+0x688>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d031      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	4a4a      	ldr	r2, [pc, #296]	; (8017ddc <HAL_DMA_Init+0x68c>)
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	d02c      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	4a48      	ldr	r2, [pc, #288]	; (8017de0 <HAL_DMA_Init+0x690>)
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d027      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	4a47      	ldr	r2, [pc, #284]	; (8017de4 <HAL_DMA_Init+0x694>)
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d022      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	4a45      	ldr	r2, [pc, #276]	; (8017de8 <HAL_DMA_Init+0x698>)
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d01d      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4a44      	ldr	r2, [pc, #272]	; (8017dec <HAL_DMA_Init+0x69c>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d018      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a42      	ldr	r2, [pc, #264]	; (8017df0 <HAL_DMA_Init+0x6a0>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d013      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4a41      	ldr	r2, [pc, #260]	; (8017df4 <HAL_DMA_Init+0x6a4>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d00e      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	4a3f      	ldr	r2, [pc, #252]	; (8017df8 <HAL_DMA_Init+0x6a8>)
 8017cfa:	4293      	cmp	r3, r2
 8017cfc:	d009      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	4a3e      	ldr	r2, [pc, #248]	; (8017dfc <HAL_DMA_Init+0x6ac>)
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d004      	beq.n	8017d12 <HAL_DMA_Init+0x5c2>
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a3c      	ldr	r2, [pc, #240]	; (8017e00 <HAL_DMA_Init+0x6b0>)
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	d101      	bne.n	8017d16 <HAL_DMA_Init+0x5c6>
 8017d12:	2301      	movs	r3, #1
 8017d14:	e000      	b.n	8017d18 <HAL_DMA_Init+0x5c8>
 8017d16:	2300      	movs	r3, #0
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d032      	beq.n	8017d82 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f001 fcdf 	bl	80196e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	689b      	ldr	r3, [r3, #8]
 8017d26:	2b80      	cmp	r3, #128	; 0x80
 8017d28:	d102      	bne.n	8017d30 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	685a      	ldr	r2, [r3, #4]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d38:	b2d2      	uxtb	r2, r2
 8017d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d40:	687a      	ldr	r2, [r7, #4]
 8017d42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017d44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d010      	beq.n	8017d70 <HAL_DMA_Init+0x620>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	2b08      	cmp	r3, #8
 8017d54:	d80c      	bhi.n	8017d70 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	f001 fd5c 	bl	8019814 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d60:	2200      	movs	r2, #0
 8017d62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d68:	687a      	ldr	r2, [r7, #4]
 8017d6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017d6c:	605a      	str	r2, [r3, #4]
 8017d6e:	e008      	b.n	8017d82 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2200      	movs	r2, #0
 8017d74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	2200      	movs	r2, #0
 8017d7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2200      	movs	r2, #0
 8017d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017d90:	2300      	movs	r3, #0
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3718      	adds	r7, #24
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	a7fdabf8 	.word	0xa7fdabf8
 8017da0:	cccccccd 	.word	0xcccccccd
 8017da4:	40020010 	.word	0x40020010
 8017da8:	40020028 	.word	0x40020028
 8017dac:	40020040 	.word	0x40020040
 8017db0:	40020058 	.word	0x40020058
 8017db4:	40020070 	.word	0x40020070
 8017db8:	40020088 	.word	0x40020088
 8017dbc:	400200a0 	.word	0x400200a0
 8017dc0:	400200b8 	.word	0x400200b8
 8017dc4:	40020410 	.word	0x40020410
 8017dc8:	40020428 	.word	0x40020428
 8017dcc:	40020440 	.word	0x40020440
 8017dd0:	40020458 	.word	0x40020458
 8017dd4:	40020470 	.word	0x40020470
 8017dd8:	40020488 	.word	0x40020488
 8017ddc:	400204a0 	.word	0x400204a0
 8017de0:	400204b8 	.word	0x400204b8
 8017de4:	58025408 	.word	0x58025408
 8017de8:	5802541c 	.word	0x5802541c
 8017dec:	58025430 	.word	0x58025430
 8017df0:	58025444 	.word	0x58025444
 8017df4:	58025458 	.word	0x58025458
 8017df8:	5802546c 	.word	0x5802546c
 8017dfc:	58025480 	.word	0x58025480
 8017e00:	58025494 	.word	0x58025494

08017e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b086      	sub	sp, #24
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]
 8017e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017e12:	2300      	movs	r3, #0
 8017e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d101      	bne.n	8017e20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	e226      	b.n	801826e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017e26:	2b01      	cmp	r3, #1
 8017e28:	d101      	bne.n	8017e2e <HAL_DMA_Start_IT+0x2a>
 8017e2a:	2302      	movs	r3, #2
 8017e2c:	e21f      	b.n	801826e <HAL_DMA_Start_IT+0x46a>
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2201      	movs	r2, #1
 8017e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	2b01      	cmp	r3, #1
 8017e40:	f040 820a 	bne.w	8018258 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2202      	movs	r2, #2
 8017e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	4a68      	ldr	r2, [pc, #416]	; (8017ff8 <HAL_DMA_Start_IT+0x1f4>)
 8017e58:	4293      	cmp	r3, r2
 8017e5a:	d04a      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	4a66      	ldr	r2, [pc, #408]	; (8017ffc <HAL_DMA_Start_IT+0x1f8>)
 8017e62:	4293      	cmp	r3, r2
 8017e64:	d045      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4a65      	ldr	r2, [pc, #404]	; (8018000 <HAL_DMA_Start_IT+0x1fc>)
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	d040      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	4a63      	ldr	r2, [pc, #396]	; (8018004 <HAL_DMA_Start_IT+0x200>)
 8017e76:	4293      	cmp	r3, r2
 8017e78:	d03b      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	4a62      	ldr	r2, [pc, #392]	; (8018008 <HAL_DMA_Start_IT+0x204>)
 8017e80:	4293      	cmp	r3, r2
 8017e82:	d036      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	4a60      	ldr	r2, [pc, #384]	; (801800c <HAL_DMA_Start_IT+0x208>)
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	d031      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	4a5f      	ldr	r2, [pc, #380]	; (8018010 <HAL_DMA_Start_IT+0x20c>)
 8017e94:	4293      	cmp	r3, r2
 8017e96:	d02c      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	4a5d      	ldr	r2, [pc, #372]	; (8018014 <HAL_DMA_Start_IT+0x210>)
 8017e9e:	4293      	cmp	r3, r2
 8017ea0:	d027      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	4a5c      	ldr	r2, [pc, #368]	; (8018018 <HAL_DMA_Start_IT+0x214>)
 8017ea8:	4293      	cmp	r3, r2
 8017eaa:	d022      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	4a5a      	ldr	r2, [pc, #360]	; (801801c <HAL_DMA_Start_IT+0x218>)
 8017eb2:	4293      	cmp	r3, r2
 8017eb4:	d01d      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	4a59      	ldr	r2, [pc, #356]	; (8018020 <HAL_DMA_Start_IT+0x21c>)
 8017ebc:	4293      	cmp	r3, r2
 8017ebe:	d018      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	4a57      	ldr	r2, [pc, #348]	; (8018024 <HAL_DMA_Start_IT+0x220>)
 8017ec6:	4293      	cmp	r3, r2
 8017ec8:	d013      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	4a56      	ldr	r2, [pc, #344]	; (8018028 <HAL_DMA_Start_IT+0x224>)
 8017ed0:	4293      	cmp	r3, r2
 8017ed2:	d00e      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	4a54      	ldr	r2, [pc, #336]	; (801802c <HAL_DMA_Start_IT+0x228>)
 8017eda:	4293      	cmp	r3, r2
 8017edc:	d009      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	4a53      	ldr	r2, [pc, #332]	; (8018030 <HAL_DMA_Start_IT+0x22c>)
 8017ee4:	4293      	cmp	r3, r2
 8017ee6:	d004      	beq.n	8017ef2 <HAL_DMA_Start_IT+0xee>
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	4a51      	ldr	r2, [pc, #324]	; (8018034 <HAL_DMA_Start_IT+0x230>)
 8017eee:	4293      	cmp	r3, r2
 8017ef0:	d108      	bne.n	8017f04 <HAL_DMA_Start_IT+0x100>
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	681a      	ldr	r2, [r3, #0]
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	f022 0201 	bic.w	r2, r2, #1
 8017f00:	601a      	str	r2, [r3, #0]
 8017f02:	e007      	b.n	8017f14 <HAL_DMA_Start_IT+0x110>
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	681a      	ldr	r2, [r3, #0]
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f022 0201 	bic.w	r2, r2, #1
 8017f12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	687a      	ldr	r2, [r7, #4]
 8017f18:	68b9      	ldr	r1, [r7, #8]
 8017f1a:	68f8      	ldr	r0, [r7, #12]
 8017f1c:	f001 f906 	bl	801912c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	4a34      	ldr	r2, [pc, #208]	; (8017ff8 <HAL_DMA_Start_IT+0x1f4>)
 8017f26:	4293      	cmp	r3, r2
 8017f28:	d04a      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	4a33      	ldr	r2, [pc, #204]	; (8017ffc <HAL_DMA_Start_IT+0x1f8>)
 8017f30:	4293      	cmp	r3, r2
 8017f32:	d045      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a31      	ldr	r2, [pc, #196]	; (8018000 <HAL_DMA_Start_IT+0x1fc>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d040      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4a30      	ldr	r2, [pc, #192]	; (8018004 <HAL_DMA_Start_IT+0x200>)
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d03b      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	4a2e      	ldr	r2, [pc, #184]	; (8018008 <HAL_DMA_Start_IT+0x204>)
 8017f4e:	4293      	cmp	r3, r2
 8017f50:	d036      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	4a2d      	ldr	r2, [pc, #180]	; (801800c <HAL_DMA_Start_IT+0x208>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d031      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4a2b      	ldr	r2, [pc, #172]	; (8018010 <HAL_DMA_Start_IT+0x20c>)
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d02c      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	4a2a      	ldr	r2, [pc, #168]	; (8018014 <HAL_DMA_Start_IT+0x210>)
 8017f6c:	4293      	cmp	r3, r2
 8017f6e:	d027      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	4a28      	ldr	r2, [pc, #160]	; (8018018 <HAL_DMA_Start_IT+0x214>)
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d022      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	4a27      	ldr	r2, [pc, #156]	; (801801c <HAL_DMA_Start_IT+0x218>)
 8017f80:	4293      	cmp	r3, r2
 8017f82:	d01d      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4a25      	ldr	r2, [pc, #148]	; (8018020 <HAL_DMA_Start_IT+0x21c>)
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d018      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	4a24      	ldr	r2, [pc, #144]	; (8018024 <HAL_DMA_Start_IT+0x220>)
 8017f94:	4293      	cmp	r3, r2
 8017f96:	d013      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4a22      	ldr	r2, [pc, #136]	; (8018028 <HAL_DMA_Start_IT+0x224>)
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	d00e      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4a21      	ldr	r2, [pc, #132]	; (801802c <HAL_DMA_Start_IT+0x228>)
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d009      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a1f      	ldr	r2, [pc, #124]	; (8018030 <HAL_DMA_Start_IT+0x22c>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d004      	beq.n	8017fc0 <HAL_DMA_Start_IT+0x1bc>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a1e      	ldr	r2, [pc, #120]	; (8018034 <HAL_DMA_Start_IT+0x230>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d101      	bne.n	8017fc4 <HAL_DMA_Start_IT+0x1c0>
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	e000      	b.n	8017fc6 <HAL_DMA_Start_IT+0x1c2>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d036      	beq.n	8018038 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	f023 021e 	bic.w	r2, r3, #30
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	f042 0216 	orr.w	r2, r2, #22
 8017fdc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d03e      	beq.n	8018064 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	681a      	ldr	r2, [r3, #0]
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f042 0208 	orr.w	r2, r2, #8
 8017ff4:	601a      	str	r2, [r3, #0]
 8017ff6:	e035      	b.n	8018064 <HAL_DMA_Start_IT+0x260>
 8017ff8:	40020010 	.word	0x40020010
 8017ffc:	40020028 	.word	0x40020028
 8018000:	40020040 	.word	0x40020040
 8018004:	40020058 	.word	0x40020058
 8018008:	40020070 	.word	0x40020070
 801800c:	40020088 	.word	0x40020088
 8018010:	400200a0 	.word	0x400200a0
 8018014:	400200b8 	.word	0x400200b8
 8018018:	40020410 	.word	0x40020410
 801801c:	40020428 	.word	0x40020428
 8018020:	40020440 	.word	0x40020440
 8018024:	40020458 	.word	0x40020458
 8018028:	40020470 	.word	0x40020470
 801802c:	40020488 	.word	0x40020488
 8018030:	400204a0 	.word	0x400204a0
 8018034:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	f023 020e 	bic.w	r2, r3, #14
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	f042 020a 	orr.w	r2, r2, #10
 801804a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018050:	2b00      	cmp	r3, #0
 8018052:	d007      	beq.n	8018064 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	681a      	ldr	r2, [r3, #0]
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	f042 0204 	orr.w	r2, r2, #4
 8018062:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	4a83      	ldr	r2, [pc, #524]	; (8018278 <HAL_DMA_Start_IT+0x474>)
 801806a:	4293      	cmp	r3, r2
 801806c:	d072      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	4a82      	ldr	r2, [pc, #520]	; (801827c <HAL_DMA_Start_IT+0x478>)
 8018074:	4293      	cmp	r3, r2
 8018076:	d06d      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4a80      	ldr	r2, [pc, #512]	; (8018280 <HAL_DMA_Start_IT+0x47c>)
 801807e:	4293      	cmp	r3, r2
 8018080:	d068      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	4a7f      	ldr	r2, [pc, #508]	; (8018284 <HAL_DMA_Start_IT+0x480>)
 8018088:	4293      	cmp	r3, r2
 801808a:	d063      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	4a7d      	ldr	r2, [pc, #500]	; (8018288 <HAL_DMA_Start_IT+0x484>)
 8018092:	4293      	cmp	r3, r2
 8018094:	d05e      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	4a7c      	ldr	r2, [pc, #496]	; (801828c <HAL_DMA_Start_IT+0x488>)
 801809c:	4293      	cmp	r3, r2
 801809e:	d059      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	4a7a      	ldr	r2, [pc, #488]	; (8018290 <HAL_DMA_Start_IT+0x48c>)
 80180a6:	4293      	cmp	r3, r2
 80180a8:	d054      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	4a79      	ldr	r2, [pc, #484]	; (8018294 <HAL_DMA_Start_IT+0x490>)
 80180b0:	4293      	cmp	r3, r2
 80180b2:	d04f      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	4a77      	ldr	r2, [pc, #476]	; (8018298 <HAL_DMA_Start_IT+0x494>)
 80180ba:	4293      	cmp	r3, r2
 80180bc:	d04a      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	4a76      	ldr	r2, [pc, #472]	; (801829c <HAL_DMA_Start_IT+0x498>)
 80180c4:	4293      	cmp	r3, r2
 80180c6:	d045      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	4a74      	ldr	r2, [pc, #464]	; (80182a0 <HAL_DMA_Start_IT+0x49c>)
 80180ce:	4293      	cmp	r3, r2
 80180d0:	d040      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4a73      	ldr	r2, [pc, #460]	; (80182a4 <HAL_DMA_Start_IT+0x4a0>)
 80180d8:	4293      	cmp	r3, r2
 80180da:	d03b      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a71      	ldr	r2, [pc, #452]	; (80182a8 <HAL_DMA_Start_IT+0x4a4>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d036      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4a70      	ldr	r2, [pc, #448]	; (80182ac <HAL_DMA_Start_IT+0x4a8>)
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d031      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4a6e      	ldr	r2, [pc, #440]	; (80182b0 <HAL_DMA_Start_IT+0x4ac>)
 80180f6:	4293      	cmp	r3, r2
 80180f8:	d02c      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4a6d      	ldr	r2, [pc, #436]	; (80182b4 <HAL_DMA_Start_IT+0x4b0>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d027      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4a6b      	ldr	r2, [pc, #428]	; (80182b8 <HAL_DMA_Start_IT+0x4b4>)
 801810a:	4293      	cmp	r3, r2
 801810c:	d022      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4a6a      	ldr	r2, [pc, #424]	; (80182bc <HAL_DMA_Start_IT+0x4b8>)
 8018114:	4293      	cmp	r3, r2
 8018116:	d01d      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	4a68      	ldr	r2, [pc, #416]	; (80182c0 <HAL_DMA_Start_IT+0x4bc>)
 801811e:	4293      	cmp	r3, r2
 8018120:	d018      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a67      	ldr	r2, [pc, #412]	; (80182c4 <HAL_DMA_Start_IT+0x4c0>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d013      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a65      	ldr	r2, [pc, #404]	; (80182c8 <HAL_DMA_Start_IT+0x4c4>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d00e      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a64      	ldr	r2, [pc, #400]	; (80182cc <HAL_DMA_Start_IT+0x4c8>)
 801813c:	4293      	cmp	r3, r2
 801813e:	d009      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a62      	ldr	r2, [pc, #392]	; (80182d0 <HAL_DMA_Start_IT+0x4cc>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d004      	beq.n	8018154 <HAL_DMA_Start_IT+0x350>
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4a61      	ldr	r2, [pc, #388]	; (80182d4 <HAL_DMA_Start_IT+0x4d0>)
 8018150:	4293      	cmp	r3, r2
 8018152:	d101      	bne.n	8018158 <HAL_DMA_Start_IT+0x354>
 8018154:	2301      	movs	r3, #1
 8018156:	e000      	b.n	801815a <HAL_DMA_Start_IT+0x356>
 8018158:	2300      	movs	r3, #0
 801815a:	2b00      	cmp	r3, #0
 801815c:	d01a      	beq.n	8018194 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018168:	2b00      	cmp	r3, #0
 801816a:	d007      	beq.n	801817c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018170:	681a      	ldr	r2, [r3, #0]
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801817a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018180:	2b00      	cmp	r3, #0
 8018182:	d007      	beq.n	8018194 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801818e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018192:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4a37      	ldr	r2, [pc, #220]	; (8018278 <HAL_DMA_Start_IT+0x474>)
 801819a:	4293      	cmp	r3, r2
 801819c:	d04a      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	4a36      	ldr	r2, [pc, #216]	; (801827c <HAL_DMA_Start_IT+0x478>)
 80181a4:	4293      	cmp	r3, r2
 80181a6:	d045      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	4a34      	ldr	r2, [pc, #208]	; (8018280 <HAL_DMA_Start_IT+0x47c>)
 80181ae:	4293      	cmp	r3, r2
 80181b0:	d040      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	4a33      	ldr	r2, [pc, #204]	; (8018284 <HAL_DMA_Start_IT+0x480>)
 80181b8:	4293      	cmp	r3, r2
 80181ba:	d03b      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	4a31      	ldr	r2, [pc, #196]	; (8018288 <HAL_DMA_Start_IT+0x484>)
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d036      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	4a30      	ldr	r2, [pc, #192]	; (801828c <HAL_DMA_Start_IT+0x488>)
 80181cc:	4293      	cmp	r3, r2
 80181ce:	d031      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	4a2e      	ldr	r2, [pc, #184]	; (8018290 <HAL_DMA_Start_IT+0x48c>)
 80181d6:	4293      	cmp	r3, r2
 80181d8:	d02c      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4a2d      	ldr	r2, [pc, #180]	; (8018294 <HAL_DMA_Start_IT+0x490>)
 80181e0:	4293      	cmp	r3, r2
 80181e2:	d027      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4a2b      	ldr	r2, [pc, #172]	; (8018298 <HAL_DMA_Start_IT+0x494>)
 80181ea:	4293      	cmp	r3, r2
 80181ec:	d022      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	4a2a      	ldr	r2, [pc, #168]	; (801829c <HAL_DMA_Start_IT+0x498>)
 80181f4:	4293      	cmp	r3, r2
 80181f6:	d01d      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	4a28      	ldr	r2, [pc, #160]	; (80182a0 <HAL_DMA_Start_IT+0x49c>)
 80181fe:	4293      	cmp	r3, r2
 8018200:	d018      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	4a27      	ldr	r2, [pc, #156]	; (80182a4 <HAL_DMA_Start_IT+0x4a0>)
 8018208:	4293      	cmp	r3, r2
 801820a:	d013      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	4a25      	ldr	r2, [pc, #148]	; (80182a8 <HAL_DMA_Start_IT+0x4a4>)
 8018212:	4293      	cmp	r3, r2
 8018214:	d00e      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	4a24      	ldr	r2, [pc, #144]	; (80182ac <HAL_DMA_Start_IT+0x4a8>)
 801821c:	4293      	cmp	r3, r2
 801821e:	d009      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a22      	ldr	r2, [pc, #136]	; (80182b0 <HAL_DMA_Start_IT+0x4ac>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d004      	beq.n	8018234 <HAL_DMA_Start_IT+0x430>
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4a21      	ldr	r2, [pc, #132]	; (80182b4 <HAL_DMA_Start_IT+0x4b0>)
 8018230:	4293      	cmp	r3, r2
 8018232:	d108      	bne.n	8018246 <HAL_DMA_Start_IT+0x442>
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	681a      	ldr	r2, [r3, #0]
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	f042 0201 	orr.w	r2, r2, #1
 8018242:	601a      	str	r2, [r3, #0]
 8018244:	e012      	b.n	801826c <HAL_DMA_Start_IT+0x468>
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	681a      	ldr	r2, [r3, #0]
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	f042 0201 	orr.w	r2, r2, #1
 8018254:	601a      	str	r2, [r3, #0]
 8018256:	e009      	b.n	801826c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801825e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	2200      	movs	r2, #0
 8018264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8018268:	2301      	movs	r3, #1
 801826a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 801826c:	7dfb      	ldrb	r3, [r7, #23]
}
 801826e:	4618      	mov	r0, r3
 8018270:	3718      	adds	r7, #24
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	40020010 	.word	0x40020010
 801827c:	40020028 	.word	0x40020028
 8018280:	40020040 	.word	0x40020040
 8018284:	40020058 	.word	0x40020058
 8018288:	40020070 	.word	0x40020070
 801828c:	40020088 	.word	0x40020088
 8018290:	400200a0 	.word	0x400200a0
 8018294:	400200b8 	.word	0x400200b8
 8018298:	40020410 	.word	0x40020410
 801829c:	40020428 	.word	0x40020428
 80182a0:	40020440 	.word	0x40020440
 80182a4:	40020458 	.word	0x40020458
 80182a8:	40020470 	.word	0x40020470
 80182ac:	40020488 	.word	0x40020488
 80182b0:	400204a0 	.word	0x400204a0
 80182b4:	400204b8 	.word	0x400204b8
 80182b8:	58025408 	.word	0x58025408
 80182bc:	5802541c 	.word	0x5802541c
 80182c0:	58025430 	.word	0x58025430
 80182c4:	58025444 	.word	0x58025444
 80182c8:	58025458 	.word	0x58025458
 80182cc:	5802546c 	.word	0x5802546c
 80182d0:	58025480 	.word	0x58025480
 80182d4:	58025494 	.word	0x58025494

080182d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b08a      	sub	sp, #40	; 0x28
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80182e0:	2300      	movs	r3, #0
 80182e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80182e4:	4b67      	ldr	r3, [pc, #412]	; (8018484 <HAL_DMA_IRQHandler+0x1ac>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	4a67      	ldr	r2, [pc, #412]	; (8018488 <HAL_DMA_IRQHandler+0x1b0>)
 80182ea:	fba2 2303 	umull	r2, r3, r2, r3
 80182ee:	0a9b      	lsrs	r3, r3, #10
 80182f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80182fe:	6a3b      	ldr	r3, [r7, #32]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4a5f      	ldr	r2, [pc, #380]	; (801848c <HAL_DMA_IRQHandler+0x1b4>)
 8018310:	4293      	cmp	r3, r2
 8018312:	d04a      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a5d      	ldr	r2, [pc, #372]	; (8018490 <HAL_DMA_IRQHandler+0x1b8>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d045      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a5c      	ldr	r2, [pc, #368]	; (8018494 <HAL_DMA_IRQHandler+0x1bc>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d040      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a5a      	ldr	r2, [pc, #360]	; (8018498 <HAL_DMA_IRQHandler+0x1c0>)
 801832e:	4293      	cmp	r3, r2
 8018330:	d03b      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4a59      	ldr	r2, [pc, #356]	; (801849c <HAL_DMA_IRQHandler+0x1c4>)
 8018338:	4293      	cmp	r3, r2
 801833a:	d036      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	4a57      	ldr	r2, [pc, #348]	; (80184a0 <HAL_DMA_IRQHandler+0x1c8>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d031      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4a56      	ldr	r2, [pc, #344]	; (80184a4 <HAL_DMA_IRQHandler+0x1cc>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d02c      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a54      	ldr	r2, [pc, #336]	; (80184a8 <HAL_DMA_IRQHandler+0x1d0>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d027      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4a53      	ldr	r2, [pc, #332]	; (80184ac <HAL_DMA_IRQHandler+0x1d4>)
 8018360:	4293      	cmp	r3, r2
 8018362:	d022      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a51      	ldr	r2, [pc, #324]	; (80184b0 <HAL_DMA_IRQHandler+0x1d8>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d01d      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a50      	ldr	r2, [pc, #320]	; (80184b4 <HAL_DMA_IRQHandler+0x1dc>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d018      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a4e      	ldr	r2, [pc, #312]	; (80184b8 <HAL_DMA_IRQHandler+0x1e0>)
 801837e:	4293      	cmp	r3, r2
 8018380:	d013      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4a4d      	ldr	r2, [pc, #308]	; (80184bc <HAL_DMA_IRQHandler+0x1e4>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d00e      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4a4b      	ldr	r2, [pc, #300]	; (80184c0 <HAL_DMA_IRQHandler+0x1e8>)
 8018392:	4293      	cmp	r3, r2
 8018394:	d009      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a4a      	ldr	r2, [pc, #296]	; (80184c4 <HAL_DMA_IRQHandler+0x1ec>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d004      	beq.n	80183aa <HAL_DMA_IRQHandler+0xd2>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a48      	ldr	r2, [pc, #288]	; (80184c8 <HAL_DMA_IRQHandler+0x1f0>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d101      	bne.n	80183ae <HAL_DMA_IRQHandler+0xd6>
 80183aa:	2301      	movs	r3, #1
 80183ac:	e000      	b.n	80183b0 <HAL_DMA_IRQHandler+0xd8>
 80183ae:	2300      	movs	r3, #0
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f000 842b 	beq.w	8018c0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183ba:	f003 031f 	and.w	r3, r3, #31
 80183be:	2208      	movs	r2, #8
 80183c0:	409a      	lsls	r2, r3
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	4013      	ands	r3, r2
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	f000 80a2 	beq.w	8018510 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4a2e      	ldr	r2, [pc, #184]	; (801848c <HAL_DMA_IRQHandler+0x1b4>)
 80183d2:	4293      	cmp	r3, r2
 80183d4:	d04a      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	4a2d      	ldr	r2, [pc, #180]	; (8018490 <HAL_DMA_IRQHandler+0x1b8>)
 80183dc:	4293      	cmp	r3, r2
 80183de:	d045      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	4a2b      	ldr	r2, [pc, #172]	; (8018494 <HAL_DMA_IRQHandler+0x1bc>)
 80183e6:	4293      	cmp	r3, r2
 80183e8:	d040      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	4a2a      	ldr	r2, [pc, #168]	; (8018498 <HAL_DMA_IRQHandler+0x1c0>)
 80183f0:	4293      	cmp	r3, r2
 80183f2:	d03b      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	4a28      	ldr	r2, [pc, #160]	; (801849c <HAL_DMA_IRQHandler+0x1c4>)
 80183fa:	4293      	cmp	r3, r2
 80183fc:	d036      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	4a27      	ldr	r2, [pc, #156]	; (80184a0 <HAL_DMA_IRQHandler+0x1c8>)
 8018404:	4293      	cmp	r3, r2
 8018406:	d031      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4a25      	ldr	r2, [pc, #148]	; (80184a4 <HAL_DMA_IRQHandler+0x1cc>)
 801840e:	4293      	cmp	r3, r2
 8018410:	d02c      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	4a24      	ldr	r2, [pc, #144]	; (80184a8 <HAL_DMA_IRQHandler+0x1d0>)
 8018418:	4293      	cmp	r3, r2
 801841a:	d027      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	4a22      	ldr	r2, [pc, #136]	; (80184ac <HAL_DMA_IRQHandler+0x1d4>)
 8018422:	4293      	cmp	r3, r2
 8018424:	d022      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4a21      	ldr	r2, [pc, #132]	; (80184b0 <HAL_DMA_IRQHandler+0x1d8>)
 801842c:	4293      	cmp	r3, r2
 801842e:	d01d      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4a1f      	ldr	r2, [pc, #124]	; (80184b4 <HAL_DMA_IRQHandler+0x1dc>)
 8018436:	4293      	cmp	r3, r2
 8018438:	d018      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	4a1e      	ldr	r2, [pc, #120]	; (80184b8 <HAL_DMA_IRQHandler+0x1e0>)
 8018440:	4293      	cmp	r3, r2
 8018442:	d013      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	4a1c      	ldr	r2, [pc, #112]	; (80184bc <HAL_DMA_IRQHandler+0x1e4>)
 801844a:	4293      	cmp	r3, r2
 801844c:	d00e      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	4a1b      	ldr	r2, [pc, #108]	; (80184c0 <HAL_DMA_IRQHandler+0x1e8>)
 8018454:	4293      	cmp	r3, r2
 8018456:	d009      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	4a19      	ldr	r2, [pc, #100]	; (80184c4 <HAL_DMA_IRQHandler+0x1ec>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d004      	beq.n	801846c <HAL_DMA_IRQHandler+0x194>
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4a18      	ldr	r2, [pc, #96]	; (80184c8 <HAL_DMA_IRQHandler+0x1f0>)
 8018468:	4293      	cmp	r3, r2
 801846a:	d12f      	bne.n	80184cc <HAL_DMA_IRQHandler+0x1f4>
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f003 0304 	and.w	r3, r3, #4
 8018476:	2b00      	cmp	r3, #0
 8018478:	bf14      	ite	ne
 801847a:	2301      	movne	r3, #1
 801847c:	2300      	moveq	r3, #0
 801847e:	b2db      	uxtb	r3, r3
 8018480:	e02e      	b.n	80184e0 <HAL_DMA_IRQHandler+0x208>
 8018482:	bf00      	nop
 8018484:	24000004 	.word	0x24000004
 8018488:	1b4e81b5 	.word	0x1b4e81b5
 801848c:	40020010 	.word	0x40020010
 8018490:	40020028 	.word	0x40020028
 8018494:	40020040 	.word	0x40020040
 8018498:	40020058 	.word	0x40020058
 801849c:	40020070 	.word	0x40020070
 80184a0:	40020088 	.word	0x40020088
 80184a4:	400200a0 	.word	0x400200a0
 80184a8:	400200b8 	.word	0x400200b8
 80184ac:	40020410 	.word	0x40020410
 80184b0:	40020428 	.word	0x40020428
 80184b4:	40020440 	.word	0x40020440
 80184b8:	40020458 	.word	0x40020458
 80184bc:	40020470 	.word	0x40020470
 80184c0:	40020488 	.word	0x40020488
 80184c4:	400204a0 	.word	0x400204a0
 80184c8:	400204b8 	.word	0x400204b8
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	f003 0308 	and.w	r3, r3, #8
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	bf14      	ite	ne
 80184da:	2301      	movne	r3, #1
 80184dc:	2300      	moveq	r3, #0
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d015      	beq.n	8018510 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	681a      	ldr	r2, [r3, #0]
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	f022 0204 	bic.w	r2, r2, #4
 80184f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184f8:	f003 031f 	and.w	r3, r3, #31
 80184fc:	2208      	movs	r2, #8
 80184fe:	409a      	lsls	r2, r3
 8018500:	6a3b      	ldr	r3, [r7, #32]
 8018502:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018508:	f043 0201 	orr.w	r2, r3, #1
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018514:	f003 031f 	and.w	r3, r3, #31
 8018518:	69ba      	ldr	r2, [r7, #24]
 801851a:	fa22 f303 	lsr.w	r3, r2, r3
 801851e:	f003 0301 	and.w	r3, r3, #1
 8018522:	2b00      	cmp	r3, #0
 8018524:	d06e      	beq.n	8018604 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	4a69      	ldr	r2, [pc, #420]	; (80186d0 <HAL_DMA_IRQHandler+0x3f8>)
 801852c:	4293      	cmp	r3, r2
 801852e:	d04a      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4a67      	ldr	r2, [pc, #412]	; (80186d4 <HAL_DMA_IRQHandler+0x3fc>)
 8018536:	4293      	cmp	r3, r2
 8018538:	d045      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4a66      	ldr	r2, [pc, #408]	; (80186d8 <HAL_DMA_IRQHandler+0x400>)
 8018540:	4293      	cmp	r3, r2
 8018542:	d040      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	4a64      	ldr	r2, [pc, #400]	; (80186dc <HAL_DMA_IRQHandler+0x404>)
 801854a:	4293      	cmp	r3, r2
 801854c:	d03b      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	4a63      	ldr	r2, [pc, #396]	; (80186e0 <HAL_DMA_IRQHandler+0x408>)
 8018554:	4293      	cmp	r3, r2
 8018556:	d036      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a61      	ldr	r2, [pc, #388]	; (80186e4 <HAL_DMA_IRQHandler+0x40c>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d031      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	4a60      	ldr	r2, [pc, #384]	; (80186e8 <HAL_DMA_IRQHandler+0x410>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d02c      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a5e      	ldr	r2, [pc, #376]	; (80186ec <HAL_DMA_IRQHandler+0x414>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d027      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a5d      	ldr	r2, [pc, #372]	; (80186f0 <HAL_DMA_IRQHandler+0x418>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d022      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a5b      	ldr	r2, [pc, #364]	; (80186f4 <HAL_DMA_IRQHandler+0x41c>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d01d      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a5a      	ldr	r2, [pc, #360]	; (80186f8 <HAL_DMA_IRQHandler+0x420>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d018      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a58      	ldr	r2, [pc, #352]	; (80186fc <HAL_DMA_IRQHandler+0x424>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d013      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4a57      	ldr	r2, [pc, #348]	; (8018700 <HAL_DMA_IRQHandler+0x428>)
 80185a4:	4293      	cmp	r3, r2
 80185a6:	d00e      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4a55      	ldr	r2, [pc, #340]	; (8018704 <HAL_DMA_IRQHandler+0x42c>)
 80185ae:	4293      	cmp	r3, r2
 80185b0:	d009      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a54      	ldr	r2, [pc, #336]	; (8018708 <HAL_DMA_IRQHandler+0x430>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d004      	beq.n	80185c6 <HAL_DMA_IRQHandler+0x2ee>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a52      	ldr	r2, [pc, #328]	; (801870c <HAL_DMA_IRQHandler+0x434>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d10a      	bne.n	80185dc <HAL_DMA_IRQHandler+0x304>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	695b      	ldr	r3, [r3, #20]
 80185cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	bf14      	ite	ne
 80185d4:	2301      	movne	r3, #1
 80185d6:	2300      	moveq	r3, #0
 80185d8:	b2db      	uxtb	r3, r3
 80185da:	e003      	b.n	80185e4 <HAL_DMA_IRQHandler+0x30c>
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2300      	movs	r3, #0
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d00d      	beq.n	8018604 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185ec:	f003 031f 	and.w	r3, r3, #31
 80185f0:	2201      	movs	r2, #1
 80185f2:	409a      	lsls	r2, r3
 80185f4:	6a3b      	ldr	r3, [r7, #32]
 80185f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185fc:	f043 0202 	orr.w	r2, r3, #2
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018608:	f003 031f 	and.w	r3, r3, #31
 801860c:	2204      	movs	r2, #4
 801860e:	409a      	lsls	r2, r3
 8018610:	69bb      	ldr	r3, [r7, #24]
 8018612:	4013      	ands	r3, r2
 8018614:	2b00      	cmp	r3, #0
 8018616:	f000 808f 	beq.w	8018738 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	4a2c      	ldr	r2, [pc, #176]	; (80186d0 <HAL_DMA_IRQHandler+0x3f8>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d04a      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	4a2a      	ldr	r2, [pc, #168]	; (80186d4 <HAL_DMA_IRQHandler+0x3fc>)
 801862a:	4293      	cmp	r3, r2
 801862c:	d045      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	4a29      	ldr	r2, [pc, #164]	; (80186d8 <HAL_DMA_IRQHandler+0x400>)
 8018634:	4293      	cmp	r3, r2
 8018636:	d040      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	4a27      	ldr	r2, [pc, #156]	; (80186dc <HAL_DMA_IRQHandler+0x404>)
 801863e:	4293      	cmp	r3, r2
 8018640:	d03b      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	4a26      	ldr	r2, [pc, #152]	; (80186e0 <HAL_DMA_IRQHandler+0x408>)
 8018648:	4293      	cmp	r3, r2
 801864a:	d036      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	4a24      	ldr	r2, [pc, #144]	; (80186e4 <HAL_DMA_IRQHandler+0x40c>)
 8018652:	4293      	cmp	r3, r2
 8018654:	d031      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	4a23      	ldr	r2, [pc, #140]	; (80186e8 <HAL_DMA_IRQHandler+0x410>)
 801865c:	4293      	cmp	r3, r2
 801865e:	d02c      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	4a21      	ldr	r2, [pc, #132]	; (80186ec <HAL_DMA_IRQHandler+0x414>)
 8018666:	4293      	cmp	r3, r2
 8018668:	d027      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	4a20      	ldr	r2, [pc, #128]	; (80186f0 <HAL_DMA_IRQHandler+0x418>)
 8018670:	4293      	cmp	r3, r2
 8018672:	d022      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	4a1e      	ldr	r2, [pc, #120]	; (80186f4 <HAL_DMA_IRQHandler+0x41c>)
 801867a:	4293      	cmp	r3, r2
 801867c:	d01d      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	4a1d      	ldr	r2, [pc, #116]	; (80186f8 <HAL_DMA_IRQHandler+0x420>)
 8018684:	4293      	cmp	r3, r2
 8018686:	d018      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	4a1b      	ldr	r2, [pc, #108]	; (80186fc <HAL_DMA_IRQHandler+0x424>)
 801868e:	4293      	cmp	r3, r2
 8018690:	d013      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4a1a      	ldr	r2, [pc, #104]	; (8018700 <HAL_DMA_IRQHandler+0x428>)
 8018698:	4293      	cmp	r3, r2
 801869a:	d00e      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4a18      	ldr	r2, [pc, #96]	; (8018704 <HAL_DMA_IRQHandler+0x42c>)
 80186a2:	4293      	cmp	r3, r2
 80186a4:	d009      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	4a17      	ldr	r2, [pc, #92]	; (8018708 <HAL_DMA_IRQHandler+0x430>)
 80186ac:	4293      	cmp	r3, r2
 80186ae:	d004      	beq.n	80186ba <HAL_DMA_IRQHandler+0x3e2>
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a15      	ldr	r2, [pc, #84]	; (801870c <HAL_DMA_IRQHandler+0x434>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d12a      	bne.n	8018710 <HAL_DMA_IRQHandler+0x438>
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	f003 0302 	and.w	r3, r3, #2
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	bf14      	ite	ne
 80186c8:	2301      	movne	r3, #1
 80186ca:	2300      	moveq	r3, #0
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	e023      	b.n	8018718 <HAL_DMA_IRQHandler+0x440>
 80186d0:	40020010 	.word	0x40020010
 80186d4:	40020028 	.word	0x40020028
 80186d8:	40020040 	.word	0x40020040
 80186dc:	40020058 	.word	0x40020058
 80186e0:	40020070 	.word	0x40020070
 80186e4:	40020088 	.word	0x40020088
 80186e8:	400200a0 	.word	0x400200a0
 80186ec:	400200b8 	.word	0x400200b8
 80186f0:	40020410 	.word	0x40020410
 80186f4:	40020428 	.word	0x40020428
 80186f8:	40020440 	.word	0x40020440
 80186fc:	40020458 	.word	0x40020458
 8018700:	40020470 	.word	0x40020470
 8018704:	40020488 	.word	0x40020488
 8018708:	400204a0 	.word	0x400204a0
 801870c:	400204b8 	.word	0x400204b8
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2300      	movs	r3, #0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d00d      	beq.n	8018738 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018720:	f003 031f 	and.w	r3, r3, #31
 8018724:	2204      	movs	r2, #4
 8018726:	409a      	lsls	r2, r3
 8018728:	6a3b      	ldr	r3, [r7, #32]
 801872a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018730:	f043 0204 	orr.w	r2, r3, #4
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801873c:	f003 031f 	and.w	r3, r3, #31
 8018740:	2210      	movs	r2, #16
 8018742:	409a      	lsls	r2, r3
 8018744:	69bb      	ldr	r3, [r7, #24]
 8018746:	4013      	ands	r3, r2
 8018748:	2b00      	cmp	r3, #0
 801874a:	f000 80a6 	beq.w	801889a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	4a85      	ldr	r2, [pc, #532]	; (8018968 <HAL_DMA_IRQHandler+0x690>)
 8018754:	4293      	cmp	r3, r2
 8018756:	d04a      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	4a83      	ldr	r2, [pc, #524]	; (801896c <HAL_DMA_IRQHandler+0x694>)
 801875e:	4293      	cmp	r3, r2
 8018760:	d045      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	4a82      	ldr	r2, [pc, #520]	; (8018970 <HAL_DMA_IRQHandler+0x698>)
 8018768:	4293      	cmp	r3, r2
 801876a:	d040      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	4a80      	ldr	r2, [pc, #512]	; (8018974 <HAL_DMA_IRQHandler+0x69c>)
 8018772:	4293      	cmp	r3, r2
 8018774:	d03b      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	4a7f      	ldr	r2, [pc, #508]	; (8018978 <HAL_DMA_IRQHandler+0x6a0>)
 801877c:	4293      	cmp	r3, r2
 801877e:	d036      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4a7d      	ldr	r2, [pc, #500]	; (801897c <HAL_DMA_IRQHandler+0x6a4>)
 8018786:	4293      	cmp	r3, r2
 8018788:	d031      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	4a7c      	ldr	r2, [pc, #496]	; (8018980 <HAL_DMA_IRQHandler+0x6a8>)
 8018790:	4293      	cmp	r3, r2
 8018792:	d02c      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	4a7a      	ldr	r2, [pc, #488]	; (8018984 <HAL_DMA_IRQHandler+0x6ac>)
 801879a:	4293      	cmp	r3, r2
 801879c:	d027      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	4a79      	ldr	r2, [pc, #484]	; (8018988 <HAL_DMA_IRQHandler+0x6b0>)
 80187a4:	4293      	cmp	r3, r2
 80187a6:	d022      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	4a77      	ldr	r2, [pc, #476]	; (801898c <HAL_DMA_IRQHandler+0x6b4>)
 80187ae:	4293      	cmp	r3, r2
 80187b0:	d01d      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	4a76      	ldr	r2, [pc, #472]	; (8018990 <HAL_DMA_IRQHandler+0x6b8>)
 80187b8:	4293      	cmp	r3, r2
 80187ba:	d018      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4a74      	ldr	r2, [pc, #464]	; (8018994 <HAL_DMA_IRQHandler+0x6bc>)
 80187c2:	4293      	cmp	r3, r2
 80187c4:	d013      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	4a73      	ldr	r2, [pc, #460]	; (8018998 <HAL_DMA_IRQHandler+0x6c0>)
 80187cc:	4293      	cmp	r3, r2
 80187ce:	d00e      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	4a71      	ldr	r2, [pc, #452]	; (801899c <HAL_DMA_IRQHandler+0x6c4>)
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d009      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	4a70      	ldr	r2, [pc, #448]	; (80189a0 <HAL_DMA_IRQHandler+0x6c8>)
 80187e0:	4293      	cmp	r3, r2
 80187e2:	d004      	beq.n	80187ee <HAL_DMA_IRQHandler+0x516>
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	4a6e      	ldr	r2, [pc, #440]	; (80189a4 <HAL_DMA_IRQHandler+0x6cc>)
 80187ea:	4293      	cmp	r3, r2
 80187ec:	d10a      	bne.n	8018804 <HAL_DMA_IRQHandler+0x52c>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	f003 0308 	and.w	r3, r3, #8
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	bf14      	ite	ne
 80187fc:	2301      	movne	r3, #1
 80187fe:	2300      	moveq	r3, #0
 8018800:	b2db      	uxtb	r3, r3
 8018802:	e009      	b.n	8018818 <HAL_DMA_IRQHandler+0x540>
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f003 0304 	and.w	r3, r3, #4
 801880e:	2b00      	cmp	r3, #0
 8018810:	bf14      	ite	ne
 8018812:	2301      	movne	r3, #1
 8018814:	2300      	moveq	r3, #0
 8018816:	b2db      	uxtb	r3, r3
 8018818:	2b00      	cmp	r3, #0
 801881a:	d03e      	beq.n	801889a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018820:	f003 031f 	and.w	r3, r3, #31
 8018824:	2210      	movs	r2, #16
 8018826:	409a      	lsls	r2, r3
 8018828:	6a3b      	ldr	r3, [r7, #32]
 801882a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018836:	2b00      	cmp	r3, #0
 8018838:	d018      	beq.n	801886c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018844:	2b00      	cmp	r3, #0
 8018846:	d108      	bne.n	801885a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801884c:	2b00      	cmp	r3, #0
 801884e:	d024      	beq.n	801889a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018854:	6878      	ldr	r0, [r7, #4]
 8018856:	4798      	blx	r3
 8018858:	e01f      	b.n	801889a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801885e:	2b00      	cmp	r3, #0
 8018860:	d01b      	beq.n	801889a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	4798      	blx	r3
 801886a:	e016      	b.n	801889a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018876:	2b00      	cmp	r3, #0
 8018878:	d107      	bne.n	801888a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	681a      	ldr	r2, [r3, #0]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	f022 0208 	bic.w	r2, r2, #8
 8018888:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801888e:	2b00      	cmp	r3, #0
 8018890:	d003      	beq.n	801889a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801889e:	f003 031f 	and.w	r3, r3, #31
 80188a2:	2220      	movs	r2, #32
 80188a4:	409a      	lsls	r2, r3
 80188a6:	69bb      	ldr	r3, [r7, #24]
 80188a8:	4013      	ands	r3, r2
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	f000 8110 	beq.w	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	4a2c      	ldr	r2, [pc, #176]	; (8018968 <HAL_DMA_IRQHandler+0x690>)
 80188b6:	4293      	cmp	r3, r2
 80188b8:	d04a      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4a2b      	ldr	r2, [pc, #172]	; (801896c <HAL_DMA_IRQHandler+0x694>)
 80188c0:	4293      	cmp	r3, r2
 80188c2:	d045      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	4a29      	ldr	r2, [pc, #164]	; (8018970 <HAL_DMA_IRQHandler+0x698>)
 80188ca:	4293      	cmp	r3, r2
 80188cc:	d040      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	4a28      	ldr	r2, [pc, #160]	; (8018974 <HAL_DMA_IRQHandler+0x69c>)
 80188d4:	4293      	cmp	r3, r2
 80188d6:	d03b      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	4a26      	ldr	r2, [pc, #152]	; (8018978 <HAL_DMA_IRQHandler+0x6a0>)
 80188de:	4293      	cmp	r3, r2
 80188e0:	d036      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	4a25      	ldr	r2, [pc, #148]	; (801897c <HAL_DMA_IRQHandler+0x6a4>)
 80188e8:	4293      	cmp	r3, r2
 80188ea:	d031      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	4a23      	ldr	r2, [pc, #140]	; (8018980 <HAL_DMA_IRQHandler+0x6a8>)
 80188f2:	4293      	cmp	r3, r2
 80188f4:	d02c      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	4a22      	ldr	r2, [pc, #136]	; (8018984 <HAL_DMA_IRQHandler+0x6ac>)
 80188fc:	4293      	cmp	r3, r2
 80188fe:	d027      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	4a20      	ldr	r2, [pc, #128]	; (8018988 <HAL_DMA_IRQHandler+0x6b0>)
 8018906:	4293      	cmp	r3, r2
 8018908:	d022      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	4a1f      	ldr	r2, [pc, #124]	; (801898c <HAL_DMA_IRQHandler+0x6b4>)
 8018910:	4293      	cmp	r3, r2
 8018912:	d01d      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4a1d      	ldr	r2, [pc, #116]	; (8018990 <HAL_DMA_IRQHandler+0x6b8>)
 801891a:	4293      	cmp	r3, r2
 801891c:	d018      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	4a1c      	ldr	r2, [pc, #112]	; (8018994 <HAL_DMA_IRQHandler+0x6bc>)
 8018924:	4293      	cmp	r3, r2
 8018926:	d013      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	4a1a      	ldr	r2, [pc, #104]	; (8018998 <HAL_DMA_IRQHandler+0x6c0>)
 801892e:	4293      	cmp	r3, r2
 8018930:	d00e      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	4a19      	ldr	r2, [pc, #100]	; (801899c <HAL_DMA_IRQHandler+0x6c4>)
 8018938:	4293      	cmp	r3, r2
 801893a:	d009      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	4a17      	ldr	r2, [pc, #92]	; (80189a0 <HAL_DMA_IRQHandler+0x6c8>)
 8018942:	4293      	cmp	r3, r2
 8018944:	d004      	beq.n	8018950 <HAL_DMA_IRQHandler+0x678>
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	4a16      	ldr	r2, [pc, #88]	; (80189a4 <HAL_DMA_IRQHandler+0x6cc>)
 801894c:	4293      	cmp	r3, r2
 801894e:	d12b      	bne.n	80189a8 <HAL_DMA_IRQHandler+0x6d0>
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	f003 0310 	and.w	r3, r3, #16
 801895a:	2b00      	cmp	r3, #0
 801895c:	bf14      	ite	ne
 801895e:	2301      	movne	r3, #1
 8018960:	2300      	moveq	r3, #0
 8018962:	b2db      	uxtb	r3, r3
 8018964:	e02a      	b.n	80189bc <HAL_DMA_IRQHandler+0x6e4>
 8018966:	bf00      	nop
 8018968:	40020010 	.word	0x40020010
 801896c:	40020028 	.word	0x40020028
 8018970:	40020040 	.word	0x40020040
 8018974:	40020058 	.word	0x40020058
 8018978:	40020070 	.word	0x40020070
 801897c:	40020088 	.word	0x40020088
 8018980:	400200a0 	.word	0x400200a0
 8018984:	400200b8 	.word	0x400200b8
 8018988:	40020410 	.word	0x40020410
 801898c:	40020428 	.word	0x40020428
 8018990:	40020440 	.word	0x40020440
 8018994:	40020458 	.word	0x40020458
 8018998:	40020470 	.word	0x40020470
 801899c:	40020488 	.word	0x40020488
 80189a0:	400204a0 	.word	0x400204a0
 80189a4:	400204b8 	.word	0x400204b8
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	f003 0302 	and.w	r3, r3, #2
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	bf14      	ite	ne
 80189b6:	2301      	movne	r3, #1
 80189b8:	2300      	moveq	r3, #0
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	2b00      	cmp	r3, #0
 80189be:	f000 8087 	beq.w	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189c6:	f003 031f 	and.w	r3, r3, #31
 80189ca:	2220      	movs	r2, #32
 80189cc:	409a      	lsls	r2, r3
 80189ce:	6a3b      	ldr	r3, [r7, #32]
 80189d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	2b04      	cmp	r3, #4
 80189dc:	d139      	bne.n	8018a52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	681a      	ldr	r2, [r3, #0]
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f022 0216 	bic.w	r2, r2, #22
 80189ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	695a      	ldr	r2, [r3, #20]
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80189fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d103      	bne.n	8018a0e <HAL_DMA_IRQHandler+0x736>
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d007      	beq.n	8018a1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	681a      	ldr	r2, [r3, #0]
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	f022 0208 	bic.w	r2, r2, #8
 8018a1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a22:	f003 031f 	and.w	r3, r3, #31
 8018a26:	223f      	movs	r2, #63	; 0x3f
 8018a28:	409a      	lsls	r2, r3
 8018a2a:	6a3b      	ldr	r3, [r7, #32]
 8018a2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2201      	movs	r2, #1
 8018a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	2200      	movs	r2, #0
 8018a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	f000 834a 	beq.w	80190dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	4798      	blx	r3
          }
          return;
 8018a50:	e344      	b.n	80190dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d018      	beq.n	8018a92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d108      	bne.n	8018a80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d02c      	beq.n	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	4798      	blx	r3
 8018a7e:	e027      	b.n	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d023      	beq.n	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	4798      	blx	r3
 8018a90:	e01e      	b.n	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d10f      	bne.n	8018ac0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	681a      	ldr	r2, [r3, #0]
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	f022 0210 	bic.w	r2, r2, #16
 8018aae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2201      	movs	r2, #1
 8018ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2200      	movs	r2, #0
 8018abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d003      	beq.n	8018ad0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	f000 8306 	beq.w	80190e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ade:	f003 0301 	and.w	r3, r3, #1
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	f000 8088 	beq.w	8018bf8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2204      	movs	r2, #4
 8018aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	4a7a      	ldr	r2, [pc, #488]	; (8018ce0 <HAL_DMA_IRQHandler+0xa08>)
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d04a      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	4a79      	ldr	r2, [pc, #484]	; (8018ce4 <HAL_DMA_IRQHandler+0xa0c>)
 8018b00:	4293      	cmp	r3, r2
 8018b02:	d045      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	4a77      	ldr	r2, [pc, #476]	; (8018ce8 <HAL_DMA_IRQHandler+0xa10>)
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	d040      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	4a76      	ldr	r2, [pc, #472]	; (8018cec <HAL_DMA_IRQHandler+0xa14>)
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d03b      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	4a74      	ldr	r2, [pc, #464]	; (8018cf0 <HAL_DMA_IRQHandler+0xa18>)
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	d036      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	4a73      	ldr	r2, [pc, #460]	; (8018cf4 <HAL_DMA_IRQHandler+0xa1c>)
 8018b28:	4293      	cmp	r3, r2
 8018b2a:	d031      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	4a71      	ldr	r2, [pc, #452]	; (8018cf8 <HAL_DMA_IRQHandler+0xa20>)
 8018b32:	4293      	cmp	r3, r2
 8018b34:	d02c      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	4a70      	ldr	r2, [pc, #448]	; (8018cfc <HAL_DMA_IRQHandler+0xa24>)
 8018b3c:	4293      	cmp	r3, r2
 8018b3e:	d027      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	4a6e      	ldr	r2, [pc, #440]	; (8018d00 <HAL_DMA_IRQHandler+0xa28>)
 8018b46:	4293      	cmp	r3, r2
 8018b48:	d022      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	4a6d      	ldr	r2, [pc, #436]	; (8018d04 <HAL_DMA_IRQHandler+0xa2c>)
 8018b50:	4293      	cmp	r3, r2
 8018b52:	d01d      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4a6b      	ldr	r2, [pc, #428]	; (8018d08 <HAL_DMA_IRQHandler+0xa30>)
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d018      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4a6a      	ldr	r2, [pc, #424]	; (8018d0c <HAL_DMA_IRQHandler+0xa34>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d013      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4a68      	ldr	r2, [pc, #416]	; (8018d10 <HAL_DMA_IRQHandler+0xa38>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d00e      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a67      	ldr	r2, [pc, #412]	; (8018d14 <HAL_DMA_IRQHandler+0xa3c>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d009      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a65      	ldr	r2, [pc, #404]	; (8018d18 <HAL_DMA_IRQHandler+0xa40>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d004      	beq.n	8018b90 <HAL_DMA_IRQHandler+0x8b8>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a64      	ldr	r2, [pc, #400]	; (8018d1c <HAL_DMA_IRQHandler+0xa44>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d108      	bne.n	8018ba2 <HAL_DMA_IRQHandler+0x8ca>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f022 0201 	bic.w	r2, r2, #1
 8018b9e:	601a      	str	r2, [r3, #0]
 8018ba0:	e007      	b.n	8018bb2 <HAL_DMA_IRQHandler+0x8da>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	f022 0201 	bic.w	r2, r2, #1
 8018bb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	3301      	adds	r3, #1
 8018bb6:	60fb      	str	r3, [r7, #12]
 8018bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d307      	bcc.n	8018bce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f003 0301 	and.w	r3, r3, #1
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d1f2      	bne.n	8018bb2 <HAL_DMA_IRQHandler+0x8da>
 8018bcc:	e000      	b.n	8018bd0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8018bce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f003 0301 	and.w	r3, r3, #1
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d004      	beq.n	8018be8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2203      	movs	r2, #3
 8018be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8018be6:	e003      	b.n	8018bf0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	2201      	movs	r2, #1
 8018bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	f000 8272 	beq.w	80190e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	4798      	blx	r3
 8018c0a:	e26c      	b.n	80190e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a43      	ldr	r2, [pc, #268]	; (8018d20 <HAL_DMA_IRQHandler+0xa48>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d022      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a42      	ldr	r2, [pc, #264]	; (8018d24 <HAL_DMA_IRQHandler+0xa4c>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d01d      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	4a40      	ldr	r2, [pc, #256]	; (8018d28 <HAL_DMA_IRQHandler+0xa50>)
 8018c26:	4293      	cmp	r3, r2
 8018c28:	d018      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	4a3f      	ldr	r2, [pc, #252]	; (8018d2c <HAL_DMA_IRQHandler+0xa54>)
 8018c30:	4293      	cmp	r3, r2
 8018c32:	d013      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	4a3d      	ldr	r2, [pc, #244]	; (8018d30 <HAL_DMA_IRQHandler+0xa58>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d00e      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	4a3c      	ldr	r2, [pc, #240]	; (8018d34 <HAL_DMA_IRQHandler+0xa5c>)
 8018c44:	4293      	cmp	r3, r2
 8018c46:	d009      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	4a3a      	ldr	r2, [pc, #232]	; (8018d38 <HAL_DMA_IRQHandler+0xa60>)
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d004      	beq.n	8018c5c <HAL_DMA_IRQHandler+0x984>
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	4a39      	ldr	r2, [pc, #228]	; (8018d3c <HAL_DMA_IRQHandler+0xa64>)
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d101      	bne.n	8018c60 <HAL_DMA_IRQHandler+0x988>
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	e000      	b.n	8018c62 <HAL_DMA_IRQHandler+0x98a>
 8018c60:	2300      	movs	r3, #0
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	f000 823f 	beq.w	80190e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c74:	f003 031f 	and.w	r3, r3, #31
 8018c78:	2204      	movs	r2, #4
 8018c7a:	409a      	lsls	r2, r3
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	4013      	ands	r3, r2
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	f000 80cd 	beq.w	8018e20 <HAL_DMA_IRQHandler+0xb48>
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	f003 0304 	and.w	r3, r3, #4
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	f000 80c7 	beq.w	8018e20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c96:	f003 031f 	and.w	r3, r3, #31
 8018c9a:	2204      	movs	r2, #4
 8018c9c:	409a      	lsls	r2, r3
 8018c9e:	69fb      	ldr	r3, [r7, #28]
 8018ca0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ca2:	693b      	ldr	r3, [r7, #16]
 8018ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d049      	beq.n	8018d40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d109      	bne.n	8018cca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	f000 8210 	beq.w	80190e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018cc8:	e20a      	b.n	80190e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f000 8206 	beq.w	80190e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018cdc:	e200      	b.n	80190e0 <HAL_DMA_IRQHandler+0xe08>
 8018cde:	bf00      	nop
 8018ce0:	40020010 	.word	0x40020010
 8018ce4:	40020028 	.word	0x40020028
 8018ce8:	40020040 	.word	0x40020040
 8018cec:	40020058 	.word	0x40020058
 8018cf0:	40020070 	.word	0x40020070
 8018cf4:	40020088 	.word	0x40020088
 8018cf8:	400200a0 	.word	0x400200a0
 8018cfc:	400200b8 	.word	0x400200b8
 8018d00:	40020410 	.word	0x40020410
 8018d04:	40020428 	.word	0x40020428
 8018d08:	40020440 	.word	0x40020440
 8018d0c:	40020458 	.word	0x40020458
 8018d10:	40020470 	.word	0x40020470
 8018d14:	40020488 	.word	0x40020488
 8018d18:	400204a0 	.word	0x400204a0
 8018d1c:	400204b8 	.word	0x400204b8
 8018d20:	58025408 	.word	0x58025408
 8018d24:	5802541c 	.word	0x5802541c
 8018d28:	58025430 	.word	0x58025430
 8018d2c:	58025444 	.word	0x58025444
 8018d30:	58025458 	.word	0x58025458
 8018d34:	5802546c 	.word	0x5802546c
 8018d38:	58025480 	.word	0x58025480
 8018d3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018d40:	693b      	ldr	r3, [r7, #16]
 8018d42:	f003 0320 	and.w	r3, r3, #32
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d160      	bne.n	8018e0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	4a7f      	ldr	r2, [pc, #508]	; (8018f4c <HAL_DMA_IRQHandler+0xc74>)
 8018d50:	4293      	cmp	r3, r2
 8018d52:	d04a      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	4a7d      	ldr	r2, [pc, #500]	; (8018f50 <HAL_DMA_IRQHandler+0xc78>)
 8018d5a:	4293      	cmp	r3, r2
 8018d5c:	d045      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	4a7c      	ldr	r2, [pc, #496]	; (8018f54 <HAL_DMA_IRQHandler+0xc7c>)
 8018d64:	4293      	cmp	r3, r2
 8018d66:	d040      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	4a7a      	ldr	r2, [pc, #488]	; (8018f58 <HAL_DMA_IRQHandler+0xc80>)
 8018d6e:	4293      	cmp	r3, r2
 8018d70:	d03b      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	4a79      	ldr	r2, [pc, #484]	; (8018f5c <HAL_DMA_IRQHandler+0xc84>)
 8018d78:	4293      	cmp	r3, r2
 8018d7a:	d036      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	4a77      	ldr	r2, [pc, #476]	; (8018f60 <HAL_DMA_IRQHandler+0xc88>)
 8018d82:	4293      	cmp	r3, r2
 8018d84:	d031      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	4a76      	ldr	r2, [pc, #472]	; (8018f64 <HAL_DMA_IRQHandler+0xc8c>)
 8018d8c:	4293      	cmp	r3, r2
 8018d8e:	d02c      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	4a74      	ldr	r2, [pc, #464]	; (8018f68 <HAL_DMA_IRQHandler+0xc90>)
 8018d96:	4293      	cmp	r3, r2
 8018d98:	d027      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	4a73      	ldr	r2, [pc, #460]	; (8018f6c <HAL_DMA_IRQHandler+0xc94>)
 8018da0:	4293      	cmp	r3, r2
 8018da2:	d022      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	4a71      	ldr	r2, [pc, #452]	; (8018f70 <HAL_DMA_IRQHandler+0xc98>)
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d01d      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	4a70      	ldr	r2, [pc, #448]	; (8018f74 <HAL_DMA_IRQHandler+0xc9c>)
 8018db4:	4293      	cmp	r3, r2
 8018db6:	d018      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4a6e      	ldr	r2, [pc, #440]	; (8018f78 <HAL_DMA_IRQHandler+0xca0>)
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	d013      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4a6d      	ldr	r2, [pc, #436]	; (8018f7c <HAL_DMA_IRQHandler+0xca4>)
 8018dc8:	4293      	cmp	r3, r2
 8018dca:	d00e      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4a6b      	ldr	r2, [pc, #428]	; (8018f80 <HAL_DMA_IRQHandler+0xca8>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d009      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	4a6a      	ldr	r2, [pc, #424]	; (8018f84 <HAL_DMA_IRQHandler+0xcac>)
 8018ddc:	4293      	cmp	r3, r2
 8018dde:	d004      	beq.n	8018dea <HAL_DMA_IRQHandler+0xb12>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4a68      	ldr	r2, [pc, #416]	; (8018f88 <HAL_DMA_IRQHandler+0xcb0>)
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d108      	bne.n	8018dfc <HAL_DMA_IRQHandler+0xb24>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f022 0208 	bic.w	r2, r2, #8
 8018df8:	601a      	str	r2, [r3, #0]
 8018dfa:	e007      	b.n	8018e0c <HAL_DMA_IRQHandler+0xb34>
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	681a      	ldr	r2, [r3, #0]
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	f022 0204 	bic.w	r2, r2, #4
 8018e0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	f000 8165 	beq.w	80190e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018e1e:	e15f      	b.n	80190e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e24:	f003 031f 	and.w	r3, r3, #31
 8018e28:	2202      	movs	r2, #2
 8018e2a:	409a      	lsls	r2, r3
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	4013      	ands	r3, r2
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f000 80c5 	beq.w	8018fc0 <HAL_DMA_IRQHandler+0xce8>
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	f003 0302 	and.w	r3, r3, #2
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	f000 80bf 	beq.w	8018fc0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e46:	f003 031f 	and.w	r3, r3, #31
 8018e4a:	2202      	movs	r2, #2
 8018e4c:	409a      	lsls	r2, r3
 8018e4e:	69fb      	ldr	r3, [r7, #28]
 8018e50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018e52:	693b      	ldr	r3, [r7, #16]
 8018e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d018      	beq.n	8018e8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d109      	bne.n	8018e7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f000 813a 	beq.w	80190e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e74:	6878      	ldr	r0, [r7, #4]
 8018e76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018e78:	e134      	b.n	80190e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	f000 8130 	beq.w	80190e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018e8c:	e12a      	b.n	80190e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	f003 0320 	and.w	r3, r3, #32
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	f040 8089 	bne.w	8018fac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	4a2b      	ldr	r2, [pc, #172]	; (8018f4c <HAL_DMA_IRQHandler+0xc74>)
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d04a      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	4a29      	ldr	r2, [pc, #164]	; (8018f50 <HAL_DMA_IRQHandler+0xc78>)
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d045      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	4a28      	ldr	r2, [pc, #160]	; (8018f54 <HAL_DMA_IRQHandler+0xc7c>)
 8018eb4:	4293      	cmp	r3, r2
 8018eb6:	d040      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	4a26      	ldr	r2, [pc, #152]	; (8018f58 <HAL_DMA_IRQHandler+0xc80>)
 8018ebe:	4293      	cmp	r3, r2
 8018ec0:	d03b      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	4a25      	ldr	r2, [pc, #148]	; (8018f5c <HAL_DMA_IRQHandler+0xc84>)
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	d036      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4a23      	ldr	r2, [pc, #140]	; (8018f60 <HAL_DMA_IRQHandler+0xc88>)
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	d031      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4a22      	ldr	r2, [pc, #136]	; (8018f64 <HAL_DMA_IRQHandler+0xc8c>)
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d02c      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	4a20      	ldr	r2, [pc, #128]	; (8018f68 <HAL_DMA_IRQHandler+0xc90>)
 8018ee6:	4293      	cmp	r3, r2
 8018ee8:	d027      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	4a1f      	ldr	r2, [pc, #124]	; (8018f6c <HAL_DMA_IRQHandler+0xc94>)
 8018ef0:	4293      	cmp	r3, r2
 8018ef2:	d022      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	4a1d      	ldr	r2, [pc, #116]	; (8018f70 <HAL_DMA_IRQHandler+0xc98>)
 8018efa:	4293      	cmp	r3, r2
 8018efc:	d01d      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4a1c      	ldr	r2, [pc, #112]	; (8018f74 <HAL_DMA_IRQHandler+0xc9c>)
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d018      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4a1a      	ldr	r2, [pc, #104]	; (8018f78 <HAL_DMA_IRQHandler+0xca0>)
 8018f0e:	4293      	cmp	r3, r2
 8018f10:	d013      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	4a19      	ldr	r2, [pc, #100]	; (8018f7c <HAL_DMA_IRQHandler+0xca4>)
 8018f18:	4293      	cmp	r3, r2
 8018f1a:	d00e      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	4a17      	ldr	r2, [pc, #92]	; (8018f80 <HAL_DMA_IRQHandler+0xca8>)
 8018f22:	4293      	cmp	r3, r2
 8018f24:	d009      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	4a16      	ldr	r2, [pc, #88]	; (8018f84 <HAL_DMA_IRQHandler+0xcac>)
 8018f2c:	4293      	cmp	r3, r2
 8018f2e:	d004      	beq.n	8018f3a <HAL_DMA_IRQHandler+0xc62>
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	4a14      	ldr	r2, [pc, #80]	; (8018f88 <HAL_DMA_IRQHandler+0xcb0>)
 8018f36:	4293      	cmp	r3, r2
 8018f38:	d128      	bne.n	8018f8c <HAL_DMA_IRQHandler+0xcb4>
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	f022 0214 	bic.w	r2, r2, #20
 8018f48:	601a      	str	r2, [r3, #0]
 8018f4a:	e027      	b.n	8018f9c <HAL_DMA_IRQHandler+0xcc4>
 8018f4c:	40020010 	.word	0x40020010
 8018f50:	40020028 	.word	0x40020028
 8018f54:	40020040 	.word	0x40020040
 8018f58:	40020058 	.word	0x40020058
 8018f5c:	40020070 	.word	0x40020070
 8018f60:	40020088 	.word	0x40020088
 8018f64:	400200a0 	.word	0x400200a0
 8018f68:	400200b8 	.word	0x400200b8
 8018f6c:	40020410 	.word	0x40020410
 8018f70:	40020428 	.word	0x40020428
 8018f74:	40020440 	.word	0x40020440
 8018f78:	40020458 	.word	0x40020458
 8018f7c:	40020470 	.word	0x40020470
 8018f80:	40020488 	.word	0x40020488
 8018f84:	400204a0 	.word	0x400204a0
 8018f88:	400204b8 	.word	0x400204b8
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	f022 020a 	bic.w	r2, r2, #10
 8018f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2201      	movs	r2, #1
 8018fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f000 8097 	beq.w	80190e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018fbe:	e091      	b.n	80190e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fc4:	f003 031f 	and.w	r3, r3, #31
 8018fc8:	2208      	movs	r2, #8
 8018fca:	409a      	lsls	r2, r3
 8018fcc:	697b      	ldr	r3, [r7, #20]
 8018fce:	4013      	ands	r3, r2
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f000 8088 	beq.w	80190e6 <HAL_DMA_IRQHandler+0xe0e>
 8018fd6:	693b      	ldr	r3, [r7, #16]
 8018fd8:	f003 0308 	and.w	r3, r3, #8
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f000 8082 	beq.w	80190e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	4a41      	ldr	r2, [pc, #260]	; (80190ec <HAL_DMA_IRQHandler+0xe14>)
 8018fe8:	4293      	cmp	r3, r2
 8018fea:	d04a      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a3f      	ldr	r2, [pc, #252]	; (80190f0 <HAL_DMA_IRQHandler+0xe18>)
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d045      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	4a3e      	ldr	r2, [pc, #248]	; (80190f4 <HAL_DMA_IRQHandler+0xe1c>)
 8018ffc:	4293      	cmp	r3, r2
 8018ffe:	d040      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	4a3c      	ldr	r2, [pc, #240]	; (80190f8 <HAL_DMA_IRQHandler+0xe20>)
 8019006:	4293      	cmp	r3, r2
 8019008:	d03b      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	4a3b      	ldr	r2, [pc, #236]	; (80190fc <HAL_DMA_IRQHandler+0xe24>)
 8019010:	4293      	cmp	r3, r2
 8019012:	d036      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	4a39      	ldr	r2, [pc, #228]	; (8019100 <HAL_DMA_IRQHandler+0xe28>)
 801901a:	4293      	cmp	r3, r2
 801901c:	d031      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	4a38      	ldr	r2, [pc, #224]	; (8019104 <HAL_DMA_IRQHandler+0xe2c>)
 8019024:	4293      	cmp	r3, r2
 8019026:	d02c      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	4a36      	ldr	r2, [pc, #216]	; (8019108 <HAL_DMA_IRQHandler+0xe30>)
 801902e:	4293      	cmp	r3, r2
 8019030:	d027      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	4a35      	ldr	r2, [pc, #212]	; (801910c <HAL_DMA_IRQHandler+0xe34>)
 8019038:	4293      	cmp	r3, r2
 801903a:	d022      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	4a33      	ldr	r2, [pc, #204]	; (8019110 <HAL_DMA_IRQHandler+0xe38>)
 8019042:	4293      	cmp	r3, r2
 8019044:	d01d      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	4a32      	ldr	r2, [pc, #200]	; (8019114 <HAL_DMA_IRQHandler+0xe3c>)
 801904c:	4293      	cmp	r3, r2
 801904e:	d018      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4a30      	ldr	r2, [pc, #192]	; (8019118 <HAL_DMA_IRQHandler+0xe40>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d013      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	4a2f      	ldr	r2, [pc, #188]	; (801911c <HAL_DMA_IRQHandler+0xe44>)
 8019060:	4293      	cmp	r3, r2
 8019062:	d00e      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	4a2d      	ldr	r2, [pc, #180]	; (8019120 <HAL_DMA_IRQHandler+0xe48>)
 801906a:	4293      	cmp	r3, r2
 801906c:	d009      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	4a2c      	ldr	r2, [pc, #176]	; (8019124 <HAL_DMA_IRQHandler+0xe4c>)
 8019074:	4293      	cmp	r3, r2
 8019076:	d004      	beq.n	8019082 <HAL_DMA_IRQHandler+0xdaa>
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	4a2a      	ldr	r2, [pc, #168]	; (8019128 <HAL_DMA_IRQHandler+0xe50>)
 801907e:	4293      	cmp	r3, r2
 8019080:	d108      	bne.n	8019094 <HAL_DMA_IRQHandler+0xdbc>
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	f022 021c 	bic.w	r2, r2, #28
 8019090:	601a      	str	r2, [r3, #0]
 8019092:	e007      	b.n	80190a4 <HAL_DMA_IRQHandler+0xdcc>
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	f022 020e 	bic.w	r2, r2, #14
 80190a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190a8:	f003 031f 	and.w	r3, r3, #31
 80190ac:	2201      	movs	r2, #1
 80190ae:	409a      	lsls	r2, r3
 80190b0:	69fb      	ldr	r3, [r7, #28]
 80190b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	2201      	movs	r2, #1
 80190b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	2201      	movs	r2, #1
 80190be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2200      	movs	r2, #0
 80190c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d009      	beq.n	80190e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	4798      	blx	r3
 80190da:	e004      	b.n	80190e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80190dc:	bf00      	nop
 80190de:	e002      	b.n	80190e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80190e0:	bf00      	nop
 80190e2:	e000      	b.n	80190e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80190e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80190e6:	3728      	adds	r7, #40	; 0x28
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	40020010 	.word	0x40020010
 80190f0:	40020028 	.word	0x40020028
 80190f4:	40020040 	.word	0x40020040
 80190f8:	40020058 	.word	0x40020058
 80190fc:	40020070 	.word	0x40020070
 8019100:	40020088 	.word	0x40020088
 8019104:	400200a0 	.word	0x400200a0
 8019108:	400200b8 	.word	0x400200b8
 801910c:	40020410 	.word	0x40020410
 8019110:	40020428 	.word	0x40020428
 8019114:	40020440 	.word	0x40020440
 8019118:	40020458 	.word	0x40020458
 801911c:	40020470 	.word	0x40020470
 8019120:	40020488 	.word	0x40020488
 8019124:	400204a0 	.word	0x400204a0
 8019128:	400204b8 	.word	0x400204b8

0801912c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801912c:	b480      	push	{r7}
 801912e:	b087      	sub	sp, #28
 8019130:	af00      	add	r7, sp, #0
 8019132:	60f8      	str	r0, [r7, #12]
 8019134:	60b9      	str	r1, [r7, #8]
 8019136:	607a      	str	r2, [r7, #4]
 8019138:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801913e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019144:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	4a7f      	ldr	r2, [pc, #508]	; (8019348 <DMA_SetConfig+0x21c>)
 801914c:	4293      	cmp	r3, r2
 801914e:	d072      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	4a7d      	ldr	r2, [pc, #500]	; (801934c <DMA_SetConfig+0x220>)
 8019156:	4293      	cmp	r3, r2
 8019158:	d06d      	beq.n	8019236 <DMA_SetConfig+0x10a>
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	4a7c      	ldr	r2, [pc, #496]	; (8019350 <DMA_SetConfig+0x224>)
 8019160:	4293      	cmp	r3, r2
 8019162:	d068      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	4a7a      	ldr	r2, [pc, #488]	; (8019354 <DMA_SetConfig+0x228>)
 801916a:	4293      	cmp	r3, r2
 801916c:	d063      	beq.n	8019236 <DMA_SetConfig+0x10a>
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	4a79      	ldr	r2, [pc, #484]	; (8019358 <DMA_SetConfig+0x22c>)
 8019174:	4293      	cmp	r3, r2
 8019176:	d05e      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	4a77      	ldr	r2, [pc, #476]	; (801935c <DMA_SetConfig+0x230>)
 801917e:	4293      	cmp	r3, r2
 8019180:	d059      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	4a76      	ldr	r2, [pc, #472]	; (8019360 <DMA_SetConfig+0x234>)
 8019188:	4293      	cmp	r3, r2
 801918a:	d054      	beq.n	8019236 <DMA_SetConfig+0x10a>
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a74      	ldr	r2, [pc, #464]	; (8019364 <DMA_SetConfig+0x238>)
 8019192:	4293      	cmp	r3, r2
 8019194:	d04f      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	4a73      	ldr	r2, [pc, #460]	; (8019368 <DMA_SetConfig+0x23c>)
 801919c:	4293      	cmp	r3, r2
 801919e:	d04a      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	4a71      	ldr	r2, [pc, #452]	; (801936c <DMA_SetConfig+0x240>)
 80191a6:	4293      	cmp	r3, r2
 80191a8:	d045      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	4a70      	ldr	r2, [pc, #448]	; (8019370 <DMA_SetConfig+0x244>)
 80191b0:	4293      	cmp	r3, r2
 80191b2:	d040      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4a6e      	ldr	r2, [pc, #440]	; (8019374 <DMA_SetConfig+0x248>)
 80191ba:	4293      	cmp	r3, r2
 80191bc:	d03b      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	4a6d      	ldr	r2, [pc, #436]	; (8019378 <DMA_SetConfig+0x24c>)
 80191c4:	4293      	cmp	r3, r2
 80191c6:	d036      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	4a6b      	ldr	r2, [pc, #428]	; (801937c <DMA_SetConfig+0x250>)
 80191ce:	4293      	cmp	r3, r2
 80191d0:	d031      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	4a6a      	ldr	r2, [pc, #424]	; (8019380 <DMA_SetConfig+0x254>)
 80191d8:	4293      	cmp	r3, r2
 80191da:	d02c      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	4a68      	ldr	r2, [pc, #416]	; (8019384 <DMA_SetConfig+0x258>)
 80191e2:	4293      	cmp	r3, r2
 80191e4:	d027      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	4a67      	ldr	r2, [pc, #412]	; (8019388 <DMA_SetConfig+0x25c>)
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d022      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	4a65      	ldr	r2, [pc, #404]	; (801938c <DMA_SetConfig+0x260>)
 80191f6:	4293      	cmp	r3, r2
 80191f8:	d01d      	beq.n	8019236 <DMA_SetConfig+0x10a>
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	4a64      	ldr	r2, [pc, #400]	; (8019390 <DMA_SetConfig+0x264>)
 8019200:	4293      	cmp	r3, r2
 8019202:	d018      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	4a62      	ldr	r2, [pc, #392]	; (8019394 <DMA_SetConfig+0x268>)
 801920a:	4293      	cmp	r3, r2
 801920c:	d013      	beq.n	8019236 <DMA_SetConfig+0x10a>
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	4a61      	ldr	r2, [pc, #388]	; (8019398 <DMA_SetConfig+0x26c>)
 8019214:	4293      	cmp	r3, r2
 8019216:	d00e      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	4a5f      	ldr	r2, [pc, #380]	; (801939c <DMA_SetConfig+0x270>)
 801921e:	4293      	cmp	r3, r2
 8019220:	d009      	beq.n	8019236 <DMA_SetConfig+0x10a>
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	4a5e      	ldr	r2, [pc, #376]	; (80193a0 <DMA_SetConfig+0x274>)
 8019228:	4293      	cmp	r3, r2
 801922a:	d004      	beq.n	8019236 <DMA_SetConfig+0x10a>
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	4a5c      	ldr	r2, [pc, #368]	; (80193a4 <DMA_SetConfig+0x278>)
 8019232:	4293      	cmp	r3, r2
 8019234:	d101      	bne.n	801923a <DMA_SetConfig+0x10e>
 8019236:	2301      	movs	r3, #1
 8019238:	e000      	b.n	801923c <DMA_SetConfig+0x110>
 801923a:	2300      	movs	r3, #0
 801923c:	2b00      	cmp	r3, #0
 801923e:	d00d      	beq.n	801925c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019244:	68fa      	ldr	r2, [r7, #12]
 8019246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019248:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801924e:	2b00      	cmp	r3, #0
 8019250:	d004      	beq.n	801925c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019256:	68fa      	ldr	r2, [r7, #12]
 8019258:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801925a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	4a39      	ldr	r2, [pc, #228]	; (8019348 <DMA_SetConfig+0x21c>)
 8019262:	4293      	cmp	r3, r2
 8019264:	d04a      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	4a38      	ldr	r2, [pc, #224]	; (801934c <DMA_SetConfig+0x220>)
 801926c:	4293      	cmp	r3, r2
 801926e:	d045      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	4a36      	ldr	r2, [pc, #216]	; (8019350 <DMA_SetConfig+0x224>)
 8019276:	4293      	cmp	r3, r2
 8019278:	d040      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	4a35      	ldr	r2, [pc, #212]	; (8019354 <DMA_SetConfig+0x228>)
 8019280:	4293      	cmp	r3, r2
 8019282:	d03b      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	4a33      	ldr	r2, [pc, #204]	; (8019358 <DMA_SetConfig+0x22c>)
 801928a:	4293      	cmp	r3, r2
 801928c:	d036      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	4a32      	ldr	r2, [pc, #200]	; (801935c <DMA_SetConfig+0x230>)
 8019294:	4293      	cmp	r3, r2
 8019296:	d031      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	4a30      	ldr	r2, [pc, #192]	; (8019360 <DMA_SetConfig+0x234>)
 801929e:	4293      	cmp	r3, r2
 80192a0:	d02c      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	4a2f      	ldr	r2, [pc, #188]	; (8019364 <DMA_SetConfig+0x238>)
 80192a8:	4293      	cmp	r3, r2
 80192aa:	d027      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	4a2d      	ldr	r2, [pc, #180]	; (8019368 <DMA_SetConfig+0x23c>)
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d022      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4a2c      	ldr	r2, [pc, #176]	; (801936c <DMA_SetConfig+0x240>)
 80192bc:	4293      	cmp	r3, r2
 80192be:	d01d      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	4a2a      	ldr	r2, [pc, #168]	; (8019370 <DMA_SetConfig+0x244>)
 80192c6:	4293      	cmp	r3, r2
 80192c8:	d018      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	4a29      	ldr	r2, [pc, #164]	; (8019374 <DMA_SetConfig+0x248>)
 80192d0:	4293      	cmp	r3, r2
 80192d2:	d013      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	4a27      	ldr	r2, [pc, #156]	; (8019378 <DMA_SetConfig+0x24c>)
 80192da:	4293      	cmp	r3, r2
 80192dc:	d00e      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	4a26      	ldr	r2, [pc, #152]	; (801937c <DMA_SetConfig+0x250>)
 80192e4:	4293      	cmp	r3, r2
 80192e6:	d009      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	4a24      	ldr	r2, [pc, #144]	; (8019380 <DMA_SetConfig+0x254>)
 80192ee:	4293      	cmp	r3, r2
 80192f0:	d004      	beq.n	80192fc <DMA_SetConfig+0x1d0>
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	4a23      	ldr	r2, [pc, #140]	; (8019384 <DMA_SetConfig+0x258>)
 80192f8:	4293      	cmp	r3, r2
 80192fa:	d101      	bne.n	8019300 <DMA_SetConfig+0x1d4>
 80192fc:	2301      	movs	r3, #1
 80192fe:	e000      	b.n	8019302 <DMA_SetConfig+0x1d6>
 8019300:	2300      	movs	r3, #0
 8019302:	2b00      	cmp	r3, #0
 8019304:	d059      	beq.n	80193ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801930a:	f003 031f 	and.w	r3, r3, #31
 801930e:	223f      	movs	r2, #63	; 0x3f
 8019310:	409a      	lsls	r2, r3
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	681a      	ldr	r2, [r3, #0]
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8019324:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	683a      	ldr	r2, [r7, #0]
 801932c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	689b      	ldr	r3, [r3, #8]
 8019332:	2b40      	cmp	r3, #64	; 0x40
 8019334:	d138      	bne.n	80193a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	68ba      	ldr	r2, [r7, #8]
 8019344:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8019346:	e086      	b.n	8019456 <DMA_SetConfig+0x32a>
 8019348:	40020010 	.word	0x40020010
 801934c:	40020028 	.word	0x40020028
 8019350:	40020040 	.word	0x40020040
 8019354:	40020058 	.word	0x40020058
 8019358:	40020070 	.word	0x40020070
 801935c:	40020088 	.word	0x40020088
 8019360:	400200a0 	.word	0x400200a0
 8019364:	400200b8 	.word	0x400200b8
 8019368:	40020410 	.word	0x40020410
 801936c:	40020428 	.word	0x40020428
 8019370:	40020440 	.word	0x40020440
 8019374:	40020458 	.word	0x40020458
 8019378:	40020470 	.word	0x40020470
 801937c:	40020488 	.word	0x40020488
 8019380:	400204a0 	.word	0x400204a0
 8019384:	400204b8 	.word	0x400204b8
 8019388:	58025408 	.word	0x58025408
 801938c:	5802541c 	.word	0x5802541c
 8019390:	58025430 	.word	0x58025430
 8019394:	58025444 	.word	0x58025444
 8019398:	58025458 	.word	0x58025458
 801939c:	5802546c 	.word	0x5802546c
 80193a0:	58025480 	.word	0x58025480
 80193a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	68ba      	ldr	r2, [r7, #8]
 80193ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	60da      	str	r2, [r3, #12]
}
 80193b8:	e04d      	b.n	8019456 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	4a29      	ldr	r2, [pc, #164]	; (8019464 <DMA_SetConfig+0x338>)
 80193c0:	4293      	cmp	r3, r2
 80193c2:	d022      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	4a27      	ldr	r2, [pc, #156]	; (8019468 <DMA_SetConfig+0x33c>)
 80193ca:	4293      	cmp	r3, r2
 80193cc:	d01d      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	4a26      	ldr	r2, [pc, #152]	; (801946c <DMA_SetConfig+0x340>)
 80193d4:	4293      	cmp	r3, r2
 80193d6:	d018      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	4a24      	ldr	r2, [pc, #144]	; (8019470 <DMA_SetConfig+0x344>)
 80193de:	4293      	cmp	r3, r2
 80193e0:	d013      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	4a23      	ldr	r2, [pc, #140]	; (8019474 <DMA_SetConfig+0x348>)
 80193e8:	4293      	cmp	r3, r2
 80193ea:	d00e      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a21      	ldr	r2, [pc, #132]	; (8019478 <DMA_SetConfig+0x34c>)
 80193f2:	4293      	cmp	r3, r2
 80193f4:	d009      	beq.n	801940a <DMA_SetConfig+0x2de>
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	4a20      	ldr	r2, [pc, #128]	; (801947c <DMA_SetConfig+0x350>)
 80193fc:	4293      	cmp	r3, r2
 80193fe:	d004      	beq.n	801940a <DMA_SetConfig+0x2de>
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	4a1e      	ldr	r2, [pc, #120]	; (8019480 <DMA_SetConfig+0x354>)
 8019406:	4293      	cmp	r3, r2
 8019408:	d101      	bne.n	801940e <DMA_SetConfig+0x2e2>
 801940a:	2301      	movs	r3, #1
 801940c:	e000      	b.n	8019410 <DMA_SetConfig+0x2e4>
 801940e:	2300      	movs	r3, #0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d020      	beq.n	8019456 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019418:	f003 031f 	and.w	r3, r3, #31
 801941c:	2201      	movs	r2, #1
 801941e:	409a      	lsls	r2, r3
 8019420:	693b      	ldr	r3, [r7, #16]
 8019422:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	683a      	ldr	r2, [r7, #0]
 801942a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	689b      	ldr	r3, [r3, #8]
 8019430:	2b40      	cmp	r3, #64	; 0x40
 8019432:	d108      	bne.n	8019446 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	68ba      	ldr	r2, [r7, #8]
 8019442:	60da      	str	r2, [r3, #12]
}
 8019444:	e007      	b.n	8019456 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	68ba      	ldr	r2, [r7, #8]
 801944c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	60da      	str	r2, [r3, #12]
}
 8019456:	bf00      	nop
 8019458:	371c      	adds	r7, #28
 801945a:	46bd      	mov	sp, r7
 801945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019460:	4770      	bx	lr
 8019462:	bf00      	nop
 8019464:	58025408 	.word	0x58025408
 8019468:	5802541c 	.word	0x5802541c
 801946c:	58025430 	.word	0x58025430
 8019470:	58025444 	.word	0x58025444
 8019474:	58025458 	.word	0x58025458
 8019478:	5802546c 	.word	0x5802546c
 801947c:	58025480 	.word	0x58025480
 8019480:	58025494 	.word	0x58025494

08019484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019484:	b480      	push	{r7}
 8019486:	b085      	sub	sp, #20
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	4a42      	ldr	r2, [pc, #264]	; (801959c <DMA_CalcBaseAndBitshift+0x118>)
 8019492:	4293      	cmp	r3, r2
 8019494:	d04a      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	4a41      	ldr	r2, [pc, #260]	; (80195a0 <DMA_CalcBaseAndBitshift+0x11c>)
 801949c:	4293      	cmp	r3, r2
 801949e:	d045      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	4a3f      	ldr	r2, [pc, #252]	; (80195a4 <DMA_CalcBaseAndBitshift+0x120>)
 80194a6:	4293      	cmp	r3, r2
 80194a8:	d040      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	4a3e      	ldr	r2, [pc, #248]	; (80195a8 <DMA_CalcBaseAndBitshift+0x124>)
 80194b0:	4293      	cmp	r3, r2
 80194b2:	d03b      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	4a3c      	ldr	r2, [pc, #240]	; (80195ac <DMA_CalcBaseAndBitshift+0x128>)
 80194ba:	4293      	cmp	r3, r2
 80194bc:	d036      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	4a3b      	ldr	r2, [pc, #236]	; (80195b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80194c4:	4293      	cmp	r3, r2
 80194c6:	d031      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a39      	ldr	r2, [pc, #228]	; (80195b4 <DMA_CalcBaseAndBitshift+0x130>)
 80194ce:	4293      	cmp	r3, r2
 80194d0:	d02c      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	4a38      	ldr	r2, [pc, #224]	; (80195b8 <DMA_CalcBaseAndBitshift+0x134>)
 80194d8:	4293      	cmp	r3, r2
 80194da:	d027      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	4a36      	ldr	r2, [pc, #216]	; (80195bc <DMA_CalcBaseAndBitshift+0x138>)
 80194e2:	4293      	cmp	r3, r2
 80194e4:	d022      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	4a35      	ldr	r2, [pc, #212]	; (80195c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80194ec:	4293      	cmp	r3, r2
 80194ee:	d01d      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	4a33      	ldr	r2, [pc, #204]	; (80195c4 <DMA_CalcBaseAndBitshift+0x140>)
 80194f6:	4293      	cmp	r3, r2
 80194f8:	d018      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	4a32      	ldr	r2, [pc, #200]	; (80195c8 <DMA_CalcBaseAndBitshift+0x144>)
 8019500:	4293      	cmp	r3, r2
 8019502:	d013      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	4a30      	ldr	r2, [pc, #192]	; (80195cc <DMA_CalcBaseAndBitshift+0x148>)
 801950a:	4293      	cmp	r3, r2
 801950c:	d00e      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	4a2f      	ldr	r2, [pc, #188]	; (80195d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8019514:	4293      	cmp	r3, r2
 8019516:	d009      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	4a2d      	ldr	r2, [pc, #180]	; (80195d4 <DMA_CalcBaseAndBitshift+0x150>)
 801951e:	4293      	cmp	r3, r2
 8019520:	d004      	beq.n	801952c <DMA_CalcBaseAndBitshift+0xa8>
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	4a2c      	ldr	r2, [pc, #176]	; (80195d8 <DMA_CalcBaseAndBitshift+0x154>)
 8019528:	4293      	cmp	r3, r2
 801952a:	d101      	bne.n	8019530 <DMA_CalcBaseAndBitshift+0xac>
 801952c:	2301      	movs	r3, #1
 801952e:	e000      	b.n	8019532 <DMA_CalcBaseAndBitshift+0xae>
 8019530:	2300      	movs	r3, #0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d024      	beq.n	8019580 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	b2db      	uxtb	r3, r3
 801953c:	3b10      	subs	r3, #16
 801953e:	4a27      	ldr	r2, [pc, #156]	; (80195dc <DMA_CalcBaseAndBitshift+0x158>)
 8019540:	fba2 2303 	umull	r2, r3, r2, r3
 8019544:	091b      	lsrs	r3, r3, #4
 8019546:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	f003 0307 	and.w	r3, r3, #7
 801954e:	4a24      	ldr	r2, [pc, #144]	; (80195e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8019550:	5cd3      	ldrb	r3, [r2, r3]
 8019552:	461a      	mov	r2, r3
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	2b03      	cmp	r3, #3
 801955c:	d908      	bls.n	8019570 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	461a      	mov	r2, r3
 8019564:	4b1f      	ldr	r3, [pc, #124]	; (80195e4 <DMA_CalcBaseAndBitshift+0x160>)
 8019566:	4013      	ands	r3, r2
 8019568:	1d1a      	adds	r2, r3, #4
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	659a      	str	r2, [r3, #88]	; 0x58
 801956e:	e00d      	b.n	801958c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	461a      	mov	r2, r3
 8019576:	4b1b      	ldr	r3, [pc, #108]	; (80195e4 <DMA_CalcBaseAndBitshift+0x160>)
 8019578:	4013      	ands	r3, r2
 801957a:	687a      	ldr	r2, [r7, #4]
 801957c:	6593      	str	r3, [r2, #88]	; 0x58
 801957e:	e005      	b.n	801958c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019590:	4618      	mov	r0, r3
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr
 801959c:	40020010 	.word	0x40020010
 80195a0:	40020028 	.word	0x40020028
 80195a4:	40020040 	.word	0x40020040
 80195a8:	40020058 	.word	0x40020058
 80195ac:	40020070 	.word	0x40020070
 80195b0:	40020088 	.word	0x40020088
 80195b4:	400200a0 	.word	0x400200a0
 80195b8:	400200b8 	.word	0x400200b8
 80195bc:	40020410 	.word	0x40020410
 80195c0:	40020428 	.word	0x40020428
 80195c4:	40020440 	.word	0x40020440
 80195c8:	40020458 	.word	0x40020458
 80195cc:	40020470 	.word	0x40020470
 80195d0:	40020488 	.word	0x40020488
 80195d4:	400204a0 	.word	0x400204a0
 80195d8:	400204b8 	.word	0x400204b8
 80195dc:	aaaaaaab 	.word	0xaaaaaaab
 80195e0:	08020dbc 	.word	0x08020dbc
 80195e4:	fffffc00 	.word	0xfffffc00

080195e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80195e8:	b480      	push	{r7}
 80195ea:	b085      	sub	sp, #20
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80195f0:	2300      	movs	r3, #0
 80195f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	699b      	ldr	r3, [r3, #24]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d120      	bne.n	801963e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019600:	2b03      	cmp	r3, #3
 8019602:	d858      	bhi.n	80196b6 <DMA_CheckFifoParam+0xce>
 8019604:	a201      	add	r2, pc, #4	; (adr r2, 801960c <DMA_CheckFifoParam+0x24>)
 8019606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801960a:	bf00      	nop
 801960c:	0801961d 	.word	0x0801961d
 8019610:	0801962f 	.word	0x0801962f
 8019614:	0801961d 	.word	0x0801961d
 8019618:	080196b7 	.word	0x080196b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019624:	2b00      	cmp	r3, #0
 8019626:	d048      	beq.n	80196ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8019628:	2301      	movs	r3, #1
 801962a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801962c:	e045      	b.n	80196ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019636:	d142      	bne.n	80196be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019638:	2301      	movs	r3, #1
 801963a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801963c:	e03f      	b.n	80196be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	699b      	ldr	r3, [r3, #24]
 8019642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019646:	d123      	bne.n	8019690 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801964c:	2b03      	cmp	r3, #3
 801964e:	d838      	bhi.n	80196c2 <DMA_CheckFifoParam+0xda>
 8019650:	a201      	add	r2, pc, #4	; (adr r2, 8019658 <DMA_CheckFifoParam+0x70>)
 8019652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019656:	bf00      	nop
 8019658:	08019669 	.word	0x08019669
 801965c:	0801966f 	.word	0x0801966f
 8019660:	08019669 	.word	0x08019669
 8019664:	08019681 	.word	0x08019681
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8019668:	2301      	movs	r3, #1
 801966a:	73fb      	strb	r3, [r7, #15]
        break;
 801966c:	e030      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019676:	2b00      	cmp	r3, #0
 8019678:	d025      	beq.n	80196c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801967a:	2301      	movs	r3, #1
 801967c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801967e:	e022      	b.n	80196c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019688:	d11f      	bne.n	80196ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801968a:	2301      	movs	r3, #1
 801968c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801968e:	e01c      	b.n	80196ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019694:	2b02      	cmp	r3, #2
 8019696:	d902      	bls.n	801969e <DMA_CheckFifoParam+0xb6>
 8019698:	2b03      	cmp	r3, #3
 801969a:	d003      	beq.n	80196a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801969c:	e018      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801969e:	2301      	movs	r3, #1
 80196a0:	73fb      	strb	r3, [r7, #15]
        break;
 80196a2:	e015      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d00e      	beq.n	80196ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80196b0:	2301      	movs	r3, #1
 80196b2:	73fb      	strb	r3, [r7, #15]
    break;
 80196b4:	e00b      	b.n	80196ce <DMA_CheckFifoParam+0xe6>
        break;
 80196b6:	bf00      	nop
 80196b8:	e00a      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        break;
 80196ba:	bf00      	nop
 80196bc:	e008      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        break;
 80196be:	bf00      	nop
 80196c0:	e006      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        break;
 80196c2:	bf00      	nop
 80196c4:	e004      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        break;
 80196c6:	bf00      	nop
 80196c8:	e002      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
        break;
 80196ca:	bf00      	nop
 80196cc:	e000      	b.n	80196d0 <DMA_CheckFifoParam+0xe8>
    break;
 80196ce:	bf00      	nop
    }
  }

  return status;
 80196d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80196d2:	4618      	mov	r0, r3
 80196d4:	3714      	adds	r7, #20
 80196d6:	46bd      	mov	sp, r7
 80196d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196dc:	4770      	bx	lr
 80196de:	bf00      	nop

080196e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80196e0:	b480      	push	{r7}
 80196e2:	b085      	sub	sp, #20
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	4a38      	ldr	r2, [pc, #224]	; (80197d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80196f4:	4293      	cmp	r3, r2
 80196f6:	d022      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	4a36      	ldr	r2, [pc, #216]	; (80197d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80196fe:	4293      	cmp	r3, r2
 8019700:	d01d      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	4a35      	ldr	r2, [pc, #212]	; (80197dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8019708:	4293      	cmp	r3, r2
 801970a:	d018      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	4a33      	ldr	r2, [pc, #204]	; (80197e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8019712:	4293      	cmp	r3, r2
 8019714:	d013      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	4a32      	ldr	r2, [pc, #200]	; (80197e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801971c:	4293      	cmp	r3, r2
 801971e:	d00e      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	4a30      	ldr	r2, [pc, #192]	; (80197e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8019726:	4293      	cmp	r3, r2
 8019728:	d009      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	4a2f      	ldr	r2, [pc, #188]	; (80197ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d004      	beq.n	801973e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	4a2d      	ldr	r2, [pc, #180]	; (80197f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801973a:	4293      	cmp	r3, r2
 801973c:	d101      	bne.n	8019742 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801973e:	2301      	movs	r3, #1
 8019740:	e000      	b.n	8019744 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8019742:	2300      	movs	r3, #0
 8019744:	2b00      	cmp	r3, #0
 8019746:	d01a      	beq.n	801977e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	b2db      	uxtb	r3, r3
 801974e:	3b08      	subs	r3, #8
 8019750:	4a28      	ldr	r2, [pc, #160]	; (80197f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8019752:	fba2 2303 	umull	r2, r3, r2, r3
 8019756:	091b      	lsrs	r3, r3, #4
 8019758:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801975a:	68fa      	ldr	r2, [r7, #12]
 801975c:	4b26      	ldr	r3, [pc, #152]	; (80197f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801975e:	4413      	add	r3, r2
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	461a      	mov	r2, r3
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	4a24      	ldr	r2, [pc, #144]	; (80197fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801976c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	f003 031f 	and.w	r3, r3, #31
 8019774:	2201      	movs	r2, #1
 8019776:	409a      	lsls	r2, r3
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801977c:	e024      	b.n	80197c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	b2db      	uxtb	r3, r3
 8019784:	3b10      	subs	r3, #16
 8019786:	4a1e      	ldr	r2, [pc, #120]	; (8019800 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8019788:	fba2 2303 	umull	r2, r3, r2, r3
 801978c:	091b      	lsrs	r3, r3, #4
 801978e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	4a1c      	ldr	r2, [pc, #112]	; (8019804 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8019794:	4293      	cmp	r3, r2
 8019796:	d806      	bhi.n	80197a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	4a1b      	ldr	r2, [pc, #108]	; (8019808 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d902      	bls.n	80197a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	3308      	adds	r3, #8
 80197a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80197a6:	68fa      	ldr	r2, [r7, #12]
 80197a8:	4b18      	ldr	r3, [pc, #96]	; (801980c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80197aa:	4413      	add	r3, r2
 80197ac:	009b      	lsls	r3, r3, #2
 80197ae:	461a      	mov	r2, r3
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	4a16      	ldr	r2, [pc, #88]	; (8019810 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80197b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	f003 031f 	and.w	r3, r3, #31
 80197c0:	2201      	movs	r2, #1
 80197c2:	409a      	lsls	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80197c8:	bf00      	nop
 80197ca:	3714      	adds	r7, #20
 80197cc:	46bd      	mov	sp, r7
 80197ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d2:	4770      	bx	lr
 80197d4:	58025408 	.word	0x58025408
 80197d8:	5802541c 	.word	0x5802541c
 80197dc:	58025430 	.word	0x58025430
 80197e0:	58025444 	.word	0x58025444
 80197e4:	58025458 	.word	0x58025458
 80197e8:	5802546c 	.word	0x5802546c
 80197ec:	58025480 	.word	0x58025480
 80197f0:	58025494 	.word	0x58025494
 80197f4:	cccccccd 	.word	0xcccccccd
 80197f8:	16009600 	.word	0x16009600
 80197fc:	58025880 	.word	0x58025880
 8019800:	aaaaaaab 	.word	0xaaaaaaab
 8019804:	400204b8 	.word	0x400204b8
 8019808:	4002040f 	.word	0x4002040f
 801980c:	10008200 	.word	0x10008200
 8019810:	40020880 	.word	0x40020880

08019814 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019814:	b480      	push	{r7}
 8019816:	b085      	sub	sp, #20
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	685b      	ldr	r3, [r3, #4]
 8019820:	b2db      	uxtb	r3, r3
 8019822:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d04a      	beq.n	80198c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2b08      	cmp	r3, #8
 801982e:	d847      	bhi.n	80198c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	4a25      	ldr	r2, [pc, #148]	; (80198cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8019836:	4293      	cmp	r3, r2
 8019838:	d022      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	4a24      	ldr	r2, [pc, #144]	; (80198d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019840:	4293      	cmp	r3, r2
 8019842:	d01d      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	4a22      	ldr	r2, [pc, #136]	; (80198d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801984a:	4293      	cmp	r3, r2
 801984c:	d018      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	4a21      	ldr	r2, [pc, #132]	; (80198d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8019854:	4293      	cmp	r3, r2
 8019856:	d013      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4a1f      	ldr	r2, [pc, #124]	; (80198dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801985e:	4293      	cmp	r3, r2
 8019860:	d00e      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	4a1e      	ldr	r2, [pc, #120]	; (80198e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d009      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	4a1c      	ldr	r2, [pc, #112]	; (80198e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8019872:	4293      	cmp	r3, r2
 8019874:	d004      	beq.n	8019880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	4a1b      	ldr	r2, [pc, #108]	; (80198e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801987c:	4293      	cmp	r3, r2
 801987e:	d101      	bne.n	8019884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8019880:	2301      	movs	r3, #1
 8019882:	e000      	b.n	8019886 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8019884:	2300      	movs	r3, #0
 8019886:	2b00      	cmp	r3, #0
 8019888:	d00a      	beq.n	80198a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	4b17      	ldr	r3, [pc, #92]	; (80198ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801988e:	4413      	add	r3, r2
 8019890:	009b      	lsls	r3, r3, #2
 8019892:	461a      	mov	r2, r3
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	4a15      	ldr	r2, [pc, #84]	; (80198f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801989c:	671a      	str	r2, [r3, #112]	; 0x70
 801989e:	e009      	b.n	80198b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80198a0:	68fa      	ldr	r2, [r7, #12]
 80198a2:	4b14      	ldr	r3, [pc, #80]	; (80198f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80198a4:	4413      	add	r3, r2
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	461a      	mov	r2, r3
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	4a11      	ldr	r2, [pc, #68]	; (80198f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80198b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	3b01      	subs	r3, #1
 80198b8:	2201      	movs	r2, #1
 80198ba:	409a      	lsls	r2, r3
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80198c0:	bf00      	nop
 80198c2:	3714      	adds	r7, #20
 80198c4:	46bd      	mov	sp, r7
 80198c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ca:	4770      	bx	lr
 80198cc:	58025408 	.word	0x58025408
 80198d0:	5802541c 	.word	0x5802541c
 80198d4:	58025430 	.word	0x58025430
 80198d8:	58025444 	.word	0x58025444
 80198dc:	58025458 	.word	0x58025458
 80198e0:	5802546c 	.word	0x5802546c
 80198e4:	58025480 	.word	0x58025480
 80198e8:	58025494 	.word	0x58025494
 80198ec:	1600963f 	.word	0x1600963f
 80198f0:	58025940 	.word	0x58025940
 80198f4:	1000823f 	.word	0x1000823f
 80198f8:	40020940 	.word	0x40020940

080198fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b098      	sub	sp, #96	; 0x60
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8019904:	4a84      	ldr	r2, [pc, #528]	; (8019b18 <HAL_FDCAN_Init+0x21c>)
 8019906:	f107 030c 	add.w	r3, r7, #12
 801990a:	4611      	mov	r1, r2
 801990c:	224c      	movs	r2, #76	; 0x4c
 801990e:	4618      	mov	r0, r3
 8019910:	f006 ffa4 	bl	802085c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d101      	bne.n	801991e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 801991a:	2301      	movs	r3, #1
 801991c:	e1c6      	b.n	8019cac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	4a7e      	ldr	r2, [pc, #504]	; (8019b1c <HAL_FDCAN_Init+0x220>)
 8019924:	4293      	cmp	r3, r2
 8019926:	d106      	bne.n	8019936 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019930:	461a      	mov	r2, r3
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801993c:	b2db      	uxtb	r3, r3
 801993e:	2b00      	cmp	r3, #0
 8019940:	d106      	bne.n	8019950 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2200      	movs	r2, #0
 8019946:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f7fa feda 	bl	8014704 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	699a      	ldr	r2, [r3, #24]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	f022 0210 	bic.w	r2, r2, #16
 801995e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019960:	f7fb fd26 	bl	80153b0 <HAL_GetTick>
 8019964:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019966:	e014      	b.n	8019992 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019968:	f7fb fd22 	bl	80153b0 <HAL_GetTick>
 801996c:	4602      	mov	r2, r0
 801996e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019970:	1ad3      	subs	r3, r2, r3
 8019972:	2b0a      	cmp	r3, #10
 8019974:	d90d      	bls.n	8019992 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801997c:	f043 0201 	orr.w	r2, r3, #1
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	2203      	movs	r2, #3
 801998a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 801998e:	2301      	movs	r3, #1
 8019990:	e18c      	b.n	8019cac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	699b      	ldr	r3, [r3, #24]
 8019998:	f003 0308 	and.w	r3, r3, #8
 801999c:	2b08      	cmp	r3, #8
 801999e:	d0e3      	beq.n	8019968 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	699a      	ldr	r2, [r3, #24]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	f042 0201 	orr.w	r2, r2, #1
 80199ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80199b0:	f7fb fcfe 	bl	80153b0 <HAL_GetTick>
 80199b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80199b6:	e014      	b.n	80199e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80199b8:	f7fb fcfa 	bl	80153b0 <HAL_GetTick>
 80199bc:	4602      	mov	r2, r0
 80199be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199c0:	1ad3      	subs	r3, r2, r3
 80199c2:	2b0a      	cmp	r3, #10
 80199c4:	d90d      	bls.n	80199e2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80199cc:	f043 0201 	orr.w	r2, r3, #1
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2203      	movs	r2, #3
 80199da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80199de:	2301      	movs	r3, #1
 80199e0:	e164      	b.n	8019cac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	699b      	ldr	r3, [r3, #24]
 80199e8:	f003 0301 	and.w	r3, r3, #1
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d0e3      	beq.n	80199b8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	699a      	ldr	r2, [r3, #24]
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	f042 0202 	orr.w	r2, r2, #2
 80199fe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	7c1b      	ldrb	r3, [r3, #16]
 8019a04:	2b01      	cmp	r3, #1
 8019a06:	d108      	bne.n	8019a1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	699a      	ldr	r2, [r3, #24]
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019a16:	619a      	str	r2, [r3, #24]
 8019a18:	e007      	b.n	8019a2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	699a      	ldr	r2, [r3, #24]
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019a28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	7c5b      	ldrb	r3, [r3, #17]
 8019a2e:	2b01      	cmp	r3, #1
 8019a30:	d108      	bne.n	8019a44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	699a      	ldr	r2, [r3, #24]
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019a40:	619a      	str	r2, [r3, #24]
 8019a42:	e007      	b.n	8019a54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	699a      	ldr	r2, [r3, #24]
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019a52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	7c9b      	ldrb	r3, [r3, #18]
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d108      	bne.n	8019a6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	699a      	ldr	r2, [r3, #24]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019a6a:	619a      	str	r2, [r3, #24]
 8019a6c:	e007      	b.n	8019a7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	699a      	ldr	r2, [r3, #24]
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019a7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	699b      	ldr	r3, [r3, #24]
 8019a84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	689a      	ldr	r2, [r3, #8]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	430a      	orrs	r2, r1
 8019a92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	699a      	ldr	r2, [r3, #24]
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8019aa2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	691a      	ldr	r2, [r3, #16]
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	f022 0210 	bic.w	r2, r2, #16
 8019ab2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	68db      	ldr	r3, [r3, #12]
 8019ab8:	2b01      	cmp	r3, #1
 8019aba:	d108      	bne.n	8019ace <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	699a      	ldr	r2, [r3, #24]
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	f042 0204 	orr.w	r2, r2, #4
 8019aca:	619a      	str	r2, [r3, #24]
 8019acc:	e030      	b.n	8019b30 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	68db      	ldr	r3, [r3, #12]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d02c      	beq.n	8019b30 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	68db      	ldr	r3, [r3, #12]
 8019ada:	2b02      	cmp	r3, #2
 8019adc:	d020      	beq.n	8019b20 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	699a      	ldr	r2, [r3, #24]
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019aec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	691a      	ldr	r2, [r3, #16]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	f042 0210 	orr.w	r2, r2, #16
 8019afc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	68db      	ldr	r3, [r3, #12]
 8019b02:	2b03      	cmp	r3, #3
 8019b04:	d114      	bne.n	8019b30 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	699a      	ldr	r2, [r3, #24]
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	f042 0220 	orr.w	r2, r2, #32
 8019b14:	619a      	str	r2, [r3, #24]
 8019b16:	e00b      	b.n	8019b30 <HAL_FDCAN_Init+0x234>
 8019b18:	08020d0c 	.word	0x08020d0c
 8019b1c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	699a      	ldr	r2, [r3, #24]
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	f042 0220 	orr.w	r2, r2, #32
 8019b2e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	699b      	ldr	r3, [r3, #24]
 8019b34:	3b01      	subs	r3, #1
 8019b36:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	69db      	ldr	r3, [r3, #28]
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019b40:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	6a1b      	ldr	r3, [r3, #32]
 8019b46:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019b48:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	695b      	ldr	r3, [r3, #20]
 8019b50:	3b01      	subs	r3, #1
 8019b52:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019b58:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019b5a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	689b      	ldr	r3, [r3, #8]
 8019b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019b64:	d115      	bne.n	8019b92 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b6a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b70:	3b01      	subs	r3, #1
 8019b72:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019b74:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b7a:	3b01      	subs	r3, #1
 8019b7c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019b7e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b86:	3b01      	subs	r3, #1
 8019b88:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019b8e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019b90:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d00a      	beq.n	8019bb0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	430a      	orrs	r2, r1
 8019bac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019bb8:	4413      	add	r3, r2
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d011      	beq.n	8019be2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019bc6:	f023 0107 	bic.w	r1, r3, #7
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019bce:	009b      	lsls	r3, r3, #2
 8019bd0:	3360      	adds	r3, #96	; 0x60
 8019bd2:	443b      	add	r3, r7
 8019bd4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	430a      	orrs	r2, r1
 8019bde:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d011      	beq.n	8019c0e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019bf2:	f023 0107 	bic.w	r1, r3, #7
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bfa:	009b      	lsls	r3, r3, #2
 8019bfc:	3360      	adds	r3, #96	; 0x60
 8019bfe:	443b      	add	r3, r7
 8019c00:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	430a      	orrs	r2, r1
 8019c0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d012      	beq.n	8019c3c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019c1e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	3360      	adds	r3, #96	; 0x60
 8019c2a:	443b      	add	r3, r7
 8019c2c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019c30:	011a      	lsls	r2, r3, #4
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	430a      	orrs	r2, r1
 8019c38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d012      	beq.n	8019c6a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019c4c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	3360      	adds	r3, #96	; 0x60
 8019c58:	443b      	add	r3, r7
 8019c5a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019c5e:	021a      	lsls	r2, r3, #8
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	430a      	orrs	r2, r1
 8019c66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	4a11      	ldr	r2, [pc, #68]	; (8019cb4 <HAL_FDCAN_Init+0x3b8>)
 8019c70:	4293      	cmp	r3, r2
 8019c72:	d107      	bne.n	8019c84 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	689a      	ldr	r2, [r3, #8]
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	685b      	ldr	r3, [r3, #4]
 8019c7e:	f022 0203 	bic.w	r2, r2, #3
 8019c82:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2200      	movs	r2, #0
 8019c88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2201      	movs	r2, #1
 8019c98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8019c9c:	6878      	ldr	r0, [r7, #4]
 8019c9e:	f000 fd83 	bl	801a7a8 <FDCAN_CalcultateRamBlockAddresses>
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8019ca8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8019cac:	4618      	mov	r0, r3
 8019cae:	3760      	adds	r7, #96	; 0x60
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bd80      	pop	{r7, pc}
 8019cb4:	4000a000 	.word	0x4000a000

08019cb8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b083      	sub	sp, #12
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	2b01      	cmp	r3, #1
 8019cca:	d111      	bne.n	8019cf0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2202      	movs	r2, #2
 8019cd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	699a      	ldr	r2, [r3, #24]
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	f022 0201 	bic.w	r2, r2, #1
 8019ce2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8019cec:	2300      	movs	r3, #0
 8019cee:	e008      	b.n	8019d02 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cf6:	f043 0204 	orr.w	r2, r3, #4
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019d00:	2301      	movs	r3, #1
  }
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	370c      	adds	r7, #12
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr

08019d0e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8019d0e:	b580      	push	{r7, lr}
 8019d10:	b086      	sub	sp, #24
 8019d12:	af00      	add	r7, sp, #0
 8019d14:	60f8      	str	r0, [r7, #12]
 8019d16:	60b9      	str	r1, [r7, #8]
 8019d18:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d20:	b2db      	uxtb	r3, r3
 8019d22:	2b02      	cmp	r3, #2
 8019d24:	d141      	bne.n	8019daa <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019d2e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d109      	bne.n	8019d4a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d3c:	f043 0220 	orr.w	r2, r3, #32
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019d46:	2301      	movs	r3, #1
 8019d48:	e038      	b.n	8019dbc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d009      	beq.n	8019d6e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	e026      	b.n	8019dbc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019d76:	0c1b      	lsrs	r3, r3, #16
 8019d78:	f003 031f 	and.w	r3, r3, #31
 8019d7c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	687a      	ldr	r2, [r7, #4]
 8019d82:	68b9      	ldr	r1, [r7, #8]
 8019d84:	68f8      	ldr	r0, [r7, #12]
 8019d86:	f000 fe95 	bl	801aab4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	2101      	movs	r1, #1
 8019d90:	697a      	ldr	r2, [r7, #20]
 8019d92:	fa01 f202 	lsl.w	r2, r1, r2
 8019d96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8019d9a:	2201      	movs	r2, #1
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	409a      	lsls	r2, r3
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8019da6:	2300      	movs	r3, #0
 8019da8:	e008      	b.n	8019dbc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019db0:	f043 0208 	orr.w	r2, r3, #8
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019dba:	2301      	movs	r3, #1
  }
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3718      	adds	r7, #24
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8019dc4:	b480      	push	{r7}
 8019dc6:	b08b      	sub	sp, #44	; 0x2c
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	60f8      	str	r0, [r7, #12]
 8019dcc:	60b9      	str	r1, [r7, #8]
 8019dce:	607a      	str	r2, [r7, #4]
 8019dd0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019ddc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8019dde:	7efb      	ldrb	r3, [r7, #27]
 8019de0:	2b02      	cmp	r3, #2
 8019de2:	f040 814b 	bne.w	801a07c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	2b40      	cmp	r3, #64	; 0x40
 8019dea:	d14d      	bne.n	8019e88 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019df4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d109      	bne.n	8019e10 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e02:	f043 0220 	orr.w	r2, r3, #32
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	e13e      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d109      	bne.n	8019e34 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e30:	2301      	movs	r3, #1
 8019e32:	e12c      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019e3c:	0e1b      	lsrs	r3, r3, #24
 8019e3e:	f003 0301 	and.w	r3, r3, #1
 8019e42:	2b01      	cmp	r3, #1
 8019e44:	d10b      	bne.n	8019e5e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019e4e:	0fdb      	lsrs	r3, r3, #31
 8019e50:	f003 0301 	and.w	r3, r3, #1
 8019e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019e58:	d101      	bne.n	8019e5e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019e5a:	2301      	movs	r3, #1
 8019e5c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019e66:	0a1b      	lsrs	r3, r3, #8
 8019e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e6c:	69fa      	ldr	r2, [r7, #28]
 8019e6e:	4413      	add	r3, r2
 8019e70:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e7a:	69f9      	ldr	r1, [r7, #28]
 8019e7c:	fb01 f303 	mul.w	r3, r1, r3
 8019e80:	009b      	lsls	r3, r3, #2
 8019e82:	4413      	add	r3, r2
 8019e84:	627b      	str	r3, [r7, #36]	; 0x24
 8019e86:	e069      	b.n	8019f5c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	2b41      	cmp	r3, #65	; 0x41
 8019e8c:	d14d      	bne.n	8019f2a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d109      	bne.n	8019eb2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ea4:	f043 0220 	orr.w	r2, r3, #32
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019eae:	2301      	movs	r3, #1
 8019eb0:	e0ed      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d109      	bne.n	8019ed6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ec8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	e0db      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019ede:	0e1b      	lsrs	r3, r3, #24
 8019ee0:	f003 0301 	and.w	r3, r3, #1
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d10b      	bne.n	8019f00 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019ef0:	0fdb      	lsrs	r3, r3, #31
 8019ef2:	f003 0301 	and.w	r3, r3, #1
 8019ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019efa:	d101      	bne.n	8019f00 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019efc:	2301      	movs	r3, #1
 8019efe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019f08:	0a1b      	lsrs	r3, r3, #8
 8019f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f0e:	69fa      	ldr	r2, [r7, #28]
 8019f10:	4413      	add	r3, r2
 8019f12:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f1c:	69f9      	ldr	r1, [r7, #28]
 8019f1e:	fb01 f303 	mul.w	r3, r1, r3
 8019f22:	009b      	lsls	r3, r3, #2
 8019f24:	4413      	add	r3, r2
 8019f26:	627b      	str	r3, [r7, #36]	; 0x24
 8019f28:	e018      	b.n	8019f5c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f2e:	68ba      	ldr	r2, [r7, #8]
 8019f30:	429a      	cmp	r2, r3
 8019f32:	d309      	bcc.n	8019f48 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f3a:	f043 0220 	orr.w	r2, r3, #32
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019f44:	2301      	movs	r3, #1
 8019f46:	e0a2      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f50:	68b9      	ldr	r1, [r7, #8]
 8019f52:	fb01 f303 	mul.w	r3, r1, r3
 8019f56:	009b      	lsls	r3, r3, #2
 8019f58:	4413      	add	r3, r2
 8019f5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8019f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d107      	bne.n	8019f80 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8019f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	0c9b      	lsrs	r3, r3, #18
 8019f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	601a      	str	r2, [r3, #0]
 8019f7e:	e005      	b.n	8019f8c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8019f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8019f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa6:	3304      	adds	r3, #4
 8019fa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8019faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8019fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8019fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8019fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8019fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	0e1b      	lsrs	r3, r3, #24
 8019fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8019fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	0fda      	lsrs	r2, r3, #31
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff2:	3304      	adds	r3, #4
 8019ff4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8019ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	623b      	str	r3, [r7, #32]
 8019ffe:	e00a      	b.n	801a016 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 801a000:	697a      	ldr	r2, [r7, #20]
 801a002:	6a3b      	ldr	r3, [r7, #32]
 801a004:	441a      	add	r2, r3
 801a006:	6839      	ldr	r1, [r7, #0]
 801a008:	6a3b      	ldr	r3, [r7, #32]
 801a00a:	440b      	add	r3, r1
 801a00c:	7812      	ldrb	r2, [r2, #0]
 801a00e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801a010:	6a3b      	ldr	r3, [r7, #32]
 801a012:	3301      	adds	r3, #1
 801a014:	623b      	str	r3, [r7, #32]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	68db      	ldr	r3, [r3, #12]
 801a01a:	0c1b      	lsrs	r3, r3, #16
 801a01c:	4a1f      	ldr	r2, [pc, #124]	; (801a09c <HAL_FDCAN_GetRxMessage+0x2d8>)
 801a01e:	5cd3      	ldrb	r3, [r2, r3]
 801a020:	461a      	mov	r2, r3
 801a022:	6a3b      	ldr	r3, [r7, #32]
 801a024:	4293      	cmp	r3, r2
 801a026:	d3eb      	bcc.n	801a000 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	2b40      	cmp	r3, #64	; 0x40
 801a02c:	d105      	bne.n	801a03a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	69fa      	ldr	r2, [r7, #28]
 801a034:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801a038:	e01e      	b.n	801a078 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	2b41      	cmp	r3, #65	; 0x41
 801a03e:	d105      	bne.n	801a04c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	69fa      	ldr	r2, [r7, #28]
 801a046:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801a04a:	e015      	b.n	801a078 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	2b1f      	cmp	r3, #31
 801a050:	d808      	bhi.n	801a064 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	2101      	movs	r1, #1
 801a058:	68ba      	ldr	r2, [r7, #8]
 801a05a:	fa01 f202 	lsl.w	r2, r1, r2
 801a05e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801a062:	e009      	b.n	801a078 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	f003 021f 	and.w	r2, r3, #31
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2101      	movs	r1, #1
 801a070:	fa01 f202 	lsl.w	r2, r1, r2
 801a074:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 801a078:	2300      	movs	r3, #0
 801a07a:	e008      	b.n	801a08e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a082:	f043 0208 	orr.w	r2, r3, #8
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a08c:	2301      	movs	r3, #1
  }
}
 801a08e:	4618      	mov	r0, r3
 801a090:	372c      	adds	r7, #44	; 0x2c
 801a092:	46bd      	mov	sp, r7
 801a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a098:	4770      	bx	lr
 801a09a:	bf00      	nop
 801a09c:	08020dc4 	.word	0x08020dc4

0801a0a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b087      	sub	sp, #28
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a0b2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 801a0b4:	7dfb      	ldrb	r3, [r7, #23]
 801a0b6:	2b01      	cmp	r3, #1
 801a0b8:	d002      	beq.n	801a0c0 <HAL_FDCAN_ActivateNotification+0x20>
 801a0ba:	7dfb      	ldrb	r3, [r7, #23]
 801a0bc:	2b02      	cmp	r3, #2
 801a0be:	d155      	bne.n	801a16c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	4013      	ands	r3, r2
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d108      	bne.n	801a0e0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	f042 0201 	orr.w	r2, r2, #1
 801a0dc:	65da      	str	r2, [r3, #92]	; 0x5c
 801a0de:	e014      	b.n	801a10a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	68ba      	ldr	r2, [r7, #8]
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	d108      	bne.n	801a102 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	f042 0202 	orr.w	r2, r2, #2
 801a0fe:	65da      	str	r2, [r3, #92]	; 0x5c
 801a100:	e003      	b.n	801a10a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	2203      	movs	r2, #3
 801a108:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a110:	2b00      	cmp	r3, #0
 801a112:	d009      	beq.n	801a128 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	687a      	ldr	r2, [r7, #4]
 801a122:	430a      	orrs	r2, r1
 801a124:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d009      	beq.n	801a146 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	430a      	orrs	r2, r1
 801a142:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a14c:	68ba      	ldr	r2, [r7, #8]
 801a14e:	4b0f      	ldr	r3, [pc, #60]	; (801a18c <HAL_FDCAN_ActivateNotification+0xec>)
 801a150:	4013      	ands	r3, r2
 801a152:	68fa      	ldr	r2, [r7, #12]
 801a154:	6812      	ldr	r2, [r2, #0]
 801a156:	430b      	orrs	r3, r1
 801a158:	6553      	str	r3, [r2, #84]	; 0x54
 801a15a:	4b0d      	ldr	r3, [pc, #52]	; (801a190 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a15c:	695a      	ldr	r2, [r3, #20]
 801a15e:	68bb      	ldr	r3, [r7, #8]
 801a160:	0f9b      	lsrs	r3, r3, #30
 801a162:	490b      	ldr	r1, [pc, #44]	; (801a190 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a164:	4313      	orrs	r3, r2
 801a166:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801a168:	2300      	movs	r3, #0
 801a16a:	e008      	b.n	801a17e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a172:	f043 0202 	orr.w	r2, r3, #2
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a17c:	2301      	movs	r3, #1
  }
}
 801a17e:	4618      	mov	r0, r3
 801a180:	371c      	adds	r7, #28
 801a182:	46bd      	mov	sp, r7
 801a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a188:	4770      	bx	lr
 801a18a:	bf00      	nop
 801a18c:	3fcfffff 	.word	0x3fcfffff
 801a190:	4000a800 	.word	0x4000a800

0801a194 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b096      	sub	sp, #88	; 0x58
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801a19c:	4b9a      	ldr	r3, [pc, #616]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a19e:	691b      	ldr	r3, [r3, #16]
 801a1a0:	079b      	lsls	r3, r3, #30
 801a1a2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801a1a4:	4b98      	ldr	r3, [pc, #608]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a1a6:	695b      	ldr	r3, [r3, #20]
 801a1a8:	079b      	lsls	r3, r3, #30
 801a1aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1ac:	4013      	ands	r3, r2
 801a1ae:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a1ba:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1c4:	4013      	ands	r3, r2
 801a1c6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1ce:	f003 030f 	and.w	r3, r3, #15
 801a1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a1dc:	4013      	ands	r3, r2
 801a1de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a1ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1f4:	4013      	ands	r3, r2
 801a1f6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1fe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801a202:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a20a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a20c:	4013      	ands	r3, r2
 801a20e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a216:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a21a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a224:	4013      	ands	r3, r2
 801a226:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a23a:	0a1b      	lsrs	r3, r3, #8
 801a23c:	f003 0301 	and.w	r3, r3, #1
 801a240:	2b00      	cmp	r3, #0
 801a242:	d010      	beq.n	801a266 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a246:	0a1b      	lsrs	r3, r3, #8
 801a248:	f003 0301 	and.w	r3, r3, #1
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d00a      	beq.n	801a266 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a258:	651a      	str	r2, [r3, #80]	; 0x50
 801a25a:	4b6b      	ldr	r3, [pc, #428]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a25c:	2200      	movs	r2, #0
 801a25e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f000 fa54 	bl	801a70e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a268:	0a9b      	lsrs	r3, r3, #10
 801a26a:	f003 0301 	and.w	r3, r3, #1
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d01d      	beq.n	801a2ae <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a274:	0a9b      	lsrs	r3, r3, #10
 801a276:	f003 0301 	and.w	r3, r3, #1
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d017      	beq.n	801a2ae <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a286:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a292:	4013      	ands	r3, r2
 801a294:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a29e:	651a      	str	r2, [r3, #80]	; 0x50
 801a2a0:	4b59      	ldr	r3, [pc, #356]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a2a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f000 fa07 	bl	801a6bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d00d      	beq.n	801a2d0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	681a      	ldr	r2, [r3, #0]
 801a2b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a2ba:	4b54      	ldr	r3, [pc, #336]	; (801a40c <HAL_FDCAN_IRQHandler+0x278>)
 801a2bc:	400b      	ands	r3, r1
 801a2be:	6513      	str	r3, [r2, #80]	; 0x50
 801a2c0:	4a51      	ldr	r2, [pc, #324]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2c4:	0f9b      	lsrs	r3, r3, #30
 801a2c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a2c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f000 f9c0 	bl	801a650 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d00d      	beq.n	801a2f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	681a      	ldr	r2, [r3, #0]
 801a2da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a2dc:	4b4b      	ldr	r3, [pc, #300]	; (801a40c <HAL_FDCAN_IRQHandler+0x278>)
 801a2de:	400b      	ands	r3, r1
 801a2e0:	6513      	str	r3, [r2, #80]	; 0x50
 801a2e2:	4a49      	ldr	r2, [pc, #292]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2e6:	0f9b      	lsrs	r3, r3, #30
 801a2e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a2ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f000 f9ba 	bl	801a666 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d00d      	beq.n	801a314 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681a      	ldr	r2, [r3, #0]
 801a2fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a2fe:	4b43      	ldr	r3, [pc, #268]	; (801a40c <HAL_FDCAN_IRQHandler+0x278>)
 801a300:	400b      	ands	r3, r1
 801a302:	6513      	str	r3, [r2, #80]	; 0x50
 801a304:	4a40      	ldr	r2, [pc, #256]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a308:	0f9b      	lsrs	r3, r3, #30
 801a30a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a30c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a30e:	6878      	ldr	r0, [r7, #4]
 801a310:	f7f3 ffe2 	bl	800e2d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a316:	2b00      	cmp	r3, #0
 801a318:	d00d      	beq.n	801a336 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681a      	ldr	r2, [r3, #0]
 801a31e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a320:	4b3a      	ldr	r3, [pc, #232]	; (801a40c <HAL_FDCAN_IRQHandler+0x278>)
 801a322:	400b      	ands	r3, r1
 801a324:	6513      	str	r3, [r2, #80]	; 0x50
 801a326:	4a38      	ldr	r2, [pc, #224]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a32a:	0f9b      	lsrs	r3, r3, #30
 801a32c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a32e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a330:	6878      	ldr	r0, [r7, #4]
 801a332:	f000 f9a3 	bl	801a67c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a338:	0adb      	lsrs	r3, r3, #11
 801a33a:	f003 0301 	and.w	r3, r3, #1
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d010      	beq.n	801a364 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a344:	0adb      	lsrs	r3, r3, #11
 801a346:	f003 0301 	and.w	r3, r3, #1
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d00a      	beq.n	801a364 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a356:	651a      	str	r2, [r3, #80]	; 0x50
 801a358:	4b2b      	ldr	r3, [pc, #172]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a35a:	2200      	movs	r2, #0
 801a35c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a35e:	6878      	ldr	r0, [r7, #4]
 801a360:	f000 f997 	bl	801a692 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a366:	0a5b      	lsrs	r3, r3, #9
 801a368:	f003 0301 	and.w	r3, r3, #1
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d01d      	beq.n	801a3ac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a372:	0a5b      	lsrs	r3, r3, #9
 801a374:	f003 0301 	and.w	r3, r3, #1
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d017      	beq.n	801a3ac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a384:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a390:	4013      	ands	r3, r2
 801a392:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a39c:	651a      	str	r2, [r3, #80]	; 0x50
 801a39e:	4b1a      	ldr	r3, [pc, #104]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a3a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f000 f97d 	bl	801a6a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3ae:	0cdb      	lsrs	r3, r3, #19
 801a3b0:	f003 0301 	and.w	r3, r3, #1
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d010      	beq.n	801a3da <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ba:	0cdb      	lsrs	r3, r3, #19
 801a3bc:	f003 0301 	and.w	r3, r3, #1
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d00a      	beq.n	801a3da <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a3cc:	651a      	str	r2, [r3, #80]	; 0x50
 801a3ce:	4b0e      	ldr	r3, [pc, #56]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f000 f97c 	bl	801a6d2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3dc:	0c1b      	lsrs	r3, r3, #16
 801a3de:	f003 0301 	and.w	r3, r3, #1
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d016      	beq.n	801a414 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3e8:	0c1b      	lsrs	r3, r3, #16
 801a3ea:	f003 0301 	and.w	r3, r3, #1
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d010      	beq.n	801a414 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a3fa:	651a      	str	r2, [r3, #80]	; 0x50
 801a3fc:	4b02      	ldr	r3, [pc, #8]	; (801a408 <HAL_FDCAN_IRQHandler+0x274>)
 801a3fe:	2200      	movs	r2, #0
 801a400:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a402:	6878      	ldr	r0, [r7, #4]
 801a404:	e004      	b.n	801a410 <HAL_FDCAN_IRQHandler+0x27c>
 801a406:	bf00      	nop
 801a408:	4000a800 	.word	0x4000a800
 801a40c:	3fcfffff 	.word	0x3fcfffff
 801a410:	f000 f969 	bl	801a6e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a416:	0c9b      	lsrs	r3, r3, #18
 801a418:	f003 0301 	and.w	r3, r3, #1
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d010      	beq.n	801a442 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a422:	0c9b      	lsrs	r3, r3, #18
 801a424:	f003 0301 	and.w	r3, r3, #1
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d00a      	beq.n	801a442 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a434:	651a      	str	r2, [r3, #80]	; 0x50
 801a436:	4b83      	ldr	r3, [pc, #524]	; (801a644 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a438:	2200      	movs	r2, #0
 801a43a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	f000 f95c 	bl	801a6fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a444:	0c5b      	lsrs	r3, r3, #17
 801a446:	f003 0301 	and.w	r3, r3, #1
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d015      	beq.n	801a47a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a450:	0c5b      	lsrs	r3, r3, #17
 801a452:	f003 0301 	and.w	r3, r3, #1
 801a456:	2b00      	cmp	r3, #0
 801a458:	d00f      	beq.n	801a47a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a462:	651a      	str	r2, [r3, #80]	; 0x50
 801a464:	4b77      	ldr	r3, [pc, #476]	; (801a644 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a466:	2200      	movs	r2, #0
 801a468:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a470:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d00d      	beq.n	801a49c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a486:	4b70      	ldr	r3, [pc, #448]	; (801a648 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a488:	400b      	ands	r3, r1
 801a48a:	6513      	str	r3, [r2, #80]	; 0x50
 801a48c:	4a6d      	ldr	r2, [pc, #436]	; (801a644 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a490:	0f9b      	lsrs	r3, r3, #30
 801a492:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f000 f94d 	bl	801a736 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d011      	beq.n	801a4c6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a4a8:	4b67      	ldr	r3, [pc, #412]	; (801a648 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a4aa:	400b      	ands	r3, r1
 801a4ac:	6513      	str	r3, [r2, #80]	; 0x50
 801a4ae:	4a65      	ldr	r2, [pc, #404]	; (801a644 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4b2:	0f9b      	lsrs	r3, r3, #30
 801a4b4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4be:	431a      	orrs	r2, r3
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4a60      	ldr	r2, [pc, #384]	; (801a64c <HAL_FDCAN_IRQHandler+0x4b8>)
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	f040 80ac 	bne.w	801a62a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	685b      	ldr	r3, [r3, #4]
 801a4d6:	689b      	ldr	r3, [r3, #8]
 801a4d8:	f003 0303 	and.w	r3, r3, #3
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	f000 80a4 	beq.w	801a62a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	6a1b      	ldr	r3, [r3, #32]
 801a4e8:	f003 030f 	and.w	r3, r3, #15
 801a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	685b      	ldr	r3, [r3, #4]
 801a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a4f6:	4013      	ands	r3, r2
 801a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	685b      	ldr	r3, [r3, #4]
 801a4fe:	6a1b      	ldr	r3, [r3, #32]
 801a500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a504:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a50c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a50e:	4013      	ands	r3, r2
 801a510:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	685b      	ldr	r3, [r3, #4]
 801a516:	6a1b      	ldr	r3, [r3, #32]
 801a518:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801a51c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
 801a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a526:	4013      	ands	r3, r2
 801a528:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	6a1b      	ldr	r3, [r3, #32]
 801a530:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801a534:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53c:	6a3a      	ldr	r2, [r7, #32]
 801a53e:	4013      	ands	r3, r2
 801a540:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	685b      	ldr	r3, [r3, #4]
 801a546:	6a1b      	ldr	r3, [r3, #32]
 801a548:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801a54c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	685b      	ldr	r3, [r3, #4]
 801a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a554:	69fa      	ldr	r2, [r7, #28]
 801a556:	4013      	ands	r3, r2
 801a558:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a560:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	6a1b      	ldr	r3, [r3, #32]
 801a568:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d007      	beq.n	801a580 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	685b      	ldr	r3, [r3, #4]
 801a574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a576:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801a578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	f000 f8e6 	bl	801a74c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a582:	2b00      	cmp	r3, #0
 801a584:	d007      	beq.n	801a596 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a58c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801a58e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a590:	6878      	ldr	r0, [r7, #4]
 801a592:	f000 f8e6 	bl	801a762 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801a596:	69bb      	ldr	r3, [r7, #24]
 801a598:	099b      	lsrs	r3, r3, #6
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d01a      	beq.n	801a5d8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801a5a2:	697b      	ldr	r3, [r7, #20]
 801a5a4:	099b      	lsrs	r3, r3, #6
 801a5a6:	f003 0301 	and.w	r3, r3, #1
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d014      	beq.n	801a5d8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	685b      	ldr	r3, [r3, #4]
 801a5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5b4:	0c1b      	lsrs	r3, r3, #16
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a5c4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	2240      	movs	r2, #64	; 0x40
 801a5cc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801a5ce:	68fa      	ldr	r2, [r7, #12]
 801a5d0:	6939      	ldr	r1, [r7, #16]
 801a5d2:	6878      	ldr	r0, [r7, #4]
 801a5d4:	f000 f8d0 	bl	801a778 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d007      	beq.n	801a5ee <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5e4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801a5e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f000 f8d1 	bl	801a790 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801a5ee:	6a3b      	ldr	r3, [r7, #32]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d00b      	beq.n	801a60c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	6a3a      	ldr	r2, [r7, #32]
 801a5fa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a602:	6a3b      	ldr	r3, [r7, #32]
 801a604:	431a      	orrs	r2, r3
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d00b      	beq.n	801a62a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	685b      	ldr	r3, [r3, #4]
 801a616:	69fa      	ldr	r2, [r7, #28]
 801a618:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	431a      	orrs	r2, r3
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a630:	2b00      	cmp	r3, #0
 801a632:	d002      	beq.n	801a63a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801a634:	6878      	ldr	r0, [r7, #4]
 801a636:	f000 f874 	bl	801a722 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801a63a:	bf00      	nop
 801a63c:	3758      	adds	r7, #88	; 0x58
 801a63e:	46bd      	mov	sp, r7
 801a640:	bd80      	pop	{r7, pc}
 801a642:	bf00      	nop
 801a644:	4000a800 	.word	0x4000a800
 801a648:	3fcfffff 	.word	0x3fcfffff
 801a64c:	4000a000 	.word	0x4000a000

0801a650 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801a650:	b480      	push	{r7}
 801a652:	b083      	sub	sp, #12
 801a654:	af00      	add	r7, sp, #0
 801a656:	6078      	str	r0, [r7, #4]
 801a658:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801a65a:	bf00      	nop
 801a65c:	370c      	adds	r7, #12
 801a65e:	46bd      	mov	sp, r7
 801a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a664:	4770      	bx	lr

0801a666 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801a666:	b480      	push	{r7}
 801a668:	b083      	sub	sp, #12
 801a66a:	af00      	add	r7, sp, #0
 801a66c:	6078      	str	r0, [r7, #4]
 801a66e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801a670:	bf00      	nop
 801a672:	370c      	adds	r7, #12
 801a674:	46bd      	mov	sp, r7
 801a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67a:	4770      	bx	lr

0801a67c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801a67c:	b480      	push	{r7}
 801a67e:	b083      	sub	sp, #12
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
 801a684:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801a686:	bf00      	nop
 801a688:	370c      	adds	r7, #12
 801a68a:	46bd      	mov	sp, r7
 801a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a690:	4770      	bx	lr

0801a692 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a692:	b480      	push	{r7}
 801a694:	b083      	sub	sp, #12
 801a696:	af00      	add	r7, sp, #0
 801a698:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801a69a:	bf00      	nop
 801a69c:	370c      	adds	r7, #12
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a4:	4770      	bx	lr

0801a6a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a6a6:	b480      	push	{r7}
 801a6a8:	b083      	sub	sp, #12
 801a6aa:	af00      	add	r7, sp, #0
 801a6ac:	6078      	str	r0, [r7, #4]
 801a6ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801a6b0:	bf00      	nop
 801a6b2:	370c      	adds	r7, #12
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ba:	4770      	bx	lr

0801a6bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a6bc:	b480      	push	{r7}
 801a6be:	b083      	sub	sp, #12
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
 801a6c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801a6c6:	bf00      	nop
 801a6c8:	370c      	adds	r7, #12
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d0:	4770      	bx	lr

0801a6d2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a6d2:	b480      	push	{r7}
 801a6d4:	b083      	sub	sp, #12
 801a6d6:	af00      	add	r7, sp, #0
 801a6d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801a6da:	bf00      	nop
 801a6dc:	370c      	adds	r7, #12
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr

0801a6e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a6e6:	b480      	push	{r7}
 801a6e8:	b083      	sub	sp, #12
 801a6ea:	af00      	add	r7, sp, #0
 801a6ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801a6ee:	bf00      	nop
 801a6f0:	370c      	adds	r7, #12
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f8:	4770      	bx	lr

0801a6fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a6fa:	b480      	push	{r7}
 801a6fc:	b083      	sub	sp, #12
 801a6fe:	af00      	add	r7, sp, #0
 801a700:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801a702:	bf00      	nop
 801a704:	370c      	adds	r7, #12
 801a706:	46bd      	mov	sp, r7
 801a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70c:	4770      	bx	lr

0801a70e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a70e:	b480      	push	{r7}
 801a710:	b083      	sub	sp, #12
 801a712:	af00      	add	r7, sp, #0
 801a714:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801a716:	bf00      	nop
 801a718:	370c      	adds	r7, #12
 801a71a:	46bd      	mov	sp, r7
 801a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a720:	4770      	bx	lr

0801a722 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a722:	b480      	push	{r7}
 801a724:	b083      	sub	sp, #12
 801a726:	af00      	add	r7, sp, #0
 801a728:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801a72a:	bf00      	nop
 801a72c:	370c      	adds	r7, #12
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr

0801a736 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801a736:	b480      	push	{r7}
 801a738:	b083      	sub	sp, #12
 801a73a:	af00      	add	r7, sp, #0
 801a73c:	6078      	str	r0, [r7, #4]
 801a73e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801a740:	bf00      	nop
 801a742:	370c      	adds	r7, #12
 801a744:	46bd      	mov	sp, r7
 801a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74a:	4770      	bx	lr

0801a74c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b083      	sub	sp, #12
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801a756:	bf00      	nop
 801a758:	370c      	adds	r7, #12
 801a75a:	46bd      	mov	sp, r7
 801a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a760:	4770      	bx	lr

0801a762 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801a762:	b480      	push	{r7}
 801a764:	b083      	sub	sp, #12
 801a766:	af00      	add	r7, sp, #0
 801a768:	6078      	str	r0, [r7, #4]
 801a76a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801a76c:	bf00      	nop
 801a76e:	370c      	adds	r7, #12
 801a770:	46bd      	mov	sp, r7
 801a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a776:	4770      	bx	lr

0801a778 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801a778:	b480      	push	{r7}
 801a77a:	b085      	sub	sp, #20
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	60f8      	str	r0, [r7, #12]
 801a780:	60b9      	str	r1, [r7, #8]
 801a782:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801a784:	bf00      	nop
 801a786:	3714      	adds	r7, #20
 801a788:	46bd      	mov	sp, r7
 801a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a78e:	4770      	bx	lr

0801a790 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801a790:	b480      	push	{r7}
 801a792:	b083      	sub	sp, #12
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
 801a798:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801a79a:	bf00      	nop
 801a79c:	370c      	adds	r7, #12
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr
	...

0801a7a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801a7a8:	b480      	push	{r7}
 801a7aa:	b085      	sub	sp, #20
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7b4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a7be:	4ba7      	ldr	r3, [pc, #668]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a7c0:	4013      	ands	r3, r2
 801a7c2:	68ba      	ldr	r2, [r7, #8]
 801a7c4:	0091      	lsls	r1, r2, #2
 801a7c6:	687a      	ldr	r2, [r7, #4]
 801a7c8:	6812      	ldr	r2, [r2, #0]
 801a7ca:	430b      	orrs	r3, r1
 801a7cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a7d8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7e0:	041a      	lsls	r2, r3, #16
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	430a      	orrs	r2, r1
 801a7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7f0:	68ba      	ldr	r2, [r7, #8]
 801a7f2:	4413      	add	r3, r2
 801a7f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a7fe:	4b97      	ldr	r3, [pc, #604]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a800:	4013      	ands	r3, r2
 801a802:	68ba      	ldr	r2, [r7, #8]
 801a804:	0091      	lsls	r1, r2, #2
 801a806:	687a      	ldr	r2, [r7, #4]
 801a808:	6812      	ldr	r2, [r2, #0]
 801a80a:	430b      	orrs	r3, r1
 801a80c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a818:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a820:	041a      	lsls	r2, r3, #16
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	430a      	orrs	r2, r1
 801a828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a830:	005b      	lsls	r3, r3, #1
 801a832:	68ba      	ldr	r2, [r7, #8]
 801a834:	4413      	add	r3, r2
 801a836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801a840:	4b86      	ldr	r3, [pc, #536]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a842:	4013      	ands	r3, r2
 801a844:	68ba      	ldr	r2, [r7, #8]
 801a846:	0091      	lsls	r1, r2, #2
 801a848:	687a      	ldr	r2, [r7, #4]
 801a84a:	6812      	ldr	r2, [r2, #0]
 801a84c:	430b      	orrs	r3, r1
 801a84e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a85a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a862:	041a      	lsls	r2, r3, #16
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	430a      	orrs	r2, r1
 801a86a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a876:	fb02 f303 	mul.w	r3, r2, r3
 801a87a:	68ba      	ldr	r2, [r7, #8]
 801a87c:	4413      	add	r3, r2
 801a87e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801a888:	4b74      	ldr	r3, [pc, #464]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a88a:	4013      	ands	r3, r2
 801a88c:	68ba      	ldr	r2, [r7, #8]
 801a88e:	0091      	lsls	r1, r2, #2
 801a890:	687a      	ldr	r2, [r7, #4]
 801a892:	6812      	ldr	r2, [r2, #0]
 801a894:	430b      	orrs	r3, r1
 801a896:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a8a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8aa:	041a      	lsls	r2, r3, #16
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	430a      	orrs	r2, r1
 801a8b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8ba:	687a      	ldr	r2, [r7, #4]
 801a8bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801a8be:	fb02 f303 	mul.w	r3, r2, r3
 801a8c2:	68ba      	ldr	r2, [r7, #8]
 801a8c4:	4413      	add	r3, r2
 801a8c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a8d0:	4b62      	ldr	r3, [pc, #392]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a8d2:	4013      	ands	r3, r2
 801a8d4:	68ba      	ldr	r2, [r7, #8]
 801a8d6:	0091      	lsls	r1, r2, #2
 801a8d8:	687a      	ldr	r2, [r7, #4]
 801a8da:	6812      	ldr	r2, [r2, #0]
 801a8dc:	430b      	orrs	r3, r1
 801a8de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8e6:	687a      	ldr	r2, [r7, #4]
 801a8e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a8ea:	fb02 f303 	mul.w	r3, r2, r3
 801a8ee:	68ba      	ldr	r2, [r7, #8]
 801a8f0:	4413      	add	r3, r2
 801a8f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801a8fc:	4b57      	ldr	r3, [pc, #348]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a8fe:	4013      	ands	r3, r2
 801a900:	68ba      	ldr	r2, [r7, #8]
 801a902:	0091      	lsls	r1, r2, #2
 801a904:	687a      	ldr	r2, [r7, #4]
 801a906:	6812      	ldr	r2, [r2, #0]
 801a908:	430b      	orrs	r3, r1
 801a90a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a916:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a91e:	041a      	lsls	r2, r3, #16
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	430a      	orrs	r2, r1
 801a926:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a92e:	005b      	lsls	r3, r3, #1
 801a930:	68ba      	ldr	r2, [r7, #8]
 801a932:	4413      	add	r3, r2
 801a934:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801a93e:	4b47      	ldr	r3, [pc, #284]	; (801aa5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a940:	4013      	ands	r3, r2
 801a942:	68ba      	ldr	r2, [r7, #8]
 801a944:	0091      	lsls	r1, r2, #2
 801a946:	687a      	ldr	r2, [r7, #4]
 801a948:	6812      	ldr	r2, [r2, #0]
 801a94a:	430b      	orrs	r3, r1
 801a94c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a958:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a960:	041a      	lsls	r2, r3, #16
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	430a      	orrs	r2, r1
 801a968:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a974:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a97c:	061a      	lsls	r2, r3, #24
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	430a      	orrs	r2, r1
 801a984:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a98c:	4b34      	ldr	r3, [pc, #208]	; (801aa60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801a98e:	4413      	add	r3, r2
 801a990:	009a      	lsls	r2, r3, #2
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a99e:	009b      	lsls	r3, r3, #2
 801a9a0:	441a      	add	r2, r3
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9ae:	00db      	lsls	r3, r3, #3
 801a9b0:	441a      	add	r2, r3
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9be:	6879      	ldr	r1, [r7, #4]
 801a9c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801a9c2:	fb01 f303 	mul.w	r3, r1, r3
 801a9c6:	009b      	lsls	r3, r3, #2
 801a9c8:	441a      	add	r2, r3
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a9d6:	6879      	ldr	r1, [r7, #4]
 801a9d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801a9da:	fb01 f303 	mul.w	r3, r1, r3
 801a9de:	009b      	lsls	r3, r3, #2
 801a9e0:	441a      	add	r2, r3
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9ee:	6879      	ldr	r1, [r7, #4]
 801a9f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801a9f2:	fb01 f303 	mul.w	r3, r1, r3
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	441a      	add	r2, r3
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa0a:	00db      	lsls	r3, r3, #3
 801aa0c:	441a      	add	r2, r3
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa1e:	6879      	ldr	r1, [r7, #4]
 801aa20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801aa22:	fb01 f303 	mul.w	r3, r1, r3
 801aa26:	009b      	lsls	r3, r3, #2
 801aa28:	441a      	add	r2, r3
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa3a:	6879      	ldr	r1, [r7, #4]
 801aa3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801aa3e:	fb01 f303 	mul.w	r3, r1, r3
 801aa42:	009b      	lsls	r3, r3, #2
 801aa44:	441a      	add	r2, r3
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aa52:	4a04      	ldr	r2, [pc, #16]	; (801aa64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801aa54:	4293      	cmp	r3, r2
 801aa56:	d915      	bls.n	801aa84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801aa58:	e006      	b.n	801aa68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801aa5a:	bf00      	nop
 801aa5c:	ffff0003 	.word	0xffff0003
 801aa60:	10002b00 	.word	0x10002b00
 801aa64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aa6e:	f043 0220 	orr.w	r2, r3, #32
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	2203      	movs	r2, #3
 801aa7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801aa80:	2301      	movs	r3, #1
 801aa82:	e010      	b.n	801aaa6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa88:	60fb      	str	r3, [r7, #12]
 801aa8a:	e005      	b.n	801aa98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	3304      	adds	r3, #4
 801aa96:	60fb      	str	r3, [r7, #12]
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aa9e:	68fa      	ldr	r2, [r7, #12]
 801aaa0:	429a      	cmp	r2, r3
 801aaa2:	d3f3      	bcc.n	801aa8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801aaa4:	2300      	movs	r3, #0
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3714      	adds	r7, #20
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab0:	4770      	bx	lr
 801aab2:	bf00      	nop

0801aab4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801aab4:	b480      	push	{r7}
 801aab6:	b089      	sub	sp, #36	; 0x24
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	60f8      	str	r0, [r7, #12]
 801aabc:	60b9      	str	r1, [r7, #8]
 801aabe:	607a      	str	r2, [r7, #4]
 801aac0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d10a      	bne.n	801aae0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aaca:	68bb      	ldr	r3, [r7, #8]
 801aacc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801aace:	68bb      	ldr	r3, [r7, #8]
 801aad0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801aad2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aada:	4313      	orrs	r3, r2
 801aadc:	61fb      	str	r3, [r7, #28]
 801aade:	e00a      	b.n	801aaf6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801aae8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801aaee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aaf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801aaf4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aaf6:	68bb      	ldr	r3, [r7, #8]
 801aaf8:	6a1b      	ldr	r3, [r3, #32]
 801aafa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801aafc:	68bb      	ldr	r3, [r7, #8]
 801aafe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801ab00:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801ab06:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801ab0c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801ab0e:	68bb      	ldr	r3, [r7, #8]
 801ab10:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801ab12:	4313      	orrs	r3, r2
 801ab14:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ab20:	6839      	ldr	r1, [r7, #0]
 801ab22:	fb01 f303 	mul.w	r3, r1, r3
 801ab26:	009b      	lsls	r3, r3, #2
 801ab28:	4413      	add	r3, r2
 801ab2a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801ab2c:	69bb      	ldr	r3, [r7, #24]
 801ab2e:	69fa      	ldr	r2, [r7, #28]
 801ab30:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801ab32:	69bb      	ldr	r3, [r7, #24]
 801ab34:	3304      	adds	r3, #4
 801ab36:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	693a      	ldr	r2, [r7, #16]
 801ab3c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801ab3e:	69bb      	ldr	r3, [r7, #24]
 801ab40:	3304      	adds	r3, #4
 801ab42:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801ab44:	2300      	movs	r3, #0
 801ab46:	617b      	str	r3, [r7, #20]
 801ab48:	e020      	b.n	801ab8c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	3303      	adds	r3, #3
 801ab4e:	687a      	ldr	r2, [r7, #4]
 801ab50:	4413      	add	r3, r2
 801ab52:	781b      	ldrb	r3, [r3, #0]
 801ab54:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801ab56:	697b      	ldr	r3, [r7, #20]
 801ab58:	3302      	adds	r3, #2
 801ab5a:	6879      	ldr	r1, [r7, #4]
 801ab5c:	440b      	add	r3, r1
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801ab62:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801ab64:	697b      	ldr	r3, [r7, #20]
 801ab66:	3301      	adds	r3, #1
 801ab68:	6879      	ldr	r1, [r7, #4]
 801ab6a:	440b      	add	r3, r1
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801ab70:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801ab72:	6879      	ldr	r1, [r7, #4]
 801ab74:	697a      	ldr	r2, [r7, #20]
 801ab76:	440a      	add	r2, r1
 801ab78:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801ab7a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801ab7c:	69bb      	ldr	r3, [r7, #24]
 801ab7e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801ab80:	69bb      	ldr	r3, [r7, #24]
 801ab82:	3304      	adds	r3, #4
 801ab84:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	3304      	adds	r3, #4
 801ab8a:	617b      	str	r3, [r7, #20]
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	68db      	ldr	r3, [r3, #12]
 801ab90:	0c1b      	lsrs	r3, r3, #16
 801ab92:	4a06      	ldr	r2, [pc, #24]	; (801abac <FDCAN_CopyMessageToRAM+0xf8>)
 801ab94:	5cd3      	ldrb	r3, [r2, r3]
 801ab96:	461a      	mov	r2, r3
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	4293      	cmp	r3, r2
 801ab9c:	d3d5      	bcc.n	801ab4a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801ab9e:	bf00      	nop
 801aba0:	bf00      	nop
 801aba2:	3724      	adds	r7, #36	; 0x24
 801aba4:	46bd      	mov	sp, r7
 801aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abaa:	4770      	bx	lr
 801abac:	08020dc4 	.word	0x08020dc4

0801abb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801abb0:	b480      	push	{r7}
 801abb2:	b089      	sub	sp, #36	; 0x24
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
 801abb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801abba:	2300      	movs	r3, #0
 801abbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801abbe:	4b86      	ldr	r3, [pc, #536]	; (801add8 <HAL_GPIO_Init+0x228>)
 801abc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801abc2:	e18c      	b.n	801aede <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	681a      	ldr	r2, [r3, #0]
 801abc8:	2101      	movs	r1, #1
 801abca:	69fb      	ldr	r3, [r7, #28]
 801abcc:	fa01 f303 	lsl.w	r3, r1, r3
 801abd0:	4013      	ands	r3, r2
 801abd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801abd4:	693b      	ldr	r3, [r7, #16]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	f000 817e 	beq.w	801aed8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	f003 0303 	and.w	r3, r3, #3
 801abe4:	2b01      	cmp	r3, #1
 801abe6:	d005      	beq.n	801abf4 <HAL_GPIO_Init+0x44>
 801abe8:	683b      	ldr	r3, [r7, #0]
 801abea:	685b      	ldr	r3, [r3, #4]
 801abec:	f003 0303 	and.w	r3, r3, #3
 801abf0:	2b02      	cmp	r3, #2
 801abf2:	d130      	bne.n	801ac56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	689b      	ldr	r3, [r3, #8]
 801abf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801abfa:	69fb      	ldr	r3, [r7, #28]
 801abfc:	005b      	lsls	r3, r3, #1
 801abfe:	2203      	movs	r2, #3
 801ac00:	fa02 f303 	lsl.w	r3, r2, r3
 801ac04:	43db      	mvns	r3, r3
 801ac06:	69ba      	ldr	r2, [r7, #24]
 801ac08:	4013      	ands	r3, r2
 801ac0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ac0c:	683b      	ldr	r3, [r7, #0]
 801ac0e:	68da      	ldr	r2, [r3, #12]
 801ac10:	69fb      	ldr	r3, [r7, #28]
 801ac12:	005b      	lsls	r3, r3, #1
 801ac14:	fa02 f303 	lsl.w	r3, r2, r3
 801ac18:	69ba      	ldr	r2, [r7, #24]
 801ac1a:	4313      	orrs	r3, r2
 801ac1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	69ba      	ldr	r2, [r7, #24]
 801ac22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	685b      	ldr	r3, [r3, #4]
 801ac28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ac2a:	2201      	movs	r2, #1
 801ac2c:	69fb      	ldr	r3, [r7, #28]
 801ac2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ac32:	43db      	mvns	r3, r3
 801ac34:	69ba      	ldr	r2, [r7, #24]
 801ac36:	4013      	ands	r3, r2
 801ac38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	685b      	ldr	r3, [r3, #4]
 801ac3e:	091b      	lsrs	r3, r3, #4
 801ac40:	f003 0201 	and.w	r2, r3, #1
 801ac44:	69fb      	ldr	r3, [r7, #28]
 801ac46:	fa02 f303 	lsl.w	r3, r2, r3
 801ac4a:	69ba      	ldr	r2, [r7, #24]
 801ac4c:	4313      	orrs	r3, r2
 801ac4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	69ba      	ldr	r2, [r7, #24]
 801ac54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	f003 0303 	and.w	r3, r3, #3
 801ac5e:	2b03      	cmp	r3, #3
 801ac60:	d017      	beq.n	801ac92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	68db      	ldr	r3, [r3, #12]
 801ac66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ac68:	69fb      	ldr	r3, [r7, #28]
 801ac6a:	005b      	lsls	r3, r3, #1
 801ac6c:	2203      	movs	r2, #3
 801ac6e:	fa02 f303 	lsl.w	r3, r2, r3
 801ac72:	43db      	mvns	r3, r3
 801ac74:	69ba      	ldr	r2, [r7, #24]
 801ac76:	4013      	ands	r3, r2
 801ac78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ac7a:	683b      	ldr	r3, [r7, #0]
 801ac7c:	689a      	ldr	r2, [r3, #8]
 801ac7e:	69fb      	ldr	r3, [r7, #28]
 801ac80:	005b      	lsls	r3, r3, #1
 801ac82:	fa02 f303 	lsl.w	r3, r2, r3
 801ac86:	69ba      	ldr	r2, [r7, #24]
 801ac88:	4313      	orrs	r3, r2
 801ac8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	69ba      	ldr	r2, [r7, #24]
 801ac90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	685b      	ldr	r3, [r3, #4]
 801ac96:	f003 0303 	and.w	r3, r3, #3
 801ac9a:	2b02      	cmp	r3, #2
 801ac9c:	d123      	bne.n	801ace6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ac9e:	69fb      	ldr	r3, [r7, #28]
 801aca0:	08da      	lsrs	r2, r3, #3
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	3208      	adds	r2, #8
 801aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801acac:	69fb      	ldr	r3, [r7, #28]
 801acae:	f003 0307 	and.w	r3, r3, #7
 801acb2:	009b      	lsls	r3, r3, #2
 801acb4:	220f      	movs	r2, #15
 801acb6:	fa02 f303 	lsl.w	r3, r2, r3
 801acba:	43db      	mvns	r3, r3
 801acbc:	69ba      	ldr	r2, [r7, #24]
 801acbe:	4013      	ands	r3, r2
 801acc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	691a      	ldr	r2, [r3, #16]
 801acc6:	69fb      	ldr	r3, [r7, #28]
 801acc8:	f003 0307 	and.w	r3, r3, #7
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	fa02 f303 	lsl.w	r3, r2, r3
 801acd2:	69ba      	ldr	r2, [r7, #24]
 801acd4:	4313      	orrs	r3, r2
 801acd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801acd8:	69fb      	ldr	r3, [r7, #28]
 801acda:	08da      	lsrs	r2, r3, #3
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	3208      	adds	r2, #8
 801ace0:	69b9      	ldr	r1, [r7, #24]
 801ace2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	005b      	lsls	r3, r3, #1
 801acf0:	2203      	movs	r2, #3
 801acf2:	fa02 f303 	lsl.w	r3, r2, r3
 801acf6:	43db      	mvns	r3, r3
 801acf8:	69ba      	ldr	r2, [r7, #24]
 801acfa:	4013      	ands	r3, r2
 801acfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	f003 0203 	and.w	r2, r3, #3
 801ad06:	69fb      	ldr	r3, [r7, #28]
 801ad08:	005b      	lsls	r3, r3, #1
 801ad0a:	fa02 f303 	lsl.w	r3, r2, r3
 801ad0e:	69ba      	ldr	r2, [r7, #24]
 801ad10:	4313      	orrs	r3, r2
 801ad12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	69ba      	ldr	r2, [r7, #24]
 801ad18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	685b      	ldr	r3, [r3, #4]
 801ad1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	f000 80d8 	beq.w	801aed8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ad28:	4b2c      	ldr	r3, [pc, #176]	; (801addc <HAL_GPIO_Init+0x22c>)
 801ad2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ad2e:	4a2b      	ldr	r2, [pc, #172]	; (801addc <HAL_GPIO_Init+0x22c>)
 801ad30:	f043 0302 	orr.w	r3, r3, #2
 801ad34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801ad38:	4b28      	ldr	r3, [pc, #160]	; (801addc <HAL_GPIO_Init+0x22c>)
 801ad3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ad3e:	f003 0302 	and.w	r3, r3, #2
 801ad42:	60fb      	str	r3, [r7, #12]
 801ad44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ad46:	4a26      	ldr	r2, [pc, #152]	; (801ade0 <HAL_GPIO_Init+0x230>)
 801ad48:	69fb      	ldr	r3, [r7, #28]
 801ad4a:	089b      	lsrs	r3, r3, #2
 801ad4c:	3302      	adds	r3, #2
 801ad4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ad54:	69fb      	ldr	r3, [r7, #28]
 801ad56:	f003 0303 	and.w	r3, r3, #3
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	220f      	movs	r2, #15
 801ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ad62:	43db      	mvns	r3, r3
 801ad64:	69ba      	ldr	r2, [r7, #24]
 801ad66:	4013      	ands	r3, r2
 801ad68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	4a1d      	ldr	r2, [pc, #116]	; (801ade4 <HAL_GPIO_Init+0x234>)
 801ad6e:	4293      	cmp	r3, r2
 801ad70:	d04a      	beq.n	801ae08 <HAL_GPIO_Init+0x258>
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	4a1c      	ldr	r2, [pc, #112]	; (801ade8 <HAL_GPIO_Init+0x238>)
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d02b      	beq.n	801add2 <HAL_GPIO_Init+0x222>
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	4a1b      	ldr	r2, [pc, #108]	; (801adec <HAL_GPIO_Init+0x23c>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d025      	beq.n	801adce <HAL_GPIO_Init+0x21e>
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	4a1a      	ldr	r2, [pc, #104]	; (801adf0 <HAL_GPIO_Init+0x240>)
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d01f      	beq.n	801adca <HAL_GPIO_Init+0x21a>
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	4a19      	ldr	r2, [pc, #100]	; (801adf4 <HAL_GPIO_Init+0x244>)
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	d019      	beq.n	801adc6 <HAL_GPIO_Init+0x216>
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	4a18      	ldr	r2, [pc, #96]	; (801adf8 <HAL_GPIO_Init+0x248>)
 801ad96:	4293      	cmp	r3, r2
 801ad98:	d013      	beq.n	801adc2 <HAL_GPIO_Init+0x212>
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	4a17      	ldr	r2, [pc, #92]	; (801adfc <HAL_GPIO_Init+0x24c>)
 801ad9e:	4293      	cmp	r3, r2
 801ada0:	d00d      	beq.n	801adbe <HAL_GPIO_Init+0x20e>
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	4a16      	ldr	r2, [pc, #88]	; (801ae00 <HAL_GPIO_Init+0x250>)
 801ada6:	4293      	cmp	r3, r2
 801ada8:	d007      	beq.n	801adba <HAL_GPIO_Init+0x20a>
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	4a15      	ldr	r2, [pc, #84]	; (801ae04 <HAL_GPIO_Init+0x254>)
 801adae:	4293      	cmp	r3, r2
 801adb0:	d101      	bne.n	801adb6 <HAL_GPIO_Init+0x206>
 801adb2:	2309      	movs	r3, #9
 801adb4:	e029      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adb6:	230a      	movs	r3, #10
 801adb8:	e027      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adba:	2307      	movs	r3, #7
 801adbc:	e025      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adbe:	2306      	movs	r3, #6
 801adc0:	e023      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adc2:	2305      	movs	r3, #5
 801adc4:	e021      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adc6:	2304      	movs	r3, #4
 801adc8:	e01f      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adca:	2303      	movs	r3, #3
 801adcc:	e01d      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801adce:	2302      	movs	r3, #2
 801add0:	e01b      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801add2:	2301      	movs	r3, #1
 801add4:	e019      	b.n	801ae0a <HAL_GPIO_Init+0x25a>
 801add6:	bf00      	nop
 801add8:	58000080 	.word	0x58000080
 801addc:	58024400 	.word	0x58024400
 801ade0:	58000400 	.word	0x58000400
 801ade4:	58020000 	.word	0x58020000
 801ade8:	58020400 	.word	0x58020400
 801adec:	58020800 	.word	0x58020800
 801adf0:	58020c00 	.word	0x58020c00
 801adf4:	58021000 	.word	0x58021000
 801adf8:	58021400 	.word	0x58021400
 801adfc:	58021800 	.word	0x58021800
 801ae00:	58021c00 	.word	0x58021c00
 801ae04:	58022400 	.word	0x58022400
 801ae08:	2300      	movs	r3, #0
 801ae0a:	69fa      	ldr	r2, [r7, #28]
 801ae0c:	f002 0203 	and.w	r2, r2, #3
 801ae10:	0092      	lsls	r2, r2, #2
 801ae12:	4093      	lsls	r3, r2
 801ae14:	69ba      	ldr	r2, [r7, #24]
 801ae16:	4313      	orrs	r3, r2
 801ae18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ae1a:	4938      	ldr	r1, [pc, #224]	; (801aefc <HAL_GPIO_Init+0x34c>)
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	089b      	lsrs	r3, r3, #2
 801ae20:	3302      	adds	r3, #2
 801ae22:	69ba      	ldr	r2, [r7, #24]
 801ae24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ae28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ae30:	693b      	ldr	r3, [r7, #16]
 801ae32:	43db      	mvns	r3, r3
 801ae34:	69ba      	ldr	r2, [r7, #24]
 801ae36:	4013      	ands	r3, r2
 801ae38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	685b      	ldr	r3, [r3, #4]
 801ae3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d003      	beq.n	801ae4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ae46:	69ba      	ldr	r2, [r7, #24]
 801ae48:	693b      	ldr	r3, [r7, #16]
 801ae4a:	4313      	orrs	r3, r2
 801ae4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ae4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae52:	69bb      	ldr	r3, [r7, #24]
 801ae54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ae56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae5a:	685b      	ldr	r3, [r3, #4]
 801ae5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	43db      	mvns	r3, r3
 801ae62:	69ba      	ldr	r2, [r7, #24]
 801ae64:	4013      	ands	r3, r2
 801ae66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d003      	beq.n	801ae7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801ae74:	69ba      	ldr	r2, [r7, #24]
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	4313      	orrs	r3, r2
 801ae7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ae7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae80:	69bb      	ldr	r3, [r7, #24]
 801ae82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ae84:	697b      	ldr	r3, [r7, #20]
 801ae86:	685b      	ldr	r3, [r3, #4]
 801ae88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	43db      	mvns	r3, r3
 801ae8e:	69ba      	ldr	r2, [r7, #24]
 801ae90:	4013      	ands	r3, r2
 801ae92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	685b      	ldr	r3, [r3, #4]
 801ae98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d003      	beq.n	801aea8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801aea0:	69ba      	ldr	r2, [r7, #24]
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	4313      	orrs	r3, r2
 801aea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	69ba      	ldr	r2, [r7, #24]
 801aeac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801aeb4:	693b      	ldr	r3, [r7, #16]
 801aeb6:	43db      	mvns	r3, r3
 801aeb8:	69ba      	ldr	r2, [r7, #24]
 801aeba:	4013      	ands	r3, r2
 801aebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d003      	beq.n	801aed2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801aeca:	69ba      	ldr	r2, [r7, #24]
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	4313      	orrs	r3, r2
 801aed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	69ba      	ldr	r2, [r7, #24]
 801aed6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	3301      	adds	r3, #1
 801aedc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	681a      	ldr	r2, [r3, #0]
 801aee2:	69fb      	ldr	r3, [r7, #28]
 801aee4:	fa22 f303 	lsr.w	r3, r2, r3
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	f47f ae6b 	bne.w	801abc4 <HAL_GPIO_Init+0x14>
  }
}
 801aeee:	bf00      	nop
 801aef0:	bf00      	nop
 801aef2:	3724      	adds	r7, #36	; 0x24
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr
 801aefc:	58000400 	.word	0x58000400

0801af00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801af00:	b480      	push	{r7}
 801af02:	b085      	sub	sp, #20
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
 801af08:	460b      	mov	r3, r1
 801af0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	691a      	ldr	r2, [r3, #16]
 801af10:	887b      	ldrh	r3, [r7, #2]
 801af12:	4013      	ands	r3, r2
 801af14:	2b00      	cmp	r3, #0
 801af16:	d002      	beq.n	801af1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801af18:	2301      	movs	r3, #1
 801af1a:	73fb      	strb	r3, [r7, #15]
 801af1c:	e001      	b.n	801af22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801af1e:	2300      	movs	r3, #0
 801af20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801af22:	7bfb      	ldrb	r3, [r7, #15]
}
 801af24:	4618      	mov	r0, r3
 801af26:	3714      	adds	r7, #20
 801af28:	46bd      	mov	sp, r7
 801af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2e:	4770      	bx	lr

0801af30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801af30:	b480      	push	{r7}
 801af32:	b083      	sub	sp, #12
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	460b      	mov	r3, r1
 801af3a:	807b      	strh	r3, [r7, #2]
 801af3c:	4613      	mov	r3, r2
 801af3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801af40:	787b      	ldrb	r3, [r7, #1]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d003      	beq.n	801af4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801af46:	887a      	ldrh	r2, [r7, #2]
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801af4c:	e003      	b.n	801af56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801af4e:	887b      	ldrh	r3, [r7, #2]
 801af50:	041a      	lsls	r2, r3, #16
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	619a      	str	r2, [r3, #24]
}
 801af56:	bf00      	nop
 801af58:	370c      	adds	r7, #12
 801af5a:	46bd      	mov	sp, r7
 801af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af60:	4770      	bx	lr

0801af62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801af62:	b480      	push	{r7}
 801af64:	b085      	sub	sp, #20
 801af66:	af00      	add	r7, sp, #0
 801af68:	6078      	str	r0, [r7, #4]
 801af6a:	460b      	mov	r3, r1
 801af6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	695b      	ldr	r3, [r3, #20]
 801af72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801af74:	887a      	ldrh	r2, [r7, #2]
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	4013      	ands	r3, r2
 801af7a:	041a      	lsls	r2, r3, #16
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	43d9      	mvns	r1, r3
 801af80:	887b      	ldrh	r3, [r7, #2]
 801af82:	400b      	ands	r3, r1
 801af84:	431a      	orrs	r2, r3
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	619a      	str	r2, [r3, #24]
}
 801af8a:	bf00      	nop
 801af8c:	3714      	adds	r7, #20
 801af8e:	46bd      	mov	sp, r7
 801af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af94:	4770      	bx	lr
	...

0801af98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801afa0:	4b19      	ldr	r3, [pc, #100]	; (801b008 <HAL_PWREx_ConfigSupply+0x70>)
 801afa2:	68db      	ldr	r3, [r3, #12]
 801afa4:	f003 0304 	and.w	r3, r3, #4
 801afa8:	2b04      	cmp	r3, #4
 801afaa:	d00a      	beq.n	801afc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801afac:	4b16      	ldr	r3, [pc, #88]	; (801b008 <HAL_PWREx_ConfigSupply+0x70>)
 801afae:	68db      	ldr	r3, [r3, #12]
 801afb0:	f003 0307 	and.w	r3, r3, #7
 801afb4:	687a      	ldr	r2, [r7, #4]
 801afb6:	429a      	cmp	r2, r3
 801afb8:	d001      	beq.n	801afbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801afba:	2301      	movs	r3, #1
 801afbc:	e01f      	b.n	801affe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801afbe:	2300      	movs	r3, #0
 801afc0:	e01d      	b.n	801affe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801afc2:	4b11      	ldr	r3, [pc, #68]	; (801b008 <HAL_PWREx_ConfigSupply+0x70>)
 801afc4:	68db      	ldr	r3, [r3, #12]
 801afc6:	f023 0207 	bic.w	r2, r3, #7
 801afca:	490f      	ldr	r1, [pc, #60]	; (801b008 <HAL_PWREx_ConfigSupply+0x70>)
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	4313      	orrs	r3, r2
 801afd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801afd2:	f7fa f9ed 	bl	80153b0 <HAL_GetTick>
 801afd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801afd8:	e009      	b.n	801afee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801afda:	f7fa f9e9 	bl	80153b0 <HAL_GetTick>
 801afde:	4602      	mov	r2, r0
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	1ad3      	subs	r3, r2, r3
 801afe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801afe8:	d901      	bls.n	801afee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801afea:	2301      	movs	r3, #1
 801afec:	e007      	b.n	801affe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801afee:	4b06      	ldr	r3, [pc, #24]	; (801b008 <HAL_PWREx_ConfigSupply+0x70>)
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801affa:	d1ee      	bne.n	801afda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801affc:	2300      	movs	r3, #0
}
 801affe:	4618      	mov	r0, r3
 801b000:	3710      	adds	r7, #16
 801b002:	46bd      	mov	sp, r7
 801b004:	bd80      	pop	{r7, pc}
 801b006:	bf00      	nop
 801b008:	58024800 	.word	0x58024800

0801b00c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b08c      	sub	sp, #48	; 0x30
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d101      	bne.n	801b01e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b01a:	2301      	movs	r3, #1
 801b01c:	e3c8      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	f003 0301 	and.w	r3, r3, #1
 801b026:	2b00      	cmp	r3, #0
 801b028:	f000 8087 	beq.w	801b13a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b02c:	4b88      	ldr	r3, [pc, #544]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b02e:	691b      	ldr	r3, [r3, #16]
 801b030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b034:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b036:	4b86      	ldr	r3, [pc, #536]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b03a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b03e:	2b10      	cmp	r3, #16
 801b040:	d007      	beq.n	801b052 <HAL_RCC_OscConfig+0x46>
 801b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b044:	2b18      	cmp	r3, #24
 801b046:	d110      	bne.n	801b06a <HAL_RCC_OscConfig+0x5e>
 801b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b04a:	f003 0303 	and.w	r3, r3, #3
 801b04e:	2b02      	cmp	r3, #2
 801b050:	d10b      	bne.n	801b06a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b052:	4b7f      	ldr	r3, [pc, #508]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d06c      	beq.n	801b138 <HAL_RCC_OscConfig+0x12c>
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	685b      	ldr	r3, [r3, #4]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d168      	bne.n	801b138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801b066:	2301      	movs	r3, #1
 801b068:	e3a2      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b072:	d106      	bne.n	801b082 <HAL_RCC_OscConfig+0x76>
 801b074:	4b76      	ldr	r3, [pc, #472]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	4a75      	ldr	r2, [pc, #468]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b07a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b07e:	6013      	str	r3, [r2, #0]
 801b080:	e02e      	b.n	801b0e0 <HAL_RCC_OscConfig+0xd4>
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	685b      	ldr	r3, [r3, #4]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d10c      	bne.n	801b0a4 <HAL_RCC_OscConfig+0x98>
 801b08a:	4b71      	ldr	r3, [pc, #452]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4a70      	ldr	r2, [pc, #448]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b094:	6013      	str	r3, [r2, #0]
 801b096:	4b6e      	ldr	r3, [pc, #440]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4a6d      	ldr	r2, [pc, #436]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b09c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b0a0:	6013      	str	r3, [r2, #0]
 801b0a2:	e01d      	b.n	801b0e0 <HAL_RCC_OscConfig+0xd4>
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	685b      	ldr	r3, [r3, #4]
 801b0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b0ac:	d10c      	bne.n	801b0c8 <HAL_RCC_OscConfig+0xbc>
 801b0ae:	4b68      	ldr	r3, [pc, #416]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	4a67      	ldr	r2, [pc, #412]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b0b8:	6013      	str	r3, [r2, #0]
 801b0ba:	4b65      	ldr	r3, [pc, #404]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	4a64      	ldr	r2, [pc, #400]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b0c4:	6013      	str	r3, [r2, #0]
 801b0c6:	e00b      	b.n	801b0e0 <HAL_RCC_OscConfig+0xd4>
 801b0c8:	4b61      	ldr	r3, [pc, #388]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	4a60      	ldr	r2, [pc, #384]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b0d2:	6013      	str	r3, [r2, #0]
 801b0d4:	4b5e      	ldr	r3, [pc, #376]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a5d      	ldr	r2, [pc, #372]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b0da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b0de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	685b      	ldr	r3, [r3, #4]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d013      	beq.n	801b110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0e8:	f7fa f962 	bl	80153b0 <HAL_GetTick>
 801b0ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b0ee:	e008      	b.n	801b102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b0f0:	f7fa f95e 	bl	80153b0 <HAL_GetTick>
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f8:	1ad3      	subs	r3, r2, r3
 801b0fa:	2b64      	cmp	r3, #100	; 0x64
 801b0fc:	d901      	bls.n	801b102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801b0fe:	2303      	movs	r3, #3
 801b100:	e356      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b102:	4b53      	ldr	r3, [pc, #332]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d0f0      	beq.n	801b0f0 <HAL_RCC_OscConfig+0xe4>
 801b10e:	e014      	b.n	801b13a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b110:	f7fa f94e 	bl	80153b0 <HAL_GetTick>
 801b114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b116:	e008      	b.n	801b12a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b118:	f7fa f94a 	bl	80153b0 <HAL_GetTick>
 801b11c:	4602      	mov	r2, r0
 801b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	2b64      	cmp	r3, #100	; 0x64
 801b124:	d901      	bls.n	801b12a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801b126:	2303      	movs	r3, #3
 801b128:	e342      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b12a:	4b49      	ldr	r3, [pc, #292]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1f0      	bne.n	801b118 <HAL_RCC_OscConfig+0x10c>
 801b136:	e000      	b.n	801b13a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	f003 0302 	and.w	r3, r3, #2
 801b142:	2b00      	cmp	r3, #0
 801b144:	f000 808c 	beq.w	801b260 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b148:	4b41      	ldr	r3, [pc, #260]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b14a:	691b      	ldr	r3, [r3, #16]
 801b14c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b150:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b152:	4b3f      	ldr	r3, [pc, #252]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b156:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b158:	6a3b      	ldr	r3, [r7, #32]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d007      	beq.n	801b16e <HAL_RCC_OscConfig+0x162>
 801b15e:	6a3b      	ldr	r3, [r7, #32]
 801b160:	2b18      	cmp	r3, #24
 801b162:	d137      	bne.n	801b1d4 <HAL_RCC_OscConfig+0x1c8>
 801b164:	69fb      	ldr	r3, [r7, #28]
 801b166:	f003 0303 	and.w	r3, r3, #3
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d132      	bne.n	801b1d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b16e:	4b38      	ldr	r3, [pc, #224]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	f003 0304 	and.w	r3, r3, #4
 801b176:	2b00      	cmp	r3, #0
 801b178:	d005      	beq.n	801b186 <HAL_RCC_OscConfig+0x17a>
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	68db      	ldr	r3, [r3, #12]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d101      	bne.n	801b186 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b182:	2301      	movs	r3, #1
 801b184:	e314      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b186:	4b32      	ldr	r3, [pc, #200]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	f023 0219 	bic.w	r2, r3, #25
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	68db      	ldr	r3, [r3, #12]
 801b192:	492f      	ldr	r1, [pc, #188]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b194:	4313      	orrs	r3, r2
 801b196:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b198:	f7fa f90a 	bl	80153b0 <HAL_GetTick>
 801b19c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b19e:	e008      	b.n	801b1b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b1a0:	f7fa f906 	bl	80153b0 <HAL_GetTick>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	2b02      	cmp	r3, #2
 801b1ac:	d901      	bls.n	801b1b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801b1ae:	2303      	movs	r3, #3
 801b1b0:	e2fe      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b1b2:	4b27      	ldr	r3, [pc, #156]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	f003 0304 	and.w	r3, r3, #4
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d0f0      	beq.n	801b1a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b1be:	4b24      	ldr	r3, [pc, #144]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b1c0:	685b      	ldr	r3, [r3, #4]
 801b1c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	691b      	ldr	r3, [r3, #16]
 801b1ca:	061b      	lsls	r3, r3, #24
 801b1cc:	4920      	ldr	r1, [pc, #128]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b1ce:	4313      	orrs	r3, r2
 801b1d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b1d2:	e045      	b.n	801b260 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d026      	beq.n	801b22a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b1dc:	4b1c      	ldr	r3, [pc, #112]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	f023 0219 	bic.w	r2, r3, #25
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	68db      	ldr	r3, [r3, #12]
 801b1e8:	4919      	ldr	r1, [pc, #100]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b1ea:	4313      	orrs	r3, r2
 801b1ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1ee:	f7fa f8df 	bl	80153b0 <HAL_GetTick>
 801b1f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b1f4:	e008      	b.n	801b208 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b1f6:	f7fa f8db 	bl	80153b0 <HAL_GetTick>
 801b1fa:	4602      	mov	r2, r0
 801b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fe:	1ad3      	subs	r3, r2, r3
 801b200:	2b02      	cmp	r3, #2
 801b202:	d901      	bls.n	801b208 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801b204:	2303      	movs	r3, #3
 801b206:	e2d3      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b208:	4b11      	ldr	r3, [pc, #68]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	f003 0304 	and.w	r3, r3, #4
 801b210:	2b00      	cmp	r3, #0
 801b212:	d0f0      	beq.n	801b1f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b214:	4b0e      	ldr	r3, [pc, #56]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b216:	685b      	ldr	r3, [r3, #4]
 801b218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	691b      	ldr	r3, [r3, #16]
 801b220:	061b      	lsls	r3, r3, #24
 801b222:	490b      	ldr	r1, [pc, #44]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b224:	4313      	orrs	r3, r2
 801b226:	604b      	str	r3, [r1, #4]
 801b228:	e01a      	b.n	801b260 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b22a:	4b09      	ldr	r3, [pc, #36]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	4a08      	ldr	r2, [pc, #32]	; (801b250 <HAL_RCC_OscConfig+0x244>)
 801b230:	f023 0301 	bic.w	r3, r3, #1
 801b234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b236:	f7fa f8bb 	bl	80153b0 <HAL_GetTick>
 801b23a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b23c:	e00a      	b.n	801b254 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b23e:	f7fa f8b7 	bl	80153b0 <HAL_GetTick>
 801b242:	4602      	mov	r2, r0
 801b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b246:	1ad3      	subs	r3, r2, r3
 801b248:	2b02      	cmp	r3, #2
 801b24a:	d903      	bls.n	801b254 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b24c:	2303      	movs	r3, #3
 801b24e:	e2af      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
 801b250:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b254:	4b96      	ldr	r3, [pc, #600]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	f003 0304 	and.w	r3, r3, #4
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d1ee      	bne.n	801b23e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	f003 0310 	and.w	r3, r3, #16
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d06a      	beq.n	801b342 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b26c:	4b90      	ldr	r3, [pc, #576]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b26e:	691b      	ldr	r3, [r3, #16]
 801b270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b274:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b276:	4b8e      	ldr	r3, [pc, #568]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b27a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b27c:	69bb      	ldr	r3, [r7, #24]
 801b27e:	2b08      	cmp	r3, #8
 801b280:	d007      	beq.n	801b292 <HAL_RCC_OscConfig+0x286>
 801b282:	69bb      	ldr	r3, [r7, #24]
 801b284:	2b18      	cmp	r3, #24
 801b286:	d11b      	bne.n	801b2c0 <HAL_RCC_OscConfig+0x2b4>
 801b288:	697b      	ldr	r3, [r7, #20]
 801b28a:	f003 0303 	and.w	r3, r3, #3
 801b28e:	2b01      	cmp	r3, #1
 801b290:	d116      	bne.n	801b2c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b292:	4b87      	ldr	r3, [pc, #540]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d005      	beq.n	801b2aa <HAL_RCC_OscConfig+0x29e>
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	69db      	ldr	r3, [r3, #28]
 801b2a2:	2b80      	cmp	r3, #128	; 0x80
 801b2a4:	d001      	beq.n	801b2aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	e282      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b2aa:	4b81      	ldr	r3, [pc, #516]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2ac:	68db      	ldr	r3, [r3, #12]
 801b2ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	6a1b      	ldr	r3, [r3, #32]
 801b2b6:	061b      	lsls	r3, r3, #24
 801b2b8:	497d      	ldr	r1, [pc, #500]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2ba:	4313      	orrs	r3, r2
 801b2bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b2be:	e040      	b.n	801b342 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	69db      	ldr	r3, [r3, #28]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d023      	beq.n	801b310 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b2c8:	4b79      	ldr	r3, [pc, #484]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	4a78      	ldr	r2, [pc, #480]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b2d4:	f7fa f86c 	bl	80153b0 <HAL_GetTick>
 801b2d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b2da:	e008      	b.n	801b2ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b2dc:	f7fa f868 	bl	80153b0 <HAL_GetTick>
 801b2e0:	4602      	mov	r2, r0
 801b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e4:	1ad3      	subs	r3, r2, r3
 801b2e6:	2b02      	cmp	r3, #2
 801b2e8:	d901      	bls.n	801b2ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b2ea:	2303      	movs	r3, #3
 801b2ec:	e260      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b2ee:	4b70      	ldr	r3, [pc, #448]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d0f0      	beq.n	801b2dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b2fa:	4b6d      	ldr	r3, [pc, #436]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b2fc:	68db      	ldr	r3, [r3, #12]
 801b2fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	6a1b      	ldr	r3, [r3, #32]
 801b306:	061b      	lsls	r3, r3, #24
 801b308:	4969      	ldr	r1, [pc, #420]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b30a:	4313      	orrs	r3, r2
 801b30c:	60cb      	str	r3, [r1, #12]
 801b30e:	e018      	b.n	801b342 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b310:	4b67      	ldr	r3, [pc, #412]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	4a66      	ldr	r2, [pc, #408]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b31c:	f7fa f848 	bl	80153b0 <HAL_GetTick>
 801b320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b322:	e008      	b.n	801b336 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b324:	f7fa f844 	bl	80153b0 <HAL_GetTick>
 801b328:	4602      	mov	r2, r0
 801b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b32c:	1ad3      	subs	r3, r2, r3
 801b32e:	2b02      	cmp	r3, #2
 801b330:	d901      	bls.n	801b336 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b332:	2303      	movs	r3, #3
 801b334:	e23c      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b336:	4b5e      	ldr	r3, [pc, #376]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d1f0      	bne.n	801b324 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	f003 0308 	and.w	r3, r3, #8
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d036      	beq.n	801b3bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	695b      	ldr	r3, [r3, #20]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d019      	beq.n	801b38a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b356:	4b56      	ldr	r3, [pc, #344]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b35a:	4a55      	ldr	r2, [pc, #340]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b35c:	f043 0301 	orr.w	r3, r3, #1
 801b360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b362:	f7fa f825 	bl	80153b0 <HAL_GetTick>
 801b366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b368:	e008      	b.n	801b37c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b36a:	f7fa f821 	bl	80153b0 <HAL_GetTick>
 801b36e:	4602      	mov	r2, r0
 801b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b372:	1ad3      	subs	r3, r2, r3
 801b374:	2b02      	cmp	r3, #2
 801b376:	d901      	bls.n	801b37c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b378:	2303      	movs	r3, #3
 801b37a:	e219      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b37c:	4b4c      	ldr	r3, [pc, #304]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b380:	f003 0302 	and.w	r3, r3, #2
 801b384:	2b00      	cmp	r3, #0
 801b386:	d0f0      	beq.n	801b36a <HAL_RCC_OscConfig+0x35e>
 801b388:	e018      	b.n	801b3bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b38a:	4b49      	ldr	r3, [pc, #292]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b38e:	4a48      	ldr	r2, [pc, #288]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b390:	f023 0301 	bic.w	r3, r3, #1
 801b394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b396:	f7fa f80b 	bl	80153b0 <HAL_GetTick>
 801b39a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b39c:	e008      	b.n	801b3b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b39e:	f7fa f807 	bl	80153b0 <HAL_GetTick>
 801b3a2:	4602      	mov	r2, r0
 801b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a6:	1ad3      	subs	r3, r2, r3
 801b3a8:	2b02      	cmp	r3, #2
 801b3aa:	d901      	bls.n	801b3b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b3ac:	2303      	movs	r3, #3
 801b3ae:	e1ff      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b3b0:	4b3f      	ldr	r3, [pc, #252]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b3b4:	f003 0302 	and.w	r3, r3, #2
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d1f0      	bne.n	801b39e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f003 0320 	and.w	r3, r3, #32
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d036      	beq.n	801b436 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	699b      	ldr	r3, [r3, #24]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d019      	beq.n	801b404 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b3d0:	4b37      	ldr	r3, [pc, #220]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	4a36      	ldr	r2, [pc, #216]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b3d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b3da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b3dc:	f7f9 ffe8 	bl	80153b0 <HAL_GetTick>
 801b3e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b3e2:	e008      	b.n	801b3f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b3e4:	f7f9 ffe4 	bl	80153b0 <HAL_GetTick>
 801b3e8:	4602      	mov	r2, r0
 801b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ec:	1ad3      	subs	r3, r2, r3
 801b3ee:	2b02      	cmp	r3, #2
 801b3f0:	d901      	bls.n	801b3f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b3f2:	2303      	movs	r3, #3
 801b3f4:	e1dc      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b3f6:	4b2e      	ldr	r3, [pc, #184]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d0f0      	beq.n	801b3e4 <HAL_RCC_OscConfig+0x3d8>
 801b402:	e018      	b.n	801b436 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b404:	4b2a      	ldr	r3, [pc, #168]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a29      	ldr	r2, [pc, #164]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b40e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b410:	f7f9 ffce 	bl	80153b0 <HAL_GetTick>
 801b414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b416:	e008      	b.n	801b42a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b418:	f7f9 ffca 	bl	80153b0 <HAL_GetTick>
 801b41c:	4602      	mov	r2, r0
 801b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b420:	1ad3      	subs	r3, r2, r3
 801b422:	2b02      	cmp	r3, #2
 801b424:	d901      	bls.n	801b42a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b426:	2303      	movs	r3, #3
 801b428:	e1c2      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b42a:	4b21      	ldr	r3, [pc, #132]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b432:	2b00      	cmp	r3, #0
 801b434:	d1f0      	bne.n	801b418 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	f003 0304 	and.w	r3, r3, #4
 801b43e:	2b00      	cmp	r3, #0
 801b440:	f000 8086 	beq.w	801b550 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b444:	4b1b      	ldr	r3, [pc, #108]	; (801b4b4 <HAL_RCC_OscConfig+0x4a8>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	4a1a      	ldr	r2, [pc, #104]	; (801b4b4 <HAL_RCC_OscConfig+0x4a8>)
 801b44a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b44e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b450:	f7f9 ffae 	bl	80153b0 <HAL_GetTick>
 801b454:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b456:	e008      	b.n	801b46a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b458:	f7f9 ffaa 	bl	80153b0 <HAL_GetTick>
 801b45c:	4602      	mov	r2, r0
 801b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b460:	1ad3      	subs	r3, r2, r3
 801b462:	2b64      	cmp	r3, #100	; 0x64
 801b464:	d901      	bls.n	801b46a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b466:	2303      	movs	r3, #3
 801b468:	e1a2      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b46a:	4b12      	ldr	r3, [pc, #72]	; (801b4b4 <HAL_RCC_OscConfig+0x4a8>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b472:	2b00      	cmp	r3, #0
 801b474:	d0f0      	beq.n	801b458 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	689b      	ldr	r3, [r3, #8]
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	d106      	bne.n	801b48c <HAL_RCC_OscConfig+0x480>
 801b47e:	4b0c      	ldr	r3, [pc, #48]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b482:	4a0b      	ldr	r2, [pc, #44]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b484:	f043 0301 	orr.w	r3, r3, #1
 801b488:	6713      	str	r3, [r2, #112]	; 0x70
 801b48a:	e032      	b.n	801b4f2 <HAL_RCC_OscConfig+0x4e6>
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	689b      	ldr	r3, [r3, #8]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d111      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x4ac>
 801b494:	4b06      	ldr	r3, [pc, #24]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b498:	4a05      	ldr	r2, [pc, #20]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b49a:	f023 0301 	bic.w	r3, r3, #1
 801b49e:	6713      	str	r3, [r2, #112]	; 0x70
 801b4a0:	4b03      	ldr	r3, [pc, #12]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4a4:	4a02      	ldr	r2, [pc, #8]	; (801b4b0 <HAL_RCC_OscConfig+0x4a4>)
 801b4a6:	f023 0304 	bic.w	r3, r3, #4
 801b4aa:	6713      	str	r3, [r2, #112]	; 0x70
 801b4ac:	e021      	b.n	801b4f2 <HAL_RCC_OscConfig+0x4e6>
 801b4ae:	bf00      	nop
 801b4b0:	58024400 	.word	0x58024400
 801b4b4:	58024800 	.word	0x58024800
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	689b      	ldr	r3, [r3, #8]
 801b4bc:	2b05      	cmp	r3, #5
 801b4be:	d10c      	bne.n	801b4da <HAL_RCC_OscConfig+0x4ce>
 801b4c0:	4b83      	ldr	r3, [pc, #524]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4c4:	4a82      	ldr	r2, [pc, #520]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4c6:	f043 0304 	orr.w	r3, r3, #4
 801b4ca:	6713      	str	r3, [r2, #112]	; 0x70
 801b4cc:	4b80      	ldr	r3, [pc, #512]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4d0:	4a7f      	ldr	r2, [pc, #508]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4d2:	f043 0301 	orr.w	r3, r3, #1
 801b4d6:	6713      	str	r3, [r2, #112]	; 0x70
 801b4d8:	e00b      	b.n	801b4f2 <HAL_RCC_OscConfig+0x4e6>
 801b4da:	4b7d      	ldr	r3, [pc, #500]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4de:	4a7c      	ldr	r2, [pc, #496]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4e0:	f023 0301 	bic.w	r3, r3, #1
 801b4e4:	6713      	str	r3, [r2, #112]	; 0x70
 801b4e6:	4b7a      	ldr	r3, [pc, #488]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4ea:	4a79      	ldr	r2, [pc, #484]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b4ec:	f023 0304 	bic.w	r3, r3, #4
 801b4f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	689b      	ldr	r3, [r3, #8]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d015      	beq.n	801b526 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b4fa:	f7f9 ff59 	bl	80153b0 <HAL_GetTick>
 801b4fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b500:	e00a      	b.n	801b518 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b502:	f7f9 ff55 	bl	80153b0 <HAL_GetTick>
 801b506:	4602      	mov	r2, r0
 801b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b50a:	1ad3      	subs	r3, r2, r3
 801b50c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b510:	4293      	cmp	r3, r2
 801b512:	d901      	bls.n	801b518 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801b514:	2303      	movs	r3, #3
 801b516:	e14b      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b518:	4b6d      	ldr	r3, [pc, #436]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b51c:	f003 0302 	and.w	r3, r3, #2
 801b520:	2b00      	cmp	r3, #0
 801b522:	d0ee      	beq.n	801b502 <HAL_RCC_OscConfig+0x4f6>
 801b524:	e014      	b.n	801b550 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b526:	f7f9 ff43 	bl	80153b0 <HAL_GetTick>
 801b52a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b52c:	e00a      	b.n	801b544 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b52e:	f7f9 ff3f 	bl	80153b0 <HAL_GetTick>
 801b532:	4602      	mov	r2, r0
 801b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b536:	1ad3      	subs	r3, r2, r3
 801b538:	f241 3288 	movw	r2, #5000	; 0x1388
 801b53c:	4293      	cmp	r3, r2
 801b53e:	d901      	bls.n	801b544 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801b540:	2303      	movs	r3, #3
 801b542:	e135      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b544:	4b62      	ldr	r3, [pc, #392]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b548:	f003 0302 	and.w	r3, r3, #2
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d1ee      	bne.n	801b52e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b554:	2b00      	cmp	r3, #0
 801b556:	f000 812a 	beq.w	801b7ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b55a:	4b5d      	ldr	r3, [pc, #372]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b55c:	691b      	ldr	r3, [r3, #16]
 801b55e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b562:	2b18      	cmp	r3, #24
 801b564:	f000 80ba 	beq.w	801b6dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b56c:	2b02      	cmp	r3, #2
 801b56e:	f040 8095 	bne.w	801b69c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b572:	4b57      	ldr	r3, [pc, #348]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	4a56      	ldr	r2, [pc, #344]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b57c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b57e:	f7f9 ff17 	bl	80153b0 <HAL_GetTick>
 801b582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b584:	e008      	b.n	801b598 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b586:	f7f9 ff13 	bl	80153b0 <HAL_GetTick>
 801b58a:	4602      	mov	r2, r0
 801b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b58e:	1ad3      	subs	r3, r2, r3
 801b590:	2b02      	cmp	r3, #2
 801b592:	d901      	bls.n	801b598 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801b594:	2303      	movs	r3, #3
 801b596:	e10b      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b598:	4b4d      	ldr	r3, [pc, #308]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d1f0      	bne.n	801b586 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b5a4:	4b4a      	ldr	r3, [pc, #296]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b5a8:	4b4a      	ldr	r3, [pc, #296]	; (801b6d4 <HAL_RCC_OscConfig+0x6c8>)
 801b5aa:	4013      	ands	r3, r2
 801b5ac:	687a      	ldr	r2, [r7, #4]
 801b5ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b5b0:	687a      	ldr	r2, [r7, #4]
 801b5b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b5b4:	0112      	lsls	r2, r2, #4
 801b5b6:	430a      	orrs	r2, r1
 801b5b8:	4945      	ldr	r1, [pc, #276]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	628b      	str	r3, [r1, #40]	; 0x28
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5c2:	3b01      	subs	r3, #1
 801b5c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5cc:	3b01      	subs	r3, #1
 801b5ce:	025b      	lsls	r3, r3, #9
 801b5d0:	b29b      	uxth	r3, r3
 801b5d2:	431a      	orrs	r2, r3
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5d8:	3b01      	subs	r3, #1
 801b5da:	041b      	lsls	r3, r3, #16
 801b5dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b5e0:	431a      	orrs	r2, r3
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5e6:	3b01      	subs	r3, #1
 801b5e8:	061b      	lsls	r3, r3, #24
 801b5ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b5ee:	4938      	ldr	r1, [pc, #224]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b5f0:	4313      	orrs	r3, r2
 801b5f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b5f4:	4b36      	ldr	r3, [pc, #216]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5f8:	4a35      	ldr	r2, [pc, #212]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b5fa:	f023 0301 	bic.w	r3, r3, #1
 801b5fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b600:	4b33      	ldr	r3, [pc, #204]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b604:	4b34      	ldr	r3, [pc, #208]	; (801b6d8 <HAL_RCC_OscConfig+0x6cc>)
 801b606:	4013      	ands	r3, r2
 801b608:	687a      	ldr	r2, [r7, #4]
 801b60a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b60c:	00d2      	lsls	r2, r2, #3
 801b60e:	4930      	ldr	r1, [pc, #192]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b610:	4313      	orrs	r3, r2
 801b612:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b614:	4b2e      	ldr	r3, [pc, #184]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b618:	f023 020c 	bic.w	r2, r3, #12
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b620:	492b      	ldr	r1, [pc, #172]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b622:	4313      	orrs	r3, r2
 801b624:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b626:	4b2a      	ldr	r3, [pc, #168]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b62a:	f023 0202 	bic.w	r2, r3, #2
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b632:	4927      	ldr	r1, [pc, #156]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b634:	4313      	orrs	r3, r2
 801b636:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b638:	4b25      	ldr	r3, [pc, #148]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b63c:	4a24      	ldr	r2, [pc, #144]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b63e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b644:	4b22      	ldr	r3, [pc, #136]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b648:	4a21      	ldr	r2, [pc, #132]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b64a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b64e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b650:	4b1f      	ldr	r3, [pc, #124]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b654:	4a1e      	ldr	r2, [pc, #120]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b65a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b65c:	4b1c      	ldr	r3, [pc, #112]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b660:	4a1b      	ldr	r2, [pc, #108]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b662:	f043 0301 	orr.w	r3, r3, #1
 801b666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b668:	4b19      	ldr	r3, [pc, #100]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	4a18      	ldr	r2, [pc, #96]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b66e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b674:	f7f9 fe9c 	bl	80153b0 <HAL_GetTick>
 801b678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b67a:	e008      	b.n	801b68e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b67c:	f7f9 fe98 	bl	80153b0 <HAL_GetTick>
 801b680:	4602      	mov	r2, r0
 801b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b684:	1ad3      	subs	r3, r2, r3
 801b686:	2b02      	cmp	r3, #2
 801b688:	d901      	bls.n	801b68e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801b68a:	2303      	movs	r3, #3
 801b68c:	e090      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b68e:	4b10      	ldr	r3, [pc, #64]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b696:	2b00      	cmp	r3, #0
 801b698:	d0f0      	beq.n	801b67c <HAL_RCC_OscConfig+0x670>
 801b69a:	e088      	b.n	801b7ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b69c:	4b0c      	ldr	r3, [pc, #48]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	4a0b      	ldr	r2, [pc, #44]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b6a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b6a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6a8:	f7f9 fe82 	bl	80153b0 <HAL_GetTick>
 801b6ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b6ae:	e008      	b.n	801b6c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b6b0:	f7f9 fe7e 	bl	80153b0 <HAL_GetTick>
 801b6b4:	4602      	mov	r2, r0
 801b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6b8:	1ad3      	subs	r3, r2, r3
 801b6ba:	2b02      	cmp	r3, #2
 801b6bc:	d901      	bls.n	801b6c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801b6be:	2303      	movs	r3, #3
 801b6c0:	e076      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b6c2:	4b03      	ldr	r3, [pc, #12]	; (801b6d0 <HAL_RCC_OscConfig+0x6c4>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d1f0      	bne.n	801b6b0 <HAL_RCC_OscConfig+0x6a4>
 801b6ce:	e06e      	b.n	801b7ae <HAL_RCC_OscConfig+0x7a2>
 801b6d0:	58024400 	.word	0x58024400
 801b6d4:	fffffc0c 	.word	0xfffffc0c
 801b6d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b6dc:	4b36      	ldr	r3, [pc, #216]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b6e2:	4b35      	ldr	r3, [pc, #212]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6ec:	2b01      	cmp	r3, #1
 801b6ee:	d031      	beq.n	801b754 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b6f0:	693b      	ldr	r3, [r7, #16]
 801b6f2:	f003 0203 	and.w	r2, r3, #3
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d12a      	bne.n	801b754 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	091b      	lsrs	r3, r3, #4
 801b702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b70a:	429a      	cmp	r2, r3
 801b70c:	d122      	bne.n	801b754 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b718:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d11a      	bne.n	801b754 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	0a5b      	lsrs	r3, r3, #9
 801b722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b72a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d111      	bne.n	801b754 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	0c1b      	lsrs	r3, r3, #16
 801b734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b73c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b73e:	429a      	cmp	r2, r3
 801b740:	d108      	bne.n	801b754 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	0e1b      	lsrs	r3, r3, #24
 801b746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b74e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b750:	429a      	cmp	r2, r3
 801b752:	d001      	beq.n	801b758 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801b754:	2301      	movs	r3, #1
 801b756:	e02b      	b.n	801b7b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b758:	4b17      	ldr	r3, [pc, #92]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b75c:	08db      	lsrs	r3, r3, #3
 801b75e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b762:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b768:	693a      	ldr	r2, [r7, #16]
 801b76a:	429a      	cmp	r2, r3
 801b76c:	d01f      	beq.n	801b7ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b76e:	4b12      	ldr	r3, [pc, #72]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b772:	4a11      	ldr	r2, [pc, #68]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b774:	f023 0301 	bic.w	r3, r3, #1
 801b778:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b77a:	f7f9 fe19 	bl	80153b0 <HAL_GetTick>
 801b77e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b780:	bf00      	nop
 801b782:	f7f9 fe15 	bl	80153b0 <HAL_GetTick>
 801b786:	4602      	mov	r2, r0
 801b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b78a:	4293      	cmp	r3, r2
 801b78c:	d0f9      	beq.n	801b782 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b78e:	4b0a      	ldr	r3, [pc, #40]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b792:	4b0a      	ldr	r3, [pc, #40]	; (801b7bc <HAL_RCC_OscConfig+0x7b0>)
 801b794:	4013      	ands	r3, r2
 801b796:	687a      	ldr	r2, [r7, #4]
 801b798:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b79a:	00d2      	lsls	r2, r2, #3
 801b79c:	4906      	ldr	r1, [pc, #24]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b79e:	4313      	orrs	r3, r2
 801b7a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b7a2:	4b05      	ldr	r3, [pc, #20]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7a6:	4a04      	ldr	r2, [pc, #16]	; (801b7b8 <HAL_RCC_OscConfig+0x7ac>)
 801b7a8:	f043 0301 	orr.w	r3, r3, #1
 801b7ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b7ae:	2300      	movs	r3, #0
}
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	3730      	adds	r7, #48	; 0x30
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	58024400 	.word	0x58024400
 801b7bc:	ffff0007 	.word	0xffff0007

0801b7c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b086      	sub	sp, #24
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
 801b7c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d101      	bne.n	801b7d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	e19c      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b7d4:	4b8a      	ldr	r3, [pc, #552]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	f003 030f 	and.w	r3, r3, #15
 801b7dc:	683a      	ldr	r2, [r7, #0]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	d910      	bls.n	801b804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b7e2:	4b87      	ldr	r3, [pc, #540]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	f023 020f 	bic.w	r2, r3, #15
 801b7ea:	4985      	ldr	r1, [pc, #532]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	4313      	orrs	r3, r2
 801b7f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b7f2:	4b83      	ldr	r3, [pc, #524]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	f003 030f 	and.w	r3, r3, #15
 801b7fa:	683a      	ldr	r2, [r7, #0]
 801b7fc:	429a      	cmp	r2, r3
 801b7fe:	d001      	beq.n	801b804 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b800:	2301      	movs	r3, #1
 801b802:	e184      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	f003 0304 	and.w	r3, r3, #4
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d010      	beq.n	801b832 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	691a      	ldr	r2, [r3, #16]
 801b814:	4b7b      	ldr	r3, [pc, #492]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b816:	699b      	ldr	r3, [r3, #24]
 801b818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d908      	bls.n	801b832 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b820:	4b78      	ldr	r3, [pc, #480]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b822:	699b      	ldr	r3, [r3, #24]
 801b824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	691b      	ldr	r3, [r3, #16]
 801b82c:	4975      	ldr	r1, [pc, #468]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b82e:	4313      	orrs	r3, r2
 801b830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	f003 0308 	and.w	r3, r3, #8
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d010      	beq.n	801b860 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	695a      	ldr	r2, [r3, #20]
 801b842:	4b70      	ldr	r3, [pc, #448]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b844:	69db      	ldr	r3, [r3, #28]
 801b846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d908      	bls.n	801b860 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b84e:	4b6d      	ldr	r3, [pc, #436]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b850:	69db      	ldr	r3, [r3, #28]
 801b852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	695b      	ldr	r3, [r3, #20]
 801b85a:	496a      	ldr	r1, [pc, #424]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b85c:	4313      	orrs	r3, r2
 801b85e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	f003 0310 	and.w	r3, r3, #16
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d010      	beq.n	801b88e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	699a      	ldr	r2, [r3, #24]
 801b870:	4b64      	ldr	r3, [pc, #400]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b872:	69db      	ldr	r3, [r3, #28]
 801b874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b878:	429a      	cmp	r2, r3
 801b87a:	d908      	bls.n	801b88e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b87c:	4b61      	ldr	r3, [pc, #388]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b87e:	69db      	ldr	r3, [r3, #28]
 801b880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	699b      	ldr	r3, [r3, #24]
 801b888:	495e      	ldr	r1, [pc, #376]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b88a:	4313      	orrs	r3, r2
 801b88c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f003 0320 	and.w	r3, r3, #32
 801b896:	2b00      	cmp	r3, #0
 801b898:	d010      	beq.n	801b8bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	69da      	ldr	r2, [r3, #28]
 801b89e:	4b59      	ldr	r3, [pc, #356]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8a0:	6a1b      	ldr	r3, [r3, #32]
 801b8a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b8a6:	429a      	cmp	r2, r3
 801b8a8:	d908      	bls.n	801b8bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b8aa:	4b56      	ldr	r3, [pc, #344]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8ac:	6a1b      	ldr	r3, [r3, #32]
 801b8ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	69db      	ldr	r3, [r3, #28]
 801b8b6:	4953      	ldr	r1, [pc, #332]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8b8:	4313      	orrs	r3, r2
 801b8ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	f003 0302 	and.w	r3, r3, #2
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d010      	beq.n	801b8ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	68da      	ldr	r2, [r3, #12]
 801b8cc:	4b4d      	ldr	r3, [pc, #308]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8ce:	699b      	ldr	r3, [r3, #24]
 801b8d0:	f003 030f 	and.w	r3, r3, #15
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	d908      	bls.n	801b8ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b8d8:	4b4a      	ldr	r3, [pc, #296]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8da:	699b      	ldr	r3, [r3, #24]
 801b8dc:	f023 020f 	bic.w	r2, r3, #15
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	68db      	ldr	r3, [r3, #12]
 801b8e4:	4947      	ldr	r1, [pc, #284]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8e6:	4313      	orrs	r3, r2
 801b8e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f003 0301 	and.w	r3, r3, #1
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d055      	beq.n	801b9a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b8f6:	4b43      	ldr	r3, [pc, #268]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b8f8:	699b      	ldr	r3, [r3, #24]
 801b8fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	689b      	ldr	r3, [r3, #8]
 801b902:	4940      	ldr	r1, [pc, #256]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b904:	4313      	orrs	r3, r2
 801b906:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	685b      	ldr	r3, [r3, #4]
 801b90c:	2b02      	cmp	r3, #2
 801b90e:	d107      	bne.n	801b920 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b910:	4b3c      	ldr	r3, [pc, #240]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d121      	bne.n	801b960 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b91c:	2301      	movs	r3, #1
 801b91e:	e0f6      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	2b03      	cmp	r3, #3
 801b926:	d107      	bne.n	801b938 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b928:	4b36      	ldr	r3, [pc, #216]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b930:	2b00      	cmp	r3, #0
 801b932:	d115      	bne.n	801b960 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b934:	2301      	movs	r3, #1
 801b936:	e0ea      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	2b01      	cmp	r3, #1
 801b93e:	d107      	bne.n	801b950 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b940:	4b30      	ldr	r3, [pc, #192]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d109      	bne.n	801b960 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b94c:	2301      	movs	r3, #1
 801b94e:	e0de      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b950:	4b2c      	ldr	r3, [pc, #176]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	f003 0304 	and.w	r3, r3, #4
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d101      	bne.n	801b960 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b95c:	2301      	movs	r3, #1
 801b95e:	e0d6      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b960:	4b28      	ldr	r3, [pc, #160]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b962:	691b      	ldr	r3, [r3, #16]
 801b964:	f023 0207 	bic.w	r2, r3, #7
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	685b      	ldr	r3, [r3, #4]
 801b96c:	4925      	ldr	r1, [pc, #148]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b96e:	4313      	orrs	r3, r2
 801b970:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b972:	f7f9 fd1d 	bl	80153b0 <HAL_GetTick>
 801b976:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b978:	e00a      	b.n	801b990 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b97a:	f7f9 fd19 	bl	80153b0 <HAL_GetTick>
 801b97e:	4602      	mov	r2, r0
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	1ad3      	subs	r3, r2, r3
 801b984:	f241 3288 	movw	r2, #5000	; 0x1388
 801b988:	4293      	cmp	r3, r2
 801b98a:	d901      	bls.n	801b990 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b98c:	2303      	movs	r3, #3
 801b98e:	e0be      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b990:	4b1c      	ldr	r3, [pc, #112]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b992:	691b      	ldr	r3, [r3, #16]
 801b994:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	00db      	lsls	r3, r3, #3
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d1eb      	bne.n	801b97a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	f003 0302 	and.w	r3, r3, #2
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d010      	beq.n	801b9d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	68da      	ldr	r2, [r3, #12]
 801b9b2:	4b14      	ldr	r3, [pc, #80]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b9b4:	699b      	ldr	r3, [r3, #24]
 801b9b6:	f003 030f 	and.w	r3, r3, #15
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d208      	bcs.n	801b9d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b9be:	4b11      	ldr	r3, [pc, #68]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b9c0:	699b      	ldr	r3, [r3, #24]
 801b9c2:	f023 020f 	bic.w	r2, r3, #15
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	68db      	ldr	r3, [r3, #12]
 801b9ca:	490e      	ldr	r1, [pc, #56]	; (801ba04 <HAL_RCC_ClockConfig+0x244>)
 801b9cc:	4313      	orrs	r3, r2
 801b9ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b9d0:	4b0b      	ldr	r3, [pc, #44]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	f003 030f 	and.w	r3, r3, #15
 801b9d8:	683a      	ldr	r2, [r7, #0]
 801b9da:	429a      	cmp	r2, r3
 801b9dc:	d214      	bcs.n	801ba08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b9de:	4b08      	ldr	r3, [pc, #32]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	f023 020f 	bic.w	r2, r3, #15
 801b9e6:	4906      	ldr	r1, [pc, #24]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b9e8:	683b      	ldr	r3, [r7, #0]
 801b9ea:	4313      	orrs	r3, r2
 801b9ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b9ee:	4b04      	ldr	r3, [pc, #16]	; (801ba00 <HAL_RCC_ClockConfig+0x240>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	f003 030f 	and.w	r3, r3, #15
 801b9f6:	683a      	ldr	r2, [r7, #0]
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d005      	beq.n	801ba08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b9fc:	2301      	movs	r3, #1
 801b9fe:	e086      	b.n	801bb0e <HAL_RCC_ClockConfig+0x34e>
 801ba00:	52002000 	.word	0x52002000
 801ba04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	f003 0304 	and.w	r3, r3, #4
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d010      	beq.n	801ba36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	691a      	ldr	r2, [r3, #16]
 801ba18:	4b3f      	ldr	r3, [pc, #252]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba1a:	699b      	ldr	r3, [r3, #24]
 801ba1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ba20:	429a      	cmp	r2, r3
 801ba22:	d208      	bcs.n	801ba36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ba24:	4b3c      	ldr	r3, [pc, #240]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba26:	699b      	ldr	r3, [r3, #24]
 801ba28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	691b      	ldr	r3, [r3, #16]
 801ba30:	4939      	ldr	r1, [pc, #228]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba32:	4313      	orrs	r3, r2
 801ba34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	f003 0308 	and.w	r3, r3, #8
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d010      	beq.n	801ba64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	695a      	ldr	r2, [r3, #20]
 801ba46:	4b34      	ldr	r3, [pc, #208]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba48:	69db      	ldr	r3, [r3, #28]
 801ba4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ba4e:	429a      	cmp	r2, r3
 801ba50:	d208      	bcs.n	801ba64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ba52:	4b31      	ldr	r3, [pc, #196]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba54:	69db      	ldr	r3, [r3, #28]
 801ba56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	695b      	ldr	r3, [r3, #20]
 801ba5e:	492e      	ldr	r1, [pc, #184]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba60:	4313      	orrs	r3, r2
 801ba62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	f003 0310 	and.w	r3, r3, #16
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d010      	beq.n	801ba92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	699a      	ldr	r2, [r3, #24]
 801ba74:	4b28      	ldr	r3, [pc, #160]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba76:	69db      	ldr	r3, [r3, #28]
 801ba78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ba7c:	429a      	cmp	r2, r3
 801ba7e:	d208      	bcs.n	801ba92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ba80:	4b25      	ldr	r3, [pc, #148]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba82:	69db      	ldr	r3, [r3, #28]
 801ba84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	699b      	ldr	r3, [r3, #24]
 801ba8c:	4922      	ldr	r1, [pc, #136]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801ba8e:	4313      	orrs	r3, r2
 801ba90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	f003 0320 	and.w	r3, r3, #32
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d010      	beq.n	801bac0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	69da      	ldr	r2, [r3, #28]
 801baa2:	4b1d      	ldr	r3, [pc, #116]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801baa4:	6a1b      	ldr	r3, [r3, #32]
 801baa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801baaa:	429a      	cmp	r2, r3
 801baac:	d208      	bcs.n	801bac0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801baae:	4b1a      	ldr	r3, [pc, #104]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801bab0:	6a1b      	ldr	r3, [r3, #32]
 801bab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	69db      	ldr	r3, [r3, #28]
 801baba:	4917      	ldr	r1, [pc, #92]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801babc:	4313      	orrs	r3, r2
 801babe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801bac0:	f000 f834 	bl	801bb2c <HAL_RCC_GetSysClockFreq>
 801bac4:	4602      	mov	r2, r0
 801bac6:	4b14      	ldr	r3, [pc, #80]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801bac8:	699b      	ldr	r3, [r3, #24]
 801baca:	0a1b      	lsrs	r3, r3, #8
 801bacc:	f003 030f 	and.w	r3, r3, #15
 801bad0:	4912      	ldr	r1, [pc, #72]	; (801bb1c <HAL_RCC_ClockConfig+0x35c>)
 801bad2:	5ccb      	ldrb	r3, [r1, r3]
 801bad4:	f003 031f 	and.w	r3, r3, #31
 801bad8:	fa22 f303 	lsr.w	r3, r2, r3
 801badc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bade:	4b0e      	ldr	r3, [pc, #56]	; (801bb18 <HAL_RCC_ClockConfig+0x358>)
 801bae0:	699b      	ldr	r3, [r3, #24]
 801bae2:	f003 030f 	and.w	r3, r3, #15
 801bae6:	4a0d      	ldr	r2, [pc, #52]	; (801bb1c <HAL_RCC_ClockConfig+0x35c>)
 801bae8:	5cd3      	ldrb	r3, [r2, r3]
 801baea:	f003 031f 	and.w	r3, r3, #31
 801baee:	693a      	ldr	r2, [r7, #16]
 801baf0:	fa22 f303 	lsr.w	r3, r2, r3
 801baf4:	4a0a      	ldr	r2, [pc, #40]	; (801bb20 <HAL_RCC_ClockConfig+0x360>)
 801baf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801baf8:	4a0a      	ldr	r2, [pc, #40]	; (801bb24 <HAL_RCC_ClockConfig+0x364>)
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801bafe:	4b0a      	ldr	r3, [pc, #40]	; (801bb28 <HAL_RCC_ClockConfig+0x368>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	4618      	mov	r0, r3
 801bb04:	f7f9 fc0a 	bl	801531c <HAL_InitTick>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3718      	adds	r7, #24
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	58024400 	.word	0x58024400
 801bb1c:	08020dac 	.word	0x08020dac
 801bb20:	24000008 	.word	0x24000008
 801bb24:	24000004 	.word	0x24000004
 801bb28:	2400000c 	.word	0x2400000c

0801bb2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bb2c:	b480      	push	{r7}
 801bb2e:	b089      	sub	sp, #36	; 0x24
 801bb30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bb32:	4bb3      	ldr	r3, [pc, #716]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb34:	691b      	ldr	r3, [r3, #16]
 801bb36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bb3a:	2b18      	cmp	r3, #24
 801bb3c:	f200 8155 	bhi.w	801bdea <HAL_RCC_GetSysClockFreq+0x2be>
 801bb40:	a201      	add	r2, pc, #4	; (adr r2, 801bb48 <HAL_RCC_GetSysClockFreq+0x1c>)
 801bb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb46:	bf00      	nop
 801bb48:	0801bbad 	.word	0x0801bbad
 801bb4c:	0801bdeb 	.word	0x0801bdeb
 801bb50:	0801bdeb 	.word	0x0801bdeb
 801bb54:	0801bdeb 	.word	0x0801bdeb
 801bb58:	0801bdeb 	.word	0x0801bdeb
 801bb5c:	0801bdeb 	.word	0x0801bdeb
 801bb60:	0801bdeb 	.word	0x0801bdeb
 801bb64:	0801bdeb 	.word	0x0801bdeb
 801bb68:	0801bbd3 	.word	0x0801bbd3
 801bb6c:	0801bdeb 	.word	0x0801bdeb
 801bb70:	0801bdeb 	.word	0x0801bdeb
 801bb74:	0801bdeb 	.word	0x0801bdeb
 801bb78:	0801bdeb 	.word	0x0801bdeb
 801bb7c:	0801bdeb 	.word	0x0801bdeb
 801bb80:	0801bdeb 	.word	0x0801bdeb
 801bb84:	0801bdeb 	.word	0x0801bdeb
 801bb88:	0801bbd9 	.word	0x0801bbd9
 801bb8c:	0801bdeb 	.word	0x0801bdeb
 801bb90:	0801bdeb 	.word	0x0801bdeb
 801bb94:	0801bdeb 	.word	0x0801bdeb
 801bb98:	0801bdeb 	.word	0x0801bdeb
 801bb9c:	0801bdeb 	.word	0x0801bdeb
 801bba0:	0801bdeb 	.word	0x0801bdeb
 801bba4:	0801bdeb 	.word	0x0801bdeb
 801bba8:	0801bbdf 	.word	0x0801bbdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bbac:	4b94      	ldr	r3, [pc, #592]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	f003 0320 	and.w	r3, r3, #32
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d009      	beq.n	801bbcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bbb8:	4b91      	ldr	r3, [pc, #580]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	08db      	lsrs	r3, r3, #3
 801bbbe:	f003 0303 	and.w	r3, r3, #3
 801bbc2:	4a90      	ldr	r2, [pc, #576]	; (801be04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bbc4:	fa22 f303 	lsr.w	r3, r2, r3
 801bbc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801bbca:	e111      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801bbcc:	4b8d      	ldr	r3, [pc, #564]	; (801be04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bbce:	61bb      	str	r3, [r7, #24]
      break;
 801bbd0:	e10e      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801bbd2:	4b8d      	ldr	r3, [pc, #564]	; (801be08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bbd4:	61bb      	str	r3, [r7, #24]
      break;
 801bbd6:	e10b      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801bbd8:	4b8c      	ldr	r3, [pc, #560]	; (801be0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 801bbda:	61bb      	str	r3, [r7, #24]
      break;
 801bbdc:	e108      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bbde:	4b88      	ldr	r3, [pc, #544]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbe2:	f003 0303 	and.w	r3, r3, #3
 801bbe6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bbe8:	4b85      	ldr	r3, [pc, #532]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbec:	091b      	lsrs	r3, r3, #4
 801bbee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bbf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bbf4:	4b82      	ldr	r3, [pc, #520]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbf8:	f003 0301 	and.w	r3, r3, #1
 801bbfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bbfe:	4b80      	ldr	r3, [pc, #512]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc02:	08db      	lsrs	r3, r3, #3
 801bc04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc08:	68fa      	ldr	r2, [r7, #12]
 801bc0a:	fb02 f303 	mul.w	r3, r2, r3
 801bc0e:	ee07 3a90 	vmov	s15, r3
 801bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801bc1a:	693b      	ldr	r3, [r7, #16]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	f000 80e1 	beq.w	801bde4 <HAL_RCC_GetSysClockFreq+0x2b8>
 801bc22:	697b      	ldr	r3, [r7, #20]
 801bc24:	2b02      	cmp	r3, #2
 801bc26:	f000 8083 	beq.w	801bd30 <HAL_RCC_GetSysClockFreq+0x204>
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	2b02      	cmp	r3, #2
 801bc2e:	f200 80a1 	bhi.w	801bd74 <HAL_RCC_GetSysClockFreq+0x248>
 801bc32:	697b      	ldr	r3, [r7, #20]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d003      	beq.n	801bc40 <HAL_RCC_GetSysClockFreq+0x114>
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	2b01      	cmp	r3, #1
 801bc3c:	d056      	beq.n	801bcec <HAL_RCC_GetSysClockFreq+0x1c0>
 801bc3e:	e099      	b.n	801bd74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bc40:	4b6f      	ldr	r3, [pc, #444]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	f003 0320 	and.w	r3, r3, #32
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d02d      	beq.n	801bca8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bc4c:	4b6c      	ldr	r3, [pc, #432]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	08db      	lsrs	r3, r3, #3
 801bc52:	f003 0303 	and.w	r3, r3, #3
 801bc56:	4a6b      	ldr	r2, [pc, #428]	; (801be04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bc58:	fa22 f303 	lsr.w	r3, r2, r3
 801bc5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	ee07 3a90 	vmov	s15, r3
 801bc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc68:	693b      	ldr	r3, [r7, #16]
 801bc6a:	ee07 3a90 	vmov	s15, r3
 801bc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc76:	4b62      	ldr	r3, [pc, #392]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc7e:	ee07 3a90 	vmov	s15, r3
 801bc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc86:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 801be10 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bca2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801bca6:	e087      	b.n	801bdb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	ee07 3a90 	vmov	s15, r3
 801bcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bcb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 801be14 <HAL_RCC_GetSysClockFreq+0x2e8>
 801bcb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bcba:	4b51      	ldr	r3, [pc, #324]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bcc2:	ee07 3a90 	vmov	s15, r3
 801bcc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bcca:	ed97 6a02 	vldr	s12, [r7, #8]
 801bcce:	eddf 5a50 	vldr	s11, [pc, #320]	; 801be10 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bcd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bcd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bcda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bce6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bcea:	e065      	b.n	801bdb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bcec:	693b      	ldr	r3, [r7, #16]
 801bcee:	ee07 3a90 	vmov	s15, r3
 801bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bcf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 801be18 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bcfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bcfe:	4b40      	ldr	r3, [pc, #256]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd06:	ee07 3a90 	vmov	s15, r3
 801bd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd0e:	ed97 6a02 	vldr	s12, [r7, #8]
 801bd12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801be10 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bd2e:	e043      	b.n	801bdb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bd30:	693b      	ldr	r3, [r7, #16]
 801bd32:	ee07 3a90 	vmov	s15, r3
 801bd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bd3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801be1c <HAL_RCC_GetSysClockFreq+0x2f0>
 801bd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bd42:	4b2f      	ldr	r3, [pc, #188]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd4a:	ee07 3a90 	vmov	s15, r3
 801bd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd52:	ed97 6a02 	vldr	s12, [r7, #8]
 801bd56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801be10 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bd72:	e021      	b.n	801bdb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	ee07 3a90 	vmov	s15, r3
 801bd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bd7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 801be18 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bd86:	4b1e      	ldr	r3, [pc, #120]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd8e:	ee07 3a90 	vmov	s15, r3
 801bd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd96:	ed97 6a02 	vldr	s12, [r7, #8]
 801bd9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801be10 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bdb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bdb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bdb8:	4b11      	ldr	r3, [pc, #68]	; (801be00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdbc:	0a5b      	lsrs	r3, r3, #9
 801bdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bdc2:	3301      	adds	r3, #1
 801bdc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bdc6:	683b      	ldr	r3, [r7, #0]
 801bdc8:	ee07 3a90 	vmov	s15, r3
 801bdcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bdd0:	edd7 6a07 	vldr	s13, [r7, #28]
 801bdd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bdd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bddc:	ee17 3a90 	vmov	r3, s15
 801bde0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bde2:	e005      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bde4:	2300      	movs	r3, #0
 801bde6:	61bb      	str	r3, [r7, #24]
      break;
 801bde8:	e002      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bdea:	4b07      	ldr	r3, [pc, #28]	; (801be08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bdec:	61bb      	str	r3, [r7, #24]
      break;
 801bdee:	bf00      	nop
  }

  return sysclockfreq;
 801bdf0:	69bb      	ldr	r3, [r7, #24]
}
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	3724      	adds	r7, #36	; 0x24
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	bf00      	nop
 801be00:	58024400 	.word	0x58024400
 801be04:	03d09000 	.word	0x03d09000
 801be08:	003d0900 	.word	0x003d0900
 801be0c:	007a1200 	.word	0x007a1200
 801be10:	46000000 	.word	0x46000000
 801be14:	4c742400 	.word	0x4c742400
 801be18:	4a742400 	.word	0x4a742400
 801be1c:	4af42400 	.word	0x4af42400

0801be20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801be20:	b580      	push	{r7, lr}
 801be22:	b082      	sub	sp, #8
 801be24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801be26:	f7ff fe81 	bl	801bb2c <HAL_RCC_GetSysClockFreq>
 801be2a:	4602      	mov	r2, r0
 801be2c:	4b10      	ldr	r3, [pc, #64]	; (801be70 <HAL_RCC_GetHCLKFreq+0x50>)
 801be2e:	699b      	ldr	r3, [r3, #24]
 801be30:	0a1b      	lsrs	r3, r3, #8
 801be32:	f003 030f 	and.w	r3, r3, #15
 801be36:	490f      	ldr	r1, [pc, #60]	; (801be74 <HAL_RCC_GetHCLKFreq+0x54>)
 801be38:	5ccb      	ldrb	r3, [r1, r3]
 801be3a:	f003 031f 	and.w	r3, r3, #31
 801be3e:	fa22 f303 	lsr.w	r3, r2, r3
 801be42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801be44:	4b0a      	ldr	r3, [pc, #40]	; (801be70 <HAL_RCC_GetHCLKFreq+0x50>)
 801be46:	699b      	ldr	r3, [r3, #24]
 801be48:	f003 030f 	and.w	r3, r3, #15
 801be4c:	4a09      	ldr	r2, [pc, #36]	; (801be74 <HAL_RCC_GetHCLKFreq+0x54>)
 801be4e:	5cd3      	ldrb	r3, [r2, r3]
 801be50:	f003 031f 	and.w	r3, r3, #31
 801be54:	687a      	ldr	r2, [r7, #4]
 801be56:	fa22 f303 	lsr.w	r3, r2, r3
 801be5a:	4a07      	ldr	r2, [pc, #28]	; (801be78 <HAL_RCC_GetHCLKFreq+0x58>)
 801be5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801be5e:	4a07      	ldr	r2, [pc, #28]	; (801be7c <HAL_RCC_GetHCLKFreq+0x5c>)
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801be64:	4b04      	ldr	r3, [pc, #16]	; (801be78 <HAL_RCC_GetHCLKFreq+0x58>)
 801be66:	681b      	ldr	r3, [r3, #0]
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3708      	adds	r7, #8
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd80      	pop	{r7, pc}
 801be70:	58024400 	.word	0x58024400
 801be74:	08020dac 	.word	0x08020dac
 801be78:	24000008 	.word	0x24000008
 801be7c:	24000004 	.word	0x24000004

0801be80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801be80:	b580      	push	{r7, lr}
 801be82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801be84:	f7ff ffcc 	bl	801be20 <HAL_RCC_GetHCLKFreq>
 801be88:	4602      	mov	r2, r0
 801be8a:	4b06      	ldr	r3, [pc, #24]	; (801bea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801be8c:	69db      	ldr	r3, [r3, #28]
 801be8e:	091b      	lsrs	r3, r3, #4
 801be90:	f003 0307 	and.w	r3, r3, #7
 801be94:	4904      	ldr	r1, [pc, #16]	; (801bea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 801be96:	5ccb      	ldrb	r3, [r1, r3]
 801be98:	f003 031f 	and.w	r3, r3, #31
 801be9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bea0:	4618      	mov	r0, r3
 801bea2:	bd80      	pop	{r7, pc}
 801bea4:	58024400 	.word	0x58024400
 801bea8:	08020dac 	.word	0x08020dac

0801beac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801beac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801beb0:	b0c6      	sub	sp, #280	; 0x118
 801beb2:	af00      	add	r7, sp, #0
 801beb4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801beb8:	2300      	movs	r3, #0
 801beba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bebe:	2300      	movs	r3, #0
 801bec0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801becc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801bed0:	2500      	movs	r5, #0
 801bed2:	ea54 0305 	orrs.w	r3, r4, r5
 801bed6:	d049      	beq.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bee2:	d02f      	beq.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801bee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bee8:	d828      	bhi.n	801bf3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801beea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801beee:	d01a      	beq.n	801bf26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801bef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bef4:	d822      	bhi.n	801bf3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d003      	beq.n	801bf02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801befa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801befe:	d007      	beq.n	801bf10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801bf00:	e01c      	b.n	801bf3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf02:	4bab      	ldr	r3, [pc, #684]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf06:	4aaa      	ldr	r2, [pc, #680]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bf0e:	e01a      	b.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf14:	3308      	adds	r3, #8
 801bf16:	2102      	movs	r1, #2
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f002 fa49 	bl	801e3b0 <RCCEx_PLL2_Config>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bf24:	e00f      	b.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf2a:	3328      	adds	r3, #40	; 0x28
 801bf2c:	2102      	movs	r1, #2
 801bf2e:	4618      	mov	r0, r3
 801bf30:	f002 faf0 	bl	801e514 <RCCEx_PLL3_Config>
 801bf34:	4603      	mov	r3, r0
 801bf36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bf3a:	e004      	b.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bf3c:	2301      	movs	r3, #1
 801bf3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bf42:	e000      	b.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801bf44:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d10a      	bne.n	801bf64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801bf4e:	4b98      	ldr	r3, [pc, #608]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801bf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bf5c:	4a94      	ldr	r2, [pc, #592]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf5e:	430b      	orrs	r3, r1
 801bf60:	6513      	str	r3, [r2, #80]	; 0x50
 801bf62:	e003      	b.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801bf78:	f04f 0900 	mov.w	r9, #0
 801bf7c:	ea58 0309 	orrs.w	r3, r8, r9
 801bf80:	d047      	beq.n	801c012 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801bf82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf88:	2b04      	cmp	r3, #4
 801bf8a:	d82a      	bhi.n	801bfe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801bf8c:	a201      	add	r2, pc, #4	; (adr r2, 801bf94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf92:	bf00      	nop
 801bf94:	0801bfa9 	.word	0x0801bfa9
 801bf98:	0801bfb7 	.word	0x0801bfb7
 801bf9c:	0801bfcd 	.word	0x0801bfcd
 801bfa0:	0801bfeb 	.word	0x0801bfeb
 801bfa4:	0801bfeb 	.word	0x0801bfeb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bfa8:	4b81      	ldr	r3, [pc, #516]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfac:	4a80      	ldr	r2, [pc, #512]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bfb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfb4:	e01a      	b.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfba:	3308      	adds	r3, #8
 801bfbc:	2100      	movs	r1, #0
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f002 f9f6 	bl	801e3b0 <RCCEx_PLL2_Config>
 801bfc4:	4603      	mov	r3, r0
 801bfc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfca:	e00f      	b.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfd0:	3328      	adds	r3, #40	; 0x28
 801bfd2:	2100      	movs	r1, #0
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	f002 fa9d 	bl	801e514 <RCCEx_PLL3_Config>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfe0:	e004      	b.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bfe2:	2301      	movs	r3, #1
 801bfe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bfe8:	e000      	b.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801bfea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bfec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d10a      	bne.n	801c00a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bff4:	4b6e      	ldr	r3, [pc, #440]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bff8:	f023 0107 	bic.w	r1, r3, #7
 801bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c002:	4a6b      	ldr	r2, [pc, #428]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c004:	430b      	orrs	r3, r1
 801c006:	6513      	str	r3, [r2, #80]	; 0x50
 801c008:	e003      	b.n	801c012 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c00a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c00e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c01a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801c01e:	f04f 0b00 	mov.w	fp, #0
 801c022:	ea5a 030b 	orrs.w	r3, sl, fp
 801c026:	d05b      	beq.n	801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801c028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c02c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c030:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801c034:	d03b      	beq.n	801c0ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 801c036:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801c03a:	d834      	bhi.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c03c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c040:	d037      	beq.n	801c0b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801c042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c046:	d82e      	bhi.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c048:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c04c:	d033      	beq.n	801c0b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801c04e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c052:	d828      	bhi.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c058:	d01a      	beq.n	801c090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801c05a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c05e:	d822      	bhi.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c060:	2b00      	cmp	r3, #0
 801c062:	d003      	beq.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801c064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c068:	d007      	beq.n	801c07a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801c06a:	e01c      	b.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c06c:	4b50      	ldr	r3, [pc, #320]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c070:	4a4f      	ldr	r2, [pc, #316]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c078:	e01e      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c07e:	3308      	adds	r3, #8
 801c080:	2100      	movs	r1, #0
 801c082:	4618      	mov	r0, r3
 801c084:	f002 f994 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c088:	4603      	mov	r3, r0
 801c08a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c08e:	e013      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c094:	3328      	adds	r3, #40	; 0x28
 801c096:	2100      	movs	r1, #0
 801c098:	4618      	mov	r0, r3
 801c09a:	f002 fa3b 	bl	801e514 <RCCEx_PLL3_Config>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c0a4:	e008      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c0ac:	e004      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c0ae:	bf00      	nop
 801c0b0:	e002      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c0b2:	bf00      	nop
 801c0b4:	e000      	b.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d10b      	bne.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c0c0:	4b3b      	ldr	r3, [pc, #236]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0c4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801c0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c0d0:	4a37      	ldr	r2, [pc, #220]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0d2:	430b      	orrs	r3, r1
 801c0d4:	6593      	str	r3, [r2, #88]	; 0x58
 801c0d6:	e003      	b.n	801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801c0ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801c0f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801c0fa:	460b      	mov	r3, r1
 801c0fc:	4313      	orrs	r3, r2
 801c0fe:	d05d      	beq.n	801c1bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c108:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c10c:	d03b      	beq.n	801c186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801c10e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c112:	d834      	bhi.n	801c17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c118:	d037      	beq.n	801c18a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801c11a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c11e:	d82e      	bhi.n	801c17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c120:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c124:	d033      	beq.n	801c18e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801c126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c12a:	d828      	bhi.n	801c17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c12c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c130:	d01a      	beq.n	801c168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801c132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c136:	d822      	bhi.n	801c17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d003      	beq.n	801c144 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c13c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c140:	d007      	beq.n	801c152 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801c142:	e01c      	b.n	801c17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c144:	4b1a      	ldr	r3, [pc, #104]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c148:	4a19      	ldr	r2, [pc, #100]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c14e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c150:	e01e      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c156:	3308      	adds	r3, #8
 801c158:	2100      	movs	r1, #0
 801c15a:	4618      	mov	r0, r3
 801c15c:	f002 f928 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c160:	4603      	mov	r3, r0
 801c162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c166:	e013      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c16c:	3328      	adds	r3, #40	; 0x28
 801c16e:	2100      	movs	r1, #0
 801c170:	4618      	mov	r0, r3
 801c172:	f002 f9cf 	bl	801e514 <RCCEx_PLL3_Config>
 801c176:	4603      	mov	r3, r0
 801c178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c17c:	e008      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c17e:	2301      	movs	r3, #1
 801c180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c184:	e004      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c186:	bf00      	nop
 801c188:	e002      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c18a:	bf00      	nop
 801c18c:	e000      	b.n	801c190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c190:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c194:	2b00      	cmp	r3, #0
 801c196:	d10d      	bne.n	801c1b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c198:	4b05      	ldr	r3, [pc, #20]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c19c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801c1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c1a8:	4a01      	ldr	r2, [pc, #4]	; (801c1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c1aa:	430b      	orrs	r3, r1
 801c1ac:	6593      	str	r3, [r2, #88]	; 0x58
 801c1ae:	e005      	b.n	801c1bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 801c1b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c1b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c1b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1c4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801c1c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c1d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801c1d6:	460b      	mov	r3, r1
 801c1d8:	4313      	orrs	r3, r2
 801c1da:	d03a      	beq.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801c1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c1e2:	2b30      	cmp	r3, #48	; 0x30
 801c1e4:	d01f      	beq.n	801c226 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801c1e6:	2b30      	cmp	r3, #48	; 0x30
 801c1e8:	d819      	bhi.n	801c21e <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c1ea:	2b20      	cmp	r3, #32
 801c1ec:	d00c      	beq.n	801c208 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801c1ee:	2b20      	cmp	r3, #32
 801c1f0:	d815      	bhi.n	801c21e <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d019      	beq.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c1f6:	2b10      	cmp	r3, #16
 801c1f8:	d111      	bne.n	801c21e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1fa:	4baa      	ldr	r3, [pc, #680]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1fe:	4aa9      	ldr	r2, [pc, #676]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c206:	e011      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c20c:	3308      	adds	r3, #8
 801c20e:	2102      	movs	r1, #2
 801c210:	4618      	mov	r0, r3
 801c212:	f002 f8cd 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c216:	4603      	mov	r3, r0
 801c218:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c21c:	e006      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c21e:	2301      	movs	r3, #1
 801c220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c224:	e002      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c226:	bf00      	nop
 801c228:	e000      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c22a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c22c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c230:	2b00      	cmp	r3, #0
 801c232:	d10a      	bne.n	801c24a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c234:	4b9b      	ldr	r3, [pc, #620]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c238:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c242:	4a98      	ldr	r2, [pc, #608]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c244:	430b      	orrs	r3, r1
 801c246:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c248:	e003      	b.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c24a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c24e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c25e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c262:	2300      	movs	r3, #0
 801c264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c268:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c26c:	460b      	mov	r3, r1
 801c26e:	4313      	orrs	r3, r2
 801c270:	d051      	beq.n	801c316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c27c:	d035      	beq.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c27e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c282:	d82e      	bhi.n	801c2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c284:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c288:	d031      	beq.n	801c2ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c28a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c28e:	d828      	bhi.n	801c2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c294:	d01a      	beq.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c29a:	d822      	bhi.n	801c2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d003      	beq.n	801c2a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c2a4:	d007      	beq.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c2a6:	e01c      	b.n	801c2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c2a8:	4b7e      	ldr	r3, [pc, #504]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2ac:	4a7d      	ldr	r2, [pc, #500]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c2b4:	e01c      	b.n	801c2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2ba:	3308      	adds	r3, #8
 801c2bc:	2100      	movs	r1, #0
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f002 f876 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c2ca:	e011      	b.n	801c2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2d0:	3328      	adds	r3, #40	; 0x28
 801c2d2:	2100      	movs	r1, #0
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	f002 f91d 	bl	801e514 <RCCEx_PLL3_Config>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c2e0:	e006      	b.n	801c2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c2e8:	e002      	b.n	801c2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c2ea:	bf00      	nop
 801c2ec:	e000      	b.n	801c2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d10a      	bne.n	801c30e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c2f8:	4b6a      	ldr	r3, [pc, #424]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c306:	4a67      	ldr	r2, [pc, #412]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c308:	430b      	orrs	r3, r1
 801c30a:	6513      	str	r3, [r2, #80]	; 0x50
 801c30c:	e003      	b.n	801c316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c30e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c312:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c31e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c322:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c326:	2300      	movs	r3, #0
 801c328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c32c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c330:	460b      	mov	r3, r1
 801c332:	4313      	orrs	r3, r2
 801c334:	d053      	beq.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c33a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c33c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c340:	d033      	beq.n	801c3aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c346:	d82c      	bhi.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c34c:	d02f      	beq.n	801c3ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c34e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c352:	d826      	bhi.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c358:	d02b      	beq.n	801c3b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c35a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c35e:	d820      	bhi.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c364:	d012      	beq.n	801c38c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c36a:	d81a      	bhi.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d022      	beq.n	801c3b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c374:	d115      	bne.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c37a:	3308      	adds	r3, #8
 801c37c:	2101      	movs	r1, #1
 801c37e:	4618      	mov	r0, r3
 801c380:	f002 f816 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c384:	4603      	mov	r3, r0
 801c386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c38a:	e015      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c390:	3328      	adds	r3, #40	; 0x28
 801c392:	2101      	movs	r1, #1
 801c394:	4618      	mov	r0, r3
 801c396:	f002 f8bd 	bl	801e514 <RCCEx_PLL3_Config>
 801c39a:	4603      	mov	r3, r0
 801c39c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c3a0:	e00a      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c3a2:	2301      	movs	r3, #1
 801c3a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c3a8:	e006      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c3aa:	bf00      	nop
 801c3ac:	e004      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c3ae:	bf00      	nop
 801c3b0:	e002      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c3b2:	bf00      	nop
 801c3b4:	e000      	b.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c3b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d10a      	bne.n	801c3d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c3c0:	4b38      	ldr	r3, [pc, #224]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c3ce:	4a35      	ldr	r2, [pc, #212]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3d0:	430b      	orrs	r3, r1
 801c3d2:	6513      	str	r3, [r2, #80]	; 0x50
 801c3d4:	e003      	b.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c3f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	4313      	orrs	r3, r2
 801c3fc:	d058      	beq.n	801c4b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c40a:	d033      	beq.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c40c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c410:	d82c      	bhi.n	801c46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c416:	d02f      	beq.n	801c478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c41c:	d826      	bhi.n	801c46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c41e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c422:	d02b      	beq.n	801c47c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c428:	d820      	bhi.n	801c46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c42a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c42e:	d012      	beq.n	801c456 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c434:	d81a      	bhi.n	801c46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c436:	2b00      	cmp	r3, #0
 801c438:	d022      	beq.n	801c480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c43a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c43e:	d115      	bne.n	801c46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c444:	3308      	adds	r3, #8
 801c446:	2101      	movs	r1, #1
 801c448:	4618      	mov	r0, r3
 801c44a:	f001 ffb1 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c44e:	4603      	mov	r3, r0
 801c450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c454:	e015      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c45a:	3328      	adds	r3, #40	; 0x28
 801c45c:	2101      	movs	r1, #1
 801c45e:	4618      	mov	r0, r3
 801c460:	f002 f858 	bl	801e514 <RCCEx_PLL3_Config>
 801c464:	4603      	mov	r3, r0
 801c466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c46a:	e00a      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c46c:	2301      	movs	r3, #1
 801c46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c472:	e006      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c474:	bf00      	nop
 801c476:	e004      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c478:	bf00      	nop
 801c47a:	e002      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c47c:	bf00      	nop
 801c47e:	e000      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c480:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c486:	2b00      	cmp	r3, #0
 801c488:	d10e      	bne.n	801c4a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c48a:	4b06      	ldr	r3, [pc, #24]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c48e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c49a:	4a02      	ldr	r2, [pc, #8]	; (801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c49c:	430b      	orrs	r3, r1
 801c49e:	6593      	str	r3, [r2, #88]	; 0x58
 801c4a0:	e006      	b.n	801c4b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c4a2:	bf00      	nop
 801c4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c4c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c4ca:	460b      	mov	r3, r1
 801c4cc:	4313      	orrs	r3, r2
 801c4ce:	d037      	beq.n	801c540 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c4da:	d00e      	beq.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c4e0:	d816      	bhi.n	801c510 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d018      	beq.n	801c518 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c4ea:	d111      	bne.n	801c510 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c4ec:	4bc4      	ldr	r3, [pc, #784]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4f0:	4ac3      	ldr	r2, [pc, #780]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c4f8:	e00f      	b.n	801c51a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4fe:	3308      	adds	r3, #8
 801c500:	2101      	movs	r1, #1
 801c502:	4618      	mov	r0, r3
 801c504:	f001 ff54 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c508:	4603      	mov	r3, r0
 801c50a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c50e:	e004      	b.n	801c51a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c510:	2301      	movs	r3, #1
 801c512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c516:	e000      	b.n	801c51a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801c518:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c51a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d10a      	bne.n	801c538 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c522:	4bb7      	ldr	r3, [pc, #732]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c526:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801c52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c530:	4ab3      	ldr	r2, [pc, #716]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c532:	430b      	orrs	r3, r1
 801c534:	6513      	str	r3, [r2, #80]	; 0x50
 801c536:	e003      	b.n	801c540 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c538:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c53c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c548:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801c54c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c550:	2300      	movs	r3, #0
 801c552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c556:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c55a:	460b      	mov	r3, r1
 801c55c:	4313      	orrs	r3, r2
 801c55e:	d039      	beq.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c566:	2b03      	cmp	r3, #3
 801c568:	d81c      	bhi.n	801c5a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801c56a:	a201      	add	r2, pc, #4	; (adr r2, 801c570 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c570:	0801c5ad 	.word	0x0801c5ad
 801c574:	0801c581 	.word	0x0801c581
 801c578:	0801c58f 	.word	0x0801c58f
 801c57c:	0801c5ad 	.word	0x0801c5ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c580:	4b9f      	ldr	r3, [pc, #636]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c584:	4a9e      	ldr	r2, [pc, #632]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c58c:	e00f      	b.n	801c5ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c592:	3308      	adds	r3, #8
 801c594:	2102      	movs	r1, #2
 801c596:	4618      	mov	r0, r3
 801c598:	f001 ff0a 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c59c:	4603      	mov	r3, r0
 801c59e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c5a2:	e004      	b.n	801c5ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c5a4:	2301      	movs	r3, #1
 801c5a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c5aa:	e000      	b.n	801c5ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801c5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c5ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d10a      	bne.n	801c5cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c5b6:	4b92      	ldr	r3, [pc, #584]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5ba:	f023 0103 	bic.w	r1, r3, #3
 801c5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5c4:	4a8e      	ldr	r2, [pc, #568]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5c6:	430b      	orrs	r3, r1
 801c5c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c5ca:	e003      	b.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c5e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c5ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c5ee:	460b      	mov	r3, r1
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	f000 8099 	beq.w	801c728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c5f6:	4b83      	ldr	r3, [pc, #524]	; (801c804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4a82      	ldr	r2, [pc, #520]	; (801c804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c5fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c600:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c602:	f7f8 fed5 	bl	80153b0 <HAL_GetTick>
 801c606:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c60a:	e00b      	b.n	801c624 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c60c:	f7f8 fed0 	bl	80153b0 <HAL_GetTick>
 801c610:	4602      	mov	r2, r0
 801c612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c616:	1ad3      	subs	r3, r2, r3
 801c618:	2b64      	cmp	r3, #100	; 0x64
 801c61a:	d903      	bls.n	801c624 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801c61c:	2303      	movs	r3, #3
 801c61e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c622:	e005      	b.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c624:	4b77      	ldr	r3, [pc, #476]	; (801c804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d0ed      	beq.n	801c60c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801c630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c634:	2b00      	cmp	r3, #0
 801c636:	d173      	bne.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c638:	4b71      	ldr	r3, [pc, #452]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c63a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c644:	4053      	eors	r3, r2
 801c646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d015      	beq.n	801c67a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c64e:	4b6c      	ldr	r3, [pc, #432]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c656:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c65a:	4b69      	ldr	r3, [pc, #420]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c65e:	4a68      	ldr	r2, [pc, #416]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c664:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c666:	4b66      	ldr	r3, [pc, #408]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c66a:	4a65      	ldr	r2, [pc, #404]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c66c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c670:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c672:	4a63      	ldr	r2, [pc, #396]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c678:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c67e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c686:	d118      	bne.n	801c6ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c688:	f7f8 fe92 	bl	80153b0 <HAL_GetTick>
 801c68c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c690:	e00d      	b.n	801c6ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c692:	f7f8 fe8d 	bl	80153b0 <HAL_GetTick>
 801c696:	4602      	mov	r2, r0
 801c698:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c69c:	1ad2      	subs	r2, r2, r3
 801c69e:	f241 3388 	movw	r3, #5000	; 0x1388
 801c6a2:	429a      	cmp	r2, r3
 801c6a4:	d903      	bls.n	801c6ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801c6a6:	2303      	movs	r3, #3
 801c6a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801c6ac:	e005      	b.n	801c6ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c6ae:	4b54      	ldr	r3, [pc, #336]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6b2:	f003 0302 	and.w	r3, r3, #2
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d0eb      	beq.n	801c692 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801c6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d129      	bne.n	801c716 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c6ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c6d2:	d10e      	bne.n	801c6f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801c6d4:	4b4a      	ldr	r3, [pc, #296]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c6d6:	691b      	ldr	r3, [r3, #16]
 801c6d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c6e4:	091a      	lsrs	r2, r3, #4
 801c6e6:	4b48      	ldr	r3, [pc, #288]	; (801c808 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801c6e8:	4013      	ands	r3, r2
 801c6ea:	4a45      	ldr	r2, [pc, #276]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c6ec:	430b      	orrs	r3, r1
 801c6ee:	6113      	str	r3, [r2, #16]
 801c6f0:	e005      	b.n	801c6fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 801c6f2:	4b43      	ldr	r3, [pc, #268]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c6f4:	691b      	ldr	r3, [r3, #16]
 801c6f6:	4a42      	ldr	r2, [pc, #264]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c6f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c6fc:	6113      	str	r3, [r2, #16]
 801c6fe:	4b40      	ldr	r3, [pc, #256]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c700:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c70a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c70e:	4a3c      	ldr	r2, [pc, #240]	; (801c800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c710:	430b      	orrs	r3, r1
 801c712:	6713      	str	r3, [r2, #112]	; 0x70
 801c714:	e008      	b.n	801c728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c716:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c71a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801c71e:	e003      	b.n	801c728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c730:	f002 0301 	and.w	r3, r2, #1
 801c734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c738:	2300      	movs	r3, #0
 801c73a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c73e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c742:	460b      	mov	r3, r1
 801c744:	4313      	orrs	r3, r2
 801c746:	f000 808f 	beq.w	801c868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c74e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c750:	2b28      	cmp	r3, #40	; 0x28
 801c752:	d871      	bhi.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801c754:	a201      	add	r2, pc, #4	; (adr r2, 801c75c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c75a:	bf00      	nop
 801c75c:	0801c841 	.word	0x0801c841
 801c760:	0801c839 	.word	0x0801c839
 801c764:	0801c839 	.word	0x0801c839
 801c768:	0801c839 	.word	0x0801c839
 801c76c:	0801c839 	.word	0x0801c839
 801c770:	0801c839 	.word	0x0801c839
 801c774:	0801c839 	.word	0x0801c839
 801c778:	0801c839 	.word	0x0801c839
 801c77c:	0801c80d 	.word	0x0801c80d
 801c780:	0801c839 	.word	0x0801c839
 801c784:	0801c839 	.word	0x0801c839
 801c788:	0801c839 	.word	0x0801c839
 801c78c:	0801c839 	.word	0x0801c839
 801c790:	0801c839 	.word	0x0801c839
 801c794:	0801c839 	.word	0x0801c839
 801c798:	0801c839 	.word	0x0801c839
 801c79c:	0801c823 	.word	0x0801c823
 801c7a0:	0801c839 	.word	0x0801c839
 801c7a4:	0801c839 	.word	0x0801c839
 801c7a8:	0801c839 	.word	0x0801c839
 801c7ac:	0801c839 	.word	0x0801c839
 801c7b0:	0801c839 	.word	0x0801c839
 801c7b4:	0801c839 	.word	0x0801c839
 801c7b8:	0801c839 	.word	0x0801c839
 801c7bc:	0801c841 	.word	0x0801c841
 801c7c0:	0801c839 	.word	0x0801c839
 801c7c4:	0801c839 	.word	0x0801c839
 801c7c8:	0801c839 	.word	0x0801c839
 801c7cc:	0801c839 	.word	0x0801c839
 801c7d0:	0801c839 	.word	0x0801c839
 801c7d4:	0801c839 	.word	0x0801c839
 801c7d8:	0801c839 	.word	0x0801c839
 801c7dc:	0801c841 	.word	0x0801c841
 801c7e0:	0801c839 	.word	0x0801c839
 801c7e4:	0801c839 	.word	0x0801c839
 801c7e8:	0801c839 	.word	0x0801c839
 801c7ec:	0801c839 	.word	0x0801c839
 801c7f0:	0801c839 	.word	0x0801c839
 801c7f4:	0801c839 	.word	0x0801c839
 801c7f8:	0801c839 	.word	0x0801c839
 801c7fc:	0801c841 	.word	0x0801c841
 801c800:	58024400 	.word	0x58024400
 801c804:	58024800 	.word	0x58024800
 801c808:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c810:	3308      	adds	r3, #8
 801c812:	2101      	movs	r1, #1
 801c814:	4618      	mov	r0, r3
 801c816:	f001 fdcb 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c81a:	4603      	mov	r3, r0
 801c81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c820:	e00f      	b.n	801c842 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c826:	3328      	adds	r3, #40	; 0x28
 801c828:	2101      	movs	r1, #1
 801c82a:	4618      	mov	r0, r3
 801c82c:	f001 fe72 	bl	801e514 <RCCEx_PLL3_Config>
 801c830:	4603      	mov	r3, r0
 801c832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c836:	e004      	b.n	801c842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c838:	2301      	movs	r3, #1
 801c83a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c83e:	e000      	b.n	801c842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801c840:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c842:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c846:	2b00      	cmp	r3, #0
 801c848:	d10a      	bne.n	801c860 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c84a:	4bbf      	ldr	r3, [pc, #764]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c84e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c858:	4abb      	ldr	r2, [pc, #748]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c85a:	430b      	orrs	r3, r1
 801c85c:	6553      	str	r3, [r2, #84]	; 0x54
 801c85e:	e003      	b.n	801c868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c870:	f002 0302 	and.w	r3, r2, #2
 801c874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c878:	2300      	movs	r3, #0
 801c87a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c87e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c882:	460b      	mov	r3, r1
 801c884:	4313      	orrs	r3, r2
 801c886:	d041      	beq.n	801c90c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c88e:	2b05      	cmp	r3, #5
 801c890:	d824      	bhi.n	801c8dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801c892:	a201      	add	r2, pc, #4	; (adr r2, 801c898 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c898:	0801c8e5 	.word	0x0801c8e5
 801c89c:	0801c8b1 	.word	0x0801c8b1
 801c8a0:	0801c8c7 	.word	0x0801c8c7
 801c8a4:	0801c8e5 	.word	0x0801c8e5
 801c8a8:	0801c8e5 	.word	0x0801c8e5
 801c8ac:	0801c8e5 	.word	0x0801c8e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8b4:	3308      	adds	r3, #8
 801c8b6:	2101      	movs	r1, #1
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	f001 fd79 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c8c4:	e00f      	b.n	801c8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ca:	3328      	adds	r3, #40	; 0x28
 801c8cc:	2101      	movs	r1, #1
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	f001 fe20 	bl	801e514 <RCCEx_PLL3_Config>
 801c8d4:	4603      	mov	r3, r0
 801c8d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c8da:	e004      	b.n	801c8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c8dc:	2301      	movs	r3, #1
 801c8de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c8e2:	e000      	b.n	801c8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801c8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d10a      	bne.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c8ee:	4b96      	ldr	r3, [pc, #600]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c8f2:	f023 0107 	bic.w	r1, r3, #7
 801c8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c8fc:	4a92      	ldr	r2, [pc, #584]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8fe:	430b      	orrs	r3, r1
 801c900:	6553      	str	r3, [r2, #84]	; 0x54
 801c902:	e003      	b.n	801c90c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c908:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c914:	f002 0304 	and.w	r3, r2, #4
 801c918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c91c:	2300      	movs	r3, #0
 801c91e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c922:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c926:	460b      	mov	r3, r1
 801c928:	4313      	orrs	r3, r2
 801c92a:	d044      	beq.n	801c9b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c934:	2b05      	cmp	r3, #5
 801c936:	d825      	bhi.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801c938:	a201      	add	r2, pc, #4	; (adr r2, 801c940 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801c93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c93e:	bf00      	nop
 801c940:	0801c98d 	.word	0x0801c98d
 801c944:	0801c959 	.word	0x0801c959
 801c948:	0801c96f 	.word	0x0801c96f
 801c94c:	0801c98d 	.word	0x0801c98d
 801c950:	0801c98d 	.word	0x0801c98d
 801c954:	0801c98d 	.word	0x0801c98d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c95c:	3308      	adds	r3, #8
 801c95e:	2101      	movs	r1, #1
 801c960:	4618      	mov	r0, r3
 801c962:	f001 fd25 	bl	801e3b0 <RCCEx_PLL2_Config>
 801c966:	4603      	mov	r3, r0
 801c968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c96c:	e00f      	b.n	801c98e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c972:	3328      	adds	r3, #40	; 0x28
 801c974:	2101      	movs	r1, #1
 801c976:	4618      	mov	r0, r3
 801c978:	f001 fdcc 	bl	801e514 <RCCEx_PLL3_Config>
 801c97c:	4603      	mov	r3, r0
 801c97e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c982:	e004      	b.n	801c98e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c984:	2301      	movs	r3, #1
 801c986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c98a:	e000      	b.n	801c98e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801c98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c98e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c992:	2b00      	cmp	r3, #0
 801c994:	d10b      	bne.n	801c9ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c996:	4b6c      	ldr	r3, [pc, #432]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c99a:	f023 0107 	bic.w	r1, r3, #7
 801c99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c9a6:	4a68      	ldr	r2, [pc, #416]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c9a8:	430b      	orrs	r3, r1
 801c9aa:	6593      	str	r3, [r2, #88]	; 0x58
 801c9ac:	e003      	b.n	801c9b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9be:	f002 0320 	and.w	r3, r2, #32
 801c9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c9cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c9d0:	460b      	mov	r3, r1
 801c9d2:	4313      	orrs	r3, r2
 801c9d4:	d055      	beq.n	801ca82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c9e2:	d033      	beq.n	801ca4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801c9e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c9e8:	d82c      	bhi.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c9ee:	d02f      	beq.n	801ca50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801c9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c9f4:	d826      	bhi.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c9f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c9fa:	d02b      	beq.n	801ca54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801c9fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801ca00:	d820      	bhi.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801ca02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ca06:	d012      	beq.n	801ca2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801ca08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ca0c:	d81a      	bhi.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d022      	beq.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801ca12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ca16:	d115      	bne.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca1c:	3308      	adds	r3, #8
 801ca1e:	2100      	movs	r1, #0
 801ca20:	4618      	mov	r0, r3
 801ca22:	f001 fcc5 	bl	801e3b0 <RCCEx_PLL2_Config>
 801ca26:	4603      	mov	r3, r0
 801ca28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ca2c:	e015      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca32:	3328      	adds	r3, #40	; 0x28
 801ca34:	2102      	movs	r1, #2
 801ca36:	4618      	mov	r0, r3
 801ca38:	f001 fd6c 	bl	801e514 <RCCEx_PLL3_Config>
 801ca3c:	4603      	mov	r3, r0
 801ca3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ca42:	e00a      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca44:	2301      	movs	r3, #1
 801ca46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca4a:	e006      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801ca4c:	bf00      	nop
 801ca4e:	e004      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801ca50:	bf00      	nop
 801ca52:	e002      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801ca54:	bf00      	nop
 801ca56:	e000      	b.n	801ca5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801ca58:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d10b      	bne.n	801ca7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ca62:	4b39      	ldr	r3, [pc, #228]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801ca6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ca72:	4a35      	ldr	r2, [pc, #212]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca74:	430b      	orrs	r3, r1
 801ca76:	6553      	str	r3, [r2, #84]	; 0x54
 801ca78:	e003      	b.n	801ca82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801ca82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca8a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801ca8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ca92:	2300      	movs	r3, #0
 801ca94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801ca98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801ca9c:	460b      	mov	r3, r1
 801ca9e:	4313      	orrs	r3, r2
 801caa0:	d058      	beq.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801caaa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801caae:	d033      	beq.n	801cb18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801cab0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801cab4:	d82c      	bhi.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801caba:	d02f      	beq.n	801cb1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801cabc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cac0:	d826      	bhi.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cac6:	d02b      	beq.n	801cb20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801cac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cacc:	d820      	bhi.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cad2:	d012      	beq.n	801cafa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801cad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cad8:	d81a      	bhi.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d022      	beq.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801cade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cae2:	d115      	bne.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cae8:	3308      	adds	r3, #8
 801caea:	2100      	movs	r1, #0
 801caec:	4618      	mov	r0, r3
 801caee:	f001 fc5f 	bl	801e3b0 <RCCEx_PLL2_Config>
 801caf2:	4603      	mov	r3, r0
 801caf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801caf8:	e015      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cafe:	3328      	adds	r3, #40	; 0x28
 801cb00:	2102      	movs	r1, #2
 801cb02:	4618      	mov	r0, r3
 801cb04:	f001 fd06 	bl	801e514 <RCCEx_PLL3_Config>
 801cb08:	4603      	mov	r3, r0
 801cb0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801cb0e:	e00a      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb10:	2301      	movs	r3, #1
 801cb12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cb16:	e006      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801cb18:	bf00      	nop
 801cb1a:	e004      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801cb1c:	bf00      	nop
 801cb1e:	e002      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801cb20:	bf00      	nop
 801cb22:	e000      	b.n	801cb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801cb24:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d10e      	bne.n	801cb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801cb2e:	4b06      	ldr	r3, [pc, #24]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cb30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb32:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801cb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cb3e:	4a02      	ldr	r2, [pc, #8]	; (801cb48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cb40:	430b      	orrs	r3, r1
 801cb42:	6593      	str	r3, [r2, #88]	; 0x58
 801cb44:	e006      	b.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801cb46:	bf00      	nop
 801cb48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801cb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb5c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801cb60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cb64:	2300      	movs	r3, #0
 801cb66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801cb6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801cb6e:	460b      	mov	r3, r1
 801cb70:	4313      	orrs	r3, r2
 801cb72:	d055      	beq.n	801cc20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801cb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cb7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801cb80:	d033      	beq.n	801cbea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801cb82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801cb86:	d82c      	bhi.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cb88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb8c:	d02f      	beq.n	801cbee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801cb8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb92:	d826      	bhi.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cb94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801cb98:	d02b      	beq.n	801cbf2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801cb9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801cb9e:	d820      	bhi.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cba4:	d012      	beq.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801cba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cbaa:	d81a      	bhi.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d022      	beq.n	801cbf6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801cbb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cbb4:	d115      	bne.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbba:	3308      	adds	r3, #8
 801cbbc:	2100      	movs	r1, #0
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f001 fbf6 	bl	801e3b0 <RCCEx_PLL2_Config>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cbca:	e015      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbd0:	3328      	adds	r3, #40	; 0x28
 801cbd2:	2102      	movs	r1, #2
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f001 fc9d 	bl	801e514 <RCCEx_PLL3_Config>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cbe0:	e00a      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cbe8:	e006      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cbea:	bf00      	nop
 801cbec:	e004      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cbee:	bf00      	nop
 801cbf0:	e002      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cbf2:	bf00      	nop
 801cbf4:	e000      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cbf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cbf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d10b      	bne.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801cc00:	4ba0      	ldr	r3, [pc, #640]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc04:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801cc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cc10:	4a9c      	ldr	r2, [pc, #624]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc12:	430b      	orrs	r3, r1
 801cc14:	6593      	str	r3, [r2, #88]	; 0x58
 801cc16:	e003      	b.n	801cc20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801cc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc28:	f002 0308 	and.w	r3, r2, #8
 801cc2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cc30:	2300      	movs	r3, #0
 801cc32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cc36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801cc3a:	460b      	mov	r3, r1
 801cc3c:	4313      	orrs	r3, r2
 801cc3e:	d01e      	beq.n	801cc7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801cc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cc4c:	d10c      	bne.n	801cc68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc52:	3328      	adds	r3, #40	; 0x28
 801cc54:	2102      	movs	r1, #2
 801cc56:	4618      	mov	r0, r3
 801cc58:	f001 fc5c 	bl	801e514 <RCCEx_PLL3_Config>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d002      	beq.n	801cc68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801cc62:	2301      	movs	r3, #1
 801cc64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801cc68:	4b86      	ldr	r3, [pc, #536]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc78:	4a82      	ldr	r2, [pc, #520]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc7a:	430b      	orrs	r3, r1
 801cc7c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc86:	f002 0310 	and.w	r3, r2, #16
 801cc8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cc8e:	2300      	movs	r3, #0
 801cc90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cc94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801cc98:	460b      	mov	r3, r1
 801cc9a:	4313      	orrs	r3, r2
 801cc9c:	d01e      	beq.n	801ccdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ccaa:	d10c      	bne.n	801ccc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ccac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccb0:	3328      	adds	r3, #40	; 0x28
 801ccb2:	2102      	movs	r1, #2
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f001 fc2d 	bl	801e514 <RCCEx_PLL3_Config>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d002      	beq.n	801ccc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801ccc0:	2301      	movs	r3, #1
 801ccc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ccc6:	4b6f      	ldr	r3, [pc, #444]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801ccce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ccd6:	4a6b      	ldr	r2, [pc, #428]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccd8:	430b      	orrs	r3, r1
 801ccda:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801ccdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801cce8:	67bb      	str	r3, [r7, #120]	; 0x78
 801ccea:	2300      	movs	r3, #0
 801ccec:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ccee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801ccf2:	460b      	mov	r3, r1
 801ccf4:	4313      	orrs	r3, r2
 801ccf6:	d03e      	beq.n	801cd76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ccf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cd00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cd04:	d022      	beq.n	801cd4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801cd06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cd0a:	d81b      	bhi.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d003      	beq.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801cd10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd14:	d00b      	beq.n	801cd2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801cd16:	e015      	b.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd1c:	3308      	adds	r3, #8
 801cd1e:	2100      	movs	r1, #0
 801cd20:	4618      	mov	r0, r3
 801cd22:	f001 fb45 	bl	801e3b0 <RCCEx_PLL2_Config>
 801cd26:	4603      	mov	r3, r0
 801cd28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cd2c:	e00f      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd32:	3328      	adds	r3, #40	; 0x28
 801cd34:	2102      	movs	r1, #2
 801cd36:	4618      	mov	r0, r3
 801cd38:	f001 fbec 	bl	801e514 <RCCEx_PLL3_Config>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cd42:	e004      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd44:	2301      	movs	r3, #1
 801cd46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd4a:	e000      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801cd4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d10b      	bne.n	801cd6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cd56:	4b4b      	ldr	r3, [pc, #300]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cd66:	4a47      	ldr	r2, [pc, #284]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd68:	430b      	orrs	r3, r1
 801cd6a:	6593      	str	r3, [r2, #88]	; 0x58
 801cd6c:	e003      	b.n	801cd76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801cd82:	673b      	str	r3, [r7, #112]	; 0x70
 801cd84:	2300      	movs	r3, #0
 801cd86:	677b      	str	r3, [r7, #116]	; 0x74
 801cd88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801cd8c:	460b      	mov	r3, r1
 801cd8e:	4313      	orrs	r3, r2
 801cd90:	d03b      	beq.n	801ce0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801cd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cd9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cd9e:	d01f      	beq.n	801cde0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801cda0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cda4:	d818      	bhi.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801cda6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cdaa:	d003      	beq.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801cdac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cdb0:	d007      	beq.n	801cdc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801cdb2:	e011      	b.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cdb4:	4b33      	ldr	r3, [pc, #204]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdb8:	4a32      	ldr	r2, [pc, #200]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cdbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801cdc0:	e00f      	b.n	801cde2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cdc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdc6:	3328      	adds	r3, #40	; 0x28
 801cdc8:	2101      	movs	r1, #1
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f001 fba2 	bl	801e514 <RCCEx_PLL3_Config>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801cdd6:	e004      	b.n	801cde2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cdd8:	2301      	movs	r3, #1
 801cdda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cdde:	e000      	b.n	801cde2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801cde0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cde2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d10b      	bne.n	801ce02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cdea:	4b26      	ldr	r3, [pc, #152]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801cdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cdfa:	4a22      	ldr	r2, [pc, #136]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdfc:	430b      	orrs	r3, r1
 801cdfe:	6553      	str	r3, [r2, #84]	; 0x54
 801ce00:	e003      	b.n	801ce0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ce0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801ce16:	66bb      	str	r3, [r7, #104]	; 0x68
 801ce18:	2300      	movs	r3, #0
 801ce1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ce1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801ce20:	460b      	mov	r3, r1
 801ce22:	4313      	orrs	r3, r2
 801ce24:	d034      	beq.n	801ce90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ce26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d003      	beq.n	801ce38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801ce30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce34:	d007      	beq.n	801ce46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801ce36:	e011      	b.n	801ce5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce38:	4b12      	ldr	r3, [pc, #72]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce3c:	4a11      	ldr	r2, [pc, #68]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ce3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ce42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ce44:	e00e      	b.n	801ce64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ce46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce4a:	3308      	adds	r3, #8
 801ce4c:	2102      	movs	r1, #2
 801ce4e:	4618      	mov	r0, r3
 801ce50:	f001 faae 	bl	801e3b0 <RCCEx_PLL2_Config>
 801ce54:	4603      	mov	r3, r0
 801ce56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ce5a:	e003      	b.n	801ce64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ce62:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d10d      	bne.n	801ce88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801ce6c:	4b05      	ldr	r3, [pc, #20]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ce6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801ce74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce7a:	4a02      	ldr	r2, [pc, #8]	; (801ce84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ce7c:	430b      	orrs	r3, r1
 801ce7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 801ce80:	e006      	b.n	801ce90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801ce82:	bf00      	nop
 801ce84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801ce90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801ce9c:	663b      	str	r3, [r7, #96]	; 0x60
 801ce9e:	2300      	movs	r3, #0
 801cea0:	667b      	str	r3, [r7, #100]	; 0x64
 801cea2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801cea6:	460b      	mov	r3, r1
 801cea8:	4313      	orrs	r3, r2
 801ceaa:	d00c      	beq.n	801cec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ceac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ceb0:	3328      	adds	r3, #40	; 0x28
 801ceb2:	2102      	movs	r1, #2
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f001 fb2d 	bl	801e514 <RCCEx_PLL3_Config>
 801ceba:	4603      	mov	r3, r0
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d002      	beq.n	801cec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801cec0:	2301      	movs	r3, #1
 801cec2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801cec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cece:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801ced2:	65bb      	str	r3, [r7, #88]	; 0x58
 801ced4:	2300      	movs	r3, #0
 801ced6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ced8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801cedc:	460b      	mov	r3, r1
 801cede:	4313      	orrs	r3, r2
 801cee0:	d036      	beq.n	801cf50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801cee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ceec:	d018      	beq.n	801cf20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801ceee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cef2:	d811      	bhi.n	801cf18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801cef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cef8:	d014      	beq.n	801cf24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801cefa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cefe:	d80b      	bhi.n	801cf18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d011      	beq.n	801cf28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801cf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cf08:	d106      	bne.n	801cf18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cf0a:	4bb7      	ldr	r3, [pc, #732]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf0e:	4ab6      	ldr	r2, [pc, #728]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cf14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801cf16:	e008      	b.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cf18:	2301      	movs	r3, #1
 801cf1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cf1e:	e004      	b.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cf20:	bf00      	nop
 801cf22:	e002      	b.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cf24:	bf00      	nop
 801cf26:	e000      	b.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cf28:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cf2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d10a      	bne.n	801cf48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cf32:	4bad      	ldr	r3, [pc, #692]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cf40:	4aa9      	ldr	r2, [pc, #676]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf42:	430b      	orrs	r3, r1
 801cf44:	6553      	str	r3, [r2, #84]	; 0x54
 801cf46:	e003      	b.n	801cf50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801cf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801cf5c:	653b      	str	r3, [r7, #80]	; 0x50
 801cf5e:	2300      	movs	r3, #0
 801cf60:	657b      	str	r3, [r7, #84]	; 0x54
 801cf62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801cf66:	460b      	mov	r3, r1
 801cf68:	4313      	orrs	r3, r2
 801cf6a:	d009      	beq.n	801cf80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801cf6c:	4b9e      	ldr	r3, [pc, #632]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801cf74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf7a:	4a9b      	ldr	r2, [pc, #620]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf7c:	430b      	orrs	r3, r1
 801cf7e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf88:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801cf8c:	64bb      	str	r3, [r7, #72]	; 0x48
 801cf8e:	2300      	movs	r3, #0
 801cf90:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cf92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801cf96:	460b      	mov	r3, r1
 801cf98:	4313      	orrs	r3, r2
 801cf9a:	d009      	beq.n	801cfb0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cf9c:	4b92      	ldr	r3, [pc, #584]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfa0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801cfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cfaa:	4a8f      	ldr	r2, [pc, #572]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cfac:	430b      	orrs	r3, r1
 801cfae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801cfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfb8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801cfbc:	643b      	str	r3, [r7, #64]	; 0x40
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	647b      	str	r3, [r7, #68]	; 0x44
 801cfc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801cfc6:	460b      	mov	r3, r1
 801cfc8:	4313      	orrs	r3, r2
 801cfca:	d00e      	beq.n	801cfea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cfcc:	4b86      	ldr	r3, [pc, #536]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cfce:	691b      	ldr	r3, [r3, #16]
 801cfd0:	4a85      	ldr	r2, [pc, #532]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cfd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801cfd6:	6113      	str	r3, [r2, #16]
 801cfd8:	4b83      	ldr	r3, [pc, #524]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cfda:	6919      	ldr	r1, [r3, #16]
 801cfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801cfe4:	4a80      	ldr	r2, [pc, #512]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cfe6:	430b      	orrs	r3, r1
 801cfe8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801cfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801cff6:	63bb      	str	r3, [r7, #56]	; 0x38
 801cff8:	2300      	movs	r3, #0
 801cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cffc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801d000:	460b      	mov	r3, r1
 801d002:	4313      	orrs	r3, r2
 801d004:	d009      	beq.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801d006:	4b78      	ldr	r3, [pc, #480]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d00a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801d00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d014:	4a74      	ldr	r2, [pc, #464]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d016:	430b      	orrs	r3, r1
 801d018:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d022:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801d026:	633b      	str	r3, [r7, #48]	; 0x30
 801d028:	2300      	movs	r3, #0
 801d02a:	637b      	str	r3, [r7, #52]	; 0x34
 801d02c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801d030:	460b      	mov	r3, r1
 801d032:	4313      	orrs	r3, r2
 801d034:	d00a      	beq.n	801d04c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d036:	4b6c      	ldr	r3, [pc, #432]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d03a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801d03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d046:	4a68      	ldr	r2, [pc, #416]	; (801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d048:	430b      	orrs	r3, r1
 801d04a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801d04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d054:	2100      	movs	r1, #0
 801d056:	62b9      	str	r1, [r7, #40]	; 0x28
 801d058:	f003 0301 	and.w	r3, r3, #1
 801d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d05e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801d062:	460b      	mov	r3, r1
 801d064:	4313      	orrs	r3, r2
 801d066:	d011      	beq.n	801d08c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d06c:	3308      	adds	r3, #8
 801d06e:	2100      	movs	r1, #0
 801d070:	4618      	mov	r0, r3
 801d072:	f001 f99d 	bl	801e3b0 <RCCEx_PLL2_Config>
 801d076:	4603      	mov	r3, r0
 801d078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d07c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d080:	2b00      	cmp	r3, #0
 801d082:	d003      	beq.n	801d08c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801d08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d094:	2100      	movs	r1, #0
 801d096:	6239      	str	r1, [r7, #32]
 801d098:	f003 0302 	and.w	r3, r3, #2
 801d09c:	627b      	str	r3, [r7, #36]	; 0x24
 801d09e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d0a2:	460b      	mov	r3, r1
 801d0a4:	4313      	orrs	r3, r2
 801d0a6:	d011      	beq.n	801d0cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0ac:	3308      	adds	r3, #8
 801d0ae:	2101      	movs	r1, #1
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f001 f97d 	bl	801e3b0 <RCCEx_PLL2_Config>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d003      	beq.n	801d0cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801d0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d4:	2100      	movs	r1, #0
 801d0d6:	61b9      	str	r1, [r7, #24]
 801d0d8:	f003 0304 	and.w	r3, r3, #4
 801d0dc:	61fb      	str	r3, [r7, #28]
 801d0de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d0e2:	460b      	mov	r3, r1
 801d0e4:	4313      	orrs	r3, r2
 801d0e6:	d011      	beq.n	801d10c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0ec:	3308      	adds	r3, #8
 801d0ee:	2102      	movs	r1, #2
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	f001 f95d 	bl	801e3b0 <RCCEx_PLL2_Config>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d100:	2b00      	cmp	r3, #0
 801d102:	d003      	beq.n	801d10c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d108:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d114:	2100      	movs	r1, #0
 801d116:	6139      	str	r1, [r7, #16]
 801d118:	f003 0308 	and.w	r3, r3, #8
 801d11c:	617b      	str	r3, [r7, #20]
 801d11e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d122:	460b      	mov	r3, r1
 801d124:	4313      	orrs	r3, r2
 801d126:	d011      	beq.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d12c:	3328      	adds	r3, #40	; 0x28
 801d12e:	2100      	movs	r1, #0
 801d130:	4618      	mov	r0, r3
 801d132:	f001 f9ef 	bl	801e514 <RCCEx_PLL3_Config>
 801d136:	4603      	mov	r3, r0
 801d138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801d13c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d140:	2b00      	cmp	r3, #0
 801d142:	d003      	beq.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d148:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d154:	2100      	movs	r1, #0
 801d156:	60b9      	str	r1, [r7, #8]
 801d158:	f003 0310 	and.w	r3, r3, #16
 801d15c:	60fb      	str	r3, [r7, #12]
 801d15e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d162:	460b      	mov	r3, r1
 801d164:	4313      	orrs	r3, r2
 801d166:	d011      	beq.n	801d18c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d16c:	3328      	adds	r3, #40	; 0x28
 801d16e:	2101      	movs	r1, #1
 801d170:	4618      	mov	r0, r3
 801d172:	f001 f9cf 	bl	801e514 <RCCEx_PLL3_Config>
 801d176:	4603      	mov	r3, r0
 801d178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d17c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d180:	2b00      	cmp	r3, #0
 801d182:	d003      	beq.n	801d18c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d188:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d194:	2100      	movs	r1, #0
 801d196:	6039      	str	r1, [r7, #0]
 801d198:	f003 0320 	and.w	r3, r3, #32
 801d19c:	607b      	str	r3, [r7, #4]
 801d19e:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d1a2:	460b      	mov	r3, r1
 801d1a4:	4313      	orrs	r3, r2
 801d1a6:	d011      	beq.n	801d1cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1ac:	3328      	adds	r3, #40	; 0x28
 801d1ae:	2102      	movs	r1, #2
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f001 f9af 	bl	801e514 <RCCEx_PLL3_Config>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d003      	beq.n	801d1cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d1c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801d1cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d101      	bne.n	801d1d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	e000      	b.n	801d1da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801d1d8:	2301      	movs	r3, #1
}
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d1e6:	bf00      	nop
 801d1e8:	58024400 	.word	0x58024400

0801d1ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b090      	sub	sp, #64	; 0x40
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d1fa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801d1fe:	430b      	orrs	r3, r1
 801d200:	f040 8094 	bne.w	801d32c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801d204:	4b9b      	ldr	r3, [pc, #620]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d208:	f003 0307 	and.w	r3, r3, #7
 801d20c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d210:	2b04      	cmp	r3, #4
 801d212:	f200 8087 	bhi.w	801d324 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d216:	a201      	add	r2, pc, #4	; (adr r2, 801d21c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d21c:	0801d231 	.word	0x0801d231
 801d220:	0801d259 	.word	0x0801d259
 801d224:	0801d281 	.word	0x0801d281
 801d228:	0801d31d 	.word	0x0801d31d
 801d22c:	0801d2a9 	.word	0x0801d2a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d230:	4b90      	ldr	r3, [pc, #576]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d23c:	d108      	bne.n	801d250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d23e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d242:	4618      	mov	r0, r3
 801d244:	f000 ff62 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d24c:	f000 bc93 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d250:	2300      	movs	r3, #0
 801d252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d254:	f000 bc8f 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d258:	4b86      	ldr	r3, [pc, #536]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d264:	d108      	bne.n	801d278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d266:	f107 0318 	add.w	r3, r7, #24
 801d26a:	4618      	mov	r0, r3
 801d26c:	f000 fca6 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d270:	69bb      	ldr	r3, [r7, #24]
 801d272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d274:	f000 bc7f 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d278:	2300      	movs	r3, #0
 801d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d27c:	f000 bc7b 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d280:	4b7c      	ldr	r3, [pc, #496]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d28c:	d108      	bne.n	801d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d28e:	f107 030c 	add.w	r3, r7, #12
 801d292:	4618      	mov	r0, r3
 801d294:	f000 fde6 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d29c:	f000 bc6b 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2a0:	2300      	movs	r3, #0
 801d2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2a4:	f000 bc67 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d2a8:	4b72      	ldr	r3, [pc, #456]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d2b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d2b2:	4b70      	ldr	r3, [pc, #448]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	f003 0304 	and.w	r3, r3, #4
 801d2ba:	2b04      	cmp	r3, #4
 801d2bc:	d10c      	bne.n	801d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d109      	bne.n	801d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d2c4:	4b6b      	ldr	r3, [pc, #428]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	08db      	lsrs	r3, r3, #3
 801d2ca:	f003 0303 	and.w	r3, r3, #3
 801d2ce:	4a6a      	ldr	r2, [pc, #424]	; (801d478 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d2d0:	fa22 f303 	lsr.w	r3, r2, r3
 801d2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d2d6:	e01f      	b.n	801d318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d2d8:	4b66      	ldr	r3, [pc, #408]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d2e4:	d106      	bne.n	801d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d2ec:	d102      	bne.n	801d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d2ee:	4b63      	ldr	r3, [pc, #396]	; (801d47c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d2f2:	e011      	b.n	801d318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d2f4:	4b5f      	ldr	r3, [pc, #380]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d2fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d300:	d106      	bne.n	801d310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d308:	d102      	bne.n	801d310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d30a:	4b5d      	ldr	r3, [pc, #372]	; (801d480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d30e:	e003      	b.n	801d318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d310:	2300      	movs	r3, #0
 801d312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d314:	f000 bc2f 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d318:	f000 bc2d 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d31c:	4b59      	ldr	r3, [pc, #356]	; (801d484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d320:	f000 bc29 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d324:	2300      	movs	r3, #0
 801d326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d328:	f000 bc25 	b.w	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d330:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d334:	430b      	orrs	r3, r1
 801d336:	f040 80a7 	bne.w	801d488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d33a:	4b4e      	ldr	r3, [pc, #312]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d33e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d342:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d34a:	d054      	beq.n	801d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d34e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d352:	f200 808b 	bhi.w	801d46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d358:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d35c:	f000 8083 	beq.w	801d466 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d362:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d366:	f200 8081 	bhi.w	801d46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d36c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d370:	d02f      	beq.n	801d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d378:	d878      	bhi.n	801d46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	d004      	beq.n	801d38a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d386:	d012      	beq.n	801d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d388:	e070      	b.n	801d46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d38a:	4b3a      	ldr	r3, [pc, #232]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d396:	d107      	bne.n	801d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d39c:	4618      	mov	r0, r3
 801d39e:	f000 feb5 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3a6:	e3e6      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3ac:	e3e3      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d3ae:	4b31      	ldr	r3, [pc, #196]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d3b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d3ba:	d107      	bne.n	801d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d3bc:	f107 0318 	add.w	r3, r7, #24
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	f000 fbfb 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d3c6:	69bb      	ldr	r3, [r7, #24]
 801d3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3ca:	e3d4      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3d0:	e3d1      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d3d2:	4b28      	ldr	r3, [pc, #160]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d3da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d3de:	d107      	bne.n	801d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d3e0:	f107 030c 	add.w	r3, r7, #12
 801d3e4:	4618      	mov	r0, r3
 801d3e6:	f000 fd3d 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3ee:	e3c2      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3f4:	e3bf      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d3f6:	4b1f      	ldr	r3, [pc, #124]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d3fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d3fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d400:	4b1c      	ldr	r3, [pc, #112]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	f003 0304 	and.w	r3, r3, #4
 801d408:	2b04      	cmp	r3, #4
 801d40a:	d10c      	bne.n	801d426 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d109      	bne.n	801d426 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d412:	4b18      	ldr	r3, [pc, #96]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	08db      	lsrs	r3, r3, #3
 801d418:	f003 0303 	and.w	r3, r3, #3
 801d41c:	4a16      	ldr	r2, [pc, #88]	; (801d478 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d41e:	fa22 f303 	lsr.w	r3, r2, r3
 801d422:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d424:	e01e      	b.n	801d464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d426:	4b13      	ldr	r3, [pc, #76]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d432:	d106      	bne.n	801d442 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d43a:	d102      	bne.n	801d442 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d43c:	4b0f      	ldr	r3, [pc, #60]	; (801d47c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d440:	e010      	b.n	801d464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d442:	4b0c      	ldr	r3, [pc, #48]	; (801d474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d44a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d44e:	d106      	bne.n	801d45e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d456:	d102      	bne.n	801d45e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d458:	4b09      	ldr	r3, [pc, #36]	; (801d480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d45c:	e002      	b.n	801d464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d45e:	2300      	movs	r3, #0
 801d460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d462:	e388      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d464:	e387      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d466:	4b07      	ldr	r3, [pc, #28]	; (801d484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d46a:	e384      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d46c:	2300      	movs	r3, #0
 801d46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d470:	e381      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d472:	bf00      	nop
 801d474:	58024400 	.word	0x58024400
 801d478:	03d09000 	.word	0x03d09000
 801d47c:	003d0900 	.word	0x003d0900
 801d480:	007a1200 	.word	0x007a1200
 801d484:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d488:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d48c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d490:	430b      	orrs	r3, r1
 801d492:	f040 809c 	bne.w	801d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d496:	4b9e      	ldr	r3, [pc, #632]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d49a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d49e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d4a6:	d054      	beq.n	801d552 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d4ae:	f200 808b 	bhi.w	801d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d4b8:	f000 8083 	beq.w	801d5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d4c2:	f200 8081 	bhi.w	801d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d4cc:	d02f      	beq.n	801d52e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d4d4:	d878      	bhi.n	801d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d004      	beq.n	801d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d4e2:	d012      	beq.n	801d50a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d4e4:	e070      	b.n	801d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d4e6:	4b8a      	ldr	r3, [pc, #552]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d4ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d4f2:	d107      	bne.n	801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d4f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	f000 fe07 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d502:	e338      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d504:	2300      	movs	r3, #0
 801d506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d508:	e335      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d50a:	4b81      	ldr	r3, [pc, #516]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d516:	d107      	bne.n	801d528 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d518:	f107 0318 	add.w	r3, r7, #24
 801d51c:	4618      	mov	r0, r3
 801d51e:	f000 fb4d 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d522:	69bb      	ldr	r3, [r7, #24]
 801d524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d526:	e326      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d528:	2300      	movs	r3, #0
 801d52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d52c:	e323      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d52e:	4b78      	ldr	r3, [pc, #480]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d530:	681b      	ldr	r3, [r3, #0]
 801d532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d53a:	d107      	bne.n	801d54c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d53c:	f107 030c 	add.w	r3, r7, #12
 801d540:	4618      	mov	r0, r3
 801d542:	f000 fc8f 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d54a:	e314      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d54c:	2300      	movs	r3, #0
 801d54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d550:	e311      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d552:	4b6f      	ldr	r3, [pc, #444]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d55a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d55c:	4b6c      	ldr	r3, [pc, #432]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	f003 0304 	and.w	r3, r3, #4
 801d564:	2b04      	cmp	r3, #4
 801d566:	d10c      	bne.n	801d582 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801d568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d109      	bne.n	801d582 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d56e:	4b68      	ldr	r3, [pc, #416]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	08db      	lsrs	r3, r3, #3
 801d574:	f003 0303 	and.w	r3, r3, #3
 801d578:	4a66      	ldr	r2, [pc, #408]	; (801d714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d57a:	fa22 f303 	lsr.w	r3, r2, r3
 801d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d580:	e01e      	b.n	801d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d582:	4b63      	ldr	r3, [pc, #396]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d58e:	d106      	bne.n	801d59e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d596:	d102      	bne.n	801d59e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d598:	4b5f      	ldr	r3, [pc, #380]	; (801d718 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d59c:	e010      	b.n	801d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d59e:	4b5c      	ldr	r3, [pc, #368]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d5a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d5aa:	d106      	bne.n	801d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5b2:	d102      	bne.n	801d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d5b4:	4b59      	ldr	r3, [pc, #356]	; (801d71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d5b8:	e002      	b.n	801d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d5be:	e2da      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d5c0:	e2d9      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d5c2:	4b57      	ldr	r3, [pc, #348]	; (801d720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5c6:	e2d6      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5cc:	e2d3      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d5d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801d5d6:	430b      	orrs	r3, r1
 801d5d8:	f040 80a7 	bne.w	801d72a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801d5dc:	4b4c      	ldr	r3, [pc, #304]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d5e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d5e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d5ec:	d055      	beq.n	801d69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d5f4:	f200 8096 	bhi.w	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d5fe:	f000 8084 	beq.w	801d70a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801d602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d608:	f200 808c 	bhi.w	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d612:	d030      	beq.n	801d676 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d61a:	f200 8083 	bhi.w	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d620:	2b00      	cmp	r3, #0
 801d622:	d004      	beq.n	801d62e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d62a:	d012      	beq.n	801d652 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801d62c:	e07a      	b.n	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d62e:	4b38      	ldr	r3, [pc, #224]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d63a:	d107      	bne.n	801d64c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d63c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d640:	4618      	mov	r0, r3
 801d642:	f000 fd63 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d64a:	e294      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d64c:	2300      	movs	r3, #0
 801d64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d650:	e291      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d652:	4b2f      	ldr	r3, [pc, #188]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d65a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d65e:	d107      	bne.n	801d670 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d660:	f107 0318 	add.w	r3, r7, #24
 801d664:	4618      	mov	r0, r3
 801d666:	f000 faa9 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d66a:	69bb      	ldr	r3, [r7, #24]
 801d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d66e:	e282      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d670:	2300      	movs	r3, #0
 801d672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d674:	e27f      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d676:	4b26      	ldr	r3, [pc, #152]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d682:	d107      	bne.n	801d694 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d684:	f107 030c 	add.w	r3, r7, #12
 801d688:	4618      	mov	r0, r3
 801d68a:	f000 fbeb 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d692:	e270      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d694:	2300      	movs	r3, #0
 801d696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d698:	e26d      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d69a:	4b1d      	ldr	r3, [pc, #116]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d69e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d6a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d6a4:	4b1a      	ldr	r3, [pc, #104]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	f003 0304 	and.w	r3, r3, #4
 801d6ac:	2b04      	cmp	r3, #4
 801d6ae:	d10c      	bne.n	801d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801d6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d109      	bne.n	801d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d6b6:	4b16      	ldr	r3, [pc, #88]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	08db      	lsrs	r3, r3, #3
 801d6bc:	f003 0303 	and.w	r3, r3, #3
 801d6c0:	4a14      	ldr	r2, [pc, #80]	; (801d714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d6c2:	fa22 f303 	lsr.w	r3, r2, r3
 801d6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6c8:	e01e      	b.n	801d708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d6ca:	4b11      	ldr	r3, [pc, #68]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d6d6:	d106      	bne.n	801d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801d6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d6de:	d102      	bne.n	801d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d6e0:	4b0d      	ldr	r3, [pc, #52]	; (801d718 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6e4:	e010      	b.n	801d708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d6e6:	4b0a      	ldr	r3, [pc, #40]	; (801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d6ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d6f2:	d106      	bne.n	801d702 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801d6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d6fa:	d102      	bne.n	801d702 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d6fc:	4b07      	ldr	r3, [pc, #28]	; (801d71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d700:	e002      	b.n	801d708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d706:	e236      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d708:	e235      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d70a:	4b05      	ldr	r3, [pc, #20]	; (801d720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d70e:	e232      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d710:	58024400 	.word	0x58024400
 801d714:	03d09000 	.word	0x03d09000
 801d718:	003d0900 	.word	0x003d0900
 801d71c:	007a1200 	.word	0x007a1200
 801d720:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801d724:	2300      	movs	r3, #0
 801d726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d728:	e225      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801d72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d72e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801d732:	430b      	orrs	r3, r1
 801d734:	f040 8085 	bne.w	801d842 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801d738:	4b9c      	ldr	r3, [pc, #624]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d73c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801d740:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d748:	d06b      	beq.n	801d822 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d74c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d750:	d874      	bhi.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d758:	d056      	beq.n	801d808 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d75c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d760:	d86c      	bhi.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d768:	d03b      	beq.n	801d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d76c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d770:	d864      	bhi.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d778:	d021      	beq.n	801d7be <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d77c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d780:	d85c      	bhi.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d784:	2b00      	cmp	r3, #0
 801d786:	d004      	beq.n	801d792 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d78e:	d004      	beq.n	801d79a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801d790:	e054      	b.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801d792:	f7fe fb75 	bl	801be80 <HAL_RCC_GetPCLK1Freq>
 801d796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d798:	e1ed      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d79a:	4b84      	ldr	r3, [pc, #528]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d7a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d7a6:	d107      	bne.n	801d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d7a8:	f107 0318 	add.w	r3, r7, #24
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f000 fa05 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d7b2:	69fb      	ldr	r3, [r7, #28]
 801d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d7b6:	e1de      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d7bc:	e1db      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d7be:	4b7b      	ldr	r3, [pc, #492]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d7c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7ca:	d107      	bne.n	801d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d7cc:	f107 030c 	add.w	r3, r7, #12
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f000 fb47 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d7da:	e1cc      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d7dc:	2300      	movs	r3, #0
 801d7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d7e0:	e1c9      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d7e2:	4b72      	ldr	r3, [pc, #456]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	f003 0304 	and.w	r3, r3, #4
 801d7ea:	2b04      	cmp	r3, #4
 801d7ec:	d109      	bne.n	801d802 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d7ee:	4b6f      	ldr	r3, [pc, #444]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	08db      	lsrs	r3, r3, #3
 801d7f4:	f003 0303 	and.w	r3, r3, #3
 801d7f8:	4a6d      	ldr	r2, [pc, #436]	; (801d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d7fa:	fa22 f303 	lsr.w	r3, r2, r3
 801d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d800:	e1b9      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d802:	2300      	movs	r3, #0
 801d804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d806:	e1b6      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d808:	4b68      	ldr	r3, [pc, #416]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d814:	d102      	bne.n	801d81c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801d816:	4b67      	ldr	r3, [pc, #412]	; (801d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d81a:	e1ac      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d81c:	2300      	movs	r3, #0
 801d81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d820:	e1a9      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d822:	4b62      	ldr	r3, [pc, #392]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d82a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d82e:	d102      	bne.n	801d836 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801d830:	4b61      	ldr	r3, [pc, #388]	; (801d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d834:	e19f      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d836:	2300      	movs	r3, #0
 801d838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d83a:	e19c      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d83c:	2300      	movs	r3, #0
 801d83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d840:	e199      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d842:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d846:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801d84a:	430b      	orrs	r3, r1
 801d84c:	d173      	bne.n	801d936 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d84e:	4b57      	ldr	r3, [pc, #348]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d856:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d85a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d85e:	d02f      	beq.n	801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d866:	d863      	bhi.n	801d930 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d004      	beq.n	801d878 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801d86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d874:	d012      	beq.n	801d89c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801d876:	e05b      	b.n	801d930 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d878:	4b4c      	ldr	r3, [pc, #304]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d884:	d107      	bne.n	801d896 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d886:	f107 0318 	add.w	r3, r7, #24
 801d88a:	4618      	mov	r0, r3
 801d88c:	f000 f996 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d890:	69bb      	ldr	r3, [r7, #24]
 801d892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d894:	e16f      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d896:	2300      	movs	r3, #0
 801d898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d89a:	e16c      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d89c:	4b43      	ldr	r3, [pc, #268]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8a8:	d107      	bne.n	801d8ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d8aa:	f107 030c 	add.w	r3, r7, #12
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	f000 fad8 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8b8:	e15d      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8be:	e15a      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d8c0:	4b3a      	ldr	r3, [pc, #232]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d8c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d8c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d8ca:	4b38      	ldr	r3, [pc, #224]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	f003 0304 	and.w	r3, r3, #4
 801d8d2:	2b04      	cmp	r3, #4
 801d8d4:	d10c      	bne.n	801d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801d8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d109      	bne.n	801d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d8dc:	4b33      	ldr	r3, [pc, #204]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	08db      	lsrs	r3, r3, #3
 801d8e2:	f003 0303 	and.w	r3, r3, #3
 801d8e6:	4a32      	ldr	r2, [pc, #200]	; (801d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d8e8:	fa22 f303 	lsr.w	r3, r2, r3
 801d8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d8ee:	e01e      	b.n	801d92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d8f0:	4b2e      	ldr	r3, [pc, #184]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d8fc:	d106      	bne.n	801d90c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d904:	d102      	bne.n	801d90c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d906:	4b2b      	ldr	r3, [pc, #172]	; (801d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d908:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d90a:	e010      	b.n	801d92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d90c:	4b27      	ldr	r3, [pc, #156]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d918:	d106      	bne.n	801d928 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801d91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d91c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d920:	d102      	bne.n	801d928 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d922:	4b25      	ldr	r3, [pc, #148]	; (801d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d924:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d926:	e002      	b.n	801d92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d928:	2300      	movs	r3, #0
 801d92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d92c:	e123      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d92e:	e122      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d930:	2300      	movs	r3, #0
 801d932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d934:	e11f      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d936:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d93a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801d93e:	430b      	orrs	r3, r1
 801d940:	d13c      	bne.n	801d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d942:	4b1a      	ldr	r3, [pc, #104]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d94a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d004      	beq.n	801d95c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d958:	d012      	beq.n	801d980 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801d95a:	e023      	b.n	801d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d95c:	4b13      	ldr	r3, [pc, #76]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d968:	d107      	bne.n	801d97a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d96a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d96e:	4618      	mov	r0, r3
 801d970:	f000 fbcc 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d978:	e0fd      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d97a:	2300      	movs	r3, #0
 801d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d97e:	e0fa      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d980:	4b0a      	ldr	r3, [pc, #40]	; (801d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d98c:	d107      	bne.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d98e:	f107 0318 	add.w	r3, r7, #24
 801d992:	4618      	mov	r0, r3
 801d994:	f000 f912 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d998:	6a3b      	ldr	r3, [r7, #32]
 801d99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d99c:	e0eb      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9a2:	e0e8      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9a8:	e0e5      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d9aa:	bf00      	nop
 801d9ac:	58024400 	.word	0x58024400
 801d9b0:	03d09000 	.word	0x03d09000
 801d9b4:	003d0900 	.word	0x003d0900
 801d9b8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d9c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801d9c4:	430b      	orrs	r3, r1
 801d9c6:	f040 8085 	bne.w	801dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d9ca:	4b6d      	ldr	r3, [pc, #436]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d9ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d9d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d9da:	d06b      	beq.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801d9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d9e2:	d874      	bhi.n	801dace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d9ea:	d056      	beq.n	801da9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801d9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d9f2:	d86c      	bhi.n	801dace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d9fa:	d03b      	beq.n	801da74 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801da02:	d864      	bhi.n	801dace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da0a:	d021      	beq.n	801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da12:	d85c      	bhi.n	801dace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da16:	2b00      	cmp	r3, #0
 801da18:	d004      	beq.n	801da24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801da1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801da20:	d004      	beq.n	801da2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801da22:	e054      	b.n	801dace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801da24:	f000 f8b4 	bl	801db90 <HAL_RCCEx_GetD3PCLK1Freq>
 801da28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801da2a:	e0a4      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801da2c:	4b54      	ldr	r3, [pc, #336]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da38:	d107      	bne.n	801da4a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801da3a:	f107 0318 	add.w	r3, r7, #24
 801da3e:	4618      	mov	r0, r3
 801da40:	f000 f8bc 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801da44:	69fb      	ldr	r3, [r7, #28]
 801da46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da48:	e095      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da4a:	2300      	movs	r3, #0
 801da4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da4e:	e092      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801da50:	4b4b      	ldr	r3, [pc, #300]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801da58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da5c:	d107      	bne.n	801da6e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801da5e:	f107 030c 	add.w	r3, r7, #12
 801da62:	4618      	mov	r0, r3
 801da64:	f000 f9fe 	bl	801de64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801da68:	693b      	ldr	r3, [r7, #16]
 801da6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da6c:	e083      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da6e:	2300      	movs	r3, #0
 801da70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da72:	e080      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801da74:	4b42      	ldr	r3, [pc, #264]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	f003 0304 	and.w	r3, r3, #4
 801da7c:	2b04      	cmp	r3, #4
 801da7e:	d109      	bne.n	801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801da80:	4b3f      	ldr	r3, [pc, #252]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	08db      	lsrs	r3, r3, #3
 801da86:	f003 0303 	and.w	r3, r3, #3
 801da8a:	4a3e      	ldr	r2, [pc, #248]	; (801db84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801da8c:	fa22 f303 	lsr.w	r3, r2, r3
 801da90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da92:	e070      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da94:	2300      	movs	r3, #0
 801da96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da98:	e06d      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801da9a:	4b39      	ldr	r3, [pc, #228]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801daa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801daa6:	d102      	bne.n	801daae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801daa8:	4b37      	ldr	r3, [pc, #220]	; (801db88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801daaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801daac:	e063      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801daae:	2300      	movs	r3, #0
 801dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dab2:	e060      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801dab4:	4b32      	ldr	r3, [pc, #200]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dabc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dac0:	d102      	bne.n	801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801dac2:	4b32      	ldr	r3, [pc, #200]	; (801db8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dac6:	e056      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dac8:	2300      	movs	r3, #0
 801daca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dacc:	e053      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801dace:	2300      	movs	r3, #0
 801dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dad2:	e050      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801dad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dad8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801dadc:	430b      	orrs	r3, r1
 801dade:	d148      	bne.n	801db72 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801dae0:	4b27      	ldr	r3, [pc, #156]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801dae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801dae8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801daea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801daf0:	d02a      	beq.n	801db48 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801daf8:	d838      	bhi.n	801db6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d004      	beq.n	801db0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801db06:	d00d      	beq.n	801db24 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801db08:	e030      	b.n	801db6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801db0a:	4b1d      	ldr	r3, [pc, #116]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801db12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801db16:	d102      	bne.n	801db1e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801db18:	4b1c      	ldr	r3, [pc, #112]	; (801db8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801db1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db1c:	e02b      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db1e:	2300      	movs	r3, #0
 801db20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db22:	e028      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801db24:	4b16      	ldr	r3, [pc, #88]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801db2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801db30:	d107      	bne.n	801db42 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801db32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db36:	4618      	mov	r0, r3
 801db38:	f000 fae8 	bl	801e10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db40:	e019      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db42:	2300      	movs	r3, #0
 801db44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db46:	e016      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801db48:	4b0d      	ldr	r3, [pc, #52]	; (801db80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801db50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801db54:	d107      	bne.n	801db66 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801db56:	f107 0318 	add.w	r3, r7, #24
 801db5a:	4618      	mov	r0, r3
 801db5c:	f000 f82e 	bl	801dbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801db60:	69fb      	ldr	r3, [r7, #28]
 801db62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db64:	e007      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db66:	2300      	movs	r3, #0
 801db68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db6a:	e004      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801db6c:	2300      	movs	r3, #0
 801db6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db70:	e001      	b.n	801db76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801db72:	2300      	movs	r3, #0
 801db74:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801db76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801db78:	4618      	mov	r0, r3
 801db7a:	3740      	adds	r7, #64	; 0x40
 801db7c:	46bd      	mov	sp, r7
 801db7e:	bd80      	pop	{r7, pc}
 801db80:	58024400 	.word	0x58024400
 801db84:	03d09000 	.word	0x03d09000
 801db88:	003d0900 	.word	0x003d0900
 801db8c:	007a1200 	.word	0x007a1200

0801db90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801db90:	b580      	push	{r7, lr}
 801db92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801db94:	f7fe f944 	bl	801be20 <HAL_RCC_GetHCLKFreq>
 801db98:	4602      	mov	r2, r0
 801db9a:	4b06      	ldr	r3, [pc, #24]	; (801dbb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801db9c:	6a1b      	ldr	r3, [r3, #32]
 801db9e:	091b      	lsrs	r3, r3, #4
 801dba0:	f003 0307 	and.w	r3, r3, #7
 801dba4:	4904      	ldr	r1, [pc, #16]	; (801dbb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801dba6:	5ccb      	ldrb	r3, [r1, r3]
 801dba8:	f003 031f 	and.w	r3, r3, #31
 801dbac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	bd80      	pop	{r7, pc}
 801dbb4:	58024400 	.word	0x58024400
 801dbb8:	08020dac 	.word	0x08020dac

0801dbbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801dbbc:	b480      	push	{r7}
 801dbbe:	b089      	sub	sp, #36	; 0x24
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dbc4:	4ba1      	ldr	r3, [pc, #644]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbc8:	f003 0303 	and.w	r3, r3, #3
 801dbcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801dbce:	4b9f      	ldr	r3, [pc, #636]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbd2:	0b1b      	lsrs	r3, r3, #12
 801dbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dbd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801dbda:	4b9c      	ldr	r3, [pc, #624]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbde:	091b      	lsrs	r3, r3, #4
 801dbe0:	f003 0301 	and.w	r3, r3, #1
 801dbe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801dbe6:	4b99      	ldr	r3, [pc, #612]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dbea:	08db      	lsrs	r3, r3, #3
 801dbec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dbf0:	693a      	ldr	r2, [r7, #16]
 801dbf2:	fb02 f303 	mul.w	r3, r2, r3
 801dbf6:	ee07 3a90 	vmov	s15, r3
 801dbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801dc02:	697b      	ldr	r3, [r7, #20]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	f000 8111 	beq.w	801de2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801dc0a:	69bb      	ldr	r3, [r7, #24]
 801dc0c:	2b02      	cmp	r3, #2
 801dc0e:	f000 8083 	beq.w	801dd18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801dc12:	69bb      	ldr	r3, [r7, #24]
 801dc14:	2b02      	cmp	r3, #2
 801dc16:	f200 80a1 	bhi.w	801dd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801dc1a:	69bb      	ldr	r3, [r7, #24]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d003      	beq.n	801dc28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801dc20:	69bb      	ldr	r3, [r7, #24]
 801dc22:	2b01      	cmp	r3, #1
 801dc24:	d056      	beq.n	801dcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801dc26:	e099      	b.n	801dd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc28:	4b88      	ldr	r3, [pc, #544]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	f003 0320 	and.w	r3, r3, #32
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d02d      	beq.n	801dc90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dc34:	4b85      	ldr	r3, [pc, #532]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	08db      	lsrs	r3, r3, #3
 801dc3a:	f003 0303 	and.w	r3, r3, #3
 801dc3e:	4a84      	ldr	r2, [pc, #528]	; (801de50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801dc40:	fa22 f303 	lsr.w	r3, r2, r3
 801dc44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc46:	68bb      	ldr	r3, [r7, #8]
 801dc48:	ee07 3a90 	vmov	s15, r3
 801dc4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	ee07 3a90 	vmov	s15, r3
 801dc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc5e:	4b7b      	ldr	r3, [pc, #492]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc66:	ee07 3a90 	vmov	s15, r3
 801dc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc72:	eddf 5a78 	vldr	s11, [pc, #480]	; 801de54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dc8e:	e087      	b.n	801dda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc90:	697b      	ldr	r3, [r7, #20]
 801dc92:	ee07 3a90 	vmov	s15, r3
 801dc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801de58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801dc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dca2:	4b6a      	ldr	r3, [pc, #424]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcaa:	ee07 3a90 	vmov	s15, r3
 801dcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 801dcb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 801de54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dcd2:	e065      	b.n	801dda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801de5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dce6:	4b59      	ldr	r3, [pc, #356]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcee:	ee07 3a90 	vmov	s15, r3
 801dcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dcfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 801de54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dd16:	e043      	b.n	801dda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dd18:	697b      	ldr	r3, [r7, #20]
 801dd1a:	ee07 3a90 	vmov	s15, r3
 801dd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801de60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801dd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd2a:	4b48      	ldr	r3, [pc, #288]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd32:	ee07 3a90 	vmov	s15, r3
 801dd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 801de54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dd5a:	e021      	b.n	801dda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dd5c:	697b      	ldr	r3, [r7, #20]
 801dd5e:	ee07 3a90 	vmov	s15, r3
 801dd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801de5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd6e:	4b37      	ldr	r3, [pc, #220]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd76:	ee07 3a90 	vmov	s15, r3
 801dd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd82:	eddf 5a34 	vldr	s11, [pc, #208]	; 801de54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dd9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dda0:	4b2a      	ldr	r3, [pc, #168]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dda4:	0a5b      	lsrs	r3, r3, #9
 801dda6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ddaa:	ee07 3a90 	vmov	s15, r3
 801ddae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ddba:	edd7 6a07 	vldr	s13, [r7, #28]
 801ddbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ddc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ddc6:	ee17 2a90 	vmov	r2, s15
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ddce:	4b1f      	ldr	r3, [pc, #124]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddd2:	0c1b      	lsrs	r3, r3, #16
 801ddd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ddd8:	ee07 3a90 	vmov	s15, r3
 801dddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dde0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dde4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dde8:	edd7 6a07 	vldr	s13, [r7, #28]
 801ddec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ddf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ddf4:	ee17 2a90 	vmov	r2, s15
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801ddfc:	4b13      	ldr	r3, [pc, #76]	; (801de4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de00:	0e1b      	lsrs	r3, r3, #24
 801de02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de06:	ee07 3a90 	vmov	s15, r3
 801de0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de12:	ee37 7a87 	vadd.f32	s14, s15, s14
 801de16:	edd7 6a07 	vldr	s13, [r7, #28]
 801de1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de22:	ee17 2a90 	vmov	r2, s15
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801de2a:	e008      	b.n	801de3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	2200      	movs	r2, #0
 801de30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	2200      	movs	r2, #0
 801de36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	2200      	movs	r2, #0
 801de3c:	609a      	str	r2, [r3, #8]
}
 801de3e:	bf00      	nop
 801de40:	3724      	adds	r7, #36	; 0x24
 801de42:	46bd      	mov	sp, r7
 801de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de48:	4770      	bx	lr
 801de4a:	bf00      	nop
 801de4c:	58024400 	.word	0x58024400
 801de50:	03d09000 	.word	0x03d09000
 801de54:	46000000 	.word	0x46000000
 801de58:	4c742400 	.word	0x4c742400
 801de5c:	4a742400 	.word	0x4a742400
 801de60:	4af42400 	.word	0x4af42400

0801de64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801de64:	b480      	push	{r7}
 801de66:	b089      	sub	sp, #36	; 0x24
 801de68:	af00      	add	r7, sp, #0
 801de6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801de6c:	4ba1      	ldr	r3, [pc, #644]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de70:	f003 0303 	and.w	r3, r3, #3
 801de74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801de76:	4b9f      	ldr	r3, [pc, #636]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de7a:	0d1b      	lsrs	r3, r3, #20
 801de7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801de80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801de82:	4b9c      	ldr	r3, [pc, #624]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de86:	0a1b      	lsrs	r3, r3, #8
 801de88:	f003 0301 	and.w	r3, r3, #1
 801de8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801de8e:	4b99      	ldr	r3, [pc, #612]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801de92:	08db      	lsrs	r3, r3, #3
 801de94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de98:	693a      	ldr	r2, [r7, #16]
 801de9a:	fb02 f303 	mul.w	r3, r2, r3
 801de9e:	ee07 3a90 	vmov	s15, r3
 801dea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801deaa:	697b      	ldr	r3, [r7, #20]
 801deac:	2b00      	cmp	r3, #0
 801deae:	f000 8111 	beq.w	801e0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801deb2:	69bb      	ldr	r3, [r7, #24]
 801deb4:	2b02      	cmp	r3, #2
 801deb6:	f000 8083 	beq.w	801dfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801deba:	69bb      	ldr	r3, [r7, #24]
 801debc:	2b02      	cmp	r3, #2
 801debe:	f200 80a1 	bhi.w	801e004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801dec2:	69bb      	ldr	r3, [r7, #24]
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d003      	beq.n	801ded0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dec8:	69bb      	ldr	r3, [r7, #24]
 801deca:	2b01      	cmp	r3, #1
 801decc:	d056      	beq.n	801df7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dece:	e099      	b.n	801e004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ded0:	4b88      	ldr	r3, [pc, #544]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	f003 0320 	and.w	r3, r3, #32
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d02d      	beq.n	801df38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dedc:	4b85      	ldr	r3, [pc, #532]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	08db      	lsrs	r3, r3, #3
 801dee2:	f003 0303 	and.w	r3, r3, #3
 801dee6:	4a84      	ldr	r2, [pc, #528]	; (801e0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801dee8:	fa22 f303 	lsr.w	r3, r2, r3
 801deec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801deee:	68bb      	ldr	r3, [r7, #8]
 801def0:	ee07 3a90 	vmov	s15, r3
 801def4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801def8:	697b      	ldr	r3, [r7, #20]
 801defa:	ee07 3a90 	vmov	s15, r3
 801defe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df06:	4b7b      	ldr	r3, [pc, #492]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df0e:	ee07 3a90 	vmov	s15, r3
 801df12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df16:	ed97 6a03 	vldr	s12, [r7, #12]
 801df1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801df1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801df36:	e087      	b.n	801e048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801df38:	697b      	ldr	r3, [r7, #20]
 801df3a:	ee07 3a90 	vmov	s15, r3
 801df3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e100 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801df46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df4a:	4b6a      	ldr	r3, [pc, #424]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df52:	ee07 3a90 	vmov	s15, r3
 801df56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df5a:	ed97 6a03 	vldr	s12, [r7, #12]
 801df5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801df62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df72:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df7a:	e065      	b.n	801e048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801df7c:	697b      	ldr	r3, [r7, #20]
 801df7e:	ee07 3a90 	vmov	s15, r3
 801df82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801df8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df8e:	4b59      	ldr	r3, [pc, #356]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df96:	ee07 3a90 	vmov	s15, r3
 801df9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df9e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dfa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dfae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dfba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dfbe:	e043      	b.n	801e048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dfc0:	697b      	ldr	r3, [r7, #20]
 801dfc2:	ee07 3a90 	vmov	s15, r3
 801dfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801dfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dfd2:	4b48      	ldr	r3, [pc, #288]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfda:	ee07 3a90 	vmov	s15, r3
 801dfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dfe2:	ed97 6a03 	vldr	s12, [r7, #12]
 801dfe6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e002:	e021      	b.n	801e048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e004:	697b      	ldr	r3, [r7, #20]
 801e006:	ee07 3a90 	vmov	s15, r3
 801e00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e00e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e016:	4b37      	ldr	r3, [pc, #220]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e01e:	ee07 3a90 	vmov	s15, r3
 801e022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e026:	ed97 6a03 	vldr	s12, [r7, #12]
 801e02a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e046:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801e048:	4b2a      	ldr	r3, [pc, #168]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e04c:	0a5b      	lsrs	r3, r3, #9
 801e04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e052:	ee07 3a90 	vmov	s15, r3
 801e056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e05a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e062:	edd7 6a07 	vldr	s13, [r7, #28]
 801e066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e06e:	ee17 2a90 	vmov	r2, s15
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801e076:	4b1f      	ldr	r3, [pc, #124]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e07a:	0c1b      	lsrs	r3, r3, #16
 801e07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e080:	ee07 3a90 	vmov	s15, r3
 801e084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e090:	edd7 6a07 	vldr	s13, [r7, #28]
 801e094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e09c:	ee17 2a90 	vmov	r2, s15
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801e0a4:	4b13      	ldr	r3, [pc, #76]	; (801e0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0a8:	0e1b      	lsrs	r3, r3, #24
 801e0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e0ae:	ee07 3a90 	vmov	s15, r3
 801e0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e0be:	edd7 6a07 	vldr	s13, [r7, #28]
 801e0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e0ca:	ee17 2a90 	vmov	r2, s15
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e0d2:	e008      	b.n	801e0e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	2200      	movs	r2, #0
 801e0d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	2200      	movs	r2, #0
 801e0de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	2200      	movs	r2, #0
 801e0e4:	609a      	str	r2, [r3, #8]
}
 801e0e6:	bf00      	nop
 801e0e8:	3724      	adds	r7, #36	; 0x24
 801e0ea:	46bd      	mov	sp, r7
 801e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0f0:	4770      	bx	lr
 801e0f2:	bf00      	nop
 801e0f4:	58024400 	.word	0x58024400
 801e0f8:	03d09000 	.word	0x03d09000
 801e0fc:	46000000 	.word	0x46000000
 801e100:	4c742400 	.word	0x4c742400
 801e104:	4a742400 	.word	0x4a742400
 801e108:	4af42400 	.word	0x4af42400

0801e10c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801e10c:	b480      	push	{r7}
 801e10e:	b089      	sub	sp, #36	; 0x24
 801e110:	af00      	add	r7, sp, #0
 801e112:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e114:	4ba0      	ldr	r3, [pc, #640]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e118:	f003 0303 	and.w	r3, r3, #3
 801e11c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801e11e:	4b9e      	ldr	r3, [pc, #632]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e122:	091b      	lsrs	r3, r3, #4
 801e124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e128:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801e12a:	4b9b      	ldr	r3, [pc, #620]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e12e:	f003 0301 	and.w	r3, r3, #1
 801e132:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801e134:	4b98      	ldr	r3, [pc, #608]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e138:	08db      	lsrs	r3, r3, #3
 801e13a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e13e:	693a      	ldr	r2, [r7, #16]
 801e140:	fb02 f303 	mul.w	r3, r2, r3
 801e144:	ee07 3a90 	vmov	s15, r3
 801e148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e14c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801e150:	697b      	ldr	r3, [r7, #20]
 801e152:	2b00      	cmp	r3, #0
 801e154:	f000 8111 	beq.w	801e37a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801e158:	69bb      	ldr	r3, [r7, #24]
 801e15a:	2b02      	cmp	r3, #2
 801e15c:	f000 8083 	beq.w	801e266 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801e160:	69bb      	ldr	r3, [r7, #24]
 801e162:	2b02      	cmp	r3, #2
 801e164:	f200 80a1 	bhi.w	801e2aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801e168:	69bb      	ldr	r3, [r7, #24]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d003      	beq.n	801e176 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801e16e:	69bb      	ldr	r3, [r7, #24]
 801e170:	2b01      	cmp	r3, #1
 801e172:	d056      	beq.n	801e222 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801e174:	e099      	b.n	801e2aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e176:	4b88      	ldr	r3, [pc, #544]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	f003 0320 	and.w	r3, r3, #32
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d02d      	beq.n	801e1de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e182:	4b85      	ldr	r3, [pc, #532]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	08db      	lsrs	r3, r3, #3
 801e188:	f003 0303 	and.w	r3, r3, #3
 801e18c:	4a83      	ldr	r2, [pc, #524]	; (801e39c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801e18e:	fa22 f303 	lsr.w	r3, r2, r3
 801e192:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e194:	68bb      	ldr	r3, [r7, #8]
 801e196:	ee07 3a90 	vmov	s15, r3
 801e19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e19e:	697b      	ldr	r3, [r7, #20]
 801e1a0:	ee07 3a90 	vmov	s15, r3
 801e1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1ac:	4b7a      	ldr	r3, [pc, #488]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1b4:	ee07 3a90 	vmov	s15, r3
 801e1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1bc:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e1c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e1dc:	e087      	b.n	801e2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e1de:	697b      	ldr	r3, [r7, #20]
 801e1e0:	ee07 3a90 	vmov	s15, r3
 801e1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1f0:	4b69      	ldr	r3, [pc, #420]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1f8:	ee07 3a90 	vmov	s15, r3
 801e1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e200:	ed97 6a03 	vldr	s12, [r7, #12]
 801e204:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e20c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e218:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e21c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e220:	e065      	b.n	801e2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e222:	697b      	ldr	r3, [r7, #20]
 801e224:	ee07 3a90 	vmov	s15, r3
 801e228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e22c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e234:	4b58      	ldr	r3, [pc, #352]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e23c:	ee07 3a90 	vmov	s15, r3
 801e240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e244:	ed97 6a03 	vldr	s12, [r7, #12]
 801e248:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e24c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e260:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e264:	e043      	b.n	801e2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e266:	697b      	ldr	r3, [r7, #20]
 801e268:	ee07 3a90 	vmov	s15, r3
 801e26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e270:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e3ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e278:	4b47      	ldr	r3, [pc, #284]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e280:	ee07 3a90 	vmov	s15, r3
 801e284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e288:	ed97 6a03 	vldr	s12, [r7, #12]
 801e28c:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e29c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e2a8:	e021      	b.n	801e2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e2aa:	697b      	ldr	r3, [r7, #20]
 801e2ac:	ee07 3a90 	vmov	s15, r3
 801e2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e2b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e2bc:	4b36      	ldr	r3, [pc, #216]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e2c4:	ee07 3a90 	vmov	s15, r3
 801e2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e2cc:	ed97 6a03 	vldr	s12, [r7, #12]
 801e2d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e2d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e2d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e2dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e2e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e2ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e2ee:	4b2a      	ldr	r3, [pc, #168]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2f2:	0a5b      	lsrs	r3, r3, #9
 801e2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e2f8:	ee07 3a90 	vmov	s15, r3
 801e2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e304:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e308:	edd7 6a07 	vldr	s13, [r7, #28]
 801e30c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e314:	ee17 2a90 	vmov	r2, s15
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e31c:	4b1e      	ldr	r3, [pc, #120]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e320:	0c1b      	lsrs	r3, r3, #16
 801e322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e326:	ee07 3a90 	vmov	s15, r3
 801e32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e32e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e332:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e336:	edd7 6a07 	vldr	s13, [r7, #28]
 801e33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e342:	ee17 2a90 	vmov	r2, s15
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e34a:	4b13      	ldr	r3, [pc, #76]	; (801e398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e34e:	0e1b      	lsrs	r3, r3, #24
 801e350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e354:	ee07 3a90 	vmov	s15, r3
 801e358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e35c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e360:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e364:	edd7 6a07 	vldr	s13, [r7, #28]
 801e368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e370:	ee17 2a90 	vmov	r2, s15
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e378:	e008      	b.n	801e38c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	2200      	movs	r2, #0
 801e37e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	2200      	movs	r2, #0
 801e384:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	2200      	movs	r2, #0
 801e38a:	609a      	str	r2, [r3, #8]
}
 801e38c:	bf00      	nop
 801e38e:	3724      	adds	r7, #36	; 0x24
 801e390:	46bd      	mov	sp, r7
 801e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e396:	4770      	bx	lr
 801e398:	58024400 	.word	0x58024400
 801e39c:	03d09000 	.word	0x03d09000
 801e3a0:	46000000 	.word	0x46000000
 801e3a4:	4c742400 	.word	0x4c742400
 801e3a8:	4a742400 	.word	0x4a742400
 801e3ac:	4af42400 	.word	0x4af42400

0801e3b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b084      	sub	sp, #16
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	6078      	str	r0, [r7, #4]
 801e3b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e3be:	4b53      	ldr	r3, [pc, #332]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3c2:	f003 0303 	and.w	r3, r3, #3
 801e3c6:	2b03      	cmp	r3, #3
 801e3c8:	d101      	bne.n	801e3ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e3ca:	2301      	movs	r3, #1
 801e3cc:	e099      	b.n	801e502 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e3ce:	4b4f      	ldr	r3, [pc, #316]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	4a4e      	ldr	r2, [pc, #312]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e3d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e3da:	f7f6 ffe9 	bl	80153b0 <HAL_GetTick>
 801e3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e3e0:	e008      	b.n	801e3f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e3e2:	f7f6 ffe5 	bl	80153b0 <HAL_GetTick>
 801e3e6:	4602      	mov	r2, r0
 801e3e8:	68bb      	ldr	r3, [r7, #8]
 801e3ea:	1ad3      	subs	r3, r2, r3
 801e3ec:	2b02      	cmp	r3, #2
 801e3ee:	d901      	bls.n	801e3f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e3f0:	2303      	movs	r3, #3
 801e3f2:	e086      	b.n	801e502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e3f4:	4b45      	ldr	r3, [pc, #276]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d1f0      	bne.n	801e3e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e400:	4b42      	ldr	r3, [pc, #264]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e404:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	031b      	lsls	r3, r3, #12
 801e40e:	493f      	ldr	r1, [pc, #252]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e410:	4313      	orrs	r3, r2
 801e412:	628b      	str	r3, [r1, #40]	; 0x28
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	685b      	ldr	r3, [r3, #4]
 801e418:	3b01      	subs	r3, #1
 801e41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	689b      	ldr	r3, [r3, #8]
 801e422:	3b01      	subs	r3, #1
 801e424:	025b      	lsls	r3, r3, #9
 801e426:	b29b      	uxth	r3, r3
 801e428:	431a      	orrs	r2, r3
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	68db      	ldr	r3, [r3, #12]
 801e42e:	3b01      	subs	r3, #1
 801e430:	041b      	lsls	r3, r3, #16
 801e432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e436:	431a      	orrs	r2, r3
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	691b      	ldr	r3, [r3, #16]
 801e43c:	3b01      	subs	r3, #1
 801e43e:	061b      	lsls	r3, r3, #24
 801e440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e444:	4931      	ldr	r1, [pc, #196]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e446:	4313      	orrs	r3, r2
 801e448:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e44a:	4b30      	ldr	r3, [pc, #192]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e44e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	695b      	ldr	r3, [r3, #20]
 801e456:	492d      	ldr	r1, [pc, #180]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e458:	4313      	orrs	r3, r2
 801e45a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e45c:	4b2b      	ldr	r3, [pc, #172]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e460:	f023 0220 	bic.w	r2, r3, #32
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	699b      	ldr	r3, [r3, #24]
 801e468:	4928      	ldr	r1, [pc, #160]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e46a:	4313      	orrs	r3, r2
 801e46c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e46e:	4b27      	ldr	r3, [pc, #156]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e472:	4a26      	ldr	r2, [pc, #152]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e474:	f023 0310 	bic.w	r3, r3, #16
 801e478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e47a:	4b24      	ldr	r3, [pc, #144]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e47c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e47e:	4b24      	ldr	r3, [pc, #144]	; (801e510 <RCCEx_PLL2_Config+0x160>)
 801e480:	4013      	ands	r3, r2
 801e482:	687a      	ldr	r2, [r7, #4]
 801e484:	69d2      	ldr	r2, [r2, #28]
 801e486:	00d2      	lsls	r2, r2, #3
 801e488:	4920      	ldr	r1, [pc, #128]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e48a:	4313      	orrs	r3, r2
 801e48c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e48e:	4b1f      	ldr	r3, [pc, #124]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e492:	4a1e      	ldr	r2, [pc, #120]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e494:	f043 0310 	orr.w	r3, r3, #16
 801e498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e49a:	683b      	ldr	r3, [r7, #0]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d106      	bne.n	801e4ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e4a0:	4b1a      	ldr	r3, [pc, #104]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4a4:	4a19      	ldr	r2, [pc, #100]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e4ac:	e00f      	b.n	801e4ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e4ae:	683b      	ldr	r3, [r7, #0]
 801e4b0:	2b01      	cmp	r3, #1
 801e4b2:	d106      	bne.n	801e4c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e4b4:	4b15      	ldr	r3, [pc, #84]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4b8:	4a14      	ldr	r2, [pc, #80]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e4be:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e4c0:	e005      	b.n	801e4ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e4c2:	4b12      	ldr	r3, [pc, #72]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4c6:	4a11      	ldr	r2, [pc, #68]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e4cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e4ce:	4b0f      	ldr	r3, [pc, #60]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	4a0e      	ldr	r2, [pc, #56]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e4da:	f7f6 ff69 	bl	80153b0 <HAL_GetTick>
 801e4de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e4e0:	e008      	b.n	801e4f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e4e2:	f7f6 ff65 	bl	80153b0 <HAL_GetTick>
 801e4e6:	4602      	mov	r2, r0
 801e4e8:	68bb      	ldr	r3, [r7, #8]
 801e4ea:	1ad3      	subs	r3, r2, r3
 801e4ec:	2b02      	cmp	r3, #2
 801e4ee:	d901      	bls.n	801e4f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e4f0:	2303      	movs	r3, #3
 801e4f2:	e006      	b.n	801e502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e4f4:	4b05      	ldr	r3, [pc, #20]	; (801e50c <RCCEx_PLL2_Config+0x15c>)
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d0f0      	beq.n	801e4e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e500:	7bfb      	ldrb	r3, [r7, #15]
}
 801e502:	4618      	mov	r0, r3
 801e504:	3710      	adds	r7, #16
 801e506:	46bd      	mov	sp, r7
 801e508:	bd80      	pop	{r7, pc}
 801e50a:	bf00      	nop
 801e50c:	58024400 	.word	0x58024400
 801e510:	ffff0007 	.word	0xffff0007

0801e514 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b084      	sub	sp, #16
 801e518:	af00      	add	r7, sp, #0
 801e51a:	6078      	str	r0, [r7, #4]
 801e51c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e51e:	2300      	movs	r3, #0
 801e520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e522:	4b53      	ldr	r3, [pc, #332]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e526:	f003 0303 	and.w	r3, r3, #3
 801e52a:	2b03      	cmp	r3, #3
 801e52c:	d101      	bne.n	801e532 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e52e:	2301      	movs	r3, #1
 801e530:	e099      	b.n	801e666 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e532:	4b4f      	ldr	r3, [pc, #316]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	4a4e      	ldr	r2, [pc, #312]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e53c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e53e:	f7f6 ff37 	bl	80153b0 <HAL_GetTick>
 801e542:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e544:	e008      	b.n	801e558 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e546:	f7f6 ff33 	bl	80153b0 <HAL_GetTick>
 801e54a:	4602      	mov	r2, r0
 801e54c:	68bb      	ldr	r3, [r7, #8]
 801e54e:	1ad3      	subs	r3, r2, r3
 801e550:	2b02      	cmp	r3, #2
 801e552:	d901      	bls.n	801e558 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e554:	2303      	movs	r3, #3
 801e556:	e086      	b.n	801e666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e558:	4b45      	ldr	r3, [pc, #276]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e560:	2b00      	cmp	r3, #0
 801e562:	d1f0      	bne.n	801e546 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e564:	4b42      	ldr	r3, [pc, #264]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e568:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	051b      	lsls	r3, r3, #20
 801e572:	493f      	ldr	r1, [pc, #252]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e574:	4313      	orrs	r3, r2
 801e576:	628b      	str	r3, [r1, #40]	; 0x28
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	685b      	ldr	r3, [r3, #4]
 801e57c:	3b01      	subs	r3, #1
 801e57e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	689b      	ldr	r3, [r3, #8]
 801e586:	3b01      	subs	r3, #1
 801e588:	025b      	lsls	r3, r3, #9
 801e58a:	b29b      	uxth	r3, r3
 801e58c:	431a      	orrs	r2, r3
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	68db      	ldr	r3, [r3, #12]
 801e592:	3b01      	subs	r3, #1
 801e594:	041b      	lsls	r3, r3, #16
 801e596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e59a:	431a      	orrs	r2, r3
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	691b      	ldr	r3, [r3, #16]
 801e5a0:	3b01      	subs	r3, #1
 801e5a2:	061b      	lsls	r3, r3, #24
 801e5a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e5a8:	4931      	ldr	r1, [pc, #196]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5aa:	4313      	orrs	r3, r2
 801e5ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e5ae:	4b30      	ldr	r3, [pc, #192]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	695b      	ldr	r3, [r3, #20]
 801e5ba:	492d      	ldr	r1, [pc, #180]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5bc:	4313      	orrs	r3, r2
 801e5be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e5c0:	4b2b      	ldr	r3, [pc, #172]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	699b      	ldr	r3, [r3, #24]
 801e5cc:	4928      	ldr	r1, [pc, #160]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5ce:	4313      	orrs	r3, r2
 801e5d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e5d2:	4b27      	ldr	r3, [pc, #156]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5d6:	4a26      	ldr	r2, [pc, #152]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e5dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e5de:	4b24      	ldr	r3, [pc, #144]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e5e2:	4b24      	ldr	r3, [pc, #144]	; (801e674 <RCCEx_PLL3_Config+0x160>)
 801e5e4:	4013      	ands	r3, r2
 801e5e6:	687a      	ldr	r2, [r7, #4]
 801e5e8:	69d2      	ldr	r2, [r2, #28]
 801e5ea:	00d2      	lsls	r2, r2, #3
 801e5ec:	4920      	ldr	r1, [pc, #128]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5ee:	4313      	orrs	r3, r2
 801e5f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e5f2:	4b1f      	ldr	r3, [pc, #124]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5f6:	4a1e      	ldr	r2, [pc, #120]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e5f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d106      	bne.n	801e612 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e604:	4b1a      	ldr	r3, [pc, #104]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e608:	4a19      	ldr	r2, [pc, #100]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e60a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e60e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e610:	e00f      	b.n	801e632 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e612:	683b      	ldr	r3, [r7, #0]
 801e614:	2b01      	cmp	r3, #1
 801e616:	d106      	bne.n	801e626 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e618:	4b15      	ldr	r3, [pc, #84]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e61c:	4a14      	ldr	r2, [pc, #80]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e61e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e622:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e624:	e005      	b.n	801e632 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e626:	4b12      	ldr	r3, [pc, #72]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e62a:	4a11      	ldr	r2, [pc, #68]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e62c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e630:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e632:	4b0f      	ldr	r3, [pc, #60]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	4a0e      	ldr	r2, [pc, #56]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e63c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e63e:	f7f6 feb7 	bl	80153b0 <HAL_GetTick>
 801e642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e644:	e008      	b.n	801e658 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e646:	f7f6 feb3 	bl	80153b0 <HAL_GetTick>
 801e64a:	4602      	mov	r2, r0
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	1ad3      	subs	r3, r2, r3
 801e650:	2b02      	cmp	r3, #2
 801e652:	d901      	bls.n	801e658 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e654:	2303      	movs	r3, #3
 801e656:	e006      	b.n	801e666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e658:	4b05      	ldr	r3, [pc, #20]	; (801e670 <RCCEx_PLL3_Config+0x15c>)
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e660:	2b00      	cmp	r3, #0
 801e662:	d0f0      	beq.n	801e646 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e664:	7bfb      	ldrb	r3, [r7, #15]
}
 801e666:	4618      	mov	r0, r3
 801e668:	3710      	adds	r7, #16
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}
 801e66e:	bf00      	nop
 801e670:	58024400 	.word	0x58024400
 801e674:	ffff0007 	.word	0xffff0007

0801e678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e678:	b580      	push	{r7, lr}
 801e67a:	b082      	sub	sp, #8
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d101      	bne.n	801e68a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e686:	2301      	movs	r3, #1
 801e688:	e049      	b.n	801e71e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e690:	b2db      	uxtb	r3, r3
 801e692:	2b00      	cmp	r3, #0
 801e694:	d106      	bne.n	801e6a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	2200      	movs	r2, #0
 801e69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e69e:	6878      	ldr	r0, [r7, #4]
 801e6a0:	f7f6 f88a 	bl	80147b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	2202      	movs	r2, #2
 801e6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681a      	ldr	r2, [r3, #0]
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	3304      	adds	r3, #4
 801e6b4:	4619      	mov	r1, r3
 801e6b6:	4610      	mov	r0, r2
 801e6b8:	f001 f8d0 	bl	801f85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	2201      	movs	r2, #1
 801e6c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	2201      	movs	r2, #1
 801e6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	2201      	movs	r2, #1
 801e6d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	2201      	movs	r2, #1
 801e6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	2201      	movs	r2, #1
 801e6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	2201      	movs	r2, #1
 801e6e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	2201      	movs	r2, #1
 801e6f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	2201      	movs	r2, #1
 801e6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	2201      	movs	r2, #1
 801e700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	2201      	movs	r2, #1
 801e708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	2201      	movs	r2, #1
 801e710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2201      	movs	r2, #1
 801e718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e71c:	2300      	movs	r3, #0
}
 801e71e:	4618      	mov	r0, r3
 801e720:	3708      	adds	r7, #8
 801e722:	46bd      	mov	sp, r7
 801e724:	bd80      	pop	{r7, pc}
	...

0801e728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e728:	b480      	push	{r7}
 801e72a:	b085      	sub	sp, #20
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e736:	b2db      	uxtb	r3, r3
 801e738:	2b01      	cmp	r3, #1
 801e73a:	d001      	beq.n	801e740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e73c:	2301      	movs	r3, #1
 801e73e:	e056      	b.n	801e7ee <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	2202      	movs	r2, #2
 801e744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	4a2b      	ldr	r2, [pc, #172]	; (801e7fc <HAL_TIM_Base_Start+0xd4>)
 801e74e:	4293      	cmp	r3, r2
 801e750:	d02c      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e75a:	d027      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	4a27      	ldr	r2, [pc, #156]	; (801e800 <HAL_TIM_Base_Start+0xd8>)
 801e762:	4293      	cmp	r3, r2
 801e764:	d022      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	4a26      	ldr	r2, [pc, #152]	; (801e804 <HAL_TIM_Base_Start+0xdc>)
 801e76c:	4293      	cmp	r3, r2
 801e76e:	d01d      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	4a24      	ldr	r2, [pc, #144]	; (801e808 <HAL_TIM_Base_Start+0xe0>)
 801e776:	4293      	cmp	r3, r2
 801e778:	d018      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	4a23      	ldr	r2, [pc, #140]	; (801e80c <HAL_TIM_Base_Start+0xe4>)
 801e780:	4293      	cmp	r3, r2
 801e782:	d013      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	4a21      	ldr	r2, [pc, #132]	; (801e810 <HAL_TIM_Base_Start+0xe8>)
 801e78a:	4293      	cmp	r3, r2
 801e78c:	d00e      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	4a20      	ldr	r2, [pc, #128]	; (801e814 <HAL_TIM_Base_Start+0xec>)
 801e794:	4293      	cmp	r3, r2
 801e796:	d009      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	4a1e      	ldr	r2, [pc, #120]	; (801e818 <HAL_TIM_Base_Start+0xf0>)
 801e79e:	4293      	cmp	r3, r2
 801e7a0:	d004      	beq.n	801e7ac <HAL_TIM_Base_Start+0x84>
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	4a1d      	ldr	r2, [pc, #116]	; (801e81c <HAL_TIM_Base_Start+0xf4>)
 801e7a8:	4293      	cmp	r3, r2
 801e7aa:	d115      	bne.n	801e7d8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	689a      	ldr	r2, [r3, #8]
 801e7b2:	4b1b      	ldr	r3, [pc, #108]	; (801e820 <HAL_TIM_Base_Start+0xf8>)
 801e7b4:	4013      	ands	r3, r2
 801e7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	2b06      	cmp	r3, #6
 801e7bc:	d015      	beq.n	801e7ea <HAL_TIM_Base_Start+0xc2>
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e7c4:	d011      	beq.n	801e7ea <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	681a      	ldr	r2, [r3, #0]
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	f042 0201 	orr.w	r2, r2, #1
 801e7d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7d6:	e008      	b.n	801e7ea <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	681a      	ldr	r2, [r3, #0]
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	f042 0201 	orr.w	r2, r2, #1
 801e7e6:	601a      	str	r2, [r3, #0]
 801e7e8:	e000      	b.n	801e7ec <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e7ec:	2300      	movs	r3, #0
}
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	3714      	adds	r7, #20
 801e7f2:	46bd      	mov	sp, r7
 801e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f8:	4770      	bx	lr
 801e7fa:	bf00      	nop
 801e7fc:	40010000 	.word	0x40010000
 801e800:	40000400 	.word	0x40000400
 801e804:	40000800 	.word	0x40000800
 801e808:	40000c00 	.word	0x40000c00
 801e80c:	40010400 	.word	0x40010400
 801e810:	40001800 	.word	0x40001800
 801e814:	40014000 	.word	0x40014000
 801e818:	4000e000 	.word	0x4000e000
 801e81c:	4000e400 	.word	0x4000e400
 801e820:	00010007 	.word	0x00010007

0801e824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e824:	b480      	push	{r7}
 801e826:	b085      	sub	sp, #20
 801e828:	af00      	add	r7, sp, #0
 801e82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e832:	b2db      	uxtb	r3, r3
 801e834:	2b01      	cmp	r3, #1
 801e836:	d001      	beq.n	801e83c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e838:	2301      	movs	r3, #1
 801e83a:	e05e      	b.n	801e8fa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	2202      	movs	r2, #2
 801e840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	68da      	ldr	r2, [r3, #12]
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	f042 0201 	orr.w	r2, r2, #1
 801e852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	4a2b      	ldr	r2, [pc, #172]	; (801e908 <HAL_TIM_Base_Start_IT+0xe4>)
 801e85a:	4293      	cmp	r3, r2
 801e85c:	d02c      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e866:	d027      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	4a27      	ldr	r2, [pc, #156]	; (801e90c <HAL_TIM_Base_Start_IT+0xe8>)
 801e86e:	4293      	cmp	r3, r2
 801e870:	d022      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	4a26      	ldr	r2, [pc, #152]	; (801e910 <HAL_TIM_Base_Start_IT+0xec>)
 801e878:	4293      	cmp	r3, r2
 801e87a:	d01d      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	4a24      	ldr	r2, [pc, #144]	; (801e914 <HAL_TIM_Base_Start_IT+0xf0>)
 801e882:	4293      	cmp	r3, r2
 801e884:	d018      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	4a23      	ldr	r2, [pc, #140]	; (801e918 <HAL_TIM_Base_Start_IT+0xf4>)
 801e88c:	4293      	cmp	r3, r2
 801e88e:	d013      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	4a21      	ldr	r2, [pc, #132]	; (801e91c <HAL_TIM_Base_Start_IT+0xf8>)
 801e896:	4293      	cmp	r3, r2
 801e898:	d00e      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	4a20      	ldr	r2, [pc, #128]	; (801e920 <HAL_TIM_Base_Start_IT+0xfc>)
 801e8a0:	4293      	cmp	r3, r2
 801e8a2:	d009      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	4a1e      	ldr	r2, [pc, #120]	; (801e924 <HAL_TIM_Base_Start_IT+0x100>)
 801e8aa:	4293      	cmp	r3, r2
 801e8ac:	d004      	beq.n	801e8b8 <HAL_TIM_Base_Start_IT+0x94>
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	4a1d      	ldr	r2, [pc, #116]	; (801e928 <HAL_TIM_Base_Start_IT+0x104>)
 801e8b4:	4293      	cmp	r3, r2
 801e8b6:	d115      	bne.n	801e8e4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	689a      	ldr	r2, [r3, #8]
 801e8be:	4b1b      	ldr	r3, [pc, #108]	; (801e92c <HAL_TIM_Base_Start_IT+0x108>)
 801e8c0:	4013      	ands	r3, r2
 801e8c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	2b06      	cmp	r3, #6
 801e8c8:	d015      	beq.n	801e8f6 <HAL_TIM_Base_Start_IT+0xd2>
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e8d0:	d011      	beq.n	801e8f6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	681a      	ldr	r2, [r3, #0]
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	f042 0201 	orr.w	r2, r2, #1
 801e8e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e8e2:	e008      	b.n	801e8f6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	681b      	ldr	r3, [r3, #0]
 801e8e8:	681a      	ldr	r2, [r3, #0]
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	f042 0201 	orr.w	r2, r2, #1
 801e8f2:	601a      	str	r2, [r3, #0]
 801e8f4:	e000      	b.n	801e8f8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e8f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e8f8:	2300      	movs	r3, #0
}
 801e8fa:	4618      	mov	r0, r3
 801e8fc:	3714      	adds	r7, #20
 801e8fe:	46bd      	mov	sp, r7
 801e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e904:	4770      	bx	lr
 801e906:	bf00      	nop
 801e908:	40010000 	.word	0x40010000
 801e90c:	40000400 	.word	0x40000400
 801e910:	40000800 	.word	0x40000800
 801e914:	40000c00 	.word	0x40000c00
 801e918:	40010400 	.word	0x40010400
 801e91c:	40001800 	.word	0x40001800
 801e920:	40014000 	.word	0x40014000
 801e924:	4000e000 	.word	0x4000e000
 801e928:	4000e400 	.word	0x4000e400
 801e92c:	00010007 	.word	0x00010007

0801e930 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801e930:	b480      	push	{r7}
 801e932:	b083      	sub	sp, #12
 801e934:	af00      	add	r7, sp, #0
 801e936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	68da      	ldr	r2, [r3, #12]
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	f022 0201 	bic.w	r2, r2, #1
 801e946:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	6a1a      	ldr	r2, [r3, #32]
 801e94e:	f241 1311 	movw	r3, #4369	; 0x1111
 801e952:	4013      	ands	r3, r2
 801e954:	2b00      	cmp	r3, #0
 801e956:	d10f      	bne.n	801e978 <HAL_TIM_Base_Stop_IT+0x48>
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	6a1a      	ldr	r2, [r3, #32]
 801e95e:	f240 4344 	movw	r3, #1092	; 0x444
 801e962:	4013      	ands	r3, r2
 801e964:	2b00      	cmp	r3, #0
 801e966:	d107      	bne.n	801e978 <HAL_TIM_Base_Stop_IT+0x48>
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	681a      	ldr	r2, [r3, #0]
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	f022 0201 	bic.w	r2, r2, #1
 801e976:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	2201      	movs	r2, #1
 801e97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e980:	2300      	movs	r3, #0
}
 801e982:	4618      	mov	r0, r3
 801e984:	370c      	adds	r7, #12
 801e986:	46bd      	mov	sp, r7
 801e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e98c:	4770      	bx	lr

0801e98e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e98e:	b580      	push	{r7, lr}
 801e990:	b082      	sub	sp, #8
 801e992:	af00      	add	r7, sp, #0
 801e994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d101      	bne.n	801e9a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e99c:	2301      	movs	r3, #1
 801e99e:	e049      	b.n	801ea34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e9a6:	b2db      	uxtb	r3, r3
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d106      	bne.n	801e9ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	2200      	movs	r2, #0
 801e9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e9b4:	6878      	ldr	r0, [r7, #4]
 801e9b6:	f000 f841 	bl	801ea3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	2202      	movs	r2, #2
 801e9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	681a      	ldr	r2, [r3, #0]
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	3304      	adds	r3, #4
 801e9ca:	4619      	mov	r1, r3
 801e9cc:	4610      	mov	r0, r2
 801e9ce:	f000 ff45 	bl	801f85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	2201      	movs	r2, #1
 801e9d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	2201      	movs	r2, #1
 801e9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	2201      	movs	r2, #1
 801e9e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	2201      	movs	r2, #1
 801e9ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	2201      	movs	r2, #1
 801e9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	2201      	movs	r2, #1
 801ea06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2201      	movs	r2, #1
 801ea0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	2201      	movs	r2, #1
 801ea16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	2201      	movs	r2, #1
 801ea1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	2201      	movs	r2, #1
 801ea26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	2201      	movs	r2, #1
 801ea2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ea32:	2300      	movs	r3, #0
}
 801ea34:	4618      	mov	r0, r3
 801ea36:	3708      	adds	r7, #8
 801ea38:	46bd      	mov	sp, r7
 801ea3a:	bd80      	pop	{r7, pc}

0801ea3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ea3c:	b480      	push	{r7}
 801ea3e:	b083      	sub	sp, #12
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ea44:	bf00      	nop
 801ea46:	370c      	adds	r7, #12
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea4e:	4770      	bx	lr

0801ea50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b084      	sub	sp, #16
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
 801ea58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d109      	bne.n	801ea74 <HAL_TIM_PWM_Start+0x24>
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ea66:	b2db      	uxtb	r3, r3
 801ea68:	2b01      	cmp	r3, #1
 801ea6a:	bf14      	ite	ne
 801ea6c:	2301      	movne	r3, #1
 801ea6e:	2300      	moveq	r3, #0
 801ea70:	b2db      	uxtb	r3, r3
 801ea72:	e03c      	b.n	801eaee <HAL_TIM_PWM_Start+0x9e>
 801ea74:	683b      	ldr	r3, [r7, #0]
 801ea76:	2b04      	cmp	r3, #4
 801ea78:	d109      	bne.n	801ea8e <HAL_TIM_PWM_Start+0x3e>
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ea80:	b2db      	uxtb	r3, r3
 801ea82:	2b01      	cmp	r3, #1
 801ea84:	bf14      	ite	ne
 801ea86:	2301      	movne	r3, #1
 801ea88:	2300      	moveq	r3, #0
 801ea8a:	b2db      	uxtb	r3, r3
 801ea8c:	e02f      	b.n	801eaee <HAL_TIM_PWM_Start+0x9e>
 801ea8e:	683b      	ldr	r3, [r7, #0]
 801ea90:	2b08      	cmp	r3, #8
 801ea92:	d109      	bne.n	801eaa8 <HAL_TIM_PWM_Start+0x58>
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ea9a:	b2db      	uxtb	r3, r3
 801ea9c:	2b01      	cmp	r3, #1
 801ea9e:	bf14      	ite	ne
 801eaa0:	2301      	movne	r3, #1
 801eaa2:	2300      	moveq	r3, #0
 801eaa4:	b2db      	uxtb	r3, r3
 801eaa6:	e022      	b.n	801eaee <HAL_TIM_PWM_Start+0x9e>
 801eaa8:	683b      	ldr	r3, [r7, #0]
 801eaaa:	2b0c      	cmp	r3, #12
 801eaac:	d109      	bne.n	801eac2 <HAL_TIM_PWM_Start+0x72>
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801eab4:	b2db      	uxtb	r3, r3
 801eab6:	2b01      	cmp	r3, #1
 801eab8:	bf14      	ite	ne
 801eaba:	2301      	movne	r3, #1
 801eabc:	2300      	moveq	r3, #0
 801eabe:	b2db      	uxtb	r3, r3
 801eac0:	e015      	b.n	801eaee <HAL_TIM_PWM_Start+0x9e>
 801eac2:	683b      	ldr	r3, [r7, #0]
 801eac4:	2b10      	cmp	r3, #16
 801eac6:	d109      	bne.n	801eadc <HAL_TIM_PWM_Start+0x8c>
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eace:	b2db      	uxtb	r3, r3
 801ead0:	2b01      	cmp	r3, #1
 801ead2:	bf14      	ite	ne
 801ead4:	2301      	movne	r3, #1
 801ead6:	2300      	moveq	r3, #0
 801ead8:	b2db      	uxtb	r3, r3
 801eada:	e008      	b.n	801eaee <HAL_TIM_PWM_Start+0x9e>
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eae2:	b2db      	uxtb	r3, r3
 801eae4:	2b01      	cmp	r3, #1
 801eae6:	bf14      	ite	ne
 801eae8:	2301      	movne	r3, #1
 801eaea:	2300      	moveq	r3, #0
 801eaec:	b2db      	uxtb	r3, r3
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d001      	beq.n	801eaf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801eaf2:	2301      	movs	r3, #1
 801eaf4:	e0ab      	b.n	801ec4e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eaf6:	683b      	ldr	r3, [r7, #0]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d104      	bne.n	801eb06 <HAL_TIM_PWM_Start+0xb6>
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	2202      	movs	r2, #2
 801eb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eb04:	e023      	b.n	801eb4e <HAL_TIM_PWM_Start+0xfe>
 801eb06:	683b      	ldr	r3, [r7, #0]
 801eb08:	2b04      	cmp	r3, #4
 801eb0a:	d104      	bne.n	801eb16 <HAL_TIM_PWM_Start+0xc6>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	2202      	movs	r2, #2
 801eb10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eb14:	e01b      	b.n	801eb4e <HAL_TIM_PWM_Start+0xfe>
 801eb16:	683b      	ldr	r3, [r7, #0]
 801eb18:	2b08      	cmp	r3, #8
 801eb1a:	d104      	bne.n	801eb26 <HAL_TIM_PWM_Start+0xd6>
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	2202      	movs	r2, #2
 801eb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eb24:	e013      	b.n	801eb4e <HAL_TIM_PWM_Start+0xfe>
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	2b0c      	cmp	r3, #12
 801eb2a:	d104      	bne.n	801eb36 <HAL_TIM_PWM_Start+0xe6>
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	2202      	movs	r2, #2
 801eb30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eb34:	e00b      	b.n	801eb4e <HAL_TIM_PWM_Start+0xfe>
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	2b10      	cmp	r3, #16
 801eb3a:	d104      	bne.n	801eb46 <HAL_TIM_PWM_Start+0xf6>
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	2202      	movs	r2, #2
 801eb40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eb44:	e003      	b.n	801eb4e <HAL_TIM_PWM_Start+0xfe>
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	2202      	movs	r2, #2
 801eb4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	2201      	movs	r2, #1
 801eb54:	6839      	ldr	r1, [r7, #0]
 801eb56:	4618      	mov	r0, r3
 801eb58:	f001 fbd0 	bl	80202fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	4a3d      	ldr	r2, [pc, #244]	; (801ec58 <HAL_TIM_PWM_Start+0x208>)
 801eb62:	4293      	cmp	r3, r2
 801eb64:	d013      	beq.n	801eb8e <HAL_TIM_PWM_Start+0x13e>
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	4a3c      	ldr	r2, [pc, #240]	; (801ec5c <HAL_TIM_PWM_Start+0x20c>)
 801eb6c:	4293      	cmp	r3, r2
 801eb6e:	d00e      	beq.n	801eb8e <HAL_TIM_PWM_Start+0x13e>
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	4a3a      	ldr	r2, [pc, #232]	; (801ec60 <HAL_TIM_PWM_Start+0x210>)
 801eb76:	4293      	cmp	r3, r2
 801eb78:	d009      	beq.n	801eb8e <HAL_TIM_PWM_Start+0x13e>
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	4a39      	ldr	r2, [pc, #228]	; (801ec64 <HAL_TIM_PWM_Start+0x214>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d004      	beq.n	801eb8e <HAL_TIM_PWM_Start+0x13e>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	4a37      	ldr	r2, [pc, #220]	; (801ec68 <HAL_TIM_PWM_Start+0x218>)
 801eb8a:	4293      	cmp	r3, r2
 801eb8c:	d101      	bne.n	801eb92 <HAL_TIM_PWM_Start+0x142>
 801eb8e:	2301      	movs	r3, #1
 801eb90:	e000      	b.n	801eb94 <HAL_TIM_PWM_Start+0x144>
 801eb92:	2300      	movs	r3, #0
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d007      	beq.n	801eba8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801eba6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	4a2a      	ldr	r2, [pc, #168]	; (801ec58 <HAL_TIM_PWM_Start+0x208>)
 801ebae:	4293      	cmp	r3, r2
 801ebb0:	d02c      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ebba:	d027      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	4a2a      	ldr	r2, [pc, #168]	; (801ec6c <HAL_TIM_PWM_Start+0x21c>)
 801ebc2:	4293      	cmp	r3, r2
 801ebc4:	d022      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	4a29      	ldr	r2, [pc, #164]	; (801ec70 <HAL_TIM_PWM_Start+0x220>)
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	d01d      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	681b      	ldr	r3, [r3, #0]
 801ebd4:	4a27      	ldr	r2, [pc, #156]	; (801ec74 <HAL_TIM_PWM_Start+0x224>)
 801ebd6:	4293      	cmp	r3, r2
 801ebd8:	d018      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	4a1f      	ldr	r2, [pc, #124]	; (801ec5c <HAL_TIM_PWM_Start+0x20c>)
 801ebe0:	4293      	cmp	r3, r2
 801ebe2:	d013      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	4a23      	ldr	r2, [pc, #140]	; (801ec78 <HAL_TIM_PWM_Start+0x228>)
 801ebea:	4293      	cmp	r3, r2
 801ebec:	d00e      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	4a1b      	ldr	r2, [pc, #108]	; (801ec60 <HAL_TIM_PWM_Start+0x210>)
 801ebf4:	4293      	cmp	r3, r2
 801ebf6:	d009      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	4a1f      	ldr	r2, [pc, #124]	; (801ec7c <HAL_TIM_PWM_Start+0x22c>)
 801ebfe:	4293      	cmp	r3, r2
 801ec00:	d004      	beq.n	801ec0c <HAL_TIM_PWM_Start+0x1bc>
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	4a1e      	ldr	r2, [pc, #120]	; (801ec80 <HAL_TIM_PWM_Start+0x230>)
 801ec08:	4293      	cmp	r3, r2
 801ec0a:	d115      	bne.n	801ec38 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	689a      	ldr	r2, [r3, #8]
 801ec12:	4b1c      	ldr	r3, [pc, #112]	; (801ec84 <HAL_TIM_PWM_Start+0x234>)
 801ec14:	4013      	ands	r3, r2
 801ec16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	2b06      	cmp	r3, #6
 801ec1c:	d015      	beq.n	801ec4a <HAL_TIM_PWM_Start+0x1fa>
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ec24:	d011      	beq.n	801ec4a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	681b      	ldr	r3, [r3, #0]
 801ec2a:	681a      	ldr	r2, [r3, #0]
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	f042 0201 	orr.w	r2, r2, #1
 801ec34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec36:	e008      	b.n	801ec4a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	681a      	ldr	r2, [r3, #0]
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	f042 0201 	orr.w	r2, r2, #1
 801ec46:	601a      	str	r2, [r3, #0]
 801ec48:	e000      	b.n	801ec4c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ec4c:	2300      	movs	r3, #0
}
 801ec4e:	4618      	mov	r0, r3
 801ec50:	3710      	adds	r7, #16
 801ec52:	46bd      	mov	sp, r7
 801ec54:	bd80      	pop	{r7, pc}
 801ec56:	bf00      	nop
 801ec58:	40010000 	.word	0x40010000
 801ec5c:	40010400 	.word	0x40010400
 801ec60:	40014000 	.word	0x40014000
 801ec64:	40014400 	.word	0x40014400
 801ec68:	40014800 	.word	0x40014800
 801ec6c:	40000400 	.word	0x40000400
 801ec70:	40000800 	.word	0x40000800
 801ec74:	40000c00 	.word	0x40000c00
 801ec78:	40001800 	.word	0x40001800
 801ec7c:	4000e000 	.word	0x4000e000
 801ec80:	4000e400 	.word	0x4000e400
 801ec84:	00010007 	.word	0x00010007

0801ec88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801ec88:	b580      	push	{r7, lr}
 801ec8a:	b082      	sub	sp, #8
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d101      	bne.n	801ec9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801ec96:	2301      	movs	r3, #1
 801ec98:	e049      	b.n	801ed2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ec9a:	687b      	ldr	r3, [r7, #4]
 801ec9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eca0:	b2db      	uxtb	r3, r3
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d106      	bne.n	801ecb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	2200      	movs	r2, #0
 801ecaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801ecae:	6878      	ldr	r0, [r7, #4]
 801ecb0:	f000 f841 	bl	801ed36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	2202      	movs	r2, #2
 801ecb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	681a      	ldr	r2, [r3, #0]
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	3304      	adds	r3, #4
 801ecc4:	4619      	mov	r1, r3
 801ecc6:	4610      	mov	r0, r2
 801ecc8:	f000 fdc8 	bl	801f85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	2201      	movs	r2, #1
 801ecd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	2201      	movs	r2, #1
 801ecd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	2201      	movs	r2, #1
 801ece0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	2201      	movs	r2, #1
 801ece8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	2201      	movs	r2, #1
 801ecf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	2201      	movs	r2, #1
 801ecf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	2201      	movs	r2, #1
 801ed00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	2201      	movs	r2, #1
 801ed08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	2201      	movs	r2, #1
 801ed10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	2201      	movs	r2, #1
 801ed18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	2201      	movs	r2, #1
 801ed20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	2201      	movs	r2, #1
 801ed28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ed2c:	2300      	movs	r3, #0
}
 801ed2e:	4618      	mov	r0, r3
 801ed30:	3708      	adds	r7, #8
 801ed32:	46bd      	mov	sp, r7
 801ed34:	bd80      	pop	{r7, pc}

0801ed36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801ed36:	b480      	push	{r7}
 801ed38:	b083      	sub	sp, #12
 801ed3a:	af00      	add	r7, sp, #0
 801ed3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801ed3e:	bf00      	nop
 801ed40:	370c      	adds	r7, #12
 801ed42:	46bd      	mov	sp, r7
 801ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed48:	4770      	bx	lr
	...

0801ed4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ed4c:	b580      	push	{r7, lr}
 801ed4e:	b084      	sub	sp, #16
 801ed50:	af00      	add	r7, sp, #0
 801ed52:	6078      	str	r0, [r7, #4]
 801ed54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ed56:	2300      	movs	r3, #0
 801ed58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801ed5a:	683b      	ldr	r3, [r7, #0]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d104      	bne.n	801ed6a <HAL_TIM_IC_Start_IT+0x1e>
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ed66:	b2db      	uxtb	r3, r3
 801ed68:	e023      	b.n	801edb2 <HAL_TIM_IC_Start_IT+0x66>
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	2b04      	cmp	r3, #4
 801ed6e:	d104      	bne.n	801ed7a <HAL_TIM_IC_Start_IT+0x2e>
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ed76:	b2db      	uxtb	r3, r3
 801ed78:	e01b      	b.n	801edb2 <HAL_TIM_IC_Start_IT+0x66>
 801ed7a:	683b      	ldr	r3, [r7, #0]
 801ed7c:	2b08      	cmp	r3, #8
 801ed7e:	d104      	bne.n	801ed8a <HAL_TIM_IC_Start_IT+0x3e>
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ed86:	b2db      	uxtb	r3, r3
 801ed88:	e013      	b.n	801edb2 <HAL_TIM_IC_Start_IT+0x66>
 801ed8a:	683b      	ldr	r3, [r7, #0]
 801ed8c:	2b0c      	cmp	r3, #12
 801ed8e:	d104      	bne.n	801ed9a <HAL_TIM_IC_Start_IT+0x4e>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ed96:	b2db      	uxtb	r3, r3
 801ed98:	e00b      	b.n	801edb2 <HAL_TIM_IC_Start_IT+0x66>
 801ed9a:	683b      	ldr	r3, [r7, #0]
 801ed9c:	2b10      	cmp	r3, #16
 801ed9e:	d104      	bne.n	801edaa <HAL_TIM_IC_Start_IT+0x5e>
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eda6:	b2db      	uxtb	r3, r3
 801eda8:	e003      	b.n	801edb2 <HAL_TIM_IC_Start_IT+0x66>
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801edb0:	b2db      	uxtb	r3, r3
 801edb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801edb4:	683b      	ldr	r3, [r7, #0]
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d104      	bne.n	801edc4 <HAL_TIM_IC_Start_IT+0x78>
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801edc0:	b2db      	uxtb	r3, r3
 801edc2:	e013      	b.n	801edec <HAL_TIM_IC_Start_IT+0xa0>
 801edc4:	683b      	ldr	r3, [r7, #0]
 801edc6:	2b04      	cmp	r3, #4
 801edc8:	d104      	bne.n	801edd4 <HAL_TIM_IC_Start_IT+0x88>
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801edd0:	b2db      	uxtb	r3, r3
 801edd2:	e00b      	b.n	801edec <HAL_TIM_IC_Start_IT+0xa0>
 801edd4:	683b      	ldr	r3, [r7, #0]
 801edd6:	2b08      	cmp	r3, #8
 801edd8:	d104      	bne.n	801ede4 <HAL_TIM_IC_Start_IT+0x98>
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ede0:	b2db      	uxtb	r3, r3
 801ede2:	e003      	b.n	801edec <HAL_TIM_IC_Start_IT+0xa0>
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801edea:	b2db      	uxtb	r3, r3
 801edec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801edee:	7bbb      	ldrb	r3, [r7, #14]
 801edf0:	2b01      	cmp	r3, #1
 801edf2:	d102      	bne.n	801edfa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801edf4:	7b7b      	ldrb	r3, [r7, #13]
 801edf6:	2b01      	cmp	r3, #1
 801edf8:	d001      	beq.n	801edfe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801edfa:	2301      	movs	r3, #1
 801edfc:	e0ec      	b.n	801efd8 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801edfe:	683b      	ldr	r3, [r7, #0]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d104      	bne.n	801ee0e <HAL_TIM_IC_Start_IT+0xc2>
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	2202      	movs	r2, #2
 801ee08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ee0c:	e023      	b.n	801ee56 <HAL_TIM_IC_Start_IT+0x10a>
 801ee0e:	683b      	ldr	r3, [r7, #0]
 801ee10:	2b04      	cmp	r3, #4
 801ee12:	d104      	bne.n	801ee1e <HAL_TIM_IC_Start_IT+0xd2>
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	2202      	movs	r2, #2
 801ee18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ee1c:	e01b      	b.n	801ee56 <HAL_TIM_IC_Start_IT+0x10a>
 801ee1e:	683b      	ldr	r3, [r7, #0]
 801ee20:	2b08      	cmp	r3, #8
 801ee22:	d104      	bne.n	801ee2e <HAL_TIM_IC_Start_IT+0xe2>
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	2202      	movs	r2, #2
 801ee28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ee2c:	e013      	b.n	801ee56 <HAL_TIM_IC_Start_IT+0x10a>
 801ee2e:	683b      	ldr	r3, [r7, #0]
 801ee30:	2b0c      	cmp	r3, #12
 801ee32:	d104      	bne.n	801ee3e <HAL_TIM_IC_Start_IT+0xf2>
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	2202      	movs	r2, #2
 801ee38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ee3c:	e00b      	b.n	801ee56 <HAL_TIM_IC_Start_IT+0x10a>
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	2b10      	cmp	r3, #16
 801ee42:	d104      	bne.n	801ee4e <HAL_TIM_IC_Start_IT+0x102>
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	2202      	movs	r2, #2
 801ee48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ee4c:	e003      	b.n	801ee56 <HAL_TIM_IC_Start_IT+0x10a>
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	2202      	movs	r2, #2
 801ee52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d104      	bne.n	801ee66 <HAL_TIM_IC_Start_IT+0x11a>
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	2202      	movs	r2, #2
 801ee60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ee64:	e013      	b.n	801ee8e <HAL_TIM_IC_Start_IT+0x142>
 801ee66:	683b      	ldr	r3, [r7, #0]
 801ee68:	2b04      	cmp	r3, #4
 801ee6a:	d104      	bne.n	801ee76 <HAL_TIM_IC_Start_IT+0x12a>
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	2202      	movs	r2, #2
 801ee70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ee74:	e00b      	b.n	801ee8e <HAL_TIM_IC_Start_IT+0x142>
 801ee76:	683b      	ldr	r3, [r7, #0]
 801ee78:	2b08      	cmp	r3, #8
 801ee7a:	d104      	bne.n	801ee86 <HAL_TIM_IC_Start_IT+0x13a>
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2202      	movs	r2, #2
 801ee80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ee84:	e003      	b.n	801ee8e <HAL_TIM_IC_Start_IT+0x142>
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	2202      	movs	r2, #2
 801ee8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801ee8e:	683b      	ldr	r3, [r7, #0]
 801ee90:	2b0c      	cmp	r3, #12
 801ee92:	d841      	bhi.n	801ef18 <HAL_TIM_IC_Start_IT+0x1cc>
 801ee94:	a201      	add	r2, pc, #4	; (adr r2, 801ee9c <HAL_TIM_IC_Start_IT+0x150>)
 801ee96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ee9a:	bf00      	nop
 801ee9c:	0801eed1 	.word	0x0801eed1
 801eea0:	0801ef19 	.word	0x0801ef19
 801eea4:	0801ef19 	.word	0x0801ef19
 801eea8:	0801ef19 	.word	0x0801ef19
 801eeac:	0801eee3 	.word	0x0801eee3
 801eeb0:	0801ef19 	.word	0x0801ef19
 801eeb4:	0801ef19 	.word	0x0801ef19
 801eeb8:	0801ef19 	.word	0x0801ef19
 801eebc:	0801eef5 	.word	0x0801eef5
 801eec0:	0801ef19 	.word	0x0801ef19
 801eec4:	0801ef19 	.word	0x0801ef19
 801eec8:	0801ef19 	.word	0x0801ef19
 801eecc:	0801ef07 	.word	0x0801ef07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	68da      	ldr	r2, [r3, #12]
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	f042 0202 	orr.w	r2, r2, #2
 801eede:	60da      	str	r2, [r3, #12]
      break;
 801eee0:	e01d      	b.n	801ef1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	68da      	ldr	r2, [r3, #12]
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	f042 0204 	orr.w	r2, r2, #4
 801eef0:	60da      	str	r2, [r3, #12]
      break;
 801eef2:	e014      	b.n	801ef1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	68da      	ldr	r2, [r3, #12]
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	f042 0208 	orr.w	r2, r2, #8
 801ef02:	60da      	str	r2, [r3, #12]
      break;
 801ef04:	e00b      	b.n	801ef1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	68da      	ldr	r2, [r3, #12]
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	f042 0210 	orr.w	r2, r2, #16
 801ef14:	60da      	str	r2, [r3, #12]
      break;
 801ef16:	e002      	b.n	801ef1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801ef18:	2301      	movs	r3, #1
 801ef1a:	73fb      	strb	r3, [r7, #15]
      break;
 801ef1c:	bf00      	nop
  }

  if (status == HAL_OK)
 801ef1e:	7bfb      	ldrb	r3, [r7, #15]
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	d158      	bne.n	801efd6 <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	2201      	movs	r2, #1
 801ef2a:	6839      	ldr	r1, [r7, #0]
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	f001 f9e5 	bl	80202fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	4a2a      	ldr	r2, [pc, #168]	; (801efe0 <HAL_TIM_IC_Start_IT+0x294>)
 801ef38:	4293      	cmp	r3, r2
 801ef3a:	d02c      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ef44:	d027      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	4a26      	ldr	r2, [pc, #152]	; (801efe4 <HAL_TIM_IC_Start_IT+0x298>)
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	d022      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	4a24      	ldr	r2, [pc, #144]	; (801efe8 <HAL_TIM_IC_Start_IT+0x29c>)
 801ef56:	4293      	cmp	r3, r2
 801ef58:	d01d      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	4a23      	ldr	r2, [pc, #140]	; (801efec <HAL_TIM_IC_Start_IT+0x2a0>)
 801ef60:	4293      	cmp	r3, r2
 801ef62:	d018      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	4a21      	ldr	r2, [pc, #132]	; (801eff0 <HAL_TIM_IC_Start_IT+0x2a4>)
 801ef6a:	4293      	cmp	r3, r2
 801ef6c:	d013      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	681b      	ldr	r3, [r3, #0]
 801ef72:	4a20      	ldr	r2, [pc, #128]	; (801eff4 <HAL_TIM_IC_Start_IT+0x2a8>)
 801ef74:	4293      	cmp	r3, r2
 801ef76:	d00e      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	4a1e      	ldr	r2, [pc, #120]	; (801eff8 <HAL_TIM_IC_Start_IT+0x2ac>)
 801ef7e:	4293      	cmp	r3, r2
 801ef80:	d009      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	4a1d      	ldr	r2, [pc, #116]	; (801effc <HAL_TIM_IC_Start_IT+0x2b0>)
 801ef88:	4293      	cmp	r3, r2
 801ef8a:	d004      	beq.n	801ef96 <HAL_TIM_IC_Start_IT+0x24a>
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	4a1b      	ldr	r2, [pc, #108]	; (801f000 <HAL_TIM_IC_Start_IT+0x2b4>)
 801ef92:	4293      	cmp	r3, r2
 801ef94:	d115      	bne.n	801efc2 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	689a      	ldr	r2, [r3, #8]
 801ef9c:	4b19      	ldr	r3, [pc, #100]	; (801f004 <HAL_TIM_IC_Start_IT+0x2b8>)
 801ef9e:	4013      	ands	r3, r2
 801efa0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efa2:	68bb      	ldr	r3, [r7, #8]
 801efa4:	2b06      	cmp	r3, #6
 801efa6:	d015      	beq.n	801efd4 <HAL_TIM_IC_Start_IT+0x288>
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801efae:	d011      	beq.n	801efd4 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	681a      	ldr	r2, [r3, #0]
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	f042 0201 	orr.w	r2, r2, #1
 801efbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efc0:	e008      	b.n	801efd4 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	681b      	ldr	r3, [r3, #0]
 801efc6:	681a      	ldr	r2, [r3, #0]
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	f042 0201 	orr.w	r2, r2, #1
 801efd0:	601a      	str	r2, [r3, #0]
 801efd2:	e000      	b.n	801efd6 <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efd4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801efd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801efd8:	4618      	mov	r0, r3
 801efda:	3710      	adds	r7, #16
 801efdc:	46bd      	mov	sp, r7
 801efde:	bd80      	pop	{r7, pc}
 801efe0:	40010000 	.word	0x40010000
 801efe4:	40000400 	.word	0x40000400
 801efe8:	40000800 	.word	0x40000800
 801efec:	40000c00 	.word	0x40000c00
 801eff0:	40010400 	.word	0x40010400
 801eff4:	40001800 	.word	0x40001800
 801eff8:	40014000 	.word	0x40014000
 801effc:	4000e000 	.word	0x4000e000
 801f000:	4000e400 	.word	0x4000e400
 801f004:	00010007 	.word	0x00010007

0801f008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f008:	b580      	push	{r7, lr}
 801f00a:	b082      	sub	sp, #8
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	691b      	ldr	r3, [r3, #16]
 801f016:	f003 0302 	and.w	r3, r3, #2
 801f01a:	2b02      	cmp	r3, #2
 801f01c:	d122      	bne.n	801f064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	68db      	ldr	r3, [r3, #12]
 801f024:	f003 0302 	and.w	r3, r3, #2
 801f028:	2b02      	cmp	r3, #2
 801f02a:	d11b      	bne.n	801f064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	f06f 0202 	mvn.w	r2, #2
 801f034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	2201      	movs	r2, #1
 801f03a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	699b      	ldr	r3, [r3, #24]
 801f042:	f003 0303 	and.w	r3, r3, #3
 801f046:	2b00      	cmp	r3, #0
 801f048:	d003      	beq.n	801f052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f04a:	6878      	ldr	r0, [r7, #4]
 801f04c:	f7ef f924 	bl	800e298 <HAL_TIM_IC_CaptureCallback>
 801f050:	e005      	b.n	801f05e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f052:	6878      	ldr	r0, [r7, #4]
 801f054:	f000 fbe4 	bl	801f820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f058:	6878      	ldr	r0, [r7, #4]
 801f05a:	f000 fbeb 	bl	801f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	2200      	movs	r2, #0
 801f062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	691b      	ldr	r3, [r3, #16]
 801f06a:	f003 0304 	and.w	r3, r3, #4
 801f06e:	2b04      	cmp	r3, #4
 801f070:	d122      	bne.n	801f0b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	68db      	ldr	r3, [r3, #12]
 801f078:	f003 0304 	and.w	r3, r3, #4
 801f07c:	2b04      	cmp	r3, #4
 801f07e:	d11b      	bne.n	801f0b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	f06f 0204 	mvn.w	r2, #4
 801f088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	2202      	movs	r2, #2
 801f08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	699b      	ldr	r3, [r3, #24]
 801f096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d003      	beq.n	801f0a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f09e:	6878      	ldr	r0, [r7, #4]
 801f0a0:	f7ef f8fa 	bl	800e298 <HAL_TIM_IC_CaptureCallback>
 801f0a4:	e005      	b.n	801f0b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f0a6:	6878      	ldr	r0, [r7, #4]
 801f0a8:	f000 fbba 	bl	801f820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f0ac:	6878      	ldr	r0, [r7, #4]
 801f0ae:	f000 fbc1 	bl	801f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	691b      	ldr	r3, [r3, #16]
 801f0be:	f003 0308 	and.w	r3, r3, #8
 801f0c2:	2b08      	cmp	r3, #8
 801f0c4:	d122      	bne.n	801f10c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	68db      	ldr	r3, [r3, #12]
 801f0cc:	f003 0308 	and.w	r3, r3, #8
 801f0d0:	2b08      	cmp	r3, #8
 801f0d2:	d11b      	bne.n	801f10c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	f06f 0208 	mvn.w	r2, #8
 801f0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	2204      	movs	r2, #4
 801f0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	69db      	ldr	r3, [r3, #28]
 801f0ea:	f003 0303 	and.w	r3, r3, #3
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d003      	beq.n	801f0fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f0f2:	6878      	ldr	r0, [r7, #4]
 801f0f4:	f7ef f8d0 	bl	800e298 <HAL_TIM_IC_CaptureCallback>
 801f0f8:	e005      	b.n	801f106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f0fa:	6878      	ldr	r0, [r7, #4]
 801f0fc:	f000 fb90 	bl	801f820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f100:	6878      	ldr	r0, [r7, #4]
 801f102:	f000 fb97 	bl	801f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	2200      	movs	r2, #0
 801f10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	691b      	ldr	r3, [r3, #16]
 801f112:	f003 0310 	and.w	r3, r3, #16
 801f116:	2b10      	cmp	r3, #16
 801f118:	d122      	bne.n	801f160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	68db      	ldr	r3, [r3, #12]
 801f120:	f003 0310 	and.w	r3, r3, #16
 801f124:	2b10      	cmp	r3, #16
 801f126:	d11b      	bne.n	801f160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	f06f 0210 	mvn.w	r2, #16
 801f130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	2208      	movs	r2, #8
 801f136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	69db      	ldr	r3, [r3, #28]
 801f13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f142:	2b00      	cmp	r3, #0
 801f144:	d003      	beq.n	801f14e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f146:	6878      	ldr	r0, [r7, #4]
 801f148:	f7ef f8a6 	bl	800e298 <HAL_TIM_IC_CaptureCallback>
 801f14c:	e005      	b.n	801f15a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f14e:	6878      	ldr	r0, [r7, #4]
 801f150:	f000 fb66 	bl	801f820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f154:	6878      	ldr	r0, [r7, #4]
 801f156:	f000 fb6d 	bl	801f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	2200      	movs	r2, #0
 801f15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	691b      	ldr	r3, [r3, #16]
 801f166:	f003 0301 	and.w	r3, r3, #1
 801f16a:	2b01      	cmp	r3, #1
 801f16c:	d10e      	bne.n	801f18c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	68db      	ldr	r3, [r3, #12]
 801f174:	f003 0301 	and.w	r3, r3, #1
 801f178:	2b01      	cmp	r3, #1
 801f17a:	d107      	bne.n	801f18c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	f06f 0201 	mvn.w	r2, #1
 801f184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f186:	6878      	ldr	r0, [r7, #4]
 801f188:	f7ef f89b 	bl	800e2c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	691b      	ldr	r3, [r3, #16]
 801f192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f196:	2b80      	cmp	r3, #128	; 0x80
 801f198:	d10e      	bne.n	801f1b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	68db      	ldr	r3, [r3, #12]
 801f1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1a4:	2b80      	cmp	r3, #128	; 0x80
 801f1a6:	d107      	bne.n	801f1b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f1b2:	6878      	ldr	r0, [r7, #4]
 801f1b4:	f001 fa0e 	bl	80205d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	691b      	ldr	r3, [r3, #16]
 801f1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1c6:	d10e      	bne.n	801f1e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	68db      	ldr	r3, [r3, #12]
 801f1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1d2:	2b80      	cmp	r3, #128	; 0x80
 801f1d4:	d107      	bne.n	801f1e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f1e0:	6878      	ldr	r0, [r7, #4]
 801f1e2:	f001 fa01 	bl	80205e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	691b      	ldr	r3, [r3, #16]
 801f1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f1f0:	2b40      	cmp	r3, #64	; 0x40
 801f1f2:	d10e      	bne.n	801f212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	68db      	ldr	r3, [r3, #12]
 801f1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f1fe:	2b40      	cmp	r3, #64	; 0x40
 801f200:	d107      	bne.n	801f212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f20c:	6878      	ldr	r0, [r7, #4]
 801f20e:	f000 fb1b 	bl	801f848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	691b      	ldr	r3, [r3, #16]
 801f218:	f003 0320 	and.w	r3, r3, #32
 801f21c:	2b20      	cmp	r3, #32
 801f21e:	d10e      	bne.n	801f23e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	68db      	ldr	r3, [r3, #12]
 801f226:	f003 0320 	and.w	r3, r3, #32
 801f22a:	2b20      	cmp	r3, #32
 801f22c:	d107      	bne.n	801f23e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	f06f 0220 	mvn.w	r2, #32
 801f236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f238:	6878      	ldr	r0, [r7, #4]
 801f23a:	f001 f9c1 	bl	80205c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f23e:	bf00      	nop
 801f240:	3708      	adds	r7, #8
 801f242:	46bd      	mov	sp, r7
 801f244:	bd80      	pop	{r7, pc}

0801f246 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f246:	b580      	push	{r7, lr}
 801f248:	b086      	sub	sp, #24
 801f24a:	af00      	add	r7, sp, #0
 801f24c:	60f8      	str	r0, [r7, #12]
 801f24e:	60b9      	str	r1, [r7, #8]
 801f250:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f252:	2300      	movs	r3, #0
 801f254:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f25c:	2b01      	cmp	r3, #1
 801f25e:	d101      	bne.n	801f264 <HAL_TIM_IC_ConfigChannel+0x1e>
 801f260:	2302      	movs	r3, #2
 801f262:	e088      	b.n	801f376 <HAL_TIM_IC_ConfigChannel+0x130>
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	2201      	movs	r2, #1
 801f268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	2b00      	cmp	r3, #0
 801f270:	d11b      	bne.n	801f2aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	6818      	ldr	r0, [r3, #0]
 801f276:	68bb      	ldr	r3, [r7, #8]
 801f278:	6819      	ldr	r1, [r3, #0]
 801f27a:	68bb      	ldr	r3, [r7, #8]
 801f27c:	685a      	ldr	r2, [r3, #4]
 801f27e:	68bb      	ldr	r3, [r7, #8]
 801f280:	68db      	ldr	r3, [r3, #12]
 801f282:	f000 fe67 	bl	801ff54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	699a      	ldr	r2, [r3, #24]
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f022 020c 	bic.w	r2, r2, #12
 801f294:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	6999      	ldr	r1, [r3, #24]
 801f29c:	68bb      	ldr	r3, [r7, #8]
 801f29e:	689a      	ldr	r2, [r3, #8]
 801f2a0:	68fb      	ldr	r3, [r7, #12]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	430a      	orrs	r2, r1
 801f2a6:	619a      	str	r2, [r3, #24]
 801f2a8:	e060      	b.n	801f36c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	2b04      	cmp	r3, #4
 801f2ae:	d11c      	bne.n	801f2ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	6818      	ldr	r0, [r3, #0]
 801f2b4:	68bb      	ldr	r3, [r7, #8]
 801f2b6:	6819      	ldr	r1, [r3, #0]
 801f2b8:	68bb      	ldr	r3, [r7, #8]
 801f2ba:	685a      	ldr	r2, [r3, #4]
 801f2bc:	68bb      	ldr	r3, [r7, #8]
 801f2be:	68db      	ldr	r3, [r3, #12]
 801f2c0:	f000 fef7 	bl	80200b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	699a      	ldr	r2, [r3, #24]
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f2d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f2d4:	68fb      	ldr	r3, [r7, #12]
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	6999      	ldr	r1, [r3, #24]
 801f2da:	68bb      	ldr	r3, [r7, #8]
 801f2dc:	689b      	ldr	r3, [r3, #8]
 801f2de:	021a      	lsls	r2, r3, #8
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	681b      	ldr	r3, [r3, #0]
 801f2e4:	430a      	orrs	r2, r1
 801f2e6:	619a      	str	r2, [r3, #24]
 801f2e8:	e040      	b.n	801f36c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	2b08      	cmp	r3, #8
 801f2ee:	d11b      	bne.n	801f328 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	6818      	ldr	r0, [r3, #0]
 801f2f4:	68bb      	ldr	r3, [r7, #8]
 801f2f6:	6819      	ldr	r1, [r3, #0]
 801f2f8:	68bb      	ldr	r3, [r7, #8]
 801f2fa:	685a      	ldr	r2, [r3, #4]
 801f2fc:	68bb      	ldr	r3, [r7, #8]
 801f2fe:	68db      	ldr	r3, [r3, #12]
 801f300:	f000 ff44 	bl	802018c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	69da      	ldr	r2, [r3, #28]
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	f022 020c 	bic.w	r2, r2, #12
 801f312:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	69d9      	ldr	r1, [r3, #28]
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	689a      	ldr	r2, [r3, #8]
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	430a      	orrs	r2, r1
 801f324:	61da      	str	r2, [r3, #28]
 801f326:	e021      	b.n	801f36c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	2b0c      	cmp	r3, #12
 801f32c:	d11c      	bne.n	801f368 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f32e:	68fb      	ldr	r3, [r7, #12]
 801f330:	6818      	ldr	r0, [r3, #0]
 801f332:	68bb      	ldr	r3, [r7, #8]
 801f334:	6819      	ldr	r1, [r3, #0]
 801f336:	68bb      	ldr	r3, [r7, #8]
 801f338:	685a      	ldr	r2, [r3, #4]
 801f33a:	68bb      	ldr	r3, [r7, #8]
 801f33c:	68db      	ldr	r3, [r3, #12]
 801f33e:	f000 ff61 	bl	8020204 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	69da      	ldr	r2, [r3, #28]
 801f348:	68fb      	ldr	r3, [r7, #12]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f350:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	69d9      	ldr	r1, [r3, #28]
 801f358:	68bb      	ldr	r3, [r7, #8]
 801f35a:	689b      	ldr	r3, [r3, #8]
 801f35c:	021a      	lsls	r2, r3, #8
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	430a      	orrs	r2, r1
 801f364:	61da      	str	r2, [r3, #28]
 801f366:	e001      	b.n	801f36c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f368:	2301      	movs	r3, #1
 801f36a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	2200      	movs	r2, #0
 801f370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f374:	7dfb      	ldrb	r3, [r7, #23]
}
 801f376:	4618      	mov	r0, r3
 801f378:	3718      	adds	r7, #24
 801f37a:	46bd      	mov	sp, r7
 801f37c:	bd80      	pop	{r7, pc}
	...

0801f380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f380:	b580      	push	{r7, lr}
 801f382:	b086      	sub	sp, #24
 801f384:	af00      	add	r7, sp, #0
 801f386:	60f8      	str	r0, [r7, #12]
 801f388:	60b9      	str	r1, [r7, #8]
 801f38a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f38c:	2300      	movs	r3, #0
 801f38e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f396:	2b01      	cmp	r3, #1
 801f398:	d101      	bne.n	801f39e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f39a:	2302      	movs	r3, #2
 801f39c:	e0ff      	b.n	801f59e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	2201      	movs	r2, #1
 801f3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	2b14      	cmp	r3, #20
 801f3aa:	f200 80f0 	bhi.w	801f58e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f3ae:	a201      	add	r2, pc, #4	; (adr r2, 801f3b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3b4:	0801f409 	.word	0x0801f409
 801f3b8:	0801f58f 	.word	0x0801f58f
 801f3bc:	0801f58f 	.word	0x0801f58f
 801f3c0:	0801f58f 	.word	0x0801f58f
 801f3c4:	0801f449 	.word	0x0801f449
 801f3c8:	0801f58f 	.word	0x0801f58f
 801f3cc:	0801f58f 	.word	0x0801f58f
 801f3d0:	0801f58f 	.word	0x0801f58f
 801f3d4:	0801f48b 	.word	0x0801f48b
 801f3d8:	0801f58f 	.word	0x0801f58f
 801f3dc:	0801f58f 	.word	0x0801f58f
 801f3e0:	0801f58f 	.word	0x0801f58f
 801f3e4:	0801f4cb 	.word	0x0801f4cb
 801f3e8:	0801f58f 	.word	0x0801f58f
 801f3ec:	0801f58f 	.word	0x0801f58f
 801f3f0:	0801f58f 	.word	0x0801f58f
 801f3f4:	0801f50d 	.word	0x0801f50d
 801f3f8:	0801f58f 	.word	0x0801f58f
 801f3fc:	0801f58f 	.word	0x0801f58f
 801f400:	0801f58f 	.word	0x0801f58f
 801f404:	0801f54d 	.word	0x0801f54d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	68b9      	ldr	r1, [r7, #8]
 801f40e:	4618      	mov	r0, r3
 801f410:	f000 faca 	bl	801f9a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	699a      	ldr	r2, [r3, #24]
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	f042 0208 	orr.w	r2, r2, #8
 801f422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f424:	68fb      	ldr	r3, [r7, #12]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	699a      	ldr	r2, [r3, #24]
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	f022 0204 	bic.w	r2, r2, #4
 801f432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	6999      	ldr	r1, [r3, #24]
 801f43a:	68bb      	ldr	r3, [r7, #8]
 801f43c:	691a      	ldr	r2, [r3, #16]
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	430a      	orrs	r2, r1
 801f444:	619a      	str	r2, [r3, #24]
      break;
 801f446:	e0a5      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f448:	68fb      	ldr	r3, [r7, #12]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	68b9      	ldr	r1, [r7, #8]
 801f44e:	4618      	mov	r0, r3
 801f450:	f000 fb3a 	bl	801fac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f454:	68fb      	ldr	r3, [r7, #12]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	699a      	ldr	r2, [r3, #24]
 801f45a:	68fb      	ldr	r3, [r7, #12]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	699a      	ldr	r2, [r3, #24]
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f474:	68fb      	ldr	r3, [r7, #12]
 801f476:	681b      	ldr	r3, [r3, #0]
 801f478:	6999      	ldr	r1, [r3, #24]
 801f47a:	68bb      	ldr	r3, [r7, #8]
 801f47c:	691b      	ldr	r3, [r3, #16]
 801f47e:	021a      	lsls	r2, r3, #8
 801f480:	68fb      	ldr	r3, [r7, #12]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	430a      	orrs	r2, r1
 801f486:	619a      	str	r2, [r3, #24]
      break;
 801f488:	e084      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f48a:	68fb      	ldr	r3, [r7, #12]
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	68b9      	ldr	r1, [r7, #8]
 801f490:	4618      	mov	r0, r3
 801f492:	f000 fba3 	bl	801fbdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f496:	68fb      	ldr	r3, [r7, #12]
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	69da      	ldr	r2, [r3, #28]
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	681b      	ldr	r3, [r3, #0]
 801f4a0:	f042 0208 	orr.w	r2, r2, #8
 801f4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	69da      	ldr	r2, [r3, #28]
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	f022 0204 	bic.w	r2, r2, #4
 801f4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	69d9      	ldr	r1, [r3, #28]
 801f4bc:	68bb      	ldr	r3, [r7, #8]
 801f4be:	691a      	ldr	r2, [r3, #16]
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	430a      	orrs	r2, r1
 801f4c6:	61da      	str	r2, [r3, #28]
      break;
 801f4c8:	e064      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	68b9      	ldr	r1, [r7, #8]
 801f4d0:	4618      	mov	r0, r3
 801f4d2:	f000 fc0b 	bl	801fcec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	69da      	ldr	r2, [r3, #28]
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	69da      	ldr	r2, [r3, #28]
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	69d9      	ldr	r1, [r3, #28]
 801f4fc:	68bb      	ldr	r3, [r7, #8]
 801f4fe:	691b      	ldr	r3, [r3, #16]
 801f500:	021a      	lsls	r2, r3, #8
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	430a      	orrs	r2, r1
 801f508:	61da      	str	r2, [r3, #28]
      break;
 801f50a:	e043      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	68b9      	ldr	r1, [r7, #8]
 801f512:	4618      	mov	r0, r3
 801f514:	f000 fc54 	bl	801fdc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f518:	68fb      	ldr	r3, [r7, #12]
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f51e:	68fb      	ldr	r3, [r7, #12]
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	f042 0208 	orr.w	r2, r2, #8
 801f526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f52e:	68fb      	ldr	r3, [r7, #12]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	f022 0204 	bic.w	r2, r2, #4
 801f536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f53e:	68bb      	ldr	r3, [r7, #8]
 801f540:	691a      	ldr	r2, [r3, #16]
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	430a      	orrs	r2, r1
 801f548:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f54a:	e023      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f54c:	68fb      	ldr	r3, [r7, #12]
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	68b9      	ldr	r1, [r7, #8]
 801f552:	4618      	mov	r0, r3
 801f554:	f000 fc98 	bl	801fe88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f566:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f568:	68fb      	ldr	r3, [r7, #12]
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f56e:	68fb      	ldr	r3, [r7, #12]
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f576:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	681b      	ldr	r3, [r3, #0]
 801f57c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f57e:	68bb      	ldr	r3, [r7, #8]
 801f580:	691b      	ldr	r3, [r3, #16]
 801f582:	021a      	lsls	r2, r3, #8
 801f584:	68fb      	ldr	r3, [r7, #12]
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	430a      	orrs	r2, r1
 801f58a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f58c:	e002      	b.n	801f594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f58e:	2301      	movs	r3, #1
 801f590:	75fb      	strb	r3, [r7, #23]
      break;
 801f592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	2200      	movs	r2, #0
 801f598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f59c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f59e:	4618      	mov	r0, r3
 801f5a0:	3718      	adds	r7, #24
 801f5a2:	46bd      	mov	sp, r7
 801f5a4:	bd80      	pop	{r7, pc}
 801f5a6:	bf00      	nop

0801f5a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f5a8:	b580      	push	{r7, lr}
 801f5aa:	b084      	sub	sp, #16
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	6078      	str	r0, [r7, #4]
 801f5b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f5bc:	2b01      	cmp	r3, #1
 801f5be:	d101      	bne.n	801f5c4 <HAL_TIM_ConfigClockSource+0x1c>
 801f5c0:	2302      	movs	r3, #2
 801f5c2:	e0dc      	b.n	801f77e <HAL_TIM_ConfigClockSource+0x1d6>
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	2201      	movs	r2, #1
 801f5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	2202      	movs	r2, #2
 801f5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	689b      	ldr	r3, [r3, #8]
 801f5da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f5dc:	68ba      	ldr	r2, [r7, #8]
 801f5de:	4b6a      	ldr	r3, [pc, #424]	; (801f788 <HAL_TIM_ConfigClockSource+0x1e0>)
 801f5e0:	4013      	ands	r3, r2
 801f5e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f5e4:	68bb      	ldr	r3, [r7, #8]
 801f5e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f5ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	68ba      	ldr	r2, [r7, #8]
 801f5f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f5f4:	683b      	ldr	r3, [r7, #0]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	4a64      	ldr	r2, [pc, #400]	; (801f78c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f5fa:	4293      	cmp	r3, r2
 801f5fc:	f000 80a9 	beq.w	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f600:	4a62      	ldr	r2, [pc, #392]	; (801f78c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f602:	4293      	cmp	r3, r2
 801f604:	f200 80ae 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f608:	4a61      	ldr	r2, [pc, #388]	; (801f790 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f60a:	4293      	cmp	r3, r2
 801f60c:	f000 80a1 	beq.w	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f610:	4a5f      	ldr	r2, [pc, #380]	; (801f790 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f612:	4293      	cmp	r3, r2
 801f614:	f200 80a6 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f618:	4a5e      	ldr	r2, [pc, #376]	; (801f794 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f61a:	4293      	cmp	r3, r2
 801f61c:	f000 8099 	beq.w	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f620:	4a5c      	ldr	r2, [pc, #368]	; (801f794 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f622:	4293      	cmp	r3, r2
 801f624:	f200 809e 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f628:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f62c:	f000 8091 	beq.w	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f630:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f634:	f200 8096 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f63c:	f000 8089 	beq.w	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f644:	f200 808e 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f64c:	d03e      	beq.n	801f6cc <HAL_TIM_ConfigClockSource+0x124>
 801f64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f652:	f200 8087 	bhi.w	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f65a:	f000 8086 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1c2>
 801f65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f662:	d87f      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f664:	2b70      	cmp	r3, #112	; 0x70
 801f666:	d01a      	beq.n	801f69e <HAL_TIM_ConfigClockSource+0xf6>
 801f668:	2b70      	cmp	r3, #112	; 0x70
 801f66a:	d87b      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f66c:	2b60      	cmp	r3, #96	; 0x60
 801f66e:	d050      	beq.n	801f712 <HAL_TIM_ConfigClockSource+0x16a>
 801f670:	2b60      	cmp	r3, #96	; 0x60
 801f672:	d877      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f674:	2b50      	cmp	r3, #80	; 0x50
 801f676:	d03c      	beq.n	801f6f2 <HAL_TIM_ConfigClockSource+0x14a>
 801f678:	2b50      	cmp	r3, #80	; 0x50
 801f67a:	d873      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f67c:	2b40      	cmp	r3, #64	; 0x40
 801f67e:	d058      	beq.n	801f732 <HAL_TIM_ConfigClockSource+0x18a>
 801f680:	2b40      	cmp	r3, #64	; 0x40
 801f682:	d86f      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f684:	2b30      	cmp	r3, #48	; 0x30
 801f686:	d064      	beq.n	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f688:	2b30      	cmp	r3, #48	; 0x30
 801f68a:	d86b      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f68c:	2b20      	cmp	r3, #32
 801f68e:	d060      	beq.n	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f690:	2b20      	cmp	r3, #32
 801f692:	d867      	bhi.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
 801f694:	2b00      	cmp	r3, #0
 801f696:	d05c      	beq.n	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f698:	2b10      	cmp	r3, #16
 801f69a:	d05a      	beq.n	801f752 <HAL_TIM_ConfigClockSource+0x1aa>
 801f69c:	e062      	b.n	801f764 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	6818      	ldr	r0, [r3, #0]
 801f6a2:	683b      	ldr	r3, [r7, #0]
 801f6a4:	6899      	ldr	r1, [r3, #8]
 801f6a6:	683b      	ldr	r3, [r7, #0]
 801f6a8:	685a      	ldr	r2, [r3, #4]
 801f6aa:	683b      	ldr	r3, [r7, #0]
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	f000 fe05 	bl	80202bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	689b      	ldr	r3, [r3, #8]
 801f6b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f6ba:	68bb      	ldr	r3, [r7, #8]
 801f6bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801f6c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	681b      	ldr	r3, [r3, #0]
 801f6c6:	68ba      	ldr	r2, [r7, #8]
 801f6c8:	609a      	str	r2, [r3, #8]
      break;
 801f6ca:	e04f      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	6818      	ldr	r0, [r3, #0]
 801f6d0:	683b      	ldr	r3, [r7, #0]
 801f6d2:	6899      	ldr	r1, [r3, #8]
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	685a      	ldr	r2, [r3, #4]
 801f6d8:	683b      	ldr	r3, [r7, #0]
 801f6da:	68db      	ldr	r3, [r3, #12]
 801f6dc:	f000 fdee 	bl	80202bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	689a      	ldr	r2, [r3, #8]
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f6ee:	609a      	str	r2, [r3, #8]
      break;
 801f6f0:	e03c      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	6818      	ldr	r0, [r3, #0]
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	6859      	ldr	r1, [r3, #4]
 801f6fa:	683b      	ldr	r3, [r7, #0]
 801f6fc:	68db      	ldr	r3, [r3, #12]
 801f6fe:	461a      	mov	r2, r3
 801f700:	f000 fca8 	bl	8020054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	681b      	ldr	r3, [r3, #0]
 801f708:	2150      	movs	r1, #80	; 0x50
 801f70a:	4618      	mov	r0, r3
 801f70c:	f000 fdb8 	bl	8020280 <TIM_ITRx_SetConfig>
      break;
 801f710:	e02c      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	6818      	ldr	r0, [r3, #0]
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	6859      	ldr	r1, [r3, #4]
 801f71a:	683b      	ldr	r3, [r7, #0]
 801f71c:	68db      	ldr	r3, [r3, #12]
 801f71e:	461a      	mov	r2, r3
 801f720:	f000 fd04 	bl	802012c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	2160      	movs	r1, #96	; 0x60
 801f72a:	4618      	mov	r0, r3
 801f72c:	f000 fda8 	bl	8020280 <TIM_ITRx_SetConfig>
      break;
 801f730:	e01c      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	6818      	ldr	r0, [r3, #0]
 801f736:	683b      	ldr	r3, [r7, #0]
 801f738:	6859      	ldr	r1, [r3, #4]
 801f73a:	683b      	ldr	r3, [r7, #0]
 801f73c:	68db      	ldr	r3, [r3, #12]
 801f73e:	461a      	mov	r2, r3
 801f740:	f000 fc88 	bl	8020054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	2140      	movs	r1, #64	; 0x40
 801f74a:	4618      	mov	r0, r3
 801f74c:	f000 fd98 	bl	8020280 <TIM_ITRx_SetConfig>
      break;
 801f750:	e00c      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	681a      	ldr	r2, [r3, #0]
 801f756:	683b      	ldr	r3, [r7, #0]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	4619      	mov	r1, r3
 801f75c:	4610      	mov	r0, r2
 801f75e:	f000 fd8f 	bl	8020280 <TIM_ITRx_SetConfig>
      break;
 801f762:	e003      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f764:	2301      	movs	r3, #1
 801f766:	73fb      	strb	r3, [r7, #15]
      break;
 801f768:	e000      	b.n	801f76c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f76a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	2201      	movs	r2, #1
 801f770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	2200      	movs	r2, #0
 801f778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f77c:	7bfb      	ldrb	r3, [r7, #15]
}
 801f77e:	4618      	mov	r0, r3
 801f780:	3710      	adds	r7, #16
 801f782:	46bd      	mov	sp, r7
 801f784:	bd80      	pop	{r7, pc}
 801f786:	bf00      	nop
 801f788:	ffceff88 	.word	0xffceff88
 801f78c:	00100040 	.word	0x00100040
 801f790:	00100030 	.word	0x00100030
 801f794:	00100020 	.word	0x00100020

0801f798 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f798:	b480      	push	{r7}
 801f79a:	b085      	sub	sp, #20
 801f79c:	af00      	add	r7, sp, #0
 801f79e:	6078      	str	r0, [r7, #4]
 801f7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801f7a6:	683b      	ldr	r3, [r7, #0]
 801f7a8:	2b0c      	cmp	r3, #12
 801f7aa:	d831      	bhi.n	801f810 <HAL_TIM_ReadCapturedValue+0x78>
 801f7ac:	a201      	add	r2, pc, #4	; (adr r2, 801f7b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 801f7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7b2:	bf00      	nop
 801f7b4:	0801f7e9 	.word	0x0801f7e9
 801f7b8:	0801f811 	.word	0x0801f811
 801f7bc:	0801f811 	.word	0x0801f811
 801f7c0:	0801f811 	.word	0x0801f811
 801f7c4:	0801f7f3 	.word	0x0801f7f3
 801f7c8:	0801f811 	.word	0x0801f811
 801f7cc:	0801f811 	.word	0x0801f811
 801f7d0:	0801f811 	.word	0x0801f811
 801f7d4:	0801f7fd 	.word	0x0801f7fd
 801f7d8:	0801f811 	.word	0x0801f811
 801f7dc:	0801f811 	.word	0x0801f811
 801f7e0:	0801f811 	.word	0x0801f811
 801f7e4:	0801f807 	.word	0x0801f807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f7ee:	60fb      	str	r3, [r7, #12]

      break;
 801f7f0:	e00f      	b.n	801f812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7f8:	60fb      	str	r3, [r7, #12]

      break;
 801f7fa:	e00a      	b.n	801f812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f802:	60fb      	str	r3, [r7, #12]

      break;
 801f804:	e005      	b.n	801f812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f80c:	60fb      	str	r3, [r7, #12]

      break;
 801f80e:	e000      	b.n	801f812 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801f810:	bf00      	nop
  }

  return tmpreg;
 801f812:	68fb      	ldr	r3, [r7, #12]
}
 801f814:	4618      	mov	r0, r3
 801f816:	3714      	adds	r7, #20
 801f818:	46bd      	mov	sp, r7
 801f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f81e:	4770      	bx	lr

0801f820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f820:	b480      	push	{r7}
 801f822:	b083      	sub	sp, #12
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f828:	bf00      	nop
 801f82a:	370c      	adds	r7, #12
 801f82c:	46bd      	mov	sp, r7
 801f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f832:	4770      	bx	lr

0801f834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f834:	b480      	push	{r7}
 801f836:	b083      	sub	sp, #12
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f83c:	bf00      	nop
 801f83e:	370c      	adds	r7, #12
 801f840:	46bd      	mov	sp, r7
 801f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f846:	4770      	bx	lr

0801f848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f848:	b480      	push	{r7}
 801f84a:	b083      	sub	sp, #12
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f850:	bf00      	nop
 801f852:	370c      	adds	r7, #12
 801f854:	46bd      	mov	sp, r7
 801f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85a:	4770      	bx	lr

0801f85c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f85c:	b480      	push	{r7}
 801f85e:	b085      	sub	sp, #20
 801f860:	af00      	add	r7, sp, #0
 801f862:	6078      	str	r0, [r7, #4]
 801f864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	4a44      	ldr	r2, [pc, #272]	; (801f980 <TIM_Base_SetConfig+0x124>)
 801f870:	4293      	cmp	r3, r2
 801f872:	d013      	beq.n	801f89c <TIM_Base_SetConfig+0x40>
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f87a:	d00f      	beq.n	801f89c <TIM_Base_SetConfig+0x40>
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	4a41      	ldr	r2, [pc, #260]	; (801f984 <TIM_Base_SetConfig+0x128>)
 801f880:	4293      	cmp	r3, r2
 801f882:	d00b      	beq.n	801f89c <TIM_Base_SetConfig+0x40>
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	4a40      	ldr	r2, [pc, #256]	; (801f988 <TIM_Base_SetConfig+0x12c>)
 801f888:	4293      	cmp	r3, r2
 801f88a:	d007      	beq.n	801f89c <TIM_Base_SetConfig+0x40>
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	4a3f      	ldr	r2, [pc, #252]	; (801f98c <TIM_Base_SetConfig+0x130>)
 801f890:	4293      	cmp	r3, r2
 801f892:	d003      	beq.n	801f89c <TIM_Base_SetConfig+0x40>
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	4a3e      	ldr	r2, [pc, #248]	; (801f990 <TIM_Base_SetConfig+0x134>)
 801f898:	4293      	cmp	r3, r2
 801f89a:	d108      	bne.n	801f8ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f8a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f8a4:	683b      	ldr	r3, [r7, #0]
 801f8a6:	685b      	ldr	r3, [r3, #4]
 801f8a8:	68fa      	ldr	r2, [r7, #12]
 801f8aa:	4313      	orrs	r3, r2
 801f8ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	4a33      	ldr	r2, [pc, #204]	; (801f980 <TIM_Base_SetConfig+0x124>)
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	d027      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f8bc:	d023      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	4a30      	ldr	r2, [pc, #192]	; (801f984 <TIM_Base_SetConfig+0x128>)
 801f8c2:	4293      	cmp	r3, r2
 801f8c4:	d01f      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	4a2f      	ldr	r2, [pc, #188]	; (801f988 <TIM_Base_SetConfig+0x12c>)
 801f8ca:	4293      	cmp	r3, r2
 801f8cc:	d01b      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	4a2e      	ldr	r2, [pc, #184]	; (801f98c <TIM_Base_SetConfig+0x130>)
 801f8d2:	4293      	cmp	r3, r2
 801f8d4:	d017      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	4a2d      	ldr	r2, [pc, #180]	; (801f990 <TIM_Base_SetConfig+0x134>)
 801f8da:	4293      	cmp	r3, r2
 801f8dc:	d013      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	4a2c      	ldr	r2, [pc, #176]	; (801f994 <TIM_Base_SetConfig+0x138>)
 801f8e2:	4293      	cmp	r3, r2
 801f8e4:	d00f      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	4a2b      	ldr	r2, [pc, #172]	; (801f998 <TIM_Base_SetConfig+0x13c>)
 801f8ea:	4293      	cmp	r3, r2
 801f8ec:	d00b      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	4a2a      	ldr	r2, [pc, #168]	; (801f99c <TIM_Base_SetConfig+0x140>)
 801f8f2:	4293      	cmp	r3, r2
 801f8f4:	d007      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	4a29      	ldr	r2, [pc, #164]	; (801f9a0 <TIM_Base_SetConfig+0x144>)
 801f8fa:	4293      	cmp	r3, r2
 801f8fc:	d003      	beq.n	801f906 <TIM_Base_SetConfig+0xaa>
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	4a28      	ldr	r2, [pc, #160]	; (801f9a4 <TIM_Base_SetConfig+0x148>)
 801f902:	4293      	cmp	r3, r2
 801f904:	d108      	bne.n	801f918 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f90c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f90e:	683b      	ldr	r3, [r7, #0]
 801f910:	68db      	ldr	r3, [r3, #12]
 801f912:	68fa      	ldr	r2, [r7, #12]
 801f914:	4313      	orrs	r3, r2
 801f916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	695b      	ldr	r3, [r3, #20]
 801f922:	4313      	orrs	r3, r2
 801f924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	68fa      	ldr	r2, [r7, #12]
 801f92a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f92c:	683b      	ldr	r3, [r7, #0]
 801f92e:	689a      	ldr	r2, [r3, #8]
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	681a      	ldr	r2, [r3, #0]
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	4a10      	ldr	r2, [pc, #64]	; (801f980 <TIM_Base_SetConfig+0x124>)
 801f940:	4293      	cmp	r3, r2
 801f942:	d00f      	beq.n	801f964 <TIM_Base_SetConfig+0x108>
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	4a12      	ldr	r2, [pc, #72]	; (801f990 <TIM_Base_SetConfig+0x134>)
 801f948:	4293      	cmp	r3, r2
 801f94a:	d00b      	beq.n	801f964 <TIM_Base_SetConfig+0x108>
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	4a11      	ldr	r2, [pc, #68]	; (801f994 <TIM_Base_SetConfig+0x138>)
 801f950:	4293      	cmp	r3, r2
 801f952:	d007      	beq.n	801f964 <TIM_Base_SetConfig+0x108>
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	4a10      	ldr	r2, [pc, #64]	; (801f998 <TIM_Base_SetConfig+0x13c>)
 801f958:	4293      	cmp	r3, r2
 801f95a:	d003      	beq.n	801f964 <TIM_Base_SetConfig+0x108>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	4a0f      	ldr	r2, [pc, #60]	; (801f99c <TIM_Base_SetConfig+0x140>)
 801f960:	4293      	cmp	r3, r2
 801f962:	d103      	bne.n	801f96c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	691a      	ldr	r2, [r3, #16]
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	2201      	movs	r2, #1
 801f970:	615a      	str	r2, [r3, #20]
}
 801f972:	bf00      	nop
 801f974:	3714      	adds	r7, #20
 801f976:	46bd      	mov	sp, r7
 801f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f97c:	4770      	bx	lr
 801f97e:	bf00      	nop
 801f980:	40010000 	.word	0x40010000
 801f984:	40000400 	.word	0x40000400
 801f988:	40000800 	.word	0x40000800
 801f98c:	40000c00 	.word	0x40000c00
 801f990:	40010400 	.word	0x40010400
 801f994:	40014000 	.word	0x40014000
 801f998:	40014400 	.word	0x40014400
 801f99c:	40014800 	.word	0x40014800
 801f9a0:	4000e000 	.word	0x4000e000
 801f9a4:	4000e400 	.word	0x4000e400

0801f9a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f9a8:	b480      	push	{r7}
 801f9aa:	b087      	sub	sp, #28
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
 801f9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	6a1b      	ldr	r3, [r3, #32]
 801f9b6:	f023 0201 	bic.w	r2, r3, #1
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	6a1b      	ldr	r3, [r3, #32]
 801f9c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	685b      	ldr	r3, [r3, #4]
 801f9c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	699b      	ldr	r3, [r3, #24]
 801f9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f9d0:	68fa      	ldr	r2, [r7, #12]
 801f9d2:	4b37      	ldr	r3, [pc, #220]	; (801fab0 <TIM_OC1_SetConfig+0x108>)
 801f9d4:	4013      	ands	r3, r2
 801f9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	f023 0303 	bic.w	r3, r3, #3
 801f9de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f9e0:	683b      	ldr	r3, [r7, #0]
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	68fa      	ldr	r2, [r7, #12]
 801f9e6:	4313      	orrs	r3, r2
 801f9e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f9ea:	697b      	ldr	r3, [r7, #20]
 801f9ec:	f023 0302 	bic.w	r3, r3, #2
 801f9f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f9f2:	683b      	ldr	r3, [r7, #0]
 801f9f4:	689b      	ldr	r3, [r3, #8]
 801f9f6:	697a      	ldr	r2, [r7, #20]
 801f9f8:	4313      	orrs	r3, r2
 801f9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	4a2d      	ldr	r2, [pc, #180]	; (801fab4 <TIM_OC1_SetConfig+0x10c>)
 801fa00:	4293      	cmp	r3, r2
 801fa02:	d00f      	beq.n	801fa24 <TIM_OC1_SetConfig+0x7c>
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	4a2c      	ldr	r2, [pc, #176]	; (801fab8 <TIM_OC1_SetConfig+0x110>)
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	d00b      	beq.n	801fa24 <TIM_OC1_SetConfig+0x7c>
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	4a2b      	ldr	r2, [pc, #172]	; (801fabc <TIM_OC1_SetConfig+0x114>)
 801fa10:	4293      	cmp	r3, r2
 801fa12:	d007      	beq.n	801fa24 <TIM_OC1_SetConfig+0x7c>
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	4a2a      	ldr	r2, [pc, #168]	; (801fac0 <TIM_OC1_SetConfig+0x118>)
 801fa18:	4293      	cmp	r3, r2
 801fa1a:	d003      	beq.n	801fa24 <TIM_OC1_SetConfig+0x7c>
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	4a29      	ldr	r2, [pc, #164]	; (801fac4 <TIM_OC1_SetConfig+0x11c>)
 801fa20:	4293      	cmp	r3, r2
 801fa22:	d10c      	bne.n	801fa3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fa24:	697b      	ldr	r3, [r7, #20]
 801fa26:	f023 0308 	bic.w	r3, r3, #8
 801fa2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fa2c:	683b      	ldr	r3, [r7, #0]
 801fa2e:	68db      	ldr	r3, [r3, #12]
 801fa30:	697a      	ldr	r2, [r7, #20]
 801fa32:	4313      	orrs	r3, r2
 801fa34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fa36:	697b      	ldr	r3, [r7, #20]
 801fa38:	f023 0304 	bic.w	r3, r3, #4
 801fa3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	4a1c      	ldr	r2, [pc, #112]	; (801fab4 <TIM_OC1_SetConfig+0x10c>)
 801fa42:	4293      	cmp	r3, r2
 801fa44:	d00f      	beq.n	801fa66 <TIM_OC1_SetConfig+0xbe>
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	4a1b      	ldr	r2, [pc, #108]	; (801fab8 <TIM_OC1_SetConfig+0x110>)
 801fa4a:	4293      	cmp	r3, r2
 801fa4c:	d00b      	beq.n	801fa66 <TIM_OC1_SetConfig+0xbe>
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	4a1a      	ldr	r2, [pc, #104]	; (801fabc <TIM_OC1_SetConfig+0x114>)
 801fa52:	4293      	cmp	r3, r2
 801fa54:	d007      	beq.n	801fa66 <TIM_OC1_SetConfig+0xbe>
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	4a19      	ldr	r2, [pc, #100]	; (801fac0 <TIM_OC1_SetConfig+0x118>)
 801fa5a:	4293      	cmp	r3, r2
 801fa5c:	d003      	beq.n	801fa66 <TIM_OC1_SetConfig+0xbe>
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	4a18      	ldr	r2, [pc, #96]	; (801fac4 <TIM_OC1_SetConfig+0x11c>)
 801fa62:	4293      	cmp	r3, r2
 801fa64:	d111      	bne.n	801fa8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fa66:	693b      	ldr	r3, [r7, #16]
 801fa68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fa6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fa6e:	693b      	ldr	r3, [r7, #16]
 801fa70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fa74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fa76:	683b      	ldr	r3, [r7, #0]
 801fa78:	695b      	ldr	r3, [r3, #20]
 801fa7a:	693a      	ldr	r2, [r7, #16]
 801fa7c:	4313      	orrs	r3, r2
 801fa7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fa80:	683b      	ldr	r3, [r7, #0]
 801fa82:	699b      	ldr	r3, [r3, #24]
 801fa84:	693a      	ldr	r2, [r7, #16]
 801fa86:	4313      	orrs	r3, r2
 801fa88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	693a      	ldr	r2, [r7, #16]
 801fa8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	68fa      	ldr	r2, [r7, #12]
 801fa94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801fa96:	683b      	ldr	r3, [r7, #0]
 801fa98:	685a      	ldr	r2, [r3, #4]
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	697a      	ldr	r2, [r7, #20]
 801faa2:	621a      	str	r2, [r3, #32]
}
 801faa4:	bf00      	nop
 801faa6:	371c      	adds	r7, #28
 801faa8:	46bd      	mov	sp, r7
 801faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faae:	4770      	bx	lr
 801fab0:	fffeff8f 	.word	0xfffeff8f
 801fab4:	40010000 	.word	0x40010000
 801fab8:	40010400 	.word	0x40010400
 801fabc:	40014000 	.word	0x40014000
 801fac0:	40014400 	.word	0x40014400
 801fac4:	40014800 	.word	0x40014800

0801fac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fac8:	b480      	push	{r7}
 801faca:	b087      	sub	sp, #28
 801facc:	af00      	add	r7, sp, #0
 801face:	6078      	str	r0, [r7, #4]
 801fad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6a1b      	ldr	r3, [r3, #32]
 801fad6:	f023 0210 	bic.w	r2, r3, #16
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	6a1b      	ldr	r3, [r3, #32]
 801fae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	685b      	ldr	r3, [r3, #4]
 801fae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	699b      	ldr	r3, [r3, #24]
 801faee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801faf0:	68fa      	ldr	r2, [r7, #12]
 801faf2:	4b34      	ldr	r3, [pc, #208]	; (801fbc4 <TIM_OC2_SetConfig+0xfc>)
 801faf4:	4013      	ands	r3, r2
 801faf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801faf8:	68fb      	ldr	r3, [r7, #12]
 801fafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fb00:	683b      	ldr	r3, [r7, #0]
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	021b      	lsls	r3, r3, #8
 801fb06:	68fa      	ldr	r2, [r7, #12]
 801fb08:	4313      	orrs	r3, r2
 801fb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fb0c:	697b      	ldr	r3, [r7, #20]
 801fb0e:	f023 0320 	bic.w	r3, r3, #32
 801fb12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fb14:	683b      	ldr	r3, [r7, #0]
 801fb16:	689b      	ldr	r3, [r3, #8]
 801fb18:	011b      	lsls	r3, r3, #4
 801fb1a:	697a      	ldr	r2, [r7, #20]
 801fb1c:	4313      	orrs	r3, r2
 801fb1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	4a29      	ldr	r2, [pc, #164]	; (801fbc8 <TIM_OC2_SetConfig+0x100>)
 801fb24:	4293      	cmp	r3, r2
 801fb26:	d003      	beq.n	801fb30 <TIM_OC2_SetConfig+0x68>
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	4a28      	ldr	r2, [pc, #160]	; (801fbcc <TIM_OC2_SetConfig+0x104>)
 801fb2c:	4293      	cmp	r3, r2
 801fb2e:	d10d      	bne.n	801fb4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fb30:	697b      	ldr	r3, [r7, #20]
 801fb32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fb36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fb38:	683b      	ldr	r3, [r7, #0]
 801fb3a:	68db      	ldr	r3, [r3, #12]
 801fb3c:	011b      	lsls	r3, r3, #4
 801fb3e:	697a      	ldr	r2, [r7, #20]
 801fb40:	4313      	orrs	r3, r2
 801fb42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fb44:	697b      	ldr	r3, [r7, #20]
 801fb46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fb4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	4a1e      	ldr	r2, [pc, #120]	; (801fbc8 <TIM_OC2_SetConfig+0x100>)
 801fb50:	4293      	cmp	r3, r2
 801fb52:	d00f      	beq.n	801fb74 <TIM_OC2_SetConfig+0xac>
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	4a1d      	ldr	r2, [pc, #116]	; (801fbcc <TIM_OC2_SetConfig+0x104>)
 801fb58:	4293      	cmp	r3, r2
 801fb5a:	d00b      	beq.n	801fb74 <TIM_OC2_SetConfig+0xac>
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	4a1c      	ldr	r2, [pc, #112]	; (801fbd0 <TIM_OC2_SetConfig+0x108>)
 801fb60:	4293      	cmp	r3, r2
 801fb62:	d007      	beq.n	801fb74 <TIM_OC2_SetConfig+0xac>
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	4a1b      	ldr	r2, [pc, #108]	; (801fbd4 <TIM_OC2_SetConfig+0x10c>)
 801fb68:	4293      	cmp	r3, r2
 801fb6a:	d003      	beq.n	801fb74 <TIM_OC2_SetConfig+0xac>
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	4a1a      	ldr	r2, [pc, #104]	; (801fbd8 <TIM_OC2_SetConfig+0x110>)
 801fb70:	4293      	cmp	r3, r2
 801fb72:	d113      	bne.n	801fb9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fb74:	693b      	ldr	r3, [r7, #16]
 801fb76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fb7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fb7c:	693b      	ldr	r3, [r7, #16]
 801fb7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fb82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fb84:	683b      	ldr	r3, [r7, #0]
 801fb86:	695b      	ldr	r3, [r3, #20]
 801fb88:	009b      	lsls	r3, r3, #2
 801fb8a:	693a      	ldr	r2, [r7, #16]
 801fb8c:	4313      	orrs	r3, r2
 801fb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fb90:	683b      	ldr	r3, [r7, #0]
 801fb92:	699b      	ldr	r3, [r3, #24]
 801fb94:	009b      	lsls	r3, r3, #2
 801fb96:	693a      	ldr	r2, [r7, #16]
 801fb98:	4313      	orrs	r3, r2
 801fb9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fb9c:	687b      	ldr	r3, [r7, #4]
 801fb9e:	693a      	ldr	r2, [r7, #16]
 801fba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	68fa      	ldr	r2, [r7, #12]
 801fba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fba8:	683b      	ldr	r3, [r7, #0]
 801fbaa:	685a      	ldr	r2, [r3, #4]
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	697a      	ldr	r2, [r7, #20]
 801fbb4:	621a      	str	r2, [r3, #32]
}
 801fbb6:	bf00      	nop
 801fbb8:	371c      	adds	r7, #28
 801fbba:	46bd      	mov	sp, r7
 801fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbc0:	4770      	bx	lr
 801fbc2:	bf00      	nop
 801fbc4:	feff8fff 	.word	0xfeff8fff
 801fbc8:	40010000 	.word	0x40010000
 801fbcc:	40010400 	.word	0x40010400
 801fbd0:	40014000 	.word	0x40014000
 801fbd4:	40014400 	.word	0x40014400
 801fbd8:	40014800 	.word	0x40014800

0801fbdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fbdc:	b480      	push	{r7}
 801fbde:	b087      	sub	sp, #28
 801fbe0:	af00      	add	r7, sp, #0
 801fbe2:	6078      	str	r0, [r7, #4]
 801fbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	6a1b      	ldr	r3, [r3, #32]
 801fbea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801fbee:	687b      	ldr	r3, [r7, #4]
 801fbf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	6a1b      	ldr	r3, [r3, #32]
 801fbf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	685b      	ldr	r3, [r3, #4]
 801fbfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	69db      	ldr	r3, [r3, #28]
 801fc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fc04:	68fa      	ldr	r2, [r7, #12]
 801fc06:	4b33      	ldr	r3, [pc, #204]	; (801fcd4 <TIM_OC3_SetConfig+0xf8>)
 801fc08:	4013      	ands	r3, r2
 801fc0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	f023 0303 	bic.w	r3, r3, #3
 801fc12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	68fa      	ldr	r2, [r7, #12]
 801fc1a:	4313      	orrs	r3, r2
 801fc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fc1e:	697b      	ldr	r3, [r7, #20]
 801fc20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fc24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	689b      	ldr	r3, [r3, #8]
 801fc2a:	021b      	lsls	r3, r3, #8
 801fc2c:	697a      	ldr	r2, [r7, #20]
 801fc2e:	4313      	orrs	r3, r2
 801fc30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	4a28      	ldr	r2, [pc, #160]	; (801fcd8 <TIM_OC3_SetConfig+0xfc>)
 801fc36:	4293      	cmp	r3, r2
 801fc38:	d003      	beq.n	801fc42 <TIM_OC3_SetConfig+0x66>
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	4a27      	ldr	r2, [pc, #156]	; (801fcdc <TIM_OC3_SetConfig+0x100>)
 801fc3e:	4293      	cmp	r3, r2
 801fc40:	d10d      	bne.n	801fc5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801fc42:	697b      	ldr	r3, [r7, #20]
 801fc44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fc48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801fc4a:	683b      	ldr	r3, [r7, #0]
 801fc4c:	68db      	ldr	r3, [r3, #12]
 801fc4e:	021b      	lsls	r3, r3, #8
 801fc50:	697a      	ldr	r2, [r7, #20]
 801fc52:	4313      	orrs	r3, r2
 801fc54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801fc56:	697b      	ldr	r3, [r7, #20]
 801fc58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fc5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	4a1d      	ldr	r2, [pc, #116]	; (801fcd8 <TIM_OC3_SetConfig+0xfc>)
 801fc62:	4293      	cmp	r3, r2
 801fc64:	d00f      	beq.n	801fc86 <TIM_OC3_SetConfig+0xaa>
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	4a1c      	ldr	r2, [pc, #112]	; (801fcdc <TIM_OC3_SetConfig+0x100>)
 801fc6a:	4293      	cmp	r3, r2
 801fc6c:	d00b      	beq.n	801fc86 <TIM_OC3_SetConfig+0xaa>
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	4a1b      	ldr	r2, [pc, #108]	; (801fce0 <TIM_OC3_SetConfig+0x104>)
 801fc72:	4293      	cmp	r3, r2
 801fc74:	d007      	beq.n	801fc86 <TIM_OC3_SetConfig+0xaa>
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	4a1a      	ldr	r2, [pc, #104]	; (801fce4 <TIM_OC3_SetConfig+0x108>)
 801fc7a:	4293      	cmp	r3, r2
 801fc7c:	d003      	beq.n	801fc86 <TIM_OC3_SetConfig+0xaa>
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	4a19      	ldr	r2, [pc, #100]	; (801fce8 <TIM_OC3_SetConfig+0x10c>)
 801fc82:	4293      	cmp	r3, r2
 801fc84:	d113      	bne.n	801fcae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801fc86:	693b      	ldr	r3, [r7, #16]
 801fc88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fc8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801fc8e:	693b      	ldr	r3, [r7, #16]
 801fc90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fc94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801fc96:	683b      	ldr	r3, [r7, #0]
 801fc98:	695b      	ldr	r3, [r3, #20]
 801fc9a:	011b      	lsls	r3, r3, #4
 801fc9c:	693a      	ldr	r2, [r7, #16]
 801fc9e:	4313      	orrs	r3, r2
 801fca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801fca2:	683b      	ldr	r3, [r7, #0]
 801fca4:	699b      	ldr	r3, [r3, #24]
 801fca6:	011b      	lsls	r3, r3, #4
 801fca8:	693a      	ldr	r2, [r7, #16]
 801fcaa:	4313      	orrs	r3, r2
 801fcac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	693a      	ldr	r2, [r7, #16]
 801fcb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	68fa      	ldr	r2, [r7, #12]
 801fcb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801fcba:	683b      	ldr	r3, [r7, #0]
 801fcbc:	685a      	ldr	r2, [r3, #4]
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	697a      	ldr	r2, [r7, #20]
 801fcc6:	621a      	str	r2, [r3, #32]
}
 801fcc8:	bf00      	nop
 801fcca:	371c      	adds	r7, #28
 801fccc:	46bd      	mov	sp, r7
 801fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcd2:	4770      	bx	lr
 801fcd4:	fffeff8f 	.word	0xfffeff8f
 801fcd8:	40010000 	.word	0x40010000
 801fcdc:	40010400 	.word	0x40010400
 801fce0:	40014000 	.word	0x40014000
 801fce4:	40014400 	.word	0x40014400
 801fce8:	40014800 	.word	0x40014800

0801fcec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fcec:	b480      	push	{r7}
 801fcee:	b087      	sub	sp, #28
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
 801fcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	6a1b      	ldr	r3, [r3, #32]
 801fcfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fcfe:	687b      	ldr	r3, [r7, #4]
 801fd00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	6a1b      	ldr	r3, [r3, #32]
 801fd06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	685b      	ldr	r3, [r3, #4]
 801fd0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	69db      	ldr	r3, [r3, #28]
 801fd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fd14:	68fa      	ldr	r2, [r7, #12]
 801fd16:	4b24      	ldr	r3, [pc, #144]	; (801fda8 <TIM_OC4_SetConfig+0xbc>)
 801fd18:	4013      	ands	r3, r2
 801fd1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fd1c:	68fb      	ldr	r3, [r7, #12]
 801fd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fd22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	021b      	lsls	r3, r3, #8
 801fd2a:	68fa      	ldr	r2, [r7, #12]
 801fd2c:	4313      	orrs	r3, r2
 801fd2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801fd30:	693b      	ldr	r3, [r7, #16]
 801fd32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fd36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801fd38:	683b      	ldr	r3, [r7, #0]
 801fd3a:	689b      	ldr	r3, [r3, #8]
 801fd3c:	031b      	lsls	r3, r3, #12
 801fd3e:	693a      	ldr	r2, [r7, #16]
 801fd40:	4313      	orrs	r3, r2
 801fd42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	4a19      	ldr	r2, [pc, #100]	; (801fdac <TIM_OC4_SetConfig+0xc0>)
 801fd48:	4293      	cmp	r3, r2
 801fd4a:	d00f      	beq.n	801fd6c <TIM_OC4_SetConfig+0x80>
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	4a18      	ldr	r2, [pc, #96]	; (801fdb0 <TIM_OC4_SetConfig+0xc4>)
 801fd50:	4293      	cmp	r3, r2
 801fd52:	d00b      	beq.n	801fd6c <TIM_OC4_SetConfig+0x80>
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	4a17      	ldr	r2, [pc, #92]	; (801fdb4 <TIM_OC4_SetConfig+0xc8>)
 801fd58:	4293      	cmp	r3, r2
 801fd5a:	d007      	beq.n	801fd6c <TIM_OC4_SetConfig+0x80>
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	4a16      	ldr	r2, [pc, #88]	; (801fdb8 <TIM_OC4_SetConfig+0xcc>)
 801fd60:	4293      	cmp	r3, r2
 801fd62:	d003      	beq.n	801fd6c <TIM_OC4_SetConfig+0x80>
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	4a15      	ldr	r2, [pc, #84]	; (801fdbc <TIM_OC4_SetConfig+0xd0>)
 801fd68:	4293      	cmp	r3, r2
 801fd6a:	d109      	bne.n	801fd80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801fd6c:	697b      	ldr	r3, [r7, #20]
 801fd6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801fd72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	695b      	ldr	r3, [r3, #20]
 801fd78:	019b      	lsls	r3, r3, #6
 801fd7a:	697a      	ldr	r2, [r7, #20]
 801fd7c:	4313      	orrs	r3, r2
 801fd7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	697a      	ldr	r2, [r7, #20]
 801fd84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	68fa      	ldr	r2, [r7, #12]
 801fd8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	685a      	ldr	r2, [r3, #4]
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	693a      	ldr	r2, [r7, #16]
 801fd98:	621a      	str	r2, [r3, #32]
}
 801fd9a:	bf00      	nop
 801fd9c:	371c      	adds	r7, #28
 801fd9e:	46bd      	mov	sp, r7
 801fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda4:	4770      	bx	lr
 801fda6:	bf00      	nop
 801fda8:	feff8fff 	.word	0xfeff8fff
 801fdac:	40010000 	.word	0x40010000
 801fdb0:	40010400 	.word	0x40010400
 801fdb4:	40014000 	.word	0x40014000
 801fdb8:	40014400 	.word	0x40014400
 801fdbc:	40014800 	.word	0x40014800

0801fdc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fdc0:	b480      	push	{r7}
 801fdc2:	b087      	sub	sp, #28
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	6078      	str	r0, [r7, #4]
 801fdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	6a1b      	ldr	r3, [r3, #32]
 801fdce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	6a1b      	ldr	r3, [r3, #32]
 801fdda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	685b      	ldr	r3, [r3, #4]
 801fde0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801fde8:	68fa      	ldr	r2, [r7, #12]
 801fdea:	4b21      	ldr	r3, [pc, #132]	; (801fe70 <TIM_OC5_SetConfig+0xb0>)
 801fdec:	4013      	ands	r3, r2
 801fdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fdf0:	683b      	ldr	r3, [r7, #0]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	68fa      	ldr	r2, [r7, #12]
 801fdf6:	4313      	orrs	r3, r2
 801fdf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801fdfa:	693b      	ldr	r3, [r7, #16]
 801fdfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fe00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fe02:	683b      	ldr	r3, [r7, #0]
 801fe04:	689b      	ldr	r3, [r3, #8]
 801fe06:	041b      	lsls	r3, r3, #16
 801fe08:	693a      	ldr	r2, [r7, #16]
 801fe0a:	4313      	orrs	r3, r2
 801fe0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	4a18      	ldr	r2, [pc, #96]	; (801fe74 <TIM_OC5_SetConfig+0xb4>)
 801fe12:	4293      	cmp	r3, r2
 801fe14:	d00f      	beq.n	801fe36 <TIM_OC5_SetConfig+0x76>
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	4a17      	ldr	r2, [pc, #92]	; (801fe78 <TIM_OC5_SetConfig+0xb8>)
 801fe1a:	4293      	cmp	r3, r2
 801fe1c:	d00b      	beq.n	801fe36 <TIM_OC5_SetConfig+0x76>
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	4a16      	ldr	r2, [pc, #88]	; (801fe7c <TIM_OC5_SetConfig+0xbc>)
 801fe22:	4293      	cmp	r3, r2
 801fe24:	d007      	beq.n	801fe36 <TIM_OC5_SetConfig+0x76>
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	4a15      	ldr	r2, [pc, #84]	; (801fe80 <TIM_OC5_SetConfig+0xc0>)
 801fe2a:	4293      	cmp	r3, r2
 801fe2c:	d003      	beq.n	801fe36 <TIM_OC5_SetConfig+0x76>
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	4a14      	ldr	r2, [pc, #80]	; (801fe84 <TIM_OC5_SetConfig+0xc4>)
 801fe32:	4293      	cmp	r3, r2
 801fe34:	d109      	bne.n	801fe4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fe36:	697b      	ldr	r3, [r7, #20]
 801fe38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fe3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	695b      	ldr	r3, [r3, #20]
 801fe42:	021b      	lsls	r3, r3, #8
 801fe44:	697a      	ldr	r2, [r7, #20]
 801fe46:	4313      	orrs	r3, r2
 801fe48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	697a      	ldr	r2, [r7, #20]
 801fe4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	68fa      	ldr	r2, [r7, #12]
 801fe54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	685a      	ldr	r2, [r3, #4]
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	693a      	ldr	r2, [r7, #16]
 801fe62:	621a      	str	r2, [r3, #32]
}
 801fe64:	bf00      	nop
 801fe66:	371c      	adds	r7, #28
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6e:	4770      	bx	lr
 801fe70:	fffeff8f 	.word	0xfffeff8f
 801fe74:	40010000 	.word	0x40010000
 801fe78:	40010400 	.word	0x40010400
 801fe7c:	40014000 	.word	0x40014000
 801fe80:	40014400 	.word	0x40014400
 801fe84:	40014800 	.word	0x40014800

0801fe88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fe88:	b480      	push	{r7}
 801fe8a:	b087      	sub	sp, #28
 801fe8c:	af00      	add	r7, sp, #0
 801fe8e:	6078      	str	r0, [r7, #4]
 801fe90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	6a1b      	ldr	r3, [r3, #32]
 801fe96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	6a1b      	ldr	r3, [r3, #32]
 801fea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	685b      	ldr	r3, [r3, #4]
 801fea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801feae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801feb0:	68fa      	ldr	r2, [r7, #12]
 801feb2:	4b22      	ldr	r3, [pc, #136]	; (801ff3c <TIM_OC6_SetConfig+0xb4>)
 801feb4:	4013      	ands	r3, r2
 801feb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801feb8:	683b      	ldr	r3, [r7, #0]
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	021b      	lsls	r3, r3, #8
 801febe:	68fa      	ldr	r2, [r7, #12]
 801fec0:	4313      	orrs	r3, r2
 801fec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fec4:	693b      	ldr	r3, [r7, #16]
 801fec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801feca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fecc:	683b      	ldr	r3, [r7, #0]
 801fece:	689b      	ldr	r3, [r3, #8]
 801fed0:	051b      	lsls	r3, r3, #20
 801fed2:	693a      	ldr	r2, [r7, #16]
 801fed4:	4313      	orrs	r3, r2
 801fed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	4a19      	ldr	r2, [pc, #100]	; (801ff40 <TIM_OC6_SetConfig+0xb8>)
 801fedc:	4293      	cmp	r3, r2
 801fede:	d00f      	beq.n	801ff00 <TIM_OC6_SetConfig+0x78>
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	4a18      	ldr	r2, [pc, #96]	; (801ff44 <TIM_OC6_SetConfig+0xbc>)
 801fee4:	4293      	cmp	r3, r2
 801fee6:	d00b      	beq.n	801ff00 <TIM_OC6_SetConfig+0x78>
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	4a17      	ldr	r2, [pc, #92]	; (801ff48 <TIM_OC6_SetConfig+0xc0>)
 801feec:	4293      	cmp	r3, r2
 801feee:	d007      	beq.n	801ff00 <TIM_OC6_SetConfig+0x78>
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	4a16      	ldr	r2, [pc, #88]	; (801ff4c <TIM_OC6_SetConfig+0xc4>)
 801fef4:	4293      	cmp	r3, r2
 801fef6:	d003      	beq.n	801ff00 <TIM_OC6_SetConfig+0x78>
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	4a15      	ldr	r2, [pc, #84]	; (801ff50 <TIM_OC6_SetConfig+0xc8>)
 801fefc:	4293      	cmp	r3, r2
 801fefe:	d109      	bne.n	801ff14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ff00:	697b      	ldr	r3, [r7, #20]
 801ff02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ff06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ff08:	683b      	ldr	r3, [r7, #0]
 801ff0a:	695b      	ldr	r3, [r3, #20]
 801ff0c:	029b      	lsls	r3, r3, #10
 801ff0e:	697a      	ldr	r2, [r7, #20]
 801ff10:	4313      	orrs	r3, r2
 801ff12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	697a      	ldr	r2, [r7, #20]
 801ff18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	68fa      	ldr	r2, [r7, #12]
 801ff1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ff20:	683b      	ldr	r3, [r7, #0]
 801ff22:	685a      	ldr	r2, [r3, #4]
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	693a      	ldr	r2, [r7, #16]
 801ff2c:	621a      	str	r2, [r3, #32]
}
 801ff2e:	bf00      	nop
 801ff30:	371c      	adds	r7, #28
 801ff32:	46bd      	mov	sp, r7
 801ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff38:	4770      	bx	lr
 801ff3a:	bf00      	nop
 801ff3c:	feff8fff 	.word	0xfeff8fff
 801ff40:	40010000 	.word	0x40010000
 801ff44:	40010400 	.word	0x40010400
 801ff48:	40014000 	.word	0x40014000
 801ff4c:	40014400 	.word	0x40014400
 801ff50:	40014800 	.word	0x40014800

0801ff54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801ff54:	b480      	push	{r7}
 801ff56:	b087      	sub	sp, #28
 801ff58:	af00      	add	r7, sp, #0
 801ff5a:	60f8      	str	r0, [r7, #12]
 801ff5c:	60b9      	str	r1, [r7, #8]
 801ff5e:	607a      	str	r2, [r7, #4]
 801ff60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	6a1b      	ldr	r3, [r3, #32]
 801ff66:	f023 0201 	bic.w	r2, r3, #1
 801ff6a:	68fb      	ldr	r3, [r7, #12]
 801ff6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	699b      	ldr	r3, [r3, #24]
 801ff72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	6a1b      	ldr	r3, [r3, #32]
 801ff78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	4a2c      	ldr	r2, [pc, #176]	; (8020030 <TIM_TI1_SetConfig+0xdc>)
 801ff7e:	4293      	cmp	r3, r2
 801ff80:	d023      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ff82:	68fb      	ldr	r3, [r7, #12]
 801ff84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ff88:	d01f      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ff8a:	68fb      	ldr	r3, [r7, #12]
 801ff8c:	4a29      	ldr	r2, [pc, #164]	; (8020034 <TIM_TI1_SetConfig+0xe0>)
 801ff8e:	4293      	cmp	r3, r2
 801ff90:	d01b      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ff92:	68fb      	ldr	r3, [r7, #12]
 801ff94:	4a28      	ldr	r2, [pc, #160]	; (8020038 <TIM_TI1_SetConfig+0xe4>)
 801ff96:	4293      	cmp	r3, r2
 801ff98:	d017      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ff9a:	68fb      	ldr	r3, [r7, #12]
 801ff9c:	4a27      	ldr	r2, [pc, #156]	; (802003c <TIM_TI1_SetConfig+0xe8>)
 801ff9e:	4293      	cmp	r3, r2
 801ffa0:	d013      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ffa2:	68fb      	ldr	r3, [r7, #12]
 801ffa4:	4a26      	ldr	r2, [pc, #152]	; (8020040 <TIM_TI1_SetConfig+0xec>)
 801ffa6:	4293      	cmp	r3, r2
 801ffa8:	d00f      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	4a25      	ldr	r2, [pc, #148]	; (8020044 <TIM_TI1_SetConfig+0xf0>)
 801ffae:	4293      	cmp	r3, r2
 801ffb0:	d00b      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	4a24      	ldr	r2, [pc, #144]	; (8020048 <TIM_TI1_SetConfig+0xf4>)
 801ffb6:	4293      	cmp	r3, r2
 801ffb8:	d007      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	4a23      	ldr	r2, [pc, #140]	; (802004c <TIM_TI1_SetConfig+0xf8>)
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	d003      	beq.n	801ffca <TIM_TI1_SetConfig+0x76>
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	4a22      	ldr	r2, [pc, #136]	; (8020050 <TIM_TI1_SetConfig+0xfc>)
 801ffc6:	4293      	cmp	r3, r2
 801ffc8:	d101      	bne.n	801ffce <TIM_TI1_SetConfig+0x7a>
 801ffca:	2301      	movs	r3, #1
 801ffcc:	e000      	b.n	801ffd0 <TIM_TI1_SetConfig+0x7c>
 801ffce:	2300      	movs	r3, #0
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d008      	beq.n	801ffe6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801ffd4:	697b      	ldr	r3, [r7, #20]
 801ffd6:	f023 0303 	bic.w	r3, r3, #3
 801ffda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801ffdc:	697a      	ldr	r2, [r7, #20]
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	4313      	orrs	r3, r2
 801ffe2:	617b      	str	r3, [r7, #20]
 801ffe4:	e003      	b.n	801ffee <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801ffe6:	697b      	ldr	r3, [r7, #20]
 801ffe8:	f043 0301 	orr.w	r3, r3, #1
 801ffec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ffee:	697b      	ldr	r3, [r7, #20]
 801fff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801fff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801fff6:	683b      	ldr	r3, [r7, #0]
 801fff8:	011b      	lsls	r3, r3, #4
 801fffa:	b2db      	uxtb	r3, r3
 801fffc:	697a      	ldr	r2, [r7, #20]
 801fffe:	4313      	orrs	r3, r2
 8020000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020002:	693b      	ldr	r3, [r7, #16]
 8020004:	f023 030a 	bic.w	r3, r3, #10
 8020008:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 802000a:	68bb      	ldr	r3, [r7, #8]
 802000c:	f003 030a 	and.w	r3, r3, #10
 8020010:	693a      	ldr	r2, [r7, #16]
 8020012:	4313      	orrs	r3, r2
 8020014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020016:	68fb      	ldr	r3, [r7, #12]
 8020018:	697a      	ldr	r2, [r7, #20]
 802001a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802001c:	68fb      	ldr	r3, [r7, #12]
 802001e:	693a      	ldr	r2, [r7, #16]
 8020020:	621a      	str	r2, [r3, #32]
}
 8020022:	bf00      	nop
 8020024:	371c      	adds	r7, #28
 8020026:	46bd      	mov	sp, r7
 8020028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802002c:	4770      	bx	lr
 802002e:	bf00      	nop
 8020030:	40010000 	.word	0x40010000
 8020034:	40000400 	.word	0x40000400
 8020038:	40000800 	.word	0x40000800
 802003c:	40000c00 	.word	0x40000c00
 8020040:	40010400 	.word	0x40010400
 8020044:	40001800 	.word	0x40001800
 8020048:	40014000 	.word	0x40014000
 802004c:	4000e000 	.word	0x4000e000
 8020050:	4000e400 	.word	0x4000e400

08020054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020054:	b480      	push	{r7}
 8020056:	b087      	sub	sp, #28
 8020058:	af00      	add	r7, sp, #0
 802005a:	60f8      	str	r0, [r7, #12]
 802005c:	60b9      	str	r1, [r7, #8]
 802005e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020060:	68fb      	ldr	r3, [r7, #12]
 8020062:	6a1b      	ldr	r3, [r3, #32]
 8020064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020066:	68fb      	ldr	r3, [r7, #12]
 8020068:	6a1b      	ldr	r3, [r3, #32]
 802006a:	f023 0201 	bic.w	r2, r3, #1
 802006e:	68fb      	ldr	r3, [r7, #12]
 8020070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	699b      	ldr	r3, [r3, #24]
 8020076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020078:	693b      	ldr	r3, [r7, #16]
 802007a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802007e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	011b      	lsls	r3, r3, #4
 8020084:	693a      	ldr	r2, [r7, #16]
 8020086:	4313      	orrs	r3, r2
 8020088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	f023 030a 	bic.w	r3, r3, #10
 8020090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020092:	697a      	ldr	r2, [r7, #20]
 8020094:	68bb      	ldr	r3, [r7, #8]
 8020096:	4313      	orrs	r3, r2
 8020098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802009a:	68fb      	ldr	r3, [r7, #12]
 802009c:	693a      	ldr	r2, [r7, #16]
 802009e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80200a0:	68fb      	ldr	r3, [r7, #12]
 80200a2:	697a      	ldr	r2, [r7, #20]
 80200a4:	621a      	str	r2, [r3, #32]
}
 80200a6:	bf00      	nop
 80200a8:	371c      	adds	r7, #28
 80200aa:	46bd      	mov	sp, r7
 80200ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b0:	4770      	bx	lr

080200b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80200b2:	b480      	push	{r7}
 80200b4:	b087      	sub	sp, #28
 80200b6:	af00      	add	r7, sp, #0
 80200b8:	60f8      	str	r0, [r7, #12]
 80200ba:	60b9      	str	r1, [r7, #8]
 80200bc:	607a      	str	r2, [r7, #4]
 80200be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	6a1b      	ldr	r3, [r3, #32]
 80200c4:	f023 0210 	bic.w	r2, r3, #16
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	699b      	ldr	r3, [r3, #24]
 80200d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	6a1b      	ldr	r3, [r3, #32]
 80200d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80200d8:	697b      	ldr	r3, [r7, #20]
 80200da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80200de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	021b      	lsls	r3, r3, #8
 80200e4:	697a      	ldr	r2, [r7, #20]
 80200e6:	4313      	orrs	r3, r2
 80200e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80200ea:	697b      	ldr	r3, [r7, #20]
 80200ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80200f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80200f2:	683b      	ldr	r3, [r7, #0]
 80200f4:	031b      	lsls	r3, r3, #12
 80200f6:	b29b      	uxth	r3, r3
 80200f8:	697a      	ldr	r2, [r7, #20]
 80200fa:	4313      	orrs	r3, r2
 80200fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80200fe:	693b      	ldr	r3, [r7, #16]
 8020100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020104:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8020106:	68bb      	ldr	r3, [r7, #8]
 8020108:	011b      	lsls	r3, r3, #4
 802010a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 802010e:	693a      	ldr	r2, [r7, #16]
 8020110:	4313      	orrs	r3, r2
 8020112:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	697a      	ldr	r2, [r7, #20]
 8020118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802011a:	68fb      	ldr	r3, [r7, #12]
 802011c:	693a      	ldr	r2, [r7, #16]
 802011e:	621a      	str	r2, [r3, #32]
}
 8020120:	bf00      	nop
 8020122:	371c      	adds	r7, #28
 8020124:	46bd      	mov	sp, r7
 8020126:	f85d 7b04 	ldr.w	r7, [sp], #4
 802012a:	4770      	bx	lr

0802012c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802012c:	b480      	push	{r7}
 802012e:	b087      	sub	sp, #28
 8020130:	af00      	add	r7, sp, #0
 8020132:	60f8      	str	r0, [r7, #12]
 8020134:	60b9      	str	r1, [r7, #8]
 8020136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020138:	68fb      	ldr	r3, [r7, #12]
 802013a:	6a1b      	ldr	r3, [r3, #32]
 802013c:	f023 0210 	bic.w	r2, r3, #16
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	699b      	ldr	r3, [r3, #24]
 8020148:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802014a:	68fb      	ldr	r3, [r7, #12]
 802014c:	6a1b      	ldr	r3, [r3, #32]
 802014e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020150:	697b      	ldr	r3, [r7, #20]
 8020152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020156:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	031b      	lsls	r3, r3, #12
 802015c:	697a      	ldr	r2, [r7, #20]
 802015e:	4313      	orrs	r3, r2
 8020160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020162:	693b      	ldr	r3, [r7, #16]
 8020164:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020168:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802016a:	68bb      	ldr	r3, [r7, #8]
 802016c:	011b      	lsls	r3, r3, #4
 802016e:	693a      	ldr	r2, [r7, #16]
 8020170:	4313      	orrs	r3, r2
 8020172:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020174:	68fb      	ldr	r3, [r7, #12]
 8020176:	697a      	ldr	r2, [r7, #20]
 8020178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	693a      	ldr	r2, [r7, #16]
 802017e:	621a      	str	r2, [r3, #32]
}
 8020180:	bf00      	nop
 8020182:	371c      	adds	r7, #28
 8020184:	46bd      	mov	sp, r7
 8020186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802018a:	4770      	bx	lr

0802018c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 802018c:	b480      	push	{r7}
 802018e:	b087      	sub	sp, #28
 8020190:	af00      	add	r7, sp, #0
 8020192:	60f8      	str	r0, [r7, #12]
 8020194:	60b9      	str	r1, [r7, #8]
 8020196:	607a      	str	r2, [r7, #4]
 8020198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	6a1b      	ldr	r3, [r3, #32]
 802019e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	69db      	ldr	r3, [r3, #28]
 80201aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80201ac:	68fb      	ldr	r3, [r7, #12]
 80201ae:	6a1b      	ldr	r3, [r3, #32]
 80201b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80201b2:	697b      	ldr	r3, [r7, #20]
 80201b4:	f023 0303 	bic.w	r3, r3, #3
 80201b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80201ba:	697a      	ldr	r2, [r7, #20]
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	4313      	orrs	r3, r2
 80201c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80201c2:	697b      	ldr	r3, [r7, #20]
 80201c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80201c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80201ca:	683b      	ldr	r3, [r7, #0]
 80201cc:	011b      	lsls	r3, r3, #4
 80201ce:	b2db      	uxtb	r3, r3
 80201d0:	697a      	ldr	r2, [r7, #20]
 80201d2:	4313      	orrs	r3, r2
 80201d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80201d6:	693b      	ldr	r3, [r7, #16]
 80201d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80201dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80201de:	68bb      	ldr	r3, [r7, #8]
 80201e0:	021b      	lsls	r3, r3, #8
 80201e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80201e6:	693a      	ldr	r2, [r7, #16]
 80201e8:	4313      	orrs	r3, r2
 80201ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80201ec:	68fb      	ldr	r3, [r7, #12]
 80201ee:	697a      	ldr	r2, [r7, #20]
 80201f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	693a      	ldr	r2, [r7, #16]
 80201f6:	621a      	str	r2, [r3, #32]
}
 80201f8:	bf00      	nop
 80201fa:	371c      	adds	r7, #28
 80201fc:	46bd      	mov	sp, r7
 80201fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020202:	4770      	bx	lr

08020204 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020204:	b480      	push	{r7}
 8020206:	b087      	sub	sp, #28
 8020208:	af00      	add	r7, sp, #0
 802020a:	60f8      	str	r0, [r7, #12]
 802020c:	60b9      	str	r1, [r7, #8]
 802020e:	607a      	str	r2, [r7, #4]
 8020210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	6a1b      	ldr	r3, [r3, #32]
 8020216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802021a:	68fb      	ldr	r3, [r7, #12]
 802021c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	69db      	ldr	r3, [r3, #28]
 8020222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	6a1b      	ldr	r3, [r3, #32]
 8020228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 802022a:	697b      	ldr	r3, [r7, #20]
 802022c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020230:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	021b      	lsls	r3, r3, #8
 8020236:	697a      	ldr	r2, [r7, #20]
 8020238:	4313      	orrs	r3, r2
 802023a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 802023c:	697b      	ldr	r3, [r7, #20]
 802023e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020242:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020244:	683b      	ldr	r3, [r7, #0]
 8020246:	031b      	lsls	r3, r3, #12
 8020248:	b29b      	uxth	r3, r3
 802024a:	697a      	ldr	r2, [r7, #20]
 802024c:	4313      	orrs	r3, r2
 802024e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020250:	693b      	ldr	r3, [r7, #16]
 8020252:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8020256:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8020258:	68bb      	ldr	r3, [r7, #8]
 802025a:	031b      	lsls	r3, r3, #12
 802025c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8020260:	693a      	ldr	r2, [r7, #16]
 8020262:	4313      	orrs	r3, r2
 8020264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020266:	68fb      	ldr	r3, [r7, #12]
 8020268:	697a      	ldr	r2, [r7, #20]
 802026a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	693a      	ldr	r2, [r7, #16]
 8020270:	621a      	str	r2, [r3, #32]
}
 8020272:	bf00      	nop
 8020274:	371c      	adds	r7, #28
 8020276:	46bd      	mov	sp, r7
 8020278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802027c:	4770      	bx	lr
	...

08020280 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020280:	b480      	push	{r7}
 8020282:	b085      	sub	sp, #20
 8020284:	af00      	add	r7, sp, #0
 8020286:	6078      	str	r0, [r7, #4]
 8020288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	689b      	ldr	r3, [r3, #8]
 802028e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020290:	68fa      	ldr	r2, [r7, #12]
 8020292:	4b09      	ldr	r3, [pc, #36]	; (80202b8 <TIM_ITRx_SetConfig+0x38>)
 8020294:	4013      	ands	r3, r2
 8020296:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020298:	683a      	ldr	r2, [r7, #0]
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	4313      	orrs	r3, r2
 802029e:	f043 0307 	orr.w	r3, r3, #7
 80202a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	68fa      	ldr	r2, [r7, #12]
 80202a8:	609a      	str	r2, [r3, #8]
}
 80202aa:	bf00      	nop
 80202ac:	3714      	adds	r7, #20
 80202ae:	46bd      	mov	sp, r7
 80202b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202b4:	4770      	bx	lr
 80202b6:	bf00      	nop
 80202b8:	ffcfff8f 	.word	0xffcfff8f

080202bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80202bc:	b480      	push	{r7}
 80202be:	b087      	sub	sp, #28
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	60f8      	str	r0, [r7, #12]
 80202c4:	60b9      	str	r1, [r7, #8]
 80202c6:	607a      	str	r2, [r7, #4]
 80202c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	689b      	ldr	r3, [r3, #8]
 80202ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80202d0:	697b      	ldr	r3, [r7, #20]
 80202d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80202d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80202d8:	683b      	ldr	r3, [r7, #0]
 80202da:	021a      	lsls	r2, r3, #8
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	431a      	orrs	r2, r3
 80202e0:	68bb      	ldr	r3, [r7, #8]
 80202e2:	4313      	orrs	r3, r2
 80202e4:	697a      	ldr	r2, [r7, #20]
 80202e6:	4313      	orrs	r3, r2
 80202e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	697a      	ldr	r2, [r7, #20]
 80202ee:	609a      	str	r2, [r3, #8]
}
 80202f0:	bf00      	nop
 80202f2:	371c      	adds	r7, #28
 80202f4:	46bd      	mov	sp, r7
 80202f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202fa:	4770      	bx	lr

080202fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80202fc:	b480      	push	{r7}
 80202fe:	b087      	sub	sp, #28
 8020300:	af00      	add	r7, sp, #0
 8020302:	60f8      	str	r0, [r7, #12]
 8020304:	60b9      	str	r1, [r7, #8]
 8020306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020308:	68bb      	ldr	r3, [r7, #8]
 802030a:	f003 031f 	and.w	r3, r3, #31
 802030e:	2201      	movs	r2, #1
 8020310:	fa02 f303 	lsl.w	r3, r2, r3
 8020314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	6a1a      	ldr	r2, [r3, #32]
 802031a:	697b      	ldr	r3, [r7, #20]
 802031c:	43db      	mvns	r3, r3
 802031e:	401a      	ands	r2, r3
 8020320:	68fb      	ldr	r3, [r7, #12]
 8020322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020324:	68fb      	ldr	r3, [r7, #12]
 8020326:	6a1a      	ldr	r2, [r3, #32]
 8020328:	68bb      	ldr	r3, [r7, #8]
 802032a:	f003 031f 	and.w	r3, r3, #31
 802032e:	6879      	ldr	r1, [r7, #4]
 8020330:	fa01 f303 	lsl.w	r3, r1, r3
 8020334:	431a      	orrs	r2, r3
 8020336:	68fb      	ldr	r3, [r7, #12]
 8020338:	621a      	str	r2, [r3, #32]
}
 802033a:	bf00      	nop
 802033c:	371c      	adds	r7, #28
 802033e:	46bd      	mov	sp, r7
 8020340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020344:	4770      	bx	lr
	...

08020348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020348:	b480      	push	{r7}
 802034a:	b085      	sub	sp, #20
 802034c:	af00      	add	r7, sp, #0
 802034e:	6078      	str	r0, [r7, #4]
 8020350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020358:	2b01      	cmp	r3, #1
 802035a:	d101      	bne.n	8020360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802035c:	2302      	movs	r3, #2
 802035e:	e077      	b.n	8020450 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	2201      	movs	r2, #1
 8020364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	2202      	movs	r2, #2
 802036c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	685b      	ldr	r3, [r3, #4]
 8020376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020378:	687b      	ldr	r3, [r7, #4]
 802037a:	681b      	ldr	r3, [r3, #0]
 802037c:	689b      	ldr	r3, [r3, #8]
 802037e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	4a35      	ldr	r2, [pc, #212]	; (802045c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020386:	4293      	cmp	r3, r2
 8020388:	d004      	beq.n	8020394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	4a34      	ldr	r2, [pc, #208]	; (8020460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020390:	4293      	cmp	r3, r2
 8020392:	d108      	bne.n	80203a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020394:	68fb      	ldr	r3, [r7, #12]
 8020396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802039a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	685b      	ldr	r3, [r3, #4]
 80203a0:	68fa      	ldr	r2, [r7, #12]
 80203a2:	4313      	orrs	r3, r2
 80203a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80203a6:	68fb      	ldr	r3, [r7, #12]
 80203a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80203ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80203ae:	683b      	ldr	r3, [r7, #0]
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	68fa      	ldr	r2, [r7, #12]
 80203b4:	4313      	orrs	r3, r2
 80203b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	68fa      	ldr	r2, [r7, #12]
 80203be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	681b      	ldr	r3, [r3, #0]
 80203c4:	4a25      	ldr	r2, [pc, #148]	; (802045c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80203c6:	4293      	cmp	r3, r2
 80203c8:	d02c      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80203d2:	d027      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	4a22      	ldr	r2, [pc, #136]	; (8020464 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80203da:	4293      	cmp	r3, r2
 80203dc:	d022      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	4a21      	ldr	r2, [pc, #132]	; (8020468 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80203e4:	4293      	cmp	r3, r2
 80203e6:	d01d      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	4a1f      	ldr	r2, [pc, #124]	; (802046c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80203ee:	4293      	cmp	r3, r2
 80203f0:	d018      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	4a1a      	ldr	r2, [pc, #104]	; (8020460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80203f8:	4293      	cmp	r3, r2
 80203fa:	d013      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	4a1b      	ldr	r2, [pc, #108]	; (8020470 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8020402:	4293      	cmp	r3, r2
 8020404:	d00e      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	4a1a      	ldr	r2, [pc, #104]	; (8020474 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 802040c:	4293      	cmp	r3, r2
 802040e:	d009      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	4a18      	ldr	r2, [pc, #96]	; (8020478 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8020416:	4293      	cmp	r3, r2
 8020418:	d004      	beq.n	8020424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	4a17      	ldr	r2, [pc, #92]	; (802047c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020420:	4293      	cmp	r3, r2
 8020422:	d10c      	bne.n	802043e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020424:	68bb      	ldr	r3, [r7, #8]
 8020426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802042a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802042c:	683b      	ldr	r3, [r7, #0]
 802042e:	689b      	ldr	r3, [r3, #8]
 8020430:	68ba      	ldr	r2, [r7, #8]
 8020432:	4313      	orrs	r3, r2
 8020434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	68ba      	ldr	r2, [r7, #8]
 802043c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	2201      	movs	r2, #1
 8020442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2200      	movs	r2, #0
 802044a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802044e:	2300      	movs	r3, #0
}
 8020450:	4618      	mov	r0, r3
 8020452:	3714      	adds	r7, #20
 8020454:	46bd      	mov	sp, r7
 8020456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802045a:	4770      	bx	lr
 802045c:	40010000 	.word	0x40010000
 8020460:	40010400 	.word	0x40010400
 8020464:	40000400 	.word	0x40000400
 8020468:	40000800 	.word	0x40000800
 802046c:	40000c00 	.word	0x40000c00
 8020470:	40001800 	.word	0x40001800
 8020474:	40014000 	.word	0x40014000
 8020478:	4000e000 	.word	0x4000e000
 802047c:	4000e400 	.word	0x4000e400

08020480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020480:	b480      	push	{r7}
 8020482:	b085      	sub	sp, #20
 8020484:	af00      	add	r7, sp, #0
 8020486:	6078      	str	r0, [r7, #4]
 8020488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802048a:	2300      	movs	r3, #0
 802048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020494:	2b01      	cmp	r3, #1
 8020496:	d101      	bne.n	802049c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8020498:	2302      	movs	r3, #2
 802049a:	e087      	b.n	80205ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	2201      	movs	r2, #1
 80204a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80204aa:	683b      	ldr	r3, [r7, #0]
 80204ac:	68db      	ldr	r3, [r3, #12]
 80204ae:	4313      	orrs	r3, r2
 80204b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80204b2:	68fb      	ldr	r3, [r7, #12]
 80204b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	689b      	ldr	r3, [r3, #8]
 80204bc:	4313      	orrs	r3, r2
 80204be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80204c6:	683b      	ldr	r3, [r7, #0]
 80204c8:	685b      	ldr	r3, [r3, #4]
 80204ca:	4313      	orrs	r3, r2
 80204cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80204ce:	68fb      	ldr	r3, [r7, #12]
 80204d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80204d4:	683b      	ldr	r3, [r7, #0]
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	4313      	orrs	r3, r2
 80204da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80204dc:	68fb      	ldr	r3, [r7, #12]
 80204de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80204e2:	683b      	ldr	r3, [r7, #0]
 80204e4:	691b      	ldr	r3, [r3, #16]
 80204e6:	4313      	orrs	r3, r2
 80204e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80204f0:	683b      	ldr	r3, [r7, #0]
 80204f2:	695b      	ldr	r3, [r3, #20]
 80204f4:	4313      	orrs	r3, r2
 80204f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80204f8:	68fb      	ldr	r3, [r7, #12]
 80204fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80204fe:	683b      	ldr	r3, [r7, #0]
 8020500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020502:	4313      	orrs	r3, r2
 8020504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 802050c:	683b      	ldr	r3, [r7, #0]
 802050e:	699b      	ldr	r3, [r3, #24]
 8020510:	041b      	lsls	r3, r3, #16
 8020512:	4313      	orrs	r3, r2
 8020514:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	4a27      	ldr	r2, [pc, #156]	; (80205b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 802051c:	4293      	cmp	r3, r2
 802051e:	d004      	beq.n	802052a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	4a25      	ldr	r2, [pc, #148]	; (80205bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020526:	4293      	cmp	r3, r2
 8020528:	d106      	bne.n	8020538 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020530:	683b      	ldr	r3, [r7, #0]
 8020532:	69db      	ldr	r3, [r3, #28]
 8020534:	4313      	orrs	r3, r2
 8020536:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	4a1e      	ldr	r2, [pc, #120]	; (80205b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 802053e:	4293      	cmp	r3, r2
 8020540:	d004      	beq.n	802054c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	4a1d      	ldr	r2, [pc, #116]	; (80205bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020548:	4293      	cmp	r3, r2
 802054a:	d126      	bne.n	802059a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 802054c:	68fb      	ldr	r3, [r7, #12]
 802054e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8020552:	683b      	ldr	r3, [r7, #0]
 8020554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020556:	051b      	lsls	r3, r3, #20
 8020558:	4313      	orrs	r3, r2
 802055a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 802055c:	68fb      	ldr	r3, [r7, #12]
 802055e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020562:	683b      	ldr	r3, [r7, #0]
 8020564:	6a1b      	ldr	r3, [r3, #32]
 8020566:	4313      	orrs	r3, r2
 8020568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020570:	683b      	ldr	r3, [r7, #0]
 8020572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020574:	4313      	orrs	r3, r2
 8020576:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	4a0e      	ldr	r2, [pc, #56]	; (80205b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 802057e:	4293      	cmp	r3, r2
 8020580:	d004      	beq.n	802058c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	4a0d      	ldr	r2, [pc, #52]	; (80205bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020588:	4293      	cmp	r3, r2
 802058a:	d106      	bne.n	802059a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8020592:	683b      	ldr	r3, [r7, #0]
 8020594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020596:	4313      	orrs	r3, r2
 8020598:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	68fa      	ldr	r2, [r7, #12]
 80205a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	2200      	movs	r2, #0
 80205a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80205aa:	2300      	movs	r3, #0
}
 80205ac:	4618      	mov	r0, r3
 80205ae:	3714      	adds	r7, #20
 80205b0:	46bd      	mov	sp, r7
 80205b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205b6:	4770      	bx	lr
 80205b8:	40010000 	.word	0x40010000
 80205bc:	40010400 	.word	0x40010400

080205c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80205c0:	b480      	push	{r7}
 80205c2:	b083      	sub	sp, #12
 80205c4:	af00      	add	r7, sp, #0
 80205c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80205c8:	bf00      	nop
 80205ca:	370c      	adds	r7, #12
 80205cc:	46bd      	mov	sp, r7
 80205ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d2:	4770      	bx	lr

080205d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80205d4:	b480      	push	{r7}
 80205d6:	b083      	sub	sp, #12
 80205d8:	af00      	add	r7, sp, #0
 80205da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80205dc:	bf00      	nop
 80205de:	370c      	adds	r7, #12
 80205e0:	46bd      	mov	sp, r7
 80205e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e6:	4770      	bx	lr

080205e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80205e8:	b480      	push	{r7}
 80205ea:	b083      	sub	sp, #12
 80205ec:	af00      	add	r7, sp, #0
 80205ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80205f0:	bf00      	nop
 80205f2:	370c      	adds	r7, #12
 80205f4:	46bd      	mov	sp, r7
 80205f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205fa:	4770      	bx	lr

080205fc <_ZdlPv>:
 80205fc:	f000 b926 	b.w	802084c <free>

08020600 <_ZdlPvj>:
 8020600:	f7ff bffc 	b.w	80205fc <_ZdlPv>

08020604 <_Znwj>:
 8020604:	2801      	cmp	r0, #1
 8020606:	bf38      	it	cc
 8020608:	2001      	movcc	r0, #1
 802060a:	b510      	push	{r4, lr}
 802060c:	4604      	mov	r4, r0
 802060e:	4620      	mov	r0, r4
 8020610:	f000 f914 	bl	802083c <malloc>
 8020614:	b930      	cbnz	r0, 8020624 <_Znwj+0x20>
 8020616:	f000 f8d7 	bl	80207c8 <_ZSt15get_new_handlerv>
 802061a:	b908      	cbnz	r0, 8020620 <_Znwj+0x1c>
 802061c:	f000 f8dc 	bl	80207d8 <abort>
 8020620:	4780      	blx	r0
 8020622:	e7f4      	b.n	802060e <_Znwj+0xa>
 8020624:	bd10      	pop	{r4, pc}

08020626 <__cxa_pure_virtual>:
 8020626:	b508      	push	{r3, lr}
 8020628:	f000 f8c8 	bl	80207bc <_ZSt9terminatev>

0802062c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 802062c:	68c3      	ldr	r3, [r0, #12]
 802062e:	689a      	ldr	r2, [r3, #8]
 8020630:	60c2      	str	r2, [r0, #12]
 8020632:	b510      	push	{r4, lr}
 8020634:	b102      	cbz	r2, 8020638 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8020636:	6050      	str	r0, [r2, #4]
 8020638:	6842      	ldr	r2, [r0, #4]
 802063a:	605a      	str	r2, [r3, #4]
 802063c:	680c      	ldr	r4, [r1, #0]
 802063e:	4284      	cmp	r4, r0
 8020640:	d103      	bne.n	802064a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020642:	600b      	str	r3, [r1, #0]
 8020644:	6098      	str	r0, [r3, #8]
 8020646:	6043      	str	r3, [r0, #4]
 8020648:	bd10      	pop	{r4, pc}
 802064a:	6891      	ldr	r1, [r2, #8]
 802064c:	4281      	cmp	r1, r0
 802064e:	bf0c      	ite	eq
 8020650:	6093      	streq	r3, [r2, #8]
 8020652:	60d3      	strne	r3, [r2, #12]
 8020654:	e7f6      	b.n	8020644 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08020656 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8020656:	6883      	ldr	r3, [r0, #8]
 8020658:	68da      	ldr	r2, [r3, #12]
 802065a:	6082      	str	r2, [r0, #8]
 802065c:	b510      	push	{r4, lr}
 802065e:	b102      	cbz	r2, 8020662 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8020660:	6050      	str	r0, [r2, #4]
 8020662:	6842      	ldr	r2, [r0, #4]
 8020664:	605a      	str	r2, [r3, #4]
 8020666:	680c      	ldr	r4, [r1, #0]
 8020668:	4284      	cmp	r4, r0
 802066a:	d103      	bne.n	8020674 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 802066c:	600b      	str	r3, [r1, #0]
 802066e:	60d8      	str	r0, [r3, #12]
 8020670:	6043      	str	r3, [r0, #4]
 8020672:	bd10      	pop	{r4, pc}
 8020674:	68d1      	ldr	r1, [r2, #12]
 8020676:	4281      	cmp	r1, r0
 8020678:	bf0c      	ite	eq
 802067a:	60d3      	streq	r3, [r2, #12]
 802067c:	6093      	strne	r3, [r2, #8]
 802067e:	e7f6      	b.n	802066e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08020680 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020680:	68c3      	ldr	r3, [r0, #12]
 8020682:	b123      	cbz	r3, 802068e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8020684:	4618      	mov	r0, r3
 8020686:	689b      	ldr	r3, [r3, #8]
 8020688:	2b00      	cmp	r3, #0
 802068a:	d1fb      	bne.n	8020684 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 802068c:	4770      	bx	lr
 802068e:	6843      	ldr	r3, [r0, #4]
 8020690:	68da      	ldr	r2, [r3, #12]
 8020692:	4282      	cmp	r2, r0
 8020694:	d102      	bne.n	802069c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8020696:	4618      	mov	r0, r3
 8020698:	685b      	ldr	r3, [r3, #4]
 802069a:	e7f9      	b.n	8020690 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 802069c:	68c2      	ldr	r2, [r0, #12]
 802069e:	4293      	cmp	r3, r2
 80206a0:	bf18      	it	ne
 80206a2:	4618      	movne	r0, r3
 80206a4:	4770      	bx	lr

080206a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80206a6:	7803      	ldrb	r3, [r0, #0]
 80206a8:	b933      	cbnz	r3, 80206b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80206aa:	6843      	ldr	r3, [r0, #4]
 80206ac:	685b      	ldr	r3, [r3, #4]
 80206ae:	4283      	cmp	r3, r0
 80206b0:	d102      	bne.n	80206b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80206b2:	68db      	ldr	r3, [r3, #12]
 80206b4:	4618      	mov	r0, r3
 80206b6:	4770      	bx	lr
 80206b8:	6882      	ldr	r2, [r0, #8]
 80206ba:	b122      	cbz	r2, 80206c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80206bc:	4613      	mov	r3, r2
 80206be:	68d2      	ldr	r2, [r2, #12]
 80206c0:	2a00      	cmp	r2, #0
 80206c2:	d1fb      	bne.n	80206bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80206c4:	e7f6      	b.n	80206b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80206c6:	6843      	ldr	r3, [r0, #4]
 80206c8:	689a      	ldr	r2, [r3, #8]
 80206ca:	4282      	cmp	r2, r0
 80206cc:	d1f2      	bne.n	80206b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80206ce:	4618      	mov	r0, r3
 80206d0:	685b      	ldr	r3, [r3, #4]
 80206d2:	e7f9      	b.n	80206c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080206d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80206d4:	f7ff bfd4 	b.w	8020680 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080206d8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80206d8:	f7ff bfe5 	b.w	80206a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080206dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80206dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206e0:	461e      	mov	r6, r3
 80206e2:	f103 0804 	add.w	r8, r3, #4
 80206e6:	2300      	movs	r3, #0
 80206e8:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80206ec:	460c      	mov	r4, r1
 80206ee:	604a      	str	r2, [r1, #4]
 80206f0:	700b      	strb	r3, [r1, #0]
 80206f2:	b300      	cbz	r0, 8020736 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80206f4:	4296      	cmp	r6, r2
 80206f6:	6091      	str	r1, [r2, #8]
 80206f8:	d118      	bne.n	802072c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80206fa:	6071      	str	r1, [r6, #4]
 80206fc:	60f4      	str	r4, [r6, #12]
 80206fe:	2701      	movs	r7, #1
 8020700:	f04f 0900 	mov.w	r9, #0
 8020704:	6873      	ldr	r3, [r6, #4]
 8020706:	42a3      	cmp	r3, r4
 8020708:	d03f      	beq.n	802078a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 802070a:	6860      	ldr	r0, [r4, #4]
 802070c:	7802      	ldrb	r2, [r0, #0]
 802070e:	2a00      	cmp	r2, #0
 8020710:	d13b      	bne.n	802078a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020712:	6845      	ldr	r5, [r0, #4]
 8020714:	68ab      	ldr	r3, [r5, #8]
 8020716:	4298      	cmp	r0, r3
 8020718:	d123      	bne.n	8020762 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 802071a:	68eb      	ldr	r3, [r5, #12]
 802071c:	b183      	cbz	r3, 8020740 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 802071e:	781a      	ldrb	r2, [r3, #0]
 8020720:	b972      	cbnz	r2, 8020740 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020722:	7007      	strb	r7, [r0, #0]
 8020724:	701f      	strb	r7, [r3, #0]
 8020726:	702a      	strb	r2, [r5, #0]
 8020728:	462c      	mov	r4, r5
 802072a:	e7eb      	b.n	8020704 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 802072c:	68b3      	ldr	r3, [r6, #8]
 802072e:	4293      	cmp	r3, r2
 8020730:	d1e5      	bne.n	80206fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020732:	60b1      	str	r1, [r6, #8]
 8020734:	e7e3      	b.n	80206fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020736:	60d1      	str	r1, [r2, #12]
 8020738:	68f3      	ldr	r3, [r6, #12]
 802073a:	4293      	cmp	r3, r2
 802073c:	d1df      	bne.n	80206fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802073e:	e7dd      	b.n	80206fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020740:	68c3      	ldr	r3, [r0, #12]
 8020742:	42a3      	cmp	r3, r4
 8020744:	d103      	bne.n	802074e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8020746:	4641      	mov	r1, r8
 8020748:	f7ff ff70 	bl	802062c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 802074c:	4604      	mov	r4, r0
 802074e:	6863      	ldr	r3, [r4, #4]
 8020750:	4641      	mov	r1, r8
 8020752:	701f      	strb	r7, [r3, #0]
 8020754:	4628      	mov	r0, r5
 8020756:	f885 9000 	strb.w	r9, [r5]
 802075a:	f7ff ff7c 	bl	8020656 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 802075e:	4625      	mov	r5, r4
 8020760:	e7e2      	b.n	8020728 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8020762:	b113      	cbz	r3, 802076a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8020764:	781a      	ldrb	r2, [r3, #0]
 8020766:	2a00      	cmp	r2, #0
 8020768:	d0db      	beq.n	8020722 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 802076a:	6883      	ldr	r3, [r0, #8]
 802076c:	42a3      	cmp	r3, r4
 802076e:	d103      	bne.n	8020778 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8020770:	4641      	mov	r1, r8
 8020772:	f7ff ff70 	bl	8020656 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020776:	4604      	mov	r4, r0
 8020778:	6863      	ldr	r3, [r4, #4]
 802077a:	4641      	mov	r1, r8
 802077c:	701f      	strb	r7, [r3, #0]
 802077e:	4628      	mov	r0, r5
 8020780:	f885 9000 	strb.w	r9, [r5]
 8020784:	f7ff ff52 	bl	802062c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020788:	e7e9      	b.n	802075e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 802078a:	2201      	movs	r2, #1
 802078c:	701a      	strb	r2, [r3, #0]
 802078e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020792 <_ZSt17__throw_bad_allocv>:
 8020792:	b508      	push	{r3, lr}
 8020794:	f000 f820 	bl	80207d8 <abort>

08020798 <_ZSt20__throw_length_errorPKc>:
 8020798:	b508      	push	{r3, lr}
 802079a:	f000 f81d 	bl	80207d8 <abort>

0802079e <_ZSt25__throw_bad_function_callv>:
 802079e:	b508      	push	{r3, lr}
 80207a0:	f000 f81a 	bl	80207d8 <abort>

080207a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80207a4:	b508      	push	{r3, lr}
 80207a6:	4780      	blx	r0
 80207a8:	f000 f816 	bl	80207d8 <abort>

080207ac <_ZSt13get_terminatev>:
 80207ac:	4b02      	ldr	r3, [pc, #8]	; (80207b8 <_ZSt13get_terminatev+0xc>)
 80207ae:	6818      	ldr	r0, [r3, #0]
 80207b0:	f3bf 8f5b 	dmb	ish
 80207b4:	4770      	bx	lr
 80207b6:	bf00      	nop
 80207b8:	24000014 	.word	0x24000014

080207bc <_ZSt9terminatev>:
 80207bc:	b508      	push	{r3, lr}
 80207be:	f7ff fff5 	bl	80207ac <_ZSt13get_terminatev>
 80207c2:	f7ff ffef 	bl	80207a4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080207c8 <_ZSt15get_new_handlerv>:
 80207c8:	4b02      	ldr	r3, [pc, #8]	; (80207d4 <_ZSt15get_new_handlerv+0xc>)
 80207ca:	6818      	ldr	r0, [r3, #0]
 80207cc:	f3bf 8f5b 	dmb	ish
 80207d0:	4770      	bx	lr
 80207d2:	bf00      	nop
 80207d4:	24001d1c 	.word	0x24001d1c

080207d8 <abort>:
 80207d8:	b508      	push	{r3, lr}
 80207da:	2006      	movs	r0, #6
 80207dc:	f000 f986 	bl	8020aec <raise>
 80207e0:	2001      	movs	r0, #1
 80207e2:	f7f4 fc7d 	bl	80150e0 <_exit>
	...

080207e8 <__errno>:
 80207e8:	4b01      	ldr	r3, [pc, #4]	; (80207f0 <__errno+0x8>)
 80207ea:	6818      	ldr	r0, [r3, #0]
 80207ec:	4770      	bx	lr
 80207ee:	bf00      	nop
 80207f0:	24000018 	.word	0x24000018

080207f4 <__libc_init_array>:
 80207f4:	b570      	push	{r4, r5, r6, lr}
 80207f6:	4d0d      	ldr	r5, [pc, #52]	; (802082c <__libc_init_array+0x38>)
 80207f8:	4c0d      	ldr	r4, [pc, #52]	; (8020830 <__libc_init_array+0x3c>)
 80207fa:	1b64      	subs	r4, r4, r5
 80207fc:	10a4      	asrs	r4, r4, #2
 80207fe:	2600      	movs	r6, #0
 8020800:	42a6      	cmp	r6, r4
 8020802:	d109      	bne.n	8020818 <__libc_init_array+0x24>
 8020804:	4d0b      	ldr	r5, [pc, #44]	; (8020834 <__libc_init_array+0x40>)
 8020806:	4c0c      	ldr	r4, [pc, #48]	; (8020838 <__libc_init_array+0x44>)
 8020808:	f000 f99a 	bl	8020b40 <_init>
 802080c:	1b64      	subs	r4, r4, r5
 802080e:	10a4      	asrs	r4, r4, #2
 8020810:	2600      	movs	r6, #0
 8020812:	42a6      	cmp	r6, r4
 8020814:	d105      	bne.n	8020822 <__libc_init_array+0x2e>
 8020816:	bd70      	pop	{r4, r5, r6, pc}
 8020818:	f855 3b04 	ldr.w	r3, [r5], #4
 802081c:	4798      	blx	r3
 802081e:	3601      	adds	r6, #1
 8020820:	e7ee      	b.n	8020800 <__libc_init_array+0xc>
 8020822:	f855 3b04 	ldr.w	r3, [r5], #4
 8020826:	4798      	blx	r3
 8020828:	3601      	adds	r6, #1
 802082a:	e7f2      	b.n	8020812 <__libc_init_array+0x1e>
 802082c:	08020dd4 	.word	0x08020dd4
 8020830:	08020dd4 	.word	0x08020dd4
 8020834:	08020dd4 	.word	0x08020dd4
 8020838:	08020e04 	.word	0x08020e04

0802083c <malloc>:
 802083c:	4b02      	ldr	r3, [pc, #8]	; (8020848 <malloc+0xc>)
 802083e:	4601      	mov	r1, r0
 8020840:	6818      	ldr	r0, [r3, #0]
 8020842:	f000 b8a7 	b.w	8020994 <_malloc_r>
 8020846:	bf00      	nop
 8020848:	24000018 	.word	0x24000018

0802084c <free>:
 802084c:	4b02      	ldr	r3, [pc, #8]	; (8020858 <free+0xc>)
 802084e:	4601      	mov	r1, r0
 8020850:	6818      	ldr	r0, [r3, #0]
 8020852:	f000 b833 	b.w	80208bc <_free_r>
 8020856:	bf00      	nop
 8020858:	24000018 	.word	0x24000018

0802085c <memcpy>:
 802085c:	440a      	add	r2, r1
 802085e:	4291      	cmp	r1, r2
 8020860:	f100 33ff 	add.w	r3, r0, #4294967295
 8020864:	d100      	bne.n	8020868 <memcpy+0xc>
 8020866:	4770      	bx	lr
 8020868:	b510      	push	{r4, lr}
 802086a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802086e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020872:	4291      	cmp	r1, r2
 8020874:	d1f9      	bne.n	802086a <memcpy+0xe>
 8020876:	bd10      	pop	{r4, pc}

08020878 <memmove>:
 8020878:	4288      	cmp	r0, r1
 802087a:	b510      	push	{r4, lr}
 802087c:	eb01 0402 	add.w	r4, r1, r2
 8020880:	d902      	bls.n	8020888 <memmove+0x10>
 8020882:	4284      	cmp	r4, r0
 8020884:	4623      	mov	r3, r4
 8020886:	d807      	bhi.n	8020898 <memmove+0x20>
 8020888:	1e43      	subs	r3, r0, #1
 802088a:	42a1      	cmp	r1, r4
 802088c:	d008      	beq.n	80208a0 <memmove+0x28>
 802088e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020896:	e7f8      	b.n	802088a <memmove+0x12>
 8020898:	4402      	add	r2, r0
 802089a:	4601      	mov	r1, r0
 802089c:	428a      	cmp	r2, r1
 802089e:	d100      	bne.n	80208a2 <memmove+0x2a>
 80208a0:	bd10      	pop	{r4, pc}
 80208a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80208a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80208aa:	e7f7      	b.n	802089c <memmove+0x24>

080208ac <memset>:
 80208ac:	4402      	add	r2, r0
 80208ae:	4603      	mov	r3, r0
 80208b0:	4293      	cmp	r3, r2
 80208b2:	d100      	bne.n	80208b6 <memset+0xa>
 80208b4:	4770      	bx	lr
 80208b6:	f803 1b01 	strb.w	r1, [r3], #1
 80208ba:	e7f9      	b.n	80208b0 <memset+0x4>

080208bc <_free_r>:
 80208bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80208be:	2900      	cmp	r1, #0
 80208c0:	d044      	beq.n	802094c <_free_r+0x90>
 80208c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80208c6:	9001      	str	r0, [sp, #4]
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	f1a1 0404 	sub.w	r4, r1, #4
 80208ce:	bfb8      	it	lt
 80208d0:	18e4      	addlt	r4, r4, r3
 80208d2:	f000 f927 	bl	8020b24 <__malloc_lock>
 80208d6:	4a1e      	ldr	r2, [pc, #120]	; (8020950 <_free_r+0x94>)
 80208d8:	9801      	ldr	r0, [sp, #4]
 80208da:	6813      	ldr	r3, [r2, #0]
 80208dc:	b933      	cbnz	r3, 80208ec <_free_r+0x30>
 80208de:	6063      	str	r3, [r4, #4]
 80208e0:	6014      	str	r4, [r2, #0]
 80208e2:	b003      	add	sp, #12
 80208e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80208e8:	f000 b922 	b.w	8020b30 <__malloc_unlock>
 80208ec:	42a3      	cmp	r3, r4
 80208ee:	d908      	bls.n	8020902 <_free_r+0x46>
 80208f0:	6825      	ldr	r5, [r4, #0]
 80208f2:	1961      	adds	r1, r4, r5
 80208f4:	428b      	cmp	r3, r1
 80208f6:	bf01      	itttt	eq
 80208f8:	6819      	ldreq	r1, [r3, #0]
 80208fa:	685b      	ldreq	r3, [r3, #4]
 80208fc:	1949      	addeq	r1, r1, r5
 80208fe:	6021      	streq	r1, [r4, #0]
 8020900:	e7ed      	b.n	80208de <_free_r+0x22>
 8020902:	461a      	mov	r2, r3
 8020904:	685b      	ldr	r3, [r3, #4]
 8020906:	b10b      	cbz	r3, 802090c <_free_r+0x50>
 8020908:	42a3      	cmp	r3, r4
 802090a:	d9fa      	bls.n	8020902 <_free_r+0x46>
 802090c:	6811      	ldr	r1, [r2, #0]
 802090e:	1855      	adds	r5, r2, r1
 8020910:	42a5      	cmp	r5, r4
 8020912:	d10b      	bne.n	802092c <_free_r+0x70>
 8020914:	6824      	ldr	r4, [r4, #0]
 8020916:	4421      	add	r1, r4
 8020918:	1854      	adds	r4, r2, r1
 802091a:	42a3      	cmp	r3, r4
 802091c:	6011      	str	r1, [r2, #0]
 802091e:	d1e0      	bne.n	80208e2 <_free_r+0x26>
 8020920:	681c      	ldr	r4, [r3, #0]
 8020922:	685b      	ldr	r3, [r3, #4]
 8020924:	6053      	str	r3, [r2, #4]
 8020926:	4421      	add	r1, r4
 8020928:	6011      	str	r1, [r2, #0]
 802092a:	e7da      	b.n	80208e2 <_free_r+0x26>
 802092c:	d902      	bls.n	8020934 <_free_r+0x78>
 802092e:	230c      	movs	r3, #12
 8020930:	6003      	str	r3, [r0, #0]
 8020932:	e7d6      	b.n	80208e2 <_free_r+0x26>
 8020934:	6825      	ldr	r5, [r4, #0]
 8020936:	1961      	adds	r1, r4, r5
 8020938:	428b      	cmp	r3, r1
 802093a:	bf04      	itt	eq
 802093c:	6819      	ldreq	r1, [r3, #0]
 802093e:	685b      	ldreq	r3, [r3, #4]
 8020940:	6063      	str	r3, [r4, #4]
 8020942:	bf04      	itt	eq
 8020944:	1949      	addeq	r1, r1, r5
 8020946:	6021      	streq	r1, [r4, #0]
 8020948:	6054      	str	r4, [r2, #4]
 802094a:	e7ca      	b.n	80208e2 <_free_r+0x26>
 802094c:	b003      	add	sp, #12
 802094e:	bd30      	pop	{r4, r5, pc}
 8020950:	24001d20 	.word	0x24001d20

08020954 <sbrk_aligned>:
 8020954:	b570      	push	{r4, r5, r6, lr}
 8020956:	4e0e      	ldr	r6, [pc, #56]	; (8020990 <sbrk_aligned+0x3c>)
 8020958:	460c      	mov	r4, r1
 802095a:	6831      	ldr	r1, [r6, #0]
 802095c:	4605      	mov	r5, r0
 802095e:	b911      	cbnz	r1, 8020966 <sbrk_aligned+0x12>
 8020960:	f000 f88c 	bl	8020a7c <_sbrk_r>
 8020964:	6030      	str	r0, [r6, #0]
 8020966:	4621      	mov	r1, r4
 8020968:	4628      	mov	r0, r5
 802096a:	f000 f887 	bl	8020a7c <_sbrk_r>
 802096e:	1c43      	adds	r3, r0, #1
 8020970:	d00a      	beq.n	8020988 <sbrk_aligned+0x34>
 8020972:	1cc4      	adds	r4, r0, #3
 8020974:	f024 0403 	bic.w	r4, r4, #3
 8020978:	42a0      	cmp	r0, r4
 802097a:	d007      	beq.n	802098c <sbrk_aligned+0x38>
 802097c:	1a21      	subs	r1, r4, r0
 802097e:	4628      	mov	r0, r5
 8020980:	f000 f87c 	bl	8020a7c <_sbrk_r>
 8020984:	3001      	adds	r0, #1
 8020986:	d101      	bne.n	802098c <sbrk_aligned+0x38>
 8020988:	f04f 34ff 	mov.w	r4, #4294967295
 802098c:	4620      	mov	r0, r4
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	24001d24 	.word	0x24001d24

08020994 <_malloc_r>:
 8020994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020998:	1ccd      	adds	r5, r1, #3
 802099a:	f025 0503 	bic.w	r5, r5, #3
 802099e:	3508      	adds	r5, #8
 80209a0:	2d0c      	cmp	r5, #12
 80209a2:	bf38      	it	cc
 80209a4:	250c      	movcc	r5, #12
 80209a6:	2d00      	cmp	r5, #0
 80209a8:	4607      	mov	r7, r0
 80209aa:	db01      	blt.n	80209b0 <_malloc_r+0x1c>
 80209ac:	42a9      	cmp	r1, r5
 80209ae:	d905      	bls.n	80209bc <_malloc_r+0x28>
 80209b0:	230c      	movs	r3, #12
 80209b2:	603b      	str	r3, [r7, #0]
 80209b4:	2600      	movs	r6, #0
 80209b6:	4630      	mov	r0, r6
 80209b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209bc:	4e2e      	ldr	r6, [pc, #184]	; (8020a78 <_malloc_r+0xe4>)
 80209be:	f000 f8b1 	bl	8020b24 <__malloc_lock>
 80209c2:	6833      	ldr	r3, [r6, #0]
 80209c4:	461c      	mov	r4, r3
 80209c6:	bb34      	cbnz	r4, 8020a16 <_malloc_r+0x82>
 80209c8:	4629      	mov	r1, r5
 80209ca:	4638      	mov	r0, r7
 80209cc:	f7ff ffc2 	bl	8020954 <sbrk_aligned>
 80209d0:	1c43      	adds	r3, r0, #1
 80209d2:	4604      	mov	r4, r0
 80209d4:	d14d      	bne.n	8020a72 <_malloc_r+0xde>
 80209d6:	6834      	ldr	r4, [r6, #0]
 80209d8:	4626      	mov	r6, r4
 80209da:	2e00      	cmp	r6, #0
 80209dc:	d140      	bne.n	8020a60 <_malloc_r+0xcc>
 80209de:	6823      	ldr	r3, [r4, #0]
 80209e0:	4631      	mov	r1, r6
 80209e2:	4638      	mov	r0, r7
 80209e4:	eb04 0803 	add.w	r8, r4, r3
 80209e8:	f000 f848 	bl	8020a7c <_sbrk_r>
 80209ec:	4580      	cmp	r8, r0
 80209ee:	d13a      	bne.n	8020a66 <_malloc_r+0xd2>
 80209f0:	6821      	ldr	r1, [r4, #0]
 80209f2:	3503      	adds	r5, #3
 80209f4:	1a6d      	subs	r5, r5, r1
 80209f6:	f025 0503 	bic.w	r5, r5, #3
 80209fa:	3508      	adds	r5, #8
 80209fc:	2d0c      	cmp	r5, #12
 80209fe:	bf38      	it	cc
 8020a00:	250c      	movcc	r5, #12
 8020a02:	4629      	mov	r1, r5
 8020a04:	4638      	mov	r0, r7
 8020a06:	f7ff ffa5 	bl	8020954 <sbrk_aligned>
 8020a0a:	3001      	adds	r0, #1
 8020a0c:	d02b      	beq.n	8020a66 <_malloc_r+0xd2>
 8020a0e:	6823      	ldr	r3, [r4, #0]
 8020a10:	442b      	add	r3, r5
 8020a12:	6023      	str	r3, [r4, #0]
 8020a14:	e00e      	b.n	8020a34 <_malloc_r+0xa0>
 8020a16:	6822      	ldr	r2, [r4, #0]
 8020a18:	1b52      	subs	r2, r2, r5
 8020a1a:	d41e      	bmi.n	8020a5a <_malloc_r+0xc6>
 8020a1c:	2a0b      	cmp	r2, #11
 8020a1e:	d916      	bls.n	8020a4e <_malloc_r+0xba>
 8020a20:	1961      	adds	r1, r4, r5
 8020a22:	42a3      	cmp	r3, r4
 8020a24:	6025      	str	r5, [r4, #0]
 8020a26:	bf18      	it	ne
 8020a28:	6059      	strne	r1, [r3, #4]
 8020a2a:	6863      	ldr	r3, [r4, #4]
 8020a2c:	bf08      	it	eq
 8020a2e:	6031      	streq	r1, [r6, #0]
 8020a30:	5162      	str	r2, [r4, r5]
 8020a32:	604b      	str	r3, [r1, #4]
 8020a34:	4638      	mov	r0, r7
 8020a36:	f104 060b 	add.w	r6, r4, #11
 8020a3a:	f000 f879 	bl	8020b30 <__malloc_unlock>
 8020a3e:	f026 0607 	bic.w	r6, r6, #7
 8020a42:	1d23      	adds	r3, r4, #4
 8020a44:	1af2      	subs	r2, r6, r3
 8020a46:	d0b6      	beq.n	80209b6 <_malloc_r+0x22>
 8020a48:	1b9b      	subs	r3, r3, r6
 8020a4a:	50a3      	str	r3, [r4, r2]
 8020a4c:	e7b3      	b.n	80209b6 <_malloc_r+0x22>
 8020a4e:	6862      	ldr	r2, [r4, #4]
 8020a50:	42a3      	cmp	r3, r4
 8020a52:	bf0c      	ite	eq
 8020a54:	6032      	streq	r2, [r6, #0]
 8020a56:	605a      	strne	r2, [r3, #4]
 8020a58:	e7ec      	b.n	8020a34 <_malloc_r+0xa0>
 8020a5a:	4623      	mov	r3, r4
 8020a5c:	6864      	ldr	r4, [r4, #4]
 8020a5e:	e7b2      	b.n	80209c6 <_malloc_r+0x32>
 8020a60:	4634      	mov	r4, r6
 8020a62:	6876      	ldr	r6, [r6, #4]
 8020a64:	e7b9      	b.n	80209da <_malloc_r+0x46>
 8020a66:	230c      	movs	r3, #12
 8020a68:	603b      	str	r3, [r7, #0]
 8020a6a:	4638      	mov	r0, r7
 8020a6c:	f000 f860 	bl	8020b30 <__malloc_unlock>
 8020a70:	e7a1      	b.n	80209b6 <_malloc_r+0x22>
 8020a72:	6025      	str	r5, [r4, #0]
 8020a74:	e7de      	b.n	8020a34 <_malloc_r+0xa0>
 8020a76:	bf00      	nop
 8020a78:	24001d20 	.word	0x24001d20

08020a7c <_sbrk_r>:
 8020a7c:	b538      	push	{r3, r4, r5, lr}
 8020a7e:	4d06      	ldr	r5, [pc, #24]	; (8020a98 <_sbrk_r+0x1c>)
 8020a80:	2300      	movs	r3, #0
 8020a82:	4604      	mov	r4, r0
 8020a84:	4608      	mov	r0, r1
 8020a86:	602b      	str	r3, [r5, #0]
 8020a88:	f7f4 fb34 	bl	80150f4 <_sbrk>
 8020a8c:	1c43      	adds	r3, r0, #1
 8020a8e:	d102      	bne.n	8020a96 <_sbrk_r+0x1a>
 8020a90:	682b      	ldr	r3, [r5, #0]
 8020a92:	b103      	cbz	r3, 8020a96 <_sbrk_r+0x1a>
 8020a94:	6023      	str	r3, [r4, #0]
 8020a96:	bd38      	pop	{r3, r4, r5, pc}
 8020a98:	24001d28 	.word	0x24001d28

08020a9c <_raise_r>:
 8020a9c:	291f      	cmp	r1, #31
 8020a9e:	b538      	push	{r3, r4, r5, lr}
 8020aa0:	4604      	mov	r4, r0
 8020aa2:	460d      	mov	r5, r1
 8020aa4:	d904      	bls.n	8020ab0 <_raise_r+0x14>
 8020aa6:	2316      	movs	r3, #22
 8020aa8:	6003      	str	r3, [r0, #0]
 8020aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8020aae:	bd38      	pop	{r3, r4, r5, pc}
 8020ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020ab2:	b112      	cbz	r2, 8020aba <_raise_r+0x1e>
 8020ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020ab8:	b94b      	cbnz	r3, 8020ace <_raise_r+0x32>
 8020aba:	4620      	mov	r0, r4
 8020abc:	f000 f830 	bl	8020b20 <_getpid_r>
 8020ac0:	462a      	mov	r2, r5
 8020ac2:	4601      	mov	r1, r0
 8020ac4:	4620      	mov	r0, r4
 8020ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020aca:	f000 b817 	b.w	8020afc <_kill_r>
 8020ace:	2b01      	cmp	r3, #1
 8020ad0:	d00a      	beq.n	8020ae8 <_raise_r+0x4c>
 8020ad2:	1c59      	adds	r1, r3, #1
 8020ad4:	d103      	bne.n	8020ade <_raise_r+0x42>
 8020ad6:	2316      	movs	r3, #22
 8020ad8:	6003      	str	r3, [r0, #0]
 8020ada:	2001      	movs	r0, #1
 8020adc:	e7e7      	b.n	8020aae <_raise_r+0x12>
 8020ade:	2400      	movs	r4, #0
 8020ae0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020ae4:	4628      	mov	r0, r5
 8020ae6:	4798      	blx	r3
 8020ae8:	2000      	movs	r0, #0
 8020aea:	e7e0      	b.n	8020aae <_raise_r+0x12>

08020aec <raise>:
 8020aec:	4b02      	ldr	r3, [pc, #8]	; (8020af8 <raise+0xc>)
 8020aee:	4601      	mov	r1, r0
 8020af0:	6818      	ldr	r0, [r3, #0]
 8020af2:	f7ff bfd3 	b.w	8020a9c <_raise_r>
 8020af6:	bf00      	nop
 8020af8:	24000018 	.word	0x24000018

08020afc <_kill_r>:
 8020afc:	b538      	push	{r3, r4, r5, lr}
 8020afe:	4d07      	ldr	r5, [pc, #28]	; (8020b1c <_kill_r+0x20>)
 8020b00:	2300      	movs	r3, #0
 8020b02:	4604      	mov	r4, r0
 8020b04:	4608      	mov	r0, r1
 8020b06:	4611      	mov	r1, r2
 8020b08:	602b      	str	r3, [r5, #0]
 8020b0a:	f7f4 fad9 	bl	80150c0 <_kill>
 8020b0e:	1c43      	adds	r3, r0, #1
 8020b10:	d102      	bne.n	8020b18 <_kill_r+0x1c>
 8020b12:	682b      	ldr	r3, [r5, #0]
 8020b14:	b103      	cbz	r3, 8020b18 <_kill_r+0x1c>
 8020b16:	6023      	str	r3, [r4, #0]
 8020b18:	bd38      	pop	{r3, r4, r5, pc}
 8020b1a:	bf00      	nop
 8020b1c:	24001d28 	.word	0x24001d28

08020b20 <_getpid_r>:
 8020b20:	f7f4 bac6 	b.w	80150b0 <_getpid>

08020b24 <__malloc_lock>:
 8020b24:	4801      	ldr	r0, [pc, #4]	; (8020b2c <__malloc_lock+0x8>)
 8020b26:	f000 b809 	b.w	8020b3c <__retarget_lock_acquire_recursive>
 8020b2a:	bf00      	nop
 8020b2c:	24001d2c 	.word	0x24001d2c

08020b30 <__malloc_unlock>:
 8020b30:	4801      	ldr	r0, [pc, #4]	; (8020b38 <__malloc_unlock+0x8>)
 8020b32:	f000 b804 	b.w	8020b3e <__retarget_lock_release_recursive>
 8020b36:	bf00      	nop
 8020b38:	24001d2c 	.word	0x24001d2c

08020b3c <__retarget_lock_acquire_recursive>:
 8020b3c:	4770      	bx	lr

08020b3e <__retarget_lock_release_recursive>:
 8020b3e:	4770      	bx	lr

08020b40 <_init>:
 8020b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b42:	bf00      	nop
 8020b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b46:	bc08      	pop	{r3}
 8020b48:	469e      	mov	lr, r3
 8020b4a:	4770      	bx	lr

08020b4c <_fini>:
 8020b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b4e:	bf00      	nop
 8020b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b52:	bc08      	pop	{r3}
 8020b54:	469e      	mov	lr, r3
 8020b56:	4770      	bx	lr
