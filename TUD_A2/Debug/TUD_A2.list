
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020d7c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0802104c  0802104c  0003104c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000030  08021320  08021320  00031320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08021350  08021350  00031350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08021380  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001298  2400007c  080213fc  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001314  080213fc  00041314  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c6446  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ad96  00000000  00000000  001064f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00005858  00000000  00000000  00111288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000059a0  00000000  00000000  00116ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f766  00000000  00000000  0011c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003a39d  00000000  00000000  0015bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d803c  00000000  00000000  00195f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0036dfbf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019ed4  00000000  00000000  0036e010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08021034 	.word	0x08021034

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08021034 	.word	0x08021034

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e fbbd 	bl	801ec1c <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fefc 	bl	80162d8 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	080212a4 	.word	0x080212a4

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	080212a4 	.word	0x080212a4

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fd08 	bl	8020af0 <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f fb00 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	0802104c 	.word	0x0802104c

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01f f828 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e fdc4 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fdb1 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e fdc1 	bl	8020c8c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e fb59 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e fb46 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01e fa96 	bl	8020af4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01e fa66 	bl	8020af0 <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01e fa30 	bl	8020af0 <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01e fa08 	bl	8020af8 <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01e f92c 	bl	8020af8 <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01e f8cc 	bl	8020af8 <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01e f943 	bl	8020da0 <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fee3 	bl	8020af4 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fed1 	bl	8020af4 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d ff83 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d feb4 	bl	8020af8 <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d ff28 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fe5c 	bl	8020af8 <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d ff6f 	bl	8020d6c <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d feca 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fdfb 	bl	8020af8 <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2205      	movs	r2, #5
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b fe24 	bl	801ef44 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	080212a4 	.word	0x080212a4

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01d f91e 	bl	8020af0 <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08021068 	.word	0x08021068

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c feb0 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c feae 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c fc55 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c fc42 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c fbaa 	bl	8020af4 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c fb7a 	bl	8020af0 <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c fb3f 	bl	8020af8 <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c fadf 	bl	8020af8 <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01c f986 	bl	8020af4 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01c fa38 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01c f96c 	bl	8020af8 <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01c fa7f 	bl	8020d6c <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01c f9da 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01c f90b 	bl	8020af8 <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01c f96d 	bl	8020ccc <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb34 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb3f 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb13 	bl	8005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb1b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb1e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb38 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb0c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001ac 	.word	0x240001ac

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb13 	bl	80051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fad4 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fadf 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f015 fa81 	bl	801a1ac <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 fc6e 	bl	801a594 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f939 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 faa5 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fab2 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f015 fa4d 	bl	801a202 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e2 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa4e 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa5b 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f015 fa0a 	bl	801a202 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f89b 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa07 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa10 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b ff8b 	bl	8020da0 <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f015 f99e 	bl	801a202 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffed 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff ffe8 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004efe:	4603      	mov	r3, r0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	return *this;
 8004f28:	687b      	ldr	r3, [r7, #4]
      }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f993 	bl	800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f99e 	bl	80052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f107 0214 	add.w	r2, r7, #20
 8004f78:	f107 0318 	add.w	r3, r7, #24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffb0 	bl	8004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01d      	beq.n	8004fcc <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffce 	bl	8004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f988 	bl	80052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004fbe:	e006      	b.n	8004fce <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffa5 	bl	8004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 8004fca:	e7d3      	b.n	8004f74 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24000104 	.word	0x24000104

08004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f900 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f000 f90b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fde0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fdfd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f80c 	bl	8005054 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fddc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005046:	e7da      	b.n	8004ffe <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	240000f8 	.word	0x240000f8

08005054 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01a      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3390      	adds	r3, #144	; 0x90
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	f015 f91e 	bl	801a2b8 <HAL_FDCAN_GetRxMessage>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7ff fd2d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f931 	bl	8005316 <_ZNSaIP3CanED1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f914 	bl	80052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffeb 	bl	80050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f97e 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f96d 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f970 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f974 	bl	8005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f01b fd13 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	return *this;
 80051a8:	687b      	ldr	r3, [r7, #4]
      }
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f952 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f953 	bl	8005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f959 	bl	800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f97c 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f96b 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f805 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005240:	4603      	mov	r3, r0
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffed 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005270:	4603      	mov	r3, r0
	  ? this->_M_get()
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <_ZNRSt8optionalImE5valueEv+0x1e>
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f951 	bl	800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 800527c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800527e:	e001      	b.n	8005284 <_ZNRSt8optionalImE5valueEv+0x22>
 8005280:	f7ff fbb3 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f94b 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93a 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 80052ce:	b5b0      	push	{r4, r5, r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80052d8:	687c      	ldr	r4, [r7, #4]
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 f93c 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f952 	bl	8005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95b 	bl	80055ba <_ZNSaIP3CanEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f963 	bl	80055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005344:	461a      	mov	r2, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f957 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fea9 	bl	80050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f95a 	bl	8005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	1d38      	adds	r0, r7, #4
 8005396:	e880 0006 	stmia.w	r0, {r1, r2}
 800539a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f954 	bl	800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f978 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ae:	4604      	mov	r4, r0
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f97f 	bl	80056b6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	462b      	mov	r3, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f99f 	bl	8005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}

080053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053ce:	b5b0      	push	{r4, r5, r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9c7 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 80053e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053e8:	461a      	mov	r2, r3
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9cc 	bl	800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f939 	bl	800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9b5 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9a4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f9a5 	bl	80057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d011      	beq.n	80054d4 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685d      	ldr	r5, [r3, #4]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 f990 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f9aa 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e00c      	b.n	80054ee <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe9b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 80054da:	4604      	mov	r4, r0
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 f97d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9a9 	bl	8005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa22 	bl	8005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 80054f4:	4603      	mov	r3, r0
      }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa20 	bl	800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800552e:	4603      	mov	r3, r0
      }
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	7239      	strb	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4621      	mov	r1, r4
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa11 	bl	80059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	7239      	strb	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800559c:	68fc      	ldr	r4, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffda 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ffdf 	bl	800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}

080055ba <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
	{ }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	if (__p)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9eb 	bl	80059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe99 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9e5 	bl	8005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8005684:	461a      	mov	r2, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9e2 	bl	8005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffd1 	bl	8005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffed 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d5 	bl	8005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4423      	add	r3, r4
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}

080056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80056da:	b5b0      	push	{r4, r5, r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80056e4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9d0 	bl	8005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80056ee:	462a      	mov	r2, r5
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f9d5 	bl	8005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}

08005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff ffe1 	bl	80056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005718:	4603      	mov	r3, r0
 800571a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800571c:	68fc      	ldr	r4, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f827 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f000 f9ca 	bl	8005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f9ed 	bl	8005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f80d 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800575a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800575c:	4622      	mov	r2, r4
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f9eb 	bl	8005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8005766:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9e0 	bl	8005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9dc 	bl	8005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f7ff ffed 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005802:	4603      	mov	r3, r0
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	2004      	movs	r0, #4
 800580c:	f7fa fd90 	bl	8000330 <_ZnwjPv>
 8005810:	4603      	mov	r3, r0
 8005812:	601c      	str	r4, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffd7 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7ff ffdd 	bl	80057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800584e:	2101      	movs	r1, #1
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9a5 	bl	8005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcc3 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 800586a:	4603      	mov	r3, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9d8 	bl	8005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800587e:	4603      	mov	r3, r0
 8005880:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e6 	bl	8005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 800588c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005892:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff9d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	4629      	mov	r1, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffb7 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f97e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f0 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 f9d6 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f969 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9db 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f9c1 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005900:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800590c:	461a      	mov	r2, r3
 800590e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005910:	f7ff fe73 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
    }
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	08021084 	.word	0x08021084

08005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc65 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9c2 	bl	8005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005956:	4603      	mov	r3, r0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f95d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005964:	4603      	mov	r3, r0
      }
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	7239      	strb	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	    { }
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	7239      	strb	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdce 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffde 	bl	8005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	711a      	strb	r2, [r3, #4]
	{ }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a06:	f7fa fc8b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f01b f86d 	bl	8020af0 <_ZdlPv>
	    return;
 8005a16:	e005      	b.n	8005a24 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 faa4 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f967 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f971 	bl	8005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f971 	bl	8005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	10db      	asrs	r3, r3, #3
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f919 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f961 	bl	8005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf8c      	ite	hi
 8005aec:	2301      	movhi	r3, #1
 8005aee:	2300      	movls	r3, #0
 8005af0:	b2dc      	uxtb	r4, r3
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc3d 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d002      	beq.n	8005b06 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b02:	f01b f8c3 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b06:	687b      	ldr	r3, [r7, #4]
      }
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	080210a0 	.word	0x080210a0

08005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f956 	bl	8005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b32:	2300      	movs	r3, #0
      }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f963 	bl	8005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005b68:	f7fa fbda 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f962 	bl	8005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005b7a:	e003      	b.n	8005b84 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f975 	bl	8005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f969 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f976 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	1ae2      	subs	r2, r4, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf34      	ite	cc
 8005bc4:	2301      	movcc	r3, #1
 8005bc6:	2300      	movcs	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01b f85c 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f966 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f962 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f107 0208 	add.w	r2, r7, #8
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe2e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4423      	add	r3, r4
 8005bfc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f951 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d306      	bcc.n	8005c1a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f939 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d904      	bls.n	8005c24 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f932 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c24:	697b      	ldr	r3, [r7, #20]
      }
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffbd 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f7fe ffb8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1ae3      	subs	r3, r4, r3
 8005c4e:	109b      	asrs	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f92a 	bl	8005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e000      	b.n	8005c78 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005c76:	2300      	movs	r3, #0
      }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c8e:	f88d 4000 	strb.w	r4, [sp]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f934 	bl	8005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005c9e:	4603      	mov	r3, r0
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f936 	bl	8005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	425b      	negs	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	f107 020c 	add.w	r2, r7, #12
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbfe 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f935 	bl	8005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
	{ }
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005d68:	f7fa fada 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f01a febc 	bl	8020af0 <_ZdlPv>
	    return;
 8005d78:	e005      	b.n	8005d86 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69f8      	ldr	r0, [r7, #28]
 8005d80:	f000 f9a5 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005d96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005db2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffea 	bl	8005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f80c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	681b      	ldr	r3, [r3, #0]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005dec:	f7fa fa98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f01a fe7c 	bl	8020af8 <_Znwj>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e006      	b.n	8005e12 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f96f 	bl	80060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	bf00      	nop
      { return __a.allocate(__n); }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8b6 	bl	8005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e34:	4603      	mov	r3, r0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8b5 	bl	8005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f8bc 	bl	8005fd6 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e7f0      	b.n	8005e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f8d2 	bl	8006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b4 	bl	8006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	109b      	asrs	r3, r3, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005ed8:	f7fa fa22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f01a fe06 	bl	8020af8 <_Znwj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e006      	b.n	8005efe <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93a 	bl	800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005efa:	4603      	mov	r3, r0
 8005efc:	bf00      	nop
      { return __a.allocate(__n); }
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f897 	bl	800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f20:	4603      	mov	r3, r0
      }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    }
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f48:	f7fa f9ea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f897 	bl	8006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f5a:	e003      	b.n	8005f64 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8aa 	bl	80060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f01a fdb9 	bl	8020af4 <_ZdlPvj>
      }
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8ba 	bl	800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8bb 	bl	800615a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800600c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006010:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffea 	bl	8005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc fedd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800602c:	4603      	mov	r3, r0
 800602e:	681b      	ldr	r3, [r3, #0]
      }
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8a5 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006062:	4604      	mov	r4, r0
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f8a1 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 800606a:	4605      	mov	r5, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f89d 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f8a2 	bl	80061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800607e:	4603      	mov	r3, r0
    }
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}

08006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8af 	bl	80061fe <_ZSt11__addressofIP3CanEPT_RS2_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b6 	bl	8006214 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e7f0      	b.n	8006092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4619      	mov	r1, r3
 80060e0:	68b8      	ldr	r0, [r7, #8]
 80060e2:	f01a fd07 	bl	8020af4 <_ZdlPvj>
      }
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f896 	bl	800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	bf8c      	ite	hi
 8006106:	2301      	movhi	r3, #1
 8006108:	2300      	movls	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006110:	f01a fdb9 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4618      	mov	r0, r3
 800611a:	f01a fced 	bl	8020af8 <_Znwj>
 800611e:	4603      	mov	r3, r0
 8006120:	bf00      	nop
      }
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f883 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800613c:	4604      	mov	r4, r0
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f000 f87f 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006144:	4603      	mov	r3, r0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f884 	bl	8006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006150:	4603      	mov	r3, r0
    }
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
    }
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f88f 	bl	800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf8c      	ite	hi
 8006188:	2301      	movhi	r3, #1
 800618a:	2300      	movls	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006192:	f01a fd78 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f01a fcac 	bl	8020af8 <_Znwj>
 80061a0:	4603      	mov	r3, r0
 80061a2:	bf00      	nop
      }
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	109b      	asrs	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd06      	ble.n	80061ee <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f01a fdbf 	bl	8020d6c <memmove>
      return __result + __count;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006232:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f826 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 800626a:	4604      	mov	r4, r0
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f000 f822 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 8006272:	4605      	mov	r5, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f828 	bl	80062cc <_ZSt12__niter_baseIP3DLCET_S2_>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f82d 	bl	80062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006288:	4602      	mov	r2, r0
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f837 	bl	8006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 8006294:	4603      	mov	r3, r0
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}

0800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f811 	bl	800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006326:	f7f9 fffb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f80d 	bl	8006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800633a:	4603      	mov	r3, r0
 800633c:	e006      	b.n	800634c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82b 	bl	800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006348:	4603      	mov	r3, r0
 800634a:	bf00      	nop
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	10db      	asrs	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dd0f      	ble.n	8006390 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006378:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e7ec      	b.n	800636a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 8006390:	687b      	ldr	r3, [r7, #4]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	10db      	asrs	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	461a      	mov	r2, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f01a fcd2 	bl	8020d6c <memmove>
	  return __result + _Num;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0a6      	sub	sp, #152	; 0x98
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d126      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d121      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 80063f2:	481a      	ldr	r0, [pc, #104]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063f4:	f7fe fe70 	bl	80050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	4611      	mov	r1, r2
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4618      	mov	r0, r3
 8006404:	f01a fca4 	bl	8020d50 <memcpy>
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	2310      	movs	r3, #16
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffa1 	bl	800535e <_ZNSaI3DLCEC1Ev>
 800641c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006420:	f107 020c 	add.w	r2, r7, #12
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006428:	f7fe ffb0 	bl	800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800642c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffa0 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	4293      	cmp	r3, r2
 8006444:	d105      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006448:	f7fe ffc1 	bl	80053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800644e:	f000 f80b 	bl	8006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006452:	bf00      	nop
 8006454:	3798      	adds	r7, #152	; 0x98
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	240000f8 	.word	0x240000f8
 8006460:	080210d4 	.word	0x080210d4
 8006464:	24000104 	.word	0x24000104

08006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc14 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8006480:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006482:	461a      	mov	r2, r3
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc19 	bl	8005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff4c 	bl	800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}

0800649e <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff96 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7ff ff8e 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f89e 	bl	8006608 <_ZNSaIP9DigitalInED1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f881 	bl	80065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffeb 	bl	80064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8b1 	bl	800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f88f 	bl	8006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffeb 	bl	8006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4619      	mov	r1, r3
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <_ZN9DigitalInC1EP3Pin+0x48>)
 800657a:	f000 f89e 	bl	80066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 8006586:	f000 f8a9 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800658a:	4603      	mov	r3, r0
 800658c:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	719a      	strb	r2, [r3, #6]
}
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	24000110 	.word	0x24000110
 80065a4:	2400011c 	.word	0x2400011c

080065a8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f014 ff18 	bl	801b3f4 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	721a      	strb	r2, [r3, #8]
 80065d4:	e002      	b.n	80065dc <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	721a      	strb	r2, [r3, #8]
	return state;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a1b      	ldrb	r3, [r3, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d1 	bl	8006798 <_ZNSaIP9DigitalInEC1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d9 	bl	80067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8cd 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff3c 	bl	80064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8d0 	bl	80067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fa fac1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fe6c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8db 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b7 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff2d 	bl	800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 f8d1 	bl	800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d7 	bl	8006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8fc 	bl	80068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80066ee:	4603      	mov	r3, r0
 80066f0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	f107 020c 	add.w	r2, r7, #12
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f909 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f917 	bl	8006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681c      	ldr	r4, [r3, #0]
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f91d 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4621      	mov	r1, r4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fa fbd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006746:	687c      	ldr	r4, [r7, #4]
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f912 	bl	800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fbce 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006764:	f107 0218 	add.w	r2, r7, #24
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f911 	bl	800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8ec 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	3304      	adds	r3, #4
      }
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	080212a4 	.word	0x080212a4

08006798 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f939 	bl	8006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	{ }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f91c 	bl	8006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f930 	bl	8006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f000 f92b 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800682c:	4603      	mov	r3, r0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fff0 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f000 f92f 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800683c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f936 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800684a:	e7e9      	b.n	8006820 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d011      	beq.n	80068bc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006898:	687c      	ldr	r4, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685d      	ldr	r5, [r3, #4]
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f000 f918 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f932 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00c      	b.n	80068d6 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f93b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 80068c2:	4604      	mov	r4, r0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 f905 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f943 	bl	8006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bc 	bl	8006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 80068dc:	4603      	mov	r3, r0
      }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f9c8 	bl	8006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9d2 	bl	8006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006914:	4603      	mov	r3, r0
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9c2 	bl	8006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006956:	bf00      	nop
 8006958:	4620      	mov	r0, r4
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f9bf 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006972:	4603      	mov	r3, r0
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800699c:	b5b0      	push	{r4, r5, r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa fc5b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b0:	4604      	mov	r4, r0
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fa ff45 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b8:	4605      	mov	r5, r0
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fa fc69 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9a0 	bl	8006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80069cc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f000 faee 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f107 0010 	add.w	r0, r7, #16
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f000 f9b8 	bl	8006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80069e8:	6939      	ldr	r1, [r7, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faf1 	bl	8006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e00b      	b.n	8006a10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f859 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb23 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a46:	f7f9 fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f01a f84d 	bl	8020af0 <_ZdlPv>
	    return;
 8006a56:	e005      	b.n	8006a64 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 fdac 	bl	80075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fad7 	bl	8007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae8 	bl	800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff ffed 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7f9 fc14 	bl	8000330 <_ZnwjPv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	601c      	str	r4, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffd7 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffdd 	bl	8006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fab8 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fab7 	bl	80070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 faf4 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fafa 	bl	800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb08 	bl	80071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006ba8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff8b 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffa5 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb18 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb1d 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006be4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4621      	mov	r1, r4
 8006bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bec:	f000 faf8 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006bf0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb03 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb08 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fae3 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	f7ff fdd4 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
    }
 8006c48:	bf00      	nop
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	08021154 	.word	0x08021154

08006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff6b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 faef 	bl	8007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb01 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006c80:	4603      	mov	r3, r0
      }
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fddd 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafc 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb02 	bl	80072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}

08006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9c2 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006ce2:	bf00      	nop
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb0b 	bl	8007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb08 	bl	8007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d20:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa fa9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd89 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d30:	4605      	mov	r5, r0
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fa faad 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb05 	bl	8007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d48:	697b      	ldr	r3, [r7, #20]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}

08006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d52:	b5b0      	push	{r4, r5, r7, lr}
 8006d54:	b08c      	sub	sp, #48	; 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb22 	bl	80073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006d6c:	69bc      	ldr	r4, [r7, #24]
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f000 fa93 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006d74:	4603      	mov	r3, r0
 8006d76:	429c      	cmp	r4, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d032      	beq.n	8006dea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 fb22 	bl	80073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006d8a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006d90:	68bc      	ldr	r4, [r7, #8]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 fb27 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb2e 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006da2:	4603      	mov	r3, r0
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fa f894 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dbc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb0d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fb f867 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006dda:	e0e5      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb17 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006de8:	e0de      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006dea:	68bc      	ldr	r4, [r7, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb03 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7fa f86a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d059      	beq.n	8006ec0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e10:	69bc      	ldr	r4, [r7, #24]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f000 fb89 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fb7d 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e30:	4604      	mov	r4, r0
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb79 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7fb f8de 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e44:	e0b0      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e46:	68bc      	ldr	r4, [r7, #8]
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb78 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fad1 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fa f837 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fe04 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	f107 0214 	add.w	r2, r7, #20
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fb f805 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e9e:	e083      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fb f8a8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006eb0:	e07a      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 faac 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006ebe:	e073      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006ec0:	68bc      	ldr	r4, [r7, #8]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9a 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fa f800 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d059      	beq.n	8006f94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006ee4:	69bc      	ldr	r4, [r7, #24]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 fa7d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa6f 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fa ffc9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f16:	e047      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f18:	68bc      	ldr	r4, [r7, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb1e 	bl	8007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fa66 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f32:	4603      	mov	r3, r0
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 ffcd 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd9a 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f107 0218 	add.w	r2, r7, #24
 8006f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa ff9b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f72:	e019      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb f83e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f84:	e010      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fa42 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006f92:	e009      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fb f867 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae4 	bl	8007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 faeb 	bl	80075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 8006fcc:	4603      	mov	r3, r0
      }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006fd6:	b5b0      	push	{r4, r5, r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f955 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d012      	beq.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8006ff8:	68fc      	ldr	r4, [r7, #12]
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff ffd8 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007000:	4603      	mov	r3, r0
 8007002:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9fa 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800700a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 ff61 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800702a:	7df8      	ldrb	r0, [r7, #23]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	f019 fdce 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f805 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800704a:	693b      	ldr	r3, [r7, #16]
    }
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007072:	b590      	push	{r4, r7, lr}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 faab 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007082:	4604      	mov	r4, r0
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff fe33 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	4620      	mov	r0, r4
 8007090:	f000 faad 	bl	80075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa96 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2201      	movs	r2, #1
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faa7 	bl	8007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 faa9 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80070f2:	4604      	mov	r4, r0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fab6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	1ae2      	subs	r2, r4, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf34      	ite	cc
 8007104:	2301      	movcc	r3, #1
 8007106:	2300      	movcs	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f019 fdbc 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 faa6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800711a:	4604      	mov	r4, r0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faa2 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007122:	4603      	mov	r3, r0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fb fb8e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007136:	4603      	mov	r3, r0
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4423      	add	r3, r4
 800713c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa91 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa79 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4293      	cmp	r3, r2
 8007158:	d904      	bls.n	8007164 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa72 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007164:	697b      	ldr	r3, [r7, #20]
      }
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}

0800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ff9e 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f835 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f000 f830 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1ae3      	subs	r3, r4, r3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa5a 	bl	8007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 80071d6:	2300      	movs	r3, #0
      }
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80071ee:	f88d 4000 	strb.w	r4, [sp]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa64 	bl	80076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80071fe:	4603      	mov	r3, r0
      }
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa5b 	bl	80076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	425b      	negs	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff24 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01d      	beq.n	8007302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80072c6:	68fc      	ldr	r4, [r7, #12]
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f7ff fe71 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80072ce:	4603      	mov	r3, r0
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f9 fdfe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fbd3 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80072f4:	60b8      	str	r0, [r7, #8]
 80072f6:	e7e3      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f7ff fbc2 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80072fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007300:	e7de      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fea3 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800730e:	697b      	ldr	r3, [r7, #20]
    }
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa02 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94d 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800733e:	4603      	mov	r3, r0
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9fc 	bl	8007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007348:	4603      	mov	r3, r0
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4619      	mov	r1, r3
 8007366:	2018      	movs	r0, #24
 8007368:	f7f8 ffe2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f933 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007372:	4604      	mov	r4, r0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fcbb 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800737a:	4605      	mov	r5, r0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f9 ff72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007382:	4606      	mov	r6, r0
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7fa fa5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800738a:	4680      	mov	r8, r0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7f9 ff80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007392:	4603      	mov	r3, r0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4643      	mov	r3, r8
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa1c 	bl	80077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe48 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fdd2 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800740c:	4603      	mov	r3, r0
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007416:	b5b0      	push	{r4, r5, r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fa16 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff ff34 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007446:	68bc      	ldr	r4, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fdae 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007454:	4603      	mov	r3, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	f7f9 fd3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb11 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007478:	4603      	mov	r3, r0
 800747a:	e004      	b.n	8007486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff faff 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007484:	4603      	mov	r3, r0
 8007486:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007488:	e7d8      	b.n	800743c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fdde 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074a0:	68b8      	ldr	r0, [r7, #8]
 80074a2:	f000 f9b6 	bl	8007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	f107 021c 	add.w	r2, r7, #28
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa32 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80074c0:	f107 0214 	add.w	r2, r7, #20
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f9b2 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 80074d0:	e027      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f833 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80074dc:	68bc      	ldr	r4, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff8c 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80074e6:	4603      	mov	r3, r0
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f9 fcf2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80074fc:	f107 0214 	add.w	r2, r7, #20
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f994 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800750c:	e009      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7fa fdaa 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	3728      	adds	r7, #40	; 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f019 fb3c 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	return *this;
 800755a:	687b      	ldr	r3, [r7, #4]
      }
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f019 fb29 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007576:	4602      	mov	r2, r0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	return *this;
 800757c:	687b      	ldr	r3, [r7, #4]
      }
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f967 	bl	8007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f019 fa91 	bl	8020af4 <_ZdlPvj>
      }
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f940 	bl	800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800761e:	f7f8 fe7f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f019 fa61 	bl	8020af0 <_ZdlPv>
	    return;
 800762e:	e005      	b.n	800763c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f9e1 	bl	80079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f945 	bl	80078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007654:	4603      	mov	r3, r0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f927 	bl	80078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800765c:	4603      	mov	r3, r0
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	109b      	asrs	r3, r3, #2
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007698:	f7f8 fe42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f019 fa26 	bl	8020af8 <_Znwj>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e006      	b.n	80076be <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9b3 	bl	8007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	bf00      	nop
      { return __a.allocate(__n); }
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f90a 	bl	80078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80076e0:	4603      	mov	r3, r0
      }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
    }
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007708:	f7f8 fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f90a 	bl	800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800771a:	e003      	b.n	8007724 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f91d 	bl	800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007752:	f7f8 fde5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4618      	mov	r0, r3
 8007768:	f019 f9c6 	bl	8020af8 <_Znwj>
 800776c:	4603      	mov	r3, r0
 800776e:	e006      	b.n	800777e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9b1 	bl	8007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 800777a:	4603      	mov	r3, r0
 800777c:	bf00      	nop
      { return __a.allocate(__n); }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007786:	b5b0      	push	{r4, r5, r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7f9 fd66 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa f851 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077a0:	4602      	mov	r2, r0
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb f8e6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ae:	f107 0418 	add.w	r4, r7, #24
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fd6d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2008      	movs	r0, #8
 80077be:	f7f8 fdb7 	bl	8000330 <_ZnwjPv>
 80077c2:	4605      	mov	r5, r0
 80077c4:	7f3b      	ldrb	r3, [r7, #28]
 80077c6:	4622      	mov	r2, r4
 80077c8:	7d39      	ldrb	r1, [r7, #20]
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f8ec 	bl	80079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80077d0:	462b      	mov	r3, r5
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}

080077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077da:	b5b0      	push	{r4, r5, r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077ee:	4604      	mov	r4, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fa f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077f6:	4605      	mov	r5, r0
 80077f8:	6a38      	ldr	r0, [r7, #32]
 80077fa:	f7f9 fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077fe:	4603      	mov	r3, r0
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff ffbe 	bl	8007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fc15 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f8c5 	bl	80079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007846:	4603      	mov	r3, r0
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fa ffad 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007854:	4603      	mov	r3, r0
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b9 	bl	80079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800789a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078b6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffea 	bl	8007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078be:	4603      	mov	r3, r0
 80078c0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fa8a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681b      	ldr	r3, [r3, #0]
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ab 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007908:	4604      	mov	r4, r0
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f8a7 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007910:	4605      	mov	r5, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a3 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f8a8 	bl	8007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007924:	4603      	mov	r3, r0
    }
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bdb0      	pop	{r4, r5, r7, pc}

0800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8b5 	bl	8007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8bc 	bl	8007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e7f0      	b.n	8007938 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7fb fadb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb facc 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8007990:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
      { }
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	7239      	strb	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079b6:	463a      	mov	r2, r7
 80079b8:	f88d 4000 	strb.w	r4, [sp]
 80079bc:	462b      	mov	r3, r5
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff ffd7 	bl	8007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f019 f86d 	bl	8020af4 <_ZdlPvj>
      }
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f877 	bl	8007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bf8c      	ite	hi
 8007a3a:	2301      	movhi	r3, #1
 8007a3c:	2300      	movls	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a44:	f019 f91f 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f019 f853 	bl	8020af8 <_Znwj>
 8007a52:	4603      	mov	r3, r0
 8007a54:	bf00      	nop
      }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	109b      	asrs	r3, r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd06      	ble.n	8007aa0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f019 f966 	bl	8020d6c <memmove>
      return __result + __count;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fe0b 	bl	80076ea <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f825 	bl	8007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf8c      	ite	hi
 8007af6:	2301      	movhi	r3, #1
 8007af8:	2300      	movls	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b00:	f019 f8c1 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f018 fff2 	bl	8020af8 <_Znwj>
 8007b14:	4603      	mov	r3, r0
 8007b16:	bf00      	nop
      }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	05555555 	.word	0x05555555

08007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd96 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <_Z41__static_initialization_and_destruction_0ii>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007b8a:	480c      	ldr	r0, [pc, #48]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b8c:	f7fe fcb0 	bl	80064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007b92:	f7fe fcd3 	bl	800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d105      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007ba6:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ba8:	f7ff ffd4 	bl	8007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bae:	f000 f809 	bl	8007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000110 	.word	0x24000110
 8007bc0:	2400011c 	.word	0x2400011c

08007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fb21 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bde:	461a      	mov	r2, r3
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fb26 	bl	8007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd17 	bl	800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}

08007bfa <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7ff ffb4 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ffac 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8b6 	bl	8007d94 <_ZNSaIP10DigitalOutED1Ev>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f899 	bl	8007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffeb 	bl	8007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c9 	bl	8007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f8a7 	bl	8007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffeb 	bl	8007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007cd6:	f000 f8b6 	bl	8007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007cda:	687c      	ldr	r4, [r7, #4]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007ce2:	f000 f8c1 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2204      	movs	r2, #4
 8007cee:	719a      	strb	r2, [r3, #6]
}
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	24000134 	.word	0x24000134
 8007d00:	24000140 	.word	0x24000140

08007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f808 	bl	8007d2c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d1c:	e002      	b.n	8007d24 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f816 	bl	8007d50 <_ZN10DigitalOut8turn_lowEv>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f013 fb6e 	bl	801b424 <HAL_GPIO_WritePin>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f013 fb5c 	bl	801b424 <HAL_GPIO_WritePin>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8d1 	bl	8007f24 <_ZNSaIP10DigitalOutEC1Ev>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8d9 	bl	8007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8cd 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff24 	bl	8007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8d0 	bl	8007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fefb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 faa6 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8db 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8b7 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff15 	bl	8007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f000 f8d1 	bl	8007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8d7 	bl	800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8fc 	bl	8008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f906 	bl	8008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007e84:	4603      	mov	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f909 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f917 	bl	80080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f91d 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 f80c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ed2:	687c      	ldr	r4, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f912 	bl	8008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 f808 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ef0:	f107 0218 	add.w	r2, r7, #24
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f911 	bl	8008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8ec 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3304      	adds	r3, #4
      }
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	080212a4 	.word	0x080212a4

08007f24 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f939 	bl	80081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
	{ }
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f91c 	bl	80081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f930 	bl	80081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f000 f92b 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fff0 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f000 f92f 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007fc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f936 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007fd6:	e7e9      	b.n	8007fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d011      	beq.n	8008048 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008024:	687c      	ldr	r4, [r7, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685d      	ldr	r5, [r3, #4]
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 f918 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f932 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e00c      	b.n	8008062 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f93b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 f905 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4621      	mov	r1, r4
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f943 	bl	80082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 8008068:	4603      	mov	r3, r0
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9c8 	bl	8008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d2 	bl	8008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9c2 	bl	8008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 80080e2:	bf00      	nop
 80080e4:	4620      	mov	r0, r4
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}

080080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9bf 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f895 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800813c:	4604      	mov	r4, r0
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f7f9 fb7f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008144:	4605      	mov	r5, r0
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f7f9 f8a3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800814c:	4603      	mov	r3, r0
 800814e:	462a      	mov	r2, r5
 8008150:	4621      	mov	r1, r4
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9a0 	bl	8008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008158:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800815a:	69f8      	ldr	r0, [r7, #28]
 800815c:	f000 faee 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008160:	4603      	mov	r3, r0
 8008162:	f107 0010 	add.w	r0, r7, #16
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	f000 f9b8 	bl	80084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8008174:	6939      	ldr	r1, [r7, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faf1 	bl	8008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8008180:	4603      	mov	r3, r0
 8008182:	e00b      	b.n	800819c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f859 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb23 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800819a:	69bb      	ldr	r3, [r7, #24]
      }
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bdb0      	pop	{r4, r5, r7, pc}

080081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d2:	f7f8 f8a5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f018 fc87 	bl	8020af0 <_ZdlPv>
	    return;
 80081e2:	e005      	b.n	80081f0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fdac 	bl	8008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad7 	bl	80087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fae8 	bl	8008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f7ff ffed 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	2004      	movs	r0, #4
 8008290:	f7f8 f84e 	bl	8000330 <_ZnwjPv>
 8008294:	4603      	mov	r3, r0
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ffd7 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7ff ffdd 	bl	8008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fab8 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fab7 	bl	800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 80082fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faf4 	bl	80088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	f107 0214 	add.w	r2, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fafa 	bl	800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008326:	4603      	mov	r3, r0
 8008328:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb08 	bl	8008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008334:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800833a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff8b 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff ffa5 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb18 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008364:	4603      	mov	r3, r0
 8008366:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fb1d 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008370:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4621      	mov	r1, r4
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 faf8 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800837c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3304      	adds	r3, #4
 8008382:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb03 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800838e:	4603      	mov	r3, r0
 8008390:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb08 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 800839a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fae3 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083a6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083b4:	461a      	mov	r2, r3
 80083b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b8:	f7ff fdd4 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
    }
 80083d4:	bf00      	nop
 80083d6:	3730      	adds	r7, #48	; 0x30
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08021170 	.word	0x08021170

080083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff6b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faef 	bl	80089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb01 	bl	8008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800840c:	4603      	mov	r3, r0
      }
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fddd 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008426:	4604      	mov	r4, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fafc 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800842e:	4602      	mov	r2, r0
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb02 	bl	8008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9c2 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800846e:	bf00      	nop
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb0b 	bl	8008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fb08 	bl	8008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7f8 fed9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f9c3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084bc:	4605      	mov	r5, r0
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f7f8 fee7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb05 	bl	8008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80084d4:	697b      	ldr	r3, [r7, #20]
	}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b08c      	sub	sp, #48	; 0x30
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb22 	bl	8008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80084f8:	69bc      	ldr	r4, [r7, #24]
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f000 fa93 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008500:	4603      	mov	r3, r0
 8008502:	429c      	cmp	r4, r3
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d032      	beq.n	8008576 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 fb22 	bl	8008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800851c:	68bc      	ldr	r4, [r7, #8]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fb27 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb2e 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800852e:	4603      	mov	r3, r0
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcce 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008548:	2300      	movs	r3, #0
	  if (size() > 0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	68b8      	ldr	r0, [r7, #8]
 8008554:	f000 fb0d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008558:	4602      	mov	r2, r0
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 fca1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008566:	e0e5      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb17 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8008574:	e0de      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008576:	68bc      	ldr	r4, [r7, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb03 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008584:	4603      	mov	r3, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	4629      	mov	r1, r5
 800858c:	4620      	mov	r0, r4
 800858e:	f7f8 fca4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d059      	beq.n	800864c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800859c:	69bc      	ldr	r4, [r7, #24]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f000 fb89 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fb7d 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085bc:	4604      	mov	r4, r0
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 fb79 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7f9 fd18 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80085d0:	e0b0      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80085d2:	68bc      	ldr	r4, [r7, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb78 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085e8:	4603      	mov	r3, r0
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f8 fc71 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fe04 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008616:	2300      	movs	r3, #0
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7f9 fc3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800862a:	e083      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800862c:	f107 0218 	add.w	r2, r7, #24
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f9 fce2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800863c:	e07a      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faac 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800864a:	e073      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800864c:	68bc      	ldr	r4, [r7, #8]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa9a 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008656:	4603      	mov	r3, r0
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 fc3a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d059      	beq.n	8008720 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008670:	69bc      	ldr	r4, [r7, #24]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f000 fa7d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008678:	4603      	mov	r3, r0
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429c      	cmp	r4, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f000 fa6f 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7f9 fc03 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086a2:	e047      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086a4:	68bc      	ldr	r4, [r7, #8]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb1e 	bl	8008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fa66 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086be:	4603      	mov	r3, r0
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7f8 fc07 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd9a 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	f107 0218 	add.w	r2, r7, #24
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7f9 fbd5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086fe:	e019      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7f9 fc78 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008710:	e010      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fa42 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800871e:	e009      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008724:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008728:	f107 0318 	add.w	r3, r7, #24
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f9 fca1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fae4 	bl	8008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f000 faeb 	bl	8008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008758:	4603      	mov	r3, r0
      }
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008762:	b5b0      	push	{r4, r5, r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f955 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800877c:	4602      	mov	r2, r0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4293      	cmp	r3, r2
 8008782:	d012      	beq.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008784:	68fc      	ldr	r4, [r7, #12]
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f7ff ffd8 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800878c:	4603      	mov	r3, r0
 800878e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fa 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008796:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7f8 fb9b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087b6:	7df8      	ldrb	r0, [r7, #23]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f018 fa08 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f805 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80087d6:	693b      	ldr	r3, [r7, #16]
    }
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faab 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800880e:	4604      	mov	r4, r0
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f7ff fe33 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faad 	bl	8008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa96 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 faa7 	bl	8008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 faa9 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800887e:	4604      	mov	r4, r0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fab6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008886:	4603      	mov	r3, r0
 8008888:	1ae2      	subs	r2, r4, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf34      	ite	cc
 8008890:	2301      	movcc	r3, #1
 8008892:	2300      	movcs	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f018 f9f6 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 faa6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088a6:	4604      	mov	r4, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 faa2 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ae:	4603      	mov	r3, r0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 ffc8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80088c2:	4603      	mov	r3, r0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4423      	add	r3, r4
 80088c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa91 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d306      	bcc.n	80088e6 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa79 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d904      	bls.n	80088f0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa72 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e000      	b.n	80088f2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 80088f0:	697b      	ldr	r3, [r7, #20]
      }
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff9e 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f835 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800892a:	4603      	mov	r3, r0
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f000 f830 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008934:	4603      	mov	r3, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	1ae3      	subs	r3, r4, r3
 800893a:	109b      	asrs	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa5a 	bl	8008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800895e:	4603      	mov	r3, r0
 8008960:	e000      	b.n	8008964 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 8008962:	2300      	movs	r3, #0
      }
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800897a:	f88d 4000 	strb.w	r4, [sp]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa64 	bl	8008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800898a:	4603      	mov	r3, r0
      }
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fa5b 	bl	8008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	425b      	negs	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff ff24 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a52:	68fc      	ldr	r4, [r7, #12]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fe71 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7f8 fa38 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f083 0301 	eor.w	r3, r3, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7ff fbd3 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008a80:	60b8      	str	r0, [r7, #8]
 8008a82:	e7e3      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fbc2 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008a8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008a8c:	e7de      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fea3 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008a9a:	697b      	ldr	r3, [r7, #20]
    }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa02 	bl	8008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94d 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f9fc 	bl	8008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2018      	movs	r0, #24
 8008af4:	f7f7 fc1c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f933 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008afe:	4604      	mov	r4, r0
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff fcbb 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b06:	4605      	mov	r5, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fbac 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7f8 fe96 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b16:	4680      	mov	r8, r0
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f7f8 fbba 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4643      	mov	r3, r8
 8008b24:	4632      	mov	r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa1c 	bl	8008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fe48 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdd2 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008ba2:	b5b0      	push	{r4, r5, r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f7ff fa16 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7ff ff34 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008bd2:	68bc      	ldr	r4, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681d      	ldr	r5, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fdae 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008be0:	4603      	mov	r3, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	4629      	mov	r1, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f8 f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb11 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c04:	4603      	mov	r3, r0
 8008c06:	e004      	b.n	8008c12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faff 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c10:	4603      	mov	r3, r0
 8008c12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c14:	e7d8      	b.n	8008bc8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdde 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01d      	beq.n	8008c68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f9b6 	bl	8008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	f107 021c 	add.w	r2, r7, #28
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fa32 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b2 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c5c:	e027      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f833 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c68:	68bc      	ldr	r4, [r7, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff8c 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c72:	4603      	mov	r3, r0
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f8 f92c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008c88:	f107 0214 	add.w	r2, r7, #20
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f994 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c98:	e009      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	f107 0220 	add.w	r2, r7, #32
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7f9 f9e4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f017 ff76 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ce6:	687b      	ldr	r3, [r7, #4]
      }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f017 ff63 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	return *this;
 8008d08:	687b      	ldr	r3, [r7, #4]
      }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f967 	bl	8008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f017 fecb 	bl	8020af4 <_ZdlPvj>
      }
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f000 f940 	bl	800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008daa:	f7f7 fab9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008db4:	69b8      	ldr	r0, [r7, #24]
 8008db6:	f017 fe9b 	bl	8020af0 <_ZdlPv>
	    return;
 8008dba:	e005      	b.n	8008dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	69b9      	ldr	r1, [r7, #24]
 8008dc0:	69f8      	ldr	r0, [r7, #28]
 8008dc2:	f000 f9e1 	bl	8009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f945 	bl	800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f927 	bl	8009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e24:	f7f7 fa7c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f017 fe60 	bl	8020af8 <_Znwj>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e006      	b.n	8008e4a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9b3 	bl	80091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e46:	4603      	mov	r3, r0
 8008e48:	bf00      	nop
      { return __a.allocate(__n); }
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f90a 	bl	8009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008e6c:	4603      	mov	r3, r0
      }
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    }
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008e94:	f7f7 fa44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f90a 	bl	80090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ea6:	e003      	b.n	8008eb0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008ede:	f7f7 fa1f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f017 fe00 	bl	8020af8 <_Znwj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e006      	b.n	8008f0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b1 	bl	8009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	bf00      	nop
      { return __a.allocate(__n); }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f12:	b5b0      	push	{r4, r5, r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7f8 f9a0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fd20 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f3a:	f107 0418 	add.w	r4, r7, #24
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f7f8 f9a7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4619      	mov	r1, r3
 8008f48:	2008      	movs	r0, #8
 8008f4a:	f7f7 f9f1 	bl	8000330 <_ZnwjPv>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	7f3b      	ldrb	r3, [r7, #28]
 8008f52:	4622      	mov	r2, r4
 8008f54:	7d39      	ldrb	r1, [r7, #20]
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f8ec 	bl	8009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}

08008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008f66:	b5b0      	push	{r4, r5, r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f976 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7f8 fc60 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f82:	4605      	mov	r5, r0
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f7f8 f984 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f7ff ffbe 	bl	8008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fc15 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f8c5 	bl	800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7f9 fbe7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8b9 	bl	8009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009000:	4603      	mov	r3, r0
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    }
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009026:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800903e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009042:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffea 	bl	800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800904a:	4603      	mov	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7f9 fec4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800905e:	4603      	mov	r3, r0
 8009060:	681b      	ldr	r3, [r3, #0]
      }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f8ab 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 8009094:	4604      	mov	r4, r0
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8a7 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 800909c:	4605      	mov	r5, r0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090a4:	4602      	mov	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f8a8 	bl	8009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090b0:	4603      	mov	r3, r0
    }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}

080090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00a      	beq.n	80090e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8b5 	bl	800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bc 	bl	8009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	e7f0      	b.n	80090c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f9 ff15 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009114:	4603      	mov	r3, r0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 ff06 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800911c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
      { }
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	7239      	strb	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009142:	463a      	mov	r2, r7
 8009144:	f88d 4000 	strb.w	r4, [sp]
 8009148:	462b      	mov	r3, r5
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffd7 	bl	8009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4619      	mov	r1, r3
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f017 fca7 	bl	8020af4 <_ZdlPvj>
      }
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f877 	bl	80092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091be:	4602      	mov	r2, r0
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091d0:	f017 fd59 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f017 fc8d 	bl	8020af8 <_Znwj>
 80091de:	4603      	mov	r3, r0
 80091e0:	bf00      	nop
      }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	109b      	asrs	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd06      	ble.n	800922c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f017 fda0 	bl	8020d6c <memmove>
      return __result + __count;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
    }
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe0b 	bl	8008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f825 	bl	80092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4293      	cmp	r3, r2
 8009280:	bf8c      	ite	hi
 8009282:	2301      	movhi	r3, #1
 8009284:	2300      	movls	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800928c:	f017 fcfb 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4618      	mov	r0, r3
 800929c:	f017 fc2c 	bl	8020af8 <_Znwj>
 80092a0:	4603      	mov	r3, r0
 80092a2:	bf00      	nop
      }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	05555555 	.word	0x05555555

080092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd96 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <_Z41__static_initialization_and_destruction_0ii>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	4293      	cmp	r3, r2
 8009314:	d105      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009318:	f7fe fc98 	bl	8007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800931e:	f7fe fcbb 	bl	8007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932e:	4293      	cmp	r3, r2
 8009330:	d105      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009334:	f7ff ffd4 	bl	80092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800933a:	f000 f809 	bl	8009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000134 	.word	0x24000134
 800934c:	24000140 	.word	0x24000140

08009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fb21 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8009368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800936a:	461a      	mov	r2, r3
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fb26 	bl	80089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd17 	bl	8007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}

08009386 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 8009386:	b580      	push	{r7, lr}
 8009388:	af00      	add	r7, sp, #0
 800938a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff ffb4 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 8009394:	bd80      	pop	{r7, pc}

08009396 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 8009396:	b580      	push	{r7, lr}
 8009398:	af00      	add	r7, sp, #0
 800939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff ffac 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa60 	bl	8009874 <_ZNSaIP12InputCaptureED1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fa43 	bl	8009854 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffeb 	bl	80093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa73 	bl	80098e6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fa51 	bl	80098bc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffeb 	bl	800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009464:	609a      	str	r2, [r3, #8]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	619a      	str	r2, [r3, #24]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	61da      	str	r2, [r3, #28]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	621a      	str	r2, [r3, #32]
	all_input_captures.push_back(this);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	f107 0314 	add.w	r3, r7, #20
 8009488:	4619      	mov	r1, r3
 800948a:	4809      	ldr	r0, [pc, #36]	; (80094b0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x70>)
 800948c:	f000 fa4b 	bl	8009926 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 8009490:	68fc      	ldr	r4, [r7, #12]
 8009492:	463b      	mov	r3, r7
 8009494:	4619      	mov	r1, r3
 8009496:	4807      	ldr	r0, [pc, #28]	; (80094b4 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x74>)
 8009498:	f000 fa56 	bl	8009948 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800949c:	4603      	mov	r3, r0
 800949e:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2202      	movs	r2, #2
 80094a4:	719a      	strb	r2, [r3, #6]
}
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4618      	mov	r0, r3
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd90      	pop	{r4, r7, pc}
 80094b0:	24000158 	.word	0x24000158
 80094b4:	24000164 	.word	0x24000164

080094b8 <_ZN12InputCapture19absolute_differenceEmm>:

uint32_t InputCapture::absolute_difference(uint32_t a, uint32_t b){
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
	int result = a - b;
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	617b      	str	r3, [r7, #20]
	if(result < 0)
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	da09      	bge.n	80094e6 <_ZN12InputCapture19absolute_differenceEmm+0x2e>
		result = a + (timer->Instance->ARR - b) + 1;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4413      	add	r3, r2
 80094e2:	3301      	adds	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
	return result;
 80094e6:	697b      	ldr	r3, [r7, #20]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <_ZN12InputCapture17channel_is_activeEv>:

bool InputCapture::channel_is_active(){
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	if(channel == TIM_CHANNEL_1)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d108      	bne.n	8009516 <_ZN12InputCapture17channel_is_activeEv+0x22>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	7f1b      	ldrb	r3, [r3, #28]
 800950a:	2b01      	cmp	r3, #1
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	e027      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_2)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d108      	bne.n	8009530 <_ZN12InputCapture17channel_is_activeEv+0x3c>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	7f1b      	ldrb	r3, [r3, #28]
 8009524:	2b02      	cmp	r3, #2
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	e01a      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_3)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	2b08      	cmp	r3, #8
 8009536:	d108      	bne.n	800954a <_ZN12InputCapture17channel_is_activeEv+0x56>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_3;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	7f1b      	ldrb	r3, [r3, #28]
 800953e:	2b04      	cmp	r3, #4
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	e00d      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_4)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	2b0c      	cmp	r3, #12
 8009550:	d108      	bne.n	8009564 <_ZN12InputCapture17channel_is_activeEv+0x70>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	7f1b      	ldrb	r3, [r3, #28]
 8009558:	2b08      	cmp	r3, #8
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	e000      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	return false;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <_ZN12InputCapture9interruptEv>:

void InputCapture::interrupt() {
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
	if(channel_is_active()){
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff ffba 	bl	80094f4 <_ZN12InputCapture17channel_is_activeEv>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 8084 	beq.w	8009690 <_ZN12InputCapture9interruptEv+0x11e>
		GPIO_PinState state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	889b      	ldrh	r3, [r3, #4]
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f011 ff2c 	bl	801b3f4 <HAL_GPIO_ReadPin>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

		// Capture first rising edge
		if(rising_edge == -1 && falling_edge == -1 && state ==  GPIO_PIN_SET){
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a8:	d114      	bne.n	80095d4 <_ZN12InputCapture9interruptEv+0x62>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b2:	d10f      	bne.n	80095d4 <_ZN12InputCapture9interruptEv+0x62>
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d10c      	bne.n	80095d4 <_ZN12InputCapture9interruptEv+0x62>
			rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f016 fb61 	bl	801fc8c <HAL_TIM_ReadCapturedValue>
 80095ca:	4603      	mov	r3, r0
 80095cc:	461a      	mov	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	601a      	str	r2, [r3, #0]
			return;
 80095d2:	e05d      	b.n	8009690 <_ZN12InputCapture9interruptEv+0x11e>
		}

		// Capture falling edge
		if(rising_edge != -1 && falling_edge == -1 && state ==  GPIO_PIN_RESET){
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095dc:	d014      	beq.n	8009608 <_ZN12InputCapture9interruptEv+0x96>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e6:	d10f      	bne.n	8009608 <_ZN12InputCapture9interruptEv+0x96>
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <_ZN12InputCapture9interruptEv+0x96>
			falling_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699a      	ldr	r2, [r3, #24]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f016 fb47 	bl	801fc8c <HAL_TIM_ReadCapturedValue>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
			return;
 8009606:	e043      	b.n	8009690 <_ZN12InputCapture9interruptEv+0x11e>
		}

		// Capture second rising edge
		if(rising_edge != -1 && falling_edge != -1 && state ==  GPIO_PIN_SET){
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009610:	d03e      	beq.n	8009690 <_ZN12InputCapture9interruptEv+0x11e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800961a:	d039      	beq.n	8009690 <_ZN12InputCapture9interruptEv+0x11e>
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d136      	bne.n	8009690 <_ZN12InputCapture9interruptEv+0x11e>
			duty_count 	 = absolute_difference(falling_edge, rising_edge);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7ff ff42 	bl	80094b8 <_ZN12InputCapture19absolute_differenceEmm>
 8009634:	4602      	mov	r2, r0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	611a      	str	r2, [r3, #16]
			uint32_t new_rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f016 fb21 	bl	801fc8c <HAL_TIM_ReadCapturedValue>
 800964a:	6138      	str	r0, [r7, #16]
			freq_count 	 = absolute_difference(new_rising_edge, rising_edge);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	6939      	ldr	r1, [r7, #16]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff ff2f 	bl	80094b8 <_ZN12InputCapture19absolute_differenceEmm>
 800965a:	4602      	mov	r2, r0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	615a      	str	r2, [r3, #20]
			if(freq_count > 9300){
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	f242 4254 	movw	r2, #9300	; 0x2454
 8009668:	4293      	cmp	r3, r2
 800966a:	d901      	bls.n	8009670 <_ZN12InputCapture9interruptEv+0xfe>
				int a = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
			}

			if(duty_count < 4200){
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f241 0267 	movw	r2, #4199	; 0x1067
 8009678:	4293      	cmp	r3, r2
 800967a:	d801      	bhi.n	8009680 <_ZN12InputCapture9interruptEv+0x10e>
				int a = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	60bb      	str	r3, [r7, #8]
			}
			rising_edge		= -1;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009686:	601a      	str	r2, [r3, #0]
			falling_edge	= -1;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800968e:	605a      	str	r2, [r3, #4]
		}
	}

}
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80096ac:	b590      	push	{r4, r7, lr}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ffed 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80096bc:	4603      	mov	r3, r0
 80096be:	681c      	ldr	r4, [r3, #0]
 80096c0:	6838      	ldr	r0, [r7, #0]
 80096c2:	f7ff ffe8 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80096c6:	4603      	mov	r3, r0
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429c      	cmp	r4, r3
 80096cc:	bf0c      	ite	eq
 80096ce:	2301      	moveq	r3, #1
 80096d0:	2300      	movne	r3, #0
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd90      	pop	{r4, r7, pc}

080096dc <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
	return *this;
 80096ee:	687b      	ldr	r3, [r7, #4]
      }
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 800971a:	4b15      	ldr	r3, [pc, #84]	; (8009770 <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 f970 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009724:	4603      	mov	r3, r0
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f97b 	bl	8009a24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800972e:	4603      	mov	r3, r0
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	463a      	mov	r2, r7
 8009734:	1d3b      	adds	r3, r7, #4
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff ffb7 	bl	80096ac <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800973e:	4603      	mov	r3, r0
 8009740:	f083 0301 	eor.w	r3, r3, #1
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00e      	beq.n	8009768 <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 800974a:	1d3b      	adds	r3, r7, #4
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff ffd5 	bl	80096fc <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009752:	4603      	mov	r3, r0
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 8009758:	68b8      	ldr	r0, [r7, #8]
 800975a:	f000 f845 	bl	80097e8 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 800975e:	1d3b      	adds	r3, r7, #4
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff ffbb 	bl	80096dc <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009766:	e7e4      	b.n	8009732 <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	24000158 	.word	0x24000158

08009774 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 800977c:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x70>)
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	6978      	ldr	r0, [r7, #20]
 8009782:	f000 f93f 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009786:	4603      	mov	r3, r0
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	6978      	ldr	r0, [r7, #20]
 800978c:	f000 f94a 	bl	8009a24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009790:	4603      	mov	r3, r0
 8009792:	60bb      	str	r3, [r7, #8]
 8009794:	f107 0208 	add.w	r2, r7, #8
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff ff84 	bl	80096ac <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f083 0301 	eor.w	r3, r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d015      	beq.n	80097dc <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x68>
 80097b0:	f107 030c 	add.w	r3, r7, #12
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff ffa1 	bl	80096fc <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80097ba:	4603      	mov	r3, r0
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d102      	bne.n	80097d0 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5c>
			input_capture->interrupt();
 80097ca:	6938      	ldr	r0, [r7, #16]
 80097cc:	f7ff fed1 	bl	8009572 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80097d0:	f107 030c 	add.w	r3, r7, #12
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff ff81 	bl	80096dc <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80097da:	e7db      	b.n	8009794 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80097dc:	bf00      	nop
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	24000158 	.word	0x24000158

080097e8 <_ZN12InputCapture5startEv>:
	duty_count = 0;
	freq_count = 0;
	duty = 0;
}

void InputCapture::start(){
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, channel);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f015 fd20 	bl	801f240 <HAL_TIM_IC_Start_IT>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <_ZN12InputCapture8get_dutyEv>:

void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}

float InputCapture::get_duty(){
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	duty = (float) (duty_count) / freq_count * 100;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800982c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009850 <_ZN12InputCapture8get_dutyEv+0x48>
 8009830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	return duty;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	ee07 3a90 	vmov	s15, r3
}
 8009842:	eeb0 0a67 	vmov.f32	s0, s15
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	42c80000 	.word	0x42c80000

08009854 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f8f2 	bl	8009a46 <_ZNSaIP12InputCaptureEC1Ev>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f8fa 	bl	8009a5e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80098a2:	461a      	mov	r2, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f8ee 	bl	8009a86 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fd7a 	bl	80093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8f1 	bl	8009aac <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f7 f98b 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f6 fd36 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4618      	mov	r0, r3
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f8fc 	bl	8009b02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800990a:	4603      	mov	r3, r0
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f8d8 	bl	8009ac4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fd6b 	bl	80093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009930:	6838      	ldr	r0, [r7, #0]
 8009932:	f000 f8f2 	bl	8009b1a <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 8009936:	4603      	mov	r3, r0
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f8f8 	bl	8009b30 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b08b      	sub	sp, #44	; 0x2c
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f91d 	bl	8009b94 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 800995a:	4603      	mov	r3, r0
 800995c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f927 	bl	8009bb2 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009964:	4603      	mov	r3, r0
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	f107 020c 	add.w	r2, r7, #12
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f92a 	bl	8009bcc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d114      	bne.n	80099a8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f938 	bl	8009bf4 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681c      	ldr	r4, [r3, #0]
 8009988:	f107 0308 	add.w	r3, r7, #8
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f93e 	bl	8009c0e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009992:	4603      	mov	r3, r0
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	f107 0310 	add.w	r3, r7, #16
 800999a:	4621      	mov	r1, r4
 800999c:	4618      	mov	r0, r3
 800999e:	f7f7 fa9c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e000      	b.n	80099ae <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80099ac:	2300      	movs	r3, #0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01b      	beq.n	80099ea <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80099b2:	687c      	ldr	r4, [r7, #4]
 80099b4:	f107 0208 	add.w	r2, r7, #8
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f933 	bl	8009c2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80099c4:	f107 0318 	add.w	r3, r7, #24
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7f7 fa98 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80099d0:	f107 0218 	add.w	r2, r7, #24
 80099d4:	f107 031c 	add.w	r3, r7, #28
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	4613      	mov	r3, r2
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 f932 	bl	8009c4a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80099e6:	4603      	mov	r3, r0
 80099e8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f90d 	bl	8009c0e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 80099f4:	4603      	mov	r3, r0
 80099f6:	3304      	adds	r3, #4
      }
 80099f8:	4618      	mov	r0, r3
 80099fa:	3724      	adds	r7, #36	; 0x24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd90      	pop	{r4, r7, pc}
 8009a00:	080212a4 	.word	0x080212a4

08009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	f107 030c 	add.w	r3, r7, #12
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 f956 	bl	8009cc6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f945 	bl	8009cc6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f949 	bl	8009ce6 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	609a      	str	r2, [r3, #8]
	{ }
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
	if (__p)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d005      	beq.n	8009aa4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f92c 	bl	8009cfc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8009aa4:	bf00      	nop
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f940 	bl	8009d3a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d012      	beq.n	8009afa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009ad4:	6838      	ldr	r0, [r7, #0]
 8009ad6:	f000 f93b 	bl	8009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009ada:	4603      	mov	r3, r0
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fff0 	bl	8009ac4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009ae4:	6838      	ldr	r0, [r7, #0]
 8009ae6:	f000 f93f 	bl	8009d68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009aea:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f946 	bl	8009d80 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009af8:	e7e9      	b.n	8009ace <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d011      	beq.n	8009b6a <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009b46:	687c      	ldr	r4, [r7, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685d      	ldr	r5, [r3, #4]
 8009b4c:	6838      	ldr	r0, [r7, #0]
 8009b4e:	f000 f928 	bl	8009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b52:	4603      	mov	r3, r0
 8009b54:	461a      	mov	r2, r3
 8009b56:	4629      	mov	r1, r5
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f942 	bl	8009de2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]
 8009b68:	e00c      	b.n	8009b84 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff ff5a 	bl	8009a24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009b70:	4604      	mov	r4, r0
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f000 f915 	bl	8009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f942 	bl	8009e08 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9bb 	bl	8009f00 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009b8a:	4603      	mov	r3, r0
      }
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bdb0      	pop	{r4, r5, r7, pc}

08009b94 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f9c7 	bl	8009f36 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f9d1 	bl	8009f64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	bf0c      	ite	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	2300      	movne	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f9c1 	bl	8009f86 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009c04:	bf00      	nop
 8009c06:	4620      	mov	r0, r4
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}

08009c0e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f9be 	bl	8009f9c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009c20:	4603      	mov	r3, r0
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009c4a:	b5b0      	push	{r4, r5, r7, lr}
 8009c4c:	b088      	sub	sp, #32
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7f7 fb04 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009c5e:	4604      	mov	r4, r0
 8009c60:	6838      	ldr	r0, [r7, #0]
 8009c62:	f7f7 fdee 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009c66:	4605      	mov	r5, r0
 8009c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c6a:	f7f7 fb12 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	462a      	mov	r2, r5
 8009c72:	4621      	mov	r1, r4
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f99f 	bl	8009fb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009c7a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009c7c:	69f8      	ldr	r0, [r7, #28]
 8009c7e:	f000 faed 	bl	800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f107 0010 	add.w	r0, r7, #16
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	68f9      	ldr	r1, [r7, #12]
 8009c8c:	f000 f9b7 	bl	8009ffe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d007      	beq.n	8009ca6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009c96:	6939      	ldr	r1, [r7, #16]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 faf0 	bl	800a282 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	e00b      	b.n	8009cbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009ca6:	69f9      	ldr	r1, [r7, #28]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f869 	bl	8009d80 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	f107 0318 	add.w	r3, r7, #24
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fb22 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009cbc:	69bb      	ldr	r3, [r7, #24]
      }
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bdb0      	pop	{r4, r5, r7, pc}

08009cc6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009d14:	f7f6 fb04 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009d1e:	69b8      	ldr	r0, [r7, #24]
 8009d20:	f016 fee6 	bl	8020af0 <_ZdlPv>
	    return;
 8009d24:	e005      	b.n	8009d32 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	69f8      	ldr	r0, [r7, #28]
 8009d2c:	f000 fd64 	bl	800a7f8 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fac6 	bl	800a31e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fad7 	bl	800a348 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009db8:	b590      	push	{r4, r7, lr}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009dc2:	6838      	ldr	r0, [r7, #0]
 8009dc4:	f7ff ffed 	bl	8009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	681c      	ldr	r4, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	2004      	movs	r0, #4
 8009dd2:	f7f6 faad 	bl	8000330 <_ZnwjPv>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	601c      	str	r4, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd90      	pop	{r4, r7, pc}

08009de2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ffd7 	bl	8009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009df4:	4603      	mov	r3, r0
 8009df6:	4619      	mov	r1, r3
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	f7ff ffdd 	bl	8009db8 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009e08:	b5b0      	push	{r4, r5, r7, lr}
 8009e0a:	b08c      	sub	sp, #48	; 0x30
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009e14:	4a39      	ldr	r2, [pc, #228]	; (8009efc <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009e16:	2101      	movs	r1, #1
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 faa7 	bl	800a36c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7ff fde9 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	f107 0214 	add.w	r2, r7, #20
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fada 	bl	800a3fa <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009e46:	4603      	mov	r3, r0
 8009e48:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fae8 	bl	800a424 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009e54:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009e5a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	18d5      	adds	r5, r2, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff9c 	bl	8009da2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7ff ffb6 	bl	8009de2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009e76:	2300      	movs	r3, #0
 8009e78:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fc09 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009e84:	4603      	mov	r3, r0
 8009e86:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 faf2 	bl	800a474 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009e90:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	4621      	mov	r1, r4
 8009e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e98:	f000 fad8 	bl	800a44c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009e9c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009ea4:	f107 0308 	add.w	r3, r7, #8
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff fbf4 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fadd 	bl	800a474 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009eba:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fac3 	bl	800a44c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009ec6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8009ec8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ed8:	f7ff fdd5 	bl	8009a86 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	441a      	add	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	609a      	str	r2, [r3, #8]
    }
 8009ef4:	bf00      	nop
 8009ef6:	3730      	adds	r7, #48	; 0x30
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bdb0      	pop	{r4, r5, r7, pc}
 8009efc:	0802118c 	.word	0x0802118c

08009f00 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff fd8b 	bl	8009a24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	f107 030c 	add.w	r3, r7, #12
 8009f16:	2101      	movs	r1, #1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fac4 	bl	800a4a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	60bb      	str	r3, [r7, #8]
 8009f22:	f107 0308 	add.w	r3, r7, #8
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fbe8 	bl	80096fc <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009f2c:	4603      	mov	r3, r0
      }
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8009f36:	b590      	push	{r4, r7, lr}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff fdde 	bl	8009b02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009f46:	4604      	mov	r4, r0
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fac5 	bl	800a4d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	4621      	mov	r1, r4
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 facb 	bl	800a4f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd90      	pop	{r4, r7, pc}

08009f64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	1d1a      	adds	r2, r3, #4
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f9c2 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8009f8e:	bf00      	nop
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3310      	adds	r3, #16
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 fad4 	bl	800a556 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009fb8:	b5b0      	push	{r4, r5, r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fad1 	bl	800a56e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8009fcc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f7f7 f949 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7f7 fc33 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009fdc:	4605      	mov	r5, r0
 8009fde:	6838      	ldr	r0, [r7, #0]
 8009fe0:	f7f7 f957 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	462b      	mov	r3, r5
 8009fea:	4622      	mov	r2, r4
 8009fec:	6979      	ldr	r1, [r7, #20]
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 face 	bl	800a590 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8009ff4:	697b      	ldr	r3, [r7, #20]
	}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bdb0      	pop	{r4, r5, r7, pc}

08009ffe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009ffe:	b5b0      	push	{r4, r5, r7, lr}
 800a000:	b08c      	sub	sp, #48	; 0x30
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800a00c:	1d3b      	adds	r3, r7, #4
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 faeb 	bl	800a5ea <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 800a014:	4603      	mov	r3, r0
 800a016:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800a018:	69bc      	ldr	r4, [r7, #24]
 800a01a:	68b8      	ldr	r0, [r7, #8]
 800a01c:	f000 fa5c 	bl	800a4d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a020:	4603      	mov	r3, r0
 800a022:	429c      	cmp	r4, r3
 800a024:	bf0c      	ite	eq
 800a026:	2301      	moveq	r3, #1
 800a028:	2300      	movne	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d032      	beq.n	800a096 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 800a030:	68b8      	ldr	r0, [r7, #8]
 800a032:	f000 faeb 	bl	800a60c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 800a036:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d015      	beq.n	800a068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a03c:	68bc      	ldr	r4, [r7, #8]
 800a03e:	68b8      	ldr	r0, [r7, #8]
 800a040:	f000 faf0 	bl	800a624 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a044:	4603      	mov	r3, r0
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 faf7 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a04e:	4603      	mov	r3, r0
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	4620      	mov	r0, r4
 800a05a:	f7f6 ff3e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 800a068:	2300      	movs	r3, #0
	  if (size() > 0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00c      	beq.n	800a088 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800a06e:	2300      	movs	r3, #0
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f000 fad6 	bl	800a624 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a078:	4602      	mov	r2, r0
 800a07a:	f107 031c 	add.w	r3, r7, #28
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7f7 ff11 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a086:	e0e5      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fae0 	bl	800a654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a094:	e0de      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800a096:	68bc      	ldr	r4, [r7, #8]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681d      	ldr	r5, [r3, #0]
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 facc 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f7f6 ff14 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d059      	beq.n	800a16c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a0bc:	69bc      	ldr	r4, [r7, #24]
 800a0be:	68b8      	ldr	r0, [r7, #8]
 800a0c0:	f000 fb52 	bl	800a768 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2301      	moveq	r3, #1
 800a0ce:	2300      	movne	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a0d6:	68b8      	ldr	r0, [r7, #8]
 800a0d8:	f000 fb46 	bl	800a768 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0dc:	4604      	mov	r4, r0
 800a0de:	68b8      	ldr	r0, [r7, #8]
 800a0e0:	f000 fb42 	bl	800a768 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7f7 ff88 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a0f0:	e0b0      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a0f2:	68bc      	ldr	r4, [r7, #8]
 800a0f4:	f107 0314 	add.w	r3, r7, #20
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fb41 	bl	800a780 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a0fe:	4603      	mov	r3, r0
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fa9a 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a108:	4603      	mov	r3, r0
 800a10a:	6819      	ldr	r1, [r3, #0]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	4620      	mov	r0, r4
 800a114:	f7f6 fee1 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01f      	beq.n	800a15e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fe15 	bl	8009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bf0c      	ite	eq
 800a12c:	2301      	moveq	r3, #1
 800a12e:	2300      	movne	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a136:	2300      	movs	r3, #0
 800a138:	623b      	str	r3, [r7, #32]
 800a13a:	f107 0214 	add.w	r2, r7, #20
 800a13e:	f107 0320 	add.w	r3, r7, #32
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7f7 feaf 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a14a:	e083      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a14c:	f107 0218 	add.w	r2, r7, #24
 800a150:	f107 0318 	add.w	r3, r7, #24
 800a154:	4619      	mov	r1, r3
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7f7 ff52 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a15c:	e07a      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fa75 	bl	800a654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a16a:	e073      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a16c:	68bc      	ldr	r4, [r7, #8]
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fa63 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a176:	4603      	mov	r3, r0
 800a178:	6819      	ldr	r1, [r3, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	4620      	mov	r0, r4
 800a182:	f7f6 feaa 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d059      	beq.n	800a240 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a190:	69bc      	ldr	r4, [r7, #24]
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	f000 fa46 	bl	800a624 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a198:	4603      	mov	r3, r0
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	429c      	cmp	r4, r3
 800a19e:	bf0c      	ite	eq
 800a1a0:	2301      	moveq	r3, #1
 800a1a2:	2300      	movne	r3, #0
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00c      	beq.n	800a1c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ae:	68b8      	ldr	r0, [r7, #8]
 800a1b0:	f000 fa38 	bl	800a624 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f7f7 fe73 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a1c2:	e047      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a1c4:	68bc      	ldr	r4, [r7, #8]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681d      	ldr	r5, [r3, #0]
 800a1ca:	f107 0310 	add.w	r3, r7, #16
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fae7 	bl	800a7a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fa2f 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7f6 fe77 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01f      	beq.n	800a232 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff fdab 	bl	8009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bf0c      	ite	eq
 800a200:	2301      	moveq	r3, #1
 800a202:	2300      	movne	r3, #0
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a20a:	2300      	movs	r3, #0
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a20e:	f107 0218 	add.w	r2, r7, #24
 800a212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7f7 fe45 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a21e:	e019      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a220:	f107 0210 	add.w	r2, r7, #16
 800a224:	f107 0310 	add.w	r3, r7, #16
 800a228:	4619      	mov	r1, r3
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7f7 fee8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a230:	e010      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	68b9      	ldr	r1, [r7, #8]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fa0b 	bl	800a654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a23e:	e009      	b.n	800a254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a240:	2300      	movs	r3, #0
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a244:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a248:	f107 0318 	add.w	r3, r7, #24
 800a24c:	4619      	mov	r1, r3
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f7f7 ff11 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	3730      	adds	r7, #48	; 0x30
 800a258:	46bd      	mov	sp, r7
 800a25a:	bdb0      	pop	{r4, r5, r7, pc}

0800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 faad 	bl	800a7c4 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a26a:	4602      	mov	r2, r0
 800a26c:	f107 030c 	add.w	r3, r7, #12
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fab4 	bl	800a7e0 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a278:	4603      	mov	r3, r0
      }
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a282:	b5b0      	push	{r4, r5, r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d119      	bne.n	800a2ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 f91e 	bl	800a4d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a29c:	4602      	mov	r2, r0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d012      	beq.n	800a2ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a2a4:	68fc      	ldr	r4, [r7, #12]
 800a2a6:	6838      	ldr	r0, [r7, #0]
 800a2a8:	f7ff ffd8 	bl	800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f9c3 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a2b6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7f6 fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a2ce:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a2d0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a2d6:	7df8      	ldrb	r0, [r7, #23]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	f016 fc78 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a2ea:	f107 0310 	add.w	r3, r7, #16
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f805 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a2f6:	693b      	ldr	r3, [r7, #16]
    }
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a31e:	b590      	push	{r4, r7, lr}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa74 	bl	800a816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a32e:	4604      	mov	r4, r0
 800a330:	6838      	ldr	r0, [r7, #0]
 800a332:	f7ff fe33 	bl	8009f9c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a336:	4603      	mov	r3, r0
 800a338:	4619      	mov	r1, r3
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fa76 	bl	800a82c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fa5f 	bl	800a816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a358:	4603      	mov	r3, r0
 800a35a:	2201      	movs	r2, #1
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fa70 	bl	800a844 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fa82 	bl	800a882 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a37e:	4604      	mov	r4, r0
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fa8f 	bl	800a8a4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a386:	4603      	mov	r3, r0
 800a388:	1ae2      	subs	r2, r4, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	bf34      	ite	cc
 800a390:	2301      	movcc	r3, #1
 800a392:	2300      	movcs	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f016 fc76 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 fa7f 	bl	800a8a4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fa7b 	bl	800a8a4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	613b      	str	r3, [r7, #16]
 800a3b2:	f107 0208 	add.w	r2, r7, #8
 800a3b6:	f107 0310 	add.w	r3, r7, #16
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f8 fa48 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4423      	add	r3, r4
 800a3c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 fa6a 	bl	800a8a4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d306      	bcc.n	800a3e6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fa52 	bl	800a882 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d904      	bls.n	800a3f0 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 fa4b 	bl	800a882 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	e000      	b.n	800a3f2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a3f0:	697b      	ldr	r3, [r7, #20]
      }
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd90      	pop	{r4, r7, pc}

0800a3fa <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a3fa:	b590      	push	{r4, r7, lr}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff f946 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a40a:	4603      	mov	r3, r0
 800a40c:	681c      	ldr	r4, [r3, #0]
 800a40e:	6838      	ldr	r0, [r7, #0]
 800a410:	f7ff f941 	bl	8009696 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a414:	4603      	mov	r3, r0
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	1ae3      	subs	r3, r4, r3
 800a41a:	109b      	asrs	r3, r3, #2
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}

0800a424 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fa43 	bl	800a8c4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a43e:	4603      	mov	r3, r0
 800a440:	e000      	b.n	800a444 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a442:	2300      	movs	r3, #0
      }
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a44c:	b590      	push	{r4, r7, lr}
 800a44e:	b087      	sub	sp, #28
 800a450:	af02      	add	r7, sp, #8
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a45a:	f88d 4000 	strb.w	r4, [sp]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fa4d 	bl	800a904 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a46a:	4603      	mov	r3, r0
      }
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	bd90      	pop	{r4, r7, pc}

0800a474 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 fa4f 	bl	800a93c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	425b      	negs	r3, r3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	f107 020c 	add.w	r2, r7, #12
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fbfc 	bl	8009cc6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01d      	beq.n	800a540 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a504:	68fc      	ldr	r4, [r7, #12]
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	f7ff fea8 	bl	800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a50c:	4603      	mov	r3, r0
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	4620      	mov	r0, r4
 800a518:	f7f6 fcdf 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f083 0301 	eor.w	r3, r3, #1
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d006      	beq.n	800a536 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	607b      	str	r3, [r7, #4]
 800a52c:	68b8      	ldr	r0, [r7, #8]
 800a52e:	f7ff fc1b 	bl	8009d68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a532:	60b8      	str	r0, [r7, #8]
 800a534:	e7e3      	b.n	800a4fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f7ff fc0a 	bl	8009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a53c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a53e:	e7de      	b.n	800a4fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a540:	f107 0314 	add.w	r3, r7, #20
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff feda 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a54c:	697b      	ldr	r3, [r7, #20]
    }
 800a54e:	4618      	mov	r0, r3
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	bd90      	pop	{r4, r7, pc}

0800a556 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa02 	bl	800a968 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a564:	4603      	mov	r3, r0
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f94d 	bl	800a816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2101      	movs	r1, #1
 800a580:	4618      	mov	r0, r3
 800a582:	f000 f9fc 	bl	800a97e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a586:	4603      	mov	r3, r0
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	b086      	sub	sp, #24
 800a596:	af02      	add	r7, sp, #8
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
 800a59e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	2018      	movs	r0, #24
 800a5a6:	f7f5 fec3 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 f933 	bl	800a816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	68b8      	ldr	r0, [r7, #8]
 800a5b4:	f7ff fcf2 	bl	8009f9c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7f6 fe53 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	6838      	ldr	r0, [r7, #0]
 800a5c4:	f7f7 f93d 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5cc:	f7f6 fe61 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4643      	mov	r3, r8
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fa1c 	bl	800aa18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a5ea <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	f107 030c 	add.w	r3, r7, #12
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fe7f 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3310      	adds	r3, #16
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fe09 	bl	800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a64a:	4603      	mov	r3, r0
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a654:	b5b0      	push	{r4, r5, r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a660:	68b8      	ldr	r0, [r7, #8]
 800a662:	f7ff fa4e 	bl	8009b02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a666:	4603      	mov	r3, r0
 800a668:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	f7ff ff34 	bl	800a4d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a670:	4603      	mov	r3, r0
 800a672:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d023      	beq.n	800a6c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a684:	68bc      	ldr	r4, [r7, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fde5 	bl	800a25c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a692:	4603      	mov	r3, r0
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	4629      	mov	r1, r5
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7f6 fc1d 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d005      	beq.n	800a6ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff fb59 	bl	8009d68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	e004      	b.n	800a6c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fb47 	bl	8009d50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a6c6:	e7d8      	b.n	800a67a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	f107 0310 	add.w	r3, r7, #16
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff fe15 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01d      	beq.n	800a71a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a6de:	68b8      	ldr	r0, [r7, #8]
 800a6e0:	f000 f9b6 	bl	800aa50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	f107 021c 	add.w	r2, r7, #28
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fa6a 	bl	8009bcc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d008      	beq.n	800a710 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a6fe:	f107 0214 	add.w	r2, r7, #20
 800a702:	f107 0318 	add.w	r3, r7, #24
 800a706:	4619      	mov	r1, r3
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f9b2 	bl	800aa72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a70e:	e027      	b.n	800a760 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a710:	f107 0310 	add.w	r3, r7, #16
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f833 	bl	800a780 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a71a:	68bc      	ldr	r4, [r7, #8]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff ff8c 	bl	800a63c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a724:	4603      	mov	r3, r0
 800a726:	6819      	ldr	r1, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	4620      	mov	r0, r4
 800a730:	f7f6 fbd3 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d008      	beq.n	800a74c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a73a:	f107 0214 	add.w	r2, r7, #20
 800a73e:	f107 0318 	add.w	r3, r7, #24
 800a742:	4619      	mov	r1, r3
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 f994 	bl	800aa72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a74a:	e009      	b.n	800a760 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a74c:	2300      	movs	r3, #0
 800a74e:	623b      	str	r3, [r7, #32]
 800a750:	f107 0220 	add.w	r2, r7, #32
 800a754:	f107 0310 	add.w	r3, r7, #16
 800a758:	4619      	mov	r1, r3
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7f7 fc8b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	3728      	adds	r7, #40	; 0x28
 800a764:	46bd      	mov	sp, r7
 800a766:	bdb0      	pop	{r4, r5, r7, pc}

0800a768 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	330c      	adds	r3, #12
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f016 fa1d 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a792:	4602      	mov	r2, r0
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
	return *this;
 800a798:	687b      	ldr	r3, [r7, #4]
      }
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f016 fa0a 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
	return *this;
 800a7ba:	687b      	ldr	r3, [r7, #4]
      }
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3310      	adds	r3, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 f967 	bl	800aaa4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4619      	mov	r1, r3
 800a80a:	68b8      	ldr	r0, [r7, #8]
 800a80c:	f016 f972 	bl	8020af4 <_ZdlPvj>
      }
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a836:	6838      	ldr	r0, [r7, #0]
 800a838:	f000 f940 	bl	800aabc <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	61fb      	str	r3, [r7, #28]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a85c:	f7f5 fd60 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a866:	69b8      	ldr	r0, [r7, #24]
 800a868:	f016 f942 	bl	8020af0 <_ZdlPv>
	    return;
 800a86c:	e005      	b.n	800a87a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	69f8      	ldr	r0, [r7, #28]
 800a874:	f000 f9e1 	bl	800ac3a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 f945 	bl	800ab1c <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a892:	4603      	mov	r3, r0
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f927 	bl	800aae8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800a89a:	4603      	mov	r3, r0
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	109b      	asrs	r3, r3, #2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a8d6:	f7f5 fd23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d006      	beq.n	800a8ee <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f016 f907 	bl	8020af8 <_Znwj>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	e006      	b.n	800a8fc <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f9b3 	bl	800ac5e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	bf00      	nop
      { return __a.allocate(__n); }
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f90a 	bl	800ab32 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800a91e:	4603      	mov	r3, r0
      }
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
    }
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a946:	f7f5 fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f90a 	bl	800ab6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800a958:	e003      	b.n	800a962 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f91d 	bl	800ab9c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a990:	f7f5 fcc6 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	4613      	mov	r3, r2
 800a99e:	005b      	lsls	r3, r3, #1
 800a9a0:	4413      	add	r3, r2
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f016 f8a7 	bl	8020af8 <_Znwj>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	e006      	b.n	800a9bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 f9b1 	bl	800ad1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	bf00      	nop
      { return __a.allocate(__n); }
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a9c4:	b5b0      	push	{r4, r5, r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a9d2:	68b8      	ldr	r0, [r7, #8]
 800a9d4:	f7f6 fc47 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7f6 ff32 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f107 0318 	add.w	r3, r7, #24
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f7 ffc7 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800a9ec:	f107 0418 	add.w	r4, r7, #24
 800a9f0:	6838      	ldr	r0, [r7, #0]
 800a9f2:	f7f6 fc4e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	2008      	movs	r0, #8
 800a9fc:	f7f5 fc98 	bl	8000330 <_ZnwjPv>
 800aa00:	4605      	mov	r5, r0
 800aa02:	7f3b      	ldrb	r3, [r7, #28]
 800aa04:	4622      	mov	r2, r4
 800aa06:	7d39      	ldrb	r1, [r7, #20]
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f000 f8ec 	bl	800abe6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800aa0e:	462b      	mov	r3, r5
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bdb0      	pop	{r4, r5, r7, pc}

0800aa18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800aa18:	b5b0      	push	{r4, r5, r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7f6 fc1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	6838      	ldr	r0, [r7, #0]
 800aa30:	f7f6 ff07 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aa34:	4605      	mov	r5, r0
 800aa36:	6a38      	ldr	r0, [r7, #32]
 800aa38:	f7f6 fc2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4621      	mov	r1, r4
 800aa42:	68b8      	ldr	r0, [r7, #8]
 800aa44:	f7ff ffbe 	bl	800a9c4 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	f107 030c 	add.w	r3, r7, #12
 800aa60:	4611      	mov	r1, r2
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff fc4c 	bl	800a300 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800aa7e:	68b8      	ldr	r0, [r7, #8]
 800aa80:	f000 f8c5 	bl	800ac0e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800aa84:	4603      	mov	r3, r0
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7f7 fe8e 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa92:	4603      	mov	r3, r0
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f8b9 	bl	800ac24 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800aab2:	4603      	mov	r3, r0
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
    }
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800aad8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800aaf0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aaf4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff ffea 	bl	800aad0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800aafc:	4603      	mov	r3, r0
 800aafe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ab00:	f107 0208 	add.w	r2, r7, #8
 800ab04:	f107 030c 	add.w	r3, r7, #12
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7f8 f96b 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800ab10:	4603      	mov	r3, r0
 800ab12:	681b      	ldr	r3, [r3, #0]
      }
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ab32:	b5b0      	push	{r4, r5, r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	607a      	str	r2, [r7, #4]
 800ab3e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 f8ab 	bl	800ac9c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab46:	4604      	mov	r4, r0
 800ab48:	68b8      	ldr	r0, [r7, #8]
 800ab4a:	f000 f8a7 	bl	800ac9c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f8a3 	bl	800ac9c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab56:	4602      	mov	r2, r0
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 f8a8 	bl	800acb2 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ab62:	4603      	mov	r3, r0
    }
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d00a      	beq.n	800ab94 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f8b5 	bl	800acee <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800ab84:	4603      	mov	r3, r0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f8bc 	bl	800ad04 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	607b      	str	r3, [r7, #4]
 800ab92:	e7f0      	b.n	800ab76 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
 800abbe:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	f7f8 f9bc 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800abc6:	4603      	mov	r3, r0
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f8 f9ad 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800abce:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	605a      	str	r2, [r3, #4]
      { }
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800abe6:	b5b0      	push	{r4, r5, r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af02      	add	r7, sp, #8
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	7239      	strb	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800abf4:	463a      	mov	r2, r7
 800abf6:	f88d 4000 	strb.w	r4, [sp]
 800abfa:	462b      	mov	r3, r5
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f7ff ffd7 	bl	800abb2 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac0e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	4413      	add	r3, r2
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	4619      	mov	r1, r3
 800ac52:	68b8      	ldr	r0, [r7, #8]
 800ac54:	f015 ff4e 	bl	8020af4 <_ZdlPvj>
      }
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f877 	bl	800ad5e <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800ac70:	4602      	mov	r2, r0
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4293      	cmp	r3, r2
 800ac76:	bf8c      	ite	hi
 800ac78:	2301      	movhi	r3, #1
 800ac7a:	2300      	movls	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac82:	f016 f800 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f015 ff34 	bl	8020af8 <_Znwj>
 800ac90:	4603      	mov	r3, r0
 800ac92:	bf00      	nop
      }
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	60b9      	str	r1, [r7, #8]
 800acbc:	607a      	str	r2, [r7, #4]
 800acbe:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	109b      	asrs	r3, r3, #2
 800acc8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd06      	ble.n	800acde <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	461a      	mov	r2, r3
 800acd6:	68f9      	ldr	r1, [r7, #12]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f016 f847 	bl	8020d6c <memmove>
      return __result + __count;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4413      	add	r3, r2
    }
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff fe0b 	bl	800a928 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 f826 	bl	800ad78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bf8c      	ite	hi
 800ad34:	2301      	movhi	r3, #1
 800ad36:	2300      	movls	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ad3e:	f015 ffa2 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	4613      	mov	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	4413      	add	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f015 fed3 	bl	8020af8 <_Znwj>
 800ad52:	4603      	mov	r3, r0
 800ad54:	bf00      	nop
      }
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad5e:	b480      	push	{r7}
 800ad60:	b083      	sub	sp, #12
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ad66:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
	...

0800ad78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ad80:	4b03      	ldr	r3, [pc, #12]	; (800ad90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	05555555 	.word	0x05555555

0800ad94 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fdac 	bl	80098fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <_Z41__static_initialization_and_destruction_0ii>:
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10a      	bne.n	800add6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d105      	bne.n	800add6 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800adca:	480c      	ldr	r0, [pc, #48]	; (800adfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800adcc:	f7fe fb04 	bl	80093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800add0:	480b      	ldr	r0, [pc, #44]	; (800ae00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800add2:	f7fe fb27 	bl	8009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d105      	bne.n	800adf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ade6:	4806      	ldr	r0, [pc, #24]	; (800ae00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ade8:	f7ff ffd4 	bl	800ad94 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800adec:	4803      	ldr	r0, [pc, #12]	; (800adfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800adee:	f000 f809 	bl	800ae04 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	24000158 	.word	0x24000158
 800ae00:	24000164 	.word	0x24000164

0800ae04 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ae04:	b5b0      	push	{r4, r5, r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681c      	ldr	r4, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fb2c 	bl	800a474 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae1c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae1e:	461a      	mov	r2, r3
 800ae20:	4629      	mov	r1, r5
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fb31 	bl	800a48a <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fd2d 	bl	800988a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bdb0      	pop	{r4, r5, r7, pc}

0800ae3a <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae42:	2001      	movs	r0, #1
 800ae44:	f7ff ffb4 	bl	800adb0 <_Z41__static_initialization_and_destruction_0ii>
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae52:	2000      	movs	r0, #0
 800ae54:	f7ff ffac 	bl	800adb0 <_Z41__static_initialization_and_destruction_0ii>
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f83c 	bl	800aee0 <_ZNSaIP6StreamED1Ev>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f81f 	bl	800aec0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff ffeb 	bl	800ae72 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f88c 	bl	800afce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f8ce 	bl	800b06a <_ZNSaIP6StreamEC1Ev>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f8d6 	bl	800b082 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4618      	mov	r0, r3
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800af0e:	461a      	mov	r2, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f8ca 	bl	800b0aa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff ff9e 	bl	800ae5a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f8cd 	bl	800b0d0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800af56:	b5b0      	push	{r4, r5, r7, lr}
 800af58:	b086      	sub	sp, #24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	1d38      	adds	r0, r7, #4
 800af60:	e880 0006 	stmia.w	r0, {r1, r2}
 800af64:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800af66:	68fc      	ldr	r4, [r7, #12]
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 f8b9 	bl	800b0e6 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800af74:	f107 0314 	add.w	r3, r7, #20
 800af78:	461a      	mov	r2, r3
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 f8c0 	bl	800b102 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800af82:	f107 0314 	add.w	r3, r7, #20
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff ffda 	bl	800af40 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800af8c:	68fc      	ldr	r4, [r7, #12]
 800af8e:	1d3b      	adds	r3, r7, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f000 f8d4 	bl	800b13e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800af96:	4605      	mov	r5, r0
 800af98:	1d3b      	adds	r3, r7, #4
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f8db 	bl	800b156 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	4629      	mov	r1, r5
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f8e7 	bl	800b17a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bdb0      	pop	{r4, r5, r7, pc}

0800afb6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f907 	bl	800b1d2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f925 	bl	800b226 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800afdc:	4603      	mov	r3, r0
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f901 	bl	800b1e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff ffe4 	bl	800afb6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	bf0c      	ite	eq
 800b00e:	2301      	moveq	r3, #1
 800b010:	2300      	movne	r3, #0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	4618      	mov	r0, r3
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	bf34      	ite	cc
 800b038:	2301      	movcc	r3, #1
 800b03a:	2300      	movcs	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800b04a:	b480      	push	{r7}
 800b04c:	b083      	sub	sp, #12
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa58 	bl	800b528 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	605a      	str	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	609a      	str	r2, [r3, #8]
	{ }
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	607a      	str	r2, [r7, #4]
	if (__p)
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	68b9      	ldr	r1, [r7, #8]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fa3b 	bl	800b53e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa42 	bl	800b57c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b102:	b590      	push	{r4, r7, lr}
 800b104:	b087      	sub	sp, #28
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b10e:	68fc      	ldr	r4, [r7, #12]
 800b110:	f107 0314 	add.w	r3, r7, #20
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fa3c 	bl	800b594 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	4620      	mov	r0, r4
 800b126:	f000 fa42 	bl	800b5ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b12a:	f107 0314 	add.w	r3, r7, #20
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 f84f 	bl	800b1d2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd90      	pop	{r4, r7, pc}

0800b13e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b156:	b590      	push	{r4, r7, lr}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ffed 	bl	800b13e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b164:	4604      	mov	r4, r0
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa3e 	bl	800b5e8 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b16c:	4603      	mov	r3, r0
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4423      	add	r3, r4
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	bd90      	pop	{r4, r7, pc}

0800b17a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b088      	sub	sp, #32
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b186:	f107 0314 	add.w	r3, r7, #20
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fa37 	bl	800b600 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d017      	beq.n	800b1ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 f84f 	bl	800b23e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	f107 021c 	add.w	r2, r7, #28
 800b1a8:	f107 0318 	add.w	r3, r7, #24
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff ff4b 	bl	800b04a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	69b9      	ldr	r1, [r7, #24]
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fa2e 	bl	800b61e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	e7e3      	b.n	800b192 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b1ca:	bf00      	nop
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d012      	beq.n	800b21e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b1f8:	6838      	ldr	r0, [r7, #0]
 800b1fa:	f000 fa43 	bl	800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b1fe:	4603      	mov	r3, r0
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff fff0 	bl	800b1e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b208:	6838      	ldr	r0, [r7, #0]
 800b20a:	f000 fa47 	bl	800b69c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b20e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f968 	bl	800b4e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b21c:	e7e9      	b.n	800b1f2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	1d1a      	adds	r2, r3, #4
 800b24a:	f107 030c 	add.w	r3, r7, #12
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f000 f95a 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3310      	adds	r3, #16
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 fa2d 	bl	800b6cc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b272:	4603      	mov	r3, r0
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b27c:	b590      	push	{r4, r7, lr}
 800b27e:	b08d      	sub	sp, #52	; 0x34
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b28a:	1d3b      	adds	r3, r7, #4
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fa3a 	bl	800b706 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b292:	4603      	mov	r3, r0
 800b294:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b296:	69bc      	ldr	r4, [r7, #24]
 800b298:	68b8      	ldr	r0, [r7, #8]
 800b29a:	f000 fa0b 	bl	800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	bf0c      	ite	eq
 800b2a4:	2301      	moveq	r3, #1
 800b2a6:	2300      	movne	r3, #0
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d030      	beq.n	800b310 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b2ae:	68b8      	ldr	r0, [r7, #8]
 800b2b0:	f000 fa3a 	bl	800b728 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b2b4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d013      	beq.n	800b2e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b2ba:	68bc      	ldr	r4, [r7, #8]
 800b2bc:	68b8      	ldr	r0, [r7, #8]
 800b2be:	f000 fa3f 	bl	800b740 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fa46 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff fea4 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b2e2:	2300      	movs	r3, #0
	  if (size() > 0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00c      	beq.n	800b302 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	68b8      	ldr	r0, [r7, #8]
 800b2ee:	f000 fa27 	bl	800b740 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	f107 031c 	add.w	r3, r7, #28
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7f6 fdd4 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b300:	e0db      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 fa31 	bl	800b770 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b30e:	e0d4      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b310:	68bc      	ldr	r4, [r7, #8]
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fa1f 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b31a:	4603      	mov	r3, r0
 800b31c:	461a      	mov	r2, r3
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	4620      	mov	r0, r4
 800b322:	f7ff fe7d 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d057      	beq.n	800b3dc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b330:	69bc      	ldr	r4, [r7, #24]
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f000 faa1 	bl	800b87a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b338:	4603      	mov	r3, r0
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429c      	cmp	r4, r3
 800b33e:	bf0c      	ite	eq
 800b340:	2301      	moveq	r3, #1
 800b342:	2300      	movne	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00d      	beq.n	800b366 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b34a:	68b8      	ldr	r0, [r7, #8]
 800b34c:	f000 fa95 	bl	800b87a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b350:	4604      	mov	r4, r0
 800b352:	68b8      	ldr	r0, [r7, #8]
 800b354:	f000 fa91 	bl	800b87a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	4621      	mov	r1, r4
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7f6 fe4e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b364:	e0a9      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b366:	68bc      	ldr	r4, [r7, #8]
 800b368:	f107 0314 	add.w	r3, r7, #20
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fa90 	bl	800b892 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b372:	4603      	mov	r3, r0
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f9ee 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b37c:	4603      	mov	r3, r0
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4619      	mov	r1, r3
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fe4c 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d01f      	beq.n	800b3ce <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f977 	bl	800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bf0c      	ite	eq
 800b39c:	2301      	moveq	r3, #1
 800b39e:	2300      	movne	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	623b      	str	r3, [r7, #32]
 800b3aa:	f107 0214 	add.w	r2, r7, #20
 800b3ae:	f107 0320 	add.w	r3, r7, #32
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7f6 fd77 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b3ba:	e07e      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b3bc:	f107 0218 	add.w	r2, r7, #24
 800b3c0:	f107 0318 	add.w	r3, r7, #24
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7f6 fe1a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b3cc:	e075      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f9cb 	bl	800b770 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b3da:	e06e      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b3dc:	68bc      	ldr	r4, [r7, #8]
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 f9b9 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7ff fe17 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d056      	beq.n	800b4a6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b3fc:	69bc      	ldr	r4, [r7, #24]
 800b3fe:	68b8      	ldr	r0, [r7, #8]
 800b400:	f000 f99e 	bl	800b740 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b404:	4603      	mov	r3, r0
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	429c      	cmp	r4, r3
 800b40a:	bf0c      	ite	eq
 800b40c:	2301      	moveq	r3, #1
 800b40e:	2300      	movne	r3, #0
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00c      	beq.n	800b430 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b416:	2300      	movs	r3, #0
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
 800b41a:	68b8      	ldr	r0, [r7, #8]
 800b41c:	f000 f990 	bl	800b740 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b420:	4602      	mov	r2, r0
 800b422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b426:	4619      	mov	r1, r3
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7f6 fd3d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b42e:	e044      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b430:	68bc      	ldr	r4, [r7, #8]
 800b432:	f107 0310 	add.w	r3, r7, #16
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fa3c 	bl	800b8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b43c:	4603      	mov	r3, r0
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	f000 f989 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff fde7 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01f      	beq.n	800b498 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f912 	bl	800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	bf0c      	ite	eq
 800b466:	2301      	moveq	r3, #1
 800b468:	2300      	movne	r3, #0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00a      	beq.n	800b486 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b470:	2300      	movs	r3, #0
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28
 800b474:	f107 0218 	add.w	r2, r7, #24
 800b478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7f6 fd12 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b484:	e019      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b486:	f107 0210 	add.w	r2, r7, #16
 800b48a:	f107 0310 	add.w	r3, r7, #16
 800b48e:	4619      	mov	r1, r3
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7f6 fdb5 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b496:	e010      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f966 	bl	800b770 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b4a4:	e009      	b.n	800b4ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b4ae:	f107 0318 	add.w	r3, r7, #24
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7f6 fdde 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	3734      	adds	r7, #52	; 0x34
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd90      	pop	{r4, r7, pc}

0800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fa03 	bl	800b8d6 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fa0a 	bl	800b8f2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b4de:	4603      	mov	r3, r0
      }
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fa08 	bl	800b90a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa19 	bl	800b934 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b53e:	b580      	push	{r7, lr}
 800b540:	b088      	sub	sp, #32
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	607a      	str	r2, [r7, #4]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	61fb      	str	r3, [r7, #28]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b556:	f7f4 fee3 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b560:	69b8      	ldr	r0, [r7, #24]
 800b562:	f015 fac5 	bl	8020af0 <_ZdlPv>
	    return;
 800b566:	e005      	b.n	800b574 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	69b9      	ldr	r1, [r7, #24]
 800b56c:	69f8      	ldr	r0, [r7, #28]
 800b56e:	f000 fb4a 	bl	800bc06 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	3720      	adds	r7, #32
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f9f3 	bl	800b98a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f9f0 	bl	800b9a0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 f9f6 	bl	800b9b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68b9      	ldr	r1, [r7, #8]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 f9ff 	bl	800b9d2 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7f4 feb5 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b61e:	b5b0      	push	{r4, r5, r7, lr}
 800b620:	b08a      	sub	sp, #40	; 0x28
 800b622:	af02      	add	r7, sp, #8
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b62c:	f107 0318 	add.w	r3, r7, #24
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 f95d 	bl	800b8f2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b638:	4603      	mov	r3, r0
 800b63a:	f107 0010 	add.w	r0, r7, #16
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	68f9      	ldr	r1, [r7, #12]
 800b642:	f7ff fe1b 	bl	800b27c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00f      	beq.n	800b66c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b64c:	693c      	ldr	r4, [r7, #16]
 800b64e:	697d      	ldr	r5, [r7, #20]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f9ca 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b656:	4602      	mov	r2, r0
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	462a      	mov	r2, r5
 800b660:	4621      	mov	r1, r4
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 f9cc 	bl	800ba00 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b668:	4603      	mov	r3, r0
			  __node_gen);
 800b66a:	e007      	b.n	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	f107 031c 	add.w	r3, r7, #28
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff ff48 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b67a:	69fb      	ldr	r3, [r7, #28]
    }
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bdb0      	pop	{r4, r5, r7, pc}

0800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9dc 	bl	800ba92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f9db 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f9e1 	bl	800babe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	f107 030c 	add.w	r3, r7, #12
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fef6 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3310      	adds	r3, #16
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff feae 	bl	800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b766:	4603      	mov	r3, r0
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b770:	b590      	push	{r4, r7, lr}
 800b772:	b08b      	sub	sp, #44	; 0x2c
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b77c:	68b8      	ldr	r0, [r7, #8]
 800b77e:	f7ff fd52 	bl	800b226 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b782:	4603      	mov	r3, r0
 800b784:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f7ff ff94 	bl	800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b78c:	4603      	mov	r3, r0
 800b78e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d020      	beq.n	800b7de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b7a0:	68bc      	ldr	r4, [r7, #8]
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fe8c 	bl	800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7ff fc35 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff ff68 	bl	800b69c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	e004      	b.n	800b7da <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff ff56 	bl	800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b7dc:	e7db      	b.n	800b796 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	f107 0310 	add.w	r3, r7, #16
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fe8f 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d01d      	beq.n	800b830 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	f000 f985 	bl	800bb04 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	f107 021c 	add.w	r2, r7, #28
 800b802:	f107 0310 	add.w	r3, r7, #16
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff fbf5 	bl	800aff8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d008      	beq.n	800b826 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800b814:	f107 0214 	add.w	r2, r7, #20
 800b818:	f107 0318 	add.w	r3, r7, #24
 800b81c:	4619      	mov	r1, r3
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 f981 	bl	800bb26 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b824:	e025      	b.n	800b872 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800b826:	f107 0310 	add.w	r3, r7, #16
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f831 	bl	800b892 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b830:	68bc      	ldr	r4, [r7, #8]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff ff8f 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b83a:	4603      	mov	r3, r0
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	4619      	mov	r1, r3
 800b840:	4620      	mov	r0, r4
 800b842:	f7ff fbed 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d008      	beq.n	800b85e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800b84c:	f107 0214 	add.w	r2, r7, #20
 800b850:	f107 0318 	add.w	r3, r7, #24
 800b854:	4619      	mov	r1, r3
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 f965 	bl	800bb26 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b85c:	e009      	b.n	800b872 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800b85e:	2300      	movs	r3, #0
 800b860:	623b      	str	r3, [r7, #32]
 800b862:	f107 0220 	add.w	r2, r7, #32
 800b866:	f107 0310 	add.w	r3, r7, #16
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7f6 fc02 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	372c      	adds	r7, #44	; 0x2c
 800b876:	46bd      	mov	sp, r7
 800b878:	bd90      	pop	{r4, r7, pc}

0800b87a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800b87a:	b480      	push	{r7}
 800b87c:	b083      	sub	sp, #12
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	330c      	adds	r3, #12
 800b886:	4618      	mov	r0, r3
 800b888:	370c      	adds	r7, #12
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f015 f994 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	601a      	str	r2, [r3, #0]
	return *this;
 800b8aa:	687b      	ldr	r3, [r7, #4]
      }
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f015 f981 	bl	8020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	601a      	str	r2, [r3, #0]
	return *this;
 800b8cc:	687b      	ldr	r3, [r7, #4]
      }
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3310      	adds	r3, #16
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f938 	bl	800bb58 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b90a:	b590      	push	{r4, r7, lr}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f8c7 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b91a:	4604      	mov	r4, r0
 800b91c:	6838      	ldr	r0, [r7, #0]
 800b91e:	f7ff fc9f 	bl	800b260 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b922:	4603      	mov	r3, r0
 800b924:	4619      	mov	r1, r3
 800b926:	4620      	mov	r0, r4
 800b928:	f000 f922 	bl	800bb70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	bd90      	pop	{r4, r7, pc}

0800b934 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f8b2 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b944:	4603      	mov	r3, r0
 800b946:	2201      	movs	r2, #1
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f91c 	bl	800bb88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b97a:	68b9      	ldr	r1, [r7, #8]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 f92c 	bl	800bbda <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f92e 	bl	800bc24 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
      { }
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ba00:	b5b0      	push	{r4, r5, r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d11a      	bne.n	800ba4a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f7ff fe4d 	bl	800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d013      	beq.n	800ba4a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800ba22:	68fc      	ldr	r4, [r7, #12]
 800ba24:	f107 0310 	add.w	r3, r7, #16
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff ff61 	bl	800b8f2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800ba30:	4605      	mov	r5, r0
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff fe90 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f7ff faee 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e000      	b.n	800ba50 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800ba4e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800ba50:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800ba52:	6838      	ldr	r0, [r7, #0]
 800ba54:	f7ff ffc9 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba5e:	f000 f8ed 	bl	800bc3c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800ba62:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800ba68:	7ff8      	ldrb	r0, [r7, #31]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	69b9      	ldr	r1, [r7, #24]
 800ba6e:	f015 f8af 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800ba7c:	f107 0314 	add.w	r3, r7, #20
 800ba80:	69b9      	ldr	r1, [r7, #24]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fd41 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800ba88:	697b      	ldr	r3, [r7, #20]
      }
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3720      	adds	r7, #32
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bdb0      	pop	{r4, r5, r7, pc}

0800ba92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800bad0:	f7f4 fc26 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	4613      	mov	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	4618      	mov	r0, r3
 800bae6:	f015 f807 	bl	8020af8 <_Znwj>
 800baea:	4603      	mov	r3, r0
 800baec:	e006      	b.n	800bafc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800baee:	2200      	movs	r2, #0
 800baf0:	68b9      	ldr	r1, [r7, #8]
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 f910 	bl	800bd18 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800baf8:	4603      	mov	r3, r0
 800bafa:	bf00      	nop
      { return __a.allocate(__n); }
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	f107 030c 	add.w	r3, r7, #12
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff fcf7 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bb32:	68b8      	ldr	r0, [r7, #8]
 800bb34:	f000 f896 	bl	800bc64 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7f6 fe34 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800bb46:	4603      	mov	r3, r0
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	605a      	str	r2, [r3, #4]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f88a 	bl	800bc7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800bb7a:	6838      	ldr	r0, [r7, #0]
 800bb7c:	f000 f888 	bl	800bc90 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	61fb      	str	r3, [r7, #28]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	61bb      	str	r3, [r7, #24]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bba0:	f7f4 fbbe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800bbaa:	69b8      	ldr	r0, [r7, #24]
 800bbac:	f014 ffa0 	bl	8020af0 <_ZdlPv>
	    return;
 800bbb0:	e005      	b.n	800bbbe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	69b9      	ldr	r1, [r7, #24]
 800bbb6:	69f8      	ldr	r0, [r7, #28]
 800bbb8:	f000 f8d0 	bl	800bd5c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	3720      	adds	r7, #32
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
    }
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800bbe4:	f7f4 fb9c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d004      	beq.n	800bbf8 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f857 	bl	800bca4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800bbf6:	e003      	b.n	800bc00 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f86a 	bl	800bcd4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4619      	mov	r1, r3
 800bc18:	68b8      	ldr	r0, [r7, #8]
 800bc1a:	f014 ff6b 	bl	8020af4 <_ZdlPvj>
      }
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681c      	ldr	r4, [r3, #0]
 800bc4a:	6838      	ldr	r0, [r7, #0]
 800bc4c:	f7ff fecd 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bc50:	4603      	mov	r3, r0
 800bc52:	4619      	mov	r1, r3
 800bc54:	4620      	mov	r0, r4
 800bc56:	f000 f848 	bl	800bcea <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd90      	pop	{r4, r7, pc}

0800bc64 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
    }
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d00a      	beq.n	800bccc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f862 	bl	800bd80 <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f869 	bl	800bd96 <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	e7f0      	b.n	800bcae <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
 800bcde:	bf00      	nop
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff fcf5 	bl	800b6e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bcfa:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bcfc:	6838      	ldr	r0, [r7, #0]
 800bcfe:	f7ff fe74 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd02:	4603      	mov	r3, r0
 800bd04:	461a      	mov	r2, r3
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f84f 	bl	800bdac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 f861 	bl	800bdec <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	bf8c      	ite	hi
 800bd32:	2301      	movhi	r3, #1
 800bd34:	2300      	movls	r3, #0
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bd3c:	f014 ffa3 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f014 fed4 	bl	8020af8 <_Znwj>
 800bd50:	4603      	mov	r3, r0
 800bd52:	bf00      	nop
      }
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	4619      	mov	r1, r3
 800bd74:	68b8      	ldr	r0, [r7, #8]
 800bd76:	f014 febd 	bl	8020af4 <_ZdlPvj>
      }
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff ff11 	bl	800bbc6 <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800bda4:	bf00      	nop
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800bdac:	b5b0      	push	{r4, r5, r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	2018      	movs	r0, #24
 800bdbe:	f7f4 fab7 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff fe70 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	68b8      	ldr	r0, [r7, #8]
 800bdcc:	f7ff fa48 	bl	800b260 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fe09 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	4629      	mov	r1, r5
 800bdde:	4620      	mov	r0, r4
 800bde0:	f000 f82c 	bl	800be3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800bde4:	bf00      	nop
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bdb0      	pop	{r4, r5, r7, pc}

0800bdec <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bdf4:	4b03      	ldr	r3, [pc, #12]	; (800be04 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	05555555 	.word	0x05555555

0800be08 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800be12:	6838      	ldr	r0, [r7, #0]
 800be14:	f7ff fde9 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800be18:	4605      	mov	r5, r0
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4619      	mov	r1, r3
 800be1e:	2008      	movs	r0, #8
 800be20:	f7f4 fa86 	bl	8000330 <_ZnwjPv>
 800be24:	4604      	mov	r4, r0
 800be26:	4623      	mov	r3, r4
 800be28:	462a      	mov	r2, r5
 800be2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be2e:	e883 0003 	stmia.w	r3, {r0, r1}
 800be32:	4623      	mov	r3, r4
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bdb0      	pop	{r4, r5, r7, pc}

0800be3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff fdce 	bl	800b9ea <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800be4e:	4603      	mov	r3, r0
 800be50:	4619      	mov	r1, r3
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f7ff ffd8 	bl	800be08 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800be58:	bf00      	nop
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800be60:	b580      	push	{r7, lr}
 800be62:	b090      	sub	sp, #64	; 0x40
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d13e      	bne.n	800beee <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be76:	4293      	cmp	r3, r2
 800be78:	d139      	bne.n	800beee <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800be7a:	4826      	ldr	r0, [pc, #152]	; (800bf14 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800be7c:	f7ff f806 	bl	800ae8c <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800be80:	f107 0310 	add.w	r3, r7, #16
 800be84:	2220      	movs	r2, #32
 800be86:	2100      	movs	r1, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f014 ff89 	bl	8020da0 <memset>
 800be8e:	2301      	movs	r3, #1
 800be90:	743b      	strb	r3, [r7, #16]
 800be92:	23ff      	movs	r3, #255	; 0xff
 800be94:	617b      	str	r3, [r7, #20]
 800be96:	2302      	movs	r3, #2
 800be98:	763b      	strb	r3, [r7, #24]
 800be9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be9e:	61fb      	str	r3, [r7, #28]
 800bea0:	2303      	movs	r3, #3
 800bea2:	f887 3020 	strb.w	r3, [r7, #32]
 800bea6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
 800beac:	2304      	movs	r3, #4
 800beae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beb8:	f107 0310 	add.w	r3, r7, #16
 800bebc:	60bb      	str	r3, [r7, #8]
 800bebe:	2304      	movs	r3, #4
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff f82e 	bl	800af28 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800becc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	4613      	mov	r3, r2
 800bed8:	f107 0208 	add.w	r2, r7, #8
 800bedc:	ca06      	ldmia	r2, {r1, r2}
 800bede:	480e      	ldr	r0, [pc, #56]	; (800bf18 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bee0:	f7ff f839 	bl	800af56 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800bee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff f829 	bl	800af40 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800befa:	4293      	cmp	r3, r2
 800befc:	d105      	bne.n	800bf0a <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800befe:	4806      	ldr	r0, [pc, #24]	; (800bf18 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bf00:	f7fe ffd1 	bl	800aea6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800bf04:	4803      	ldr	r0, [pc, #12]	; (800bf14 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bf06:	f000 f809 	bl	800bf1c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800bf0a:	bf00      	nop
 800bf0c:	3738      	adds	r7, #56	; 0x38
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	2400017c 	.word	0x2400017c
 800bf18:	24000188 	.word	0x24000188

0800bf1c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bf1c:	b5b0      	push	{r4, r5, r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681c      	ldr	r4, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff fd12 	bl	800b958 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800bf34:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf36:	461a      	mov	r2, r3
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff fd17 	bl	800b96e <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe ffd7 	bl	800aef6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bdb0      	pop	{r4, r5, r7, pc}

0800bf52 <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800bf52:	b580      	push	{r7, lr}
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	f7ff ff80 	bl	800be60 <_Z41__static_initialization_and_destruction_0ii>
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800bf62:	b580      	push	{r7, lr}
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	f7ff ff78 	bl	800be60 <_Z41__static_initialization_and_destruction_0ii>
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f82f 	bl	800bfde <_ZNSaIP5TimerED1Ev>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4618      	mov	r0, r3
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 f812 	bl	800bfbe <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff ffeb 	bl	800bf8a <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f82d 	bl	800c026 <_ZNSaIP5TimerEC1Ev>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f835 	bl	800c03e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c00c:	461a      	mov	r2, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f829 	bl	800c066 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff ffab 	bl	800bf72 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f82c 	bl	800c08c <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c03e:	b480      	push	{r7}
 800c040:	b083      	sub	sp, #12
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	609a      	str	r2, [r3, #8]
	{ }
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
	if (__p)
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 f80f 	bl	800c0a2 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b088      	sub	sp, #32
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	60b9      	str	r1, [r7, #8]
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	61bb      	str	r3, [r7, #24]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c0ba:	f7f4 f931 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c0c4:	69b8      	ldr	r0, [r7, #24]
 800c0c6:	f014 fd13 	bl	8020af0 <_ZdlPv>
	    return;
 800c0ca:	e005      	b.n	800c0d8 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	69b9      	ldr	r1, [r7, #24]
 800c0d0:	69f8      	ldr	r0, [r7, #28]
 800c0d2:	f000 f83e 	bl	800c152 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3720      	adds	r7, #32
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c102:	68b9      	ldr	r1, [r7, #8]
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f80e 	bl	800c126 <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c112:	b480      	push	{r7}
 800c114:	b083      	sub	sp, #12
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
    }
 800c11a:	bf00      	nop
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c126:	b580      	push	{r7, lr}
 800c128:	b082      	sub	sp, #8
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c130:	f7f4 f8f6 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d004      	beq.n	800c144 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f817 	bl	800c170 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c142:	e003      	b.n	800c14c <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f82a 	bl	800c1a0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4619      	mov	r1, r3
 800c164:	68b8      	ldr	r0, [r7, #8]
 800c166:	f014 fcc5 	bl	8020af4 <_ZdlPvj>
      }
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d00a      	beq.n	800c198 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f817 	bl	800c1b6 <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c188:	4603      	mov	r3, r0
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 f81e 	bl	800c1cc <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	607b      	str	r3, [r7, #4]
 800c196:	e7f0      	b.n	800c17a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff ff9c 	bl	800c112 <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d107      	bne.n	800c204 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d102      	bne.n	800c204 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c1fe:	4809      	ldr	r0, [pc, #36]	; (800c224 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c200:	f7ff fed0 	bl	800bfa4 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d107      	bne.n	800c21a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c210:	4293      	cmp	r3, r2
 800c212:	d102      	bne.n	800c21a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c214:	4803      	ldr	r0, [pc, #12]	; (800c224 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c216:	f000 f807 	bl	800c228 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c21a:	bf00      	nop
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	240001a0 	.word	0x240001a0

0800c228 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c228:	b5b0      	push	{r4, r5, r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681c      	ldr	r4, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff ff50 	bl	800c0e0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c240:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c242:	461a      	mov	r2, r3
 800c244:	4629      	mov	r1, r5
 800c246:	4620      	mov	r0, r4
 800c248:	f7ff ff55 	bl	800c0f6 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fed0 	bl	800bff4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bdb0      	pop	{r4, r5, r7, pc}

0800c25e <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c25e:	b580      	push	{r7, lr}
 800c260:	af00      	add	r7, sp, #0
 800c262:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c266:	2001      	movs	r0, #1
 800c268:	f7ff ffbc 	bl	800c1e4 <_Z41__static_initialization_and_destruction_0ii>
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c26e:	b580      	push	{r7, lr}
 800c270:	af00      	add	r7, sp, #0
 800c272:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c276:	2000      	movs	r0, #0
 800c278:	f7ff ffb4 	bl	800c1e4 <_Z41__static_initialization_and_destruction_0ii>
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c27e:	b580      	push	{r7, lr}
 800c280:	b082      	sub	sp, #8
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f834 	bl	800c2f4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c296:	b580      	push	{r7, lr}
 800c298:	b082      	sub	sp, #8
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f812 	bl	800c2ca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff ffeb 	bl	800c296 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f82e 	bl	800c334 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f836 	bl	800c34c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f4 f82f 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f844 	bl	800c3a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c318:	4603      	mov	r3, r0
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f820 	bl	800c362 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff ffaa 	bl	800c27e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f83b 	bl	800c3b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
      { }
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d012      	beq.n	800c398 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c372:	6838      	ldr	r0, [r7, #0]
 800c374:	f000 f82b 	bl	800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c378:	4603      	mov	r3, r0
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff fff0 	bl	800c362 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c382:	6838      	ldr	r0, [r7, #0]
 800c384:	f000 f82f 	bl	800c3e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c388:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f836 	bl	800c3fe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c396:	e7e9      	b.n	800c36c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	370c      	adds	r7, #12
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f808 	bl	800c420 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f819 	bl	800c44a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c420:	b590      	push	{r4, r7, lr}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f81f 	bl	800c46e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c430:	4604      	mov	r4, r0
 800c432:	6838      	ldr	r0, [r7, #0]
 800c434:	f7f9 f818 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c438:	4603      	mov	r3, r0
 800c43a:	4619      	mov	r1, r3
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 f821 	bl	800c484 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c442:	bf00      	nop
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	bd90      	pop	{r4, r7, pc}

0800c44a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f80a 	bl	800c46e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2201      	movs	r2, #1
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	4618      	mov	r0, r3
 800c462:	f000 f81b 	bl	800c49c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c48e:	6838      	ldr	r0, [r7, #0]
 800c490:	f000 f823 	bl	800c4da <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c4b4:	f7f3 ff34 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c4be:	69b8      	ldr	r0, [r7, #24]
 800c4c0:	f014 fb16 	bl	8020af0 <_ZdlPv>
	    return;
 800c4c4:	e005      	b.n	800c4d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	69b9      	ldr	r1, [r7, #24]
 800c4ca:	69f8      	ldr	r0, [r7, #28]
 800c4cc:	f000 f80f 	bl	800c4ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c4d0:	bf00      	nop
 800c4d2:	bf00      	nop
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
    }
 800c4e2:	bf00      	nop
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4619      	mov	r1, r3
 800c506:	68b8      	ldr	r0, [r7, #8]
 800c508:	f014 faf4 	bl	8020af4 <_ZdlPvj>
      }
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c512:	b580      	push	{r7, lr}
 800c514:	b082      	sub	sp, #8
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff fef4 	bl	800c30a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d107      	bne.n	800c54c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c542:	4293      	cmp	r3, r2
 800c544:	d102      	bne.n	800c54c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c546:	4809      	ldr	r0, [pc, #36]	; (800c56c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c548:	f7ff feb2 	bl	800c2b0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d107      	bne.n	800c562 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c558:	4293      	cmp	r3, r2
 800c55a:	d102      	bne.n	800c562 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c55c:	4803      	ldr	r0, [pc, #12]	; (800c56c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c55e:	f7ff ffd8 	bl	800c512 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	240001ac 	.word	0x240001ac

0800c570 <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
 800c574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c578:	2001      	movs	r0, #1
 800c57a:	f7ff ffd7 	bl	800c52c <_Z41__static_initialization_and_destruction_0ii>
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
 800c584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c588:	2000      	movs	r0, #0
 800c58a:	f7ff ffcf 	bl	800c52c <_Z41__static_initialization_and_destruction_0ii>
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f86f 	bl	800c67c <_ZNSaIP3PinED1Ev>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 f852 	bl	800c65c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ffeb 	bl	800c5a8 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	80fb      	strh	r3, [r7, #6]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	88fa      	ldrh	r2, [r7, #6]
 800c5f4:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	617b      	str	r3, [r7, #20]
 800c5fa:	f107 0314 	add.w	r3, r7, #20
 800c5fe:	4619      	mov	r1, r3
 800c600:	4803      	ldr	r0, [pc, #12]	; (800c610 <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c602:	f000 f85f 	bl	800c6c4 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	240001c4 	.word	0x240001c4

0800c614 <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c614:	b590      	push	{r4, r7, lr}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c620:	887c      	ldrh	r4, [r7, #2]
 800c622:	480d      	ldr	r0, [pc, #52]	; (800c658 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c624:	f000 f85f 	bl	800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c628:	4603      	mov	r3, r0
 800c62a:	429c      	cmp	r4, r3
 800c62c:	bf34      	ite	cc
 800c62e:	2301      	movcc	r3, #1
 800c630:	2300      	movcs	r3, #0
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c638:	887b      	ldrh	r3, [r7, #2]
 800c63a:	4619      	mov	r1, r3
 800c63c:	4806      	ldr	r0, [pc, #24]	; (800c658 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c63e:	f000 f862 	bl	800c706 <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c642:	4603      	mov	r3, r0
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f86d 	bl	800c726 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c64c:	e000      	b.n	800c650 <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c64e:	bf00      	nop
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	bd90      	pop	{r4, r7, pc}
 800c658:	240001c4 	.word	0x240001c4

0800c65c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f872 	bl	800c74e <_ZNSaIP3PinEC1Ev>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f87a 	bl	800c766 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c692:	b580      	push	{r7, lr}
 800c694:	b082      	sub	sp, #8
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f86e 	bl	800c78e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff ff6b 	bl	800c590 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6ce:	6838      	ldr	r0, [r7, #0]
 800c6d0:	f000 f870 	bl	800c7b4 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f876 	bl	800c7ca <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	109b      	asrs	r3, r3, #2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
      }
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c726:	b5b0      	push	{r4, r5, r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c730:	687c      	ldr	r4, [r7, #4]
 800c732:	6838      	ldr	r0, [r7, #0]
 800c734:	f000 f87b 	bl	800c82e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c738:	4603      	mov	r3, r0
 800c73a:	461a      	mov	r2, r3
 800c73c:	4629      	mov	r1, r5
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 f891 	bl	800c866 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bdb0      	pop	{r4, r5, r7, pc}

0800c74e <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c74e:	b580      	push	{r7, lr}
 800c750:	b082      	sub	sp, #8
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f89a 	bl	800c890 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	605a      	str	r2, [r3, #4]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	609a      	str	r2, [r3, #8]
	{ }
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4618      	mov	r0, r3
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
	if (__p)
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 f87d 	bl	800c8a6 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800c7ac:	bf00      	nop
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c7ca:	b5b0      	push	{r4, r5, r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d011      	beq.n	800c804 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c7e0:	687c      	ldr	r4, [r7, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685d      	ldr	r5, [r3, #4]
 800c7e6:	6838      	ldr	r0, [r7, #0]
 800c7e8:	f000 f87c 	bl	800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f000 f896 	bl	800c924 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	1d1a      	adds	r2, r3, #4
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	e00c      	b.n	800c81e <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f89f 	bl	800c948 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800c80a:	4604      	mov	r4, r0
 800c80c:	6838      	ldr	r0, [r7, #0]
 800c80e:	f000 f869 	bl	800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c812:	4603      	mov	r3, r0
 800c814:	461a      	mov	r2, r3
 800c816:	4621      	mov	r1, r4
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f8a7 	bl	800c96c <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f920 	bl	800ca64 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800c824:	4603      	mov	r3, r0
      }
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bdb0      	pop	{r4, r5, r7, pc}

0800c82e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c82e:	b480      	push	{r7}
 800c830:	b083      	sub	sp, #12
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800c844:	b590      	push	{r4, r7, lr}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	7239      	strb	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	4621      	mov	r1, r4
 800c856:	4618      	mov	r0, r3
 800c858:	f000 f931 	bl	800cabe <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	bd90      	pop	{r4, r7, pc}

0800c866 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800c866:	b5b0      	push	{r4, r5, r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	60f8      	str	r0, [r7, #12]
 800c86e:	7239      	strb	r1, [r7, #8]
 800c870:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800c872:	68fc      	ldr	r4, [r7, #12]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff ffda 	bl	800c82e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	4629      	mov	r1, r5
 800c880:	4620      	mov	r0, r4
 800c882:	f7ff ffdf 	bl	800c844 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bdb0      	pop	{r4, r5, r7, pc}

0800c890 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b088      	sub	sp, #32
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	61fb      	str	r3, [r7, #28]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	61bb      	str	r3, [r7, #24]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c8be:	f7f3 fd2f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c8c8:	69b8      	ldr	r0, [r7, #24]
 800c8ca:	f014 f911 	bl	8020af0 <_ZdlPv>
	    return;
 800c8ce:	e005      	b.n	800c8dc <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	69b9      	ldr	r1, [r7, #24]
 800c8d4:	69f8      	ldr	r0, [r7, #28]
 800c8d6:	f000 f9f7 	bl	800ccc8 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c8da:	bf00      	nop
 800c8dc:	bf00      	nop
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c8fa:	b590      	push	{r4, r7, lr}
 800c8fc:	b083      	sub	sp, #12
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c904:	6838      	ldr	r0, [r7, #0]
 800c906:	f7ff ffed 	bl	800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c90a:	4603      	mov	r3, r0
 800c90c:	681c      	ldr	r4, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4619      	mov	r1, r3
 800c912:	2004      	movs	r0, #4
 800c914:	f7f3 fd0c 	bl	8000330 <_ZnwjPv>
 800c918:	4603      	mov	r3, r0
 800c91a:	601c      	str	r4, [r3, #0]
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	bd90      	pop	{r4, r7, pc}

0800c924 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff ffd7 	bl	800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c936:	4603      	mov	r3, r0
 800c938:	4619      	mov	r1, r3
 800c93a:	68b8      	ldr	r0, [r7, #8]
 800c93c:	f7ff ffdd 	bl	800c8fa <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	1d1a      	adds	r2, r3, #4
 800c954:	f107 030c 	add.w	r3, r7, #12
 800c958:	4611      	mov	r1, r2
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f8c7 	bl	800caee <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c96c:	b5b0      	push	{r4, r5, r7, lr}
 800c96e:	b08c      	sub	sp, #48	; 0x30
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c978:	4a39      	ldr	r2, [pc, #228]	; (800ca60 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c97a:	2101      	movs	r1, #1
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f8c6 	bl	800cb0e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800c982:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 f903 	bl	800cb9c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800c996:	4603      	mov	r3, r0
 800c998:	617b      	str	r3, [r7, #20]
 800c99a:	f107 0214 	add.w	r2, r7, #20
 800c99e:	f107 0308 	add.w	r3, r7, #8
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 f909 	bl	800cbbc <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 f917 	bl	800cbe6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800c9b8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c9be:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c9c4:	69fa      	ldr	r2, [r7, #28]
 800c9c6:	18d5      	adds	r5, r2, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff ff8b 	bl	800c8e4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f7ff ffa5 	bl	800c924 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c9da:	2300      	movs	r3, #0
 800c9dc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9de:	f107 0308 	add.w	r3, r7, #8
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 f927 	bl	800cc36 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f92c 	bl	800cc4c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9fc:	f000 f907 	bl	800cc0e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca00:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	3304      	adds	r3, #4
 800ca06:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 f912 	bl	800cc36 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800ca12:	4603      	mov	r3, r0
 800ca14:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 f917 	bl	800cc4c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ca1e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 f8f2 	bl	800cc0e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca2a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800ca2c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	689a      	ldr	r2, [r3, #8]
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca3c:	f7ff fea7 	bl	800c78e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	69ba      	ldr	r2, [r7, #24]
 800ca4a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	69fa      	ldr	r2, [r7, #28]
 800ca52:	441a      	add	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	609a      	str	r2, [r3, #8]
    }
 800ca58:	bf00      	nop
 800ca5a:	3730      	adds	r7, #48	; 0x30
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca60:	080211a8 	.word	0x080211a8

0800ca64 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7ff ff6b 	bl	800c948 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ca72:	4603      	mov	r3, r0
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	f107 030c 	add.w	r3, r7, #12
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f000 f8fe 	bl	800cc7e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800ca82:	4603      	mov	r3, r0
 800ca84:	60bb      	str	r3, [r7, #8]
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 f910 	bl	800ccb0 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800ca90:	4603      	mov	r3, r0
      }
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	7239      	strb	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff fec1 	bl	800c82e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800caac:	4603      	mov	r3, r0
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	601a      	str	r2, [r3, #0]
	    { }
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800cabe:	b5b0      	push	{r4, r5, r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	7239      	strb	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800caca:	68fc      	ldr	r4, [r7, #12]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff feae 	bl	800c82e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	4629      	mov	r1, r5
 800cad8:	4620      	mov	r0, r4
 800cada:	f7ff ffde 	bl	800ca9a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2201      	movs	r2, #1
 800cae2:	711a      	strb	r2, [r3, #4]
	{ }
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bdb0      	pop	{r4, r5, r7, pc}

0800caee <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cb0e:	b590      	push	{r4, r7, lr}
 800cb10:	b087      	sub	sp, #28
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f000 f8e3 	bl	800cce6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb20:	4604      	mov	r4, r0
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7ff fddf 	bl	800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	1ae2      	subs	r2, r4, r3
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	bf34      	ite	cc
 800cb32:	2301      	movcc	r3, #1
 800cb34:	2300      	movcs	r3, #0
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f014 f8a5 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff fdcf 	bl	800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb48:	4604      	mov	r4, r0
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f7ff fdcb 	bl	800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb50:	4603      	mov	r3, r0
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	f107 0208 	add.w	r2, r7, #8
 800cb58:	f107 0310 	add.w	r3, r7, #16
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f5 fe77 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cb64:	4603      	mov	r3, r0
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4423      	add	r3, r4
 800cb6a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff fdba 	bl	800c6e6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb72:	4602      	mov	r2, r0
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d306      	bcc.n	800cb88 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f000 f8b3 	bl	800cce6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb80:	4602      	mov	r2, r0
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d904      	bls.n	800cb92 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f000 f8ac 	bl	800cce6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	e000      	b.n	800cb94 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cb92:	697b      	ldr	r3, [r7, #20]
      }
 800cb94:	4618      	mov	r0, r3
 800cb96:	371c      	adds	r7, #28
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}

0800cb9c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	f107 030c 	add.w	r3, r7, #12
 800cbaa:	4611      	mov	r1, r2
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff ff9e 	bl	800caee <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f835 	bl	800cc36 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	681c      	ldr	r4, [r3, #0]
 800cbd0:	6838      	ldr	r0, [r7, #0]
 800cbd2:	f000 f830 	bl	800cc36 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	1ae3      	subs	r3, r4, r3
 800cbdc:	109b      	asrs	r3, r3, #2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd90      	pop	{r4, r7, pc}

0800cbe6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d006      	beq.n	800cc04 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6839      	ldr	r1, [r7, #0]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f884 	bl	800cd08 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800cc00:	4603      	mov	r3, r0
 800cc02:	e000      	b.n	800cc06 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800cc04:	2300      	movs	r3, #0
      }
 800cc06:	4618      	mov	r0, r3
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cc0e:	b590      	push	{r4, r7, lr}
 800cc10:	b087      	sub	sp, #28
 800cc12:	af02      	add	r7, sp, #8
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cc1c:	f88d 4000 	strb.w	r4, [sp]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	68b9      	ldr	r1, [r7, #8]
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 f88e 	bl	800cd48 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cc2c:	4603      	mov	r3, r0
      }
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd90      	pop	{r4, r7, pc}

0800cc36 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cc36:	b480      	push	{r7}
 800cc38:	b083      	sub	sp, #12
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4618      	mov	r0, r3
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f000 f885 	bl	800cd80 <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	425b      	negs	r3, r3
 800cc92:	4413      	add	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	f107 020c 	add.w	r2, r7, #12
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff ff24 	bl	800caee <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4619      	mov	r1, r3
 800ccda:	68b8      	ldr	r0, [r7, #8]
 800ccdc:	f013 ff0a 	bl	8020af4 <_ZdlPvj>
      }
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b082      	sub	sp, #8
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 f881 	bl	800cdf8 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f863 	bl	800cdc4 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800cd1a:	f7f3 fb01 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d006      	beq.n	800cd32 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f013 fee5 	bl	8020af8 <_Znwj>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	e006      	b.n	800cd40 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cd32:	2200      	movs	r2, #0
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 f8a9 	bl	800ce8e <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	bf00      	nop
      { return __a.allocate(__n); }
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 f856 	bl	800ce0e <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cd62:	4603      	mov	r3, r0
      }
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
    }
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800cd8a:	f7f3 fac9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f856 	bl	800ce48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800cd9c:	e003      	b.n	800cda6 <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f869 	bl	800ce78 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800cdb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800cdb8:	4618      	mov	r0, r3
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cdcc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdd0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff ffea 	bl	800cdac <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cddc:	f107 0208 	add.w	r2, r7, #8
 800cde0:	f107 030c 	add.w	r3, r7, #12
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7f5 fffd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800cdec:	4603      	mov	r3, r0
 800cdee:	681b      	ldr	r3, [r3, #0]
      }
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ce0e:	b5b0      	push	{r4, r5, r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	60f8      	str	r0, [r7, #12]
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f855 	bl	800cecc <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce22:	4604      	mov	r4, r0
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	f000 f851 	bl	800cecc <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f84d 	bl	800cecc <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce32:	4602      	mov	r2, r0
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	4629      	mov	r1, r5
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 f852 	bl	800cee2 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ce3e:	4603      	mov	r3, r0
    }
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bdb0      	pop	{r4, r5, r7, pc}

0800ce48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d00a      	beq.n	800ce70 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f85f 	bl	800cf1e <_ZSt11__addressofIP3PinEPT_RS2_>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f866 	bl	800cf34 <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	607b      	str	r3, [r7, #4]
 800ce6e:	e7f0      	b.n	800ce52 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	bf00      	nop
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	60f8      	str	r0, [r7, #12]
 800ce96:	60b9      	str	r1, [r7, #8]
 800ce98:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f855 	bl	800cf4a <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800cea0:	4602      	mov	r2, r0
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	4293      	cmp	r3, r2
 800cea6:	bf8c      	ite	hi
 800cea8:	2301      	movhi	r3, #1
 800ceaa:	2300      	movls	r3, #0
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d001      	beq.n	800ceb6 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ceb2:	f013 fee8 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f013 fe1c 	bl	8020af8 <_Znwj>
 800cec0:	4603      	mov	r3, r0
 800cec2:	bf00      	nop
      }
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4618      	mov	r0, r3
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b086      	sub	sp, #24
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	60b9      	str	r1, [r7, #8]
 800ceec:	607a      	str	r2, [r7, #4]
 800ceee:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	109b      	asrs	r3, r3, #2
 800cef8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dd06      	ble.n	800cf0e <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	461a      	mov	r2, r3
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f013 ff2f 	bl	8020d6c <memmove>
      return __result + __count;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	4413      	add	r3, r2
    }
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf1e:	b480      	push	{r7}
 800cf20:	b083      	sub	sp, #12
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7ff ff15 	bl	800cd6c <_ZSt10destroy_atIP3PinEvPT_>
    }
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cf52:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
	...

0800cf64 <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	f040 82ad 	bne.w	800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	f040 82a7 	bne.w	800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800cf82:	48ba      	ldr	r0, [pc, #744]	; (800d26c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800cf84:	f7ff fb1d 	bl	800c5c2 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800cf88:	2201      	movs	r2, #1
 800cf8a:	49b9      	ldr	r1, [pc, #740]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf8c:	48b9      	ldr	r0, [pc, #740]	; (800d274 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800cf8e:	f7ff fb25 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800cf92:	2202      	movs	r2, #2
 800cf94:	49b6      	ldr	r1, [pc, #728]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf96:	48b8      	ldr	r0, [pc, #736]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800cf98:	f7ff fb20 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800cf9c:	2204      	movs	r2, #4
 800cf9e:	49b4      	ldr	r1, [pc, #720]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfa0:	48b6      	ldr	r0, [pc, #728]	; (800d27c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800cfa2:	f7ff fb1b 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800cfa6:	2208      	movs	r2, #8
 800cfa8:	49b1      	ldr	r1, [pc, #708]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfaa:	48b5      	ldr	r0, [pc, #724]	; (800d280 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800cfac:	f7ff fb16 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800cfb0:	2210      	movs	r2, #16
 800cfb2:	49af      	ldr	r1, [pc, #700]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfb4:	48b3      	ldr	r0, [pc, #716]	; (800d284 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800cfb6:	f7ff fb11 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800cfba:	2220      	movs	r2, #32
 800cfbc:	49ac      	ldr	r1, [pc, #688]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfbe:	48b2      	ldr	r0, [pc, #712]	; (800d288 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800cfc0:	f7ff fb0c 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800cfc4:	2240      	movs	r2, #64	; 0x40
 800cfc6:	49aa      	ldr	r1, [pc, #680]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfc8:	48b0      	ldr	r0, [pc, #704]	; (800d28c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800cfca:	f7ff fb07 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800cfce:	2280      	movs	r2, #128	; 0x80
 800cfd0:	49a7      	ldr	r1, [pc, #668]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfd2:	48af      	ldr	r0, [pc, #700]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800cfd4:	f7ff fb02 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800cfd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfdc:	49a4      	ldr	r1, [pc, #656]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfde:	48ad      	ldr	r0, [pc, #692]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800cfe0:	f7ff fafc 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800cfe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfe8:	49a1      	ldr	r1, [pc, #644]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfea:	48ab      	ldr	r0, [pc, #684]	; (800d298 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800cfec:	f7ff faf6 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800cff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cff4:	499e      	ldr	r1, [pc, #632]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cff6:	48a9      	ldr	r0, [pc, #676]	; (800d29c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800cff8:	f7ff faf0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800cffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d000:	499b      	ldr	r1, [pc, #620]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d002:	48a7      	ldr	r0, [pc, #668]	; (800d2a0 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800d004:	f7ff faea 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800d008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d00c:	4998      	ldr	r1, [pc, #608]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d00e:	48a5      	ldr	r0, [pc, #660]	; (800d2a4 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800d010:	f7ff fae4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800d014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d018:	4995      	ldr	r1, [pc, #596]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d01a:	48a3      	ldr	r0, [pc, #652]	; (800d2a8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800d01c:	f7ff fade 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800d020:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d024:	4992      	ldr	r1, [pc, #584]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d026:	48a1      	ldr	r0, [pc, #644]	; (800d2ac <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d028:	f7ff fad8 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d02c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d030:	498f      	ldr	r1, [pc, #572]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d032:	489f      	ldr	r0, [pc, #636]	; (800d2b0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d034:	f7ff fad2 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d038:	2201      	movs	r2, #1
 800d03a:	499e      	ldr	r1, [pc, #632]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d03c:	489e      	ldr	r0, [pc, #632]	; (800d2b8 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d03e:	f7ff facd 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d042:	2202      	movs	r2, #2
 800d044:	499b      	ldr	r1, [pc, #620]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d046:	489d      	ldr	r0, [pc, #628]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d048:	f7ff fac8 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d04c:	2204      	movs	r2, #4
 800d04e:	4999      	ldr	r1, [pc, #612]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d050:	489b      	ldr	r0, [pc, #620]	; (800d2c0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d052:	f7ff fac3 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d056:	2208      	movs	r2, #8
 800d058:	4996      	ldr	r1, [pc, #600]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d05a:	489a      	ldr	r0, [pc, #616]	; (800d2c4 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d05c:	f7ff fabe 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d060:	2210      	movs	r2, #16
 800d062:	4994      	ldr	r1, [pc, #592]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d064:	4898      	ldr	r0, [pc, #608]	; (800d2c8 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d066:	f7ff fab9 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d06a:	2220      	movs	r2, #32
 800d06c:	4991      	ldr	r1, [pc, #580]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d06e:	4897      	ldr	r0, [pc, #604]	; (800d2cc <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d070:	f7ff fab4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d074:	2240      	movs	r2, #64	; 0x40
 800d076:	498f      	ldr	r1, [pc, #572]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d078:	4895      	ldr	r0, [pc, #596]	; (800d2d0 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d07a:	f7ff faaf 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d07e:	2280      	movs	r2, #128	; 0x80
 800d080:	498c      	ldr	r1, [pc, #560]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d082:	4894      	ldr	r0, [pc, #592]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d084:	f7ff faaa 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d08c:	4989      	ldr	r1, [pc, #548]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d08e:	4892      	ldr	r0, [pc, #584]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d090:	f7ff faa4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d094:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d098:	4986      	ldr	r1, [pc, #536]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d09a:	4890      	ldr	r0, [pc, #576]	; (800d2dc <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d09c:	f7ff fa9e 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d0a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0a4:	4983      	ldr	r1, [pc, #524]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0a6:	488e      	ldr	r0, [pc, #568]	; (800d2e0 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d0a8:	f7ff fa98 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d0ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0b0:	4980      	ldr	r1, [pc, #512]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0b2:	488c      	ldr	r0, [pc, #560]	; (800d2e4 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d0b4:	f7ff fa92 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d0b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0bc:	497d      	ldr	r1, [pc, #500]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0be:	488a      	ldr	r0, [pc, #552]	; (800d2e8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d0c0:	f7ff fa8c 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d0c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d0c8:	497a      	ldr	r1, [pc, #488]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0ca:	4888      	ldr	r0, [pc, #544]	; (800d2ec <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d0cc:	f7ff fa86 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d0d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d0d4:	4977      	ldr	r1, [pc, #476]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0d6:	4886      	ldr	r0, [pc, #536]	; (800d2f0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d0d8:	f7ff fa80 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d0dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d0e0:	4974      	ldr	r1, [pc, #464]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0e2:	4884      	ldr	r0, [pc, #528]	; (800d2f4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d0e4:	f7ff fa7a 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	4983      	ldr	r1, [pc, #524]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0ec:	4883      	ldr	r0, [pc, #524]	; (800d2fc <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d0ee:	f7ff fa75 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	4980      	ldr	r1, [pc, #512]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0f6:	4882      	ldr	r0, [pc, #520]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d0f8:	f7ff fa70 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d0fc:	2204      	movs	r2, #4
 800d0fe:	497e      	ldr	r1, [pc, #504]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d100:	4880      	ldr	r0, [pc, #512]	; (800d304 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d102:	f7ff fa6b 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d106:	2208      	movs	r2, #8
 800d108:	497b      	ldr	r1, [pc, #492]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d10a:	487f      	ldr	r0, [pc, #508]	; (800d308 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d10c:	f7ff fa66 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d110:	2210      	movs	r2, #16
 800d112:	4979      	ldr	r1, [pc, #484]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d114:	487d      	ldr	r0, [pc, #500]	; (800d30c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d116:	f7ff fa61 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d11a:	2220      	movs	r2, #32
 800d11c:	4976      	ldr	r1, [pc, #472]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d11e:	487c      	ldr	r0, [pc, #496]	; (800d310 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d120:	f7ff fa5c 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d124:	2240      	movs	r2, #64	; 0x40
 800d126:	4974      	ldr	r1, [pc, #464]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d128:	487a      	ldr	r0, [pc, #488]	; (800d314 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d12a:	f7ff fa57 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d12e:	2280      	movs	r2, #128	; 0x80
 800d130:	4971      	ldr	r1, [pc, #452]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d132:	4879      	ldr	r0, [pc, #484]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d134:	f7ff fa52 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d13c:	496e      	ldr	r1, [pc, #440]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d13e:	4877      	ldr	r0, [pc, #476]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d140:	f7ff fa4c 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d148:	496b      	ldr	r1, [pc, #428]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d14a:	4875      	ldr	r0, [pc, #468]	; (800d320 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d14c:	f7ff fa46 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d154:	4968      	ldr	r1, [pc, #416]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d156:	4873      	ldr	r0, [pc, #460]	; (800d324 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d158:	f7ff fa40 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d160:	4965      	ldr	r1, [pc, #404]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d162:	4871      	ldr	r0, [pc, #452]	; (800d328 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d164:	f7ff fa3a 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d16c:	4962      	ldr	r1, [pc, #392]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d16e:	486f      	ldr	r0, [pc, #444]	; (800d32c <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d170:	f7ff fa34 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d178:	495f      	ldr	r1, [pc, #380]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d17a:	486d      	ldr	r0, [pc, #436]	; (800d330 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d17c:	f7ff fa2e 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d184:	495c      	ldr	r1, [pc, #368]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d186:	486b      	ldr	r0, [pc, #428]	; (800d334 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d188:	f7ff fa28 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d18c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d190:	4959      	ldr	r1, [pc, #356]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d192:	4869      	ldr	r0, [pc, #420]	; (800d338 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d194:	f7ff fa22 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d198:	2201      	movs	r2, #1
 800d19a:	4968      	ldr	r1, [pc, #416]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d19c:	4868      	ldr	r0, [pc, #416]	; (800d340 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d19e:	f7ff fa1d 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	4965      	ldr	r1, [pc, #404]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1a6:	4867      	ldr	r0, [pc, #412]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d1a8:	f7ff fa18 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d1ac:	2204      	movs	r2, #4
 800d1ae:	4963      	ldr	r1, [pc, #396]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1b0:	4865      	ldr	r0, [pc, #404]	; (800d348 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d1b2:	f7ff fa13 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d1b6:	2208      	movs	r2, #8
 800d1b8:	4960      	ldr	r1, [pc, #384]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ba:	4864      	ldr	r0, [pc, #400]	; (800d34c <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d1bc:	f7ff fa0e 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d1c0:	2210      	movs	r2, #16
 800d1c2:	495e      	ldr	r1, [pc, #376]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1c4:	4862      	ldr	r0, [pc, #392]	; (800d350 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d1c6:	f7ff fa09 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d1ca:	2220      	movs	r2, #32
 800d1cc:	495b      	ldr	r1, [pc, #364]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ce:	4861      	ldr	r0, [pc, #388]	; (800d354 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d1d0:	f7ff fa04 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d1d4:	2240      	movs	r2, #64	; 0x40
 800d1d6:	4959      	ldr	r1, [pc, #356]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1d8:	485f      	ldr	r0, [pc, #380]	; (800d358 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d1da:	f7ff f9ff 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d1de:	2280      	movs	r2, #128	; 0x80
 800d1e0:	4956      	ldr	r1, [pc, #344]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1e2:	485e      	ldr	r0, [pc, #376]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d1e4:	f7ff f9fa 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d1e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1ec:	4953      	ldr	r1, [pc, #332]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ee:	485c      	ldr	r0, [pc, #368]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d1f0:	f7ff f9f4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d1f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1f8:	4950      	ldr	r1, [pc, #320]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1fa:	485a      	ldr	r0, [pc, #360]	; (800d364 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d1fc:	f7ff f9ee 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d204:	494d      	ldr	r1, [pc, #308]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d206:	4858      	ldr	r0, [pc, #352]	; (800d368 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d208:	f7ff f9e8 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d20c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d210:	494a      	ldr	r1, [pc, #296]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d212:	4856      	ldr	r0, [pc, #344]	; (800d36c <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d214:	f7ff f9e2 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d21c:	4947      	ldr	r1, [pc, #284]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d21e:	4854      	ldr	r0, [pc, #336]	; (800d370 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d220:	f7ff f9dc 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d228:	4944      	ldr	r1, [pc, #272]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d22a:	4852      	ldr	r0, [pc, #328]	; (800d374 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d22c:	f7ff f9d6 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d230:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d234:	4941      	ldr	r1, [pc, #260]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d236:	4850      	ldr	r0, [pc, #320]	; (800d378 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d238:	f7ff f9d0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d23c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d240:	493e      	ldr	r1, [pc, #248]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d242:	484e      	ldr	r0, [pc, #312]	; (800d37c <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d244:	f7ff f9ca 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d248:	2201      	movs	r2, #1
 800d24a:	494d      	ldr	r1, [pc, #308]	; (800d380 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d24c:	484d      	ldr	r0, [pc, #308]	; (800d384 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d24e:	f7ff f9c5 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d252:	2202      	movs	r2, #2
 800d254:	494a      	ldr	r1, [pc, #296]	; (800d380 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d256:	484c      	ldr	r0, [pc, #304]	; (800d388 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d258:	f7ff f9c0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d25c:	2204      	movs	r2, #4
 800d25e:	4948      	ldr	r1, [pc, #288]	; (800d380 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d260:	484a      	ldr	r0, [pc, #296]	; (800d38c <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d262:	f7ff f9bb 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d266:	2208      	movs	r2, #8
 800d268:	e092      	b.n	800d390 <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d26a:	bf00      	nop
 800d26c:	240001c4 	.word	0x240001c4
 800d270:	58020000 	.word	0x58020000
 800d274:	240001d0 	.word	0x240001d0
 800d278:	240001d8 	.word	0x240001d8
 800d27c:	240001e0 	.word	0x240001e0
 800d280:	240001e8 	.word	0x240001e8
 800d284:	240001f0 	.word	0x240001f0
 800d288:	240001f8 	.word	0x240001f8
 800d28c:	24000200 	.word	0x24000200
 800d290:	24000208 	.word	0x24000208
 800d294:	24000210 	.word	0x24000210
 800d298:	24000218 	.word	0x24000218
 800d29c:	24000220 	.word	0x24000220
 800d2a0:	24000228 	.word	0x24000228
 800d2a4:	24000230 	.word	0x24000230
 800d2a8:	24000238 	.word	0x24000238
 800d2ac:	24000240 	.word	0x24000240
 800d2b0:	24000248 	.word	0x24000248
 800d2b4:	58020400 	.word	0x58020400
 800d2b8:	24000250 	.word	0x24000250
 800d2bc:	24000258 	.word	0x24000258
 800d2c0:	24000260 	.word	0x24000260
 800d2c4:	24000268 	.word	0x24000268
 800d2c8:	24000270 	.word	0x24000270
 800d2cc:	24000278 	.word	0x24000278
 800d2d0:	24000280 	.word	0x24000280
 800d2d4:	24000288 	.word	0x24000288
 800d2d8:	24000290 	.word	0x24000290
 800d2dc:	24000298 	.word	0x24000298
 800d2e0:	240002a0 	.word	0x240002a0
 800d2e4:	240002a8 	.word	0x240002a8
 800d2e8:	240002b0 	.word	0x240002b0
 800d2ec:	240002b8 	.word	0x240002b8
 800d2f0:	240002c0 	.word	0x240002c0
 800d2f4:	240002c8 	.word	0x240002c8
 800d2f8:	58020800 	.word	0x58020800
 800d2fc:	240002d0 	.word	0x240002d0
 800d300:	240002d8 	.word	0x240002d8
 800d304:	240002e0 	.word	0x240002e0
 800d308:	240002e8 	.word	0x240002e8
 800d30c:	240002f0 	.word	0x240002f0
 800d310:	240002f8 	.word	0x240002f8
 800d314:	24000300 	.word	0x24000300
 800d318:	24000308 	.word	0x24000308
 800d31c:	24000310 	.word	0x24000310
 800d320:	24000318 	.word	0x24000318
 800d324:	24000320 	.word	0x24000320
 800d328:	24000328 	.word	0x24000328
 800d32c:	24000330 	.word	0x24000330
 800d330:	24000338 	.word	0x24000338
 800d334:	24000340 	.word	0x24000340
 800d338:	24000348 	.word	0x24000348
 800d33c:	58020c00 	.word	0x58020c00
 800d340:	24000350 	.word	0x24000350
 800d344:	24000358 	.word	0x24000358
 800d348:	24000360 	.word	0x24000360
 800d34c:	24000368 	.word	0x24000368
 800d350:	24000370 	.word	0x24000370
 800d354:	24000378 	.word	0x24000378
 800d358:	24000380 	.word	0x24000380
 800d35c:	24000388 	.word	0x24000388
 800d360:	24000390 	.word	0x24000390
 800d364:	24000398 	.word	0x24000398
 800d368:	240003a0 	.word	0x240003a0
 800d36c:	240003a8 	.word	0x240003a8
 800d370:	240003b0 	.word	0x240003b0
 800d374:	240003b8 	.word	0x240003b8
 800d378:	240003c0 	.word	0x240003c0
 800d37c:	240003c8 	.word	0x240003c8
 800d380:	58021000 	.word	0x58021000
 800d384:	240003d0 	.word	0x240003d0
 800d388:	240003d8 	.word	0x240003d8
 800d38c:	240003e0 	.word	0x240003e0
 800d390:	4957      	ldr	r1, [pc, #348]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d392:	4858      	ldr	r0, [pc, #352]	; (800d4f4 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d394:	f7ff f922 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d398:	2210      	movs	r2, #16
 800d39a:	4955      	ldr	r1, [pc, #340]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d39c:	4856      	ldr	r0, [pc, #344]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d39e:	f7ff f91d 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d3a2:	2220      	movs	r2, #32
 800d3a4:	4952      	ldr	r1, [pc, #328]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3a6:	4855      	ldr	r0, [pc, #340]	; (800d4fc <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d3a8:	f7ff f918 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d3ac:	2240      	movs	r2, #64	; 0x40
 800d3ae:	4950      	ldr	r1, [pc, #320]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3b0:	4853      	ldr	r0, [pc, #332]	; (800d500 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d3b2:	f7ff f913 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d3b6:	2280      	movs	r2, #128	; 0x80
 800d3b8:	494d      	ldr	r1, [pc, #308]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ba:	4852      	ldr	r0, [pc, #328]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d3bc:	f7ff f90e 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d3c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3c4:	494a      	ldr	r1, [pc, #296]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3c6:	4850      	ldr	r0, [pc, #320]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d3c8:	f7ff f908 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3d0:	4947      	ldr	r1, [pc, #284]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3d2:	484e      	ldr	r0, [pc, #312]	; (800d50c <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d3d4:	f7ff f902 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3dc:	4944      	ldr	r1, [pc, #272]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3de:	484c      	ldr	r0, [pc, #304]	; (800d510 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d3e0:	f7ff f8fc 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d3e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3e8:	4941      	ldr	r1, [pc, #260]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ea:	484a      	ldr	r0, [pc, #296]	; (800d514 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d3ec:	f7ff f8f6 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d3f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3f4:	493e      	ldr	r1, [pc, #248]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3f6:	4848      	ldr	r0, [pc, #288]	; (800d518 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d3f8:	f7ff f8f0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d3fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d400:	493b      	ldr	r1, [pc, #236]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d402:	4846      	ldr	r0, [pc, #280]	; (800d51c <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d404:	f7ff f8ea 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d408:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d40c:	4938      	ldr	r1, [pc, #224]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d40e:	4844      	ldr	r0, [pc, #272]	; (800d520 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d410:	f7ff f8e4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d418:	4935      	ldr	r1, [pc, #212]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d41a:	4842      	ldr	r0, [pc, #264]	; (800d524 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d41c:	f7ff f8de 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d420:	2201      	movs	r2, #1
 800d422:	4941      	ldr	r1, [pc, #260]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d424:	4841      	ldr	r0, [pc, #260]	; (800d52c <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d426:	f7ff f8d9 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d42a:	2202      	movs	r2, #2
 800d42c:	493e      	ldr	r1, [pc, #248]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d42e:	4840      	ldr	r0, [pc, #256]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d430:	f7ff f8d4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d434:	2204      	movs	r2, #4
 800d436:	493c      	ldr	r1, [pc, #240]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d438:	483e      	ldr	r0, [pc, #248]	; (800d534 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d43a:	f7ff f8cf 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d43e:	2208      	movs	r2, #8
 800d440:	4939      	ldr	r1, [pc, #228]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d442:	483d      	ldr	r0, [pc, #244]	; (800d538 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d444:	f7ff f8ca 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d448:	2210      	movs	r2, #16
 800d44a:	4937      	ldr	r1, [pc, #220]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d44c:	483b      	ldr	r0, [pc, #236]	; (800d53c <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d44e:	f7ff f8c5 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d452:	2220      	movs	r2, #32
 800d454:	4934      	ldr	r1, [pc, #208]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d456:	483a      	ldr	r0, [pc, #232]	; (800d540 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d458:	f7ff f8c0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d45c:	2240      	movs	r2, #64	; 0x40
 800d45e:	4932      	ldr	r1, [pc, #200]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d460:	4838      	ldr	r0, [pc, #224]	; (800d544 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d462:	f7ff f8bb 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d466:	2280      	movs	r2, #128	; 0x80
 800d468:	492f      	ldr	r1, [pc, #188]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d46a:	4837      	ldr	r0, [pc, #220]	; (800d548 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d46c:	f7ff f8b6 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d470:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d474:	492c      	ldr	r1, [pc, #176]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d476:	4835      	ldr	r0, [pc, #212]	; (800d54c <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d478:	f7ff f8b0 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d47c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d480:	4929      	ldr	r1, [pc, #164]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d482:	4833      	ldr	r0, [pc, #204]	; (800d550 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d484:	f7ff f8aa 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d48c:	4926      	ldr	r1, [pc, #152]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d48e:	4831      	ldr	r0, [pc, #196]	; (800d554 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d490:	f7ff f8a4 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d498:	4923      	ldr	r1, [pc, #140]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d49a:	482f      	ldr	r0, [pc, #188]	; (800d558 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d49c:	f7ff f89e 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d4a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4a4:	4920      	ldr	r1, [pc, #128]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4a6:	482d      	ldr	r0, [pc, #180]	; (800d55c <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d4a8:	f7ff f898 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d4ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d4b0:	491d      	ldr	r1, [pc, #116]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4b2:	482b      	ldr	r0, [pc, #172]	; (800d560 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d4b4:	f7ff f892 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d4b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4bc:	491a      	ldr	r1, [pc, #104]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4be:	4829      	ldr	r0, [pc, #164]	; (800d564 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d4c0:	f7ff f88c 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4c8:	4917      	ldr	r1, [pc, #92]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4ca:	4827      	ldr	r0, [pc, #156]	; (800d568 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d4cc:	f7ff f886 	bl	800c5dc <_ZN3PinC1EP12GPIO_TypeDeft>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d107      	bne.n	800d4e6 <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d102      	bne.n	800d4e6 <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d4e0:	4822      	ldr	r0, [pc, #136]	; (800d56c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d4e2:	f000 f845 	bl	800d570 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4e6:	bf00      	nop
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	58021000 	.word	0x58021000
 800d4f4:	240003e8 	.word	0x240003e8
 800d4f8:	240003f0 	.word	0x240003f0
 800d4fc:	240003f8 	.word	0x240003f8
 800d500:	24000400 	.word	0x24000400
 800d504:	24000408 	.word	0x24000408
 800d508:	24000410 	.word	0x24000410
 800d50c:	24000418 	.word	0x24000418
 800d510:	24000420 	.word	0x24000420
 800d514:	24000428 	.word	0x24000428
 800d518:	24000430 	.word	0x24000430
 800d51c:	24000438 	.word	0x24000438
 800d520:	24000440 	.word	0x24000440
 800d524:	24000448 	.word	0x24000448
 800d528:	58021400 	.word	0x58021400
 800d52c:	24000450 	.word	0x24000450
 800d530:	24000458 	.word	0x24000458
 800d534:	24000460 	.word	0x24000460
 800d538:	24000468 	.word	0x24000468
 800d53c:	24000470 	.word	0x24000470
 800d540:	24000478 	.word	0x24000478
 800d544:	24000480 	.word	0x24000480
 800d548:	24000488 	.word	0x24000488
 800d54c:	24000490 	.word	0x24000490
 800d550:	24000498 	.word	0x24000498
 800d554:	240004a0 	.word	0x240004a0
 800d558:	240004a8 	.word	0x240004a8
 800d55c:	240004b0 	.word	0x240004b0
 800d560:	240004b8 	.word	0x240004b8
 800d564:	240004c0 	.word	0x240004c0
 800d568:	240004c8 	.word	0x240004c8
 800d56c:	240001c4 	.word	0x240001c4

0800d570 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d570:	b5b0      	push	{r4, r5, r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681c      	ldr	r4, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fb62 	bl	800cc4c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d588:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d58a:	461a      	mov	r2, r3
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	f7ff fb67 	bl	800cc62 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff f87b 	bl	800c692 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bdb0      	pop	{r4, r5, r7, pc}

0800d5a6 <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	f7ff fcd8 	bl	800cf64 <_Z41__static_initialization_and_destruction_0ii>
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f7ff fcd0 	bl	800cf64 <_Z41__static_initialization_and_destruction_0ii>
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	609a      	str	r2, [r3, #8]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d60e:	b580      	push	{r7, lr}
 800d610:	b082      	sub	sp, #8
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d005      	beq.n	800d62a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	2203      	movs	r2, #3
 800d628:	4798      	blx	r3
    }
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	bf0c      	ite	eq
 800d644:	2301      	moveq	r3, #1
 800d646:	2300      	movne	r3, #0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	4618      	mov	r0, r3
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	ed87 0a02 	vstr	s0, [r7, #8]
 800d662:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d666:	ed97 7a02 	vldr	s14, [r7, #8]
 800d66a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d66e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	d501      	bpl.n	800d67c <_ZN5Timer3minEff+0x26>
			return n1;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	e000      	b.n	800d67e <_ZN5Timer3minEff+0x28>
		return n2;
 800d67c:	687b      	ldr	r3, [r7, #4]
	}
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eeb0 0a67 	vmov.f32	s0, s15
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <_ZN5Timer9interruptEv+0x16>
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d003      	beq.n	800d6ac <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d6a4:	e008      	b.n	800d6b8 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f96a 	bl	800d980 <_ZN5Timer5resetEv>
			current_func();
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f002 fcbc 	bl	801002e <_ZNKSt8functionIFvvEEclEv>
			break;
 800d6b6:	bf00      	nop
	}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e010      	b.n	800d6f6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d102      	bne.n	800d6e0 <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6de:	e00a      	b.n	800d6f6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d101      	bne.n	800d6ea <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d6e6:	4b07      	ldr	r3, [pc, #28]	; (800d704 <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d6e8:	e005      	b.n	800d6f6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d101      	bne.n	800d6f4 <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d6f0:	4b05      	ldr	r3, [pc, #20]	; (800d708 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d6f2:	e000      	b.n	800d6f6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d6f4:	2300      	movs	r3, #0
	}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	000f4240 	.word	0x000f4240
 800d708:	3b9aca00 	.word	0x3b9aca00

0800d70c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	f7ff ff79 	bl	800d60e <_ZNSt14_Function_baseD1Ev>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	3308      	adds	r3, #8
 800d736:	4618      	mov	r0, r3
 800d738:	f002 fc8f 	bl	801005a <_ZNSt8functionIFvvEEC1Ev>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	60fb      	str	r3, [r7, #12]
 800d746:	f107 030c 	add.w	r3, r7, #12
 800d74a:	4619      	mov	r1, r3
 800d74c:	4803      	ldr	r0, [pc, #12]	; (800d75c <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d74e:	f002 fc91 	bl	8010074 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	240001a0 	.word	0x240001a0

0800d760 <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d760:	b580      	push	{r7, lr}
 800d762:	b08a      	sub	sp, #40	; 0x28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff ffa0 	bl	800d6c0 <_ZN5Timer10to_secondsENS_5UNITSE>
 800d780:	4602      	mov	r2, r0
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	fbb2 f3f3 	udiv	r3, r2, r3
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d790:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d794:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d834 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d798:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d79c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d7a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7a8:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800d7ac:	eddf 0a22 	vldr	s1, [pc, #136]	; 800d838 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d7b0:	ed97 0a08 	vldr	s0, [r7, #32]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7ff ff4e 	bl	800d656 <_ZN5Timer3minEff>
 800d7ba:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d7be:	edd7 7a07 	vldr	s15, [r7, #28]
 800d7c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7c6:	ee17 2a90 	vmov	r2, s15
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3a01      	subs	r2, #1
 800d7d2:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7dc:	3301      	adds	r3, #1
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7e6:	eddf 6a13 	vldr	s13, [pc, #76]	; 800d834 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ee:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800d7f2:	edd7 6a06 	vldr	s13, [r7, #24]
 800d7f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fe:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800d802:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d838 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d806:	ed97 0a05 	vldr	s0, [r7, #20]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7ff ff23 	bl	800d656 <_ZN5Timer3minEff>
 800d810:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d814:	edd7 7a04 	vldr	s15, [r7, #16]
 800d818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81c:	ee17 2a90 	vmov	r2, s15
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3a01      	subs	r2, #1
 800d828:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d82a:	bf00      	nop
 800d82c:	3728      	adds	r7, #40	; 0x28
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	4d832156 	.word	0x4d832156
 800d838:	47800000 	.word	0x47800000

0800d83c <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2200      	movs	r2, #0
 800d84e:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d8fc <_ZN5Timer13set_frequencyEm+0xc0>
 800d85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d862:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d86a:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800d86e:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d900 <_ZN5Timer13set_frequencyEm+0xc4>
 800d872:	ed97 0a07 	vldr	s0, [r7, #28]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff feed 	bl	800d656 <_ZN5Timer3minEff>
 800d87c:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d880:	edd7 7a06 	vldr	s15, [r7, #24]
 800d884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d888:	ee17 2a90 	vmov	r2, s15
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3a01      	subs	r2, #1
 800d894:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89e:	3301      	adds	r3, #1
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8a8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800d8fc <_ZN5Timer13set_frequencyEm+0xc0>
 800d8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8b0:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	ee07 3a90 	vmov	s15, r3
 800d8ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8be:	edd7 6a05 	vldr	s13, [r7, #20]
 800d8c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8c6:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800d8ca:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d900 <_ZN5Timer13set_frequencyEm+0xc4>
 800d8ce:	ed97 0a04 	vldr	s0, [r7, #16]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff febf 	bl	800d656 <_ZN5Timer3minEff>
 800d8d8:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d8dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e4:	ee17 2a90 	vmov	r2, s15
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	3a01      	subs	r2, #1
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d8f2:	bf00      	nop
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	4d832156 	.word	0x4d832156
 800d900:	47800000 	.word	0x47800000

0800d904 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2201      	movs	r2, #1
 800d916:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	78fa      	ldrb	r2, [r7, #3]
 800d91c:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3308      	adds	r3, #8
 800d922:	68b9      	ldr	r1, [r7, #8]
 800d924:	4618      	mov	r0, r3
 800d926:	f002 fbb6 	bl	8010096 <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	461a      	mov	r2, r3
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff ff15 	bl	800d760 <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	699b      	ldr	r3, [r3, #24]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f011 f9ec 	bl	801ed18 <HAL_TIM_Base_Start_IT>
	}
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2201      	movs	r2, #1
 800d958:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3308      	adds	r3, #8
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	4618      	mov	r0, r3
 800d962:	f002 fb98 	bl	8010096 <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff ff67 	bl	800d83c <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	4618      	mov	r0, r3
 800d974:	f011 f9d0 	bl	801ed18 <HAL_TIM_Base_Start_IT>
	}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <_ZN5Timer5resetEv>:

	void reset(){
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f011 fa49 	bl	801ee24 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	701a      	strb	r2, [r3, #0]
	}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <_ZN5Timer14stop_interruptEv>:

	void stop_interrupt(){
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f011 fa39 	bl	801ee24 <HAL_TIM_Base_Stop_IT>
	}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <_ZN5Timer15start_interruptEv>:

	void start_interrupt(){
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b082      	sub	sp, #8
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Start_IT(timer);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f011 f9a6 	bl	801ed18 <HAL_TIM_Base_Start_IT>
	}
 800d9cc:	bf00      	nop
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d9ea:	b590      	push	{r4, r7, lr}
 800d9ec:	b083      	sub	sp, #12
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff ffed 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	681c      	ldr	r4, [r3, #0]
 800d9fe:	6838      	ldr	r0, [r7, #0]
 800da00:	f7ff ffe8 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800da04:	4603      	mov	r3, r0
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	429c      	cmp	r4, r3
 800da0a:	bf0c      	ite	eq
 800da0c:	2301      	moveq	r3, #1
 800da0e:	2300      	movne	r3, #0
 800da10:	b2db      	uxtb	r3, r3
 800da12:	4618      	mov	r0, r3
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	bd90      	pop	{r4, r7, pc}

0800da1a <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
	++_M_current;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	1d1a      	adds	r2, r3, #4
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	601a      	str	r2, [r3, #0]
	return *this;
 800da2c:	687b      	ldr	r3, [r7, #4]
      }
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4618      	mov	r0, r3
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
	...

0800da54 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800da5c:	4b19      	ldr	r3, [pc, #100]	; (800dac4 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800da5e:	617b      	str	r3, [r7, #20]
 800da60:	6978      	ldr	r0, [r7, #20]
 800da62:	f002 fb33 	bl	80100cc <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800da66:	4603      	mov	r3, r0
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	6978      	ldr	r0, [r7, #20]
 800da6c:	f002 fb3e 	bl	80100ec <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800da70:	4603      	mov	r3, r0
 800da72:	60bb      	str	r3, [r7, #8]
 800da74:	f107 0208 	add.w	r2, r7, #8
 800da78:	f107 030c 	add.w	r3, r7, #12
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff ffb3 	bl	800d9ea <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800da84:	4603      	mov	r3, r0
 800da86:	f083 0301 	eor.w	r3, r3, #1
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d015      	beq.n	800dabc <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800da90:	f107 030c 	add.w	r3, r7, #12
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff ffd0 	bl	800da3a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800da9a:	4603      	mov	r3, r0
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d102      	bne.n	800dab0 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800daaa:	6938      	ldr	r0, [r7, #16]
 800daac:	f7ff fdf0 	bl	800d690 <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800dab0:	f107 030c 	add.w	r3, r7, #12
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff ffb0 	bl	800da1a <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800daba:	e7db      	b.n	800da74 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800dabc:	bf00      	nop
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	240001a0 	.word	0x240001a0

0800dac8 <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	ed87 0a01 	vstr	s0, [r7, #4]
 800dad6:	edc7 0a00 	vstr	s1, [r7]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	609a      	str	r2, [r3, #8]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	60da      	str	r2, [r3, #12]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	611a      	str	r2, [r3, #16]
		do_scale = true;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2201      	movs	r2, #1
 800daf6:	751a      	strb	r2, [r3, #20]
		size = precision_mode;
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <_ZN13StreamMessageC1EPfff+0x48>)
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	605a      	str	r2, [r3, #4]
	}
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	24000001 	.word	0x24000001

0800db14 <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	611a      	str	r2, [r3, #16]
		do_scale = false;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	751a      	strb	r2, [r3, #20]
		size = 1;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	605a      	str	r2, [r3, #4]
	}
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7d1b      	ldrb	r3, [r3, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d03f      	beq.n	800dbd6 <_ZN13StreamMessage7unparseEPh+0x92>
			if(ic != nullptr)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d004      	beq.n	800db68 <_ZN13StreamMessage7unparseEPh+0x24>
				ic->get_duty();
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f7fb fe50 	bl	8009808 <_ZN12InputCapture8get_dutyEv>
			float scale = (*((float*) ptr) - min) / (max - min);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	ed93 7a00 	vldr	s14, [r3]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	edd3 7a02 	vldr	s15, [r3, #8]
 800db76:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	ed93 7a03 	vldr	s14, [r3, #12]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	edd3 7a02 	vldr	s15, [r3, #8]
 800db86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db8e:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	b2db      	uxtb	r3, r3
 800db98:	74fb      	strb	r3, [r7, #19]
 800db9a:	f107 0313 	add.w	r3, r7, #19
 800db9e:	4619      	mov	r1, r3
 800dba0:	4813      	ldr	r0, [pc, #76]	; (800dbf0 <_ZN13StreamMessage7unparseEPh+0xac>)
 800dba2:	f002 fab5 	bl	8010110 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800dba6:	4603      	mov	r3, r0
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	ee07 3a90 	vmov	s15, r3
 800dbae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dbb2:	edd7 7a05 	vldr	s15, [r7, #20]
 800dbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbbe:	ee17 3a90 	vmov	r3, s15
 800dbc2:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	f107 030c 	add.w	r3, r7, #12
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6838      	ldr	r0, [r7, #0]
 800dbd0:	f013 f8be 	bl	8020d50 <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800dbd4:	e007      	b.n	800dbe6 <_ZN13StreamMessage7unparseEPh+0xa2>
			memcpy(d, ptr, size);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6919      	ldr	r1, [r3, #16]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6838      	ldr	r0, [r7, #0]
 800dbe2:	f013 f8b5 	bl	8020d50 <memcpy>
	}
 800dbe6:	bf00      	nop
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	24000188 	.word	0x24000188

0800dbf4 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800dbfc:	2018      	movs	r0, #24
 800dbfe:	f012 ff7b 	bl	8020af8 <_Znwj>
 800dc02:	4603      	mov	r3, r0
 800dc04:	461c      	mov	r4, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3314      	adds	r3, #20
 800dc0a:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dc24 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800dc0e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dc28 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800dc12:	4619      	mov	r1, r3
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff ff57 	bl	800dac8 <_ZN13StreamMessageC1EPfff>
 800dc1a:	4623      	mov	r3, r4
	}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd90      	pop	{r4, r7, pc}
 800dc24:	40533333 	.word	0x40533333
 800dc28:	00000000 	.word	0x00000000

0800dc2c <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800dc2c:	b590      	push	{r4, r7, lr}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800dc34:	2018      	movs	r0, #24
 800dc36:	f012 ff5f 	bl	8020af8 <_Znwj>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	461c      	mov	r4, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	3308      	adds	r3, #8
 800dc42:	4619      	mov	r1, r3
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7ff ff65 	bl	800db14 <_ZN13StreamMessageC1EPh>
 800dc4a:	4623      	mov	r3, r4
	}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}

0800dc54 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800dc54:	b590      	push	{r4, r7, lr}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
		StreamMessage* sm = new StreamMessage(&in->duty, 0, 100);
 800dc5c:	2018      	movs	r0, #24
 800dc5e:	f012 ff4b 	bl	8020af8 <_Znwj>
 800dc62:	4603      	mov	r3, r0
 800dc64:	461c      	mov	r4, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3324      	adds	r3, #36	; 0x24
 800dc6a:	eddf 0a08 	vldr	s1, [pc, #32]	; 800dc8c <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x38>
 800dc6e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dc90 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x3c>
 800dc72:	4619      	mov	r1, r3
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7ff ff27 	bl	800dac8 <_ZN13StreamMessageC1EPfff>
 800dc7a:	60fc      	str	r4, [r7, #12]
		sm->ic = in;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	601a      	str	r2, [r3, #0]
		return sm;
 800dc82:	68fb      	ldr	r3, [r7, #12]
	}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd90      	pop	{r4, r7, pc}
 800dc8c:	42c80000 	.word	0x42c80000
 800dc90:	00000000 	.word	0x00000000

0800dc94 <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	799b      	ldrb	r3, [r3, #6]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d112      	bne.n	800dccc <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800dca6:	463b      	mov	r3, r7
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4822      	ldr	r0, [pc, #136]	; (800dd34 <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800dcac:	f7f2 fe58 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff ff9d 	bl	800dbf4 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	f107 030c 	add.w	r3, r7, #12
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f002 fa83 	bl	80101d0 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800dcca:	e02e      	b.n	800dd2a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	799b      	ldrb	r3, [r3, #6]
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d112      	bne.n	800dcfa <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4817      	ldr	r0, [pc, #92]	; (800dd38 <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800dcda:	f7f8 fcff 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dcde:	4603      	mov	r3, r0
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff ffa2 	bl	800dc2c <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800dce8:	4603      	mov	r3, r0
 800dcea:	613b      	str	r3, [r7, #16]
 800dcec:	f107 0310 	add.w	r3, r7, #16
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f002 fa6c 	bl	80101d0 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dcf8:	e017      	b.n	800dd2a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	799b      	ldrb	r3, [r3, #6]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d112      	bne.n	800dd28 <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800dd02:	463b      	mov	r3, r7
 800dd04:	4619      	mov	r1, r3
 800dd06:	480d      	ldr	r0, [pc, #52]	; (800dd3c <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800dd08:	f7fb fe1e 	bl	8009948 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff ff9f 	bl	800dc54 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800dd16:	4603      	mov	r3, r0
 800dd18:	617b      	str	r3, [r7, #20]
 800dd1a:	f107 0314 	add.w	r3, r7, #20
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f002 fa55 	bl	80101d0 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dd26:	e000      	b.n	800dd2a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800dd28:	bf00      	nop
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	3718      	adds	r7, #24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	240000bc 	.word	0x240000bc
 800dd38:	2400011c 	.word	0x2400011c
 800dd3c:	24000164 	.word	0x24000164

0800dd40 <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	2b04      	cmp	r3, #4
 800dd4e:	d901      	bls.n	800dd54 <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e003      	b.n	800dd5c <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800dd54:	4a04      	ldr	r2, [pc, #16]	; (800dd68 <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800dd56:	79fb      	ldrb	r3, [r7, #7]
 800dd58:	7013      	strb	r3, [r2, #0]
		return true;
 800dd5a:	2301      	movs	r3, #1
	}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	24000001 	.word	0x24000001

0800dd6c <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dd6c:	b480      	push	{r7}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	bf0c      	ite	eq
 800dd80:	2301      	moveq	r3, #1
 800dd82:	2300      	movne	r3, #0
 800dd84:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	695a      	ldr	r2, [r3, #20]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	2b40      	cmp	r3, #64	; 0x40
 800dd90:	bf8c      	ite	hi
 800dd92:	2301      	movhi	r3, #1
 800dd94:	2300      	movls	r3, #0
 800dd96:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	bf0c      	ite	eq
 800dda2:	2301      	moveq	r3, #1
 800dda4:	2300      	movne	r3, #0
 800dda6:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	f083 0301 	eor.w	r3, r3, #1
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d108      	bne.n	800ddc6 <_ZN6Stream12is_availableEjj+0x5a>
 800ddb4:	7d7b      	ldrb	r3, [r7, #21]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <_ZN6Stream12is_availableEjj+0x5e>
 800ddba:	7dbb      	ldrb	r3, [r7, #22]
 800ddbc:	f083 0301 	eor.w	r3, r3, #1
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <_ZN6Stream12is_availableEjj+0x5e>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e000      	b.n	800ddcc <_ZN6Stream12is_availableEjj+0x60>
 800ddca:	2300      	movs	r3, #0
	}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	371c      	adds	r7, #28
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <_ZN6Stream16send_ok_responseEht>:

	void send_ok_response(uint8_t offset, uint16_t response_code){
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
 800dde4:	4613      	mov	r3, r2
 800dde6:	803b      	strh	r3, [r7, #0]
		can->TxData[0] = Can::Ok;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	7e12      	ldrb	r2, [r2, #24]
 800ddfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	78fa      	ldrb	r2, [r7, #3]
 800de04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(response_code, 3);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	8839      	ldrh	r1, [r7, #0]
 800de0e:	2203      	movs	r2, #3
 800de10:	4618      	mov	r0, r3
 800de12:	f7f6 ffad 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <_ZN6Stream5emptyEh>:

	bool empty(uint8_t offset){
 800de1e:	b590      	push	{r4, r7, lr}
 800de20:	b08b      	sub	sp, #44	; 0x2c
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	460b      	mov	r3, r1
 800de28:	70fb      	strb	r3, [r7, #3]
		bool success = false;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		timer->stop_interrupt();
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	69db      	ldr	r3, [r3, #28]
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fdb3 	bl	800d9a0 <_ZN5Timer14stop_interruptEv>
		uint8_t current_offset = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		size_t i = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	623b      	str	r3, [r7, #32]

		while(i < messages.size()){
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3308      	adds	r3, #8
 800de48:	4618      	mov	r0, r3
 800de4a:	f002 f9d5 	bl	80101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 800de4e:	4602      	mov	r2, r0
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	4293      	cmp	r3, r2
 800de54:	bf34      	ite	cc
 800de56:	2301      	movcc	r3, #1
 800de58:	2300      	movcs	r3, #0
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d04e      	beq.n	800defe <_ZN6Stream5emptyEh+0xe0>
			StreamMessage* message = messages[i];
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3308      	adds	r3, #8
 800de64:	6a39      	ldr	r1, [r7, #32]
 800de66:	4618      	mov	r0, r3
 800de68:	f002 f9d6 	bl	8010218 <_ZNSt6vectorIP13StreamMessageSaIS1_EEixEj>
 800de6c:	4603      	mov	r3, r0
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	61fb      	str	r3, [r7, #28]
			size_t message_size = message->size;
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	61bb      	str	r3, [r7, #24]

			if(current_offset == offset || offset == 255){
 800de78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800de7c:	78fb      	ldrb	r3, [r7, #3]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d002      	beq.n	800de88 <_ZN6Stream5emptyEh+0x6a>
 800de82:	78fb      	ldrb	r3, [r7, #3]
 800de84:	2bff      	cmp	r3, #255	; 0xff
 800de86:	d12f      	bne.n	800dee8 <_ZN6Stream5emptyEh+0xca>
				messages.erase(messages.begin() + i);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f103 0408 	add.w	r4, r3, #8
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3308      	adds	r3, #8
 800de92:	4618      	mov	r0, r3
 800de94:	f002 f9d0 	bl	8010238 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800de98:	4603      	mov	r3, r0
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	6a3a      	ldr	r2, [r7, #32]
 800de9e:	f107 0314 	add.w	r3, r7, #20
 800dea2:	4611      	mov	r1, r2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f002 f9d7 	bl	8010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 800deaa:	4603      	mov	r3, r0
 800deac:	613b      	str	r3, [r7, #16]
 800deae:	f107 0210 	add.w	r2, r7, #16
 800deb2:	f107 030c 	add.w	r3, r7, #12
 800deb6:	4611      	mov	r1, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 f9e5 	bl	8010288 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800debe:	68f9      	ldr	r1, [r7, #12]
 800dec0:	4620      	mov	r0, r4
 800dec2:	f002 f9f2 	bl	80102aa <_ZNSt6vectorIP13StreamMessageSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
				this->size -= message_size;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	695a      	ldr	r2, [r3, #20]
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	1ad2      	subs	r2, r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	615a      	str	r2, [r3, #20]
				delete message;
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d003      	beq.n	800dee0 <_ZN6Stream5emptyEh+0xc2>
 800ded8:	2118      	movs	r1, #24
 800deda:	4618      	mov	r0, r3
 800dedc:	f012 fe0a 	bl	8020af4 <_ZdlPvj>
				success = true;
 800dee0:	2301      	movs	r3, #1
 800dee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dee6:	e002      	b.n	800deee <_ZN6Stream5emptyEh+0xd0>
			}else{
				i++;
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	3301      	adds	r3, #1
 800deec:	623b      	str	r3, [r7, #32]
			}
			current_offset += message_size;
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	b2da      	uxtb	r2, r3
 800def2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800def6:	4413      	add	r3, r2
 800def8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(i < messages.size()){
 800defc:	e7a2      	b.n	800de44 <_ZN6Stream5emptyEh+0x26>
		}

		if(this->size != 0){
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d005      	beq.n	800df12 <_ZN6Stream5emptyEh+0xf4>
			timer->start_interrupt();
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	69db      	ldr	r3, [r3, #28]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff fd55 	bl	800d9ba <_ZN5Timer15start_interruptEv>
 800df10:	e00d      	b.n	800df2e <_ZN6Stream5emptyEh+0x110>
		}else{
			timer->reset();
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	69db      	ldr	r3, [r3, #28]
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff fd32 	bl	800d980 <_ZN5Timer5resetEv>
			state = FREE;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	701a      	strb	r2, [r3, #0]
			frequency = 0;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	605a      	str	r2, [r3, #4]
			size = 0;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	615a      	str	r2, [r3, #20]
		}

		return success;
 800df2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	}
 800df32:	4618      	mov	r0, r3
 800df34:	372c      	adds	r7, #44	; 0x2c
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}

0800df3a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b082      	sub	sp, #8
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f002 f9e8 	bl	8010318 <_ZNSaIP13StreamMessageED1Ev>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f002 f9cb 	bl	80102f8 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff ffeb 	bl	800df52 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
	...

0800df88 <_ZN6StreamC1EP5TimerP3Can>:

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3308      	adds	r3, #8
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff ffe4 	bl	800df6c <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	615a      	str	r2, [r3, #20]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	61da      	str	r2, [r3, #28]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	617b      	str	r3, [r7, #20]
 800dfba:	f107 0314 	add.w	r3, r7, #20
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4808      	ldr	r0, [pc, #32]	; (800dfe4 <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800dfc2:	f002 f9e8 	bl	8010396 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800dfc6:	4b08      	ldr	r3, [pc, #32]	; (800dfe8 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800dfc8:	781a      	ldrb	r2, [r3, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	4b04      	ldr	r3, [pc, #16]	; (800dfe8 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800dfd8:	701a      	strb	r2, [r3, #0]
	}
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	2400017c 	.word	0x2400017c
 800dfe8:	24000000 	.word	0x24000000

0800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4618      	mov	r0, r3
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e002:	b590      	push	{r4, r7, lr}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff ffed 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800e012:	4603      	mov	r3, r0
 800e014:	681c      	ldr	r4, [r3, #0]
 800e016:	6838      	ldr	r0, [r7, #0]
 800e018:	f7ff ffe8 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800e01c:	4603      	mov	r3, r0
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	429c      	cmp	r4, r3
 800e022:	bf0c      	ite	eq
 800e024:	2301      	moveq	r3, #1
 800e026:	2300      	movne	r3, #0
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd90      	pop	{r4, r7, pc}

0800e032 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e032:	b480      	push	{r7}
 800e034:	b083      	sub	sp, #12
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	1d1a      	adds	r2, r3, #4
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	601a      	str	r2, [r3, #0]
	return *this;
 800e044:	687b      	ldr	r3, [r7, #4]
      }
 800e046:	4618      	mov	r0, r3
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e052:	b480      	push	{r7}
 800e054:	b083      	sub	sp, #12
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4618      	mov	r0, r3
 800e060:	370c      	adds	r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b088      	sub	sp, #32
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	3350      	adds	r3, #80	; 0x50
 800e07c:	2240      	movs	r2, #64	; 0x40
 800e07e:	21ff      	movs	r1, #255	; 0xff
 800e080:	4618      	mov	r0, r3
 800e082:	f012 fe8d 	bl	8020da0 <memset>
		for(auto message : messages){
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3308      	adds	r3, #8
 800e08a:	61bb      	str	r3, [r7, #24]
 800e08c:	69b8      	ldr	r0, [r7, #24]
 800e08e:	f002 f8d3 	bl	8010238 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800e092:	4603      	mov	r3, r0
 800e094:	613b      	str	r3, [r7, #16]
 800e096:	69b8      	ldr	r0, [r7, #24]
 800e098:	f002 f98e 	bl	80103b8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800e09c:	4603      	mov	r3, r0
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	f107 020c 	add.w	r2, r7, #12
 800e0a4:	f107 0310 	add.w	r3, r7, #16
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff ffa9 	bl	800e002 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	f083 0301 	eor.w	r3, r3, #1
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01b      	beq.n	800e0f4 <_ZN6Stream17send_all_messagesEv+0x8a>
 800e0bc:	f107 0310 	add.w	r3, r7, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff ffc6 	bl	800e052 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6a1a      	ldr	r2, [r3, #32]
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	3350      	adds	r3, #80	; 0x50
 800e0d4:	4413      	add	r3, r2
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6978      	ldr	r0, [r7, #20]
 800e0da:	f7ff fd33 	bl	800db44 <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800e0e8:	f107 0310 	add.w	r3, r7, #16
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff ffa0 	bl	800e032 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800e0f2:	e7d5      	b.n	800e0a0 <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, this->size);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a18      	ldr	r0, [r3, #32]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7e1b      	ldrb	r3, [r3, #24]
 800e0fc:	b299      	uxth	r1, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	695b      	ldr	r3, [r3, #20]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f6 fe34 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800e108:	bf00      	nop
 800e10a:	3720      	adds	r7, #32
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff ffa4 	bl	800e06a <_ZN6Stream17send_all_messagesEv>
 800e122:	bf00      	nop
 800e124:	3708      	adds	r7, #8
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <_ZN6Stream11add_messageEmP13StreamMessaget>:
	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
 800e12a:	b590      	push	{r4, r7, lr}
 800e12c:	b089      	sub	sp, #36	; 0x24
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	60b9      	str	r1, [r7, #8]
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	807b      	strh	r3, [r7, #2]
		messages.push_back(message);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3308      	adds	r3, #8
 800e13c:	1d3a      	adds	r2, r7, #4
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f002 f94a 	bl	80103da <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d117      	bne.n	800e17e <_ZN6Stream11add_messageEmP13StreamMessaget+0x54>
			state = OCCUPIED;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2201      	movs	r2, #1
 800e152:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	69dc      	ldr	r4, [r3, #28]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	f107 0310 	add.w	r3, r7, #16
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f002 f95f 	bl	8010424 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>
 800e166:	f107 0310 	add.w	r3, r7, #16
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4619      	mov	r1, r3
 800e16e:	4620      	mov	r0, r4
 800e170:	f7ff fbea 	bl	800d948 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e174:	f107 0310 	add.w	r3, r7, #16
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fac7 	bl	800d70c <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	605a      	str	r2, [r3, #4]
		send_ok_response(size, response_code);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	887a      	ldrh	r2, [r7, #2]
 800e18c:	4619      	mov	r1, r3
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7ff fe22 	bl	800ddd8 <_ZN6Stream16send_ok_responseEht>
 		size += message->size;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	695a      	ldr	r2, [r3, #20]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	441a      	add	r2, r3
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	615a      	str	r2, [r3, #20]
	}
 800e1a2:	bf00      	nop
 800e1a4:	3724      	adds	r7, #36	; 0x24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd90      	pop	{r4, r7, pc}

0800e1aa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e1aa:	b480      	push	{r7}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	791b      	ldrb	r3, [r3, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff ffed 	bl	800e1aa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e1d0:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d004      	beq.n	800e1e0 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f002 f95a 	bl	8010490 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e1dc:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e1de:	e001      	b.n	800e1e4 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e1e0:	f7f6 fc03 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr

0800e202 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e202:	b590      	push	{r4, r7, lr}
 800e204:	b083      	sub	sp, #12
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ffed 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e212:	4603      	mov	r3, r0
 800e214:	681c      	ldr	r4, [r3, #0]
 800e216:	6838      	ldr	r0, [r7, #0]
 800e218:	f7ff ffe8 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e21c:	4603      	mov	r3, r0
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	429c      	cmp	r4, r3
 800e222:	bf0c      	ite	eq
 800e224:	2301      	moveq	r3, #1
 800e226:	2300      	movne	r3, #0
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	4618      	mov	r0, r3
 800e22c:	370c      	adds	r7, #12
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd90      	pop	{r4, r7, pc}

0800e232 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e232:	b480      	push	{r7}
 800e234:	b083      	sub	sp, #12
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	1d1a      	adds	r2, r3, #4
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	601a      	str	r2, [r3, #0]
	return *this;
 800e244:	687b      	ldr	r3, [r7, #4]
      }
 800e246:	4618      	mov	r0, r3
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e252:	b480      	push	{r7}
 800e254:	b083      	sub	sp, #12
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4618      	mov	r0, r3
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
	...

0800e26c <_ZN6Stream10add_streamEjP3Pint>:

	static bool add_stream(unsigned int frequency, Pin* pin, uint16_t response_code) {
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08c      	sub	sp, #48	; 0x30
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	4613      	mov	r3, r2
 800e278:	80fb      	strh	r3, [r7, #6]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e27a:	f107 031c 	add.w	r3, r7, #28
 800e27e:	68b9      	ldr	r1, [r7, #8]
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fd07 	bl	800dc94 <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e286:	f107 031c 	add.w	r3, r7, #28
 800e28a:	4618      	mov	r0, r3
 800e28c:	f002 f8f4 	bl	8010478 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d041      	beq.n	800e31a <_ZN6Stream10add_streamEjP3Pint+0xae>
			StreamMessage* message = message_optional.value();
 800e296:	f107 031c 	add.w	r3, r7, #28
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7ff ff91 	bl	800e1c2 <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(auto s : streams){
 800e2a6:	4b1f      	ldr	r3, [pc, #124]	; (800e324 <_ZN6Stream10add_streamEjP3Pint+0xb8>)
 800e2a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2ac:	f002 f8fd 	bl	80104aa <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	61bb      	str	r3, [r7, #24]
 800e2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2b6:	f002 f908 	bl	80104ca <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	f107 0214 	add.w	r2, r7, #20
 800e2c2:	f107 0318 	add.w	r3, r7, #24
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7ff ff9a 	bl	800e202 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	f083 0301 	eor.w	r3, r3, #1
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d01f      	beq.n	800e31a <_ZN6Stream10add_streamEjP3Pint+0xae>
 800e2da:	f107 0318 	add.w	r3, r7, #24
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff ffb7 	bl	800e252 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
				if(s->is_available(frequency, message->size)){
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	68f9      	ldr	r1, [r7, #12]
 800e2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2f4:	f7ff fd3a 	bl	800dd6c <_ZN6Stream12is_availableEjj>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <_ZN6Stream10add_streamEjP3Pint+0xa2>
					s->add_message(frequency, message, response_code);
 800e2fe:	88fb      	ldrh	r3, [r7, #6]
 800e300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e302:	68f9      	ldr	r1, [r7, #12]
 800e304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e306:	f7ff ff10 	bl	800e12a <_ZN6Stream11add_messageEmP13StreamMessaget>
					return true;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e006      	b.n	800e31c <_ZN6Stream10add_streamEjP3Pint+0xb0>
			for(auto s : streams){
 800e30e:	f107 0318 	add.w	r3, r7, #24
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff ff8d 	bl	800e232 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e318:	e7d1      	b.n	800e2be <_ZN6Stream10add_streamEjP3Pint+0x52>
				}
			}
		}
		return false;
 800e31a:	2300      	movs	r3, #0
	}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3730      	adds	r7, #48	; 0x30
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	2400017c 	.word	0x2400017c

0800e328 <_ZN6Stream5emptyEhh>:

	static bool empty(uint8_t id, uint8_t offset) {
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	460a      	mov	r2, r1
 800e332:	71fb      	strb	r3, [r7, #7]
 800e334:	4613      	mov	r3, r2
 800e336:	71bb      	strb	r3, [r7, #6]
		int succes_count = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	61fb      	str	r3, [r7, #28]
		for(auto stream : streams) {
 800e33c:	4b21      	ldr	r3, [pc, #132]	; (800e3c4 <_ZN6Stream5emptyEhh+0x9c>)
 800e33e:	61bb      	str	r3, [r7, #24]
 800e340:	69b8      	ldr	r0, [r7, #24]
 800e342:	f002 f8b2 	bl	80104aa <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e346:	4603      	mov	r3, r0
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	69b8      	ldr	r0, [r7, #24]
 800e34c:	f002 f8bd 	bl	80104ca <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e350:	4603      	mov	r3, r0
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	f107 020c 	add.w	r2, r7, #12
 800e358:	f107 0310 	add.w	r3, r7, #16
 800e35c:	4611      	mov	r1, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff ff4f 	bl	800e202 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e364:	4603      	mov	r3, r0
 800e366:	f083 0301 	eor.w	r3, r3, #1
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01f      	beq.n	800e3b0 <_ZN6Stream5emptyEhh+0x88>
 800e370:	f107 0310 	add.w	r3, r7, #16
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff ff6c 	bl	800e252 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e37a:	4603      	mov	r3, r0
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	617b      	str	r3, [r7, #20]
			if(stream->id == id || id ==  255) {
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	7e1b      	ldrb	r3, [r3, #24]
 800e384:	79fa      	ldrb	r2, [r7, #7]
 800e386:	429a      	cmp	r2, r3
 800e388:	d002      	beq.n	800e390 <_ZN6Stream5emptyEhh+0x68>
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	2bff      	cmp	r3, #255	; 0xff
 800e38e:	d109      	bne.n	800e3a4 <_ZN6Stream5emptyEhh+0x7c>
				succes_count += stream->empty(offset);
 800e390:	79bb      	ldrb	r3, [r7, #6]
 800e392:	4619      	mov	r1, r3
 800e394:	6978      	ldr	r0, [r7, #20]
 800e396:	f7ff fd42 	bl	800de1e <_ZN6Stream5emptyEh>
 800e39a:	4603      	mov	r3, r0
 800e39c:	461a      	mov	r2, r3
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	61fb      	str	r3, [r7, #28]
		for(auto stream : streams) {
 800e3a4:	f107 0310 	add.w	r3, r7, #16
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff ff42 	bl	800e232 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e3ae:	e7d1      	b.n	800e354 <_ZN6Stream5emptyEhh+0x2c>
			}
		}
		return succes_count > 0;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	bfcc      	ite	gt
 800e3b6:	2301      	movgt	r3, #1
 800e3b8:	2300      	movle	r3, #0
 800e3ba:	b2db      	uxtb	r3, r3
	}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	2400017c 	.word	0x2400017c

0800e3c8 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e3cc:	f7fb f9a2 	bl	8009714 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e3d0:	f7f4 ffd8 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e3d4:	f7f2 f962 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e3d8:	f7f6 fc2e 	bl	8004c38 <_ZN3Can14start_all_cansEv>
}
 800e3dc:	bf00      	nop
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7fb f9c3 	bl	8009774 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e3fe:	f7f2 f97d 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e402:	bf00      	nop
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b082      	sub	sp, #8
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7ff fb1e 	bl	800da54 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e418:	bf00      	nop
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800e42a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e42e:	4805      	ldr	r0, [pc, #20]	; (800e444 <HAL_FDCAN_RxFifo0Callback+0x24>)
 800e430:	f00d f811 	bl	801b456 <HAL_GPIO_TogglePin>
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7f6 fdd0 	bl	8004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	58021800 	.word	0x58021800

0800e448 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	791b      	ldrb	r3, [r3, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff ffed 	bl	800e448 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e46e:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e470:	2b00      	cmp	r3, #0
 800e472:	d004      	beq.n	800e47e <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f002 f919 	bl	80106ac <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e47a:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e47c:	e001      	b.n	800e482 <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e47e:	f7f6 fab4 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <_Z23read_analog_in_callbackv>:

// MESSAGE CALLBACKS

void read_analog_in_callback(){
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e492:	4b14      	ldr	r3, [pc, #80]	; (800e4e4 <_Z23read_analog_in_callbackv+0x58>)
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	b29a      	uxth	r2, r3
 800e498:	1d3b      	adds	r3, r7, #4
 800e49a:	4611      	mov	r1, r2
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fe f8b9 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e4a2:	1d3b      	adds	r3, r7, #4
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f002 f8f5 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d016      	beq.n	800e4de <_Z23read_analog_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e4b0:	1d3b      	adds	r3, r7, #4
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff ffd4 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	603b      	str	r3, [r7, #0]
		AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e4be:	463b      	mov	r3, r7
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4809      	ldr	r0, [pc, #36]	; (800e4e8 <_Z23read_analog_in_callbackv+0x5c>)
 800e4c4:	f7f2 fa4c 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_ANALOG_IN_REPLY, (uint8_t*) &in->voltage, sizeof(float));
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	f103 0214 	add.w	r2, r3, #20
 800e4d4:	2304      	movs	r3, #4
 800e4d6:	215d      	movs	r1, #93	; 0x5d
 800e4d8:	4804      	ldr	r0, [pc, #16]	; (800e4ec <_Z23read_analog_in_callbackv+0x60>)
 800e4da:	f7f6 fbf1 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	24000b1c 	.word	0x24000b1c
 800e4e8:	240000bc 	.word	0x240000bc
 800e4ec:	24000a4c 	.word	0x24000a4c

0800e4f0 <_Z24read_digital_in_callbackv>:

void read_digital_in_callback(){
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <_Z24read_digital_in_callbackv+0x58>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	1d3b      	adds	r3, r7, #4
 800e4fe:	4611      	mov	r1, r2
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe f887 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e506:	1d3b      	adds	r3, r7, #4
 800e508:	4618      	mov	r0, r3
 800e50a:	f002 f8c3 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d016      	beq.n	800e542 <_Z24read_digital_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e514:	1d3b      	adds	r3, r7, #4
 800e516:	4618      	mov	r0, r3
 800e518:	f7ff ffa2 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e51c:	4603      	mov	r3, r0
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	603b      	str	r3, [r7, #0]
		DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e522:	463b      	mov	r3, r7
 800e524:	4619      	mov	r1, r3
 800e526:	4809      	ldr	r0, [pc, #36]	; (800e54c <_Z24read_digital_in_callbackv+0x5c>)
 800e528:	f7f8 f8d8 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e52c:	4603      	mov	r3, r0
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_DIGITAL_IN_REPLY, (uint8_t*) &in->state, sizeof(uint8_t));
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f103 0208 	add.w	r2, r3, #8
 800e538:	2301      	movs	r3, #1
 800e53a:	215e      	movs	r1, #94	; 0x5e
 800e53c:	4804      	ldr	r0, [pc, #16]	; (800e550 <_Z24read_digital_in_callbackv+0x60>)
 800e53e:	f7f6 fbbf 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	24000b1c 	.word	0x24000b1c
 800e54c:	2400011c 	.word	0x2400011c
 800e550:	24000a4c 	.word	0x24000a4c

0800e554 <_Z27read_input_capture_callbackv>:

int MSG_INDEX = 0;
void read_input_capture_callback(){
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
	MSG_INDEX += 1;
 800e55a:	4b18      	ldr	r3, [pc, #96]	; (800e5bc <_Z27read_input_capture_callbackv+0x68>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3301      	adds	r3, #1
 800e560:	4a16      	ldr	r2, [pc, #88]	; (800e5bc <_Z27read_input_capture_callbackv+0x68>)
 800e562:	6013      	str	r3, [r2, #0]
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e564:	4b16      	ldr	r3, [pc, #88]	; (800e5c0 <_Z27read_input_capture_callbackv+0x6c>)
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	b29a      	uxth	r2, r3
 800e56a:	1d3b      	adds	r3, r7, #4
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f850 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e574:	1d3b      	adds	r3, r7, #4
 800e576:	4618      	mov	r0, r3
 800e578:	f002 f88c 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d019      	beq.n	800e5b6 <_Z27read_input_capture_callbackv+0x62>
		Pin* pin = pin_optional.value();
 800e582:	1d3b      	adds	r3, r7, #4
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff ff6b 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e58a:	4603      	mov	r3, r0
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	603b      	str	r3, [r7, #0]
		InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e590:	463b      	mov	r3, r7
 800e592:	4619      	mov	r1, r3
 800e594:	480b      	ldr	r0, [pc, #44]	; (800e5c4 <_Z27read_input_capture_callbackv+0x70>)
 800e596:	f7fb f9d7 	bl	8009948 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e59a:	4603      	mov	r3, r0
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	60fb      	str	r3, [r7, #12]
		in->get_duty();
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7fb f931 	bl	8009808 <_ZN12InputCapture8get_dutyEv>
		main_can.send_message(ID_READ_INPUT_CAPTURE_REPLY, (uint8_t*) &in->duty, sizeof(float));
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	215c      	movs	r1, #92	; 0x5c
 800e5b0:	4805      	ldr	r0, [pc, #20]	; (800e5c8 <_Z27read_input_capture_callbackv+0x74>)
 800e5b2:	f7f6 fb85 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	24000cac 	.word	0x24000cac
 800e5c0:	24000b1c 	.word	0x24000b1c
 800e5c4:	24000164 	.word	0x24000164
 800e5c8:	24000a4c 	.word	0x24000a4c

0800e5cc <_Z29stream_input_capture_callbackv>:
			id = ID_STREAM_INPUT_CAPTURE_REPLY;
			main_can.send_error_message(id, "ERROR: all streams are full");
	}
}

void stream_input_capture_callback(){
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e5d2:	4b10      	ldr	r3, [pc, #64]	; (800e614 <_Z29stream_input_capture_callbackv+0x48>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	1d3b      	adds	r3, r7, #4
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fe f819 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e5e2:	1d3b      	adds	r3, r7, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f002 f855 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00d      	beq.n	800e60c <_Z29stream_input_capture_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e5f0:	1d3b      	adds	r3, r7, #4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff ff34 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_INPUT_CAPTURE_REPLY);
 800e5fe:	4b06      	ldr	r3, [pc, #24]	; (800e618 <_Z29stream_input_capture_callbackv+0x4c>)
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	225f      	movs	r2, #95	; 0x5f
 800e604:	68f9      	ldr	r1, [r7, #12]
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fe30 	bl	800e26c <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e60c:	bf00      	nop
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	24000b24 	.word	0x24000b24
 800e618:	24000b26 	.word	0x24000b26

0800e61c <_Z25strean_analog_in_callbackv>:

void strean_analog_in_callback(){
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e622:	4b10      	ldr	r3, [pc, #64]	; (800e664 <_Z25strean_analog_in_callbackv+0x48>)
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	b29a      	uxth	r2, r3
 800e628:	1d3b      	adds	r3, r7, #4
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fd fff1 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e632:	1d3b      	adds	r3, r7, #4
 800e634:	4618      	mov	r0, r3
 800e636:	f002 f82d 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00d      	beq.n	800e65c <_Z25strean_analog_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e640:	1d3b      	adds	r3, r7, #4
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff ff0c 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e648:	4603      	mov	r3, r0
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_ANALOG_IN_REPLY);
 800e64e:	4b06      	ldr	r3, [pc, #24]	; (800e668 <_Z25strean_analog_in_callbackv+0x4c>)
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	2260      	movs	r2, #96	; 0x60
 800e654:	68f9      	ldr	r1, [r7, #12]
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff fe08 	bl	800e26c <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e65c:	bf00      	nop
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	24000b24 	.word	0x24000b24
 800e668:	24000b26 	.word	0x24000b26

0800e66c <_Z26stream_digital_in_callbackv>:

void stream_digital_in_callback(){
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <_Z26stream_digital_in_callbackv+0x48>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	b29a      	uxth	r2, r3
 800e678:	1d3b      	adds	r3, r7, #4
 800e67a:	4611      	mov	r1, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd ffc9 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e682:	1d3b      	adds	r3, r7, #4
 800e684:	4618      	mov	r0, r3
 800e686:	f002 f805 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00d      	beq.n	800e6ac <_Z26stream_digital_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e690:	1d3b      	adds	r3, r7, #4
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fee4 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e698:	4603      	mov	r3, r0
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_DIGITAL_IN_REPLY);
 800e69e:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <_Z26stream_digital_in_callbackv+0x4c>)
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	2261      	movs	r2, #97	; 0x61
 800e6a4:	68f9      	ldr	r1, [r7, #12]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff fde0 	bl	800e26c <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e6ac:	bf00      	nop
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	24000b24 	.word	0x24000b24
 800e6b8:	24000b26 	.word	0x24000b26

0800e6bc <_Z19write_once_callbackv>:


void write_once_callback(){
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e6c2:	4b32      	ldr	r3, [pc, #200]	; (800e78c <_Z19write_once_callbackv+0xd0>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	f107 0308 	add.w	r3, r7, #8
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd ffa0 	bl	800c614 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e6d4:	f107 0308 	add.w	r3, r7, #8
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f001 ffdb 	bl	8010694 <_ZNKSt8optionalIP3PinEcvbEv>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d04a      	beq.n	800e77a <_Z19write_once_callbackv+0xbe>
		Pin* pin = pin_optional.value();
 800e6e4:	f107 0308 	add.w	r3, r7, #8
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff feb9 	bl	800e460 <_ZNRSt8optionalIP3PinE5valueEv>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	799b      	ldrb	r3, [r3, #6]
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	d109      	bne.n	800e710 <_Z19write_once_callbackv+0x54>
 800e6fc:	1d3b      	adds	r3, r7, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4823      	ldr	r0, [pc, #140]	; (800e790 <_Z19write_once_callbackv+0xd4>)
 800e702:	f001 ffe0 	bl	80106c6 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <_Z19write_once_callbackv+0x54>
 800e70c:	2301      	movs	r3, #1
 800e70e:	e000      	b.n	800e712 <_Z19write_once_callbackv+0x56>
 800e710:	2300      	movs	r3, #0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00f      	beq.n	800e736 <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e716:	1d3b      	adds	r3, r7, #4
 800e718:	4619      	mov	r1, r3
 800e71a:	481d      	ldr	r0, [pc, #116]	; (800e790 <_Z19write_once_callbackv+0xd4>)
 800e71c:	f7f9 fba4 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e720:	4603      	mov	r3, r0
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e726:	4b1b      	ldr	r3, [pc, #108]	; (800e794 <_Z19write_once_callbackv+0xd8>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	4619      	mov	r1, r3
 800e72e:	6938      	ldr	r0, [r7, #16]
 800e730:	f7f9 fae8 	bl	8007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			//main_can.send_message(ID_WRITE_DIGITAL_OUT,  0);
			return;
 800e734:	e026      	b.n	800e784 <_Z19write_once_callbackv+0xc8>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	799b      	ldrb	r3, [r3, #6]
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	d109      	bne.n	800e752 <_Z19write_once_callbackv+0x96>
 800e73e:	1d3b      	adds	r3, r7, #4
 800e740:	4619      	mov	r1, r3
 800e742:	4815      	ldr	r0, [pc, #84]	; (800e798 <_Z19write_once_callbackv+0xdc>)
 800e744:	f001 ffe1 	bl	801070a <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <_Z19write_once_callbackv+0x96>
 800e74e:	2301      	movs	r3, #1
 800e750:	e000      	b.n	800e754 <_Z19write_once_callbackv+0x98>
 800e752:	2300      	movs	r3, #0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d010      	beq.n	800e77a <_Z19write_once_callbackv+0xbe>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e758:	1d3b      	adds	r3, r7, #4
 800e75a:	4619      	mov	r1, r3
 800e75c:	480e      	ldr	r0, [pc, #56]	; (800e798 <_Z19write_once_callbackv+0xdc>)
 800e75e:	f7f4 febb 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e762:	4603      	mov	r3, r0
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <_Z19write_once_callbackv+0xd8>)
 800e76a:	edd3 7a00 	vldr	s15, [r3]
 800e76e:	eeb0 0a67 	vmov.f32	s0, s15
 800e772:	6978      	ldr	r0, [r7, #20]
 800e774:	f7f4 fd3e 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			//main_can.send_message(ID_WRITE_ANALOG_OUT,  0);
			return;
 800e778:	e004      	b.n	800e784 <_Z19write_once_callbackv+0xc8>
		}
	}

	main_can.send_error_message(ID_INFO_MESSAGE,  "Error:output pin not found");
 800e77a:	4a08      	ldr	r2, [pc, #32]	; (800e79c <_Z19write_once_callbackv+0xe0>)
 800e77c:	215b      	movs	r1, #91	; 0x5b
 800e77e:	4808      	ldr	r0, [pc, #32]	; (800e7a0 <_Z19write_once_callbackv+0xe4>)
 800e780:	f7f6 fb39 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e784:	3718      	adds	r7, #24
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	24000b1d 	.word	0x24000b1d
 800e790:	24000140 	.word	0x24000140
 800e794:	24000b20 	.word	0x24000b20
 800e798:	240000e0 	.word	0x240000e0
 800e79c:	080211e0 	.word	0x080211e0
 800e7a0:	24000a4c 	.word	0x24000a4c

0800e7a4 <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e7a8:	4b0b      	ldr	r3, [pc, #44]	; (800e7d8 <_Z22set_precision_callbackv+0x34>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7ff fac7 	bl	800dd40 <_ZN13StreamMessage18set_precision_modeEh>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e7b8:	4b08      	ldr	r3, [pc, #32]	; (800e7dc <_Z22set_precision_callbackv+0x38>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(ID_SET_PRECISION,1);
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	2159      	movs	r1, #89	; 0x59
 800e7c4:	4805      	ldr	r0, [pc, #20]	; (800e7dc <_Z22set_precision_callbackv+0x38>)
 800e7c6:	f7f6 fad3 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e7ca:	e004      	b.n	800e7d6 <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot change precision");
 800e7cc:	4a04      	ldr	r2, [pc, #16]	; (800e7e0 <_Z22set_precision_callbackv+0x3c>)
 800e7ce:	215b      	movs	r1, #91	; 0x5b
 800e7d0:	4802      	ldr	r0, [pc, #8]	; (800e7dc <_Z22set_precision_callbackv+0x38>)
 800e7d2:	f7f6 fb10 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	24000b28 	.word	0x24000b28
 800e7dc:	24000a4c 	.word	0x24000a4c
 800e7e0:	080211fc 	.word	0x080211fc

0800e7e4 <_Z22cancel_stream_callbackv>:

void cancel_stream_callback(){
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	af00      	add	r7, sp, #0
	if(!Stream::empty(cancel_stream_id, cancel_stream_offset))
 800e7e8:	4b0a      	ldr	r3, [pc, #40]	; (800e814 <_Z22cancel_stream_callbackv+0x30>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	4a0a      	ldr	r2, [pc, #40]	; (800e818 <_Z22cancel_stream_callbackv+0x34>)
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff fd98 	bl	800e328 <_ZN6Stream5emptyEhh>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	f083 0301 	eor.w	r3, r3, #1
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <_Z22cancel_stream_callbackv+0x2a>
		main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot delete message");
 800e804:	4a05      	ldr	r2, [pc, #20]	; (800e81c <_Z22cancel_stream_callbackv+0x38>)
 800e806:	215b      	movs	r1, #91	; 0x5b
 800e808:	4805      	ldr	r0, [pc, #20]	; (800e820 <_Z22cancel_stream_callbackv+0x3c>)
 800e80a:	f7f6 faf4 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e80e:	bf00      	nop
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	24000b29 	.word	0x24000b29
 800e818:	24000b2a 	.word	0x24000b2a
 800e81c:	0802121c 	.word	0x0802121c
 800e820:	24000a4c 	.word	0x24000a4c

0800e824 <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			//main_can.send_ok_message();
		}, 1000, Timer::MICROSEONDS);
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e840:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	6978      	ldr	r0, [r7, #20]
 800e846:	f7f8 fc92 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e84a:	4603      	mov	r3, r0
 800e84c:	60fb      	str	r3, [r7, #12]
 800e84e:	6978      	ldr	r0, [r7, #20]
 800e850:	f7f8 f972 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e854:	4603      	mov	r3, r0
 800e856:	60bb      	str	r3, [r7, #8]
 800e858:	f107 0208 	add.w	r2, r7, #8
 800e85c:	f107 030c 	add.w	r3, r7, #12
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f000 f81e 	bl	800e8a4 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e868:	4603      	mov	r3, r0
 800e86a:	f083 0301 	eor.w	r3, r3, #1
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d010      	beq.n	800e896 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e874:	f107 030c 	add.w	r3, r7, #12
 800e878:	4618      	mov	r0, r3
 800e87a:	f7f8 fd02 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e87e:	4603      	mov	r3, r0
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	613b      	str	r3, [r7, #16]
				in->get_value();
 800e884:	6938      	ldr	r0, [r7, #16]
 800e886:	f7f7 fe8f 	bl	80065a8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800e88a:	f107 030c 	add.w	r3, r7, #12
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 f820 	bl	800e8d4 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800e894:	e7e0      	b.n	800e858 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800e896:	bf00      	nop
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	24000110 	.word	0x24000110

0800e8a4 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7f8 fcaa 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	681c      	ldr	r4, [r3, #0]
 800e8b8:	6838      	ldr	r0, [r7, #0]
 800e8ba:	f7f8 fca5 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	429c      	cmp	r4, r3
 800e8c4:	bf0c      	ite	eq
 800e8c6:	2301      	moveq	r3, #1
 800e8c8:	2300      	movne	r3, #0
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}

0800e8d4 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	1d1a      	adds	r2, r3, #4
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	601a      	str	r2, [r3, #0]
	return *this;
 800e8e6:	687b      	ldr	r3, [r7, #4]
      }
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	370c      	adds	r7, #12
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800e8f4:	b5b0      	push	{r4, r5, r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
		start();
 800e8fa:	f7ff fd65 	bl	800e3c8 <_Z5startv>
		timer_7.execute_every([](){
 800e8fe:	463b      	mov	r3, r7
 800e900:	4629      	mov	r1, r5
 800e902:	4618      	mov	r0, r3
 800e904:	f001 ff24 	bl	8010750 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800e908:	4639      	mov	r1, r7
 800e90a:	2302      	movs	r3, #2
 800e90c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e910:	480e      	ldr	r0, [pc, #56]	; (800e94c <_ZN8TUDTests5setupEv+0x58>)
 800e912:	f7fe fff7 	bl	800d904 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e916:	463b      	mov	r3, r7
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe fef7 	bl	800d70c <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800e91e:	f107 0310 	add.w	r3, r7, #16
 800e922:	4621      	mov	r1, r4
 800e924:	4618      	mov	r0, r3
 800e926:	f001 ff3d 	bl	80107a4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800e92a:	f107 0110 	add.w	r1, r7, #16
 800e92e:	2302      	movs	r3, #2
 800e930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e934:	4806      	ldr	r0, [pc, #24]	; (800e950 <_ZN8TUDTests5setupEv+0x5c>)
 800e936:	f7fe ffe5 	bl	800d904 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e93a:	f107 0310 	add.w	r3, r7, #16
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fe fee4 	bl	800d70c <_ZNSt8functionIFvvEED1Ev>
	}
 800e944:	bf00      	nop
 800e946:	3720      	adds	r7, #32
 800e948:	46bd      	mov	sp, r7
 800e94a:	bdb0      	pop	{r4, r5, r7, pc}
 800e94c:	2400098c 	.word	0x2400098c
 800e950:	240009ac 	.word	0x240009ac

0800e954 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800e958:	bf00      	nop
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e966:	f006 ff31 	bl	80157cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e96a:	f000 f82f 	bl	800e9cc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800e96e:	f000 f8b5 	bl	800eadc <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e972:	f001 fa1b 	bl	800fdac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e976:	f001 f9f9 	bl	800fd6c <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800e97a:	f000 fef9 	bl	800f770 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800e97e:	f001 f875 	bl	800fa6c <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800e982:	f000 f9d5 	bl	800ed30 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800e986:	f000 fa93 	bl	800eeb0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800e98a:	f000 fb4f 	bl	800f02c <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800e98e:	f001 f92d 	bl	800fbec <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800e992:	f000 f963 	bl	800ec5c <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800e996:	f000 fc03 	bl	800f1a0 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800e99a:	f000 f8d7 	bl	800eb4c <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800e99e:	f000 fde9 	bl	800f574 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800e9a2:	f000 fd67 	bl	800f474 <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800e9a6:	f000 fcb5 	bl	800f314 <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800e9aa:	f000 fda3 	bl	800f4f4 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800e9ae:	f000 ff55 	bl	800f85c <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800e9b2:	f000 ff7b 	bl	800f8ac <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800e9b6:	f000 ffa1 	bl	800f8fc <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800e9ba:	f000 ffff 	bl	800f9bc <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800e9be:	f001 f829 	bl	800fa14 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800e9c2:	f7ff ff97 	bl	800e8f4 <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800e9c6:	f7ff ffc5 	bl	800e954 <_ZN8TUDTests4loopEv>
 800e9ca:	e7fc      	b.n	800e9c6 <main+0x64>

0800e9cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b09c      	sub	sp, #112	; 0x70
 800e9d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9d6:	224c      	movs	r2, #76	; 0x4c
 800e9d8:	2100      	movs	r1, #0
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f012 f9e0 	bl	8020da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e9e0:	1d3b      	adds	r3, r7, #4
 800e9e2:	2220      	movs	r2, #32
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f012 f9da 	bl	8020da0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e9ec:	2002      	movs	r0, #2
 800e9ee:	f00c fd4d 	bl	801b48c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	603b      	str	r3, [r7, #0]
 800e9f6:	4b37      	ldr	r3, [pc, #220]	; (800ead4 <_Z18SystemClock_Configv+0x108>)
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	4a36      	ldr	r2, [pc, #216]	; (800ead4 <_Z18SystemClock_Configv+0x108>)
 800e9fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ea00:	6193      	str	r3, [r2, #24]
 800ea02:	4b34      	ldr	r3, [pc, #208]	; (800ead4 <_Z18SystemClock_Configv+0x108>)
 800ea04:	699b      	ldr	r3, [r3, #24]
 800ea06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ea0e:	4b31      	ldr	r3, [pc, #196]	; (800ead4 <_Z18SystemClock_Configv+0x108>)
 800ea10:	699b      	ldr	r3, [r3, #24]
 800ea12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea1a:	bf14      	ite	ne
 800ea1c:	2301      	movne	r3, #1
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d000      	beq.n	800ea28 <_Z18SystemClock_Configv+0x5c>
 800ea26:	e7f2      	b.n	800ea0e <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800ea28:	4b2b      	ldr	r3, [pc, #172]	; (800ead8 <_Z18SystemClock_Configv+0x10c>)
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	f023 0303 	bic.w	r3, r3, #3
 800ea30:	4a29      	ldr	r2, [pc, #164]	; (800ead8 <_Z18SystemClock_Configv+0x10c>)
 800ea32:	f043 0302 	orr.w	r3, r3, #2
 800ea36:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ea42:	2302      	movs	r3, #2
 800ea44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea46:	2302      	movs	r3, #2
 800ea48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ea4a:	2304      	movs	r3, #4
 800ea4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800ea4e:	f240 1313 	movw	r3, #275	; 0x113
 800ea52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800ea54:	2301      	movs	r3, #1
 800ea56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ea58:	2304      	movs	r3, #4
 800ea5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800ea60:	2304      	movs	r3, #4
 800ea62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ea64:	2300      	movs	r3, #0
 800ea66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ea6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea70:	4618      	mov	r0, r3
 800ea72:	f00c fd45 	bl	801b500 <HAL_RCC_OscConfig>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800ea86:	f001 facd 	bl	8010024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ea8a:	233f      	movs	r3, #63	; 0x3f
 800ea8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ea96:	2308      	movs	r3, #8
 800ea98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ea9a:	2340      	movs	r3, #64	; 0x40
 800ea9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ea9e:	2340      	movs	r3, #64	; 0x40
 800eaa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800eaa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800eaa8:	2340      	movs	r3, #64	; 0x40
 800eaaa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	2103      	movs	r1, #3
 800eab0:	4618      	mov	r0, r3
 800eab2:	f00d f8ff 	bl	801bcb4 <HAL_RCC_ClockConfig>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bf14      	ite	ne
 800eabc:	2301      	movne	r3, #1
 800eabe:	2300      	moveq	r3, #0
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800eac6:	f001 faad 	bl	8010024 <Error_Handler>
  }
}
 800eaca:	bf00      	nop
 800eacc:	3770      	adds	r7, #112	; 0x70
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	58024800 	.word	0x58024800
 800ead8:	58024400 	.word	0x58024400

0800eadc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b0ae      	sub	sp, #184	; 0xb8
 800eae0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eae2:	463b      	mov	r3, r7
 800eae4:	22b8      	movs	r2, #184	; 0xb8
 800eae6:	2100      	movs	r1, #0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f012 f959 	bl	8020da0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800eaee:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800eaf2:	f04f 0300 	mov.w	r3, #0
 800eaf6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800eafa:	2301      	movs	r3, #1
 800eafc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800eafe:	231e      	movs	r3, #30
 800eb00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800eb02:	2304      	movs	r3, #4
 800eb04:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800eb06:	2304      	movs	r3, #4
 800eb08:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800eb0e:	23c0      	movs	r3, #192	; 0xc0
 800eb10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800eb12:	2300      	movs	r3, #0
 800eb14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800eb1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800eb1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800eb20:	2300      	movs	r3, #0
 800eb22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eb26:	463b      	mov	r3, r7
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f00d fc39 	bl	801c3a0 <HAL_RCCEx_PeriphCLKConfig>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bf14      	ite	ne
 800eb34:	2301      	movne	r3, #1
 800eb36:	2300      	moveq	r3, #0
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800eb3e:	f001 fa71 	bl	8010024 <Error_Handler>
  }
}
 800eb42:	bf00      	nop
 800eb44:	37b8      	adds	r7, #184	; 0xb8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08c      	sub	sp, #48	; 0x30
 800eb50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800eb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	605a      	str	r2, [r3, #4]
 800eb5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb5e:	463b      	mov	r3, r7
 800eb60:	2224      	movs	r2, #36	; 0x24
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f012 f91b 	bl	8020da0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800eb6a:	4b39      	ldr	r3, [pc, #228]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb6c:	4a39      	ldr	r2, [pc, #228]	; (800ec54 <_ZL12MX_ADC1_Initv+0x108>)
 800eb6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800eb70:	4b37      	ldr	r3, [pc, #220]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800eb76:	4b36      	ldr	r3, [pc, #216]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800eb7c:	4b34      	ldr	r3, [pc, #208]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800eb82:	4b33      	ldr	r3, [pc, #204]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb84:	2208      	movs	r2, #8
 800eb86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800eb88:	4b31      	ldr	r3, [pc, #196]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eb8e:	4b30      	ldr	r3, [pc, #192]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800eb94:	4b2e      	ldr	r3, [pc, #184]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb96:	2201      	movs	r2, #1
 800eb98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb9a:	4b2d      	ldr	r3, [pc, #180]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800eba2:	4b2b      	ldr	r3, [pc, #172]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800eba4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800eba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ebaa:	4b29      	ldr	r3, [pc, #164]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ebb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800ebb2:	4b27      	ldr	r3, [pc, #156]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebb4:	2203      	movs	r2, #3
 800ebb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ebb8:	4b25      	ldr	r3, [pc, #148]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800ebbe:	4b24      	ldr	r3, [pc, #144]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800ebc4:	4b22      	ldr	r3, [pc, #136]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ebcc:	4820      	ldr	r0, [pc, #128]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebce:	f007 f97b 	bl	8015ec8 <HAL_ADC_Init>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bf14      	ite	ne
 800ebd8:	2301      	movne	r3, #1
 800ebda:	2300      	moveq	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800ebe2:	f001 fa1f 	bl	8010024 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ebea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4817      	ldr	r0, [pc, #92]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ebf2:	f008 fe35 	bl	8017860 <HAL_ADCEx_MultiModeConfigChannel>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	bf14      	ite	ne
 800ebfc:	2301      	movne	r3, #1
 800ebfe:	2300      	moveq	r3, #0
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800ec06:	f001 fa0d 	bl	8010024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ec0a:	4b13      	ldr	r3, [pc, #76]	; (800ec58 <_ZL12MX_ADC1_Initv+0x10c>)
 800ec0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ec0e:	2306      	movs	r3, #6
 800ec10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ec12:	2300      	movs	r3, #0
 800ec14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ec16:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ec1a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ec1c:	2304      	movs	r3, #4
 800ec1e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec2a:	463b      	mov	r3, r7
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	4808      	ldr	r0, [pc, #32]	; (800ec50 <_ZL12MX_ADC1_Initv+0x104>)
 800ec30:	f007 fe86 	bl	8016940 <HAL_ADC_ConfigChannel>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bf14      	ite	ne
 800ec3a:	2301      	movne	r3, #1
 800ec3c:	2300      	moveq	r3, #0
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800ec44:	f001 f9ee 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ec48:	bf00      	nop
 800ec4a:	3730      	adds	r7, #48	; 0x30
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	24000cb0 	.word	0x24000cb0
 800ec54:	40022000 	.word	0x40022000
 800ec58:	0c900008 	.word	0x0c900008

0800ec5c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ec60:	4b31      	ldr	r3, [pc, #196]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec62:	4a32      	ldr	r2, [pc, #200]	; (800ed2c <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ec64:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ec66:	4b30      	ldr	r3, [pc, #192]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec68:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ec6c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800ec6e:	4b2e      	ldr	r3, [pc, #184]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800ec74:	4b2c      	ldr	r3, [pc, #176]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800ec7a:	4b2b      	ldr	r3, [pc, #172]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800ec80:	4b29      	ldr	r3, [pc, #164]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800ec86:	4b28      	ldr	r3, [pc, #160]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec88:	2203      	movs	r2, #3
 800ec8a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800ec8c:	4b26      	ldr	r3, [pc, #152]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec8e:	2202      	movs	r2, #2
 800ec90:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800ec92:	4b25      	ldr	r3, [pc, #148]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec94:	220f      	movs	r2, #15
 800ec96:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800ec98:	4b23      	ldr	r3, [pc, #140]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ec9a:	2204      	movs	r2, #4
 800ec9c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800ec9e:	4b22      	ldr	r3, [pc, #136]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eca0:	2203      	movs	r2, #3
 800eca2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800eca4:	4b20      	ldr	r3, [pc, #128]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eca6:	2201      	movs	r2, #1
 800eca8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800ecaa:	4b1f      	ldr	r3, [pc, #124]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecac:	2203      	movs	r2, #3
 800ecae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800ecb0:	4b1d      	ldr	r3, [pc, #116]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800ecb6:	4b1c      	ldr	r3, [pc, #112]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800ecbc:	4b1a      	ldr	r3, [pc, #104]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800ecc2:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800ecc8:	4b17      	ldr	r3, [pc, #92]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecca:	2220      	movs	r2, #32
 800eccc:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800ecce:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecd0:	2212      	movs	r2, #18
 800ecd2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800ecd4:	4b14      	ldr	r3, [pc, #80]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800ecda:	4b13      	ldr	r3, [pc, #76]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecdc:	2204      	movs	r2, #4
 800ecde:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800ece0:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800ece6:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ece8:	2204      	movs	r2, #4
 800ecea:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800ecec:	4b0e      	ldr	r3, [pc, #56]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800ecf2:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800ecf8:	4b0b      	ldr	r3, [pc, #44]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ecfa:	2220      	movs	r2, #32
 800ecfc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800ed04:	4b08      	ldr	r3, [pc, #32]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ed06:	2212      	movs	r2, #18
 800ed08:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800ed0a:	4807      	ldr	r0, [pc, #28]	; (800ed28 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ed0c:	f00b f870 	bl	8019df0 <HAL_FDCAN_Init>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	bf14      	ite	ne
 800ed16:	2301      	movne	r3, #1
 800ed18:	2300      	moveq	r3, #0
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800ed20:	f001 f980 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800ed24:	bf00      	nop
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	24000d98 	.word	0x24000d98
 800ed2c:	4000a000 	.word	0x4000a000

0800ed30 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08c      	sub	sp, #48	; 0x30
 800ed34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ed36:	f107 0320 	add.w	r3, r7, #32
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	605a      	str	r2, [r3, #4]
 800ed40:	609a      	str	r2, [r3, #8]
 800ed42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ed44:	f107 0314 	add.w	r3, r7, #20
 800ed48:	2200      	movs	r2, #0
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	605a      	str	r2, [r3, #4]
 800ed4e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ed50:	1d3b      	adds	r3, r7, #4
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
 800ed56:	605a      	str	r2, [r3, #4]
 800ed58:	609a      	str	r2, [r3, #8]
 800ed5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ed5c:	4b52      	ldr	r3, [pc, #328]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed5e:	4a53      	ldr	r2, [pc, #332]	; (800eeac <_ZL12MX_TIM1_Initv+0x17c>)
 800ed60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ed62:	4b51      	ldr	r3, [pc, #324]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed68:	4b4f      	ldr	r3, [pc, #316]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800ed6e:	4b4e      	ldr	r3, [pc, #312]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed70:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ed74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ed76:	4b4c      	ldr	r3, [pc, #304]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ed7c:	4b4a      	ldr	r3, [pc, #296]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ed82:	4b49      	ldr	r3, [pc, #292]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ed88:	4847      	ldr	r0, [pc, #284]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ed8a:	f00f feef 	bl	801eb6c <HAL_TIM_Base_Init>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bf14      	ite	ne
 800ed94:	2301      	movne	r3, #1
 800ed96:	2300      	moveq	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800ed9e:	f001 f941 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eda2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eda6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800eda8:	f107 0320 	add.w	r3, r7, #32
 800edac:	4619      	mov	r1, r3
 800edae:	483e      	ldr	r0, [pc, #248]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800edb0:	f010 fe74 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	bf14      	ite	ne
 800edba:	2301      	movne	r3, #1
 800edbc:	2300      	moveq	r3, #0
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800edc4:	f001 f92e 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800edc8:	4837      	ldr	r0, [pc, #220]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800edca:	f010 f9d7 	bl	801f17c <HAL_TIM_IC_Init>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	bf14      	ite	ne
 800edd4:	2301      	movne	r3, #1
 800edd6:	2300      	moveq	r3, #0
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800edde:	f001 f921 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800edea:	2300      	movs	r3, #0
 800edec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800edee:	f107 0314 	add.w	r3, r7, #20
 800edf2:	4619      	mov	r1, r3
 800edf4:	482c      	ldr	r0, [pc, #176]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800edf6:	f011 fd21 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	bf14      	ite	ne
 800ee00:	2301      	movne	r3, #1
 800ee02:	2300      	moveq	r3, #0
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ee0a:	f001 f90b 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ee0e:	230a      	movs	r3, #10
 800ee10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ee12:	2301      	movs	r3, #1
 800ee14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ee16:	2300      	movs	r3, #0
 800ee18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ee1e:	1d3b      	adds	r3, r7, #4
 800ee20:	2200      	movs	r2, #0
 800ee22:	4619      	mov	r1, r3
 800ee24:	4820      	ldr	r0, [pc, #128]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ee26:	f010 fc88 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bf14      	ite	ne
 800ee30:	2301      	movne	r3, #1
 800ee32:	2300      	moveq	r3, #0
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d001      	beq.n	800ee3e <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800ee3a:	f001 f8f3 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ee3e:	1d3b      	adds	r3, r7, #4
 800ee40:	2204      	movs	r2, #4
 800ee42:	4619      	mov	r1, r3
 800ee44:	4818      	ldr	r0, [pc, #96]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ee46:	f010 fc78 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf14      	ite	ne
 800ee50:	2301      	movne	r3, #1
 800ee52:	2300      	moveq	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d001      	beq.n	800ee5e <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800ee5a:	f001 f8e3 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ee5e:	1d3b      	adds	r3, r7, #4
 800ee60:	2208      	movs	r2, #8
 800ee62:	4619      	mov	r1, r3
 800ee64:	4810      	ldr	r0, [pc, #64]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ee66:	f010 fc68 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bf14      	ite	ne
 800ee70:	2301      	movne	r3, #1
 800ee72:	2300      	moveq	r3, #0
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d001      	beq.n	800ee7e <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800ee7a:	f001 f8d3 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ee7e:	1d3b      	adds	r3, r7, #4
 800ee80:	220c      	movs	r2, #12
 800ee82:	4619      	mov	r1, r3
 800ee84:	4808      	ldr	r0, [pc, #32]	; (800eea8 <_ZL12MX_TIM1_Initv+0x178>)
 800ee86:	f010 fc58 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bf14      	ite	ne
 800ee90:	2301      	movne	r3, #1
 800ee92:	2300      	moveq	r3, #0
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800ee9a:	f001 f8c3 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ee9e:	bf00      	nop
 800eea0:	3730      	adds	r7, #48	; 0x30
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	24000e38 	.word	0x24000e38
 800eeac:	40010000 	.word	0x40010000

0800eeb0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08c      	sub	sp, #48	; 0x30
 800eeb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eeb6:	f107 0320 	add.w	r3, r7, #32
 800eeba:	2200      	movs	r2, #0
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	605a      	str	r2, [r3, #4]
 800eec0:	609a      	str	r2, [r3, #8]
 800eec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eec4:	f107 0314 	add.w	r3, r7, #20
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]
 800eecc:	605a      	str	r2, [r3, #4]
 800eece:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eed0:	1d3b      	adds	r3, r7, #4
 800eed2:	2200      	movs	r2, #0
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	605a      	str	r2, [r3, #4]
 800eed8:	609a      	str	r2, [r3, #8]
 800eeda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800eedc:	4b52      	ldr	r3, [pc, #328]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800eede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eee2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800eee4:	4b50      	ldr	r3, [pc, #320]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eeea:	4b4f      	ldr	r3, [pc, #316]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800eef0:	4b4d      	ldr	r3, [pc, #308]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800eef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eef6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eef8:	4b4b      	ldr	r3, [pc, #300]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eefe:	4b4a      	ldr	r3, [pc, #296]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ef04:	4848      	ldr	r0, [pc, #288]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef06:	f00f fe31 	bl	801eb6c <HAL_TIM_Base_Init>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bf14      	ite	ne
 800ef10:	2301      	movne	r3, #1
 800ef12:	2300      	moveq	r3, #0
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800ef1a:	f001 f883 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ef1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef22:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ef24:	f107 0320 	add.w	r3, r7, #32
 800ef28:	4619      	mov	r1, r3
 800ef2a:	483f      	ldr	r0, [pc, #252]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef2c:	f010 fdb6 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	bf14      	ite	ne
 800ef36:	2301      	movne	r3, #1
 800ef38:	2300      	moveq	r3, #0
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800ef40:	f001 f870 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ef44:	4838      	ldr	r0, [pc, #224]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef46:	f010 f919 	bl	801f17c <HAL_TIM_IC_Init>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	bf14      	ite	ne
 800ef50:	2301      	movne	r3, #1
 800ef52:	2300      	moveq	r3, #0
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d001      	beq.n	800ef5e <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800ef5a:	f001 f863 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ef66:	f107 0314 	add.w	r3, r7, #20
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	482e      	ldr	r0, [pc, #184]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef6e:	f011 fc65 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bf14      	ite	ne
 800ef78:	2301      	movne	r3, #1
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800ef82:	f001 f84f 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ef86:	230a      	movs	r3, #10
 800ef88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ef96:	1d3b      	adds	r3, r7, #4
 800ef98:	2200      	movs	r2, #0
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4822      	ldr	r0, [pc, #136]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800ef9e:	f010 fbcc 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	bf14      	ite	ne
 800efa8:	2301      	movne	r3, #1
 800efaa:	2300      	moveq	r3, #0
 800efac:	b2db      	uxtb	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800efb2:	f001 f837 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800efb6:	2300      	movs	r3, #0
 800efb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800efba:	1d3b      	adds	r3, r7, #4
 800efbc:	2204      	movs	r2, #4
 800efbe:	4619      	mov	r1, r3
 800efc0:	4819      	ldr	r0, [pc, #100]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800efc2:	f010 fbba 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	bf14      	ite	ne
 800efcc:	2301      	movne	r3, #1
 800efce:	2300      	moveq	r3, #0
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800efd6:	f001 f825 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800efda:	230a      	movs	r3, #10
 800efdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800efde:	1d3b      	adds	r3, r7, #4
 800efe0:	2208      	movs	r2, #8
 800efe2:	4619      	mov	r1, r3
 800efe4:	4810      	ldr	r0, [pc, #64]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800efe6:	f010 fba8 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	bf14      	ite	ne
 800eff0:	2301      	movne	r3, #1
 800eff2:	2300      	moveq	r3, #0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <_ZL12MX_TIM2_Initv+0x14e>
  {
    Error_Handler();
 800effa:	f001 f813 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800effe:	1d3b      	adds	r3, r7, #4
 800f000:	220c      	movs	r2, #12
 800f002:	4619      	mov	r1, r3
 800f004:	4808      	ldr	r0, [pc, #32]	; (800f028 <_ZL12MX_TIM2_Initv+0x178>)
 800f006:	f010 fb98 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	bf14      	ite	ne
 800f010:	2301      	movne	r3, #1
 800f012:	2300      	moveq	r3, #0
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <_ZL12MX_TIM2_Initv+0x16e>
  {
    Error_Handler();
 800f01a:	f001 f803 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800f01e:	bf00      	nop
 800f020:	3730      	adds	r7, #48	; 0x30
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	24000e84 	.word	0x24000e84

0800f02c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08c      	sub	sp, #48	; 0x30
 800f030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f032:	f107 0320 	add.w	r3, r7, #32
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	605a      	str	r2, [r3, #4]
 800f03c:	609a      	str	r2, [r3, #8]
 800f03e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f040:	f107 0314 	add.w	r3, r7, #20
 800f044:	2200      	movs	r2, #0
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	605a      	str	r2, [r3, #4]
 800f04a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f04c:	1d3b      	adds	r3, r7, #4
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	605a      	str	r2, [r3, #4]
 800f054:	609a      	str	r2, [r3, #8]
 800f056:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f058:	4b4f      	ldr	r3, [pc, #316]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f05a:	4a50      	ldr	r2, [pc, #320]	; (800f19c <_ZL12MX_TIM3_Initv+0x170>)
 800f05c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f05e:	4b4e      	ldr	r3, [pc, #312]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f060:	2200      	movs	r2, #0
 800f062:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f064:	4b4c      	ldr	r3, [pc, #304]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f066:	2200      	movs	r2, #0
 800f068:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800f06a:	4b4b      	ldr	r3, [pc, #300]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f06c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f070:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f072:	4b49      	ldr	r3, [pc, #292]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f074:	2200      	movs	r2, #0
 800f076:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f078:	4b47      	ldr	r3, [pc, #284]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f07e:	4846      	ldr	r0, [pc, #280]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f080:	f00f fd74 	bl	801eb6c <HAL_TIM_Base_Init>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	bf14      	ite	ne
 800f08a:	2301      	movne	r3, #1
 800f08c:	2300      	moveq	r3, #0
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800f094:	f000 ffc6 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f09c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f09e:	f107 0320 	add.w	r3, r7, #32
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	483c      	ldr	r0, [pc, #240]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f0a6:	f010 fcf9 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	bf14      	ite	ne
 800f0b0:	2301      	movne	r3, #1
 800f0b2:	2300      	moveq	r3, #0
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800f0ba:	f000 ffb3 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800f0be:	4836      	ldr	r0, [pc, #216]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f0c0:	f010 f85c 	bl	801f17c <HAL_TIM_IC_Init>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	bf14      	ite	ne
 800f0ca:	2301      	movne	r3, #1
 800f0cc:	2300      	moveq	r3, #0
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800f0d4:	f000 ffa6 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f0e0:	f107 0314 	add.w	r3, r7, #20
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	482c      	ldr	r0, [pc, #176]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f0e8:	f011 fba8 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	bf14      	ite	ne
 800f0f2:	2301      	movne	r3, #1
 800f0f4:	2300      	moveq	r3, #0
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800f0fc:	f000 ff92 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f100:	230a      	movs	r3, #10
 800f102:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f104:	2301      	movs	r3, #1
 800f106:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f108:	2300      	movs	r3, #0
 800f10a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f110:	1d3b      	adds	r3, r7, #4
 800f112:	2200      	movs	r2, #0
 800f114:	4619      	mov	r1, r3
 800f116:	4820      	ldr	r0, [pc, #128]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f118:	f010 fb0f 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bf14      	ite	ne
 800f122:	2301      	movne	r3, #1
 800f124:	2300      	moveq	r3, #0
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800f12c:	f000 ff7a 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f130:	1d3b      	adds	r3, r7, #4
 800f132:	2204      	movs	r2, #4
 800f134:	4619      	mov	r1, r3
 800f136:	4818      	ldr	r0, [pc, #96]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f138:	f010 faff 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	bf14      	ite	ne
 800f142:	2301      	movne	r3, #1
 800f144:	2300      	moveq	r3, #0
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d001      	beq.n	800f150 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800f14c:	f000 ff6a 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f150:	1d3b      	adds	r3, r7, #4
 800f152:	2208      	movs	r2, #8
 800f154:	4619      	mov	r1, r3
 800f156:	4810      	ldr	r0, [pc, #64]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f158:	f010 faef 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	bf14      	ite	ne
 800f162:	2301      	movne	r3, #1
 800f164:	2300      	moveq	r3, #0
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d001      	beq.n	800f170 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800f16c:	f000 ff5a 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f170:	1d3b      	adds	r3, r7, #4
 800f172:	220c      	movs	r2, #12
 800f174:	4619      	mov	r1, r3
 800f176:	4808      	ldr	r0, [pc, #32]	; (800f198 <_ZL12MX_TIM3_Initv+0x16c>)
 800f178:	f010 fadf 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bf14      	ite	ne
 800f182:	2301      	movne	r3, #1
 800f184:	2300      	moveq	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800f18c:	f000 ff4a 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f190:	bf00      	nop
 800f192:	3730      	adds	r7, #48	; 0x30
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	24000ed0 	.word	0x24000ed0
 800f19c:	40000400 	.word	0x40000400

0800f1a0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08c      	sub	sp, #48	; 0x30
 800f1a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f1a6:	f107 0320 	add.w	r3, r7, #32
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	605a      	str	r2, [r3, #4]
 800f1b0:	609a      	str	r2, [r3, #8]
 800f1b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f1b4:	f107 0314 	add.w	r3, r7, #20
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	601a      	str	r2, [r3, #0]
 800f1bc:	605a      	str	r2, [r3, #4]
 800f1be:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f1c0:	1d3b      	adds	r3, r7, #4
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	605a      	str	r2, [r3, #4]
 800f1c8:	609a      	str	r2, [r3, #8]
 800f1ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f1cc:	4b4f      	ldr	r3, [pc, #316]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1ce:	4a50      	ldr	r2, [pc, #320]	; (800f310 <_ZL12MX_TIM4_Initv+0x170>)
 800f1d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f1d2:	4b4e      	ldr	r3, [pc, #312]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1d8:	4b4c      	ldr	r3, [pc, #304]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800f1de:	4b4b      	ldr	r3, [pc, #300]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1e0:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f1e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1e6:	4b49      	ldr	r3, [pc, #292]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1ec:	4b47      	ldr	r3, [pc, #284]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800f1f2:	4846      	ldr	r0, [pc, #280]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f1f4:	f00f fcba 	bl	801eb6c <HAL_TIM_Base_Init>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	bf14      	ite	ne
 800f1fe:	2301      	movne	r3, #1
 800f200:	2300      	moveq	r3, #0
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800f208:	f000 ff0c 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f210:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800f212:	f107 0320 	add.w	r3, r7, #32
 800f216:	4619      	mov	r1, r3
 800f218:	483c      	ldr	r0, [pc, #240]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f21a:	f010 fc3f 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	bf14      	ite	ne
 800f224:	2301      	movne	r3, #1
 800f226:	2300      	moveq	r3, #0
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800f22e:	f000 fef9 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800f232:	4836      	ldr	r0, [pc, #216]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f234:	f00f ffa2 	bl	801f17c <HAL_TIM_IC_Init>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	2300      	moveq	r3, #0
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800f248:	f000 feec 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f24c:	2300      	movs	r3, #0
 800f24e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f250:	2300      	movs	r3, #0
 800f252:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f254:	f107 0314 	add.w	r3, r7, #20
 800f258:	4619      	mov	r1, r3
 800f25a:	482c      	ldr	r0, [pc, #176]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f25c:	f011 faee 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	bf14      	ite	ne
 800f266:	2301      	movne	r3, #1
 800f268:	2300      	moveq	r3, #0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800f270:	f000 fed8 	bl	8010024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f274:	230a      	movs	r3, #10
 800f276:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f278:	2301      	movs	r3, #1
 800f27a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f27c:	2300      	movs	r3, #0
 800f27e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f280:	2300      	movs	r3, #0
 800f282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f284:	1d3b      	adds	r3, r7, #4
 800f286:	2200      	movs	r2, #0
 800f288:	4619      	mov	r1, r3
 800f28a:	4820      	ldr	r0, [pc, #128]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f28c:	f010 fa55 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	bf14      	ite	ne
 800f296:	2301      	movne	r3, #1
 800f298:	2300      	moveq	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800f2a0:	f000 fec0 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f2a4:	1d3b      	adds	r3, r7, #4
 800f2a6:	2204      	movs	r2, #4
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4818      	ldr	r0, [pc, #96]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f2ac:	f010 fa45 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	bf14      	ite	ne
 800f2b6:	2301      	movne	r3, #1
 800f2b8:	2300      	moveq	r3, #0
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800f2c0:	f000 feb0 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f2c4:	1d3b      	adds	r3, r7, #4
 800f2c6:	2208      	movs	r2, #8
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	4810      	ldr	r0, [pc, #64]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f2cc:	f010 fa35 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bf14      	ite	ne
 800f2d6:	2301      	movne	r3, #1
 800f2d8:	2300      	moveq	r3, #0
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800f2e0:	f000 fea0 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f2e4:	1d3b      	adds	r3, r7, #4
 800f2e6:	220c      	movs	r2, #12
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4808      	ldr	r0, [pc, #32]	; (800f30c <_ZL12MX_TIM4_Initv+0x16c>)
 800f2ec:	f010 fa25 	bl	801f73a <HAL_TIM_IC_ConfigChannel>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	bf14      	ite	ne
 800f2f6:	2301      	movne	r3, #1
 800f2f8:	2300      	moveq	r3, #0
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800f300:	f000 fe90 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f304:	bf00      	nop
 800f306:	3730      	adds	r7, #48	; 0x30
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	24000f1c 	.word	0x24000f1c
 800f310:	40000800 	.word	0x40000800

0800f314 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08e      	sub	sp, #56	; 0x38
 800f318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f31a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f31e:	2200      	movs	r2, #0
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	605a      	str	r2, [r3, #4]
 800f324:	609a      	str	r2, [r3, #8]
 800f326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f328:	f107 031c 	add.w	r3, r7, #28
 800f32c:	2200      	movs	r2, #0
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	605a      	str	r2, [r3, #4]
 800f332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f334:	463b      	mov	r3, r7
 800f336:	2200      	movs	r2, #0
 800f338:	601a      	str	r2, [r3, #0]
 800f33a:	605a      	str	r2, [r3, #4]
 800f33c:	609a      	str	r2, [r3, #8]
 800f33e:	60da      	str	r2, [r3, #12]
 800f340:	611a      	str	r2, [r3, #16]
 800f342:	615a      	str	r2, [r3, #20]
 800f344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f346:	4b49      	ldr	r3, [pc, #292]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f348:	4a49      	ldr	r2, [pc, #292]	; (800f470 <_ZL12MX_TIM5_Initv+0x15c>)
 800f34a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f34c:	4b47      	ldr	r3, [pc, #284]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f34e:	2200      	movs	r2, #0
 800f350:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f352:	4b46      	ldr	r3, [pc, #280]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f354:	2200      	movs	r2, #0
 800f356:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f358:	4b44      	ldr	r3, [pc, #272]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f35a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f35e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f360:	4b42      	ldr	r3, [pc, #264]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f362:	2200      	movs	r2, #0
 800f364:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f366:	4b41      	ldr	r3, [pc, #260]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f368:	2200      	movs	r2, #0
 800f36a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f36c:	483f      	ldr	r0, [pc, #252]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f36e:	f00f fbfd 	bl	801eb6c <HAL_TIM_Base_Init>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	bf14      	ite	ne
 800f378:	2301      	movne	r3, #1
 800f37a:	2300      	moveq	r3, #0
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f382:	f000 fe4f 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f38a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f38c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f390:	4619      	mov	r1, r3
 800f392:	4836      	ldr	r0, [pc, #216]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f394:	f010 fb82 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	bf14      	ite	ne
 800f39e:	2301      	movne	r3, #1
 800f3a0:	2300      	moveq	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f3a8:	f000 fe3c 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f3ac:	482f      	ldr	r0, [pc, #188]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f3ae:	f00f fd68 	bl	801ee82 <HAL_TIM_PWM_Init>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bf14      	ite	ne
 800f3b8:	2301      	movne	r3, #1
 800f3ba:	2300      	moveq	r3, #0
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f3c2:	f000 fe2f 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f3ce:	f107 031c 	add.w	r3, r7, #28
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4825      	ldr	r0, [pc, #148]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f3d6:	f011 fa31 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	bf14      	ite	ne
 800f3e0:	2301      	movne	r3, #1
 800f3e2:	2300      	moveq	r3, #0
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f3ea:	f000 fe1b 	bl	8010024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f3ee:	2360      	movs	r3, #96	; 0x60
 800f3f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f3fe:	463b      	mov	r3, r7
 800f400:	2200      	movs	r2, #0
 800f402:	4619      	mov	r1, r3
 800f404:	4819      	ldr	r0, [pc, #100]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f406:	f010 fa35 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bf14      	ite	ne
 800f410:	2301      	movne	r3, #1
 800f412:	2300      	moveq	r3, #0
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f41a:	f000 fe03 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f41e:	463b      	mov	r3, r7
 800f420:	2208      	movs	r2, #8
 800f422:	4619      	mov	r1, r3
 800f424:	4811      	ldr	r0, [pc, #68]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f426:	f010 fa25 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	bf14      	ite	ne
 800f430:	2301      	movne	r3, #1
 800f432:	2300      	moveq	r3, #0
 800f434:	b2db      	uxtb	r3, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	d001      	beq.n	800f43e <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f43a:	f000 fdf3 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f43e:	463b      	mov	r3, r7
 800f440:	220c      	movs	r2, #12
 800f442:	4619      	mov	r1, r3
 800f444:	4809      	ldr	r0, [pc, #36]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f446:	f010 fa15 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	bf14      	ite	ne
 800f450:	2301      	movne	r3, #1
 800f452:	2300      	moveq	r3, #0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f45a:	f000 fde3 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f45e:	4803      	ldr	r0, [pc, #12]	; (800f46c <_ZL12MX_TIM5_Initv+0x158>)
 800f460:	f005 feee 	bl	8015240 <HAL_TIM_MspPostInit>

}
 800f464:	bf00      	nop
 800f466:	3738      	adds	r7, #56	; 0x38
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	24000f68 	.word	0x24000f68
 800f470:	40000c00 	.word	0x40000c00

0800f474 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f47a:	1d3b      	adds	r3, r7, #4
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	605a      	str	r2, [r3, #4]
 800f482:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f484:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f486:	4a1a      	ldr	r2, [pc, #104]	; (800f4f0 <_ZL12MX_TIM6_Initv+0x7c>)
 800f488:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f48a:	4b18      	ldr	r3, [pc, #96]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f48c:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f490:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f492:	4b16      	ldr	r3, [pc, #88]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f494:	2200      	movs	r2, #0
 800f496:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f498:	4b14      	ldr	r3, [pc, #80]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f49a:	22c7      	movs	r2, #199	; 0xc7
 800f49c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f49e:	4b13      	ldr	r3, [pc, #76]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f4a4:	4811      	ldr	r0, [pc, #68]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f4a6:	f00f fb61 	bl	801eb6c <HAL_TIM_Base_Init>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	bf14      	ite	ne
 800f4b0:	2301      	movne	r3, #1
 800f4b2:	2300      	moveq	r3, #0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f4ba:	f000 fdb3 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f4be:	2320      	movs	r3, #32
 800f4c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f4c6:	1d3b      	adds	r3, r7, #4
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4808      	ldr	r0, [pc, #32]	; (800f4ec <_ZL12MX_TIM6_Initv+0x78>)
 800f4cc:	f011 f9b6 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	bf14      	ite	ne
 800f4d6:	2301      	movne	r3, #1
 800f4d8:	2300      	moveq	r3, #0
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f4e0:	f000 fda0 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f4e4:	bf00      	nop
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	24000fb4 	.word	0x24000fb4
 800f4f0:	40001000 	.word	0x40001000

0800f4f4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4fa:	1d3b      	adds	r3, r7, #4
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	605a      	str	r2, [r3, #4]
 800f502:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f504:	4b19      	ldr	r3, [pc, #100]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f506:	4a1a      	ldr	r2, [pc, #104]	; (800f570 <_ZL12MX_TIM7_Initv+0x7c>)
 800f508:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f50a:	4b18      	ldr	r3, [pc, #96]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f510:	4b16      	ldr	r3, [pc, #88]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f512:	2200      	movs	r2, #0
 800f514:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f516:	4b15      	ldr	r3, [pc, #84]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f520:	2200      	movs	r2, #0
 800f522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f524:	4811      	ldr	r0, [pc, #68]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f526:	f00f fb21 	bl	801eb6c <HAL_TIM_Base_Init>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	bf14      	ite	ne
 800f530:	2301      	movne	r3, #1
 800f532:	2300      	moveq	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f53a:	f000 fd73 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f53e:	2300      	movs	r3, #0
 800f540:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f542:	2300      	movs	r3, #0
 800f544:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f546:	1d3b      	adds	r3, r7, #4
 800f548:	4619      	mov	r1, r3
 800f54a:	4808      	ldr	r0, [pc, #32]	; (800f56c <_ZL12MX_TIM7_Initv+0x78>)
 800f54c:	f011 f976 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	bf14      	ite	ne
 800f556:	2301      	movne	r3, #1
 800f558:	2300      	moveq	r3, #0
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f560:	f000 fd60 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f564:	bf00      	nop
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	24001000 	.word	0x24001000
 800f570:	40001400 	.word	0x40001400

0800f574 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b09c      	sub	sp, #112	; 0x70
 800f578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f57a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f57e:	2200      	movs	r2, #0
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	605a      	str	r2, [r3, #4]
 800f584:	609a      	str	r2, [r3, #8]
 800f586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f58c:	2200      	movs	r2, #0
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	605a      	str	r2, [r3, #4]
 800f592:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	605a      	str	r2, [r3, #4]
 800f59e:	609a      	str	r2, [r3, #8]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	611a      	str	r2, [r3, #16]
 800f5a4:	615a      	str	r2, [r3, #20]
 800f5a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f5a8:	1d3b      	adds	r3, r7, #4
 800f5aa:	2234      	movs	r2, #52	; 0x34
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f011 fbf6 	bl	8020da0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f5b4:	4b6c      	ldr	r3, [pc, #432]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5b6:	4a6d      	ldr	r2, [pc, #436]	; (800f76c <_ZL12MX_TIM8_Initv+0x1f8>)
 800f5b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f5ba:	4b6b      	ldr	r3, [pc, #428]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5c0:	4b69      	ldr	r3, [pc, #420]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f5c6:	4b68      	ldr	r3, [pc, #416]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5c8:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f5cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f5ce:	4b66      	ldr	r3, [pc, #408]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f5d4:	4b64      	ldr	r3, [pc, #400]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f5da:	4b63      	ldr	r3, [pc, #396]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5dc:	2200      	movs	r2, #0
 800f5de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f5e0:	4861      	ldr	r0, [pc, #388]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5e2:	f00f fac3 	bl	801eb6c <HAL_TIM_Base_Init>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	bf14      	ite	ne
 800f5ec:	2301      	movne	r3, #1
 800f5ee:	2300      	moveq	r3, #0
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f5f6:	f000 fd15 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f5fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f600:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f604:	4619      	mov	r1, r3
 800f606:	4858      	ldr	r0, [pc, #352]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f608:	f010 fa48 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bf14      	ite	ne
 800f612:	2301      	movne	r3, #1
 800f614:	2300      	moveq	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f61c:	f000 fd02 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f620:	4851      	ldr	r0, [pc, #324]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f622:	f00f fc2e 	bl	801ee82 <HAL_TIM_PWM_Init>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bf14      	ite	ne
 800f62c:	2301      	movne	r3, #1
 800f62e:	2300      	moveq	r3, #0
 800f630:	b2db      	uxtb	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f636:	f000 fcf5 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f63a:	2300      	movs	r3, #0
 800f63c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f63e:	2300      	movs	r3, #0
 800f640:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f642:	2300      	movs	r3, #0
 800f644:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f646:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f64a:	4619      	mov	r1, r3
 800f64c:	4846      	ldr	r0, [pc, #280]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f64e:	f011 f8f5 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	bf14      	ite	ne
 800f658:	2301      	movne	r3, #1
 800f65a:	2300      	moveq	r3, #0
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f662:	f000 fcdf 	bl	8010024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f666:	2360      	movs	r3, #96	; 0x60
 800f668:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f66e:	2300      	movs	r3, #0
 800f670:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f672:	2300      	movs	r3, #0
 800f674:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f676:	2300      	movs	r3, #0
 800f678:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f67a:	2300      	movs	r3, #0
 800f67c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f67e:	2300      	movs	r3, #0
 800f680:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f686:	2200      	movs	r2, #0
 800f688:	4619      	mov	r1, r3
 800f68a:	4837      	ldr	r0, [pc, #220]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f68c:	f010 f8f2 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	bf14      	ite	ne
 800f696:	2301      	movne	r3, #1
 800f698:	2300      	moveq	r3, #0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f6a0:	f000 fcc0 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f6a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6a8:	2204      	movs	r2, #4
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	482e      	ldr	r0, [pc, #184]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f6ae:	f010 f8e1 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	bf14      	ite	ne
 800f6b8:	2301      	movne	r3, #1
 800f6ba:	2300      	moveq	r3, #0
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f6c2:	f000 fcaf 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f6c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6ca:	2208      	movs	r2, #8
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4826      	ldr	r0, [pc, #152]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f6d0:	f010 f8d0 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	bf14      	ite	ne
 800f6da:	2301      	movne	r3, #1
 800f6dc:	2300      	moveq	r3, #0
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f6e4:	f000 fc9e 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f6e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6ec:	220c      	movs	r2, #12
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	481d      	ldr	r0, [pc, #116]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f6f2:	f010 f8bf 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	bf14      	ite	ne
 800f6fc:	2301      	movne	r3, #1
 800f6fe:	2300      	moveq	r3, #0
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f706:	f000 fc8d 	bl	8010024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f70a:	2300      	movs	r3, #0
 800f70c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f70e:	2300      	movs	r3, #0
 800f710:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f712:	2300      	movs	r3, #0
 800f714:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f716:	2300      	movs	r3, #0
 800f718:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f71a:	2300      	movs	r3, #0
 800f71c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f71e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f722:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f728:	2300      	movs	r3, #0
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f72c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f730:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f736:	2300      	movs	r3, #0
 800f738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f73a:	1d3b      	adds	r3, r7, #4
 800f73c:	4619      	mov	r1, r3
 800f73e:	480a      	ldr	r0, [pc, #40]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f740:	f011 f918 	bl	8020974 <HAL_TIMEx_ConfigBreakDeadTime>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	bf14      	ite	ne
 800f74a:	2301      	movne	r3, #1
 800f74c:	2300      	moveq	r3, #0
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f754:	f000 fc66 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f758:	4803      	ldr	r0, [pc, #12]	; (800f768 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f75a:	f005 fd71 	bl	8015240 <HAL_TIM_MspPostInit>

}
 800f75e:	bf00      	nop
 800f760:	3770      	adds	r7, #112	; 0x70
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	2400104c 	.word	0x2400104c
 800f76c:	40010400 	.word	0x40010400

0800f770 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b08c      	sub	sp, #48	; 0x30
 800f774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f776:	f107 0320 	add.w	r3, r7, #32
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	605a      	str	r2, [r3, #4]
 800f780:	609a      	str	r2, [r3, #8]
 800f782:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f784:	1d3b      	adds	r3, r7, #4
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
 800f78a:	605a      	str	r2, [r3, #4]
 800f78c:	609a      	str	r2, [r3, #8]
 800f78e:	60da      	str	r2, [r3, #12]
 800f790:	611a      	str	r2, [r3, #16]
 800f792:	615a      	str	r2, [r3, #20]
 800f794:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f796:	4b2f      	ldr	r3, [pc, #188]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f798:	4a2f      	ldr	r2, [pc, #188]	; (800f858 <_ZL13MX_TIM12_Initv+0xe8>)
 800f79a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f79c:	4b2d      	ldr	r3, [pc, #180]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7a2:	4b2c      	ldr	r3, [pc, #176]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f7a8:	4b2a      	ldr	r3, [pc, #168]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7aa:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f7ae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7b0:	4b28      	ldr	r3, [pc, #160]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7b6:	4b27      	ldr	r3, [pc, #156]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f7bc:	4825      	ldr	r0, [pc, #148]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7be:	f00f f9d5 	bl	801eb6c <HAL_TIM_Base_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	bf14      	ite	ne
 800f7c8:	2301      	movne	r3, #1
 800f7ca:	2300      	moveq	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800f7d2:	f000 fc27 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f7d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7da:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f7dc:	f107 0320 	add.w	r3, r7, #32
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	481c      	ldr	r0, [pc, #112]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7e4:	f010 f95a 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bf14      	ite	ne
 800f7ee:	2301      	movne	r3, #1
 800f7f0:	2300      	moveq	r3, #0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d001      	beq.n	800f7fc <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800f7f8:	f000 fc14 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f7fc:	4815      	ldr	r0, [pc, #84]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f7fe:	f00f fb40 	bl	801ee82 <HAL_TIM_PWM_Init>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	bf14      	ite	ne
 800f808:	2301      	movne	r3, #1
 800f80a:	2300      	moveq	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800f812:	f000 fc07 	bl	8010024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f816:	2360      	movs	r3, #96	; 0x60
 800f818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f81e:	2300      	movs	r3, #0
 800f820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f822:	2300      	movs	r3, #0
 800f824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f826:	1d3b      	adds	r3, r7, #4
 800f828:	2200      	movs	r2, #0
 800f82a:	4619      	mov	r1, r3
 800f82c:	4809      	ldr	r0, [pc, #36]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f82e:	f010 f821 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	bf14      	ite	ne
 800f838:	2301      	movne	r3, #1
 800f83a:	2300      	moveq	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800f842:	f000 fbef 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f846:	4803      	ldr	r0, [pc, #12]	; (800f854 <_ZL13MX_TIM12_Initv+0xe4>)
 800f848:	f005 fcfa 	bl	8015240 <HAL_TIM_MspPostInit>

}
 800f84c:	bf00      	nop
 800f84e:	3730      	adds	r7, #48	; 0x30
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	24001098 	.word	0x24001098
 800f858:	40001800 	.word	0x40001800

0800f85c <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f860:	4b10      	ldr	r3, [pc, #64]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f862:	4a11      	ldr	r2, [pc, #68]	; (800f8a8 <_ZL13MX_TIM13_Initv+0x4c>)
 800f864:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f866:	4b0f      	ldr	r3, [pc, #60]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f868:	2200      	movs	r2, #0
 800f86a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f86c:	4b0d      	ldr	r3, [pc, #52]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f86e:	2200      	movs	r2, #0
 800f870:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f872:	4b0c      	ldr	r3, [pc, #48]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f878:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f87a:	4b0a      	ldr	r3, [pc, #40]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f880:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f882:	2200      	movs	r2, #0
 800f884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f886:	4807      	ldr	r0, [pc, #28]	; (800f8a4 <_ZL13MX_TIM13_Initv+0x48>)
 800f888:	f00f f970 	bl	801eb6c <HAL_TIM_Base_Init>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	bf14      	ite	ne
 800f892:	2301      	movne	r3, #1
 800f894:	2300      	moveq	r3, #0
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d001      	beq.n	800f8a0 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800f89c:	f000 fbc2 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800f8a0:	bf00      	nop
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	240010e4 	.word	0x240010e4
 800f8a8:	40001c00 	.word	0x40001c00

0800f8ac <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800f8b0:	4b10      	ldr	r3, [pc, #64]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8b2:	4a11      	ldr	r2, [pc, #68]	; (800f8f8 <_ZL13MX_TIM14_Initv+0x4c>)
 800f8b4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8bc:	4b0d      	ldr	r3, [pc, #52]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800f8c2:	4b0c      	ldr	r3, [pc, #48]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8c8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8ca:	4b0a      	ldr	r3, [pc, #40]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f8d0:	4b08      	ldr	r3, [pc, #32]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f8d6:	4807      	ldr	r0, [pc, #28]	; (800f8f4 <_ZL13MX_TIM14_Initv+0x48>)
 800f8d8:	f00f f948 	bl	801eb6c <HAL_TIM_Base_Init>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bf14      	ite	ne
 800f8e2:	2301      	movne	r3, #1
 800f8e4:	2300      	moveq	r3, #0
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800f8ec:	f000 fb9a 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800f8f0:	bf00      	nop
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	24001130 	.word	0x24001130
 800f8f8:	40002000 	.word	0x40002000

0800f8fc <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b088      	sub	sp, #32
 800f900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f902:	f107 0310 	add.w	r3, r7, #16
 800f906:	2200      	movs	r2, #0
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	605a      	str	r2, [r3, #4]
 800f90c:	609a      	str	r2, [r3, #8]
 800f90e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f910:	1d3b      	adds	r3, r7, #4
 800f912:	2200      	movs	r2, #0
 800f914:	601a      	str	r2, [r3, #0]
 800f916:	605a      	str	r2, [r3, #4]
 800f918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800f91a:	4b26      	ldr	r3, [pc, #152]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f91c:	4a26      	ldr	r2, [pc, #152]	; (800f9b8 <_ZL13MX_TIM15_Initv+0xbc>)
 800f91e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800f920:	4b24      	ldr	r3, [pc, #144]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f922:	2200      	movs	r2, #0
 800f924:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f926:	4b23      	ldr	r3, [pc, #140]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f928:	2200      	movs	r2, #0
 800f92a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800f92c:	4b21      	ldr	r3, [pc, #132]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f932:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f934:	4b1f      	ldr	r3, [pc, #124]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f936:	2200      	movs	r2, #0
 800f938:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f93a:	4b1e      	ldr	r3, [pc, #120]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f940:	4b1c      	ldr	r3, [pc, #112]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f942:	2200      	movs	r2, #0
 800f944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800f946:	481b      	ldr	r0, [pc, #108]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f948:	f00f f910 	bl	801eb6c <HAL_TIM_Base_Init>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	bf14      	ite	ne
 800f952:	2301      	movne	r3, #1
 800f954:	2300      	moveq	r3, #0
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d001      	beq.n	800f960 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800f95c:	f000 fb62 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f964:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800f966:	f107 0310 	add.w	r3, r7, #16
 800f96a:	4619      	mov	r1, r3
 800f96c:	4811      	ldr	r0, [pc, #68]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f96e:	f010 f895 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	bf14      	ite	ne
 800f978:	2301      	movne	r3, #1
 800f97a:	2300      	moveq	r3, #0
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800f982:	f000 fb4f 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f986:	2300      	movs	r3, #0
 800f988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f98a:	2300      	movs	r3, #0
 800f98c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f98e:	1d3b      	adds	r3, r7, #4
 800f990:	4619      	mov	r1, r3
 800f992:	4808      	ldr	r0, [pc, #32]	; (800f9b4 <_ZL13MX_TIM15_Initv+0xb8>)
 800f994:	f010 ff52 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	bf14      	ite	ne
 800f99e:	2301      	movne	r3, #1
 800f9a0:	2300      	moveq	r3, #0
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800f9a8:	f000 fb3c 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800f9ac:	bf00      	nop
 800f9ae:	3720      	adds	r7, #32
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	2400117c 	.word	0x2400117c
 800f9b8:	40014000 	.word	0x40014000

0800f9bc <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f9c0:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9c2:	4a13      	ldr	r2, [pc, #76]	; (800fa10 <_ZL13MX_TIM16_Initv+0x54>)
 800f9c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800f9c6:	4b11      	ldr	r3, [pc, #68]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f9cc:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800f9d2:	4b0e      	ldr	r3, [pc, #56]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9da:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f9ec:	4807      	ldr	r0, [pc, #28]	; (800fa0c <_ZL13MX_TIM16_Initv+0x50>)
 800f9ee:	f00f f8bd 	bl	801eb6c <HAL_TIM_Base_Init>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	bf14      	ite	ne
 800f9f8:	2301      	movne	r3, #1
 800f9fa:	2300      	moveq	r3, #0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800fa02:	f000 fb0f 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800fa06:	bf00      	nop
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	240011c8 	.word	0x240011c8
 800fa10:	40014400 	.word	0x40014400

0800fa14 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800fa18:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa1a:	4a13      	ldr	r2, [pc, #76]	; (800fa68 <_ZL13MX_TIM17_Initv+0x54>)
 800fa1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800fa1e:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa24:	4b0f      	ldr	r3, [pc, #60]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800fa2a:	4b0e      	ldr	r3, [pc, #56]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa30:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fa32:	4b0c      	ldr	r3, [pc, #48]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800fa38:	4b0a      	ldr	r3, [pc, #40]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fa3e:	4b09      	ldr	r3, [pc, #36]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800fa44:	4807      	ldr	r0, [pc, #28]	; (800fa64 <_ZL13MX_TIM17_Initv+0x50>)
 800fa46:	f00f f891 	bl	801eb6c <HAL_TIM_Base_Init>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	bf14      	ite	ne
 800fa50:	2301      	movne	r3, #1
 800fa52:	2300      	moveq	r3, #0
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800fa5a:	f000 fae3 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800fa5e:	bf00      	nop
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	24001214 	.word	0x24001214
 800fa68:	40014800 	.word	0x40014800

0800fa6c <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b08e      	sub	sp, #56	; 0x38
 800fa70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	605a      	str	r2, [r3, #4]
 800fa7c:	609a      	str	r2, [r3, #8]
 800fa7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa80:	f107 031c 	add.w	r3, r7, #28
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
 800fa88:	605a      	str	r2, [r3, #4]
 800fa8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fa8c:	463b      	mov	r3, r7
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	609a      	str	r2, [r3, #8]
 800fa96:	60da      	str	r2, [r3, #12]
 800fa98:	611a      	str	r2, [r3, #16]
 800fa9a:	615a      	str	r2, [r3, #20]
 800fa9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800fa9e:	4b51      	ldr	r3, [pc, #324]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800faa0:	4a51      	ldr	r2, [pc, #324]	; (800fbe8 <_ZL13MX_TIM23_Initv+0x17c>)
 800faa2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800faa4:	4b4f      	ldr	r3, [pc, #316]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800faaa:	4b4e      	ldr	r3, [pc, #312]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800faac:	2200      	movs	r2, #0
 800faae:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800fab0:	4b4c      	ldr	r3, [pc, #304]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fab2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800fab6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fab8:	4b4a      	ldr	r3, [pc, #296]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800faba:	2200      	movs	r2, #0
 800fabc:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fabe:	4b49      	ldr	r3, [pc, #292]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800fac4:	4847      	ldr	r0, [pc, #284]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fac6:	f00f f851 	bl	801eb6c <HAL_TIM_Base_Init>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	bf14      	ite	ne
 800fad0:	2301      	movne	r3, #1
 800fad2:	2300      	moveq	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800fada:	f000 faa3 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800fae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fae8:	4619      	mov	r1, r3
 800faea:	483e      	ldr	r0, [pc, #248]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800faec:	f00f ffd6 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bf14      	ite	ne
 800faf6:	2301      	movne	r3, #1
 800faf8:	2300      	moveq	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800fb00:	f000 fa90 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800fb04:	4837      	ldr	r0, [pc, #220]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fb06:	f00f f9bc 	bl	801ee82 <HAL_TIM_PWM_Init>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bf14      	ite	ne
 800fb10:	2301      	movne	r3, #1
 800fb12:	2300      	moveq	r3, #0
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800fb1a:	f000 fa83 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800fb26:	f107 031c 	add.w	r3, r7, #28
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	482d      	ldr	r0, [pc, #180]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fb2e:	f010 fe85 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bf14      	ite	ne
 800fb38:	2301      	movne	r3, #1
 800fb3a:	2300      	moveq	r3, #0
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800fb42:	f000 fa6f 	bl	8010024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fb46:	2360      	movs	r3, #96	; 0x60
 800fb48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fb52:	2300      	movs	r3, #0
 800fb54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fb56:	463b      	mov	r3, r7
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4821      	ldr	r0, [pc, #132]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fb5e:	f00f fe89 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	bf14      	ite	ne
 800fb68:	2301      	movne	r3, #1
 800fb6a:	2300      	moveq	r3, #0
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800fb72:	f000 fa57 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fb76:	463b      	mov	r3, r7
 800fb78:	2204      	movs	r2, #4
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4819      	ldr	r0, [pc, #100]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fb7e:	f00f fe79 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bf14      	ite	ne
 800fb88:	2301      	movne	r3, #1
 800fb8a:	2300      	moveq	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800fb92:	f000 fa47 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fb96:	463b      	mov	r3, r7
 800fb98:	2208      	movs	r2, #8
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4811      	ldr	r0, [pc, #68]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fb9e:	f00f fe69 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	bf14      	ite	ne
 800fba8:	2301      	movne	r3, #1
 800fbaa:	2300      	moveq	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800fbb2:	f000 fa37 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	220c      	movs	r2, #12
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4809      	ldr	r0, [pc, #36]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fbbe:	f00f fe59 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	bf14      	ite	ne
 800fbc8:	2301      	movne	r3, #1
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800fbd2:	f000 fa27 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800fbd6:	4803      	ldr	r0, [pc, #12]	; (800fbe4 <_ZL13MX_TIM23_Initv+0x178>)
 800fbd8:	f005 fb32 	bl	8015240 <HAL_TIM_MspPostInit>

}
 800fbdc:	bf00      	nop
 800fbde:	3738      	adds	r7, #56	; 0x38
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	24001260 	.word	0x24001260
 800fbe8:	4000e000 	.word	0x4000e000

0800fbec <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08e      	sub	sp, #56	; 0x38
 800fbf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fbf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	605a      	str	r2, [r3, #4]
 800fbfc:	609a      	str	r2, [r3, #8]
 800fbfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fc00:	f107 031c 	add.w	r3, r7, #28
 800fc04:	2200      	movs	r2, #0
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	605a      	str	r2, [r3, #4]
 800fc0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fc0c:	463b      	mov	r3, r7
 800fc0e:	2200      	movs	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	605a      	str	r2, [r3, #4]
 800fc14:	609a      	str	r2, [r3, #8]
 800fc16:	60da      	str	r2, [r3, #12]
 800fc18:	611a      	str	r2, [r3, #16]
 800fc1a:	615a      	str	r2, [r3, #20]
 800fc1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800fc1e:	4b51      	ldr	r3, [pc, #324]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc20:	4a51      	ldr	r2, [pc, #324]	; (800fd68 <_ZL13MX_TIM24_Initv+0x17c>)
 800fc22:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800fc24:	4b4f      	ldr	r3, [pc, #316]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc2a:	4b4e      	ldr	r3, [pc, #312]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800fc30:	4b4c      	ldr	r3, [pc, #304]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc32:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800fc36:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc38:	4b4a      	ldr	r3, [pc, #296]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc3e:	4b49      	ldr	r3, [pc, #292]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800fc44:	4847      	ldr	r0, [pc, #284]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc46:	f00e ff91 	bl	801eb6c <HAL_TIM_Base_Init>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	bf14      	ite	ne
 800fc50:	2301      	movne	r3, #1
 800fc52:	2300      	moveq	r3, #0
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800fc5a:	f000 f9e3 	bl	8010024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fc5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fc64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc68:	4619      	mov	r1, r3
 800fc6a:	483e      	ldr	r0, [pc, #248]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc6c:	f00f ff16 	bl	801fa9c <HAL_TIM_ConfigClockSource>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	bf14      	ite	ne
 800fc76:	2301      	movne	r3, #1
 800fc78:	2300      	moveq	r3, #0
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800fc80:	f000 f9d0 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800fc84:	4837      	ldr	r0, [pc, #220]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fc86:	f00f f8fc 	bl	801ee82 <HAL_TIM_PWM_Init>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	bf14      	ite	ne
 800fc90:	2301      	movne	r3, #1
 800fc92:	2300      	moveq	r3, #0
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fc9a:	f000 f9c3 	bl	8010024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fca2:	2300      	movs	r3, #0
 800fca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fca6:	f107 031c 	add.w	r3, r7, #28
 800fcaa:	4619      	mov	r1, r3
 800fcac:	482d      	ldr	r0, [pc, #180]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fcae:	f010 fdc5 	bl	802083c <HAL_TIMEx_MasterConfigSynchronization>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	bf14      	ite	ne
 800fcb8:	2301      	movne	r3, #1
 800fcba:	2300      	moveq	r3, #0
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fcc2:	f000 f9af 	bl	8010024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fcc6:	2360      	movs	r3, #96	; 0x60
 800fcc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fcd6:	463b      	mov	r3, r7
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4821      	ldr	r0, [pc, #132]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fcde:	f00f fdc9 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	bf14      	ite	ne
 800fce8:	2301      	movne	r3, #1
 800fcea:	2300      	moveq	r3, #0
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800fcf2:	f000 f997 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fcf6:	463b      	mov	r3, r7
 800fcf8:	2204      	movs	r2, #4
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	4819      	ldr	r0, [pc, #100]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fcfe:	f00f fdb9 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bf14      	ite	ne
 800fd08:	2301      	movne	r3, #1
 800fd0a:	2300      	moveq	r3, #0
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800fd12:	f000 f987 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fd16:	463b      	mov	r3, r7
 800fd18:	2208      	movs	r2, #8
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4811      	ldr	r0, [pc, #68]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fd1e:	f00f fda9 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	bf14      	ite	ne
 800fd28:	2301      	movne	r3, #1
 800fd2a:	2300      	moveq	r3, #0
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800fd32:	f000 f977 	bl	8010024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fd36:	463b      	mov	r3, r7
 800fd38:	220c      	movs	r2, #12
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4809      	ldr	r0, [pc, #36]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fd3e:	f00f fd99 	bl	801f874 <HAL_TIM_PWM_ConfigChannel>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	bf14      	ite	ne
 800fd48:	2301      	movne	r3, #1
 800fd4a:	2300      	moveq	r3, #0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800fd52:	f000 f967 	bl	8010024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fd56:	4803      	ldr	r0, [pc, #12]	; (800fd64 <_ZL13MX_TIM24_Initv+0x178>)
 800fd58:	f005 fa72 	bl	8015240 <HAL_TIM_MspPostInit>

}
 800fd5c:	bf00      	nop
 800fd5e:	3738      	adds	r7, #56	; 0x38
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	240012ac 	.word	0x240012ac
 800fd68:	4000e400 	.word	0x4000e400

0800fd6c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fd72:	4b0d      	ldr	r3, [pc, #52]	; (800fda8 <_ZL11MX_DMA_Initv+0x3c>)
 800fd74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fd78:	4a0b      	ldr	r2, [pc, #44]	; (800fda8 <_ZL11MX_DMA_Initv+0x3c>)
 800fd7a:	f043 0301 	orr.w	r3, r3, #1
 800fd7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fd82:	4b09      	ldr	r3, [pc, #36]	; (800fda8 <_ZL11MX_DMA_Initv+0x3c>)
 800fd84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	607b      	str	r3, [r7, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800fd90:	2200      	movs	r2, #0
 800fd92:	2101      	movs	r1, #1
 800fd94:	200c      	movs	r0, #12
 800fd96:	f007 ff20 	bl	8017bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800fd9a:	200c      	movs	r0, #12
 800fd9c:	f007 ff37 	bl	8017c0e <HAL_NVIC_EnableIRQ>

}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	58024400 	.word	0x58024400

0800fdac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	605a      	str	r2, [r3, #4]
 800fdbc:	609a      	str	r2, [r3, #8]
 800fdbe:	60da      	str	r2, [r3, #12]
 800fdc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fdc2:	4b90      	ldr	r3, [pc, #576]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fdc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdc8:	4a8e      	ldr	r2, [pc, #568]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fdca:	f043 0304 	orr.w	r3, r3, #4
 800fdce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fdd2:	4b8c      	ldr	r3, [pc, #560]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fdd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdd8:	f003 0304 	and.w	r3, r3, #4
 800fddc:	623b      	str	r3, [r7, #32]
 800fdde:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fde0:	4b88      	ldr	r3, [pc, #544]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fde2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fde6:	4a87      	ldr	r2, [pc, #540]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fde8:	f043 0320 	orr.w	r3, r3, #32
 800fdec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fdf0:	4b84      	ldr	r3, [pc, #528]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fdf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdf6:	f003 0320 	and.w	r3, r3, #32
 800fdfa:	61fb      	str	r3, [r7, #28]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fdfe:	4b81      	ldr	r3, [pc, #516]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe04:	4a7f      	ldr	r2, [pc, #508]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe0e:	4b7d      	ldr	r3, [pc, #500]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe18:	61bb      	str	r3, [r7, #24]
 800fe1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe1c:	4b79      	ldr	r3, [pc, #484]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe22:	4a78      	ldr	r2, [pc, #480]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe24:	f043 0301 	orr.w	r3, r3, #1
 800fe28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe2c:	4b75      	ldr	r3, [pc, #468]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe32:	f003 0301 	and.w	r3, r3, #1
 800fe36:	617b      	str	r3, [r7, #20]
 800fe38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe3a:	4b72      	ldr	r3, [pc, #456]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe40:	4a70      	ldr	r2, [pc, #448]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe42:	f043 0302 	orr.w	r3, r3, #2
 800fe46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe4a:	4b6e      	ldr	r3, [pc, #440]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe50:	f003 0302 	and.w	r3, r3, #2
 800fe54:	613b      	str	r3, [r7, #16]
 800fe56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fe58:	4b6a      	ldr	r3, [pc, #424]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe5e:	4a69      	ldr	r2, [pc, #420]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe60:	f043 0310 	orr.w	r3, r3, #16
 800fe64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe68:	4b66      	ldr	r3, [pc, #408]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe6e:	f003 0310 	and.w	r3, r3, #16
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fe76:	4b63      	ldr	r3, [pc, #396]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe7c:	4a61      	ldr	r2, [pc, #388]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe7e:	f043 0308 	orr.w	r3, r3, #8
 800fe82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe86:	4b5f      	ldr	r3, [pc, #380]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe8c:	f003 0308 	and.w	r3, r3, #8
 800fe90:	60bb      	str	r3, [r7, #8]
 800fe92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe94:	4b5b      	ldr	r3, [pc, #364]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe9a:	4a5a      	ldr	r2, [pc, #360]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fe9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fea4:	4b57      	ldr	r3, [pc, #348]	; (8010004 <_ZL12MX_GPIO_Initv+0x258>)
 800fea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800feaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feae:	607b      	str	r3, [r7, #4]
 800feb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800feb2:	2200      	movs	r2, #0
 800feb4:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800feb8:	4853      	ldr	r0, [pc, #332]	; (8010008 <_ZL12MX_GPIO_Initv+0x25c>)
 800feba:	f00b fab3 	bl	801b424 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800febe:	2200      	movs	r2, #0
 800fec0:	21c0      	movs	r1, #192	; 0xc0
 800fec2:	4852      	ldr	r0, [pc, #328]	; (801000c <_ZL12MX_GPIO_Initv+0x260>)
 800fec4:	f00b faae 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800fec8:	2200      	movs	r2, #0
 800feca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fece:	4850      	ldr	r0, [pc, #320]	; (8010010 <_ZL12MX_GPIO_Initv+0x264>)
 800fed0:	f00b faa8 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800fed4:	2200      	movs	r2, #0
 800fed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800feda:	484e      	ldr	r0, [pc, #312]	; (8010014 <_ZL12MX_GPIO_Initv+0x268>)
 800fedc:	f00b faa2 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800fee0:	2200      	movs	r2, #0
 800fee2:	2180      	movs	r1, #128	; 0x80
 800fee4:	484c      	ldr	r0, [pc, #304]	; (8010018 <_ZL12MX_GPIO_Initv+0x26c>)
 800fee6:	f00b fa9d 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800feea:	2201      	movs	r2, #1
 800feec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fef0:	4849      	ldr	r0, [pc, #292]	; (8010018 <_ZL12MX_GPIO_Initv+0x26c>)
 800fef2:	f00b fa97 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800fef6:	2200      	movs	r2, #0
 800fef8:	2102      	movs	r1, #2
 800fefa:	4848      	ldr	r0, [pc, #288]	; (801001c <_ZL12MX_GPIO_Initv+0x270>)
 800fefc:	f00b fa92 	bl	801b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800ff00:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800ff04:	627b      	str	r3, [r7, #36]	; 0x24
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff06:	2301      	movs	r3, #1
 800ff08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ff0a:	2302      	movs	r3, #2
 800ff0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff16:	4619      	mov	r1, r3
 800ff18:	483b      	ldr	r0, [pc, #236]	; (8010008 <_ZL12MX_GPIO_Initv+0x25c>)
 800ff1a:	f00b f8c3 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ff1e:	2340      	movs	r3, #64	; 0x40
 800ff20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff22:	2301      	movs	r3, #1
 800ff24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ff2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff32:	4619      	mov	r1, r3
 800ff34:	4835      	ldr	r0, [pc, #212]	; (801000c <_ZL12MX_GPIO_Initv+0x260>)
 800ff36:	f00b f8b5 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800ff3a:	2380      	movs	r3, #128	; 0x80
 800ff3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ff42:	2302      	movs	r3, #2
 800ff44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff46:	2300      	movs	r3, #0
 800ff48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800ff4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff4e:	4619      	mov	r1, r3
 800ff50:	482e      	ldr	r0, [pc, #184]	; (801000c <_ZL12MX_GPIO_Initv+0x260>)
 800ff52:	f00b f8a7 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800ff56:	230e      	movs	r3, #14
 800ff58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ff5e:	2302      	movs	r3, #2
 800ff60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff66:	4619      	mov	r1, r3
 800ff68:	4827      	ldr	r0, [pc, #156]	; (8010008 <_ZL12MX_GPIO_Initv+0x25c>)
 800ff6a:	f00b f89b 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ff6e:	2340      	movs	r3, #64	; 0x40
 800ff70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ff72:	2303      	movs	r3, #3
 800ff74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff76:	2300      	movs	r3, #0
 800ff78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4827      	ldr	r0, [pc, #156]	; (8010020 <_ZL12MX_GPIO_Initv+0x274>)
 800ff82:	f00b f88f 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ff86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ff90:	2302      	movs	r3, #2
 800ff92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff94:	2300      	movs	r3, #0
 800ff96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ff98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	481c      	ldr	r0, [pc, #112]	; (8010010 <_ZL12MX_GPIO_Initv+0x264>)
 800ffa0:	f00b f880 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ffa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ffa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ffb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4815      	ldr	r0, [pc, #84]	; (8010014 <_ZL12MX_GPIO_Initv+0x268>)
 800ffbe:	f00b f871 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800ffc2:	f44f 7320 	mov.w	r3, #640	; 0x280
 800ffc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ffcc:	2302      	movs	r3, #2
 800ffce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ffd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffd8:	4619      	mov	r1, r3
 800ffda:	480f      	ldr	r0, [pc, #60]	; (8010018 <_ZL12MX_GPIO_Initv+0x26c>)
 800ffdc:	f00b f862 	bl	801b0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffec:	2300      	movs	r3, #0
 800ffee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800fff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fff4:	4619      	mov	r1, r3
 800fff6:	4809      	ldr	r0, [pc, #36]	; (801001c <_ZL12MX_GPIO_Initv+0x270>)
 800fff8:	f00b f854 	bl	801b0a4 <HAL_GPIO_Init>

}
 800fffc:	bf00      	nop
 800fffe:	3738      	adds	r7, #56	; 0x38
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	58024400 	.word	0x58024400
 8010008:	58020800 	.word	0x58020800
 801000c:	58021400 	.word	0x58021400
 8010010:	58020c00 	.word	0x58020c00
 8010014:	58021800 	.word	0x58021800
 8010018:	58020400 	.word	0x58020400
 801001c:	58021000 	.word	0x58021000
 8010020:	58020000 	.word	0x58020000

08010024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010024:	b480      	push	{r7}
 8010026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010028:	b672      	cpsid	i
}
 801002a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801002c:	e7fe      	b.n	801002c <Error_Handler+0x8>

0801002e <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 801002e:	b580      	push	{r7, lr}
 8010030:	b082      	sub	sp, #8
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	f7fd fafb 	bl	800d634 <_ZNKSt14_Function_base8_M_emptyEv>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d001      	beq.n	8010048 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8010044:	f010 fe25 	bl	8020c92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	4610      	mov	r0, r2
 8010050:	4798      	blx	r3
 8010052:	bf00      	nop
    }
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 801005a:	b580      	push	{r7, lr}
 801005c:	b082      	sub	sp, #8
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	f7fd fac4 	bl	800d5f2 <_ZNSt14_Function_baseC1Ev>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801007e:	6838      	ldr	r0, [r7, #0]
 8010080:	f000 fbba 	bl	80107f8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 8010084:	4603      	mov	r3, r0
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fbc0 	bl	801080e <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 8010096:	b580      	push	{r7, lr}
 8010098:	b086      	sub	sp, #24
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80100a0:	f107 0308 	add.w	r3, r7, #8
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 fbe3 	bl	8010872 <_ZNSt8functionIFvvEEC1ERKS1_>
 80100ac:	f107 0308 	add.w	r3, r7, #8
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f000 fbff 	bl	80108b6 <_ZNSt8functionIFvvEE4swapERS1_>
 80100b8:	f107 0308 	add.w	r3, r7, #8
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fd fb25 	bl	800d70c <_ZNSt8functionIFvvEED1Ev>
	return *this;
 80100c2:	687b      	ldr	r3, [r7, #4]
      }
 80100c4:	4618      	mov	r0, r3
 80100c6:	3718      	adds	r7, #24
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	f107 030c 	add.w	r3, r7, #12
 80100da:	4611      	mov	r1, r2
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 fc0b 	bl	80108f8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	4618      	mov	r0, r3
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	1d1a      	adds	r2, r3, #4
 80100f8:	f107 030c 	add.w	r3, r7, #12
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f000 fbfa 	bl	80108f8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 8010110:	b590      	push	{r4, r7, lr}
 8010112:	b08b      	sub	sp, #44	; 0x2c
 8010114:	af02      	add	r7, sp, #8
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fbfb 	bl	8010918 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 8010122:	4603      	mov	r3, r0
 8010124:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fc05 	bl	8010936 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 801012c:	4603      	mov	r3, r0
 801012e:	60fb      	str	r3, [r7, #12]
 8010130:	f107 020c 	add.w	r2, r7, #12
 8010134:	f107 0308 	add.w	r3, r7, #8
 8010138:	4611      	mov	r1, r2
 801013a:	4618      	mov	r0, r3
 801013c:	f7fa ff5c 	bl	800aff8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d112      	bne.n	801016c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 fc02 	bl	8010950 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 801014c:	f107 0308 	add.w	r3, r7, #8
 8010150:	4618      	mov	r0, r3
 8010152:	f000 fc0a 	bl	801096a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 8010156:	4603      	mov	r3, r0
 8010158:	461a      	mov	r2, r3
 801015a:	f107 0310 	add.w	r3, r7, #16
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	4618      	mov	r0, r3
 8010162:	f7fa ff5d 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 801016c:	2301      	movs	r3, #1
 801016e:	e000      	b.n	8010172 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 8010170:	2300      	movs	r3, #0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d01f      	beq.n	80101b6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010176:	687c      	ldr	r4, [r7, #4]
 8010178:	f107 0208 	add.w	r2, r7, #8
 801017c:	f107 0314 	add.w	r3, r7, #20
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7fa ff61 	bl	800b04a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 8010188:	6838      	ldr	r0, [r7, #0]
 801018a:	f000 fbfc 	bl	8010986 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 801018e:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010190:	f107 0318 	add.w	r3, r7, #24
 8010194:	4611      	mov	r1, r2
 8010196:	4618      	mov	r0, r3
 8010198:	f000 fc00 	bl	801099c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 801019c:	f107 0218 	add.w	r2, r7, #24
 80101a0:	f107 031c 	add.w	r3, r7, #28
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	4613      	mov	r3, r2
 80101a8:	4a08      	ldr	r2, [pc, #32]	; (80101cc <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 80101aa:	6979      	ldr	r1, [r7, #20]
 80101ac:	4620      	mov	r0, r4
 80101ae:	f000 fc06 	bl	80109be <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 80101b2:	4603      	mov	r3, r0
 80101b4:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80101b6:	f107 0308 	add.w	r3, r7, #8
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 fbd5 	bl	801096a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 80101c0:	4603      	mov	r3, r0
 80101c2:	3304      	adds	r3, #4
      }
 80101c4:	4618      	mov	r0, r3
 80101c6:	3724      	adds	r7, #36	; 0x24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd90      	pop	{r4, r7, pc}
 80101cc:	080212a4 	.word	0x080212a4

080101d0 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80101da:	687c      	ldr	r4, [r7, #4]
 80101dc:	6838      	ldr	r0, [r7, #0]
 80101de:	f000 fc2c 	bl	8010a3a <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80101e2:	4603      	mov	r3, r0
 80101e4:	461a      	mov	r2, r3
 80101e6:	4629      	mov	r1, r5
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fc42 	bl	8010a72 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bdb0      	pop	{r4, r5, r7, pc}

080101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	109b      	asrs	r3, r3, #2
 801020c:	4618      	mov	r0, r3
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <_ZNSt6vectorIP13StreamMessageSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4413      	add	r3, r2
      }
 801022c:	4618      	mov	r0, r3
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	f107 030c 	add.w	r3, r7, #12
 8010246:	4611      	mov	r1, r2
 8010248:	4618      	mov	r0, r3
 801024a:	f000 fc27 	bl	8010a9c <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4413      	add	r3, r2
 801026c:	60fb      	str	r3, [r7, #12]
 801026e:	f107 020c 	add.w	r2, r7, #12
 8010272:	f107 0308 	add.w	r3, r7, #8
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fc0f 	bl	8010a9c <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8010292:	6838      	ldr	r0, [r7, #0]
 8010294:	f7fd feaa 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010298:	4603      	mov	r3, r0
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	601a      	str	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4618      	mov	r0, r3
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZNSt6vectorIP13StreamMessageSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b084      	sub	sp, #16
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f7ff ffbf 	bl	8010238 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 80102ba:	4603      	mov	r3, r0
 80102bc:	60bb      	str	r3, [r7, #8]
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 fbfc 	bl	8010abc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE6cbeginEv>
 80102c4:	4603      	mov	r3, r0
 80102c6:	60fb      	str	r3, [r7, #12]
 80102c8:	f107 020c 	add.w	r2, r7, #12
 80102cc:	463b      	mov	r3, r7
 80102ce:	4611      	mov	r1, r2
 80102d0:	4618      	mov	r0, r3
 80102d2:	f000 fc03 	bl	8010adc <_ZN9__gnu_cxxmiIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80102d6:	4602      	mov	r2, r0
 80102d8:	f107 0308 	add.w	r3, r7, #8
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff ffba 	bl	8010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 80102e4:	4603      	mov	r3, r0
 80102e6:	4619      	mov	r1, r3
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 fc24 	bl	8010b36 <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80102ee:	4603      	mov	r3, r0
 80102f0:	4618      	mov	r0, r3
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fc57 	bl	8010bb4 <_ZNSaIP13StreamMessageEC1Ev>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	f000 fc5f 	bl	8010bcc <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010318:	b480      	push	{r7}
 801031a:	b083      	sub	sp, #12
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4618      	mov	r0, r3
 8010324:	370c      	adds	r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr

0801032e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	689a      	ldr	r2, [r3, #8]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010346:	461a      	mov	r2, r3
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fc53 	bl	8010bf4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4618      	mov	r0, r3
 8010352:	f7fd fdf2 	bl	800df3a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4618      	mov	r0, r3
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010360:	b5b0      	push	{r4, r5, r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681c      	ldr	r4, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	f000 fc51 	bl	8010c1a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010378:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801037a:	461a      	mov	r2, r3
 801037c:	4629      	mov	r1, r5
 801037e:	4620      	mov	r0, r4
 8010380:	f000 fc56 	bl	8010c30 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff ffd1 	bl	801032e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bdb0      	pop	{r4, r5, r7, pc}

08010396 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010396:	b580      	push	{r7, lr}
 8010398:	b082      	sub	sp, #8
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80103a0:	6838      	ldr	r0, [r7, #0]
 80103a2:	f000 fc53 	bl	8010c4c <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 80103a6:	4603      	mov	r3, r0
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fc59 	bl	8010c62 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	1d1a      	adds	r2, r3, #4
 80103c4:	f107 030c 	add.w	r3, r7, #12
 80103c8:	4611      	mov	r1, r2
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fb66 	bl	8010a9c <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685a      	ldr	r2, [r3, #4]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d00c      	beq.n	801040a <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	683a      	ldr	r2, [r7, #0]
 80103f8:	4619      	mov	r1, r3
 80103fa:	f000 fc79 	bl	8010cf0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	1d1a      	adds	r2, r3, #4
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	605a      	str	r2, [r3, #4]
      }
 8010408:	e008      	b.n	801041c <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff ffd4 	bl	80103b8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010410:	4603      	mov	r3, r0
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	4619      	mov	r1, r3
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fc7c 	bl	8010d14 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801041c:	bf00      	nop
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010424:	b590      	push	{r4, r7, lr}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	f7fd f8de 	bl	800d5f2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010436:	463b      	mov	r3, r7
 8010438:	4618      	mov	r0, r3
 801043a:	f000 fce7 	bl	8010e0c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d00f      	beq.n	8010464 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010444:	687c      	ldr	r4, [r7, #4]
 8010446:	463b      	mov	r3, r7
 8010448:	4618      	mov	r0, r3
 801044a:	f000 fcea 	bl	8010e22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 801044e:	4603      	mov	r3, r0
 8010450:	4619      	mov	r1, r3
 8010452:	4620      	mov	r0, r4
 8010454:	f000 fcf0 	bl	8010e38 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4a05      	ldr	r2, [pc, #20]	; (8010470 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x4c>)
 801045c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a04      	ldr	r2, [pc, #16]	; (8010474 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x50>)
 8010462:	609a      	str	r2, [r3, #8]
      }
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	370c      	adds	r7, #12
 801046a:	46bd      	mov	sp, r7
 801046c:	bd90      	pop	{r4, r7, pc}
 801046e:	bf00      	nop
 8010470:	08010e5d 	.word	0x08010e5d
 8010474:	08010e7b 	.word	0x08010e7b

08010478 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7fd fe92 	bl	800e1aa <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010486:	4603      	mov	r3, r0
 8010488:	4618      	mov	r0, r3
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	f000 fd0c 	bl	8010eb8 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 80104a0:	4603      	mov	r3, r0
      }
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b084      	sub	sp, #16
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	f107 030c 	add.w	r3, r7, #12
 80104b8:	4611      	mov	r1, r2
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 fd07 	bl	8010ece <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b084      	sub	sp, #16
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	1d1a      	adds	r2, r3, #4
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f000 fcf6 	bl	8010ece <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fd0a 	bl	8010f0e <_ZNSaIP5FieldIJEEED1Ev>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 fced 	bl	8010eee <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4618      	mov	r0, r3
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 801051e:	b580      	push	{r7, lr}
 8010520:	b082      	sub	sp, #8
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff ffeb 	bl	8010504 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010538:	b590      	push	{r4, r7, lr}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	607a      	str	r2, [r7, #4]
 8010542:	603b      	str	r3, [r7, #0]
 8010544:	460b      	mov	r3, r1
 8010546:	817b      	strh	r3, [r7, #10]
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	601a      	str	r2, [r3, #0]
 801054e:	897a      	ldrh	r2, [r7, #10]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	809a      	strh	r2, [r3, #4]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3308      	adds	r3, #8
 8010558:	4618      	mov	r0, r3
 801055a:	f7ff ffe0 	bl	801051e <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f000 fd10 	bl	8010f8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801056c:	68fc      	ldr	r4, [r7, #12]
 801056e:	f107 030a 	add.w	r3, r7, #10
 8010572:	4619      	mov	r1, r3
 8010574:	4804      	ldr	r0, [pc, #16]	; (8010588 <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 8010576:	f000 fd2d 	bl	8010fd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801057a:	4603      	mov	r3, r0
 801057c:	601c      	str	r4, [r3, #0]
    }
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	4618      	mov	r0, r3
 8010582:	3714      	adds	r7, #20
 8010584:	46bd      	mov	sp, r7
 8010586:	bd90      	pop	{r4, r7, pc}
 8010588:	240001ac 	.word	0x240001ac

0801058c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801058c:	b590      	push	{r4, r7, lr}
 801058e:	b085      	sub	sp, #20
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	607a      	str	r2, [r7, #4]
 8010596:	603b      	str	r3, [r7, #0]
 8010598:	460b      	mov	r3, r1
 801059a:	817b      	strh	r3, [r7, #10]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	897a      	ldrh	r2, [r7, #10]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	809a      	strh	r2, [r3, #4]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3308      	adds	r3, #8
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7ff ffb6 	bl	801051e <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	615a      	str	r2, [r3, #20]
        build(fields...);
 80105b8:	6a3a      	ldr	r2, [r7, #32]
 80105ba:	6839      	ldr	r1, [r7, #0]
 80105bc:	68f8      	ldr	r0, [r7, #12]
 80105be:	f000 fd65 	bl	801108c <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80105c2:	68fc      	ldr	r4, [r7, #12]
 80105c4:	f107 030a 	add.w	r3, r7, #10
 80105c8:	4619      	mov	r1, r3
 80105ca:	4805      	ldr	r0, [pc, #20]	; (80105e0 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 80105cc:	f000 fd02 	bl	8010fd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80105d0:	4603      	mov	r3, r0
 80105d2:	601c      	str	r4, [r3, #0]
    }
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	4618      	mov	r0, r3
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd90      	pop	{r4, r7, pc}
 80105de:	bf00      	nop
 80105e0:	240001ac 	.word	0x240001ac

080105e4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80105e4:	b590      	push	{r4, r7, lr}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	607a      	str	r2, [r7, #4]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	460b      	mov	r3, r1
 80105f2:	817b      	strh	r3, [r7, #10]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2200      	movs	r2, #0
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	897a      	ldrh	r2, [r7, #10]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	809a      	strh	r2, [r3, #4]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3308      	adds	r3, #8
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff ff8a 	bl	801051e <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010610:	6a3a      	ldr	r2, [r7, #32]
 8010612:	6839      	ldr	r1, [r7, #0]
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f000 fd61 	bl	80110dc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801061a:	68fc      	ldr	r4, [r7, #12]
 801061c:	f107 030a 	add.w	r3, r7, #10
 8010620:	4619      	mov	r1, r3
 8010622:	4805      	ldr	r0, [pc, #20]	; (8010638 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 8010624:	f000 fcd6 	bl	8010fd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010628:	4603      	mov	r3, r0
 801062a:	601c      	str	r4, [r3, #0]
    }
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	4618      	mov	r0, r3
 8010630:	3714      	adds	r7, #20
 8010632:	46bd      	mov	sp, r7
 8010634:	bd90      	pop	{r4, r7, pc}
 8010636:	bf00      	nop
 8010638:	240001ac 	.word	0x240001ac

0801063c <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801063c:	b590      	push	{r4, r7, lr}
 801063e:	b085      	sub	sp, #20
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	607a      	str	r2, [r7, #4]
 8010646:	603b      	str	r3, [r7, #0]
 8010648:	460b      	mov	r3, r1
 801064a:	817b      	strh	r3, [r7, #10]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2200      	movs	r2, #0
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	897a      	ldrh	r2, [r7, #10]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	809a      	strh	r2, [r3, #4]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	3308      	adds	r3, #8
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff ff5e 	bl	801051e <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010668:	6a3a      	ldr	r2, [r7, #32]
 801066a:	6839      	ldr	r1, [r7, #0]
 801066c:	68f8      	ldr	r0, [r7, #12]
 801066e:	f000 fd5d 	bl	801112c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010672:	68fc      	ldr	r4, [r7, #12]
 8010674:	f107 030a 	add.w	r3, r7, #10
 8010678:	4619      	mov	r1, r3
 801067a:	4805      	ldr	r0, [pc, #20]	; (8010690 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 801067c:	f000 fcaa 	bl	8010fd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010680:	4603      	mov	r3, r0
 8010682:	601c      	str	r4, [r3, #0]
    }
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	4618      	mov	r0, r3
 8010688:	3714      	adds	r7, #20
 801068a:	46bd      	mov	sp, r7
 801068c:	bd90      	pop	{r4, r7, pc}
 801068e:	bf00      	nop
 8010690:	240001ac 	.word	0x240001ac

08010694 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7fd fed3 	bl	800e448 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 80106a2:	4603      	mov	r3, r0
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 fd60 	bl	801117c <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 80106bc:	4603      	mov	r3, r0
      }
 80106be:	4618      	mov	r0, r3
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6839      	ldr	r1, [r7, #0]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 fd5c 	bl	8011192 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80106da:	4603      	mov	r3, r0
 80106dc:	60bb      	str	r3, [r7, #8]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 fd95 	bl	8011210 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80106e6:	4603      	mov	r3, r0
 80106e8:	60fb      	str	r3, [r7, #12]
 80106ea:	f107 020c 	add.w	r2, r7, #12
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	4611      	mov	r1, r2
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 fd9c 	bl	8011232 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80106fa:	4603      	mov	r3, r0
 80106fc:	f083 0301 	eor.w	r3, r3, #1
 8010700:	b2db      	uxtb	r3, r3
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6839      	ldr	r1, [r7, #0]
 8010718:	4618      	mov	r0, r3
 801071a:	f000 fd9e 	bl	801125a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 801071e:	4603      	mov	r3, r0
 8010720:	60bb      	str	r3, [r7, #8]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	4618      	mov	r0, r3
 8010726:	f000 fdd7 	bl	80112d8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801072a:	4603      	mov	r3, r0
 801072c:	60fb      	str	r3, [r7, #12]
 801072e:	f107 020c 	add.w	r2, r7, #12
 8010732:	f107 0308 	add.w	r3, r7, #8
 8010736:	4611      	mov	r1, r2
 8010738:	4618      	mov	r0, r3
 801073a:	f000 fdde 	bl	80112fa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 801073e:	4603      	mov	r3, r0
 8010740:	f083 0301 	eor.w	r3, r3, #1
 8010744:	b2db      	uxtb	r3, r3
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
	...

08010750 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010750:	b590      	push	{r4, r7, lr}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	4618      	mov	r0, r3
 801075e:	f7fc ff48 	bl	800d5f2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010762:	463b      	mov	r3, r7
 8010764:	4618      	mov	r0, r3
 8010766:	f000 fddc 	bl	8011322 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00f      	beq.n	8010790 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010770:	687c      	ldr	r4, [r7, #4]
 8010772:	463b      	mov	r3, r7
 8010774:	4618      	mov	r0, r3
 8010776:	f000 fddf 	bl	8011338 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801077a:	4603      	mov	r3, r0
 801077c:	4619      	mov	r1, r3
 801077e:	4620      	mov	r0, r4
 8010780:	f000 fde5 	bl	801134e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4a05      	ldr	r2, [pc, #20]	; (801079c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 8010788:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a04      	ldr	r2, [pc, #16]	; (80107a0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 801078e:	609a      	str	r2, [r3, #8]
      }
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4618      	mov	r0, r3
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	bd90      	pop	{r4, r7, pc}
 801079a:	bf00      	nop
 801079c:	08011373 	.word	0x08011373
 80107a0:	08011391 	.word	0x08011391

080107a4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80107a4:	b590      	push	{r4, r7, lr}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fc ff1e 	bl	800d5f2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80107b6:	463b      	mov	r3, r7
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 fe08 	bl	80113ce <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d00f      	beq.n	80107e4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80107c4:	687c      	ldr	r4, [r7, #4]
 80107c6:	463b      	mov	r3, r7
 80107c8:	4618      	mov	r0, r3
 80107ca:	f000 fe0b 	bl	80113e4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80107ce:	4603      	mov	r3, r0
 80107d0:	4619      	mov	r1, r3
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fe11 	bl	80113fa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a05      	ldr	r2, [pc, #20]	; (80107f0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 80107dc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a04      	ldr	r2, [pc, #16]	; (80107f4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 80107e2:	609a      	str	r2, [r3, #8]
      }
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4618      	mov	r0, r3
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd90      	pop	{r4, r7, pc}
 80107ee:	bf00      	nop
 80107f0:	0801141f 	.word	0x0801141f
 80107f4:	0801143d 	.word	0x0801143d

080107f8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4618      	mov	r0, r3
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 801080e:	b5b0      	push	{r4, r5, r7, lr}
 8010810:	b082      	sub	sp, #8
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	685a      	ldr	r2, [r3, #4]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	689b      	ldr	r3, [r3, #8]
 8010820:	429a      	cmp	r2, r3
 8010822:	d011      	beq.n	8010848 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010824:	687c      	ldr	r4, [r7, #4]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685d      	ldr	r5, [r3, #4]
 801082a:	6838      	ldr	r0, [r7, #0]
 801082c:	f000 fe25 	bl	801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010830:	4603      	mov	r3, r0
 8010832:	461a      	mov	r2, r3
 8010834:	4629      	mov	r1, r5
 8010836:	4620      	mov	r0, r4
 8010838:	f000 fe3f 	bl	80114ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	1d1a      	adds	r2, r3, #4
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	605a      	str	r2, [r3, #4]
 8010846:	e00c      	b.n	8010862 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff fc4f 	bl	80100ec <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 801084e:	4604      	mov	r4, r0
 8010850:	6838      	ldr	r0, [r7, #0]
 8010852:	f000 fe12 	bl	801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010856:	4603      	mov	r3, r0
 8010858:	461a      	mov	r2, r3
 801085a:	4621      	mov	r1, r4
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 fe3f 	bl	80114e0 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 feb8 	bl	80115d8 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 8010868:	4603      	mov	r3, r0
      }
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bdb0      	pop	{r4, r5, r7, pc}

08010872 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8010872:	b580      	push	{r7, lr}
 8010874:	b082      	sub	sp, #8
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
    : _Function_base()
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4618      	mov	r0, r3
 8010880:	f7fc feb7 	bl	800d5f2 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010884:	6838      	ldr	r0, [r7, #0]
 8010886:	f000 fec2 	bl	801160e <_ZNKSt8functionIFvvEEcvbEv>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d00d      	beq.n	80108ac <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	689b      	ldr	r3, [r3, #8]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	6839      	ldr	r1, [r7, #0]
 8010898:	2202      	movs	r2, #2
 801089a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	68da      	ldr	r2, [r3, #12]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	689a      	ldr	r2, [r3, #8]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	609a      	str	r2, [r3, #8]
    }
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b082      	sub	sp, #8
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	4611      	mov	r1, r2
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 feb1 	bl	801162e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f103 0208 	add.w	r2, r3, #8
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	3308      	adds	r3, #8
 80108d6:	4619      	mov	r1, r3
 80108d8:	4610      	mov	r0, r2
 80108da:	f000 fecf 	bl	801167c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f103 020c 	add.w	r2, r3, #12
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	330c      	adds	r3, #12
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f000 fee5 	bl	80116ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	4618      	mov	r0, r3
 8010928:	f000 fee6 	bl	80116f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 801092c:	4603      	mov	r3, r0
 801092e:	4618      	mov	r0, r3
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010936:	b580      	push	{r7, lr}
 8010938:	b082      	sub	sp, #8
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	f7fa fc7c 	bl	800b23e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 8010946:	4603      	mov	r3, r0
 8010948:	4618      	mov	r0, r3
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 fee3 	bl	8011726 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010960:	bf00      	nop
 8010962:	4620      	mov	r0, r4
 8010964:	370c      	adds	r7, #12
 8010966:	46bd      	mov	sp, r7
 8010968:	bd90      	pop	{r4, r7, pc}

0801096a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4618      	mov	r0, r3
 8010978:	f7fa fc72 	bl	800b260 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801097c:	4603      	mov	r3, r0
 801097e:	4618      	mov	r0, r3
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010986:	b480      	push	{r7}
 8010988:	b083      	sub	sp, #12
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 80109a6:	6838      	ldr	r0, [r7, #0]
 80109a8:	f000 fec8 	bl	801173c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 80109ac:	4603      	mov	r3, r0
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fece 	bl	8011752 <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80109be:	b5b0      	push	{r4, r5, r7, lr}
 80109c0:	b088      	sub	sp, #32
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	60f8      	str	r0, [r7, #12]
 80109c6:	60b9      	str	r1, [r7, #8]
 80109c8:	607a      	str	r2, [r7, #4]
 80109ca:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7f0 fc4a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80109d2:	4604      	mov	r4, r0
 80109d4:	6838      	ldr	r0, [r7, #0]
 80109d6:	f000 fecf 	bl	8011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80109da:	4605      	mov	r5, r0
 80109dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109de:	f7f0 fc58 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80109e2:	4603      	mov	r3, r0
 80109e4:	462a      	mov	r2, r5
 80109e6:	4621      	mov	r1, r4
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 fed0 	bl	801178e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80109ee:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80109f0:	69f8      	ldr	r0, [r7, #28]
 80109f2:	f7fa fd66 	bl	800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80109f6:	4603      	mov	r3, r0
 80109f8:	f107 0010 	add.w	r0, r7, #16
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	68f9      	ldr	r1, [r7, #12]
 8010a00:	f7fa fc3c 	bl	800b27c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d007      	beq.n	8010a1a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010a0a:	6939      	ldr	r1, [r7, #16]
 8010a0c:	697a      	ldr	r2, [r7, #20]
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f000 fedf 	bl	80117d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8010a16:	4603      	mov	r3, r0
 8010a18:	e00b      	b.n	8010a32 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010a1a:	69f9      	ldr	r1, [r7, #28]
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f7fa fd63 	bl	800b4e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	f107 0318 	add.w	r3, r7, #24
 8010a28:	4611      	mov	r1, r2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7fa fd6d 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8010a30:	69bb      	ldr	r3, [r7, #24]
      }
 8010a32:	4618      	mov	r0, r3
 8010a34:	3720      	adds	r7, #32
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bdb0      	pop	{r4, r5, r7, pc}

08010a3a <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010a50:	b590      	push	{r4, r7, lr}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	7239      	strb	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	4621      	mov	r1, r4
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 ff05 	bl	8011872 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd90      	pop	{r4, r7, pc}

08010a72 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010a72:	b5b0      	push	{r4, r5, r7, lr}
 8010a74:	b084      	sub	sp, #16
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	60f8      	str	r0, [r7, #12]
 8010a7a:	7239      	strb	r1, [r7, #8]
 8010a7c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8010a7e:	68fc      	ldr	r4, [r7, #12]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ffda 	bl	8010a3a <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a86:	4603      	mov	r3, r0
 8010a88:	461a      	mov	r2, r3
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f7ff ffdf 	bl	8010a50 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bdb0      	pop	{r4, r5, r7, pc}

08010a9c <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	f107 030c 	add.w	r3, r7, #12
 8010aca:	4611      	mov	r1, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	f000 fee8 	bl	80118a2 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <_ZN9__gnu_cxxmiIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 feeb 	bl	80118c2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010aec:	4603      	mov	r3, r0
 8010aee:	681c      	ldr	r4, [r3, #0]
 8010af0:	6838      	ldr	r0, [r7, #0]
 8010af2:	f000 fee6 	bl	80118c2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010af6:	4603      	mov	r3, r0
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	1ae3      	subs	r3, r4, r3
 8010afc:	109b      	asrs	r3, r3, #2
 8010afe:	4618      	mov	r0, r3
 8010b00:	370c      	adds	r7, #12
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd90      	pop	{r4, r7, pc}

08010b06 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8010b06:	b590      	push	{r4, r7, lr}
 8010b08:	b085      	sub	sp, #20
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	60f8      	str	r0, [r7, #12]
 8010b0e:	60b9      	str	r1, [r7, #8]
 8010b10:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f000 fee0 	bl	80118d8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	68b8      	ldr	r0, [r7, #8]
 8010b1c:	f000 fedc 	bl	80118d8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010b20:	4603      	mov	r3, r0
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	4619      	mov	r1, r3
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 fee1 	bl	80118ee <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8010b2c:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3714      	adds	r7, #20
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd90      	pop	{r4, r7, pc}

08010b36 <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 8010b36:	b590      	push	{r4, r7, lr}
 8010b38:	b085      	sub	sp, #20
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8010b40:	463b      	mov	r3, r7
 8010b42:	2101      	movs	r1, #1
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fb87 	bl	8010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	60bb      	str	r3, [r7, #8]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff fc32 	bl	80103b8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010b54:	4603      	mov	r3, r0
 8010b56:	60fb      	str	r3, [r7, #12]
 8010b58:	f107 020c 	add.w	r2, r7, #12
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4611      	mov	r1, r2
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fd fa4d 	bl	800e002 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	f083 0301 	eor.w	r3, r3, #1
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00e      	beq.n	8010b92 <_ZNSt6vectorIP13StreamMessageSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x5c>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8010b74:	463b      	mov	r3, r7
 8010b76:	2101      	movs	r1, #1
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff fb6d 	bl	8010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 8010b7e:	4604      	mov	r4, r0
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fc19 	bl	80103b8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010b86:	4603      	mov	r3, r0
 8010b88:	683a      	ldr	r2, [r7, #0]
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ff ffba 	bl	8010b06 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	1f1a      	subs	r2, r3, #4
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	f000 fec3 	bl	8011930 <_ZNSt16allocator_traitsISaIP13StreamMessageEE7destroyIS1_EEvRS2_PT_>
      return __position;
 8010baa:	683b      	ldr	r3, [r7, #0]
    }
 8010bac:	4618      	mov	r0, r3
 8010bae:	3714      	adds	r7, #20
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd90      	pop	{r4, r7, pc}

08010bb4 <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fec3 	bl	8011948 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	601a      	str	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	605a      	str	r2, [r3, #4]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	609a      	str	r2, [r3, #8]
	{ }
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4618      	mov	r0, r3
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	607a      	str	r2, [r7, #4]
	if (__p)
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d005      	beq.n	8010c12 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	68b9      	ldr	r1, [r7, #8]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 fea6 	bl	801195e <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010c1a:	b480      	push	{r7}
 8010c1c:	b083      	sub	sp, #12
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010c3c:	68b9      	ldr	r1, [r7, #8]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f000 feac 	bl	801199c <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 8010c44:	bf00      	nop
 8010c46:	3710      	adds	r7, #16
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	4618      	mov	r0, r3
 8010c58:	370c      	adds	r7, #12
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010c62:	b5b0      	push	{r4, r5, r7, lr}
 8010c64:	b082      	sub	sp, #8
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685a      	ldr	r2, [r3, #4]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d011      	beq.n	8010c9c <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010c78:	687c      	ldr	r4, [r7, #4]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	685d      	ldr	r5, [r3, #4]
 8010c7e:	6838      	ldr	r0, [r7, #0]
 8010c80:	f000 fea2 	bl	80119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	4629      	mov	r1, r5
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 febc 	bl	8011a08 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	1d1a      	adds	r2, r3, #4
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	605a      	str	r2, [r3, #4]
 8010c9a:	e00c      	b.n	8010cb6 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff fc14 	bl	80104ca <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	6838      	ldr	r0, [r7, #0]
 8010ca6:	f000 fe8f 	bl	80119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010caa:	4603      	mov	r3, r0
 8010cac:	461a      	mov	r2, r3
 8010cae:	4621      	mov	r1, r4
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 febb 	bl	8011a2c <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 ff34 	bl	8011b24 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 8010cbc:	4603      	mov	r3, r0
      }
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bdb0      	pop	{r4, r5, r7, pc}

08010cc6 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8010cc6:	b590      	push	{r4, r7, lr}
 8010cc8:	b083      	sub	sp, #12
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
 8010cce:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010cd0:	6838      	ldr	r0, [r7, #0]
 8010cd2:	f000 ff42 	bl	8011b5a <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	681c      	ldr	r4, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4619      	mov	r1, r3
 8010cde:	2004      	movs	r0, #4
 8010ce0:	f7ef fb26 	bl	8000330 <_ZnwjPv>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	601c      	str	r4, [r3, #0]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd90      	pop	{r4, r7, pc}

08010cf0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 ff2c 	bl	8011b5a <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010d02:	4603      	mov	r3, r0
 8010d04:	4619      	mov	r1, r3
 8010d06:	68b8      	ldr	r0, [r7, #8]
 8010d08:	f7ff ffdd 	bl	8010cc6 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 8010d0c:	bf00      	nop
 8010d0e:	3710      	adds	r7, #16
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010d14:	b5b0      	push	{r4, r5, r7, lr}
 8010d16:	b08c      	sub	sp, #48	; 0x30
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010d20:	4a39      	ldr	r2, [pc, #228]	; (8010e08 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8010d22:	2101      	movs	r1, #1
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f000 ff23 	bl	8011b70 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 8010d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f7ff fa7d 	bl	8010238 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	617b      	str	r3, [r7, #20]
 8010d42:	f107 0214 	add.w	r2, r7, #20
 8010d46:	f107 0308 	add.w	r3, r7, #8
 8010d4a:	4611      	mov	r1, r2
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 ff56 	bl	8011bfe <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010d52:	4603      	mov	r3, r0
 8010d54:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 ff64 	bl	8011c28 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 8010d60:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010d66:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010d68:	6a3b      	ldr	r3, [r7, #32]
 8010d6a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010d6c:	69fa      	ldr	r2, [r7, #28]
 8010d6e:	18d5      	adds	r5, r2, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fef2 	bl	8011b5a <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010d76:	4603      	mov	r3, r0
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4629      	mov	r1, r5
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f7ff ffb7 	bl	8010cf0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010d82:	2300      	movs	r3, #0
 8010d84:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010d86:	f107 0308 	add.w	r3, r7, #8
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fd f92e 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010d90:	4603      	mov	r3, r0
 8010d92:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff ff3f 	bl	8010c1a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010d9c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010d9e:	69fa      	ldr	r2, [r7, #28]
 8010da0:	4621      	mov	r1, r4
 8010da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da4:	f000 ff54 	bl	8011c50 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010da8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	3304      	adds	r3, #4
 8010dae:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010db0:	f107 0308 	add.w	r3, r7, #8
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fd f919 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff ff2a 	bl	8010c1a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010dc6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010dc8:	69ba      	ldr	r2, [r7, #24]
 8010dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f000 ff3f 	bl	8011c50 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010dd2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010dd4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	689a      	ldr	r2, [r3, #8]
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8010de0:	461a      	mov	r2, r3
 8010de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010de4:	f7ff ff06 	bl	8010bf4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	69fa      	ldr	r2, [r7, #28]
 8010dec:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	69ba      	ldr	r2, [r7, #24]
 8010df2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	69fa      	ldr	r2, [r7, #28]
 8010dfa:	441a      	add	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	609a      	str	r2, [r3, #8]
    }
 8010e00:	bf00      	nop
 8010e02:	3730      	adds	r7, #48	; 0x30
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bdb0      	pop	{r4, r5, r7, pc}
 8010e08:	0802123c 	.word	0x0802123c

08010e0c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010e14:	2301      	movs	r3, #1
 8010e16:	4618      	mov	r0, r3
 8010e18:	370c      	adds	r7, #12
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010e22:	b480      	push	{r7}
 8010e24:	b083      	sub	sp, #12
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010e38:	b590      	push	{r4, r7, lr}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010e42:	6838      	ldr	r0, [r7, #0]
 8010e44:	f7ff ffed 	bl	8010e22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	4622      	mov	r2, r4
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 ff12 	bl	8011c78 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd90      	pop	{r4, r7, pc}

08010e5c <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 ff20 	bl	8011caa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f000 ff2c 	bl	8011cca <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8010e72:	bf00      	nop
      }
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010e7a:	b590      	push	{r4, r7, lr}
 8010e7c:	b085      	sub	sp, #20
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	60f8      	str	r0, [r7, #12]
 8010e82:	60b9      	str	r1, [r7, #8]
 8010e84:	4613      	mov	r3, r2
 8010e86:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010e88:	79fb      	ldrb	r3, [r7, #7]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d109      	bne.n	8010ea2 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010e8e:	68b8      	ldr	r0, [r7, #8]
 8010e90:	f000 ff0b 	bl	8011caa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010e94:	4604      	mov	r4, r0
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f000 ff27 	bl	8011cea <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	601c      	str	r4, [r3, #0]
	    break;
 8010ea0:	e005      	b.n	8010eae <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010ea2:	79fb      	ldrb	r3, [r7, #7]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	68b9      	ldr	r1, [r7, #8]
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f000 ff2a 	bl	8011d02 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8010eae:	2300      	movs	r3, #0
      }
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3714      	adds	r7, #20
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd90      	pop	{r4, r7, pc}

08010eb8 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	370c      	adds	r7, #12
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr

08010ece <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010ece:	b480      	push	{r7}
 8010ed0:	b083      	sub	sp, #12
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	601a      	str	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b082      	sub	sp, #8
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 ff2e 	bl	8011d58 <_ZNSaIP5FieldIJEEEC1Ev>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f000 ff36 	bl	8011d70 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010f0e:	b480      	push	{r7}
 8010f10:	b083      	sub	sp, #12
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	689a      	ldr	r2, [r3, #8]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 ff2a 	bl	8011d98 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff fad0 	bl	80104ec <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010f56:	b5b0      	push	{r4, r5, r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681c      	ldr	r4, [r3, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f000 ff28 	bl	8011dbe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8010f6e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010f70:	461a      	mov	r2, r3
 8010f72:	4629      	mov	r1, r5
 8010f74:	4620      	mov	r0, r4
 8010f76:	f000 ff2d 	bl	8011dd4 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7ff ffd1 	bl	8010f24 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bdb0      	pop	{r4, r5, r7, pc}

08010f8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010f8c:	b590      	push	{r4, r7, lr}
 8010f8e:	b085      	sub	sp, #20
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010fa0:	2008      	movs	r0, #8
 8010fa2:	f00f fda9 	bl	8020af8 <_Znwj>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	461c      	mov	r4, r3
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	4620      	mov	r0, r4
 8010fae:	f000 ff2f 	bl	8011e10 <_ZN5FieldIJhEEC1EPh>
 8010fb2:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f103 0208 	add.w	r2, r3, #8
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	60bb      	str	r3, [r7, #8]
 8010fbe:	f107 0308 	add.w	r3, r7, #8
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	f000 ff39 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8010fca:	bf00      	nop
    }
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd90      	pop	{r4, r7, pc}
	...

08010fd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010fd4:	b590      	push	{r4, r7, lr}
 8010fd6:	b08b      	sub	sp, #44	; 0x2c
 8010fd8:	af02      	add	r7, sp, #8
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 ff3c 	bl	8011e5e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7f4 f8af 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	60fb      	str	r3, [r7, #12]
 8010ff4:	f107 020c 	add.w	r2, r7, #12
 8010ff8:	f107 0308 	add.w	r3, r7, #8
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7f4 f8b2 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d112      	bne.n	8011030 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 ff36 	bl	8011e7c <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8011010:	f107 0308 	add.w	r3, r7, #8
 8011014:	4618      	mov	r0, r3
 8011016:	f7f4 f8cc 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	f107 0310 	add.w	r3, r7, #16
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	4618      	mov	r0, r3
 8011026:	f000 ff36 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 801102a:	4603      	mov	r3, r0
 801102c:	2b00      	cmp	r3, #0
 801102e:	d001      	beq.n	8011034 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8011030:	2301      	movs	r3, #1
 8011032:	e000      	b.n	8011036 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8011034:	2300      	movs	r3, #0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d01b      	beq.n	8011072 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801103a:	687c      	ldr	r4, [r7, #4]
 801103c:	f107 0208 	add.w	r2, r7, #8
 8011040:	f107 0314 	add.w	r3, r7, #20
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f000 ff49 	bl	8011ede <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 801104c:	f107 0318 	add.w	r3, r7, #24
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	4618      	mov	r0, r3
 8011054:	f000 ff34 	bl	8011ec0 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8011058:	f107 0218 	add.w	r2, r7, #24
 801105c:	f107 031c 	add.w	r3, r7, #28
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	4613      	mov	r3, r2
 8011064:	4a08      	ldr	r2, [pc, #32]	; (8011088 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8011066:	6979      	ldr	r1, [r7, #20]
 8011068:	4620      	mov	r0, r4
 801106a:	f000 ff48 	bl	8011efe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 801106e:	4603      	mov	r3, r0
 8011070:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f7f4 f89b 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 801107c:	4603      	mov	r3, r0
 801107e:	3304      	adds	r3, #4
      }
 8011080:	4618      	mov	r0, r3
 8011082:	3724      	adds	r7, #36	; 0x24
 8011084:	46bd      	mov	sp, r7
 8011086:	bd90      	pop	{r4, r7, pc}
 8011088:	080212a4 	.word	0x080212a4

0801108c <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 801108c:	b590      	push	{r4, r7, lr}
 801108e:	b087      	sub	sp, #28
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	1c5a      	adds	r2, r3, #1
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 80110a2:	2008      	movs	r0, #8
 80110a4:	f00f fd28 	bl	8020af8 <_Znwj>
 80110a8:	4603      	mov	r3, r0
 80110aa:	461c      	mov	r4, r3
 80110ac:	68b9      	ldr	r1, [r7, #8]
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 feae 	bl	8011e10 <_ZN5FieldIJhEEC1EPh>
 80110b4:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f103 0208 	add.w	r2, r3, #8
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	613b      	str	r3, [r7, #16]
 80110c0:	f107 0310 	add.w	r3, r7, #16
 80110c4:	4619      	mov	r1, r3
 80110c6:	4610      	mov	r0, r2
 80110c8:	f000 feb8 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f000 ff53 	bl	8011f7a <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 80110d4:	bf00      	nop
 80110d6:	371c      	adds	r7, #28
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd90      	pop	{r4, r7, pc}

080110dc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 80110dc:	b590      	push	{r4, r7, lr}
 80110de:	b087      	sub	sp, #28
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	1c5a      	adds	r2, r3, #1
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 80110f2:	2008      	movs	r0, #8
 80110f4:	f00f fd00 	bl	8020af8 <_Znwj>
 80110f8:	4603      	mov	r3, r0
 80110fa:	461c      	mov	r4, r3
 80110fc:	68b9      	ldr	r1, [r7, #8]
 80110fe:	4620      	mov	r0, r4
 8011100:	f000 fe86 	bl	8011e10 <_ZN5FieldIJhEEC1EPh>
 8011104:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f103 0208 	add.w	r2, r3, #8
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	613b      	str	r3, [r7, #16]
 8011110:	f107 0310 	add.w	r3, r7, #16
 8011114:	4619      	mov	r1, r3
 8011116:	4610      	mov	r0, r2
 8011118:	f000 fe90 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 801111c:	6879      	ldr	r1, [r7, #4]
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f000 ff4e 	bl	8011fc0 <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8011124:	bf00      	nop
 8011126:	371c      	adds	r7, #28
 8011128:	46bd      	mov	sp, r7
 801112a:	bd90      	pop	{r4, r7, pc}

0801112c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b087      	sub	sp, #28
 8011130:	af00      	add	r7, sp, #0
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	60b9      	str	r1, [r7, #8]
 8011136:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011142:	2008      	movs	r0, #8
 8011144:	f00f fcd8 	bl	8020af8 <_Znwj>
 8011148:	4603      	mov	r3, r0
 801114a:	461c      	mov	r4, r3
 801114c:	68b9      	ldr	r1, [r7, #8]
 801114e:	4620      	mov	r0, r4
 8011150:	f000 fe5e 	bl	8011e10 <_ZN5FieldIJhEEC1EPh>
 8011154:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f103 0208 	add.w	r2, r3, #8
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	613b      	str	r3, [r7, #16]
 8011160:	f107 0310 	add.w	r3, r7, #16
 8011164:	4619      	mov	r1, r3
 8011166:	4610      	mov	r0, r2
 8011168:	f000 fe68 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 801116c:	6879      	ldr	r1, [r7, #4]
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f7ff ff0c 	bl	8010f8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 8011174:	bf00      	nop
 8011176:	371c      	adds	r7, #28
 8011178:	46bd      	mov	sp, r7
 801117a:	bd90      	pop	{r4, r7, pc}

0801117c <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4618      	mov	r0, r3
 8011188:	370c      	adds	r7, #12
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr

08011192 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011192:	b5b0      	push	{r4, r5, r7, lr}
 8011194:	b084      	sub	sp, #16
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 ff32 	bl	8012006 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80111a2:	4604      	mov	r4, r0
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 ff3a 	bl	801201e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80111aa:	4602      	mov	r2, r0
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	4621      	mov	r1, r4
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f000 ff40 	bl	8012036 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 80111b6:	4603      	mov	r3, r0
 80111b8:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 f828 	bl	8011210 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80111c0:	4603      	mov	r3, r0
 80111c2:	60fb      	str	r3, [r7, #12]
 80111c4:	f107 020c 	add.w	r2, r7, #12
 80111c8:	f107 0308 	add.w	r3, r7, #8
 80111cc:	4611      	mov	r1, r2
 80111ce:	4618      	mov	r0, r3
 80111d0:	f000 f82f 	bl	8011232 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80111d4:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d110      	bne.n	80111fc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80111da:	687c      	ldr	r4, [r7, #4]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f7 fcd1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80111e8:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	461a      	mov	r2, r3
 80111ee:	4629      	mov	r1, r5
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ef fe72 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d004      	beq.n	8011206 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 f807 	bl	8011210 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011202:	4603      	mov	r3, r0
 8011204:	e000      	b.n	8011208 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8011206:	68bb      	ldr	r3, [r7, #8]
    }
 8011208:	4618      	mov	r0, r3
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bdb0      	pop	{r4, r5, r7, pc}

08011210 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	1d1a      	adds	r2, r3, #4
 801121c:	f107 030c 	add.w	r3, r7, #12
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f000 ff3a 	bl	801209c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8011232:	b480      	push	{r7}
 8011234:	b083      	sub	sp, #12
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
 801123a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	429a      	cmp	r2, r3
 8011246:	bf0c      	ite	eq
 8011248:	2301      	moveq	r3, #1
 801124a:	2300      	movne	r3, #0
 801124c:	b2db      	uxtb	r3, r3
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801125a:	b5b0      	push	{r4, r5, r7, lr}
 801125c:	b084      	sub	sp, #16
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
 8011262:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 ff28 	bl	80120ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 801126a:	4604      	mov	r4, r0
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 ff30 	bl	80120d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8011272:	4602      	mov	r2, r0
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	4621      	mov	r1, r4
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f000 ff36 	bl	80120ea <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 801127e:	4603      	mov	r3, r0
 8011280:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 f828 	bl	80112d8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8011288:	4603      	mov	r3, r0
 801128a:	60fb      	str	r3, [r7, #12]
 801128c:	f107 020c 	add.w	r2, r7, #12
 8011290:	f107 0308 	add.w	r3, r7, #8
 8011294:	4611      	mov	r1, r2
 8011296:	4618      	mov	r0, r3
 8011298:	f000 f82f 	bl	80112fa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 801129c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d110      	bne.n	80112c4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80112a2:	687c      	ldr	r4, [r7, #4]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f2 ff8e 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80112b0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	461a      	mov	r2, r3
 80112b6:	4629      	mov	r1, r5
 80112b8:	4620      	mov	r0, r4
 80112ba:	f7ef fe0e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 f807 	bl	80112d8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80112ca:	4603      	mov	r3, r0
 80112cc:	e000      	b.n	80112d0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 80112ce:	68bb      	ldr	r3, [r7, #8]
    }
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bdb0      	pop	{r4, r5, r7, pc}

080112d8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	1d1a      	adds	r2, r3, #4
 80112e4:	f107 030c 	add.w	r3, r7, #12
 80112e8:	4611      	mov	r1, r2
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 ff30 	bl	8012150 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4618      	mov	r0, r3
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}

080112fa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80112fa:	b480      	push	{r7}
 80112fc:	b083      	sub	sp, #12
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
 8011302:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	429a      	cmp	r2, r3
 801130e:	bf0c      	ite	eq
 8011310:	2301      	moveq	r3, #1
 8011312:	2300      	movne	r3, #0
 8011314:	b2db      	uxtb	r3, r3
 8011316:	4618      	mov	r0, r3
 8011318:	370c      	adds	r7, #12
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011322:	b480      	push	{r7}
 8011324:	b083      	sub	sp, #12
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
	  { return true; }
 801132a:	2301      	movs	r3, #1
 801132c:	4618      	mov	r0, r3
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	4618      	mov	r0, r3
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801134e:	b590      	push	{r4, r7, lr}
 8011350:	b083      	sub	sp, #12
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
 8011356:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011358:	6838      	ldr	r0, [r7, #0]
 801135a:	f7ff ffed 	bl	8011338 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801135e:	4603      	mov	r3, r0
 8011360:	4622      	mov	r2, r4
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 ff02 	bl	801216e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 801136a:	bf00      	nop
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	bd90      	pop	{r4, r7, pc}

08011372 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011372:	b580      	push	{r7, lr}
 8011374:	b082      	sub	sp, #8
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f000 ff0c 	bl	8012198 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011380:	4603      	mov	r3, r0
 8011382:	4618      	mov	r0, r3
 8011384:	f000 ff18 	bl	80121b8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011388:	bf00      	nop
      }
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011390:	b590      	push	{r4, r7, lr}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	4613      	mov	r3, r2
 801139c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 801139e:	79fb      	ldrb	r3, [r7, #7]
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d109      	bne.n	80113b8 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80113a4:	68b8      	ldr	r0, [r7, #8]
 80113a6:	f000 fef7 	bl	8012198 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80113aa:	4604      	mov	r4, r0
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 ff13 	bl	80121d8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 80113b2:	4603      	mov	r3, r0
 80113b4:	601c      	str	r4, [r3, #0]
	    break;
 80113b6:	e005      	b.n	80113c4 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80113b8:	79fb      	ldrb	r3, [r7, #7]
 80113ba:	461a      	mov	r2, r3
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	f000 ff16 	bl	80121f0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80113c4:	2300      	movs	r3, #0
      }
 80113c6:	4618      	mov	r0, r3
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd90      	pop	{r4, r7, pc}

080113ce <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80113ce:	b480      	push	{r7}
 80113d0:	b083      	sub	sp, #12
 80113d2:	af00      	add	r7, sp, #0
 80113d4:	6078      	str	r0, [r7, #4]
	  { return true; }
 80113d6:	2301      	movs	r3, #1
 80113d8:	4618      	mov	r0, r3
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80113fa:	b590      	push	{r4, r7, lr}
 80113fc:	b083      	sub	sp, #12
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011404:	6838      	ldr	r0, [r7, #0]
 8011406:	f7ff ffed 	bl	80113e4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 801140a:	4603      	mov	r3, r0
 801140c:	4622      	mov	r2, r4
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 ff18 	bl	8012246 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	bd90      	pop	{r4, r7, pc}

0801141e <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801141e:	b580      	push	{r7, lr}
 8011420:	b082      	sub	sp, #8
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 ff22 	bl	8012270 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801142c:	4603      	mov	r3, r0
 801142e:	4618      	mov	r0, r3
 8011430:	f000 ff2e 	bl	8012290 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011434:	bf00      	nop
      }
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801143c:	b590      	push	{r4, r7, lr}
 801143e:	b085      	sub	sp, #20
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	4613      	mov	r3, r2
 8011448:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 801144a:	79fb      	ldrb	r3, [r7, #7]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d109      	bne.n	8011464 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011450:	68b8      	ldr	r0, [r7, #8]
 8011452:	f000 ff0d 	bl	8012270 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011456:	4604      	mov	r4, r0
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f000 ff29 	bl	80122b0 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 801145e:	4603      	mov	r3, r0
 8011460:	601c      	str	r4, [r3, #0]
	    break;
 8011462:	e005      	b.n	8011470 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011464:	79fb      	ldrb	r3, [r7, #7]
 8011466:	461a      	mov	r2, r3
 8011468:	68b9      	ldr	r1, [r7, #8]
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 ff2c 	bl	80122c8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8011470:	2300      	movs	r3, #0
      }
 8011472:	4618      	mov	r0, r3
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	bd90      	pop	{r4, r7, pc}

0801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801147a:	b480      	push	{r7}
 801147c:	b083      	sub	sp, #12
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011490:	b590      	push	{r4, r7, lr}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801149a:	6838      	ldr	r0, [r7, #0]
 801149c:	f7ff ffed 	bl	801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80114a0:	4603      	mov	r3, r0
 80114a2:	681c      	ldr	r4, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4619      	mov	r1, r3
 80114a8:	2004      	movs	r0, #4
 80114aa:	f7ee ff41 	bl	8000330 <_ZnwjPv>
 80114ae:	4603      	mov	r3, r0
 80114b0:	601c      	str	r4, [r3, #0]
 80114b2:	4618      	mov	r0, r3
 80114b4:	370c      	adds	r7, #12
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd90      	pop	{r4, r7, pc}

080114ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	60f8      	str	r0, [r7, #12]
 80114c2:	60b9      	str	r1, [r7, #8]
 80114c4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7ff ffd7 	bl	801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80114cc:	4603      	mov	r3, r0
 80114ce:	4619      	mov	r1, r3
 80114d0:	68b8      	ldr	r0, [r7, #8]
 80114d2:	f7ff ffdd 	bl	8011490 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80114d6:	bf00      	nop
 80114d8:	3710      	adds	r7, #16
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
	...

080114e0 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80114e0:	b5b0      	push	{r4, r5, r7, lr}
 80114e2:	b08c      	sub	sp, #48	; 0x30
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80114ec:	4a39      	ldr	r2, [pc, #228]	; (80115d4 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80114ee:	2101      	movs	r1, #1
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 ff14 	bl	801231e <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 80114f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f7fe fde1 	bl	80100cc <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 801150a:	4603      	mov	r3, r0
 801150c:	617b      	str	r3, [r7, #20]
 801150e:	f107 0214 	add.w	r2, r7, #20
 8011512:	f107 0308 	add.w	r3, r7, #8
 8011516:	4611      	mov	r1, r2
 8011518:	4618      	mov	r0, r3
 801151a:	f000 ff47 	bl	80123ac <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801151e:	4603      	mov	r3, r0
 8011520:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011526:	4618      	mov	r0, r3
 8011528:	f000 ff55 	bl	80123d6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 801152c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011532:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011538:	69fa      	ldr	r2, [r7, #28]
 801153a:	18d5      	adds	r5, r2, r3
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7ff ff9c 	bl	801147a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011542:	4603      	mov	r3, r0
 8011544:	461a      	mov	r2, r3
 8011546:	4629      	mov	r1, r5
 8011548:	4620      	mov	r0, r4
 801154a:	f7ff ffb6 	bl	80114ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801154e:	2300      	movs	r3, #0
 8011550:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011552:	f107 0308 	add.w	r3, r7, #8
 8011556:	4618      	mov	r0, r3
 8011558:	f7fc fa3c 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 801155c:	4603      	mov	r3, r0
 801155e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4618      	mov	r0, r3
 8011564:	f7fa fdbc 	bl	800c0e0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011568:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801156a:	69fa      	ldr	r2, [r7, #28]
 801156c:	4621      	mov	r1, r4
 801156e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011570:	f000 ff45 	bl	80123fe <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011574:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	3304      	adds	r3, #4
 801157a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801157c:	f107 0308 	add.w	r3, r7, #8
 8011580:	4618      	mov	r0, r3
 8011582:	f7fc fa27 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011586:	4603      	mov	r3, r0
 8011588:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	4618      	mov	r0, r3
 801158e:	f7fa fda7 	bl	800c0e0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011592:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011594:	69ba      	ldr	r2, [r7, #24]
 8011596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011598:	4620      	mov	r0, r4
 801159a:	f000 ff30 	bl	80123fe <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801159e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80115a0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	689a      	ldr	r2, [r3, #8]
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80115ac:	461a      	mov	r2, r3
 80115ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115b0:	f7fa fd59 	bl	800c066 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	69fa      	ldr	r2, [r7, #28]
 80115b8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	69ba      	ldr	r2, [r7, #24]
 80115be:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80115c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	69fa      	ldr	r2, [r7, #28]
 80115c6:	441a      	add	r2, r3
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	609a      	str	r2, [r3, #8]
    }
 80115cc:	bf00      	nop
 80115ce:	3730      	adds	r7, #48	; 0x30
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bdb0      	pop	{r4, r5, r7, pc}
 80115d4:	0802123c 	.word	0x0802123c

080115d8 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7fe fd83 	bl	80100ec <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 80115e6:	4603      	mov	r3, r0
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	f107 030c 	add.w	r3, r7, #12
 80115ee:	2101      	movs	r1, #1
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 ff18 	bl	8012426 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 80115f6:	4603      	mov	r3, r0
 80115f8:	60bb      	str	r3, [r7, #8]
 80115fa:	f107 0308 	add.w	r3, r7, #8
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fc fa1b 	bl	800da3a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 8011604:	4603      	mov	r3, r0
      }
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801160e:	b580      	push	{r7, lr}
 8011610:	b082      	sub	sp, #8
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4618      	mov	r0, r3
 801161a:	f7fc f80b 	bl	800d634 <_ZNKSt14_Function_base8_M_emptyEv>
 801161e:	4603      	mov	r3, r0
 8011620:	f083 0301 	eor.w	r3, r3, #1
 8011624:	b2db      	uxtb	r3, r3
 8011626:	4618      	mov	r0, r3
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801162e:	b580      	push	{r7, lr}
 8011630:	b084      	sub	sp, #16
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
 8011636:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 ff0d 	bl	8012458 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801163e:	4602      	mov	r2, r0
 8011640:	f107 0308 	add.w	r3, r7, #8
 8011644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011648:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801164c:	6838      	ldr	r0, [r7, #0]
 801164e:	f000 ff03 	bl	8012458 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011652:	4602      	mov	r2, r0
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	e892 0003 	ldmia.w	r2, {r0, r1}
 801165a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801165e:	f107 0308 	add.w	r3, r7, #8
 8011662:	4618      	mov	r0, r3
 8011664:	f000 fef8 	bl	8012458 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011668:	4602      	mov	r2, r0
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011670:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011674:	bf00      	nop
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 fef1 	bl	801246e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801168c:	4603      	mov	r3, r0
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011692:	6838      	ldr	r0, [r7, #0]
 8011694:	f000 feeb 	bl	801246e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011698:	4603      	mov	r3, r0
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80116a0:	f107 030c 	add.w	r3, r7, #12
 80116a4:	4618      	mov	r0, r3
 80116a6:	f000 fee2 	bl	801246e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80116aa:	4603      	mov	r3, r0
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	601a      	str	r2, [r3, #0]
    }
 80116b2:	bf00      	nop
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b084      	sub	sp, #16
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 fedd 	bl	8012484 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80116ca:	4603      	mov	r3, r0
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80116d0:	6838      	ldr	r0, [r7, #0]
 80116d2:	f000 fed7 	bl	8012484 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80116d6:	4603      	mov	r3, r0
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80116de:	f107 030c 	add.w	r3, r7, #12
 80116e2:	4618      	mov	r0, r3
 80116e4:	f000 fece 	bl	8012484 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80116e8:	4603      	mov	r3, r0
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	601a      	str	r2, [r3, #0]
    }
 80116f0:	bf00      	nop
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7f9 fd8f 	bl	800b226 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 8011708:	4604      	mov	r4, r0
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f7f9 ffd2 	bl	800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8011710:	4602      	mov	r2, r0
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	4621      	mov	r1, r4
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 febf 	bl	801249a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 801171c:	4603      	mov	r3, r0
 801171e:	4618      	mov	r0, r3
 8011720:	370c      	adds	r7, #12
 8011722:	46bd      	mov	sp, r7
 8011724:	bd90      	pop	{r4, r7, pc}

08011726 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 8011726:	b480      	push	{r7}
 8011728:	b083      	sub	sp, #12
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801172e:	bf00      	nop
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4618      	mov	r0, r3
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8011752:	b590      	push	{r4, r7, lr}
 8011754:	b083      	sub	sp, #12
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
 801175a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 801175c:	687c      	ldr	r4, [r7, #4]
 801175e:	6838      	ldr	r0, [r7, #0]
 8011760:	f7ff ffec 	bl	801173c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8011764:	4603      	mov	r3, r0
 8011766:	4619      	mov	r1, r3
 8011768:	4620      	mov	r0, r4
 801176a:	f000 fec7 	bl	80124fc <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4618      	mov	r0, r3
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	bd90      	pop	{r4, r7, pc}

08011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011778:	b480      	push	{r7}
 801177a:	b083      	sub	sp, #12
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4618      	mov	r0, r3
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801178e:	b5b0      	push	{r4, r5, r7, lr}
 8011790:	b088      	sub	sp, #32
 8011792:	af02      	add	r7, sp, #8
 8011794:	60f8      	str	r0, [r7, #12]
 8011796:	60b9      	str	r1, [r7, #8]
 8011798:	607a      	str	r2, [r7, #4]
 801179a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801179c:	68f8      	ldr	r0, [r7, #12]
 801179e:	f7f9 ffa1 	bl	800b6e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 80117a2:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80117a4:	68b8      	ldr	r0, [r7, #8]
 80117a6:	f7ef fd5e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80117aa:	4604      	mov	r4, r0
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff ffe3 	bl	8011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80117b2:	4605      	mov	r5, r0
 80117b4:	6838      	ldr	r0, [r7, #0]
 80117b6:	f7ef fd6c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80117ba:	4603      	mov	r3, r0
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	462b      	mov	r3, r5
 80117c0:	4622      	mov	r2, r4
 80117c2:	6979      	ldr	r1, [r7, #20]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 feac 	bl	8012522 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80117ca:	697b      	ldr	r3, [r7, #20]
	}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3718      	adds	r7, #24
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bdb0      	pop	{r4, r5, r7, pc}

080117d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80117d4:	b5b0      	push	{r4, r5, r7, lr}
 80117d6:	b086      	sub	sp, #24
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
 80117e0:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d117      	bne.n	8011818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	f7f9 ff63 	bl	800b6b4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80117ee:	4602      	mov	r2, r0
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d010      	beq.n	8011818 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80117f6:	68fc      	ldr	r4, [r7, #12]
 80117f8:	6838      	ldr	r0, [r7, #0]
 80117fa:	f7f9 fe62 	bl	800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80117fe:	4605      	mov	r5, r0
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7f9 ffa9 	bl	800b758 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011806:	4603      	mov	r3, r0
 8011808:	461a      	mov	r2, r3
 801180a:	4629      	mov	r1, r5
 801180c:	4620      	mov	r0, r4
 801180e:	f7f9 fc07 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8011818:	2301      	movs	r3, #1
 801181a:	e000      	b.n	801181e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 801181c:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801181e:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011824:	7df8      	ldrb	r0, [r7, #23]
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	6839      	ldr	r1, [r7, #0]
 801182a:	f00f f9d1 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	695b      	ldr	r3, [r3, #20]
 8011832:	1c5a      	adds	r2, r3, #1
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011838:	f107 0310 	add.w	r3, r7, #16
 801183c:	6839      	ldr	r1, [r7, #0]
 801183e:	4618      	mov	r0, r3
 8011840:	f7f9 fe63 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8011844:	693b      	ldr	r3, [r7, #16]
    }
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bdb0      	pop	{r4, r5, r7, pc}

0801184e <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801184e:	b580      	push	{r7, lr}
 8011850:	b084      	sub	sp, #16
 8011852:	af00      	add	r7, sp, #0
 8011854:	60f8      	str	r0, [r7, #12]
 8011856:	7239      	strb	r1, [r7, #8]
 8011858:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7ff f8ed 	bl	8010a3a <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011860:	4603      	mov	r3, r0
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	601a      	str	r2, [r3, #0]
	    { }
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	4618      	mov	r0, r3
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8011872:	b5b0      	push	{r4, r5, r7, lr}
 8011874:	b084      	sub	sp, #16
 8011876:	af00      	add	r7, sp, #0
 8011878:	60f8      	str	r0, [r7, #12]
 801187a:	7239      	strb	r1, [r7, #8]
 801187c:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801187e:	68fc      	ldr	r4, [r7, #12]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7ff f8da 	bl	8010a3a <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011886:	4603      	mov	r3, r0
 8011888:	461a      	mov	r2, r3
 801188a:	4629      	mov	r1, r5
 801188c:	4620      	mov	r0, r4
 801188e:	f7ff ffde 	bl	801184e <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2201      	movs	r2, #1
 8011896:	711a      	strb	r2, [r3, #4]
	{ }
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bdb0      	pop	{r4, r5, r7, pc}

080118a2 <_ZN9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80118a2:	b480      	push	{r7}
 80118a4:	b083      	sub	sp, #12
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
 80118aa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr

080118c2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80118c2:	b480      	push	{r7}
 80118c4:	b083      	sub	sp, #12
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4618      	mov	r0, r3
 80118e4:	370c      	adds	r7, #12
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80118ee:	b5b0      	push	{r4, r5, r7, lr}
 80118f0:	b084      	sub	sp, #16
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	60f8      	str	r0, [r7, #12]
 80118f6:	60b9      	str	r1, [r7, #8]
 80118f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f000 fe3e 	bl	801257c <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011900:	4604      	mov	r4, r0
 8011902:	68b8      	ldr	r0, [r7, #8]
 8011904:	f000 fe3a 	bl	801257c <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011908:	4605      	mov	r5, r0
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f000 fe36 	bl	801257c <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011910:	4603      	mov	r3, r0
 8011912:	461a      	mov	r2, r3
 8011914:	4629      	mov	r1, r5
 8011916:	4620      	mov	r0, r4
 8011918:	f000 fe3e 	bl	8012598 <_ZSt14__copy_move_a1ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>
 801191c:	4603      	mov	r3, r0
 801191e:	4619      	mov	r1, r3
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 fe49 	bl	80125b8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8011926:	4603      	mov	r3, r0
    }
 8011928:	4618      	mov	r0, r3
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bdb0      	pop	{r4, r5, r7, pc}

08011930 <_ZNSt16allocator_traitsISaIP13StreamMessageEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801193a:	6838      	ldr	r0, [r7, #0]
 801193c:	f000 fe53 	bl	80125e6 <_ZSt10destroy_atIP13StreamMessageEvPT_>
	}
 8011940:	bf00      	nop
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801195e:	b580      	push	{r7, lr}
 8011960:	b088      	sub	sp, #32
 8011962:	af00      	add	r7, sp, #0
 8011964:	60f8      	str	r0, [r7, #12]
 8011966:	60b9      	str	r1, [r7, #8]
 8011968:	607a      	str	r2, [r7, #4]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	61fb      	str	r3, [r7, #28]
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	61bb      	str	r3, [r7, #24]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011976:	f7ee fcd3 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801197a:	4603      	mov	r3, r0
 801197c:	2b00      	cmp	r3, #0
 801197e:	d003      	beq.n	8011988 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8011980:	69b8      	ldr	r0, [r7, #24]
 8011982:	f00f f8b5 	bl	8020af0 <_ZdlPv>
	    return;
 8011986:	e005      	b.n	8011994 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011988:	697a      	ldr	r2, [r7, #20]
 801198a:	69b9      	ldr	r1, [r7, #24]
 801198c:	69f8      	ldr	r0, [r7, #28]
 801198e:	f001 fbb5 	bl	80130fc <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	3720      	adds	r7, #32
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80119a6:	f7ee fcbb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d004      	beq.n	80119ba <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80119b0:	6839      	ldr	r1, [r7, #0]
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fe21 	bl	80125fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 80119b8:	e003      	b.n	80119c2 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 fe34 	bl	801262a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4618      	mov	r0, r3
 80119d4:	370c      	adds	r7, #12
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80119de:	b590      	push	{r4, r7, lr}
 80119e0:	b083      	sub	sp, #12
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80119e8:	6838      	ldr	r0, [r7, #0]
 80119ea:	f7ff ffed 	bl	80119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 80119ee:	4603      	mov	r3, r0
 80119f0:	681c      	ldr	r4, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4619      	mov	r1, r3
 80119f6:	2004      	movs	r0, #4
 80119f8:	f7ee fc9a 	bl	8000330 <_ZnwjPv>
 80119fc:	4603      	mov	r3, r0
 80119fe:	601c      	str	r4, [r3, #0]
 8011a00:	4618      	mov	r0, r3
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd90      	pop	{r4, r7, pc}

08011a08 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f7ff ffd7 	bl	80119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	68b8      	ldr	r0, [r7, #8]
 8011a20:	f7ff ffdd 	bl	80119de <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011a2c:	b5b0      	push	{r4, r5, r7, lr}
 8011a2e:	b08c      	sub	sp, #48	; 0x30
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011a38:	4a39      	ldr	r2, [pc, #228]	; (8011b20 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f000 fdff 	bl	8012640 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 8011a42:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f7fe fd2a 	bl	80104aa <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 8011a56:	4603      	mov	r3, r0
 8011a58:	617b      	str	r3, [r7, #20]
 8011a5a:	f107 0214 	add.w	r2, r7, #20
 8011a5e:	f107 0308 	add.w	r3, r7, #8
 8011a62:	4611      	mov	r1, r2
 8011a64:	4618      	mov	r0, r3
 8011a66:	f000 fe32 	bl	80126ce <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a72:	4618      	mov	r0, r3
 8011a74:	f000 fe40 	bl	80126f8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 8011a78:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011a7e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011a80:	6a3b      	ldr	r3, [r7, #32]
 8011a82:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011a84:	69fa      	ldr	r2, [r7, #28]
 8011a86:	18d5      	adds	r5, r2, r3
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff ff9d 	bl	80119c8 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	4629      	mov	r1, r5
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff ffb7 	bl	8011a08 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011a9e:	f107 0308 	add.w	r3, r7, #8
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fc fba2 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f9 ff52 	bl	800b958 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011ab4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011ab6:	69fa      	ldr	r2, [r7, #28]
 8011ab8:	4621      	mov	r1, r4
 8011aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011abc:	f000 fe30 	bl	8012720 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011ac0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011ac8:	f107 0308 	add.w	r3, r7, #8
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fc fb8d 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7f9 ff3d 	bl	800b958 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011ade:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011ae0:	69ba      	ldr	r2, [r7, #24]
 8011ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f000 fe1b 	bl	8012720 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011aea:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011aec:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	689a      	ldr	r2, [r3, #8]
 8011af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011af8:	461a      	mov	r2, r3
 8011afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011afc:	f7f9 fad5 	bl	800b0aa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	69fa      	ldr	r2, [r7, #28]
 8011b04:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	69ba      	ldr	r2, [r7, #24]
 8011b0a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	69fa      	ldr	r2, [r7, #28]
 8011b12:	441a      	add	r2, r3
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	609a      	str	r2, [r3, #8]
    }
 8011b18:	bf00      	nop
 8011b1a:	3730      	adds	r7, #48	; 0x30
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011b20:	0802123c 	.word	0x0802123c

08011b24 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7fe fccc 	bl	80104ca <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8011b32:	4603      	mov	r3, r0
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	f107 030c 	add.w	r3, r7, #12
 8011b3a:	2101      	movs	r1, #1
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 fe03 	bl	8012748 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 8011b42:	4603      	mov	r3, r0
 8011b44:	60bb      	str	r3, [r7, #8]
 8011b46:	f107 0308 	add.w	r3, r7, #8
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fc fb81 	bl	800e252 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8011b50:	4603      	mov	r3, r0
      }
 8011b52:	4618      	mov	r0, r3
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011b5a:	b480      	push	{r7}
 8011b5c:	b083      	sub	sp, #12
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b087      	sub	sp, #28
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f000 fdfc 	bl	801277a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011b82:	4604      	mov	r4, r0
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f7fe fb37 	bl	80101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	1ae2      	subs	r2, r4, r3
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	bf34      	ite	cc
 8011b94:	2301      	movcc	r3, #1
 8011b96:	2300      	movcs	r3, #0
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d002      	beq.n	8011ba4 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f00f f874 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7fe fb27 	bl	80101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011baa:	4604      	mov	r4, r0
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f7fe fb23 	bl	80101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	613b      	str	r3, [r7, #16]
 8011bb6:	f107 0208 	add.w	r2, r7, #8
 8011bba:	f107 0310 	add.w	r3, r7, #16
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f0 fe46 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4423      	add	r3, r4
 8011bcc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011bce:	68f8      	ldr	r0, [r7, #12]
 8011bd0:	f7fe fb12 	bl	80101f8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d306      	bcc.n	8011bea <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f000 fdcc 	bl	801277a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011be2:	4602      	mov	r2, r0
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d904      	bls.n	8011bf4 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011bea:	68f8      	ldr	r0, [r7, #12]
 8011bec:	f000 fdc5 	bl	801277a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	e000      	b.n	8011bf6 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011bf4:	697b      	ldr	r3, [r7, #20]
      }
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	371c      	adds	r7, #28
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd90      	pop	{r4, r7, pc}

08011bfe <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011bfe:	b590      	push	{r4, r7, lr}
 8011c00:	b083      	sub	sp, #12
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7fc f9ef 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	681c      	ldr	r4, [r3, #0]
 8011c12:	6838      	ldr	r0, [r7, #0]
 8011c14:	f7fc f9ea 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	1ae3      	subs	r3, r4, r3
 8011c1e:	109b      	asrs	r3, r3, #2
 8011c20:	4618      	mov	r0, r3
 8011c22:	370c      	adds	r7, #12
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}

08011c28 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d006      	beq.n	8011c46 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6839      	ldr	r1, [r7, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f000 fdad 	bl	801279c <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 8011c42:	4603      	mov	r3, r0
 8011c44:	e000      	b.n	8011c48 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 8011c46:	2300      	movs	r3, #0
      }
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011c50:	b590      	push	{r4, r7, lr}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af02      	add	r7, sp, #8
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011c5e:	f88d 4000 	strb.w	r4, [sp]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	687a      	ldr	r2, [r7, #4]
 8011c66:	68b9      	ldr	r1, [r7, #8]
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 fdb7 	bl	80127dc <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011c6e:	4603      	mov	r3, r0
      }
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd90      	pop	{r4, r7, pc}

08011c78 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011c78:	b590      	push	{r4, r7, lr}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011c84:	68b8      	ldr	r0, [r7, #8]
 8011c86:	f7ff f8cc 	bl	8010e22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f7fb fc9a 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8011c92:	4603      	mov	r3, r0
 8011c94:	4619      	mov	r1, r3
 8011c96:	2004      	movs	r0, #4
 8011c98:	f7ee fb4a 	bl	8000330 <_ZnwjPv>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	6013      	str	r3, [r2, #0]
 8011ca2:	bf00      	nop
 8011ca4:	3714      	adds	r7, #20
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd90      	pop	{r4, r7, pc}

08011caa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b084      	sub	sp, #16
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fda4 	bl	8012800 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8011cb8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 fdac 	bl	8012818 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>
 8011cc0:	4603      	mov	r3, r0
	}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011cca:	b590      	push	{r4, r7, lr}
 8011ccc:	b083      	sub	sp, #12
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fdab 	bl	801282e <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 fdb1 	bl	8012844 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8011ce2:	bf00      	nop
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd90      	pop	{r4, r7, pc}

08011cea <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b082      	sub	sp, #8
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7fb fc67 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d02:	b5b0      	push	{r4, r5, r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	60b9      	str	r1, [r7, #8]
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011d10:	79fb      	ldrb	r3, [r7, #7]
 8011d12:	2b03      	cmp	r3, #3
 8011d14:	d016      	beq.n	8011d44 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8011d16:	2b03      	cmp	r3, #3
 8011d18:	dc19      	bgt.n	8011d4e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d002      	beq.n	8011d24 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d00a      	beq.n	8011d38 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8011d22:	e014      	b.n	8011d4e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011d24:	68b8      	ldr	r0, [r7, #8]
 8011d26:	f7ff ffc0 	bl	8011caa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f7ff ffdc 	bl	8011cea <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8011d32:	4603      	mov	r3, r0
 8011d34:	601c      	str	r4, [r3, #0]
	      break;
 8011d36:	e00a      	b.n	8011d4e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011d38:	462a      	mov	r2, r5
 8011d3a:	68b9      	ldr	r1, [r7, #8]
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 fd91 	bl	8012864 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8011d42:	e004      	b.n	8011d4e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011d44:	4621      	mov	r1, r4
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f000 fda5 	bl	8012896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011d4c:	bf00      	nop
	  return false;
 8011d4e:	2300      	movs	r3, #0
	}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bdb0      	pop	{r4, r5, r7, pc}

08011d58 <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 fda4 	bl	80128ae <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	605a      	str	r2, [r3, #4]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	609a      	str	r2, [r3, #8]
	{ }
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b084      	sub	sp, #16
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	607a      	str	r2, [r7, #4]
	if (__p)
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d005      	beq.n	8011db6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f000 fd87 	bl	80128c4 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 8011db6:	bf00      	nop
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011dbe:	b480      	push	{r7}
 8011dc0:	b083      	sub	sp, #12
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011de0:	68b9      	ldr	r1, [r7, #8]
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f000 fd8d 	bl	8012902 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8011de8:	bf00      	nop
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <_ZN5FieldIJEEC1Ev>:
class Field<> {
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	4a04      	ldr	r2, [pc, #16]	; (8011e0c <_ZN5FieldIJEEC1Ev+0x1c>)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4618      	mov	r0, r3
 8011e02:	370c      	adds	r7, #12
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr
 8011e0c:	080212ec 	.word	0x080212ec

08011e10 <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7ff ffe7 	bl	8011df0 <_ZN5FieldIJEEC1Ev>
 8011e22:	4a05      	ldr	r2, [pc, #20]	; (8011e38 <_ZN5FieldIJhEEC1EPh+0x28>)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	601a      	str	r2, [r3, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	605a      	str	r2, [r3, #4]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	080212d8 	.word	0x080212d8

08011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8011e46:	6838      	ldr	r0, [r7, #0]
 8011e48:	f000 fd71 	bl	801292e <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	4619      	mov	r1, r3
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 fd77 	bl	8012944 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 8011e56:	bf00      	nop
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b082      	sub	sp, #8
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6839      	ldr	r1, [r7, #0]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f000 fd9b 	bl	80129a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 8011e72:	4603      	mov	r3, r0
 8011e74:	4618      	mov	r0, r3
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 8011e7c:	b590      	push	{r4, r7, lr}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f000 fda5 	bl	80129d6 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 8011e8c:	bf00      	nop
 8011e8e:	4620      	mov	r0, r4
 8011e90:	370c      	adds	r7, #12
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd90      	pop	{r4, r7, pc}

08011e96 <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8011e96:	b480      	push	{r7}
 8011e98:	b085      	sub	sp, #20
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	60f8      	str	r0, [r7, #12]
 8011e9e:	60b9      	str	r1, [r7, #8]
 8011ea0:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	881a      	ldrh	r2, [r3, #0]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	bf34      	ite	cc
 8011eae:	2301      	movcc	r3, #1
 8011eb0:	2300      	movcs	r3, #0
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6839      	ldr	r1, [r7, #0]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f000 fd8c 	bl	80129ec <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8011ede:	b480      	push	{r7}
 8011ee0:	b083      	sub	sp, #12
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	601a      	str	r2, [r3, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011efe:	b5b0      	push	{r4, r5, r7, lr}
 8011f00:	b088      	sub	sp, #32
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	60f8      	str	r0, [r7, #12]
 8011f06:	60b9      	str	r1, [r7, #8]
 8011f08:	607a      	str	r2, [r7, #4]
 8011f0a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ef f9aa 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f12:	4604      	mov	r4, r0
 8011f14:	6838      	ldr	r0, [r7, #0]
 8011f16:	f000 fd78 	bl	8012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f1e:	f7ef f9b8 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011f22:	4603      	mov	r3, r0
 8011f24:	462a      	mov	r2, r5
 8011f26:	4621      	mov	r1, r4
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f000 fd79 	bl	8012a20 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8011f2e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8011f30:	69f8      	ldr	r0, [r7, #28]
 8011f32:	f000 febb 	bl	8012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011f36:	4603      	mov	r3, r0
 8011f38:	f107 0010 	add.w	r0, r7, #16
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	68f9      	ldr	r1, [r7, #12]
 8011f40:	f000 fd91 	bl	8012a66 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d007      	beq.n	8011f5a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011f4a:	6939      	ldr	r1, [r7, #16]
 8011f4c:	697a      	ldr	r2, [r7, #20]
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	f000 febe 	bl	8012cd2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8011f56:	4603      	mov	r3, r0
 8011f58:	e00b      	b.n	8011f72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011f5a:	69f9      	ldr	r1, [r7, #28]
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	f7fa fa4e 	bl	800c3fe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8011f62:	693a      	ldr	r2, [r7, #16]
 8011f64:	f107 0318 	add.w	r3, r7, #24
 8011f68:	4611      	mov	r1, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7f3 fc1b 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8011f70:	69bb      	ldr	r3, [r7, #24]
      }
 8011f72:	4618      	mov	r0, r3
 8011f74:	3720      	adds	r7, #32
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bdb0      	pop	{r4, r5, r7, pc}

08011f7a <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011f7a:	b590      	push	{r4, r7, lr}
 8011f7c:	b085      	sub	sp, #20
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	1c9a      	adds	r2, r3, #2
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011f8e:	2008      	movs	r0, #8
 8011f90:	f00e fdb2 	bl	8020af8 <_Znwj>
 8011f94:	4603      	mov	r3, r0
 8011f96:	461c      	mov	r4, r3
 8011f98:	6839      	ldr	r1, [r7, #0]
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f000 fed6 	bl	8012d4c <_ZN5FieldIJtEEC1EPt>
 8011fa0:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f103 0208 	add.w	r2, r3, #8
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	60bb      	str	r3, [r7, #8]
 8011fac:	f107 0308 	add.w	r3, r7, #8
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	4610      	mov	r0, r2
 8011fb4:	f7ff ff42 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011fb8:	bf00      	nop
    }
 8011fba:	3714      	adds	r7, #20
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd90      	pop	{r4, r7, pc}

08011fc0 <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011fc0:	b590      	push	{r4, r7, lr}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	1d1a      	adds	r2, r3, #4
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011fd4:	2008      	movs	r0, #8
 8011fd6:	f00e fd8f 	bl	8020af8 <_Znwj>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	461c      	mov	r4, r3
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 fec9 	bl	8012d78 <_ZN5FieldIJmEEC1EPm>
 8011fe6:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f103 0208 	add.w	r2, r3, #8
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	60bb      	str	r3, [r7, #8]
 8011ff2:	f107 0308 	add.w	r3, r7, #8
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	f7ff ff1f 	bl	8011e3c <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011ffe:	bf00      	nop
    }
 8012000:	3714      	adds	r7, #20
 8012002:	46bd      	mov	sp, r7
 8012004:	bd90      	pop	{r4, r7, pc}

08012006 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8012006:	b480      	push	{r7}
 8012008:	b083      	sub	sp, #12
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	689b      	ldr	r3, [r3, #8]
      }
 8012012:	4618      	mov	r0, r3
 8012014:	370c      	adds	r7, #12
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801201e:	b480      	push	{r7}
 8012020:	b083      	sub	sp, #12
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	3304      	adds	r3, #4
 801202a:	4618      	mov	r0, r3
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr

08012036 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012036:	b590      	push	{r4, r7, lr}
 8012038:	b087      	sub	sp, #28
 801203a:	af00      	add	r7, sp, #0
 801203c:	60f8      	str	r0, [r7, #12]
 801203e:	60b9      	str	r1, [r7, #8]
 8012040:	607a      	str	r2, [r7, #4]
 8012042:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d01d      	beq.n	8012086 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801204a:	68fc      	ldr	r4, [r7, #12]
 801204c:	68b8      	ldr	r0, [r7, #8]
 801204e:	f7f6 fb75 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8012052:	4603      	mov	r3, r0
 8012054:	6819      	ldr	r1, [r3, #0]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	4620      	mov	r0, r4
 801205e:	f7ee ff3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8012062:	4603      	mov	r3, r0
 8012064:	f083 0301 	eor.w	r3, r3, #1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d006      	beq.n	801207c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	607b      	str	r3, [r7, #4]
 8012072:	68b8      	ldr	r0, [r7, #8]
 8012074:	f000 fe96 	bl	8012da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8012078:	60b8      	str	r0, [r7, #8]
 801207a:	e7e3      	b.n	8012044 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 801207c:	68b8      	ldr	r0, [r7, #8]
 801207e:	f000 fe9d 	bl	8012dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8012082:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012084:	e7de      	b.n	8012044 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8012086:	f107 0314 	add.w	r3, r7, #20
 801208a:	6879      	ldr	r1, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	f000 f805 	bl	801209c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8012092:	697b      	ldr	r3, [r7, #20]
    }
 8012094:	4618      	mov	r0, r3
 8012096:	371c      	adds	r7, #28
 8012098:	46bd      	mov	sp, r7
 801209a:	bd90      	pop	{r4, r7, pc}

0801209c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	689b      	ldr	r3, [r3, #8]
      }
 80120c6:	4618      	mov	r0, r3
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80120d2:	b480      	push	{r7}
 80120d4:	b083      	sub	sp, #12
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	3304      	adds	r3, #4
 80120de:	4618      	mov	r0, r3
 80120e0:	370c      	adds	r7, #12
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80120ea:	b590      	push	{r4, r7, lr}
 80120ec:	b087      	sub	sp, #28
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	60f8      	str	r0, [r7, #12]
 80120f2:	60b9      	str	r1, [r7, #8]
 80120f4:	607a      	str	r2, [r7, #4]
 80120f6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d01d      	beq.n	801213a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80120fe:	68fc      	ldr	r4, [r7, #12]
 8012100:	68b8      	ldr	r0, [r7, #8]
 8012102:	f7f1 fe73 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8012106:	4603      	mov	r3, r0
 8012108:	6819      	ldr	r1, [r3, #0]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	461a      	mov	r2, r3
 8012110:	4620      	mov	r0, r4
 8012112:	f7ee fee2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8012116:	4603      	mov	r3, r0
 8012118:	f083 0301 	eor.w	r3, r3, #1
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	d006      	beq.n	8012130 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	607b      	str	r3, [r7, #4]
 8012126:	68b8      	ldr	r0, [r7, #8]
 8012128:	f000 fe54 	bl	8012dd4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801212c:	60b8      	str	r0, [r7, #8]
 801212e:	e7e3      	b.n	80120f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8012130:	68b8      	ldr	r0, [r7, #8]
 8012132:	f000 fe5b 	bl	8012dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8012136:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012138:	e7de      	b.n	80120f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 801213a:	f107 0314 	add.w	r3, r7, #20
 801213e:	6879      	ldr	r1, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	f000 f805 	bl	8012150 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8012146:	697b      	ldr	r3, [r7, #20]
    }
 8012148:	4618      	mov	r0, r3
 801214a:	371c      	adds	r7, #28
 801214c:	46bd      	mov	sp, r7
 801214e:	bd90      	pop	{r4, r7, pc}

08012150 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	683a      	ldr	r2, [r7, #0]
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	4618      	mov	r0, r3
 8012164:	370c      	adds	r7, #12
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr

0801216e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 801216e:	b580      	push	{r7, lr}
 8012170:	b084      	sub	sp, #16
 8012172:	af00      	add	r7, sp, #0
 8012174:	60f8      	str	r0, [r7, #12]
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 801217a:	68b8      	ldr	r0, [r7, #8]
 801217c:	f7ff f8dc 	bl	8011338 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f7fb fa20 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8012186:	4603      	mov	r3, r0
 8012188:	4619      	mov	r1, r3
 801218a:	2001      	movs	r0, #1
 801218c:	f7ee f8d0 	bl	8000330 <_ZnwjPv>
 8012190:	bf00      	nop
 8012192:	3710      	adds	r7, #16
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 fe2f 	bl	8012e04 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 80121a6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 fe37 	bl	8012e1c <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 80121ae:	4603      	mov	r3, r0
	}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80121b8:	b590      	push	{r4, r7, lr}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 fe36 	bl	8012e32 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80121c6:	4603      	mov	r3, r0
 80121c8:	4619      	mov	r1, r3
 80121ca:	4620      	mov	r0, r4
 80121cc:	f000 fe3c 	bl	8012e48 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 80121d0:	bf00      	nop
 80121d2:	370c      	adds	r7, #12
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd90      	pop	{r4, r7, pc}

080121d8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7fb f9f0 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 80121e6:	4603      	mov	r3, r0
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80121f0:	b5b0      	push	{r4, r5, r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	4613      	mov	r3, r2
 80121fc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80121fe:	79fb      	ldrb	r3, [r7, #7]
 8012200:	2b03      	cmp	r3, #3
 8012202:	d016      	beq.n	8012232 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8012204:	2b03      	cmp	r3, #3
 8012206:	dc19      	bgt.n	801223c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8012208:	2b01      	cmp	r3, #1
 801220a:	d002      	beq.n	8012212 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 801220c:	2b02      	cmp	r3, #2
 801220e:	d00a      	beq.n	8012226 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8012210:	e014      	b.n	801223c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8012212:	68b8      	ldr	r0, [r7, #8]
 8012214:	f7ff ffc0 	bl	8012198 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8012218:	4604      	mov	r4, r0
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f7ff ffdc 	bl	80121d8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8012220:	4603      	mov	r3, r0
 8012222:	601c      	str	r4, [r3, #0]
	      break;
 8012224:	e00a      	b.n	801223c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8012226:	462a      	mov	r2, r5
 8012228:	68b9      	ldr	r1, [r7, #8]
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f000 fe1c 	bl	8012e68 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8012230:	e004      	b.n	801223c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8012232:	4621      	mov	r1, r4
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f000 fe2c 	bl	8012e92 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 801223a:	bf00      	nop
	  return false;
 801223c:	2300      	movs	r3, #0
	}
 801223e:	4618      	mov	r0, r3
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bdb0      	pop	{r4, r5, r7, pc}

08012246 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8012246:	b580      	push	{r7, lr}
 8012248:	b084      	sub	sp, #16
 801224a:	af00      	add	r7, sp, #0
 801224c:	60f8      	str	r0, [r7, #12]
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8012252:	68b8      	ldr	r0, [r7, #8]
 8012254:	f7ff f8c6 	bl	80113e4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f7fb f9b4 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 801225e:	4603      	mov	r3, r0
 8012260:	4619      	mov	r1, r3
 8012262:	2001      	movs	r0, #1
 8012264:	f7ee f864 	bl	8000330 <_ZnwjPv>
 8012268:	bf00      	nop
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 fe16 	bl	8012eaa <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 801227e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f000 fe1e 	bl	8012ec2 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8012286:	4603      	mov	r3, r0
	}
 8012288:	4618      	mov	r0, r3
 801228a:	3710      	adds	r7, #16
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8012290:	b590      	push	{r4, r7, lr}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fe1d 	bl	8012ed8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 801229e:	4603      	mov	r3, r0
 80122a0:	4619      	mov	r1, r3
 80122a2:	4620      	mov	r0, r4
 80122a4:	f000 fe23 	bl	8012eee <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 80122a8:	bf00      	nop
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd90      	pop	{r4, r7, pc}

080122b0 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7fb f984 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 80122be:	4603      	mov	r3, r0
 80122c0:	4618      	mov	r0, r3
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80122c8:	b5b0      	push	{r4, r5, r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	4613      	mov	r3, r2
 80122d4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80122d6:	79fb      	ldrb	r3, [r7, #7]
 80122d8:	2b03      	cmp	r3, #3
 80122da:	d016      	beq.n	801230a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 80122dc:	2b03      	cmp	r3, #3
 80122de:	dc19      	bgt.n	8012314 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d002      	beq.n	80122ea <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d00a      	beq.n	80122fe <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 80122e8:	e014      	b.n	8012314 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80122ea:	68b8      	ldr	r0, [r7, #8]
 80122ec:	f7ff ffc0 	bl	8012270 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80122f0:	4604      	mov	r4, r0
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	f7ff ffdc 	bl	80122b0 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 80122f8:	4603      	mov	r3, r0
 80122fa:	601c      	str	r4, [r3, #0]
	      break;
 80122fc:	e00a      	b.n	8012314 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80122fe:	462a      	mov	r2, r5
 8012300:	68b9      	ldr	r1, [r7, #8]
 8012302:	68f8      	ldr	r0, [r7, #12]
 8012304:	f000 fe03 	bl	8012f0e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8012308:	e004      	b.n	8012314 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 801230a:	4621      	mov	r1, r4
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f000 fe13 	bl	8012f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8012312:	bf00      	nop
	  return false;
 8012314:	2300      	movs	r3, #0
	}
 8012316:	4618      	mov	r0, r3
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bdb0      	pop	{r4, r5, r7, pc}

0801231e <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801231e:	b590      	push	{r4, r7, lr}
 8012320:	b087      	sub	sp, #28
 8012322:	af00      	add	r7, sp, #0
 8012324:	60f8      	str	r0, [r7, #12]
 8012326:	60b9      	str	r1, [r7, #8]
 8012328:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 fe10 	bl	8012f50 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8012330:	4604      	mov	r4, r0
 8012332:	68f8      	ldr	r0, [r7, #12]
 8012334:	f000 fe1d 	bl	8012f72 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8012338:	4603      	mov	r3, r0
 801233a:	1ae2      	subs	r2, r4, r3
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	429a      	cmp	r2, r3
 8012340:	bf34      	ite	cc
 8012342:	2301      	movcc	r3, #1
 8012344:	2300      	movcs	r3, #0
 8012346:	b2db      	uxtb	r3, r3
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f00e fc9d 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012352:	68f8      	ldr	r0, [r7, #12]
 8012354:	f000 fe0d 	bl	8012f72 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8012358:	4604      	mov	r4, r0
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f000 fe09 	bl	8012f72 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8012360:	4603      	mov	r3, r0
 8012362:	613b      	str	r3, [r7, #16]
 8012364:	f107 0208 	add.w	r2, r7, #8
 8012368:	f107 0310 	add.w	r3, r7, #16
 801236c:	4611      	mov	r1, r2
 801236e:	4618      	mov	r0, r3
 8012370:	f7f0 fa6f 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012374:	4603      	mov	r3, r0
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4423      	add	r3, r4
 801237a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801237c:	68f8      	ldr	r0, [r7, #12]
 801237e:	f000 fdf8 	bl	8012f72 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8012382:	4602      	mov	r2, r0
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	4293      	cmp	r3, r2
 8012388:	d306      	bcc.n	8012398 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 fde0 	bl	8012f50 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8012390:	4602      	mov	r2, r0
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	4293      	cmp	r3, r2
 8012396:	d904      	bls.n	80123a2 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f000 fdd9 	bl	8012f50 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 801239e:	4603      	mov	r3, r0
 80123a0:	e000      	b.n	80123a4 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 80123a2:	697b      	ldr	r3, [r7, #20]
      }
 80123a4:	4618      	mov	r0, r3
 80123a6:	371c      	adds	r7, #28
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd90      	pop	{r4, r7, pc}

080123ac <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80123ac:	b590      	push	{r4, r7, lr}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7fb fb0c 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 80123bc:	4603      	mov	r3, r0
 80123be:	681c      	ldr	r4, [r3, #0]
 80123c0:	6838      	ldr	r0, [r7, #0]
 80123c2:	f7fb fb07 	bl	800d9d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 80123c6:	4603      	mov	r3, r0
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	1ae3      	subs	r3, r4, r3
 80123cc:	109b      	asrs	r3, r3, #2
 80123ce:	4618      	mov	r0, r3
 80123d0:	370c      	adds	r7, #12
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd90      	pop	{r4, r7, pc}

080123d6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b082      	sub	sp, #8
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d006      	beq.n	80123f4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6839      	ldr	r1, [r7, #0]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 fdd1 	bl	8012f92 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 80123f0:	4603      	mov	r3, r0
 80123f2:	e000      	b.n	80123f6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 80123f4:	2300      	movs	r3, #0
      }
 80123f6:	4618      	mov	r0, r3
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80123fe:	b590      	push	{r4, r7, lr}
 8012400:	b087      	sub	sp, #28
 8012402:	af02      	add	r7, sp, #8
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	60b9      	str	r1, [r7, #8]
 8012408:	607a      	str	r2, [r7, #4]
 801240a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801240c:	f88d 4000 	strb.w	r4, [sp]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	68b9      	ldr	r1, [r7, #8]
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	f000 fddb 	bl	8012fd2 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801241c:	4603      	mov	r3, r0
      }
 801241e:	4618      	mov	r0, r3
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	bd90      	pop	{r4, r7, pc}

08012426 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012426:	b580      	push	{r7, lr}
 8012428:	b084      	sub	sp, #16
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	009b      	lsls	r3, r3, #2
 8012438:	425b      	negs	r3, r3
 801243a:	4413      	add	r3, r2
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	f107 020c 	add.w	r2, r7, #12
 8012442:	f107 0308 	add.w	r3, r7, #8
 8012446:	4611      	mov	r1, r2
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fa55 	bl	80108f8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	4618      	mov	r0, r3
 8012452:	3710      	adds	r7, #16
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801246e:	b480      	push	{r7}
 8012470:	b083      	sub	sp, #12
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr

0801249a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801249a:	b590      	push	{r4, r7, lr}
 801249c:	b087      	sub	sp, #28
 801249e:	af00      	add	r7, sp, #0
 80124a0:	60f8      	str	r0, [r7, #12]
 80124a2:	60b9      	str	r1, [r7, #8]
 80124a4:	607a      	str	r2, [r7, #4]
 80124a6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d01b      	beq.n	80124e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80124ae:	68fc      	ldr	r4, [r7, #12]
 80124b0:	68b8      	ldr	r0, [r7, #8]
 80124b2:	f7f9 f806 	bl	800b4c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80124b6:	4603      	mov	r3, r0
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	4619      	mov	r1, r3
 80124bc:	4620      	mov	r0, r4
 80124be:	f7f8 fdaf 	bl	800b020 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80124c2:	4603      	mov	r3, r0
 80124c4:	f083 0301 	eor.w	r3, r3, #1
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d006      	beq.n	80124dc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	607b      	str	r3, [r7, #4]
 80124d2:	68b8      	ldr	r0, [r7, #8]
 80124d4:	f7f9 f8e2 	bl	800b69c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80124d8:	60b8      	str	r0, [r7, #8]
 80124da:	e7e5      	b.n	80124a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80124dc:	68b8      	ldr	r0, [r7, #8]
 80124de:	f7f9 f8d1 	bl	800b684 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80124e2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80124e4:	e7e0      	b.n	80124a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 80124e6:	f107 0314 	add.w	r3, r7, #20
 80124ea:	6879      	ldr	r1, [r7, #4]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7f9 f80c 	bl	800b50a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 80124f2:	697b      	ldr	r3, [r7, #20]
    }
 80124f4:	4618      	mov	r0, r3
 80124f6:	371c      	adds	r7, #28
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd90      	pop	{r4, r7, pc}

080124fc <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80124fc:	b590      	push	{r4, r7, lr}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8012506:	687c      	ldr	r4, [r7, #4]
 8012508:	6838      	ldr	r0, [r7, #0]
 801250a:	f7ff f917 	bl	801173c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801250e:	4603      	mov	r3, r0
 8012510:	4619      	mov	r1, r3
 8012512:	4620      	mov	r0, r4
 8012514:	f000 fd6f 	bl	8012ff6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	bd90      	pop	{r4, r7, pc}

08012522 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af02      	add	r7, sp, #8
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
 8012530:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	4619      	mov	r1, r3
 8012536:	2018      	movs	r0, #24
 8012538:	f7ed fefa 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f7f9 fab3 	bl	800baa8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8012542:	4604      	mov	r4, r0
 8012544:	68b8      	ldr	r0, [r7, #8]
 8012546:	f7f8 fe8b 	bl	800b260 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801254a:	4605      	mov	r5, r0
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ee fe8a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012552:	4606      	mov	r6, r0
 8012554:	6838      	ldr	r0, [r7, #0]
 8012556:	f7ff f90f 	bl	8011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801255a:	4680      	mov	r8, r0
 801255c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801255e:	f7ee fe98 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012562:	4603      	mov	r3, r0
 8012564:	9300      	str	r3, [sp, #0]
 8012566:	4643      	mov	r3, r8
 8012568:	4632      	mov	r2, r6
 801256a:	4629      	mov	r1, r5
 801256c:	4620      	mov	r0, r4
 801256e:	f000 fd8c 	bl	801308a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8012572:	bf00      	nop
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801257c <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8012584:	1d3b      	adds	r3, r7, #4
 8012586:	4618      	mov	r0, r3
 8012588:	f7fb fd30 	bl	800dfec <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801258c:	4603      	mov	r3, r0
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <_ZSt14__copy_move_a1ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	68b9      	ldr	r1, [r7, #8]
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f000 fd8a 	bl	80130c2 <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>
 80125ae:	4603      	mov	r3, r0
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff ffda 	bl	801257c <_ZSt12__niter_baseIPP13StreamMessageSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80125c8:	4602      	mov	r2, r0
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	1a9b      	subs	r3, r3, r2
 80125ce:	109b      	asrs	r3, r3, #2
 80125d0:	461a      	mov	r2, r3
 80125d2:	1d3b      	adds	r3, r7, #4
 80125d4:	4611      	mov	r1, r2
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd fe3e 	bl	8010258 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEplEi>
 80125dc:	4603      	mov	r3, r0
 80125de:	4618      	mov	r0, r3
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 80125e6:	b480      	push	{r7}
 80125e8:	b083      	sub	sp, #12
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
    }
 80125ee:	bf00      	nop
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr

080125fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b082      	sub	sp, #8
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	429a      	cmp	r2, r3
 801260a:	d00a      	beq.n	8012622 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 fd84 	bl	801311a <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 8012612:	4603      	mov	r3, r0
 8012614:	4618      	mov	r0, r3
 8012616:	f000 fd8b 	bl	8013130 <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	3304      	adds	r3, #4
 801261e:	607b      	str	r3, [r7, #4]
 8012620:	e7f0      	b.n	8012604 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 8012622:	bf00      	nop
 8012624:	3708      	adds	r7, #8
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}

0801262a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 801262a:	b480      	push	{r7}
 801262c:	b083      	sub	sp, #12
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	6039      	str	r1, [r7, #0]
 8012634:	bf00      	nop
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr

08012640 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012640:	b590      	push	{r4, r7, lr}
 8012642:	b087      	sub	sp, #28
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f000 fd7a 	bl	8013146 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012652:	4604      	mov	r4, r0
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f000 fd87 	bl	8013168 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801265a:	4603      	mov	r3, r0
 801265c:	1ae2      	subs	r2, r4, r3
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	429a      	cmp	r2, r3
 8012662:	bf34      	ite	cc
 8012664:	2301      	movcc	r3, #1
 8012666:	2300      	movcs	r3, #0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d002      	beq.n	8012674 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f00e fb0c 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f000 fd77 	bl	8013168 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801267a:	4604      	mov	r4, r0
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f000 fd73 	bl	8013168 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012682:	4603      	mov	r3, r0
 8012684:	613b      	str	r3, [r7, #16]
 8012686:	f107 0208 	add.w	r2, r7, #8
 801268a:	f107 0310 	add.w	r3, r7, #16
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f7f0 f8de 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012696:	4603      	mov	r3, r0
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4423      	add	r3, r4
 801269c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f000 fd62 	bl	8013168 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 80126a4:	4602      	mov	r2, r0
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d306      	bcc.n	80126ba <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f000 fd4a 	bl	8013146 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 80126b2:	4602      	mov	r2, r0
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d904      	bls.n	80126c4 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f000 fd43 	bl	8013146 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 80126c0:	4603      	mov	r3, r0
 80126c2:	e000      	b.n	80126c6 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 80126c4:	697b      	ldr	r3, [r7, #20]
      }
 80126c6:	4618      	mov	r0, r3
 80126c8:	371c      	adds	r7, #28
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd90      	pop	{r4, r7, pc}

080126ce <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80126ce:	b590      	push	{r4, r7, lr}
 80126d0:	b083      	sub	sp, #12
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7fb fd87 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80126de:	4603      	mov	r3, r0
 80126e0:	681c      	ldr	r4, [r3, #0]
 80126e2:	6838      	ldr	r0, [r7, #0]
 80126e4:	f7fb fd82 	bl	800e1ec <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80126e8:	4603      	mov	r3, r0
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	1ae3      	subs	r3, r4, r3
 80126ee:	109b      	asrs	r3, r3, #2
 80126f0:	4618      	mov	r0, r3
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd90      	pop	{r4, r7, pc}

080126f8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d006      	beq.n	8012716 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6839      	ldr	r1, [r7, #0]
 801270c:	4618      	mov	r0, r3
 801270e:	f000 fd3b 	bl	8013188 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 8012712:	4603      	mov	r3, r0
 8012714:	e000      	b.n	8012718 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 8012716:	2300      	movs	r3, #0
      }
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012720:	b590      	push	{r4, r7, lr}
 8012722:	b087      	sub	sp, #28
 8012724:	af02      	add	r7, sp, #8
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801272e:	f88d 4000 	strb.w	r4, [sp]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	68b9      	ldr	r1, [r7, #8]
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f000 fd45 	bl	80131c8 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801273e:	4603      	mov	r3, r0
      }
 8012740:	4618      	mov	r0, r3
 8012742:	3714      	adds	r7, #20
 8012744:	46bd      	mov	sp, r7
 8012746:	bd90      	pop	{r4, r7, pc}

08012748 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	009b      	lsls	r3, r3, #2
 801275a:	425b      	negs	r3, r3
 801275c:	4413      	add	r3, r2
 801275e:	60fb      	str	r3, [r7, #12]
 8012760:	f107 020c 	add.w	r2, r7, #12
 8012764:	f107 0308 	add.w	r3, r7, #8
 8012768:	4611      	mov	r1, r2
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe fbaf 	bl	8010ece <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	4618      	mov	r0, r3
 8012774:	3710      	adds	r7, #16
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801277a:	b580      	push	{r7, lr}
 801277c:	b082      	sub	sp, #8
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fd57 	bl	8013238 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 801278a:	4603      	mov	r3, r0
 801278c:	4618      	mov	r0, r3
 801278e:	f000 fd39 	bl	8013204 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8012792:	4603      	mov	r3, r0
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	60fb      	str	r3, [r7, #12]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80127ae:	f7ed fdb7 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d006      	beq.n	80127c6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4618      	mov	r0, r3
 80127be:	f00e f99b 	bl	8020af8 <_Znwj>
 80127c2:	4603      	mov	r3, r0
 80127c4:	e006      	b.n	80127d4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80127c6:	2200      	movs	r2, #0
 80127c8:	68b9      	ldr	r1, [r7, #8]
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f001 f90a 	bl	80139e4 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 80127d0:	4603      	mov	r3, r0
 80127d2:	bf00      	nop
      { return __a.allocate(__n); }
 80127d4:	4618      	mov	r0, r3
 80127d6:	3710      	adds	r7, #16
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f000 fd2c 	bl	801324e <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 80127f6:	4603      	mov	r3, r0
      }
 80127f8:	4618      	mov	r0, r3
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>:
      _M_access() const
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7fa fee7 	bl	800d5dc <_ZNKSt9_Any_data9_M_accessEv>
 801280e:	4603      	mov	r3, r0
 8012810:	4618      	mov	r0, r3
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	4618      	mov	r0, r3
 8012824:	370c      	adds	r7, #12
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr

0801282e <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801282e:	b480      	push	{r7}
 8012830:	b083      	sub	sp, #12
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4618      	mov	r0, r3
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	7138      	strb	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801284e:	6838      	ldr	r0, [r7, #0]
 8012850:	f7ff ffed 	bl	801282e <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8012854:	4603      	mov	r3, r0
 8012856:	4618      	mov	r0, r3
 8012858:	f7fb fc5a 	bl	800e110 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>
 801285c:	bf00      	nop
 801285e:	3708      	adds	r7, #8
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012864:	b590      	push	{r4, r7, lr}
 8012866:	b085      	sub	sp, #20
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012870:	68b8      	ldr	r0, [r7, #8]
 8012872:	f7ff ffc5 	bl	8012800 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8012876:	4604      	mov	r4, r0
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f7fa fea4 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 801287e:	4603      	mov	r3, r0
 8012880:	4619      	mov	r1, r3
 8012882:	2004      	movs	r0, #4
 8012884:	f7ed fd54 	bl	8000330 <_ZnwjPv>
 8012888:	4602      	mov	r2, r0
 801288a:	6823      	ldr	r3, [r4, #0]
 801288c:	6013      	str	r3, [r2, #0]
	}
 801288e:	bf00      	nop
 8012890:	3714      	adds	r7, #20
 8012892:	46bd      	mov	sp, r7
 8012894:	bd90      	pop	{r4, r7, pc}

08012896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012896:	b580      	push	{r7, lr}
 8012898:	b082      	sub	sp, #8
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 fcf1 	bl	8013288 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
	}
 80128a6:	bf00      	nop
 80128a8:	3708      	adds	r7, #8
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 80128ae:	b480      	push	{r7}
 80128b0:	b083      	sub	sp, #12
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	61fb      	str	r3, [r7, #28]
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	61bb      	str	r3, [r7, #24]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80128dc:	f7ed fd20 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d003      	beq.n	80128ee <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80128e6:	69b8      	ldr	r0, [r7, #24]
 80128e8:	f00e f902 	bl	8020af0 <_ZdlPv>
	    return;
 80128ec:	e005      	b.n	80128fa <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	69b9      	ldr	r1, [r7, #24]
 80128f2:	69f8      	ldr	r0, [r7, #28]
 80128f4:	f001 f8be 	bl	8013a74 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80128f8:	bf00      	nop
 80128fa:	bf00      	nop
 80128fc:	3720      	adds	r7, #32
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}

08012902 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012902:	b580      	push	{r7, lr}
 8012904:	b082      	sub	sp, #8
 8012906:	af00      	add	r7, sp, #0
 8012908:	6078      	str	r0, [r7, #4]
 801290a:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 801290c:	f7ed fd08 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d004      	beq.n	8012920 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8012916:	6839      	ldr	r1, [r7, #0]
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f000 fcc1 	bl	80132a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 801291e:	e003      	b.n	8012928 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 8012920:	6839      	ldr	r1, [r7, #0]
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 fcd4 	bl	80132d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801292e:	b480      	push	{r7}
 8012930:	b083      	sub	sp, #12
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 8012944:	b5b0      	push	{r4, r5, r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	685a      	ldr	r2, [r3, #4]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	689b      	ldr	r3, [r3, #8]
 8012956:	429a      	cmp	r2, r3
 8012958:	d011      	beq.n	801297e <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801295a:	687c      	ldr	r4, [r7, #4]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	685d      	ldr	r5, [r3, #4]
 8012960:	6838      	ldr	r0, [r7, #0]
 8012962:	f000 fcc0 	bl	80132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012966:	4603      	mov	r3, r0
 8012968:	461a      	mov	r2, r3
 801296a:	4629      	mov	r1, r5
 801296c:	4620      	mov	r0, r4
 801296e:	f000 fcda 	bl	8013326 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	1d1a      	adds	r2, r3, #4
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	605a      	str	r2, [r3, #4]
 801297c:	e00c      	b.n	8012998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7f2 fbc7 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012984:	4604      	mov	r4, r0
 8012986:	6838      	ldr	r0, [r7, #0]
 8012988:	f000 fcad 	bl	80132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801298c:	4603      	mov	r3, r0
 801298e:	461a      	mov	r2, r3
 8012990:	4621      	mov	r1, r4
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 fcda 	bl	801334c <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f000 fd53 	bl	8013444 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 801299e:	4603      	mov	r3, r0
      }
 80129a0:	4618      	mov	r0, r3
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bdb0      	pop	{r4, r5, r7, pc}

080129a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 80129a8:	b590      	push	{r4, r7, lr}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7f9 fcf4 	bl	800c3a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80129b8:	4604      	mov	r4, r0
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 fd5d 	bl	801347a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80129c0:	4602      	mov	r2, r0
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	4621      	mov	r1, r4
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 fd63 	bl	8013492 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80129cc:	4603      	mov	r3, r0
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd90      	pop	{r4, r7, pc}

080129d6 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 80129d6:	b480      	push	{r7}
 80129d8:	b083      	sub	sp, #12
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80129de:	bf00      	nop
 80129e0:	4618      	mov	r0, r3
 80129e2:	370c      	adds	r7, #12
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr

080129ec <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6839      	ldr	r1, [r7, #0]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f000 fd7a 	bl	80134f4 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}

08012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012a0a:	b480      	push	{r7}
 8012a0c:	b083      	sub	sp, #12
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8012a20:	b5b0      	push	{r4, r5, r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af02      	add	r7, sp, #8
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	60b9      	str	r1, [r7, #8]
 8012a2a:	607a      	str	r2, [r7, #4]
 8012a2c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8012a2e:	68f8      	ldr	r0, [r7, #12]
 8012a30:	f000 fd6f 	bl	8013512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8012a34:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8012a36:	68b8      	ldr	r0, [r7, #8]
 8012a38:	f7ee fc15 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff ffe3 	bl	8012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012a44:	4605      	mov	r5, r0
 8012a46:	6838      	ldr	r0, [r7, #0]
 8012a48:	f7ee fc23 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	462b      	mov	r3, r5
 8012a52:	4622      	mov	r2, r4
 8012a54:	6979      	ldr	r1, [r7, #20]
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f000 fd6c 	bl	8013534 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8012a5c:	697b      	ldr	r3, [r7, #20]
	}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3718      	adds	r7, #24
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bdb0      	pop	{r4, r5, r7, pc}

08012a66 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012a66:	b590      	push	{r4, r7, lr}
 8012a68:	b08d      	sub	sp, #52	; 0x34
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	60f8      	str	r0, [r7, #12]
 8012a6e:	60b9      	str	r1, [r7, #8]
 8012a70:	607a      	str	r2, [r7, #4]
 8012a72:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8012a74:	1d3b      	adds	r3, r7, #4
 8012a76:	4618      	mov	r0, r3
 8012a78:	f000 fd89 	bl	801358e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8012a80:	69bc      	ldr	r4, [r7, #24]
 8012a82:	68b8      	ldr	r0, [r7, #8]
 8012a84:	f000 fcf9 	bl	801347a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	429c      	cmp	r4, r3
 8012a8c:	bf0c      	ite	eq
 8012a8e:	2301      	moveq	r3, #1
 8012a90:	2300      	movne	r3, #0
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d030      	beq.n	8012afa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8012a98:	68b8      	ldr	r0, [r7, #8]
 8012a9a:	f000 fd89 	bl	80135b0 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8012a9e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d013      	beq.n	8012acc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012aa4:	68bc      	ldr	r4, [r7, #8]
 8012aa6:	68b8      	ldr	r0, [r7, #8]
 8012aa8:	f000 fd8e 	bl	80135c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012aac:	4603      	mov	r3, r0
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 fd95 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	683a      	ldr	r2, [r7, #0]
 8012aba:	4619      	mov	r1, r3
 8012abc:	4620      	mov	r0, r4
 8012abe:	f7ff f9ea 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d001      	beq.n	8012acc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e000      	b.n	8012ace <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8012acc:	2300      	movs	r3, #0
	  if (size() > 0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00c      	beq.n	8012aec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	61fb      	str	r3, [r7, #28]
 8012ad6:	68b8      	ldr	r0, [r7, #8]
 8012ad8:	f000 fd76 	bl	80135c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012adc:	4602      	mov	r2, r0
 8012ade:	f107 031c 	add.w	r3, r7, #28
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f7ef f9df 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012aea:	e0db      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	683a      	ldr	r2, [r7, #0]
 8012af0:	68b9      	ldr	r1, [r7, #8]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f000 fd80 	bl	80135f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012af8:	e0d4      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8012afa:	68bc      	ldr	r4, [r7, #8]
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 fd6e 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	6839      	ldr	r1, [r7, #0]
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f7ff f9c3 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d057      	beq.n	8012bc6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8012b1a:	69bc      	ldr	r4, [r7, #24]
 8012b1c:	68b8      	ldr	r0, [r7, #8]
 8012b1e:	f000 fdf0 	bl	8013702 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012b22:	4603      	mov	r3, r0
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	429c      	cmp	r4, r3
 8012b28:	bf0c      	ite	eq
 8012b2a:	2301      	moveq	r3, #1
 8012b2c:	2300      	movne	r3, #0
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00d      	beq.n	8012b50 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8012b34:	68b8      	ldr	r0, [r7, #8]
 8012b36:	f000 fde4 	bl	8013702 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	68b8      	ldr	r0, [r7, #8]
 8012b3e:	f000 fde0 	bl	8013702 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012b42:	4603      	mov	r3, r0
 8012b44:	461a      	mov	r2, r3
 8012b46:	4621      	mov	r1, r4
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f7ef fa59 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012b4e:	e0a9      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8012b50:	68bc      	ldr	r4, [r7, #8]
 8012b52:	f107 0314 	add.w	r3, r7, #20
 8012b56:	4618      	mov	r0, r3
 8012b58:	f000 fddf 	bl	801371a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f000 fd3d 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012b66:	4603      	mov	r3, r0
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f7ff f992 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d01f      	beq.n	8012bb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f9 fc27 	bl	800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	bf0c      	ite	eq
 8012b86:	2301      	moveq	r3, #1
 8012b88:	2300      	movne	r3, #0
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00a      	beq.n	8012ba6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8012b90:	2300      	movs	r3, #0
 8012b92:	623b      	str	r3, [r7, #32]
 8012b94:	f107 0214 	add.w	r2, r7, #20
 8012b98:	f107 0320 	add.w	r3, r7, #32
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f7ef f982 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012ba4:	e07e      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8012ba6:	f107 0218 	add.w	r2, r7, #24
 8012baa:	f107 0318 	add.w	r3, r7, #24
 8012bae:	4619      	mov	r1, r3
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f7ef fa25 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012bb6:	e075      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	683a      	ldr	r2, [r7, #0]
 8012bbc:	68b9      	ldr	r1, [r7, #8]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f000 fd1a 	bl	80135f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012bc4:	e06e      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8012bc6:	68bc      	ldr	r4, [r7, #8]
 8012bc8:	69bb      	ldr	r3, [r7, #24]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f000 fd08 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	683a      	ldr	r2, [r7, #0]
 8012bd4:	4619      	mov	r1, r3
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7ff f95d 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d056      	beq.n	8012c90 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8012be6:	69bc      	ldr	r4, [r7, #24]
 8012be8:	68b8      	ldr	r0, [r7, #8]
 8012bea:	f000 fced 	bl	80135c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	429c      	cmp	r4, r3
 8012bf4:	bf0c      	ite	eq
 8012bf6:	2301      	moveq	r3, #1
 8012bf8:	2300      	movne	r3, #0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00c      	beq.n	8012c1a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8012c00:	2300      	movs	r3, #0
 8012c02:	627b      	str	r3, [r7, #36]	; 0x24
 8012c04:	68b8      	ldr	r0, [r7, #8]
 8012c06:	f000 fcdf 	bl	80135c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c10:	4619      	mov	r1, r3
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	f7ef f948 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012c18:	e044      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8012c1a:	68bc      	ldr	r4, [r7, #8]
 8012c1c:	f107 0310 	add.w	r3, r7, #16
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f2 fab5 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8012c26:	4603      	mov	r3, r0
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f000 fcd8 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012c30:	4603      	mov	r3, r0
 8012c32:	461a      	mov	r2, r3
 8012c34:	6839      	ldr	r1, [r7, #0]
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7ff f92d 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d01f      	beq.n	8012c82 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7f9 fbc2 	bl	800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	bf0c      	ite	eq
 8012c50:	2301      	moveq	r3, #1
 8012c52:	2300      	movne	r3, #0
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00a      	beq.n	8012c70 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c5e:	f107 0218 	add.w	r2, r7, #24
 8012c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c66:	4619      	mov	r1, r3
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f7ef f91d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012c6e:	e019      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8012c70:	f107 0210 	add.w	r2, r7, #16
 8012c74:	f107 0310 	add.w	r3, r7, #16
 8012c78:	4619      	mov	r1, r3
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	f7ef f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012c80:	e010      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	68b9      	ldr	r1, [r7, #8]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 fcb5 	bl	80135f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012c8e:	e009      	b.n	8012ca4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8012c90:	2300      	movs	r3, #0
 8012c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012c98:	f107 0318 	add.w	r3, r7, #24
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7ef f9e9 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	3734      	adds	r7, #52	; 0x34
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd90      	pop	{r4, r7, pc}

08012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 fd41 	bl	801373c <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	f107 030c 	add.w	r3, r7, #12
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f000 fd48 	bl	8013758 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 8012cc8:	4603      	mov	r3, r0
      }
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3710      	adds	r7, #16
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012cd2:	b5b0      	push	{r4, r5, r7, lr}
 8012cd4:	b086      	sub	sp, #24
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	60f8      	str	r0, [r7, #12]
 8012cda:	60b9      	str	r1, [r7, #8]
 8012cdc:	607a      	str	r2, [r7, #4]
 8012cde:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d117      	bne.n	8012d16 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f000 fbc7 	bl	801347a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012cec:	4602      	mov	r2, r0
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d010      	beq.n	8012d16 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8012cf4:	68fc      	ldr	r4, [r7, #12]
 8012cf6:	6838      	ldr	r0, [r7, #0]
 8012cf8:	f7ff ffd8 	bl	8012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012cfc:	4605      	mov	r5, r0
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 fc6e 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012d04:	4603      	mov	r3, r0
 8012d06:	461a      	mov	r2, r3
 8012d08:	4629      	mov	r1, r5
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	f7ff f8c3 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d001      	beq.n	8012d1a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8012d16:	2301      	movs	r3, #1
 8012d18:	e000      	b.n	8012d1c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8012d1a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8012d1c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8012d22:	7df8      	ldrb	r0, [r7, #23]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	6839      	ldr	r1, [r7, #0]
 8012d28:	f00d ff52 	bl	8020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	695b      	ldr	r3, [r3, #20]
 8012d30:	1c5a      	adds	r2, r3, #1
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8012d36:	f107 0310 	add.w	r3, r7, #16
 8012d3a:	6839      	ldr	r1, [r7, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f2 fd32 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012d42:	693b      	ldr	r3, [r7, #16]
    }
 8012d44:	4618      	mov	r0, r3
 8012d46:	3718      	adds	r7, #24
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bdb0      	pop	{r4, r5, r7, pc}

08012d4c <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff f849 	bl	8011df0 <_ZN5FieldIJEEC1Ev>
 8012d5e:	4a05      	ldr	r2, [pc, #20]	; (8012d74 <_ZN5FieldIJtEEC1EPt+0x28>)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	601a      	str	r2, [r3, #0]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	605a      	str	r2, [r3, #4]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	080212c4 	.word	0x080212c4

08012d78 <_ZN5FieldIJmEEC1EPm>:
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7ff f833 	bl	8011df0 <_ZN5FieldIJEEC1Ev>
 8012d8a:	4a05      	ldr	r2, [pc, #20]	; (8012da0 <_ZN5FieldIJmEEC1EPm+0x28>)
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	683a      	ldr	r2, [r7, #0]
 8012d94:	605a      	str	r2, [r3, #4]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	080212b0 	.word	0x080212b0

08012da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	370c      	adds	r7, #12
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	4618      	mov	r0, r3
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7fa fbe5 	bl	800d5dc <_ZNKSt9_Any_data9_M_accessEv>
 8012e12:	4603      	mov	r3, r0
 8012e14:	4618      	mov	r0, r3
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	4618      	mov	r0, r3
 8012e28:	370c      	adds	r7, #12
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012e32:	b480      	push	{r7}
 8012e34:	b083      	sub	sp, #12
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	370c      	adds	r7, #12
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr

08012e48 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	7138      	strb	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012e52:	6838      	ldr	r0, [r7, #0]
 8012e54:	f7ff ffed 	bl	8012e32 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fb fce2 	bl	800e824 <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8012e60:	bf00      	nop
 8012e62:	3708      	adds	r7, #8
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012e74:	68b8      	ldr	r0, [r7, #8]
 8012e76:	f7ff ffc5 	bl	8012e04 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f7fa fba3 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8012e80:	4603      	mov	r3, r0
 8012e82:	4619      	mov	r1, r3
 8012e84:	2001      	movs	r0, #1
 8012e86:	f7ed fa53 	bl	8000330 <_ZnwjPv>
	}
 8012e8a:	bf00      	nop
 8012e8c:	3710      	adds	r7, #16
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b082      	sub	sp, #8
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
 8012e9a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 fc67 	bl	8013770 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 8012ea2:	bf00      	nop
 8012ea4:	3708      	adds	r7, #8
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b082      	sub	sp, #8
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7fa fb92 	bl	800d5dc <_ZNKSt9_Any_data9_M_accessEv>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012ec2:	b480      	push	{r7}
 8012ec4:	b083      	sub	sp, #12
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012ed8:	b480      	push	{r7}
 8012eda:	b083      	sub	sp, #12
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	370c      	adds	r7, #12
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eec:	4770      	bx	lr

08012eee <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b082      	sub	sp, #8
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	7138      	strb	r0, [r7, #4]
 8012ef6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012ef8:	6838      	ldr	r0, [r7, #0]
 8012efa:	f7ff ffed 	bl	8012ed8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012efe:	4603      	mov	r3, r0
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7fb fc99 	bl	800e838 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 8012f06:	bf00      	nop
 8012f08:	3708      	adds	r7, #8
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b084      	sub	sp, #16
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	60f8      	str	r0, [r7, #12]
 8012f16:	60b9      	str	r1, [r7, #8]
 8012f18:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012f1a:	68b8      	ldr	r0, [r7, #8]
 8012f1c:	f7ff ffc5 	bl	8012eaa <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f7fa fb50 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8012f26:	4603      	mov	r3, r0
 8012f28:	4619      	mov	r1, r3
 8012f2a:	2001      	movs	r0, #1
 8012f2c:	f7ed fa00 	bl	8000330 <_ZnwjPv>
	}
 8012f30:	bf00      	nop
 8012f32:	3710      	adds	r7, #16
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 fc20 	bl	8013788 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8012f48:	bf00      	nop
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 fc46 	bl	80137ec <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012f60:	4603      	mov	r3, r0
 8012f62:	4618      	mov	r0, r3
 8012f64:	f000 fc28 	bl	80137b8 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012f72:	b480      	push	{r7}
 8012f74:	b083      	sub	sp, #12
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	1ad3      	subs	r3, r2, r3
 8012f84:	109b      	asrs	r3, r3, #2
 8012f86:	4618      	mov	r0, r3
 8012f88:	370c      	adds	r7, #12
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b084      	sub	sp, #16
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
 8012f9a:	6039      	str	r1, [r7, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	60fb      	str	r3, [r7, #12]
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012fa4:	f7ed f9bc 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d006      	beq.n	8012fbc <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f00d fda0 	bl	8020af8 <_Znwj>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	e006      	b.n	8012fca <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	68b9      	ldr	r1, [r7, #8]
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 feb7 	bl	8013d34 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	bf00      	nop
      { return __a.allocate(__n); }
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	60f8      	str	r0, [r7, #12]
 8012fda:	60b9      	str	r1, [r7, #8]
 8012fdc:	607a      	str	r2, [r7, #4]
 8012fde:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	687a      	ldr	r2, [r7, #4]
 8012fe4:	68b9      	ldr	r1, [r7, #8]
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f000 fc0b 	bl	8013802 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012fec:	4603      	mov	r3, r0
      }
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013000:	6838      	ldr	r0, [r7, #0]
 8013002:	f7fe fb9b 	bl	801173c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8013006:	4602      	mov	r2, r0
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8013016:	b580      	push	{r7, lr}
 8013018:	b082      	sub	sp, #8
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
 801301e:	6039      	str	r1, [r7, #0]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	4611      	mov	r1, r2
 8013026:	4618      	mov	r0, r3
 8013028:	f000 fc08 	bl	801383c <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4618      	mov	r0, r3
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013036:	b5b0      	push	{r4, r5, r7, lr}
 8013038:	b088      	sub	sp, #32
 801303a:	af00      	add	r7, sp, #0
 801303c:	60f8      	str	r0, [r7, #12]
 801303e:	60b9      	str	r1, [r7, #8]
 8013040:	607a      	str	r2, [r7, #4]
 8013042:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f7ee f90e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f7fe fb94 	bl	8011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013050:	4602      	mov	r2, r0
 8013052:	f107 0318 	add.w	r3, r7, #24
 8013056:	4611      	mov	r1, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7ff ffdc 	bl	8013016 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 801305e:	f107 0418 	add.w	r4, r7, #24
 8013062:	6838      	ldr	r0, [r7, #0]
 8013064:	f7ee f915 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	4619      	mov	r1, r3
 801306c:	2008      	movs	r0, #8
 801306e:	f7ed f95f 	bl	8000330 <_ZnwjPv>
 8013072:	4605      	mov	r5, r0
 8013074:	7f3b      	ldrb	r3, [r7, #28]
 8013076:	4622      	mov	r2, r4
 8013078:	7d39      	ldrb	r1, [r7, #20]
 801307a:	4628      	mov	r0, r5
 801307c:	f000 fc0f 	bl	801389e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8013080:	462b      	mov	r3, r5
 8013082:	4618      	mov	r0, r3
 8013084:	3720      	adds	r7, #32
 8013086:	46bd      	mov	sp, r7
 8013088:	bdb0      	pop	{r4, r5, r7, pc}

0801308a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801308a:	b5b0      	push	{r4, r5, r7, lr}
 801308c:	b084      	sub	sp, #16
 801308e:	af00      	add	r7, sp, #0
 8013090:	60f8      	str	r0, [r7, #12]
 8013092:	60b9      	str	r1, [r7, #8]
 8013094:	607a      	str	r2, [r7, #4]
 8013096:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ee f8e4 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801309e:	4604      	mov	r4, r0
 80130a0:	6838      	ldr	r0, [r7, #0]
 80130a2:	f7fe fb69 	bl	8011778 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80130a6:	4605      	mov	r5, r0
 80130a8:	6a38      	ldr	r0, [r7, #32]
 80130aa:	f7ee f8f2 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80130ae:	4603      	mov	r3, r0
 80130b0:	462a      	mov	r2, r5
 80130b2:	4621      	mov	r1, r4
 80130b4:	68b8      	ldr	r0, [r7, #8]
 80130b6:	f7ff ffbe 	bl	8013036 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 80130ba:	bf00      	nop
 80130bc:	3710      	adds	r7, #16
 80130be:	46bd      	mov	sp, r7
 80130c0:	bdb0      	pop	{r4, r5, r7, pc}

080130c2 <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b084      	sub	sp, #16
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	60f8      	str	r0, [r7, #12]
 80130ca:	60b9      	str	r1, [r7, #8]
 80130cc:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80130ce:	f7ed f927 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d006      	beq.n	80130e6 <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	68b9      	ldr	r1, [r7, #8]
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f000 fbf2 	bl	80138c6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_>
 80130e2:	4603      	mov	r3, r0
 80130e4:	e006      	b.n	80130f4 <_ZSt14__copy_move_a2ILb1EPP13StreamMessageS2_ET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80130e6:	687a      	ldr	r2, [r7, #4]
 80130e8:	68b9      	ldr	r1, [r7, #8]
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f000 fc0f 	bl	801390e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_>
 80130f0:	4603      	mov	r3, r0
 80130f2:	bf00      	nop
    }
 80130f4:	4618      	mov	r0, r3
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	4619      	mov	r1, r3
 801310e:	68b8      	ldr	r0, [r7, #8]
 8013110:	f00d fcf0 	bl	8020af4 <_ZdlPvj>
      }
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801311a:	b480      	push	{r7}
 801311c:	b083      	sub	sp, #12
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	4618      	mov	r0, r3
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff fa54 	bl	80125e6 <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 801313e:	bf00      	nop
 8013140:	3708      	adds	r7, #8
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}

08013146 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4618      	mov	r0, r3
 8013152:	f000 fc1f 	bl	8013994 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8013156:	4603      	mov	r3, r0
 8013158:	4618      	mov	r0, r3
 801315a:	f000 fc01 	bl	8013960 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 801315e:	4603      	mov	r3, r0
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013168:	b480      	push	{r7}
 801316a:	b083      	sub	sp, #12
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	685a      	ldr	r2, [r3, #4]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	1ad3      	subs	r3, r2, r3
 801317a:	109b      	asrs	r3, r3, #2
 801317c:	4618      	mov	r0, r3
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr

08013188 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	60fb      	str	r3, [r7, #12]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801319a:	f7ed f8c1 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d006      	beq.n	80131b2 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	009b      	lsls	r3, r3, #2
 80131a8:	4618      	mov	r0, r3
 80131aa:	f00d fca5 	bl	8020af8 <_Znwj>
 80131ae:	4603      	mov	r3, r0
 80131b0:	e006      	b.n	80131c0 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80131b2:	2200      	movs	r2, #0
 80131b4:	68b9      	ldr	r1, [r7, #8]
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f000 fe34 	bl	8013e24 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 80131bc:	4603      	mov	r3, r0
 80131be:	bf00      	nop
      { return __a.allocate(__n); }
 80131c0:	4618      	mov	r0, r3
 80131c2:	3710      	adds	r7, #16
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	60b9      	str	r1, [r7, #8]
 80131d2:	607a      	str	r2, [r7, #4]
 80131d4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	687a      	ldr	r2, [r7, #4]
 80131da:	68b9      	ldr	r1, [r7, #8]
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f000 fbe4 	bl	80139aa <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 80131e2:	4603      	mov	r3, r0
      }
 80131e4:	4618      	mov	r0, r3
 80131e6:	3710      	adds	r7, #16
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80131f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80131f8:	4618      	mov	r0, r3
 80131fa:	370c      	adds	r7, #12
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801320c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013210:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f7ff ffea 	bl	80131ec <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8013218:	4603      	mov	r3, r0
 801321a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801321c:	f107 0208 	add.w	r2, r7, #8
 8013220:	f107 030c 	add.w	r3, r7, #12
 8013224:	4611      	mov	r1, r2
 8013226:	4618      	mov	r0, r3
 8013228:	f7ef fddd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 801322c:	4603      	mov	r3, r0
 801322e:	681b      	ldr	r3, [r3, #0]
      }
 8013230:	4618      	mov	r0, r3
 8013232:	3710      	adds	r7, #16
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	4618      	mov	r0, r3
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324c:	4770      	bx	lr

0801324e <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801324e:	b5b0      	push	{r4, r5, r7, lr}
 8013250:	b084      	sub	sp, #16
 8013252:	af00      	add	r7, sp, #0
 8013254:	60f8      	str	r0, [r7, #12]
 8013256:	60b9      	str	r1, [r7, #8]
 8013258:	607a      	str	r2, [r7, #4]
 801325a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801325c:	68f8      	ldr	r0, [r7, #12]
 801325e:	f000 fbe0 	bl	8013a22 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8013262:	4604      	mov	r4, r0
 8013264:	68b8      	ldr	r0, [r7, #8]
 8013266:	f000 fbdc 	bl	8013a22 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 801326a:	4605      	mov	r5, r0
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f000 fbd8 	bl	8013a22 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8013272:	4602      	mov	r2, r0
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	4629      	mov	r1, r5
 8013278:	4620      	mov	r0, r4
 801327a:	f000 fbdd 	bl	8013a38 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 801327e:	4603      	mov	r3, r0
    }
 8013280:	4618      	mov	r0, r3
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bdb0      	pop	{r4, r5, r7, pc}

08013288 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7fa f998 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8013296:	4603      	mov	r3, r0
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d00a      	beq.n	80132c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 fbed 	bl	8013a92 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 80132b8:	4603      	mov	r3, r0
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 fbf4 	bl	8013aa8 <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	3304      	adds	r3, #4
 80132c4:	607b      	str	r3, [r7, #4]
 80132c6:	e7f0      	b.n	80132aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 80132c8:	bf00      	nop
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
 80132da:	bf00      	nop
 80132dc:	370c      	adds	r7, #12
 80132de:	46bd      	mov	sp, r7
 80132e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e4:	4770      	bx	lr

080132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80132e6:	b480      	push	{r7}
 80132e8:	b083      	sub	sp, #12
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	4618      	mov	r0, r3
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80132fc:	b590      	push	{r4, r7, lr}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013306:	6838      	ldr	r0, [r7, #0]
 8013308:	f7ff ffed 	bl	80132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801330c:	4603      	mov	r3, r0
 801330e:	681c      	ldr	r4, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4619      	mov	r1, r3
 8013314:	2004      	movs	r0, #4
 8013316:	f7ed f80b 	bl	8000330 <_ZnwjPv>
 801331a:	4603      	mov	r3, r0
 801331c:	601c      	str	r4, [r3, #0]
 801331e:	4618      	mov	r0, r3
 8013320:	370c      	adds	r7, #12
 8013322:	46bd      	mov	sp, r7
 8013324:	bd90      	pop	{r4, r7, pc}

08013326 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013326:	b580      	push	{r7, lr}
 8013328:	b084      	sub	sp, #16
 801332a:	af00      	add	r7, sp, #0
 801332c:	60f8      	str	r0, [r7, #12]
 801332e:	60b9      	str	r1, [r7, #8]
 8013330:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7ff ffd7 	bl	80132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8013338:	4603      	mov	r3, r0
 801333a:	4619      	mov	r1, r3
 801333c:	68b8      	ldr	r0, [r7, #8]
 801333e:	f7ff ffdd 	bl	80132fc <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8013342:	bf00      	nop
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
	...

0801334c <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801334c:	b5b0      	push	{r4, r5, r7, lr}
 801334e:	b08c      	sub	sp, #48	; 0x30
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013358:	4a39      	ldr	r2, [pc, #228]	; (8013440 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801335a:	2101      	movs	r1, #1
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f000 fbae 	bl	8013abe <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8013362:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8013370:	68f8      	ldr	r0, [r7, #12]
 8013372:	f7f1 febe 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8013376:	4603      	mov	r3, r0
 8013378:	617b      	str	r3, [r7, #20]
 801337a:	f107 0214 	add.w	r2, r7, #20
 801337e:	f107 0308 	add.w	r3, r7, #8
 8013382:	4611      	mov	r1, r2
 8013384:	4618      	mov	r0, r3
 8013386:	f000 fbe1 	bl	8013b4c <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801338a:	4603      	mov	r3, r0
 801338c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013392:	4618      	mov	r0, r3
 8013394:	f000 fbef 	bl	8013b76 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8013398:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801339e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80133a0:	6a3b      	ldr	r3, [r7, #32]
 80133a2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80133a4:	69fa      	ldr	r2, [r7, #28]
 80133a6:	18d5      	adds	r5, r2, r3
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f7ff ff9c 	bl	80132e6 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80133ae:	4603      	mov	r3, r0
 80133b0:	461a      	mov	r2, r3
 80133b2:	4629      	mov	r1, r5
 80133b4:	4620      	mov	r0, r4
 80133b6:	f7ff ffb6 	bl	8013326 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 80133ba:	2300      	movs	r3, #0
 80133bc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80133be:	f107 0308 	add.w	r3, r7, #8
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f1 fb15 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80133c8:	4603      	mov	r3, r0
 80133ca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fcf5 	bl	8011dbe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80133d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80133d6:	69fa      	ldr	r2, [r7, #28]
 80133d8:	4621      	mov	r1, r4
 80133da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133dc:	f000 fbdf 	bl	8013b9e <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80133e0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	3304      	adds	r3, #4
 80133e6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80133e8:	f107 0308 	add.w	r3, r7, #8
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f1 fb00 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80133f2:	4603      	mov	r3, r0
 80133f4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fe fce0 	bl	8011dbe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80133fe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013400:	69ba      	ldr	r2, [r7, #24]
 8013402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013404:	4620      	mov	r0, r4
 8013406:	f000 fbca 	bl	8013b9e <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801340a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801340c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	689a      	ldr	r2, [r3, #8]
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	1ad3      	subs	r3, r2, r3
 8013416:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8013418:	461a      	mov	r2, r3
 801341a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801341c:	f7fe fcbc 	bl	8011d98 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	69fa      	ldr	r2, [r7, #28]
 8013424:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	69ba      	ldr	r2, [r7, #24]
 801342a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	69fa      	ldr	r2, [r7, #28]
 8013432:	441a      	add	r2, r3
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	609a      	str	r2, [r3, #8]
    }
 8013438:	bf00      	nop
 801343a:	3730      	adds	r7, #48	; 0x30
 801343c:	46bd      	mov	sp, r7
 801343e:	bdb0      	pop	{r4, r5, r7, pc}
 8013440:	0802123c 	.word	0x0802123c

08013444 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7f1 fe60 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8013452:	4603      	mov	r3, r0
 8013454:	60fb      	str	r3, [r7, #12]
 8013456:	f107 030c 	add.w	r3, r7, #12
 801345a:	2101      	movs	r1, #1
 801345c:	4618      	mov	r0, r3
 801345e:	f000 fbb2 	bl	8013bc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8013462:	4603      	mov	r3, r0
 8013464:	60bb      	str	r3, [r7, #8]
 8013466:	f107 0308 	add.w	r3, r7, #8
 801346a:	4618      	mov	r0, r3
 801346c:	f7f1 faf4 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8013470:	4603      	mov	r3, r0
      }
 8013472:	4618      	mov	r0, r3
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}

0801347a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801347a:	b480      	push	{r7}
 801347c:	b083      	sub	sp, #12
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	3304      	adds	r3, #4
 8013486:	4618      	mov	r0, r3
 8013488:	370c      	adds	r7, #12
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr

08013492 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013492:	b590      	push	{r4, r7, lr}
 8013494:	b087      	sub	sp, #28
 8013496:	af00      	add	r7, sp, #0
 8013498:	60f8      	str	r0, [r7, #12]
 801349a:	60b9      	str	r1, [r7, #8]
 801349c:	607a      	str	r2, [r7, #4]
 801349e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d01b      	beq.n	80134de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80134a6:	68fc      	ldr	r4, [r7, #12]
 80134a8:	68b8      	ldr	r0, [r7, #8]
 80134aa:	f7ff fbff 	bl	8012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80134ae:	4603      	mov	r3, r0
 80134b0:	683a      	ldr	r2, [r7, #0]
 80134b2:	4619      	mov	r1, r3
 80134b4:	4620      	mov	r0, r4
 80134b6:	f7fe fcee 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 80134ba:	4603      	mov	r3, r0
 80134bc:	f083 0301 	eor.w	r3, r3, #1
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d006      	beq.n	80134d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	607b      	str	r3, [r7, #4]
 80134ca:	68b8      	ldr	r0, [r7, #8]
 80134cc:	f7f8 ff8b 	bl	800c3e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80134d0:	60b8      	str	r0, [r7, #8]
 80134d2:	e7e5      	b.n	80134a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80134d4:	68b8      	ldr	r0, [r7, #8]
 80134d6:	f7f8 ff7a 	bl	800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80134da:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80134dc:	e7e0      	b.n	80134a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 80134de:	f107 0314 	add.w	r3, r7, #20
 80134e2:	6879      	ldr	r1, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7f2 f95e 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 80134ea:	697b      	ldr	r3, [r7, #20]
    }
 80134ec:	4618      	mov	r0, r3
 80134ee:	371c      	adds	r7, #28
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd90      	pop	{r4, r7, pc}

080134f4 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	683a      	ldr	r2, [r7, #0]
 8013502:	601a      	str	r2, [r3, #0]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4618      	mov	r0, r3
 8013508:	370c      	adds	r7, #12
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr

08013512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8013512:	b580      	push	{r7, lr}
 8013514:	b082      	sub	sp, #8
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7f8 ffa7 	bl	800c46e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8013520:	4603      	mov	r3, r0
 8013522:	2101      	movs	r1, #1
 8013524:	4618      	mov	r0, r3
 8013526:	f000 fb67 	bl	8013bf8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 801352a:	4603      	mov	r3, r0
 801352c:	4618      	mov	r0, r3
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8013534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013538:	b086      	sub	sp, #24
 801353a:	af02      	add	r7, sp, #8
 801353c:	60f8      	str	r0, [r7, #12]
 801353e:	60b9      	str	r1, [r7, #8]
 8013540:	607a      	str	r2, [r7, #4]
 8013542:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	4619      	mov	r1, r3
 8013548:	2018      	movs	r0, #24
 801354a:	f7ec fef1 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f7f8 ff8d 	bl	800c46e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8013554:	4604      	mov	r4, r0
 8013556:	68b8      	ldr	r0, [r7, #8]
 8013558:	f7f1 ff86 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 801355c:	4605      	mov	r5, r0
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f7ed fe81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013564:	4606      	mov	r6, r0
 8013566:	6838      	ldr	r0, [r7, #0]
 8013568:	f7ff fa4f 	bl	8012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801356c:	4680      	mov	r8, r0
 801356e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013570:	f7ed fe8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013574:	4603      	mov	r3, r0
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	4643      	mov	r3, r8
 801357a:	4632      	mov	r2, r6
 801357c:	4629      	mov	r1, r5
 801357e:	4620      	mov	r0, r4
 8013580:	f000 fb97 	bl	8013cb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8013584:	bf00      	nop
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801358e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801358e:	b580      	push	{r7, lr}
 8013590:	b084      	sub	sp, #16
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	f107 030c 	add.w	r3, r7, #12
 801359e:	4611      	mov	r1, r2
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f2 f900 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	4618      	mov	r0, r3
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80135b0:	b480      	push	{r7}
 80135b2:	b083      	sub	sp, #12
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	4618      	mov	r0, r3
 80135be:	370c      	adds	r7, #12
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80135c8:	b480      	push	{r7}
 80135ca:	b083      	sub	sp, #12
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3310      	adds	r3, #16
 80135d4:	4618      	mov	r0, r3
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7ff fb5f 	bl	8012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80135ee:	4603      	mov	r3, r0
 80135f0:	4618      	mov	r0, r3
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b08b      	sub	sp, #44	; 0x2c
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8013604:	68b8      	ldr	r0, [r7, #8]
 8013606:	f7f8 fecb 	bl	800c3a0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801360a:	4603      	mov	r3, r0
 801360c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801360e:	68b8      	ldr	r0, [r7, #8]
 8013610:	f7ff ff33 	bl	801347a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013614:	4603      	mov	r3, r0
 8013616:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8013618:	2301      	movs	r3, #1
 801361a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d020      	beq.n	8013666 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8013628:	68bc      	ldr	r4, [r7, #8]
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fb3d 	bl	8012cac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013632:	4603      	mov	r3, r0
 8013634:	461a      	mov	r2, r3
 8013636:	6879      	ldr	r1, [r7, #4]
 8013638:	4620      	mov	r0, r4
 801363a:	f7fe fc2c 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 801363e:	4603      	mov	r3, r0
 8013640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8013644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013648:	2b00      	cmp	r3, #0
 801364a:	d005      	beq.n	8013658 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	4618      	mov	r0, r3
 8013650:	f7f8 fec9 	bl	800c3e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013654:	4603      	mov	r3, r0
 8013656:	e004      	b.n	8013662 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	4618      	mov	r0, r3
 801365c:	f7f8 feb7 	bl	800c3ce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013660:	4603      	mov	r3, r0
 8013662:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8013664:	e7db      	b.n	801361e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8013666:	697a      	ldr	r2, [r7, #20]
 8013668:	f107 0310 	add.w	r3, r7, #16
 801366c:	4611      	mov	r1, r2
 801366e:	4618      	mov	r0, r3
 8013670:	f7f2 f899 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8013674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013678:	2b00      	cmp	r3, #0
 801367a:	d01d      	beq.n	80136b8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801367c:	68b8      	ldr	r0, [r7, #8]
 801367e:	f7f1 fed1 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8013682:	4603      	mov	r3, r0
 8013684:	61fb      	str	r3, [r7, #28]
 8013686:	f107 021c 	add.w	r2, r7, #28
 801368a:	f107 0310 	add.w	r3, r7, #16
 801368e:	4611      	mov	r1, r2
 8013690:	4618      	mov	r0, r3
 8013692:	f7f1 fd69 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d008      	beq.n	80136ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801369c:	f107 0214 	add.w	r2, r7, #20
 80136a0:	f107 0318 	add.w	r3, r7, #24
 80136a4:	4619      	mov	r1, r3
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 fb1f 	bl	8013cea <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 80136ac:	e025      	b.n	80136fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80136ae:	f107 0310 	add.w	r3, r7, #16
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 f831 	bl	801371a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80136b8:	68bc      	ldr	r4, [r7, #8]
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff ff8f 	bl	80135e0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80136c2:	4603      	mov	r3, r0
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	4619      	mov	r1, r3
 80136c8:	4620      	mov	r0, r4
 80136ca:	f7fe fbe4 	bl	8011e96 <_ZNKSt4lessItEclERKtS2_>
 80136ce:	4603      	mov	r3, r0
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d008      	beq.n	80136e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80136d4:	f107 0214 	add.w	r2, r7, #20
 80136d8:	f107 0318 	add.w	r3, r7, #24
 80136dc:	4619      	mov	r1, r3
 80136de:	68f8      	ldr	r0, [r7, #12]
 80136e0:	f000 fb03 	bl	8013cea <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 80136e4:	e009      	b.n	80136fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80136e6:	2300      	movs	r3, #0
 80136e8:	623b      	str	r3, [r7, #32]
 80136ea:	f107 0220 	add.w	r2, r7, #32
 80136ee:	f107 0310 	add.w	r3, r7, #16
 80136f2:	4619      	mov	r1, r3
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	f7ee fcbe 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	372c      	adds	r7, #44	; 0x2c
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd90      	pop	{r4, r7, pc}

08013702 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8013702:	b480      	push	{r7}
 8013704:	b083      	sub	sp, #12
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	330c      	adds	r3, #12
 801370e:	4618      	mov	r0, r3
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr

0801371a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801371a:	b580      	push	{r7, lr}
 801371c:	b082      	sub	sp, #8
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	4618      	mov	r0, r3
 8013728:	f00d fa50 	bl	8020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801372c:	4602      	mov	r2, r0
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	601a      	str	r2, [r3, #0]
	return *this;
 8013732:	687b      	ldr	r3, [r7, #4]
      }
 8013734:	4618      	mov	r0, r3
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	3310      	adds	r3, #16
 8013748:	4618      	mov	r0, r3
 801374a:	f000 fae7 	bl	8013d1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 801374e:	4603      	mov	r3, r0
 8013750:	4618      	mov	r0, r3
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	4618      	mov	r0, r3
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7f9 ff24 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 801377e:	4603      	mov	r3, r0
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7f9 ff18 	bl	800d5c6 <_ZNSt9_Any_data9_M_accessEv>
 8013796:	4603      	mov	r3, r0
 8013798:	4618      	mov	r0, r3
 801379a:	3708      	adds	r7, #8
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80137a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80137c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80137c4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7ff ffea 	bl	80137a0 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 80137cc:	4603      	mov	r3, r0
 80137ce:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80137d0:	f107 0208 	add.w	r2, r7, #8
 80137d4:	f107 030c 	add.w	r3, r7, #12
 80137d8:	4611      	mov	r1, r2
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ef fb03 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80137e0:	4603      	mov	r3, r0
 80137e2:	681b      	ldr	r3, [r3, #0]
      }
 80137e4:	4618      	mov	r0, r3
 80137e6:	3710      	adds	r7, #16
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr

08013802 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013802:	b5b0      	push	{r4, r5, r7, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	af00      	add	r7, sp, #0
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	60b9      	str	r1, [r7, #8]
 801380c:	607a      	str	r2, [r7, #4]
 801380e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f000 faae 	bl	8013d72 <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013816:	4604      	mov	r4, r0
 8013818:	68b8      	ldr	r0, [r7, #8]
 801381a:	f000 faaa 	bl	8013d72 <_ZSt12__niter_baseIPP5TimerET_S3_>
 801381e:	4605      	mov	r5, r0
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f000 faa6 	bl	8013d72 <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013826:	4602      	mov	r2, r0
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	4629      	mov	r1, r5
 801382c:	4620      	mov	r0, r4
 801382e:	f000 faab 	bl	8013d88 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013832:	4603      	mov	r3, r0
    }
 8013834:	4618      	mov	r0, r3
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bdb0      	pop	{r4, r5, r7, pc}

0801383c <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801383c:	b590      	push	{r4, r7, lr}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013846:	687c      	ldr	r4, [r7, #4]
 8013848:	6838      	ldr	r0, [r7, #0]
 801384a:	f000 fabb 	bl	8013dc4 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 801384e:	4603      	mov	r3, r0
 8013850:	4618      	mov	r0, r3
 8013852:	f000 fac4 	bl	8013dde <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013856:	4603      	mov	r3, r0
 8013858:	4619      	mov	r1, r3
 801385a:	4620      	mov	r0, r4
 801385c:	f7ff fbcb 	bl	8012ff6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	370c      	adds	r7, #12
 8013866:	46bd      	mov	sp, r7
 8013868:	bd90      	pop	{r4, r7, pc}

0801386a <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801386a:	b580      	push	{r7, lr}
 801386c:	b084      	sub	sp, #16
 801386e:	af00      	add	r7, sp, #0
 8013870:	60f8      	str	r0, [r7, #12]
 8013872:	60b9      	str	r1, [r7, #8]
 8013874:	607a      	str	r2, [r7, #4]
 8013876:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013878:	68b8      	ldr	r0, [r7, #8]
 801387a:	f000 fabb 	bl	8013df4 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801387e:	4603      	mov	r3, r0
 8013880:	4618      	mov	r0, r3
 8013882:	f000 faac 	bl	8013dde <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013886:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013888:	781a      	ldrb	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	701a      	strb	r2, [r3, #0]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2200      	movs	r2, #0
 8013892:	605a      	str	r2, [r3, #4]
      { }
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	4618      	mov	r0, r3
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801389e:	b5b0      	push	{r4, r5, r7, lr}
 80138a0:	b086      	sub	sp, #24
 80138a2:	af02      	add	r7, sp, #8
 80138a4:	60f8      	str	r0, [r7, #12]
 80138a6:	7239      	strb	r1, [r7, #8]
 80138a8:	607a      	str	r2, [r7, #4]
 80138aa:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80138ac:	463a      	mov	r2, r7
 80138ae:	f88d 4000 	strb.w	r4, [sp]
 80138b2:	462b      	mov	r3, r5
 80138b4:	6879      	ldr	r1, [r7, #4]
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff ffd7 	bl	801386a <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	4618      	mov	r0, r3
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bdb0      	pop	{r4, r5, r7, pc}

080138c6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b086      	sub	sp, #24
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	60f8      	str	r0, [r7, #12]
 80138ce:	60b9      	str	r1, [r7, #8]
 80138d0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80138d2:	68ba      	ldr	r2, [r7, #8]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	109b      	asrs	r3, r3, #2
 80138da:	617b      	str	r3, [r7, #20]
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	dd10      	ble.n	8013904 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_+0x3e>
	      *__result = std::move(*__first);
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	f000 fa93 	bl	8013e0e <_ZSt4moveIRP13StreamMessageEONSt16remove_referenceIT_E4typeEOS4_>
 80138e8:	4603      	mov	r3, r0
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	601a      	str	r2, [r3, #0]
	      ++__first;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	3304      	adds	r3, #4
 80138f4:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3304      	adds	r3, #4
 80138fa:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	3b01      	subs	r3, #1
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	e7eb      	b.n	80138dc <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP13StreamMessageS5_EET0_T_S7_S6_+0x16>
	  return __result;
 8013904:	687b      	ldr	r3, [r7, #4]
	}
 8013906:	4618      	mov	r0, r3
 8013908:	3718      	adds	r7, #24
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801390e:	b580      	push	{r7, lr}
 8013910:	b086      	sub	sp, #24
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801391a:	68ba      	ldr	r2, [r7, #8]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	109b      	asrs	r3, r3, #2
 8013922:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d006      	beq.n	8013938 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13StreamMessageEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	461a      	mov	r2, r3
 8013930:	68f9      	ldr	r1, [r7, #12]
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f00d fa1a 	bl	8020d6c <memmove>
	  return __result + _Num;
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	687a      	ldr	r2, [r7, #4]
 801393e:	4413      	add	r3, r2
	}
 8013940:	4618      	mov	r0, r3
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013950:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013968:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801396c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff ffea 	bl	8013948 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 8013974:	4603      	mov	r3, r0
 8013976:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013978:	f107 0208 	add.w	r2, r7, #8
 801397c:	f107 030c 	add.w	r3, r7, #12
 8013980:	4611      	mov	r1, r2
 8013982:	4618      	mov	r0, r3
 8013984:	f7ef fa2f 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013988:	4603      	mov	r3, r0
 801398a:	681b      	ldr	r3, [r3, #0]
      }
 801398c:	4618      	mov	r0, r3
 801398e:	3710      	adds	r7, #16
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	370c      	adds	r7, #12
 80139a2:	46bd      	mov	sp, r7
 80139a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a8:	4770      	bx	lr

080139aa <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80139aa:	b5b0      	push	{r4, r5, r7, lr}
 80139ac:	b084      	sub	sp, #16
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	60f8      	str	r0, [r7, #12]
 80139b2:	60b9      	str	r1, [r7, #8]
 80139b4:	607a      	str	r2, [r7, #4]
 80139b6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	f000 fa52 	bl	8013e62 <_ZSt12__niter_baseIPP6StreamET_S3_>
 80139be:	4604      	mov	r4, r0
 80139c0:	68b8      	ldr	r0, [r7, #8]
 80139c2:	f000 fa4e 	bl	8013e62 <_ZSt12__niter_baseIPP6StreamET_S3_>
 80139c6:	4605      	mov	r5, r0
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fa4a 	bl	8013e62 <_ZSt12__niter_baseIPP6StreamET_S3_>
 80139ce:	4602      	mov	r2, r0
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	4629      	mov	r1, r5
 80139d4:	4620      	mov	r0, r4
 80139d6:	f000 fa4f 	bl	8013e78 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80139da:	4603      	mov	r3, r0
    }
 80139dc:	4618      	mov	r0, r3
 80139de:	3710      	adds	r7, #16
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bdb0      	pop	{r4, r5, r7, pc}

080139e4 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80139f0:	68f8      	ldr	r0, [r7, #12]
 80139f2:	f000 fa5f 	bl	8013eb4 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 80139f6:	4602      	mov	r2, r0
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	4293      	cmp	r3, r2
 80139fc:	bf8c      	ite	hi
 80139fe:	2301      	movhi	r3, #1
 8013a00:	2300      	movls	r3, #0
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d001      	beq.n	8013a0c <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013a08:	f00d f93d 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	4618      	mov	r0, r3
 8013a12:	f00d f871 	bl	8020af8 <_Znwj>
 8013a16:	4603      	mov	r3, r0
 8013a18:	bf00      	nop
      }
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3710      	adds	r7, #16
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 8013a22:	b480      	push	{r7}
 8013a24:	b083      	sub	sp, #12
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	370c      	adds	r7, #12
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr

08013a38 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013a46:	68ba      	ldr	r2, [r7, #8]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	109b      	asrs	r3, r3, #2
 8013a4e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd06      	ble.n	8013a64 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	68f9      	ldr	r1, [r7, #12]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f00d f984 	bl	8020d6c <memmove>
      return __result + __count;
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	4413      	add	r3, r2
    }
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3718      	adds	r7, #24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	4619      	mov	r1, r3
 8013a86:	68b8      	ldr	r0, [r7, #8]
 8013a88:	f00d f834 	bl	8020af4 <_ZdlPvj>
      }
 8013a8c:	3710      	adds	r7, #16
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}

08013a92 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013a92:	b480      	push	{r7}
 8013a94:	b083      	sub	sp, #12
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	370c      	adds	r7, #12
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 fa0b 	bl	8013ecc <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 8013ab6:	bf00      	nop
 8013ab8:	3708      	adds	r7, #8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8013abe:	b590      	push	{r4, r7, lr}
 8013ac0:	b087      	sub	sp, #28
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	60f8      	str	r0, [r7, #12]
 8013ac6:	60b9      	str	r1, [r7, #8]
 8013ac8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f000 fa08 	bl	8013ee0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	f000 fa15 	bl	8013f02 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	1ae2      	subs	r2, r4, r3
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	bf34      	ite	cc
 8013ae2:	2301      	movcc	r3, #1
 8013ae4:	2300      	movcs	r3, #0
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d002      	beq.n	8013af2 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f00d f8cd 	bl	8020c8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	f000 fa05 	bl	8013f02 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013af8:	4604      	mov	r4, r0
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f000 fa01 	bl	8013f02 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013b00:	4603      	mov	r3, r0
 8013b02:	613b      	str	r3, [r7, #16]
 8013b04:	f107 0208 	add.w	r2, r7, #8
 8013b08:	f107 0310 	add.w	r3, r7, #16
 8013b0c:	4611      	mov	r1, r2
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ee fe9f 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8013b14:	4603      	mov	r3, r0
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4423      	add	r3, r4
 8013b1a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013b1c:	68f8      	ldr	r0, [r7, #12]
 8013b1e:	f000 f9f0 	bl	8013f02 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013b22:	4602      	mov	r2, r0
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d306      	bcc.n	8013b38 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f000 f9d8 	bl	8013ee0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013b30:	4602      	mov	r2, r0
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d904      	bls.n	8013b42 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f000 f9d1 	bl	8013ee0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	e000      	b.n	8013b44 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 8013b42:	697b      	ldr	r3, [r7, #20]
      }
 8013b44:	4618      	mov	r0, r3
 8013b46:	371c      	adds	r7, #28
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd90      	pop	{r4, r7, pc}

08013b4c <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8013b4c:	b590      	push	{r4, r7, lr}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f7f0 ff4b 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	681c      	ldr	r4, [r3, #0]
 8013b60:	6838      	ldr	r0, [r7, #0]
 8013b62:	f7f0 ff46 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013b66:	4603      	mov	r3, r0
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	1ae3      	subs	r3, r4, r3
 8013b6c:	109b      	asrs	r3, r3, #2
 8013b6e:	4618      	mov	r0, r3
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd90      	pop	{r4, r7, pc}

08013b76 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b082      	sub	sp, #8
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
 8013b7e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d006      	beq.n	8013b94 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f000 f9c9 	bl	8013f22 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 8013b90:	4603      	mov	r3, r0
 8013b92:	e000      	b.n	8013b96 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 8013b94:	2300      	movs	r3, #0
      }
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}

08013b9e <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8013b9e:	b590      	push	{r4, r7, lr}
 8013ba0:	b087      	sub	sp, #28
 8013ba2:	af02      	add	r7, sp, #8
 8013ba4:	60f8      	str	r0, [r7, #12]
 8013ba6:	60b9      	str	r1, [r7, #8]
 8013ba8:	607a      	str	r2, [r7, #4]
 8013baa:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8013bac:	f88d 4000 	strb.w	r4, [sp]
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	68b9      	ldr	r1, [r7, #8]
 8013bb6:	68f8      	ldr	r0, [r7, #12]
 8013bb8:	f000 f9d3 	bl	8013f62 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 8013bbc:	4603      	mov	r3, r0
      }
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3714      	adds	r7, #20
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd90      	pop	{r4, r7, pc}

08013bc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b084      	sub	sp, #16
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
 8013bce:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	425b      	negs	r3, r3
 8013bda:	4413      	add	r3, r2
 8013bdc:	60fb      	str	r3, [r7, #12]
 8013bde:	f107 020c 	add.w	r2, r7, #12
 8013be2:	f107 0308 	add.w	r3, r7, #8
 8013be6:	4611      	mov	r1, r2
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7f1 fc0b 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	60fb      	str	r3, [r7, #12]
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013c0a:	f7ec fb89 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d009      	beq.n	8013c28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c14:	68ba      	ldr	r2, [r7, #8]
 8013c16:	4613      	mov	r3, r2
 8013c18:	005b      	lsls	r3, r3, #1
 8013c1a:	4413      	add	r3, r2
 8013c1c:	00db      	lsls	r3, r3, #3
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f00c ff6a 	bl	8020af8 <_Znwj>
 8013c24:	4603      	mov	r3, r0
 8013c26:	e006      	b.n	8013c36 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013c28:	2200      	movs	r2, #0
 8013c2a:	68b9      	ldr	r1, [r7, #8]
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 fa83 	bl	8014138 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 8013c32:	4603      	mov	r3, r0
 8013c34:	bf00      	nop
      { return __a.allocate(__n); }
 8013c36:	4618      	mov	r0, r3
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}

08013c3e <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8013c3e:	b580      	push	{r7, lr}
 8013c40:	b082      	sub	sp, #8
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
 8013c46:	6039      	str	r1, [r7, #0]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	683a      	ldr	r2, [r7, #0]
 8013c4c:	4611      	mov	r1, r2
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 f999 	bl	8013f86 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4618      	mov	r0, r3
 8013c58:	3708      	adds	r7, #8
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013c5e:	b5b0      	push	{r4, r5, r7, lr}
 8013c60:	b088      	sub	sp, #32
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	60f8      	str	r0, [r7, #12]
 8013c66:	60b9      	str	r1, [r7, #8]
 8013c68:	607a      	str	r2, [r7, #4]
 8013c6a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013c6c:	68b8      	ldr	r0, [r7, #8]
 8013c6e:	f7ed fafa 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7fe fec9 	bl	8012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	f107 0318 	add.w	r3, r7, #24
 8013c7e:	4611      	mov	r1, r2
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7ff ffdc 	bl	8013c3e <_ZNSt5tupleIJRKtEEC1EOS2_>
 8013c86:	f107 0418 	add.w	r4, r7, #24
 8013c8a:	6838      	ldr	r0, [r7, #0]
 8013c8c:	f7ed fb01 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	4619      	mov	r1, r3
 8013c94:	2008      	movs	r0, #8
 8013c96:	f7ec fb4b 	bl	8000330 <_ZnwjPv>
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	7f3b      	ldrb	r3, [r7, #28]
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	7d39      	ldrb	r1, [r7, #20]
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f000 f9a0 	bl	8013fe8 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8013ca8:	462b      	mov	r3, r5
 8013caa:	4618      	mov	r0, r3
 8013cac:	3720      	adds	r7, #32
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bdb0      	pop	{r4, r5, r7, pc}

08013cb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013cb2:	b5b0      	push	{r4, r5, r7, lr}
 8013cb4:	b084      	sub	sp, #16
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	60f8      	str	r0, [r7, #12]
 8013cba:	60b9      	str	r1, [r7, #8]
 8013cbc:	607a      	str	r2, [r7, #4]
 8013cbe:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f7ed fad0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	6838      	ldr	r0, [r7, #0]
 8013cca:	f7fe fe9e 	bl	8012a0a <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013cce:	4605      	mov	r5, r0
 8013cd0:	6a38      	ldr	r0, [r7, #32]
 8013cd2:	f7ed fade 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	462a      	mov	r2, r5
 8013cda:	4621      	mov	r1, r4
 8013cdc:	68b8      	ldr	r0, [r7, #8]
 8013cde:	f7ff ffbe 	bl	8013c5e <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8013ce2:	bf00      	nop
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bdb0      	pop	{r4, r5, r7, pc}

08013cea <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b084      	sub	sp, #16
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	60f8      	str	r0, [r7, #12]
 8013cf2:	60b9      	str	r1, [r7, #8]
 8013cf4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013cf6:	68b8      	ldr	r0, [r7, #8]
 8013cf8:	f000 f98a 	bl	8014010 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	601a      	str	r2, [r3, #0]
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f7ee fd52 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	605a      	str	r2, [r3, #4]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	4618      	mov	r0, r3
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 f97e 	bl	8014026 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f000 f97b 	bl	801403c <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 8013d46:	4602      	mov	r2, r0
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	bf8c      	ite	hi
 8013d4e:	2301      	movhi	r3, #1
 8013d50:	2300      	movls	r3, #0
 8013d52:	b2db      	uxtb	r3, r3
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d001      	beq.n	8013d5c <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013d58:	f00c ff95 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	009b      	lsls	r3, r3, #2
 8013d60:	4618      	mov	r0, r3
 8013d62:	f00c fec9 	bl	8020af8 <_Znwj>
 8013d66:	4603      	mov	r3, r0
 8013d68:	bf00      	nop
      }
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 8013d72:	b480      	push	{r7}
 8013d74:	b083      	sub	sp, #12
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
 8013d94:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013d96:	68ba      	ldr	r2, [r7, #8]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	1ad3      	subs	r3, r2, r3
 8013d9c:	109b      	asrs	r3, r3, #2
 8013d9e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dd06      	ble.n	8013db4 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	461a      	mov	r2, r3
 8013dac:	68f9      	ldr	r1, [r7, #12]
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f00c ffdc 	bl	8020d6c <memmove>
      return __result + __count;
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	4413      	add	r3, r2
    }
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3718      	adds	r7, #24
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f000 f940 	bl	8014054 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013dde:	b480      	push	{r7}
 8013de0:	b083      	sub	sp, #12
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f000 f934 	bl	801406c <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013e04:	4603      	mov	r3, r0
 8013e06:	4618      	mov	r0, r3
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <_ZSt4moveIRP13StreamMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013e0e:	b480      	push	{r7}
 8013e10:	b083      	sub	sp, #12
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	370c      	adds	r7, #12
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr

08013e24 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f000 f927 	bl	8014084 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 8013e36:	4602      	mov	r2, r0
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	bf8c      	ite	hi
 8013e3e:	2301      	movhi	r3, #1
 8013e40:	2300      	movls	r3, #0
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d001      	beq.n	8013e4c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013e48:	f00c ff1d 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4618      	mov	r0, r3
 8013e52:	f00c fe51 	bl	8020af8 <_Znwj>
 8013e56:	4603      	mov	r3, r0
 8013e58:	bf00      	nop
      }
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3710      	adds	r7, #16
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}

08013e62 <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 8013e62:	b480      	push	{r7}
 8013e64:	b083      	sub	sp, #12
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	60b9      	str	r1, [r7, #8]
 8013e82:	607a      	str	r2, [r7, #4]
 8013e84:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	109b      	asrs	r3, r3, #2
 8013e8e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	dd06      	ble.n	8013ea4 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	68f9      	ldr	r1, [r7, #12]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f00c ff64 	bl	8020d6c <memmove>
      return __result + __count;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	4413      	add	r3, r2
    }
 8013eac:	4618      	mov	r0, r3
 8013eae:	3718      	adds	r7, #24
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013eb4:	b480      	push	{r7}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013ebc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	370c      	adds	r7, #12
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr

08013ecc <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
    }
 8013ed4:	bf00      	nop
 8013ed6:	370c      	adds	r7, #12
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ede:	4770      	bx	lr

08013ee0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 f8fc 	bl	80140e8 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f000 f8de 	bl	80140b4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	4618      	mov	r0, r3
 8013efc:	3708      	adds	r7, #8
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	685a      	ldr	r2, [r3, #4]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	109b      	asrs	r3, r3, #2
 8013f16:	4618      	mov	r0, r3
 8013f18:	370c      	adds	r7, #12
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f20:	4770      	bx	lr

08013f22 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b084      	sub	sp, #16
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	6039      	str	r1, [r7, #0]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	60fb      	str	r3, [r7, #12]
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013f34:	f7ec f9f4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d006      	beq.n	8013f4c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f00c fdd8 	bl	8020af8 <_Znwj>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	e006      	b.n	8013f5a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	68b9      	ldr	r1, [r7, #8]
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f000 f938 	bl	80141c6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 8013f56:	4603      	mov	r3, r0
 8013f58:	bf00      	nop
      { return __a.allocate(__n); }
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b084      	sub	sp, #16
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	60f8      	str	r0, [r7, #12]
 8013f6a:	60b9      	str	r1, [r7, #8]
 8013f6c:	607a      	str	r2, [r7, #4]
 8013f6e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	68b9      	ldr	r1, [r7, #8]
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f000 f8c1 	bl	80140fe <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8013f7c:	4603      	mov	r3, r0
      }
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3710      	adds	r7, #16
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013f86:	b590      	push	{r4, r7, lr}
 8013f88:	b083      	sub	sp, #12
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
 8013f8e:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013f90:	687c      	ldr	r4, [r7, #4]
 8013f92:	6838      	ldr	r0, [r7, #0]
 8013f94:	f000 f8f2 	bl	801417c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 f8fb 	bl	8014196 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7ff faa5 	bl	80134f4 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4618      	mov	r0, r3
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd90      	pop	{r4, r7, pc}

08013fb4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013fc2:	68b8      	ldr	r0, [r7, #8]
 8013fc4:	f000 f8f2 	bl	80141ac <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f000 f8e3 	bl	8014196 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013fd0:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013fd2:	881a      	ldrh	r2, [r3, #0]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	801a      	strh	r2, [r3, #0]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	605a      	str	r2, [r3, #4]
      { }
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013fe8:	b5b0      	push	{r4, r5, r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	7239      	strb	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013ff6:	463a      	mov	r2, r7
 8013ff8:	f88d 4000 	strb.w	r4, [sp]
 8013ffc:	462b      	mov	r3, r5
 8013ffe:	6879      	ldr	r1, [r7, #4]
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f7ff ffd7 	bl	8013fb4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	4618      	mov	r0, r3
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bdb0      	pop	{r4, r5, r7, pc}

08014010 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	4618      	mov	r0, r3
 801401c:	370c      	adds	r7, #12
 801401e:	46bd      	mov	sp, r7
 8014020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014024:	4770      	bx	lr

08014026 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 8014026:	b480      	push	{r7}
 8014028:	b083      	sub	sp, #12
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	4618      	mov	r0, r3
 8014032:	370c      	adds	r7, #12
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr

0801403c <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801403c:	b480      	push	{r7}
 801403e:	b083      	sub	sp, #12
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014044:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014048:	4618      	mov	r0, r3
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr

08014054 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4618      	mov	r0, r3
 8014062:	370c      	adds	r7, #12
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f7ff fea5 	bl	8013dc4 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 801407a:	4603      	mov	r3, r0
 801407c:	4618      	mov	r0, r3
 801407e:	3708      	adds	r7, #8
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801408c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014090:	4618      	mov	r0, r3
 8014092:	370c      	adds	r7, #12
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr

0801409c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801409c:	b480      	push	{r7}
 801409e:	b083      	sub	sp, #12
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80140a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80140a8:	4618      	mov	r0, r3
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80140bc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80140c0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff ffea 	bl	801409c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 80140c8:	4603      	mov	r3, r0
 80140ca:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80140cc:	f107 0208 	add.w	r2, r7, #8
 80140d0:	f107 030c 	add.w	r3, r7, #12
 80140d4:	4611      	mov	r1, r2
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ee fe85 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80140dc:	4603      	mov	r3, r0
 80140de:	681b      	ldr	r3, [r3, #0]
      }
 80140e0:	4618      	mov	r0, r3
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	4618      	mov	r0, r3
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80140fe:	b5b0      	push	{r4, r5, r7, lr}
 8014100:	b084      	sub	sp, #16
 8014102:	af00      	add	r7, sp, #0
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	60b9      	str	r1, [r7, #8]
 8014108:	607a      	str	r2, [r7, #4]
 801410a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f000 f879 	bl	8014204 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8014112:	4604      	mov	r4, r0
 8014114:	68b8      	ldr	r0, [r7, #8]
 8014116:	f000 f875 	bl	8014204 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 801411a:	4605      	mov	r5, r0
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 f871 	bl	8014204 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8014122:	4602      	mov	r2, r0
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	4629      	mov	r1, r5
 8014128:	4620      	mov	r0, r4
 801412a:	f000 f876 	bl	801421a <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 801412e:	4603      	mov	r3, r0
    }
 8014130:	4618      	mov	r0, r3
 8014132:	3710      	adds	r7, #16
 8014134:	46bd      	mov	sp, r7
 8014136:	bdb0      	pop	{r4, r5, r7, pc}

08014138 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	60f8      	str	r0, [r7, #12]
 8014140:	60b9      	str	r1, [r7, #8]
 8014142:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	f000 f887 	bl	8014258 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 801414a:	4602      	mov	r2, r0
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	4293      	cmp	r3, r2
 8014150:	bf8c      	ite	hi
 8014152:	2301      	movhi	r3, #1
 8014154:	2300      	movls	r3, #0
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b00      	cmp	r3, #0
 801415a:	d001      	beq.n	8014160 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801415c:	f00c fd93 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	4618      	mov	r0, r3
 801416c:	f00c fcc4 	bl	8020af8 <_Znwj>
 8014170:	4603      	mov	r3, r0
 8014172:	bf00      	nop
      }
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801417c:	b580      	push	{r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	4618      	mov	r0, r3
 8014188:	f000 f874 	bl	8014274 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 801418c:	4603      	mov	r3, r0
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014196:	b480      	push	{r7}
 8014198:	b083      	sub	sp, #12
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	4618      	mov	r0, r3
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr

080141ac <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	4618      	mov	r0, r3
 80141b8:	f000 f868 	bl	801428c <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80141bc:	4603      	mov	r3, r0
 80141be:	4618      	mov	r0, r3
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b084      	sub	sp, #16
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	60f8      	str	r0, [r7, #12]
 80141ce:	60b9      	str	r1, [r7, #8]
 80141d0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f000 f866 	bl	80142a4 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 80141d8:	4602      	mov	r2, r0
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	4293      	cmp	r3, r2
 80141de:	bf8c      	ite	hi
 80141e0:	2301      	movhi	r3, #1
 80141e2:	2300      	movls	r3, #0
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d001      	beq.n	80141ee <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80141ea:	f00c fd4c 	bl	8020c86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	4618      	mov	r0, r3
 80141f4:	f00c fc80 	bl	8020af8 <_Znwj>
 80141f8:	4603      	mov	r3, r0
 80141fa:	bf00      	nop
      }
 80141fc:	4618      	mov	r0, r3
 80141fe:	3710      	adds	r7, #16
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8014204:	b480      	push	{r7}
 8014206:	b083      	sub	sp, #12
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	4618      	mov	r0, r3
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801421a:	b580      	push	{r7, lr}
 801421c:	b086      	sub	sp, #24
 801421e:	af00      	add	r7, sp, #0
 8014220:	60f8      	str	r0, [r7, #12]
 8014222:	60b9      	str	r1, [r7, #8]
 8014224:	607a      	str	r2, [r7, #4]
 8014226:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8014228:	68ba      	ldr	r2, [r7, #8]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	1ad3      	subs	r3, r2, r3
 801422e:	109b      	asrs	r3, r3, #2
 8014230:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	2b00      	cmp	r3, #0
 8014236:	dd06      	ble.n	8014246 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	461a      	mov	r2, r3
 801423e:	68f9      	ldr	r1, [r7, #12]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f00c fd93 	bl	8020d6c <memmove>
      return __result + __count;
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	4413      	add	r3, r2
    }
 801424e:	4618      	mov	r0, r3
 8014250:	3718      	adds	r7, #24
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014258:	b480      	push	{r7}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014260:	4b03      	ldr	r3, [pc, #12]	; (8014270 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8014262:	4618      	mov	r0, r3
 8014264:	370c      	adds	r7, #12
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop
 8014270:	05555555 	.word	0x05555555

08014274 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4618      	mov	r0, r3
 8014282:	370c      	adds	r7, #12
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr

0801428c <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ff ff71 	bl	801417c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 801429a:	4603      	mov	r3, r0
 801429c:	4618      	mov	r0, r3
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80142ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80142b0:	4618      	mov	r0, r3
 80142b2:	370c      	adds	r7, #12
 80142b4:	46bd      	mov	sp, r7
 80142b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ba:	4770      	bx	lr

080142bc <_ZN6StreamD1Ev>:
class Stream {
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	3308      	adds	r3, #8
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fc f849 	bl	8010360 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4618      	mov	r0, r3
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <_ZN6PacketD1Ev>:
class Packet {
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	3308      	adds	r3, #8
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fc fe36 	bl	8010f56 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	4618      	mov	r0, r3
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <_ZN5TimerD1Ev>:
class Timer {
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3308      	adds	r3, #8
 8014300:	4618      	mov	r0, r3
 8014302:	f7f9 fa03 	bl	800d70c <_ZNSt8functionIFvvEED1Ev>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4618      	mov	r0, r3
 801430a:	3708      	adds	r7, #8
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af02      	add	r7, sp, #8
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b01      	cmp	r3, #1
 801431e:	f040 82ab 	bne.w	8014878 <_Z41__static_initialization_and_destruction_0ii+0x568>
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014328:	4293      	cmp	r3, r2
 801432a:	f040 82a5 	bne.w	8014878 <_Z41__static_initialization_and_destruction_0ii+0x568>
InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
 801432e:	4bad      	ldr	r3, [pc, #692]	; (80145e4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8014330:	2204      	movs	r2, #4
 8014332:	49ad      	ldr	r1, [pc, #692]	; (80145e8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014334:	48ad      	ldr	r0, [pc, #692]	; (80145ec <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8014336:	f7f5 f883 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
 801433a:	4bad      	ldr	r3, [pc, #692]	; (80145f0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 801433c:	2200      	movs	r2, #0
 801433e:	49aa      	ldr	r1, [pc, #680]	; (80145e8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014340:	48ac      	ldr	r0, [pc, #688]	; (80145f4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8014342:	f7f5 f87d 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
 8014346:	4bac      	ldr	r3, [pc, #688]	; (80145f8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8014348:	2208      	movs	r2, #8
 801434a:	49ac      	ldr	r1, [pc, #688]	; (80145fc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 801434c:	48ac      	ldr	r0, [pc, #688]	; (8014600 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 801434e:	f7f5 f877 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
 8014352:	4bac      	ldr	r3, [pc, #688]	; (8014604 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8014354:	220c      	movs	r2, #12
 8014356:	49a9      	ldr	r1, [pc, #676]	; (80145fc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014358:	48ab      	ldr	r0, [pc, #684]	; (8014608 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 801435a:	f7f5 f871 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 801435e:	4bab      	ldr	r3, [pc, #684]	; (801460c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8014360:	2200      	movs	r2, #0
 8014362:	49a6      	ldr	r1, [pc, #664]	; (80145fc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014364:	48aa      	ldr	r0, [pc, #680]	; (8014610 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8014366:	f7f5 f86b 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
 801436a:	4baa      	ldr	r3, [pc, #680]	; (8014614 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 801436c:	2204      	movs	r2, #4
 801436e:	49a3      	ldr	r1, [pc, #652]	; (80145fc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8014370:	48a9      	ldr	r0, [pc, #676]	; (8014618 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8014372:	f7f5 f865 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
 8014376:	4ba9      	ldr	r3, [pc, #676]	; (801461c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8014378:	2208      	movs	r2, #8
 801437a:	499b      	ldr	r1, [pc, #620]	; (80145e8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801437c:	48a8      	ldr	r0, [pc, #672]	; (8014620 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 801437e:	f7f5 f85f 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
 8014382:	4ba8      	ldr	r3, [pc, #672]	; (8014624 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8014384:	220c      	movs	r2, #12
 8014386:	4998      	ldr	r1, [pc, #608]	; (80145e8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8014388:	48a7      	ldr	r0, [pc, #668]	; (8014628 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 801438a:	f7f5 f859 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
 801438e:	4ba7      	ldr	r3, [pc, #668]	; (801462c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8014390:	2200      	movs	r2, #0
 8014392:	49a7      	ldr	r1, [pc, #668]	; (8014630 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014394:	48a7      	ldr	r0, [pc, #668]	; (8014634 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014396:	f7f5 f853 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 801439a:	4ba7      	ldr	r3, [pc, #668]	; (8014638 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 801439c:	2200      	movs	r2, #0
 801439e:	49a7      	ldr	r1, [pc, #668]	; (801463c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80143a0:	48a7      	ldr	r0, [pc, #668]	; (8014640 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80143a2:	f7f5 f84d 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
 80143a6:	4ba7      	ldr	r3, [pc, #668]	; (8014644 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80143a8:	2204      	movs	r2, #4
 80143aa:	49a4      	ldr	r1, [pc, #656]	; (801463c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80143ac:	48a6      	ldr	r0, [pc, #664]	; (8014648 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80143ae:	f7f5 f847 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
 80143b2:	4ba6      	ldr	r3, [pc, #664]	; (801464c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80143b4:	2208      	movs	r2, #8
 80143b6:	49a1      	ldr	r1, [pc, #644]	; (801463c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80143b8:	48a5      	ldr	r0, [pc, #660]	; (8014650 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80143ba:	f7f5 f841 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
 80143be:	4ba5      	ldr	r3, [pc, #660]	; (8014654 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80143c0:	220c      	movs	r2, #12
 80143c2:	499e      	ldr	r1, [pc, #632]	; (801463c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80143c4:	48a4      	ldr	r0, [pc, #656]	; (8014658 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80143c6:	f7f5 f83b 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
 80143ca:	4ba4      	ldr	r3, [pc, #656]	; (801465c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80143cc:	2200      	movs	r2, #0
 80143ce:	49a4      	ldr	r1, [pc, #656]	; (8014660 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80143d0:	48a4      	ldr	r0, [pc, #656]	; (8014664 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80143d2:	f7f5 f835 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
 80143d6:	4ba4      	ldr	r3, [pc, #656]	; (8014668 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80143d8:	2204      	movs	r2, #4
 80143da:	49a1      	ldr	r1, [pc, #644]	; (8014660 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80143dc:	48a3      	ldr	r0, [pc, #652]	; (801466c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80143de:	f7f5 f82f 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
 80143e2:	4ba3      	ldr	r3, [pc, #652]	; (8014670 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80143e4:	2208      	movs	r2, #8
 80143e6:	499e      	ldr	r1, [pc, #632]	; (8014660 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80143e8:	48a2      	ldr	r0, [pc, #648]	; (8014674 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80143ea:	f7f5 f829 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);
 80143ee:	4ba2      	ldr	r3, [pc, #648]	; (8014678 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80143f0:	220c      	movs	r2, #12
 80143f2:	499b      	ldr	r1, [pc, #620]	; (8014660 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80143f4:	48a1      	ldr	r0, [pc, #644]	; (801467c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80143f6:	f7f5 f823 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 80143fa:	49a1      	ldr	r1, [pc, #644]	; (8014680 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80143fc:	48a1      	ldr	r0, [pc, #644]	; (8014684 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80143fe:	f7f2 f8ab 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8014402:	49a1      	ldr	r1, [pc, #644]	; (8014688 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8014404:	48a1      	ldr	r0, [pc, #644]	; (801468c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8014406:	f7f2 f8a7 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 801440a:	49a1      	ldr	r1, [pc, #644]	; (8014690 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 801440c:	48a1      	ldr	r0, [pc, #644]	; (8014694 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 801440e:	f7f2 f8a3 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8014412:	4ba1      	ldr	r3, [pc, #644]	; (8014698 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8014414:	4aa1      	ldr	r2, [pc, #644]	; (801469c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8014416:	49a2      	ldr	r1, [pc, #648]	; (80146a0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8014418:	48a2      	ldr	r0, [pc, #648]	; (80146a4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 801441a:	f7ec f867 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 801441e:	4ba2      	ldr	r3, [pc, #648]	; (80146a8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8014420:	2204      	movs	r2, #4
 8014422:	49a2      	ldr	r1, [pc, #648]	; (80146ac <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014424:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014428:	48a2      	ldr	r0, [pc, #648]	; (80146b4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 801442a:	f7ee feb1 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 801442e:	4ba2      	ldr	r3, [pc, #648]	; (80146b8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8014430:	2200      	movs	r2, #0
 8014432:	499e      	ldr	r1, [pc, #632]	; (80146ac <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014434:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014438:	48a0      	ldr	r0, [pc, #640]	; (80146bc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 801443a:	f7ee fea9 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 801443e:	4ba0      	ldr	r3, [pc, #640]	; (80146c0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8014440:	2200      	movs	r2, #0
 8014442:	49a0      	ldr	r1, [pc, #640]	; (80146c4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014444:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014448:	489f      	ldr	r0, [pc, #636]	; (80146c8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 801444a:	f7ee fea1 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 801444e:	4b9f      	ldr	r3, [pc, #636]	; (80146cc <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8014450:	2208      	movs	r2, #8
 8014452:	499c      	ldr	r1, [pc, #624]	; (80146c4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014454:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014458:	489d      	ldr	r0, [pc, #628]	; (80146d0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 801445a:	f7ee fe99 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 801445e:	4b9d      	ldr	r3, [pc, #628]	; (80146d4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8014460:	220c      	movs	r2, #12
 8014462:	4998      	ldr	r1, [pc, #608]	; (80146c4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014464:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014468:	489b      	ldr	r0, [pc, #620]	; (80146d8 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 801446a:	f7ee fe91 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 801446e:	4b9b      	ldr	r3, [pc, #620]	; (80146dc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8014470:	2204      	movs	r2, #4
 8014472:	496f      	ldr	r1, [pc, #444]	; (8014630 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014474:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014478:	4899      	ldr	r0, [pc, #612]	; (80146e0 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 801447a:	f7ee fe89 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 801447e:	4b6b      	ldr	r3, [pc, #428]	; (801462c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8014480:	2200      	movs	r2, #0
 8014482:	496b      	ldr	r1, [pc, #428]	; (8014630 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014484:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014488:	4896      	ldr	r0, [pc, #600]	; (80146e4 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 801448a:	f7ee fe81 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 801448e:	4b96      	ldr	r3, [pc, #600]	; (80146e8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8014490:	2208      	movs	r2, #8
 8014492:	4967      	ldr	r1, [pc, #412]	; (8014630 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8014494:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014498:	4894      	ldr	r0, [pc, #592]	; (80146ec <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801449a:	f7ee fe79 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 801449e:	4b94      	ldr	r3, [pc, #592]	; (80146f0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80144a0:	220c      	movs	r2, #12
 80144a2:	4963      	ldr	r1, [pc, #396]	; (8014630 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80144a4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144a8:	4892      	ldr	r0, [pc, #584]	; (80146f4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80144aa:	f7ee fe71 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 80144ae:	4b92      	ldr	r3, [pc, #584]	; (80146f8 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80144b0:	2208      	movs	r2, #8
 80144b2:	497e      	ldr	r1, [pc, #504]	; (80146ac <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80144b4:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144b8:	4890      	ldr	r0, [pc, #576]	; (80146fc <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 80144ba:	f7ee fe69 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 80144be:	4b90      	ldr	r3, [pc, #576]	; (8014700 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 80144c0:	2208      	movs	r2, #8
 80144c2:	4990      	ldr	r1, [pc, #576]	; (8014704 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 80144c4:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144c8:	488f      	ldr	r0, [pc, #572]	; (8014708 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 80144ca:	f7ee fe61 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 80144ce:	4b8f      	ldr	r3, [pc, #572]	; (801470c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 80144d0:	2204      	movs	r2, #4
 80144d2:	498c      	ldr	r1, [pc, #560]	; (8014704 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 80144d4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144d8:	488d      	ldr	r0, [pc, #564]	; (8014710 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 80144da:	f7ee fe59 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 80144de:	4b8d      	ldr	r3, [pc, #564]	; (8014714 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 80144e0:	2200      	movs	r2, #0
 80144e2:	498d      	ldr	r1, [pc, #564]	; (8014718 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 80144e4:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144e8:	488c      	ldr	r0, [pc, #560]	; (801471c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 80144ea:	f7ee fe51 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 80144ee:	4b8c      	ldr	r3, [pc, #560]	; (8014720 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 80144f0:	220c      	movs	r2, #12
 80144f2:	4984      	ldr	r1, [pc, #528]	; (8014704 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 80144f4:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 80144f8:	488a      	ldr	r0, [pc, #552]	; (8014724 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 80144fa:	f7ee fe49 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 80144fe:	4b8a      	ldr	r3, [pc, #552]	; (8014728 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8014500:	220c      	movs	r2, #12
 8014502:	496a      	ldr	r1, [pc, #424]	; (80146ac <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8014504:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014508:	4888      	ldr	r0, [pc, #544]	; (801472c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 801450a:	f7ee fe41 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 801450e:	4b88      	ldr	r3, [pc, #544]	; (8014730 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8014510:	2200      	movs	r2, #0
 8014512:	497c      	ldr	r1, [pc, #496]	; (8014704 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8014514:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80146b0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8014518:	4886      	ldr	r0, [pc, #536]	; (8014734 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 801451a:	f7ee fe39 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 801451e:	4986      	ldr	r1, [pc, #536]	; (8014738 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8014520:	4886      	ldr	r0, [pc, #536]	; (801473c <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8014522:	f7f3 fbc7 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8014526:	4986      	ldr	r1, [pc, #536]	; (8014740 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8014528:	4886      	ldr	r0, [pc, #536]	; (8014744 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801452a:	f7f3 fbc3 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 801452e:	4986      	ldr	r1, [pc, #536]	; (8014748 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8014530:	4886      	ldr	r0, [pc, #536]	; (801474c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8014532:	f7f3 fbbf 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 8014536:	4986      	ldr	r1, [pc, #536]	; (8014750 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8014538:	4886      	ldr	r0, [pc, #536]	; (8014754 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 801453a:	f7f3 fbbb 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 801453e:	4986      	ldr	r1, [pc, #536]	; (8014758 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8014540:	4886      	ldr	r0, [pc, #536]	; (801475c <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8014542:	f7f3 fbb7 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 8014546:	4986      	ldr	r1, [pc, #536]	; (8014760 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8014548:	4886      	ldr	r0, [pc, #536]	; (8014764 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 801454a:	f7f3 fbb3 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 801454e:	4986      	ldr	r1, [pc, #536]	; (8014768 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8014550:	4886      	ldr	r0, [pc, #536]	; (801476c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8014552:	f7f3 fbaf 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 8014556:	4986      	ldr	r1, [pc, #536]	; (8014770 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8014558:	4886      	ldr	r0, [pc, #536]	; (8014774 <_Z41__static_initialization_and_destruction_0ii+0x464>)
 801455a:	f7f3 fbab 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 801455e:	4986      	ldr	r1, [pc, #536]	; (8014778 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8014560:	4886      	ldr	r0, [pc, #536]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8014562:	f7f3 fba7 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 8014566:	4986      	ldr	r1, [pc, #536]	; (8014780 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8014568:	4886      	ldr	r0, [pc, #536]	; (8014784 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 801456a:	f7f3 fba3 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 801456e:	4986      	ldr	r1, [pc, #536]	; (8014788 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8014570:	4886      	ldr	r0, [pc, #536]	; (801478c <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8014572:	f7f3 fb9f 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 8014576:	4986      	ldr	r1, [pc, #536]	; (8014790 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8014578:	4886      	ldr	r0, [pc, #536]	; (8014794 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 801457a:	f7f9 f8d5 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 801457e:	4986      	ldr	r1, [pc, #536]	; (8014798 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014580:	4886      	ldr	r0, [pc, #536]	; (801479c <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8014582:	f7f9 f8d1 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8014586:	4986      	ldr	r1, [pc, #536]	; (80147a0 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8014588:	4886      	ldr	r0, [pc, #536]	; (80147a4 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 801458a:	f7f9 f8cd 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 801458e:	4986      	ldr	r1, [pc, #536]	; (80147a8 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8014590:	4886      	ldr	r0, [pc, #536]	; (80147ac <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8014592:	f7f9 f8c9 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8014596:	4986      	ldr	r1, [pc, #536]	; (80147b0 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8014598:	4886      	ldr	r0, [pc, #536]	; (80147b4 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 801459a:	f7f9 f8c5 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 801459e:	4986      	ldr	r1, [pc, #536]	; (80147b8 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 80145a0:	4886      	ldr	r0, [pc, #536]	; (80147bc <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 80145a2:	f7f9 f8c1 	bl	800d728 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 80145a6:	4986      	ldr	r1, [pc, #536]	; (80147c0 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 80145a8:	4886      	ldr	r0, [pc, #536]	; (80147c4 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 80145aa:	f7f0 faed 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80145ae:	4b86      	ldr	r3, [pc, #536]	; (80147c8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 80145b0:	4a86      	ldr	r2, [pc, #536]	; (80147cc <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 80145b2:	2151      	movs	r1, #81	; 0x51
 80145b4:	4886      	ldr	r0, [pc, #536]	; (80147d0 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 80145b6:	f7fb ffbf 	bl	8010538 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80145ba:	4b83      	ldr	r3, [pc, #524]	; (80147c8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 80145bc:	4a85      	ldr	r2, [pc, #532]	; (80147d4 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 80145be:	2152      	movs	r1, #82	; 0x52
 80145c0:	4885      	ldr	r0, [pc, #532]	; (80147d8 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 80145c2:	f7fb ffb9 	bl	8010538 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80145c6:	4b80      	ldr	r3, [pc, #512]	; (80147c8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 80145c8:	4a84      	ldr	r2, [pc, #528]	; (80147dc <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 80145ca:	2153      	movs	r1, #83	; 0x53
 80145cc:	4884      	ldr	r0, [pc, #528]	; (80147e0 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 80145ce:	f7fb ffb3 	bl	8010538 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80145d2:	4b84      	ldr	r3, [pc, #528]	; (80147e4 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	4b84      	ldr	r3, [pc, #528]	; (80147e8 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 80145d8:	4a84      	ldr	r2, [pc, #528]	; (80147ec <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 80145da:	2154      	movs	r1, #84	; 0x54
 80145dc:	4884      	ldr	r0, [pc, #528]	; (80147f0 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 80145de:	f7fb ffd5 	bl	801058c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
 80145e2:	e107      	b.n	80147f4 <_Z41__static_initialization_and_destruction_0ii+0x4e4>
 80145e4:	240001d8 	.word	0x240001d8
 80145e8:	24000e84 	.word	0x24000e84
 80145ec:	240004d0 	.word	0x240004d0
 80145f0:	240001f8 	.word	0x240001f8
 80145f4:	240004f8 	.word	0x240004f8
 80145f8:	24000250 	.word	0x24000250
 80145fc:	24000ed0 	.word	0x24000ed0
 8014600:	24000520 	.word	0x24000520
 8014604:	24000258 	.word	0x24000258
 8014608:	24000548 	.word	0x24000548
 801460c:	24000270 	.word	0x24000270
 8014610:	24000570 	.word	0x24000570
 8014614:	24000278 	.word	0x24000278
 8014618:	24000598 	.word	0x24000598
 801461c:	240002a0 	.word	0x240002a0
 8014620:	240005c0 	.word	0x240005c0
 8014624:	240002a8 	.word	0x240002a8
 8014628:	240005e8 	.word	0x240005e8
 801462c:	24000300 	.word	0x24000300
 8014630:	2400104c 	.word	0x2400104c
 8014634:	24000610 	.word	0x24000610
 8014638:	240003b0 	.word	0x240003b0
 801463c:	24000f1c 	.word	0x24000f1c
 8014640:	24000638 	.word	0x24000638
 8014644:	240003b8 	.word	0x240003b8
 8014648:	24000660 	.word	0x24000660
 801464c:	240003c0 	.word	0x240003c0
 8014650:	24000688 	.word	0x24000688
 8014654:	240003c8 	.word	0x240003c8
 8014658:	240006b0 	.word	0x240006b0
 801465c:	24000418 	.word	0x24000418
 8014660:	24000e38 	.word	0x24000e38
 8014664:	240006d8 	.word	0x240006d8
 8014668:	24000428 	.word	0x24000428
 801466c:	24000700 	.word	0x24000700
 8014670:	24000438 	.word	0x24000438
 8014674:	24000728 	.word	0x24000728
 8014678:	24000440 	.word	0x24000440
 801467c:	24000750 	.word	0x24000750
 8014680:	240002d8 	.word	0x240002d8
 8014684:	24000778 	.word	0x24000778
 8014688:	240002e0 	.word	0x240002e0
 801468c:	24000784 	.word	0x24000784
 8014690:	240002e8 	.word	0x240002e8
 8014694:	24000790 	.word	0x24000790
 8014698:	24000200 	.word	0x24000200
 801469c:	24000fb4 	.word	0x24000fb4
 80146a0:	24000cb0 	.word	0x24000cb0
 80146a4:	2400079c 	.word	0x2400079c
 80146a8:	24000458 	.word	0x24000458
 80146ac:	24001260 	.word	0x24001260
 80146b0:	40533333 	.word	0x40533333
 80146b4:	240007b4 	.word	0x240007b4
 80146b8:	24000450 	.word	0x24000450
 80146bc:	240007cc 	.word	0x240007cc
 80146c0:	240001d0 	.word	0x240001d0
 80146c4:	24000f68 	.word	0x24000f68
 80146c8:	240007e4 	.word	0x240007e4
 80146cc:	240001e0 	.word	0x240001e0
 80146d0:	240007fc 	.word	0x240007fc
 80146d4:	240001e8 	.word	0x240001e8
 80146d8:	24000814 	.word	0x24000814
 80146dc:	24000308 	.word	0x24000308
 80146e0:	2400082c 	.word	0x2400082c
 80146e4:	24000844 	.word	0x24000844
 80146e8:	24000310 	.word	0x24000310
 80146ec:	2400085c 	.word	0x2400085c
 80146f0:	24000318 	.word	0x24000318
 80146f4:	24000874 	.word	0x24000874
 80146f8:	24000460 	.word	0x24000460
 80146fc:	2400088c 	.word	0x2400088c
 8014700:	240004b8 	.word	0x240004b8
 8014704:	240012ac 	.word	0x240012ac
 8014708:	240008a4 	.word	0x240008a4
 801470c:	240004b0 	.word	0x240004b0
 8014710:	240008bc 	.word	0x240008bc
 8014714:	240002c0 	.word	0x240002c0
 8014718:	24001098 	.word	0x24001098
 801471c:	240008d4 	.word	0x240008d4
 8014720:	240004c0 	.word	0x240004c0
 8014724:	240008ec 	.word	0x240008ec
 8014728:	24000468 	.word	0x24000468
 801472c:	24000904 	.word	0x24000904
 8014730:	240004a8 	.word	0x240004a8
 8014734:	2400091c 	.word	0x2400091c
 8014738:	24000320 	.word	0x24000320
 801473c:	24000934 	.word	0x24000934
 8014740:	24000328 	.word	0x24000328
 8014744:	2400093c 	.word	0x2400093c
 8014748:	24000330 	.word	0x24000330
 801474c:	24000944 	.word	0x24000944
 8014750:	24000338 	.word	0x24000338
 8014754:	2400094c 	.word	0x2400094c
 8014758:	24000340 	.word	0x24000340
 801475c:	24000954 	.word	0x24000954
 8014760:	24000348 	.word	0x24000348
 8014764:	2400095c 	.word	0x2400095c
 8014768:	24000480 	.word	0x24000480
 801476c:	24000964 	.word	0x24000964
 8014770:	24000488 	.word	0x24000488
 8014774:	2400096c 	.word	0x2400096c
 8014778:	24000288 	.word	0x24000288
 801477c:	24000974 	.word	0x24000974
 8014780:	24000298 	.word	0x24000298
 8014784:	2400097c 	.word	0x2400097c
 8014788:	24000390 	.word	0x24000390
 801478c:	24000984 	.word	0x24000984
 8014790:	24001000 	.word	0x24001000
 8014794:	2400098c 	.word	0x2400098c
 8014798:	240010e4 	.word	0x240010e4
 801479c:	240009ac 	.word	0x240009ac
 80147a0:	24001130 	.word	0x24001130
 80147a4:	240009cc 	.word	0x240009cc
 80147a8:	2400117c 	.word	0x2400117c
 80147ac:	240009ec 	.word	0x240009ec
 80147b0:	240011c8 	.word	0x240011c8
 80147b4:	24000a0c 	.word	0x24000a0c
 80147b8:	24001214 	.word	0x24001214
 80147bc:	24000a2c 	.word	0x24000a2c
 80147c0:	24000d98 	.word	0x24000d98
 80147c4:	24000a4c 	.word	0x24000a4c
 80147c8:	24000b1c 	.word	0x24000b1c
 80147cc:	0800e555 	.word	0x0800e555
 80147d0:	24000b2c 	.word	0x24000b2c
 80147d4:	0800e48d 	.word	0x0800e48d
 80147d8:	24000b44 	.word	0x24000b44
 80147dc:	0800e4f1 	.word	0x0800e4f1
 80147e0:	24000b5c 	.word	0x24000b5c
 80147e4:	24000b26 	.word	0x24000b26
 80147e8:	24000b24 	.word	0x24000b24
 80147ec:	0800e5cd 	.word	0x0800e5cd
 80147f0:	24000b74 	.word	0x24000b74
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80147f4:	4b44      	ldr	r3, [pc, #272]	; (8014908 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80147f6:	9300      	str	r3, [sp, #0]
 80147f8:	4b44      	ldr	r3, [pc, #272]	; (801490c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80147fa:	4a45      	ldr	r2, [pc, #276]	; (8014910 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80147fc:	2155      	movs	r1, #85	; 0x55
 80147fe:	4845      	ldr	r0, [pc, #276]	; (8014914 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8014800:	f7fb fec4 	bl	801058c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 8014804:	4b40      	ldr	r3, [pc, #256]	; (8014908 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	4b40      	ldr	r3, [pc, #256]	; (801490c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801480a:	4a43      	ldr	r2, [pc, #268]	; (8014918 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 801480c:	2156      	movs	r1, #86	; 0x56
 801480e:	4843      	ldr	r0, [pc, #268]	; (801491c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8014810:	f7fb febc 	bl	801058c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 8014814:	4b42      	ldr	r3, [pc, #264]	; (8014920 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	4b42      	ldr	r3, [pc, #264]	; (8014924 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 801481a:	4a43      	ldr	r2, [pc, #268]	; (8014928 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801481c:	2158      	movs	r1, #88	; 0x58
 801481e:	4843      	ldr	r0, [pc, #268]	; (801492c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8014820:	f7fb fee0 	bl	80105e4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 8014824:	4b3e      	ldr	r3, [pc, #248]	; (8014920 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	4b3e      	ldr	r3, [pc, #248]	; (8014924 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 801482a:	4a3f      	ldr	r2, [pc, #252]	; (8014928 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801482c:	2157      	movs	r1, #87	; 0x57
 801482e:	4840      	ldr	r0, [pc, #256]	; (8014930 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8014830:	f7fb fed8 	bl	80105e4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 8014834:	4b3f      	ldr	r3, [pc, #252]	; (8014934 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	4b3f      	ldr	r3, [pc, #252]	; (8014938 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 801483a:	4a40      	ldr	r2, [pc, #256]	; (801493c <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 801483c:	215a      	movs	r1, #90	; 0x5a
 801483e:	4840      	ldr	r0, [pc, #256]	; (8014940 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8014840:	f7fb fefc 	bl	801063c <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8014844:	4b3f      	ldr	r3, [pc, #252]	; (8014944 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8014846:	4a40      	ldr	r2, [pc, #256]	; (8014948 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8014848:	2159      	movs	r1, #89	; 0x59
 801484a:	4840      	ldr	r0, [pc, #256]	; (801494c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 801484c:	f7fb fe74 	bl	8010538 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8014850:	4a3f      	ldr	r2, [pc, #252]	; (8014950 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014852:	4940      	ldr	r1, [pc, #256]	; (8014954 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8014854:	4840      	ldr	r0, [pc, #256]	; (8014958 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8014856:	f7f9 fb97 	bl	800df88 <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 801485a:	4a3d      	ldr	r2, [pc, #244]	; (8014950 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 801485c:	493f      	ldr	r1, [pc, #252]	; (801495c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 801485e:	4840      	ldr	r0, [pc, #256]	; (8014960 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8014860:	f7f9 fb92 	bl	800df88 <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8014864:	4a3a      	ldr	r2, [pc, #232]	; (8014950 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014866:	493f      	ldr	r1, [pc, #252]	; (8014964 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8014868:	483f      	ldr	r0, [pc, #252]	; (8014968 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 801486a:	f7f9 fb8d 	bl	800df88 <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 801486e:	4a38      	ldr	r2, [pc, #224]	; (8014950 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014870:	493e      	ldr	r1, [pc, #248]	; (801496c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8014872:	483f      	ldr	r0, [pc, #252]	; (8014970 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8014874:	f7f9 fb88 	bl	800df88 <_ZN6StreamC1EP5TimerP3Can>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d140      	bne.n	8014900 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014884:	4293      	cmp	r3, r2
 8014886:	d13b      	bne.n	8014900 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 8014888:	4839      	ldr	r0, [pc, #228]	; (8014970 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 801488a:	f7ff fd17 	bl	80142bc <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 801488e:	4836      	ldr	r0, [pc, #216]	; (8014968 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8014890:	f7ff fd14 	bl	80142bc <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 8014894:	4832      	ldr	r0, [pc, #200]	; (8014960 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8014896:	f7ff fd11 	bl	80142bc <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 801489a:	482f      	ldr	r0, [pc, #188]	; (8014958 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 801489c:	f7ff fd0e 	bl	80142bc <_ZN6StreamD1Ev>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 80148a0:	482a      	ldr	r0, [pc, #168]	; (801494c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80148a2:	f7ff fd19 	bl	80142d8 <_ZN6PacketD1Ev>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 80148a6:	4826      	ldr	r0, [pc, #152]	; (8014940 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80148a8:	f7ff fd16 	bl	80142d8 <_ZN6PacketD1Ev>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 80148ac:	4820      	ldr	r0, [pc, #128]	; (8014930 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80148ae:	f7ff fd13 	bl	80142d8 <_ZN6PacketD1Ev>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 80148b2:	481e      	ldr	r0, [pc, #120]	; (801492c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80148b4:	f7ff fd10 	bl	80142d8 <_ZN6PacketD1Ev>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 80148b8:	4818      	ldr	r0, [pc, #96]	; (801491c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80148ba:	f7ff fd0d 	bl	80142d8 <_ZN6PacketD1Ev>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80148be:	4815      	ldr	r0, [pc, #84]	; (8014914 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80148c0:	f7ff fd0a 	bl	80142d8 <_ZN6PacketD1Ev>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80148c4:	482b      	ldr	r0, [pc, #172]	; (8014974 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80148c6:	f7ff fd07 	bl	80142d8 <_ZN6PacketD1Ev>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80148ca:	482b      	ldr	r0, [pc, #172]	; (8014978 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80148cc:	f7ff fd04 	bl	80142d8 <_ZN6PacketD1Ev>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80148d0:	482a      	ldr	r0, [pc, #168]	; (801497c <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80148d2:	f7ff fd01 	bl	80142d8 <_ZN6PacketD1Ev>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80148d6:	482a      	ldr	r0, [pc, #168]	; (8014980 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80148d8:	f7ff fcfe 	bl	80142d8 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 80148dc:	4823      	ldr	r0, [pc, #140]	; (801496c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80148de:	f7ff fd09 	bl	80142f4 <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 80148e2:	4820      	ldr	r0, [pc, #128]	; (8014964 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80148e4:	f7ff fd06 	bl	80142f4 <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 80148e8:	481c      	ldr	r0, [pc, #112]	; (801495c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80148ea:	f7ff fd03 	bl	80142f4 <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 80148ee:	4819      	ldr	r0, [pc, #100]	; (8014954 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80148f0:	f7ff fd00 	bl	80142f4 <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 80148f4:	4823      	ldr	r0, [pc, #140]	; (8014984 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80148f6:	f7ff fcfd 	bl	80142f4 <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 80148fa:	4823      	ldr	r0, [pc, #140]	; (8014988 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80148fc:	f7ff fcfa 	bl	80142f4 <_ZN5TimerD1Ev>
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	24000b26 	.word	0x24000b26
 801490c:	24000b24 	.word	0x24000b24
 8014910:	0800e61d 	.word	0x0800e61d
 8014914:	24000b8c 	.word	0x24000b8c
 8014918:	0800e66d 	.word	0x0800e66d
 801491c:	24000ba4 	.word	0x24000ba4
 8014920:	24000b20 	.word	0x24000b20
 8014924:	24000b1d 	.word	0x24000b1d
 8014928:	0800e6bd 	.word	0x0800e6bd
 801492c:	24000bbc 	.word	0x24000bbc
 8014930:	24000bd4 	.word	0x24000bd4
 8014934:	24000b2a 	.word	0x24000b2a
 8014938:	24000b29 	.word	0x24000b29
 801493c:	0800e7e5 	.word	0x0800e7e5
 8014940:	24000bec 	.word	0x24000bec
 8014944:	24000b28 	.word	0x24000b28
 8014948:	0800e7a5 	.word	0x0800e7a5
 801494c:	24000c04 	.word	0x24000c04
 8014950:	24000a4c 	.word	0x24000a4c
 8014954:	240009cc 	.word	0x240009cc
 8014958:	24000c1c 	.word	0x24000c1c
 801495c:	240009ec 	.word	0x240009ec
 8014960:	24000c40 	.word	0x24000c40
 8014964:	24000a0c 	.word	0x24000a0c
 8014968:	24000c64 	.word	0x24000c64
 801496c:	24000a2c 	.word	0x24000a2c
 8014970:	24000c88 	.word	0x24000c88
 8014974:	24000b74 	.word	0x24000b74
 8014978:	24000b5c 	.word	0x24000b5c
 801497c:	24000b44 	.word	0x24000b44
 8014980:	24000b2c 	.word	0x24000b2c
 8014984:	240009ac 	.word	0x240009ac
 8014988:	2400098c 	.word	0x2400098c

0801498c <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	683a      	ldr	r2, [r7, #0]
 801499c:	6812      	ldr	r2, [r2, #0]
 801499e:	601a      	str	r2, [r3, #0]
 80149a0:	bf00      	nop
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80149ac:	b480      	push	{r7}
 80149ae:	b083      	sub	sp, #12
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	601a      	str	r2, [r3, #0]
 80149c0:	bf00      	nop
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr

080149cc <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	2304      	movs	r3, #4
 80149d6:	4618      	mov	r0, r3
 80149d8:	370c      	adds	r7, #12
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr

080149e2 <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80149e2:	b480      	push	{r7}
 80149e4:	b083      	sub	sp, #12
 80149e6:	af00      	add	r7, sp, #0
 80149e8:	6078      	str	r0, [r7, #4]
 80149ea:	6039      	str	r1, [r7, #0]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	685b      	ldr	r3, [r3, #4]
 80149f0:	683a      	ldr	r2, [r7, #0]
 80149f2:	8812      	ldrh	r2, [r2, #0]
 80149f4:	801a      	strh	r2, [r3, #0]
 80149f6:	bf00      	nop
 80149f8:	370c      	adds	r7, #12
 80149fa:	46bd      	mov	sp, r7
 80149fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a00:	4770      	bx	lr

08014a02 <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014a02:	b480      	push	{r7}
 8014a04:	b083      	sub	sp, #12
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
 8014a0a:	6039      	str	r1, [r7, #0]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	881a      	ldrh	r2, [r3, #0]
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	801a      	strh	r2, [r3, #0]
 8014a16:	bf00      	nop
 8014a18:	370c      	adds	r7, #12
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a20:	4770      	bx	lr

08014a22 <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014a22:	b480      	push	{r7}
 8014a24:	b083      	sub	sp, #12
 8014a26:	af00      	add	r7, sp, #0
 8014a28:	6078      	str	r0, [r7, #4]
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	370c      	adds	r7, #12
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	7812      	ldrb	r2, [r2, #0]
 8014a4a:	701a      	strb	r2, [r3, #0]
 8014a4c:	bf00      	nop
 8014a4e:	370c      	adds	r7, #12
 8014a50:	46bd      	mov	sp, r7
 8014a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a56:	4770      	bx	lr

08014a58 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014a58:	b480      	push	{r7}
 8014a5a:	b083      	sub	sp, #12
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	781a      	ldrb	r2, [r3, #0]
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	701a      	strb	r2, [r3, #0]
 8014a6c:	bf00      	nop
 8014a6e:	370c      	adds	r7, #12
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr

08014a78 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	2301      	movs	r3, #1
 8014a82:	4618      	mov	r0, r3
 8014a84:	370c      	adds	r7, #12
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr

08014a8e <_GLOBAL__sub_I_data_adc_1>:
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a96:	2001      	movs	r0, #1
 8014a98:	f7ff fc3a 	bl	8014310 <_Z41__static_initialization_and_destruction_0ii>
 8014a9c:	bd80      	pop	{r7, pc}

08014a9e <_GLOBAL__sub_D_data_adc_1>:
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014aa6:	2000      	movs	r0, #0
 8014aa8:	f7ff fc32 	bl	8014310 <_Z41__static_initialization_and_destruction_0ii>
 8014aac:	bd80      	pop	{r7, pc}
	...

08014ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014ab6:	4b1b      	ldr	r3, [pc, #108]	; (8014b24 <HAL_MspInit+0x74>)
 8014ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014abc:	4a19      	ldr	r2, [pc, #100]	; (8014b24 <HAL_MspInit+0x74>)
 8014abe:	f043 0302 	orr.w	r3, r3, #2
 8014ac2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8014ac6:	4b17      	ldr	r3, [pc, #92]	; (8014b24 <HAL_MspInit+0x74>)
 8014ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014acc:	f003 0302 	and.w	r3, r3, #2
 8014ad0:	607b      	str	r3, [r7, #4]
 8014ad2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	2101      	movs	r1, #1
 8014ad8:	f06f 000b 	mvn.w	r0, #11
 8014adc:	f003 f87d 	bl	8017bda <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2101      	movs	r1, #1
 8014ae4:	f06f 000a 	mvn.w	r0, #10
 8014ae8:	f003 f877 	bl	8017bda <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8014aec:	2200      	movs	r2, #0
 8014aee:	2101      	movs	r1, #1
 8014af0:	f06f 0009 	mvn.w	r0, #9
 8014af4:	f003 f871 	bl	8017bda <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8014af8:	2200      	movs	r2, #0
 8014afa:	2101      	movs	r1, #1
 8014afc:	f06f 0004 	mvn.w	r0, #4
 8014b00:	f003 f86b 	bl	8017bda <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8014b04:	2200      	movs	r2, #0
 8014b06:	2101      	movs	r1, #1
 8014b08:	f06f 0003 	mvn.w	r0, #3
 8014b0c:	f003 f865 	bl	8017bda <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8014b10:	2200      	movs	r2, #0
 8014b12:	2101      	movs	r1, #1
 8014b14:	f06f 0001 	mvn.w	r0, #1
 8014b18:	f003 f85f 	bl	8017bda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014b1c:	bf00      	nop
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	58024400 	.word	0x58024400

08014b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b08a      	sub	sp, #40	; 0x28
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b30:	f107 0314 	add.w	r3, r7, #20
 8014b34:	2200      	movs	r2, #0
 8014b36:	601a      	str	r2, [r3, #0]
 8014b38:	605a      	str	r2, [r3, #4]
 8014b3a:	609a      	str	r2, [r3, #8]
 8014b3c:	60da      	str	r2, [r3, #12]
 8014b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4a34      	ldr	r2, [pc, #208]	; (8014c18 <HAL_ADC_MspInit+0xf0>)
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d161      	bne.n	8014c0e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8014b4a:	4b34      	ldr	r3, [pc, #208]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014b50:	4a32      	ldr	r2, [pc, #200]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b52:	f043 0320 	orr.w	r3, r3, #32
 8014b56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014b5a:	4b30      	ldr	r3, [pc, #192]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014b60:	f003 0320 	and.w	r3, r3, #32
 8014b64:	613b      	str	r3, [r7, #16]
 8014b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b68:	4b2c      	ldr	r3, [pc, #176]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b6e:	4a2b      	ldr	r2, [pc, #172]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b70:	f043 0301 	orr.w	r3, r3, #1
 8014b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014b78:	4b28      	ldr	r3, [pc, #160]	; (8014c1c <HAL_ADC_MspInit+0xf4>)
 8014b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b7e:	f003 0301 	and.w	r3, r3, #1
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014b86:	2340      	movs	r3, #64	; 0x40
 8014b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b8a:	2303      	movs	r3, #3
 8014b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b92:	f107 0314 	add.w	r3, r7, #20
 8014b96:	4619      	mov	r1, r3
 8014b98:	4821      	ldr	r0, [pc, #132]	; (8014c20 <HAL_ADC_MspInit+0xf8>)
 8014b9a:	f006 fa83 	bl	801b0a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8014b9e:	4b21      	ldr	r3, [pc, #132]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014ba0:	4a21      	ldr	r2, [pc, #132]	; (8014c28 <HAL_ADC_MspInit+0x100>)
 8014ba2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8014ba4:	4b1f      	ldr	r3, [pc, #124]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014ba6:	2209      	movs	r2, #9
 8014ba8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014baa:	4b1e      	ldr	r3, [pc, #120]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014bb0:	4b1c      	ldr	r3, [pc, #112]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014bb6:	4b1b      	ldr	r3, [pc, #108]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014bbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014bbe:	4b19      	ldr	r3, [pc, #100]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014bc6:	4b17      	ldr	r3, [pc, #92]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014bce:	4b15      	ldr	r3, [pc, #84]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8014bd6:	4b13      	ldr	r3, [pc, #76]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014bdc:	4b11      	ldr	r3, [pc, #68]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bde:	2200      	movs	r2, #0
 8014be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014be2:	4810      	ldr	r0, [pc, #64]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014be4:	f003 f82e 	bl	8017c44 <HAL_DMA_Init>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d001      	beq.n	8014bf2 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8014bee:	f7fb fa19 	bl	8010024 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	4a0b      	ldr	r2, [pc, #44]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8014bf8:	4a0a      	ldr	r2, [pc, #40]	; (8014c24 <HAL_ADC_MspInit+0xfc>)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8014bfe:	2200      	movs	r2, #0
 8014c00:	2101      	movs	r1, #1
 8014c02:	2012      	movs	r0, #18
 8014c04:	f002 ffe9 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8014c08:	2012      	movs	r0, #18
 8014c0a:	f003 f800 	bl	8017c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014c0e:	bf00      	nop
 8014c10:	3728      	adds	r7, #40	; 0x28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	40022000 	.word	0x40022000
 8014c1c:	58024400 	.word	0x58024400
 8014c20:	58020000 	.word	0x58020000
 8014c24:	24000d20 	.word	0x24000d20
 8014c28:	40020028 	.word	0x40020028

08014c2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b08a      	sub	sp, #40	; 0x28
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c34:	f107 0314 	add.w	r3, r7, #20
 8014c38:	2200      	movs	r2, #0
 8014c3a:	601a      	str	r2, [r3, #0]
 8014c3c:	605a      	str	r2, [r3, #4]
 8014c3e:	609a      	str	r2, [r3, #8]
 8014c40:	60da      	str	r2, [r3, #12]
 8014c42:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4a22      	ldr	r2, [pc, #136]	; (8014cd4 <HAL_FDCAN_MspInit+0xa8>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d13e      	bne.n	8014ccc <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8014c4e:	4b22      	ldr	r3, [pc, #136]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c54:	4a20      	ldr	r2, [pc, #128]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014c5a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014c5e:	4b1e      	ldr	r3, [pc, #120]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c60:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c68:	613b      	str	r3, [r7, #16]
 8014c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014c6c:	4b1a      	ldr	r3, [pc, #104]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c72:	4a19      	ldr	r2, [pc, #100]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c74:	f043 0301 	orr.w	r3, r3, #1
 8014c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c7c:	4b16      	ldr	r3, [pc, #88]	; (8014cd8 <HAL_FDCAN_MspInit+0xac>)
 8014c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c82:	f003 0301 	and.w	r3, r3, #1
 8014c86:	60fb      	str	r3, [r7, #12]
 8014c88:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014c8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c90:	2302      	movs	r3, #2
 8014c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c94:	2300      	movs	r3, #0
 8014c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8014c9c:	2309      	movs	r3, #9
 8014c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ca0:	f107 0314 	add.w	r3, r7, #20
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	480d      	ldr	r0, [pc, #52]	; (8014cdc <HAL_FDCAN_MspInit+0xb0>)
 8014ca8:	f006 f9fc 	bl	801b0a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8014cac:	2200      	movs	r2, #0
 8014cae:	2101      	movs	r1, #1
 8014cb0:	2013      	movs	r0, #19
 8014cb2:	f002 ff92 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8014cb6:	2013      	movs	r0, #19
 8014cb8:	f002 ffa9 	bl	8017c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	2015      	movs	r0, #21
 8014cc2:	f002 ff8a 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8014cc6:	2015      	movs	r0, #21
 8014cc8:	f002 ffa1 	bl	8017c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8014ccc:	bf00      	nop
 8014cce:	3728      	adds	r7, #40	; 0x28
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	4000a000 	.word	0x4000a000
 8014cd8:	58024400 	.word	0x58024400
 8014cdc:	58020000 	.word	0x58020000

08014ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b09c      	sub	sp, #112	; 0x70
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ce8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014cec:	2200      	movs	r2, #0
 8014cee:	601a      	str	r2, [r3, #0]
 8014cf0:	605a      	str	r2, [r3, #4]
 8014cf2:	609a      	str	r2, [r3, #8]
 8014cf4:	60da      	str	r2, [r3, #12]
 8014cf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4aac      	ldr	r2, [pc, #688]	; (8014fb0 <HAL_TIM_Base_MspInit+0x2d0>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d137      	bne.n	8014d72 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014d02:	4bac      	ldr	r3, [pc, #688]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014d08:	4aaa      	ldr	r2, [pc, #680]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d0a:	f043 0301 	orr.w	r3, r3, #1
 8014d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014d12:	4ba8      	ldr	r3, [pc, #672]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014d18:	f003 0301 	and.w	r3, r3, #1
 8014d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8014d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014d20:	4ba4      	ldr	r3, [pc, #656]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d26:	4aa3      	ldr	r2, [pc, #652]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d28:	f043 0310 	orr.w	r3, r3, #16
 8014d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d30:	4ba0      	ldr	r3, [pc, #640]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d36:	f003 0310 	and.w	r3, r3, #16
 8014d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8014d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 8014d3e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8014d42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d44:	2302      	movs	r3, #2
 8014d46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014d48:	2302      	movs	r3, #2
 8014d4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014d50:	2301      	movs	r3, #1
 8014d52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014d54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d58:	4619      	mov	r1, r3
 8014d5a:	4897      	ldr	r0, [pc, #604]	; (8014fb8 <HAL_TIM_Base_MspInit+0x2d8>)
 8014d5c:	f006 f9a2 	bl	801b0a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8014d60:	2200      	movs	r2, #0
 8014d62:	2101      	movs	r1, #1
 8014d64:	201b      	movs	r0, #27
 8014d66:	f002 ff38 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014d6a:	201b      	movs	r0, #27
 8014d6c:	f002 ff4f 	bl	8017c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8014d70:	e24b      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM2)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d7a:	d166      	bne.n	8014e4a <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014d7c:	4b8d      	ldr	r3, [pc, #564]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014d82:	4a8c      	ldr	r2, [pc, #560]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d84:	f043 0301 	orr.w	r3, r3, #1
 8014d88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014d8c:	4b89      	ldr	r3, [pc, #548]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014d92:	f003 0301 	and.w	r3, r3, #1
 8014d96:	653b      	str	r3, [r7, #80]	; 0x50
 8014d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d9a:	4b86      	ldr	r3, [pc, #536]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014da0:	4a84      	ldr	r2, [pc, #528]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014da2:	f043 0301 	orr.w	r3, r3, #1
 8014da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014daa:	4b82      	ldr	r3, [pc, #520]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014db0:	f003 0301 	and.w	r3, r3, #1
 8014db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014db8:	4b7e      	ldr	r3, [pc, #504]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dbe:	4a7d      	ldr	r2, [pc, #500]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014dc0:	f043 0302 	orr.w	r3, r3, #2
 8014dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014dc8:	4b7a      	ldr	r3, [pc, #488]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dce:	f003 0302 	and.w	r3, r3, #2
 8014dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8014dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8014dd6:	2302      	movs	r3, #2
 8014dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dda:	2302      	movs	r3, #2
 8014ddc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dde:	2300      	movs	r3, #0
 8014de0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014de2:	2300      	movs	r3, #0
 8014de4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014de6:	2301      	movs	r3, #1
 8014de8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014dea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014dee:	4619      	mov	r1, r3
 8014df0:	4872      	ldr	r0, [pc, #456]	; (8014fbc <HAL_TIM_Base_MspInit+0x2dc>)
 8014df2:	f006 f957 	bl	801b0a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_1A5_Pin;
 8014df6:	2320      	movs	r3, #32
 8014df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dfa:	2302      	movs	r3, #2
 8014dfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014dfe:	2302      	movs	r3, #2
 8014e00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e02:	2300      	movs	r3, #0
 8014e04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014e06:	2301      	movs	r3, #1
 8014e08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SENSOR_3V_1A5_GPIO_Port, &GPIO_InitStruct);
 8014e0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014e0e:	4619      	mov	r1, r3
 8014e10:	486a      	ldr	r0, [pc, #424]	; (8014fbc <HAL_TIM_Base_MspInit+0x2dc>)
 8014e12:	f006 f947 	bl	801b0a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 8014e16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e1c:	2302      	movs	r3, #2
 8014e1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e20:	2300      	movs	r3, #0
 8014e22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e24:	2300      	movs	r3, #0
 8014e26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014e30:	4619      	mov	r1, r3
 8014e32:	4863      	ldr	r0, [pc, #396]	; (8014fc0 <HAL_TIM_Base_MspInit+0x2e0>)
 8014e34:	f006 f936 	bl	801b0a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8014e38:	2200      	movs	r2, #0
 8014e3a:	2100      	movs	r1, #0
 8014e3c:	201c      	movs	r0, #28
 8014e3e:	f002 fecc 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8014e42:	201c      	movs	r0, #28
 8014e44:	f002 fee3 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8014e48:	e1df      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM3)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	4a5d      	ldr	r2, [pc, #372]	; (8014fc4 <HAL_TIM_Base_MspInit+0x2e4>)
 8014e50:	4293      	cmp	r3, r2
 8014e52:	d136      	bne.n	8014ec2 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014e54:	4b57      	ldr	r3, [pc, #348]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014e5a:	4a56      	ldr	r2, [pc, #344]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e5c:	f043 0302 	orr.w	r3, r3, #2
 8014e60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014e64:	4b53      	ldr	r3, [pc, #332]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014e6a:	f003 0302 	and.w	r3, r3, #2
 8014e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8014e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e72:	4b50      	ldr	r3, [pc, #320]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e78:	4a4e      	ldr	r2, [pc, #312]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e7a:	f043 0302 	orr.w	r3, r3, #2
 8014e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e82:	4b4c      	ldr	r3, [pc, #304]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e88:	f003 0302 	and.w	r3, r3, #2
 8014e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8014e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 8014e90:	2333      	movs	r3, #51	; 0x33
 8014e92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e94:	2302      	movs	r3, #2
 8014e96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014e98:	2302      	movs	r3, #2
 8014e9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014ea0:	2302      	movs	r3, #2
 8014ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014ea4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	4845      	ldr	r0, [pc, #276]	; (8014fc0 <HAL_TIM_Base_MspInit+0x2e0>)
 8014eac:	f006 f8fa 	bl	801b0a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	2101      	movs	r1, #1
 8014eb4:	201d      	movs	r0, #29
 8014eb6:	f002 fe90 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8014eba:	201d      	movs	r0, #29
 8014ebc:	f002 fea7 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8014ec0:	e1a3      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM4)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4a40      	ldr	r2, [pc, #256]	; (8014fc8 <HAL_TIM_Base_MspInit+0x2e8>)
 8014ec8:	4293      	cmp	r3, r2
 8014eca:	d137      	bne.n	8014f3c <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014ecc:	4b39      	ldr	r3, [pc, #228]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ed2:	4a38      	ldr	r2, [pc, #224]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014ed4:	f043 0304 	orr.w	r3, r3, #4
 8014ed8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014edc:	4b35      	ldr	r3, [pc, #212]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ee2:	f003 0304 	and.w	r3, r3, #4
 8014ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014eea:	4b32      	ldr	r3, [pc, #200]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ef0:	4a30      	ldr	r2, [pc, #192]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014ef2:	f043 0308 	orr.w	r3, r3, #8
 8014ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014efa:	4b2e      	ldr	r3, [pc, #184]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f00:	f003 0308 	and.w	r3, r3, #8
 8014f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 8014f08:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8014f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f0e:	2302      	movs	r3, #2
 8014f10:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f16:	2300      	movs	r3, #0
 8014f18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8014f1a:	2302      	movs	r3, #2
 8014f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014f1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014f22:	4619      	mov	r1, r3
 8014f24:	4829      	ldr	r0, [pc, #164]	; (8014fcc <HAL_TIM_Base_MspInit+0x2ec>)
 8014f26:	f006 f8bd 	bl	801b0a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	2101      	movs	r1, #1
 8014f2e:	201e      	movs	r0, #30
 8014f30:	f002 fe53 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8014f34:	201e      	movs	r0, #30
 8014f36:	f002 fe6a 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8014f3a:	e166      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM5)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	4a23      	ldr	r2, [pc, #140]	; (8014fd0 <HAL_TIM_Base_MspInit+0x2f0>)
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d117      	bne.n	8014f76 <HAL_TIM_Base_MspInit+0x296>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014f46:	4b1b      	ldr	r3, [pc, #108]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014f4c:	4a19      	ldr	r2, [pc, #100]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f4e:	f043 0308 	orr.w	r3, r3, #8
 8014f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014f56:	4b17      	ldr	r3, [pc, #92]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014f5c:	f003 0308 	and.w	r3, r3, #8
 8014f60:	637b      	str	r3, [r7, #52]	; 0x34
 8014f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8014f64:	2200      	movs	r2, #0
 8014f66:	2101      	movs	r1, #1
 8014f68:	2032      	movs	r0, #50	; 0x32
 8014f6a:	f002 fe36 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8014f6e:	2032      	movs	r0, #50	; 0x32
 8014f70:	f002 fe4d 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8014f74:	e149      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM6)
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	4a16      	ldr	r2, [pc, #88]	; (8014fd4 <HAL_TIM_Base_MspInit+0x2f4>)
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	d12b      	bne.n	8014fd8 <HAL_TIM_Base_MspInit+0x2f8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8014f80:	4b0c      	ldr	r3, [pc, #48]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014f86:	4a0b      	ldr	r2, [pc, #44]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f88:	f043 0310 	orr.w	r3, r3, #16
 8014f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014f90:	4b08      	ldr	r3, [pc, #32]	; (8014fb4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014f96:	f003 0310 	and.w	r3, r3, #16
 8014f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	2101      	movs	r1, #1
 8014fa2:	2036      	movs	r0, #54	; 0x36
 8014fa4:	f002 fe19 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014fa8:	2036      	movs	r0, #54	; 0x36
 8014faa:	f002 fe30 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8014fae:	e12c      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
 8014fb0:	40010000 	.word	0x40010000
 8014fb4:	58024400 	.word	0x58024400
 8014fb8:	58021000 	.word	0x58021000
 8014fbc:	58020000 	.word	0x58020000
 8014fc0:	58020400 	.word	0x58020400
 8014fc4:	40000400 	.word	0x40000400
 8014fc8:	40000800 	.word	0x40000800
 8014fcc:	58020c00 	.word	0x58020c00
 8014fd0:	40000c00 	.word	0x40000c00
 8014fd4:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM7)
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	4a8d      	ldr	r2, [pc, #564]	; (8015214 <HAL_TIM_Base_MspInit+0x534>)
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	d117      	bne.n	8015012 <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014fe2:	4b8d      	ldr	r3, [pc, #564]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8014fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014fe8:	4a8b      	ldr	r2, [pc, #556]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8014fea:	f043 0320 	orr.w	r3, r3, #32
 8014fee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014ff2:	4b89      	ldr	r3, [pc, #548]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8014ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ff8:	f003 0320 	and.w	r3, r3, #32
 8014ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8015000:	2200      	movs	r2, #0
 8015002:	2101      	movs	r1, #1
 8015004:	2037      	movs	r0, #55	; 0x37
 8015006:	f002 fde8 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801500a:	2037      	movs	r0, #55	; 0x37
 801500c:	f002 fdff 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8015010:	e0fb      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM8)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	4a81      	ldr	r2, [pc, #516]	; (801521c <HAL_TIM_Base_MspInit+0x53c>)
 8015018:	4293      	cmp	r3, r2
 801501a:	d127      	bne.n	801506c <HAL_TIM_Base_MspInit+0x38c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801501c:	4b7e      	ldr	r3, [pc, #504]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801501e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015022:	4a7d      	ldr	r2, [pc, #500]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015024:	f043 0302 	orr.w	r3, r3, #2
 8015028:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801502c:	4b7a      	ldr	r3, [pc, #488]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015032:	f003 0302 	and.w	r3, r3, #2
 8015036:	62bb      	str	r3, [r7, #40]	; 0x28
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 801503a:	2200      	movs	r2, #0
 801503c:	2101      	movs	r1, #1
 801503e:	202c      	movs	r0, #44	; 0x2c
 8015040:	f002 fdcb 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8015044:	202c      	movs	r0, #44	; 0x2c
 8015046:	f002 fde2 	bl	8017c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 801504a:	2200      	movs	r2, #0
 801504c:	2101      	movs	r1, #1
 801504e:	202d      	movs	r0, #45	; 0x2d
 8015050:	f002 fdc3 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8015054:	202d      	movs	r0, #45	; 0x2d
 8015056:	f002 fdda 	bl	8017c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 801505a:	2200      	movs	r2, #0
 801505c:	2101      	movs	r1, #1
 801505e:	202e      	movs	r0, #46	; 0x2e
 8015060:	f002 fdbb 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8015064:	202e      	movs	r0, #46	; 0x2e
 8015066:	f002 fdd2 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 801506a:	e0ce      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM12)
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4a6b      	ldr	r2, [pc, #428]	; (8015220 <HAL_TIM_Base_MspInit+0x540>)
 8015072:	4293      	cmp	r3, r2
 8015074:	d10f      	bne.n	8015096 <HAL_TIM_Base_MspInit+0x3b6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8015076:	4b68      	ldr	r3, [pc, #416]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801507c:	4a66      	ldr	r2, [pc, #408]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8015086:	4b64      	ldr	r3, [pc, #400]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015090:	627b      	str	r3, [r7, #36]	; 0x24
 8015092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015094:	e0b9      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM13)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4a62      	ldr	r2, [pc, #392]	; (8015224 <HAL_TIM_Base_MspInit+0x544>)
 801509c:	4293      	cmp	r3, r2
 801509e:	d117      	bne.n	80150d0 <HAL_TIM_Base_MspInit+0x3f0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80150a0:	4b5d      	ldr	r3, [pc, #372]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80150a6:	4a5c      	ldr	r2, [pc, #368]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80150b0:	4b59      	ldr	r3, [pc, #356]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80150b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150ba:	623b      	str	r3, [r7, #32]
 80150bc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80150be:	2200      	movs	r2, #0
 80150c0:	2101      	movs	r1, #1
 80150c2:	202c      	movs	r0, #44	; 0x2c
 80150c4:	f002 fd89 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80150c8:	202c      	movs	r0, #44	; 0x2c
 80150ca:	f002 fda0 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 80150ce:	e09c      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM14)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4a54      	ldr	r2, [pc, #336]	; (8015228 <HAL_TIM_Base_MspInit+0x548>)
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d117      	bne.n	801510a <HAL_TIM_Base_MspInit+0x42a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80150da:	4b4f      	ldr	r3, [pc, #316]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80150e0:	4a4d      	ldr	r2, [pc, #308]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80150ea:	4b4b      	ldr	r3, [pc, #300]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80150ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80150f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150f4:	61fb      	str	r3, [r7, #28]
 80150f6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80150f8:	2200      	movs	r2, #0
 80150fa:	2101      	movs	r1, #1
 80150fc:	202d      	movs	r0, #45	; 0x2d
 80150fe:	f002 fd6c 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8015102:	202d      	movs	r0, #45	; 0x2d
 8015104:	f002 fd83 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8015108:	e07f      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM15)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4a47      	ldr	r2, [pc, #284]	; (801522c <HAL_TIM_Base_MspInit+0x54c>)
 8015110:	4293      	cmp	r3, r2
 8015112:	d117      	bne.n	8015144 <HAL_TIM_Base_MspInit+0x464>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8015114:	4b40      	ldr	r3, [pc, #256]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801511a:	4a3f      	ldr	r2, [pc, #252]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015120:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015124:	4b3c      	ldr	r3, [pc, #240]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801512a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801512e:	61bb      	str	r3, [r7, #24]
 8015130:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8015132:	2200      	movs	r2, #0
 8015134:	2101      	movs	r1, #1
 8015136:	2074      	movs	r0, #116	; 0x74
 8015138:	f002 fd4f 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 801513c:	2074      	movs	r0, #116	; 0x74
 801513e:	f002 fd66 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 8015142:	e062      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM16)
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4a39      	ldr	r2, [pc, #228]	; (8015230 <HAL_TIM_Base_MspInit+0x550>)
 801514a:	4293      	cmp	r3, r2
 801514c:	d117      	bne.n	801517e <HAL_TIM_Base_MspInit+0x49e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 801514e:	4b32      	ldr	r3, [pc, #200]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015154:	4a30      	ldr	r2, [pc, #192]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801515a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801515e:	4b2e      	ldr	r3, [pc, #184]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015168:	617b      	str	r3, [r7, #20]
 801516a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 801516c:	2200      	movs	r2, #0
 801516e:	2101      	movs	r1, #1
 8015170:	2075      	movs	r0, #117	; 0x75
 8015172:	f002 fd32 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8015176:	2075      	movs	r0, #117	; 0x75
 8015178:	f002 fd49 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 801517c:	e045      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM17)
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	4a2c      	ldr	r2, [pc, #176]	; (8015234 <HAL_TIM_Base_MspInit+0x554>)
 8015184:	4293      	cmp	r3, r2
 8015186:	d117      	bne.n	80151b8 <HAL_TIM_Base_MspInit+0x4d8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8015188:	4b23      	ldr	r3, [pc, #140]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801518e:	4a22      	ldr	r2, [pc, #136]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 8015190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015194:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015198:	4b1f      	ldr	r3, [pc, #124]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 801519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801519e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80151a2:	613b      	str	r3, [r7, #16]
 80151a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 80151a6:	2200      	movs	r2, #0
 80151a8:	2101      	movs	r1, #1
 80151aa:	2076      	movs	r0, #118	; 0x76
 80151ac:	f002 fd15 	bl	8017bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80151b0:	2076      	movs	r0, #118	; 0x76
 80151b2:	f002 fd2c 	bl	8017c0e <HAL_NVIC_EnableIRQ>
}
 80151b6:	e028      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM23)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	4a1e      	ldr	r2, [pc, #120]	; (8015238 <HAL_TIM_Base_MspInit+0x558>)
 80151be:	4293      	cmp	r3, r2
 80151c0:	d10f      	bne.n	80151e2 <HAL_TIM_Base_MspInit+0x502>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80151c2:	4b15      	ldr	r3, [pc, #84]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80151c8:	4a13      	ldr	r2, [pc, #76]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80151ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80151d2:	4b11      	ldr	r3, [pc, #68]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80151d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80151dc:	60fb      	str	r3, [r7, #12]
 80151de:	68fb      	ldr	r3, [r7, #12]
}
 80151e0:	e013      	b.n	801520a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM24)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	4a15      	ldr	r2, [pc, #84]	; (801523c <HAL_TIM_Base_MspInit+0x55c>)
 80151e8:	4293      	cmp	r3, r2
 80151ea:	d10e      	bne.n	801520a <HAL_TIM_Base_MspInit+0x52a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80151ec:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80151f2:	4a09      	ldr	r2, [pc, #36]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80151f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80151fc:	4b06      	ldr	r3, [pc, #24]	; (8015218 <HAL_TIM_Base_MspInit+0x538>)
 80151fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8015202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015206:	60bb      	str	r3, [r7, #8]
 8015208:	68bb      	ldr	r3, [r7, #8]
}
 801520a:	bf00      	nop
 801520c:	3770      	adds	r7, #112	; 0x70
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	40001400 	.word	0x40001400
 8015218:	58024400 	.word	0x58024400
 801521c:	40010400 	.word	0x40010400
 8015220:	40001800 	.word	0x40001800
 8015224:	40001c00 	.word	0x40001c00
 8015228:	40002000 	.word	0x40002000
 801522c:	40014000 	.word	0x40014000
 8015230:	40014400 	.word	0x40014400
 8015234:	40014800 	.word	0x40014800
 8015238:	4000e000 	.word	0x4000e000
 801523c:	4000e400 	.word	0x4000e400

08015240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b08c      	sub	sp, #48	; 0x30
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015248:	f107 031c 	add.w	r3, r7, #28
 801524c:	2200      	movs	r2, #0
 801524e:	601a      	str	r2, [r3, #0]
 8015250:	605a      	str	r2, [r3, #4]
 8015252:	609a      	str	r2, [r3, #8]
 8015254:	60da      	str	r2, [r3, #12]
 8015256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	4a66      	ldr	r2, [pc, #408]	; (80153f8 <HAL_TIM_MspPostInit+0x1b8>)
 801525e:	4293      	cmp	r3, r2
 8015260:	d11f      	bne.n	80152a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015262:	4b66      	ldr	r3, [pc, #408]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 8015264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015268:	4a64      	ldr	r2, [pc, #400]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 801526a:	f043 0301 	orr.w	r3, r3, #1
 801526e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015272:	4b62      	ldr	r3, [pc, #392]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 8015274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	61bb      	str	r3, [r7, #24]
 801527e:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8015280:	230d      	movs	r3, #13
 8015282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015284:	2302      	movs	r3, #2
 8015286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015288:	2300      	movs	r3, #0
 801528a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801528c:	2300      	movs	r3, #0
 801528e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8015290:	2302      	movs	r3, #2
 8015292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015294:	f107 031c 	add.w	r3, r7, #28
 8015298:	4619      	mov	r1, r3
 801529a:	4859      	ldr	r0, [pc, #356]	; (8015400 <HAL_TIM_MspPostInit+0x1c0>)
 801529c:	f005 ff02 	bl	801b0a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 80152a0:	e0a5      	b.n	80153ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	4a57      	ldr	r2, [pc, #348]	; (8015404 <HAL_TIM_MspPostInit+0x1c4>)
 80152a8:	4293      	cmp	r3, r2
 80152aa:	d130      	bne.n	801530e <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80152ac:	4b53      	ldr	r3, [pc, #332]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80152ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80152b2:	4a52      	ldr	r2, [pc, #328]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80152b4:	f043 0304 	orr.w	r3, r3, #4
 80152b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80152bc:	4b4f      	ldr	r3, [pc, #316]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80152be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80152c2:	f003 0304 	and.w	r3, r3, #4
 80152c6:	617b      	str	r3, [r7, #20]
 80152c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80152ca:	2340      	movs	r3, #64	; 0x40
 80152cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152ce:	2302      	movs	r3, #2
 80152d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80152d2:	2302      	movs	r3, #2
 80152d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152d6:	2300      	movs	r3, #0
 80152d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80152da:	2303      	movs	r3, #3
 80152dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80152de:	f107 031c 	add.w	r3, r7, #28
 80152e2:	4619      	mov	r1, r3
 80152e4:	4848      	ldr	r0, [pc, #288]	; (8015408 <HAL_TIM_MspPostInit+0x1c8>)
 80152e6:	f005 fedd 	bl	801b0a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 80152ea:	f44f 7360 	mov.w	r3, #896	; 0x380
 80152ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152f0:	2302      	movs	r3, #2
 80152f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152f4:	2300      	movs	r3, #0
 80152f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152f8:	2300      	movs	r3, #0
 80152fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80152fc:	2303      	movs	r3, #3
 80152fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015300:	f107 031c 	add.w	r3, r7, #28
 8015304:	4619      	mov	r1, r3
 8015306:	4840      	ldr	r0, [pc, #256]	; (8015408 <HAL_TIM_MspPostInit+0x1c8>)
 8015308:	f005 fecc 	bl	801b0a4 <HAL_GPIO_Init>
}
 801530c:	e06f      	b.n	80153ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a3e      	ldr	r2, [pc, #248]	; (801540c <HAL_TIM_MspPostInit+0x1cc>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d120      	bne.n	801535a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015318:	4b38      	ldr	r3, [pc, #224]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 801531a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801531e:	4a37      	ldr	r2, [pc, #220]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 8015320:	f043 0302 	orr.w	r3, r3, #2
 8015324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015328:	4b34      	ldr	r3, [pc, #208]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 801532a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801532e:	f003 0302 	and.w	r3, r3, #2
 8015332:	613b      	str	r3, [r7, #16]
 8015334:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8015336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801533a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801533c:	2302      	movs	r3, #2
 801533e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015340:	2300      	movs	r3, #0
 8015342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015344:	2300      	movs	r3, #0
 8015346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8015348:	2302      	movs	r3, #2
 801534a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 801534c:	f107 031c 	add.w	r3, r7, #28
 8015350:	4619      	mov	r1, r3
 8015352:	482f      	ldr	r0, [pc, #188]	; (8015410 <HAL_TIM_MspPostInit+0x1d0>)
 8015354:	f005 fea6 	bl	801b0a4 <HAL_GPIO_Init>
}
 8015358:	e049      	b.n	80153ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	4a2d      	ldr	r2, [pc, #180]	; (8015414 <HAL_TIM_MspPostInit+0x1d4>)
 8015360:	4293      	cmp	r3, r2
 8015362:	d11f      	bne.n	80153a4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8015364:	4b25      	ldr	r3, [pc, #148]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 8015366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801536a:	4a24      	ldr	r2, [pc, #144]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 801536c:	f043 0320 	orr.w	r3, r3, #32
 8015370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015374:	4b21      	ldr	r3, [pc, #132]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 8015376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801537a:	f003 0320 	and.w	r3, r3, #32
 801537e:	60fb      	str	r3, [r7, #12]
 8015380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8015382:	230f      	movs	r3, #15
 8015384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015386:	2302      	movs	r3, #2
 8015388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801538a:	2300      	movs	r3, #0
 801538c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801538e:	2300      	movs	r3, #0
 8015390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8015392:	230d      	movs	r3, #13
 8015394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015396:	f107 031c 	add.w	r3, r7, #28
 801539a:	4619      	mov	r1, r3
 801539c:	481e      	ldr	r0, [pc, #120]	; (8015418 <HAL_TIM_MspPostInit+0x1d8>)
 801539e:	f005 fe81 	bl	801b0a4 <HAL_GPIO_Init>
}
 80153a2:	e024      	b.n	80153ee <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	4a1c      	ldr	r2, [pc, #112]	; (801541c <HAL_TIM_MspPostInit+0x1dc>)
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d11f      	bne.n	80153ee <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80153ae:	4b13      	ldr	r3, [pc, #76]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80153b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153b4:	4a11      	ldr	r2, [pc, #68]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80153b6:	f043 0320 	orr.w	r3, r3, #32
 80153ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80153be:	4b0f      	ldr	r3, [pc, #60]	; (80153fc <HAL_TIM_MspPostInit+0x1bc>)
 80153c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153c4:	f003 0320 	and.w	r3, r3, #32
 80153c8:	60bb      	str	r3, [r7, #8]
 80153ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 80153cc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80153d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153d2:	2302      	movs	r3, #2
 80153d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153d6:	2300      	movs	r3, #0
 80153d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80153da:	2300      	movs	r3, #0
 80153dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80153de:	230e      	movs	r3, #14
 80153e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80153e2:	f107 031c 	add.w	r3, r7, #28
 80153e6:	4619      	mov	r1, r3
 80153e8:	480b      	ldr	r0, [pc, #44]	; (8015418 <HAL_TIM_MspPostInit+0x1d8>)
 80153ea:	f005 fe5b 	bl	801b0a4 <HAL_GPIO_Init>
}
 80153ee:	bf00      	nop
 80153f0:	3730      	adds	r7, #48	; 0x30
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}
 80153f6:	bf00      	nop
 80153f8:	40000c00 	.word	0x40000c00
 80153fc:	58024400 	.word	0x58024400
 8015400:	58020000 	.word	0x58020000
 8015404:	40010400 	.word	0x40010400
 8015408:	58020800 	.word	0x58020800
 801540c:	40001800 	.word	0x40001800
 8015410:	58020400 	.word	0x58020400
 8015414:	4000e000 	.word	0x4000e000
 8015418:	58021400 	.word	0x58021400
 801541c:	4000e400 	.word	0x4000e400

08015420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015420:	b480      	push	{r7}
 8015422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015424:	e7fe      	b.n	8015424 <NMI_Handler+0x4>

08015426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015426:	b480      	push	{r7}
 8015428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801542a:	e7fe      	b.n	801542a <HardFault_Handler+0x4>

0801542c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801542c:	b480      	push	{r7}
 801542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015430:	e7fe      	b.n	8015430 <MemManage_Handler+0x4>

08015432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015432:	b480      	push	{r7}
 8015434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015436:	e7fe      	b.n	8015436 <BusFault_Handler+0x4>

08015438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015438:	b480      	push	{r7}
 801543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801543c:	e7fe      	b.n	801543c <UsageFault_Handler+0x4>

0801543e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801543e:	b480      	push	{r7}
 8015440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015442:	bf00      	nop
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr

0801544c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801544c:	b480      	push	{r7}
 801544e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015450:	bf00      	nop
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr

0801545a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801545a:	b480      	push	{r7}
 801545c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801545e:	bf00      	nop
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801546c:	f000 fa20 	bl	80158b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015470:	bf00      	nop
 8015472:	bd80      	pop	{r7, pc}

08015474 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015478:	4802      	ldr	r0, [pc, #8]	; (8015484 <DMA1_Stream1_IRQHandler+0x10>)
 801547a:	f003 f9a7 	bl	80187cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 801547e:	bf00      	nop
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	24000d20 	.word	0x24000d20

08015488 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801548c:	4802      	ldr	r0, [pc, #8]	; (8015498 <ADC_IRQHandler+0x10>)
 801548e:	f000 ffff 	bl	8016490 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8015492:	bf00      	nop
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	24000cb0 	.word	0x24000cb0

0801549c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80154a0:	4802      	ldr	r0, [pc, #8]	; (80154ac <FDCAN1_IT0_IRQHandler+0x10>)
 80154a2:	f005 f8f1 	bl	801a688 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80154a6:	bf00      	nop
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	24000d98 	.word	0x24000d98

080154b0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80154b4:	4802      	ldr	r0, [pc, #8]	; (80154c0 <FDCAN1_IT1_IRQHandler+0x10>)
 80154b6:	f005 f8e7 	bl	801a688 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80154ba:	bf00      	nop
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	24000d98 	.word	0x24000d98

080154c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80154c8:	4802      	ldr	r0, [pc, #8]	; (80154d4 <TIM1_CC_IRQHandler+0x10>)
 80154ca:	f00a f817 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80154ce:	bf00      	nop
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	24000e38 	.word	0x24000e38

080154d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80154dc:	4802      	ldr	r0, [pc, #8]	; (80154e8 <TIM2_IRQHandler+0x10>)
 80154de:	f00a f80d 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80154e2:	bf00      	nop
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	24000e84 	.word	0x24000e84

080154ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80154f0:	4802      	ldr	r0, [pc, #8]	; (80154fc <TIM3_IRQHandler+0x10>)
 80154f2:	f00a f803 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80154f6:	bf00      	nop
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	24000ed0 	.word	0x24000ed0

08015500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8015504:	4802      	ldr	r0, [pc, #8]	; (8015510 <TIM4_IRQHandler+0x10>)
 8015506:	f009 fff9 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801550a:	bf00      	nop
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	24000f1c 	.word	0x24000f1c

08015514 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015518:	4803      	ldr	r0, [pc, #12]	; (8015528 <TIM8_UP_TIM13_IRQHandler+0x14>)
 801551a:	f009 ffef 	bl	801f4fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 801551e:	4803      	ldr	r0, [pc, #12]	; (801552c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8015520:	f009 ffec 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8015524:	bf00      	nop
 8015526:	bd80      	pop	{r7, pc}
 8015528:	2400104c 	.word	0x2400104c
 801552c:	240010e4 	.word	0x240010e4

08015530 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015534:	4803      	ldr	r0, [pc, #12]	; (8015544 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8015536:	f009 ffe1 	bl	801f4fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 801553a:	4803      	ldr	r0, [pc, #12]	; (8015548 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 801553c:	f009 ffde 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8015540:	bf00      	nop
 8015542:	bd80      	pop	{r7, pc}
 8015544:	2400104c 	.word	0x2400104c
 8015548:	24001130 	.word	0x24001130

0801554c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8015550:	4802      	ldr	r0, [pc, #8]	; (801555c <TIM8_CC_IRQHandler+0x10>)
 8015552:	f009 ffd3 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8015556:	bf00      	nop
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	2400104c 	.word	0x2400104c

08015560 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8015564:	4802      	ldr	r0, [pc, #8]	; (8015570 <TIM5_IRQHandler+0x10>)
 8015566:	f009 ffc9 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801556a:	bf00      	nop
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	24000f68 	.word	0x24000f68

08015574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015578:	4802      	ldr	r0, [pc, #8]	; (8015584 <TIM6_DAC_IRQHandler+0x10>)
 801557a:	f009 ffbf 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801557e:	bf00      	nop
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	24000fb4 	.word	0x24000fb4

08015588 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801558c:	4802      	ldr	r0, [pc, #8]	; (8015598 <TIM7_IRQHandler+0x10>)
 801558e:	f009 ffb5 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8015592:	bf00      	nop
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	24001000 	.word	0x24001000

0801559c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80155a0:	4802      	ldr	r0, [pc, #8]	; (80155ac <TIM15_IRQHandler+0x10>)
 80155a2:	f009 ffab 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80155a6:	bf00      	nop
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	2400117c 	.word	0x2400117c

080155b0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80155b4:	4802      	ldr	r0, [pc, #8]	; (80155c0 <TIM16_IRQHandler+0x10>)
 80155b6:	f009 ffa1 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80155ba:	bf00      	nop
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	240011c8 	.word	0x240011c8

080155c4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80155c8:	4802      	ldr	r0, [pc, #8]	; (80155d4 <TIM17_IRQHandler+0x10>)
 80155ca:	f009 ff97 	bl	801f4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80155ce:	bf00      	nop
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	24001214 	.word	0x24001214

080155d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80155d8:	b480      	push	{r7}
 80155da:	af00      	add	r7, sp, #0
  return 1;
 80155dc:	2301      	movs	r3, #1
}
 80155de:	4618      	mov	r0, r3
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <_kill>:

int _kill(int pid, int sig)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80155f2:	f00b fb73 	bl	8020cdc <__errno>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2216      	movs	r2, #22
 80155fa:	601a      	str	r2, [r3, #0]
  return -1;
 80155fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015600:	4618      	mov	r0, r3
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <_exit>:

void _exit (int status)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff ffe7 	bl	80155e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 801561a:	e7fe      	b.n	801561a <_exit+0x12>

0801561c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b086      	sub	sp, #24
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015624:	4a14      	ldr	r2, [pc, #80]	; (8015678 <_sbrk+0x5c>)
 8015626:	4b15      	ldr	r3, [pc, #84]	; (801567c <_sbrk+0x60>)
 8015628:	1ad3      	subs	r3, r2, r3
 801562a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015630:	4b13      	ldr	r3, [pc, #76]	; (8015680 <_sbrk+0x64>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d102      	bne.n	801563e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015638:	4b11      	ldr	r3, [pc, #68]	; (8015680 <_sbrk+0x64>)
 801563a:	4a12      	ldr	r2, [pc, #72]	; (8015684 <_sbrk+0x68>)
 801563c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801563e:	4b10      	ldr	r3, [pc, #64]	; (8015680 <_sbrk+0x64>)
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	4413      	add	r3, r2
 8015646:	693a      	ldr	r2, [r7, #16]
 8015648:	429a      	cmp	r2, r3
 801564a:	d207      	bcs.n	801565c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801564c:	f00b fb46 	bl	8020cdc <__errno>
 8015650:	4603      	mov	r3, r0
 8015652:	220c      	movs	r2, #12
 8015654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801565a:	e009      	b.n	8015670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801565c:	4b08      	ldr	r3, [pc, #32]	; (8015680 <_sbrk+0x64>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015662:	4b07      	ldr	r3, [pc, #28]	; (8015680 <_sbrk+0x64>)
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	4413      	add	r3, r2
 801566a:	4a05      	ldr	r2, [pc, #20]	; (8015680 <_sbrk+0x64>)
 801566c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801566e:	68fb      	ldr	r3, [r7, #12]
}
 8015670:	4618      	mov	r0, r3
 8015672:	3718      	adds	r7, #24
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	24050000 	.word	0x24050000
 801567c:	00000400 	.word	0x00000400
 8015680:	240012f8 	.word	0x240012f8
 8015684:	24001318 	.word	0x24001318

08015688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015688:	b480      	push	{r7}
 801568a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801568c:	4b32      	ldr	r3, [pc, #200]	; (8015758 <SystemInit+0xd0>)
 801568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015692:	4a31      	ldr	r2, [pc, #196]	; (8015758 <SystemInit+0xd0>)
 8015694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801569c:	4b2f      	ldr	r3, [pc, #188]	; (801575c <SystemInit+0xd4>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	f003 030f 	and.w	r3, r3, #15
 80156a4:	2b06      	cmp	r3, #6
 80156a6:	d807      	bhi.n	80156b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80156a8:	4b2c      	ldr	r3, [pc, #176]	; (801575c <SystemInit+0xd4>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f023 030f 	bic.w	r3, r3, #15
 80156b0:	4a2a      	ldr	r2, [pc, #168]	; (801575c <SystemInit+0xd4>)
 80156b2:	f043 0307 	orr.w	r3, r3, #7
 80156b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80156b8:	4b29      	ldr	r3, [pc, #164]	; (8015760 <SystemInit+0xd8>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	4a28      	ldr	r2, [pc, #160]	; (8015760 <SystemInit+0xd8>)
 80156be:	f043 0301 	orr.w	r3, r3, #1
 80156c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80156c4:	4b26      	ldr	r3, [pc, #152]	; (8015760 <SystemInit+0xd8>)
 80156c6:	2200      	movs	r2, #0
 80156c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80156ca:	4b25      	ldr	r3, [pc, #148]	; (8015760 <SystemInit+0xd8>)
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	4924      	ldr	r1, [pc, #144]	; (8015760 <SystemInit+0xd8>)
 80156d0:	4b24      	ldr	r3, [pc, #144]	; (8015764 <SystemInit+0xdc>)
 80156d2:	4013      	ands	r3, r2
 80156d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80156d6:	4b21      	ldr	r3, [pc, #132]	; (801575c <SystemInit+0xd4>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f003 0308 	and.w	r3, r3, #8
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d007      	beq.n	80156f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80156e2:	4b1e      	ldr	r3, [pc, #120]	; (801575c <SystemInit+0xd4>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f023 030f 	bic.w	r3, r3, #15
 80156ea:	4a1c      	ldr	r2, [pc, #112]	; (801575c <SystemInit+0xd4>)
 80156ec:	f043 0307 	orr.w	r3, r3, #7
 80156f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80156f2:	4b1b      	ldr	r3, [pc, #108]	; (8015760 <SystemInit+0xd8>)
 80156f4:	2200      	movs	r2, #0
 80156f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80156f8:	4b19      	ldr	r3, [pc, #100]	; (8015760 <SystemInit+0xd8>)
 80156fa:	2200      	movs	r2, #0
 80156fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80156fe:	4b18      	ldr	r3, [pc, #96]	; (8015760 <SystemInit+0xd8>)
 8015700:	2200      	movs	r2, #0
 8015702:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015704:	4b16      	ldr	r3, [pc, #88]	; (8015760 <SystemInit+0xd8>)
 8015706:	4a18      	ldr	r2, [pc, #96]	; (8015768 <SystemInit+0xe0>)
 8015708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801570a:	4b15      	ldr	r3, [pc, #84]	; (8015760 <SystemInit+0xd8>)
 801570c:	4a17      	ldr	r2, [pc, #92]	; (801576c <SystemInit+0xe4>)
 801570e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015710:	4b13      	ldr	r3, [pc, #76]	; (8015760 <SystemInit+0xd8>)
 8015712:	4a17      	ldr	r2, [pc, #92]	; (8015770 <SystemInit+0xe8>)
 8015714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8015716:	4b12      	ldr	r3, [pc, #72]	; (8015760 <SystemInit+0xd8>)
 8015718:	2200      	movs	r2, #0
 801571a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 801571c:	4b10      	ldr	r3, [pc, #64]	; (8015760 <SystemInit+0xd8>)
 801571e:	4a14      	ldr	r2, [pc, #80]	; (8015770 <SystemInit+0xe8>)
 8015720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015722:	4b0f      	ldr	r3, [pc, #60]	; (8015760 <SystemInit+0xd8>)
 8015724:	2200      	movs	r2, #0
 8015726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015728:	4b0d      	ldr	r3, [pc, #52]	; (8015760 <SystemInit+0xd8>)
 801572a:	4a11      	ldr	r2, [pc, #68]	; (8015770 <SystemInit+0xe8>)
 801572c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801572e:	4b0c      	ldr	r3, [pc, #48]	; (8015760 <SystemInit+0xd8>)
 8015730:	2200      	movs	r2, #0
 8015732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015734:	4b0a      	ldr	r3, [pc, #40]	; (8015760 <SystemInit+0xd8>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	4a09      	ldr	r2, [pc, #36]	; (8015760 <SystemInit+0xd8>)
 801573a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801573e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015740:	4b07      	ldr	r3, [pc, #28]	; (8015760 <SystemInit+0xd8>)
 8015742:	2200      	movs	r2, #0
 8015744:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8015746:	4b0b      	ldr	r3, [pc, #44]	; (8015774 <SystemInit+0xec>)
 8015748:	f243 02d2 	movw	r2, #12498	; 0x30d2
 801574c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801574e:	bf00      	nop
 8015750:	46bd      	mov	sp, r7
 8015752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015756:	4770      	bx	lr
 8015758:	e000ed00 	.word	0xe000ed00
 801575c:	52002000 	.word	0x52002000
 8015760:	58024400 	.word	0x58024400
 8015764:	eaf6ed7f 	.word	0xeaf6ed7f
 8015768:	02020200 	.word	0x02020200
 801576c:	01ff0000 	.word	0x01ff0000
 8015770:	01010280 	.word	0x01010280
 8015774:	52004000 	.word	0x52004000

08015778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80157b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801577c:	f7ff ff84 	bl	8015688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8015780:	480c      	ldr	r0, [pc, #48]	; (80157b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8015782:	490d      	ldr	r1, [pc, #52]	; (80157b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8015784:	4a0d      	ldr	r2, [pc, #52]	; (80157bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8015786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015788:	e002      	b.n	8015790 <LoopCopyDataInit>

0801578a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801578a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801578c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801578e:	3304      	adds	r3, #4

08015790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015794:	d3f9      	bcc.n	801578a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015796:	4a0a      	ldr	r2, [pc, #40]	; (80157c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8015798:	4c0a      	ldr	r4, [pc, #40]	; (80157c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 801579a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801579c:	e001      	b.n	80157a2 <LoopFillZerobss>

0801579e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801579e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80157a0:	3204      	adds	r2, #4

080157a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80157a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80157a4:	d3fb      	bcc.n	801579e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80157a6:	f00b fa9f 	bl	8020ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80157aa:	f7f9 f8da 	bl	800e962 <main>
  bx  lr
 80157ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80157b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80157b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80157b8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80157bc:	08021380 	.word	0x08021380
  ldr r2, =_sbss
 80157c0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80157c4:	24001314 	.word	0x24001314

080157c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80157c8:	e7fe      	b.n	80157c8 <ADC3_IRQHandler>
	...

080157cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80157d2:	2003      	movs	r0, #3
 80157d4:	f002 f9f6 	bl	8017bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80157d8:	f006 fc22 	bl	801c020 <HAL_RCC_GetSysClockFreq>
 80157dc:	4602      	mov	r2, r0
 80157de:	4b15      	ldr	r3, [pc, #84]	; (8015834 <HAL_Init+0x68>)
 80157e0:	699b      	ldr	r3, [r3, #24]
 80157e2:	0a1b      	lsrs	r3, r3, #8
 80157e4:	f003 030f 	and.w	r3, r3, #15
 80157e8:	4913      	ldr	r1, [pc, #76]	; (8015838 <HAL_Init+0x6c>)
 80157ea:	5ccb      	ldrb	r3, [r1, r3]
 80157ec:	f003 031f 	and.w	r3, r3, #31
 80157f0:	fa22 f303 	lsr.w	r3, r2, r3
 80157f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80157f6:	4b0f      	ldr	r3, [pc, #60]	; (8015834 <HAL_Init+0x68>)
 80157f8:	699b      	ldr	r3, [r3, #24]
 80157fa:	f003 030f 	and.w	r3, r3, #15
 80157fe:	4a0e      	ldr	r2, [pc, #56]	; (8015838 <HAL_Init+0x6c>)
 8015800:	5cd3      	ldrb	r3, [r2, r3]
 8015802:	f003 031f 	and.w	r3, r3, #31
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	fa22 f303 	lsr.w	r3, r2, r3
 801580c:	4a0b      	ldr	r2, [pc, #44]	; (801583c <HAL_Init+0x70>)
 801580e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015810:	4a0b      	ldr	r2, [pc, #44]	; (8015840 <HAL_Init+0x74>)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8015816:	2001      	movs	r0, #1
 8015818:	f000 f814 	bl	8015844 <HAL_InitTick>
 801581c:	4603      	mov	r3, r0
 801581e:	2b00      	cmp	r3, #0
 8015820:	d001      	beq.n	8015826 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8015822:	2301      	movs	r3, #1
 8015824:	e002      	b.n	801582c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8015826:	f7ff f943 	bl	8014ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801582a:	2300      	movs	r3, #0
}
 801582c:	4618      	mov	r0, r3
 801582e:	3708      	adds	r7, #8
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	58024400 	.word	0x58024400
 8015838:	080212f8 	.word	0x080212f8
 801583c:	24000008 	.word	0x24000008
 8015840:	24000004 	.word	0x24000004

08015844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801584c:	4b15      	ldr	r3, [pc, #84]	; (80158a4 <HAL_InitTick+0x60>)
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d101      	bne.n	8015858 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8015854:	2301      	movs	r3, #1
 8015856:	e021      	b.n	801589c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015858:	4b13      	ldr	r3, [pc, #76]	; (80158a8 <HAL_InitTick+0x64>)
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	4b11      	ldr	r3, [pc, #68]	; (80158a4 <HAL_InitTick+0x60>)
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	4619      	mov	r1, r3
 8015862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015866:	fbb3 f3f1 	udiv	r3, r3, r1
 801586a:	fbb2 f3f3 	udiv	r3, r2, r3
 801586e:	4618      	mov	r0, r3
 8015870:	f002 f9db 	bl	8017c2a <HAL_SYSTICK_Config>
 8015874:	4603      	mov	r3, r0
 8015876:	2b00      	cmp	r3, #0
 8015878:	d001      	beq.n	801587e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801587a:	2301      	movs	r3, #1
 801587c:	e00e      	b.n	801589c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2b0f      	cmp	r3, #15
 8015882:	d80a      	bhi.n	801589a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015884:	2200      	movs	r2, #0
 8015886:	6879      	ldr	r1, [r7, #4]
 8015888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801588c:	f002 f9a5 	bl	8017bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015890:	4a06      	ldr	r2, [pc, #24]	; (80158ac <HAL_InitTick+0x68>)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e000      	b.n	801589c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801589a:	2301      	movs	r3, #1
}
 801589c:	4618      	mov	r0, r3
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	24000010 	.word	0x24000010
 80158a8:	24000004 	.word	0x24000004
 80158ac:	2400000c 	.word	0x2400000c

080158b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80158b0:	b480      	push	{r7}
 80158b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80158b4:	4b06      	ldr	r3, [pc, #24]	; (80158d0 <HAL_IncTick+0x20>)
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	461a      	mov	r2, r3
 80158ba:	4b06      	ldr	r3, [pc, #24]	; (80158d4 <HAL_IncTick+0x24>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4413      	add	r3, r2
 80158c0:	4a04      	ldr	r2, [pc, #16]	; (80158d4 <HAL_IncTick+0x24>)
 80158c2:	6013      	str	r3, [r2, #0]
}
 80158c4:	bf00      	nop
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	24000010 	.word	0x24000010
 80158d4:	240012fc 	.word	0x240012fc

080158d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80158d8:	b480      	push	{r7}
 80158da:	af00      	add	r7, sp, #0
  return uwTick;
 80158dc:	4b03      	ldr	r3, [pc, #12]	; (80158ec <HAL_GetTick+0x14>)
 80158de:	681b      	ldr	r3, [r3, #0]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	240012fc 	.word	0x240012fc

080158f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	689b      	ldr	r3, [r3, #8]
 80158fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	431a      	orrs	r2, r3
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	609a      	str	r2, [r3, #8]
}
 801590a:	bf00      	nop
 801590c:	370c      	adds	r7, #12
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr

08015916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8015916:	b480      	push	{r7}
 8015918:	b083      	sub	sp, #12
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	689b      	ldr	r3, [r3, #8]
 8015924:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	431a      	orrs	r2, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	609a      	str	r2, [r3, #8]
}
 8015930:	bf00      	nop
 8015932:	370c      	adds	r7, #12
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr

0801593c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801593c:	b480      	push	{r7}
 801593e:	b083      	sub	sp, #12
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 801594c:	4618      	mov	r0, r3
 801594e:	370c      	adds	r7, #12
 8015950:	46bd      	mov	sp, r7
 8015952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015956:	4770      	bx	lr

08015958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015958:	b480      	push	{r7}
 801595a:	b087      	sub	sp, #28
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	607a      	str	r2, [r7, #4]
 8015964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	3360      	adds	r3, #96	; 0x60
 801596a:	461a      	mov	r2, r3
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	4413      	add	r3, r2
 8015972:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	4a10      	ldr	r2, [pc, #64]	; (80159b8 <LL_ADC_SetOffset+0x60>)
 8015978:	4293      	cmp	r3, r2
 801597a:	d10b      	bne.n	8015994 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	4313      	orrs	r3, r2
 801598a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8015992:	e00b      	b.n	80159ac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	430b      	orrs	r3, r1
 80159a6:	431a      	orrs	r2, r3
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	601a      	str	r2, [r3, #0]
}
 80159ac:	bf00      	nop
 80159ae:	371c      	adds	r7, #28
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr
 80159b8:	58026000 	.word	0x58026000

080159bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80159bc:	b480      	push	{r7}
 80159be:	b085      	sub	sp, #20
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	3360      	adds	r3, #96	; 0x60
 80159ca:	461a      	mov	r2, r3
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	4413      	add	r3, r2
 80159d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3714      	adds	r7, #20
 80159e0:	46bd      	mov	sp, r7
 80159e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e6:	4770      	bx	lr

080159e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b085      	sub	sp, #20
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	691b      	ldr	r3, [r3, #16]
 80159f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	f003 031f 	and.w	r3, r3, #31
 8015a02:	6879      	ldr	r1, [r7, #4]
 8015a04:	fa01 f303 	lsl.w	r3, r1, r3
 8015a08:	431a      	orrs	r2, r3
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	611a      	str	r2, [r3, #16]
}
 8015a0e:	bf00      	nop
 8015a10:	3714      	adds	r7, #20
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
	...

08015a1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b087      	sub	sp, #28
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	4a0c      	ldr	r2, [pc, #48]	; (8015a5c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d00e      	beq.n	8015a4e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	3360      	adds	r3, #96	; 0x60
 8015a34:	461a      	mov	r2, r3
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4413      	add	r3, r2
 8015a3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	431a      	orrs	r2, r3
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	601a      	str	r2, [r3, #0]
  }
}
 8015a4e:	bf00      	nop
 8015a50:	371c      	adds	r7, #28
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr
 8015a5a:	bf00      	nop
 8015a5c:	58026000 	.word	0x58026000

08015a60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b087      	sub	sp, #28
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	4a0c      	ldr	r2, [pc, #48]	; (8015aa0 <LL_ADC_SetOffsetSaturation+0x40>)
 8015a70:	4293      	cmp	r3, r2
 8015a72:	d10e      	bne.n	8015a92 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	3360      	adds	r3, #96	; 0x60
 8015a78:	461a      	mov	r2, r3
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	4413      	add	r3, r2
 8015a80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	431a      	orrs	r2, r3
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8015a92:	bf00      	nop
 8015a94:	371c      	adds	r7, #28
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	58026000 	.word	0x58026000

08015aa4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b087      	sub	sp, #28
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4a0c      	ldr	r2, [pc, #48]	; (8015ae4 <LL_ADC_SetOffsetSign+0x40>)
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d10e      	bne.n	8015ad6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	3360      	adds	r3, #96	; 0x60
 8015abc:	461a      	mov	r2, r3
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	4413      	add	r3, r2
 8015ac4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	431a      	orrs	r2, r3
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8015ad6:	bf00      	nop
 8015ad8:	371c      	adds	r7, #28
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	58026000 	.word	0x58026000

08015ae8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b087      	sub	sp, #28
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	60f8      	str	r0, [r7, #12]
 8015af0:	60b9      	str	r1, [r7, #8]
 8015af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	3360      	adds	r3, #96	; 0x60
 8015af8:	461a      	mov	r2, r3
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	009b      	lsls	r3, r3, #2
 8015afe:	4413      	add	r3, r2
 8015b00:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	4a0c      	ldr	r2, [pc, #48]	; (8015b38 <LL_ADC_SetOffsetState+0x50>)
 8015b06:	4293      	cmp	r3, r2
 8015b08:	d108      	bne.n	8015b1c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	431a      	orrs	r2, r3
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8015b1a:	e007      	b.n	8015b2c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	431a      	orrs	r2, r3
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	601a      	str	r2, [r3, #0]
}
 8015b2c:	bf00      	nop
 8015b2e:	371c      	adds	r7, #28
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	58026000 	.word	0x58026000

08015b3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d101      	bne.n	8015b54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8015b50:	2301      	movs	r3, #1
 8015b52:	e000      	b.n	8015b56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8015b54:	2300      	movs	r3, #0
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8015b62:	b480      	push	{r7}
 8015b64:	b087      	sub	sp, #28
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	60f8      	str	r0, [r7, #12]
 8015b6a:	60b9      	str	r1, [r7, #8]
 8015b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	3330      	adds	r3, #48	; 0x30
 8015b72:	461a      	mov	r2, r3
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	0a1b      	lsrs	r3, r3, #8
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	f003 030c 	and.w	r3, r3, #12
 8015b7e:	4413      	add	r3, r2
 8015b80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	f003 031f 	and.w	r3, r3, #31
 8015b8c:	211f      	movs	r1, #31
 8015b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b92:	43db      	mvns	r3, r3
 8015b94:	401a      	ands	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	0e9b      	lsrs	r3, r3, #26
 8015b9a:	f003 011f 	and.w	r1, r3, #31
 8015b9e:	68bb      	ldr	r3, [r7, #8]
 8015ba0:	f003 031f 	and.w	r3, r3, #31
 8015ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8015ba8:	431a      	orrs	r2, r3
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8015bae:	bf00      	nop
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb8:	4770      	bx	lr

08015bba <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8015bba:	b480      	push	{r7}
 8015bbc:	b083      	sub	sp, #12
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	f023 0203 	bic.w	r2, r3, #3
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	431a      	orrs	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	60da      	str	r2, [r3, #12]
}
 8015bd4:	bf00      	nop
 8015bd6:	370c      	adds	r7, #12
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr

08015be0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8015be0:	b480      	push	{r7}
 8015be2:	b083      	sub	sp, #12
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	f043 0201 	orr.w	r2, r3, #1
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	60da      	str	r2, [r3, #12]
}
 8015bf4:	bf00      	nop
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	4a08      	ldr	r2, [pc, #32]	; (8015c30 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	d107      	bne.n	8015c22 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	f023 0203 	bic.w	r2, r3, #3
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	431a      	orrs	r2, r3
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	60da      	str	r2, [r3, #12]
  }
}
 8015c22:	bf00      	nop
 8015c24:	370c      	adds	r7, #12
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	58026000 	.word	0x58026000

08015c34 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c40:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e000      	b.n	8015c4e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8015c4c:	2300      	movs	r3, #0
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	370c      	adds	r7, #12
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr

08015c5a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8015c5a:	b480      	push	{r7}
 8015c5c:	b087      	sub	sp, #28
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	60f8      	str	r0, [r7, #12]
 8015c62:	60b9      	str	r1, [r7, #8]
 8015c64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	3314      	adds	r3, #20
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	0e5b      	lsrs	r3, r3, #25
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	f003 0304 	and.w	r3, r3, #4
 8015c76:	4413      	add	r3, r2
 8015c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	0d1b      	lsrs	r3, r3, #20
 8015c82:	f003 031f 	and.w	r3, r3, #31
 8015c86:	2107      	movs	r1, #7
 8015c88:	fa01 f303 	lsl.w	r3, r1, r3
 8015c8c:	43db      	mvns	r3, r3
 8015c8e:	401a      	ands	r2, r3
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	0d1b      	lsrs	r3, r3, #20
 8015c94:	f003 031f 	and.w	r3, r3, #31
 8015c98:	6879      	ldr	r1, [r7, #4]
 8015c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8015c9e:	431a      	orrs	r2, r3
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8015ca4:	bf00      	nop
 8015ca6:	371c      	adds	r7, #28
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	4a1a      	ldr	r2, [pc, #104]	; (8015d28 <LL_ADC_SetChannelSingleDiff+0x78>)
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d115      	bne.n	8015cf0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015cd0:	43db      	mvns	r3, r3
 8015cd2:	401a      	ands	r2, r3
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f003 0318 	and.w	r3, r3, #24
 8015cda:	4914      	ldr	r1, [pc, #80]	; (8015d2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8015cdc:	40d9      	lsrs	r1, r3
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	400b      	ands	r3, r1
 8015ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ce6:	431a      	orrs	r2, r3
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8015cee:	e014      	b.n	8015d1a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015cfc:	43db      	mvns	r3, r3
 8015cfe:	401a      	ands	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f003 0318 	and.w	r3, r3, #24
 8015d06:	4909      	ldr	r1, [pc, #36]	; (8015d2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8015d08:	40d9      	lsrs	r1, r3
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	400b      	ands	r3, r1
 8015d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d12:	431a      	orrs	r2, r3
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8015d1a:	bf00      	nop
 8015d1c:	3714      	adds	r7, #20
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d24:	4770      	bx	lr
 8015d26:	bf00      	nop
 8015d28:	58026000 	.word	0x58026000
 8015d2c:	000fffff 	.word	0x000fffff

08015d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	689b      	ldr	r3, [r3, #8]
 8015d3c:	f003 031f 	and.w	r3, r3, #31
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	370c      	adds	r7, #12
 8015d44:	46bd      	mov	sp, r7
 8015d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4a:	4770      	bx	lr

08015d4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	b083      	sub	sp, #12
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	689b      	ldr	r3, [r3, #8]
 8015d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	370c      	adds	r7, #12
 8015d60:	46bd      	mov	sp, r7
 8015d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d66:	4770      	bx	lr

08015d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8015d68:	b480      	push	{r7}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	689a      	ldr	r2, [r3, #8]
 8015d74:	4b04      	ldr	r3, [pc, #16]	; (8015d88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8015d76:	4013      	ands	r3, r2
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	6093      	str	r3, [r2, #8]
}
 8015d7c:	bf00      	nop
 8015d7e:	370c      	adds	r7, #12
 8015d80:	46bd      	mov	sp, r7
 8015d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d86:	4770      	bx	lr
 8015d88:	5fffffc0 	.word	0x5fffffc0

08015d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015da0:	d101      	bne.n	8015da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8015da2:	2301      	movs	r3, #1
 8015da4:	e000      	b.n	8015da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	370c      	adds	r7, #12
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr

08015db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b083      	sub	sp, #12
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	689a      	ldr	r2, [r3, #8]
 8015dc0:	4b05      	ldr	r3, [pc, #20]	; (8015dd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8015dc2:	4013      	ands	r3, r2
 8015dc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8015dcc:	bf00      	nop
 8015dce:	370c      	adds	r7, #12
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd6:	4770      	bx	lr
 8015dd8:	6fffffc0 	.word	0x6fffffc0

08015ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8015ddc:	b480      	push	{r7}
 8015dde:	b083      	sub	sp, #12
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	689b      	ldr	r3, [r3, #8]
 8015de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015df0:	d101      	bne.n	8015df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8015df2:	2301      	movs	r3, #1
 8015df4:	e000      	b.n	8015df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8015df6:	2300      	movs	r3, #0
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr

08015e04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8015e04:	b480      	push	{r7}
 8015e06:	b083      	sub	sp, #12
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	689a      	ldr	r2, [r3, #8]
 8015e10:	4b05      	ldr	r3, [pc, #20]	; (8015e28 <LL_ADC_Enable+0x24>)
 8015e12:	4013      	ands	r3, r2
 8015e14:	f043 0201 	orr.w	r2, r3, #1
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8015e1c:	bf00      	nop
 8015e1e:	370c      	adds	r7, #12
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr
 8015e28:	7fffffc0 	.word	0x7fffffc0

08015e2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	d101      	bne.n	8015e44 <LL_ADC_IsEnabled+0x18>
 8015e40:	2301      	movs	r3, #1
 8015e42:	e000      	b.n	8015e46 <LL_ADC_IsEnabled+0x1a>
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	370c      	adds	r7, #12
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr
	...

08015e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	689a      	ldr	r2, [r3, #8]
 8015e60:	4b05      	ldr	r3, [pc, #20]	; (8015e78 <LL_ADC_REG_StartConversion+0x24>)
 8015e62:	4013      	ands	r3, r2
 8015e64:	f043 0204 	orr.w	r2, r3, #4
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8015e6c:	bf00      	nop
 8015e6e:	370c      	adds	r7, #12
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr
 8015e78:	7fffffc0 	.word	0x7fffffc0

08015e7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	689b      	ldr	r3, [r3, #8]
 8015e88:	f003 0304 	and.w	r3, r3, #4
 8015e8c:	2b04      	cmp	r3, #4
 8015e8e:	d101      	bne.n	8015e94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8015e90:	2301      	movs	r3, #1
 8015e92:	e000      	b.n	8015e96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015e94:	2300      	movs	r3, #0
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	370c      	adds	r7, #12
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea0:	4770      	bx	lr

08015ea2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015ea2:	b480      	push	{r7}
 8015ea4:	b083      	sub	sp, #12
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	689b      	ldr	r3, [r3, #8]
 8015eae:	f003 0308 	and.w	r3, r3, #8
 8015eb2:	2b08      	cmp	r3, #8
 8015eb4:	d101      	bne.n	8015eba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e000      	b.n	8015ebc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8015eba:	2300      	movs	r3, #0
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	370c      	adds	r7, #12
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8015ec8:	b590      	push	{r4, r7, lr}
 8015eca:	b089      	sub	sp, #36	; 0x24
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8015ede:	2301      	movs	r3, #1
 8015ee0:	e1ee      	b.n	80162c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	691b      	ldr	r3, [r3, #16]
 8015ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d109      	bne.n	8015f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f7fe fe19 	bl	8014b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2200      	movs	r2, #0
 8015efa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2200      	movs	r2, #0
 8015f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ff ff3f 	bl	8015d8c <LL_ADC_IsDeepPowerDownEnabled>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d004      	beq.n	8015f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7ff ff25 	bl	8015d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ff ff5a 	bl	8015ddc <LL_ADC_IsInternalRegulatorEnabled>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d114      	bne.n	8015f58 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7ff ff3e 	bl	8015db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015f38:	4b8e      	ldr	r3, [pc, #568]	; (8016174 <HAL_ADC_Init+0x2ac>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	099b      	lsrs	r3, r3, #6
 8015f3e:	4a8e      	ldr	r2, [pc, #568]	; (8016178 <HAL_ADC_Init+0x2b0>)
 8015f40:	fba2 2303 	umull	r2, r3, r2, r3
 8015f44:	099b      	lsrs	r3, r3, #6
 8015f46:	3301      	adds	r3, #1
 8015f48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015f4a:	e002      	b.n	8015f52 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	3b01      	subs	r3, #1
 8015f50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1f9      	bne.n	8015f4c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7ff ff3d 	bl	8015ddc <LL_ADC_IsInternalRegulatorEnabled>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d10d      	bne.n	8015f84 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f6c:	f043 0210 	orr.w	r2, r3, #16
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015f78:	f043 0201 	orr.w	r2, r3, #1
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8015f80:	2301      	movs	r3, #1
 8015f82:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f7ff ff77 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 8015f8e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f94:	f003 0310 	and.w	r3, r3, #16
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	f040 8188 	bne.w	80162ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	f040 8184 	bne.w	80162ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015faa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8015fae:	f043 0202 	orr.w	r2, r3, #2
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7ff ff36 	bl	8015e2c <LL_ADC_IsEnabled>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d136      	bne.n	8016034 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4a6c      	ldr	r2, [pc, #432]	; (801617c <HAL_ADC_Init+0x2b4>)
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	d004      	beq.n	8015fda <HAL_ADC_Init+0x112>
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4a6a      	ldr	r2, [pc, #424]	; (8016180 <HAL_ADC_Init+0x2b8>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d10e      	bne.n	8015ff8 <HAL_ADC_Init+0x130>
 8015fda:	4868      	ldr	r0, [pc, #416]	; (801617c <HAL_ADC_Init+0x2b4>)
 8015fdc:	f7ff ff26 	bl	8015e2c <LL_ADC_IsEnabled>
 8015fe0:	4604      	mov	r4, r0
 8015fe2:	4867      	ldr	r0, [pc, #412]	; (8016180 <HAL_ADC_Init+0x2b8>)
 8015fe4:	f7ff ff22 	bl	8015e2c <LL_ADC_IsEnabled>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	4323      	orrs	r3, r4
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	bf0c      	ite	eq
 8015ff0:	2301      	moveq	r3, #1
 8015ff2:	2300      	movne	r3, #0
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	e008      	b.n	801600a <HAL_ADC_Init+0x142>
 8015ff8:	4862      	ldr	r0, [pc, #392]	; (8016184 <HAL_ADC_Init+0x2bc>)
 8015ffa:	f7ff ff17 	bl	8015e2c <LL_ADC_IsEnabled>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	bf0c      	ite	eq
 8016004:	2301      	moveq	r3, #1
 8016006:	2300      	movne	r3, #0
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b00      	cmp	r3, #0
 801600c:	d012      	beq.n	8016034 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	4a5a      	ldr	r2, [pc, #360]	; (801617c <HAL_ADC_Init+0x2b4>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d004      	beq.n	8016022 <HAL_ADC_Init+0x15a>
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	4a58      	ldr	r2, [pc, #352]	; (8016180 <HAL_ADC_Init+0x2b8>)
 801601e:	4293      	cmp	r3, r2
 8016020:	d101      	bne.n	8016026 <HAL_ADC_Init+0x15e>
 8016022:	4a59      	ldr	r2, [pc, #356]	; (8016188 <HAL_ADC_Init+0x2c0>)
 8016024:	e000      	b.n	8016028 <HAL_ADC_Init+0x160>
 8016026:	4a59      	ldr	r2, [pc, #356]	; (801618c <HAL_ADC_Init+0x2c4>)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	4619      	mov	r1, r3
 801602e:	4610      	mov	r0, r2
 8016030:	f7ff fc5e 	bl	80158f0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	4a52      	ldr	r2, [pc, #328]	; (8016184 <HAL_ADC_Init+0x2bc>)
 801603a:	4293      	cmp	r3, r2
 801603c:	d129      	bne.n	8016092 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	7e5b      	ldrb	r3, [r3, #25]
 8016042:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016048:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 801604e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	689b      	ldr	r3, [r3, #8]
 8016054:	2b08      	cmp	r3, #8
 8016056:	d013      	beq.n	8016080 <HAL_ADC_Init+0x1b8>
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	689b      	ldr	r3, [r3, #8]
 801605c:	2b0c      	cmp	r3, #12
 801605e:	d00d      	beq.n	801607c <HAL_ADC_Init+0x1b4>
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	689b      	ldr	r3, [r3, #8]
 8016064:	2b1c      	cmp	r3, #28
 8016066:	d007      	beq.n	8016078 <HAL_ADC_Init+0x1b0>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	689b      	ldr	r3, [r3, #8]
 801606c:	2b18      	cmp	r3, #24
 801606e:	d101      	bne.n	8016074 <HAL_ADC_Init+0x1ac>
 8016070:	2318      	movs	r3, #24
 8016072:	e006      	b.n	8016082 <HAL_ADC_Init+0x1ba>
 8016074:	2300      	movs	r3, #0
 8016076:	e004      	b.n	8016082 <HAL_ADC_Init+0x1ba>
 8016078:	2310      	movs	r3, #16
 801607a:	e002      	b.n	8016082 <HAL_ADC_Init+0x1ba>
 801607c:	2308      	movs	r3, #8
 801607e:	e000      	b.n	8016082 <HAL_ADC_Init+0x1ba>
 8016080:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8016082:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 3020 	ldrb.w	r3, [r3, #32]
 801608a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 801608c:	4313      	orrs	r3, r2
 801608e:	61bb      	str	r3, [r7, #24]
 8016090:	e00e      	b.n	80160b0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	7e5b      	ldrb	r3, [r3, #25]
 8016096:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801609c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80160a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80160ac:	4313      	orrs	r3, r2
 80160ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d106      	bne.n	80160c8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160be:	3b01      	subs	r3, #1
 80160c0:	045b      	lsls	r3, r3, #17
 80160c2:	69ba      	ldr	r2, [r7, #24]
 80160c4:	4313      	orrs	r3, r2
 80160c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d009      	beq.n	80160e4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80160de:	69ba      	ldr	r2, [r7, #24]
 80160e0:	4313      	orrs	r3, r2
 80160e2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4a26      	ldr	r2, [pc, #152]	; (8016184 <HAL_ADC_Init+0x2bc>)
 80160ea:	4293      	cmp	r3, r2
 80160ec:	d115      	bne.n	801611a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	68da      	ldr	r2, [r3, #12]
 80160f4:	4b26      	ldr	r3, [pc, #152]	; (8016190 <HAL_ADC_Init+0x2c8>)
 80160f6:	4013      	ands	r3, r2
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	6812      	ldr	r2, [r2, #0]
 80160fc:	69b9      	ldr	r1, [r7, #24]
 80160fe:	430b      	orrs	r3, r1
 8016100:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	691b      	ldr	r3, [r3, #16]
 8016108:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	430a      	orrs	r2, r1
 8016116:	611a      	str	r2, [r3, #16]
 8016118:	e009      	b.n	801612e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	68da      	ldr	r2, [r3, #12]
 8016120:	4b1c      	ldr	r3, [pc, #112]	; (8016194 <HAL_ADC_Init+0x2cc>)
 8016122:	4013      	ands	r3, r2
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	6812      	ldr	r2, [r2, #0]
 8016128:	69b9      	ldr	r1, [r7, #24]
 801612a:	430b      	orrs	r3, r1
 801612c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4618      	mov	r0, r3
 8016134:	f7ff fea2 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 8016138:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	4618      	mov	r0, r3
 8016140:	f7ff feaf 	bl	8015ea2 <LL_ADC_INJ_IsConversionOngoing>
 8016144:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	2b00      	cmp	r3, #0
 801614a:	f040 808e 	bne.w	801626a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2b00      	cmp	r3, #0
 8016152:	f040 808a 	bne.w	801626a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4a0a      	ldr	r2, [pc, #40]	; (8016184 <HAL_ADC_Init+0x2bc>)
 801615c:	4293      	cmp	r3, r2
 801615e:	d11b      	bne.n	8016198 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	7e1b      	ldrb	r3, [r3, #24]
 8016164:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801616c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 801616e:	4313      	orrs	r3, r2
 8016170:	61bb      	str	r3, [r7, #24]
 8016172:	e018      	b.n	80161a6 <HAL_ADC_Init+0x2de>
 8016174:	24000004 	.word	0x24000004
 8016178:	053e2d63 	.word	0x053e2d63
 801617c:	40022000 	.word	0x40022000
 8016180:	40022100 	.word	0x40022100
 8016184:	58026000 	.word	0x58026000
 8016188:	40022300 	.word	0x40022300
 801618c:	58026300 	.word	0x58026300
 8016190:	fff04007 	.word	0xfff04007
 8016194:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	7e1b      	ldrb	r3, [r3, #24]
 801619c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80161a2:	4313      	orrs	r3, r2
 80161a4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	68da      	ldr	r2, [r3, #12]
 80161ac:	4b46      	ldr	r3, [pc, #280]	; (80162c8 <HAL_ADC_Init+0x400>)
 80161ae:	4013      	ands	r3, r2
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	6812      	ldr	r2, [r2, #0]
 80161b4:	69b9      	ldr	r1, [r7, #24]
 80161b6:	430b      	orrs	r3, r1
 80161b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161c0:	2b01      	cmp	r3, #1
 80161c2:	d137      	bne.n	8016234 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161c8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	4a3f      	ldr	r2, [pc, #252]	; (80162cc <HAL_ADC_Init+0x404>)
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d116      	bne.n	8016202 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	691a      	ldr	r2, [r3, #16]
 80161da:	4b3d      	ldr	r3, [pc, #244]	; (80162d0 <HAL_ADC_Init+0x408>)
 80161dc:	4013      	ands	r3, r2
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80161e6:	4311      	orrs	r1, r2
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80161ec:	4311      	orrs	r1, r2
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80161f2:	430a      	orrs	r2, r1
 80161f4:	431a      	orrs	r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f042 0201 	orr.w	r2, r2, #1
 80161fe:	611a      	str	r2, [r3, #16]
 8016200:	e020      	b.n	8016244 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	691a      	ldr	r2, [r3, #16]
 8016208:	4b32      	ldr	r3, [pc, #200]	; (80162d4 <HAL_ADC_Init+0x40c>)
 801620a:	4013      	ands	r3, r2
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8016210:	3a01      	subs	r2, #1
 8016212:	0411      	lsls	r1, r2, #16
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016218:	4311      	orrs	r1, r2
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801621e:	4311      	orrs	r1, r2
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8016224:	430a      	orrs	r2, r1
 8016226:	431a      	orrs	r2, r3
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f042 0201 	orr.w	r2, r2, #1
 8016230:	611a      	str	r2, [r3, #16]
 8016232:	e007      	b.n	8016244 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	691a      	ldr	r2, [r3, #16]
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	f022 0201 	bic.w	r2, r2, #1
 8016242:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	691b      	ldr	r3, [r3, #16]
 801624a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	430a      	orrs	r2, r1
 8016258:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	4a1b      	ldr	r2, [pc, #108]	; (80162cc <HAL_ADC_Init+0x404>)
 8016260:	4293      	cmp	r3, r2
 8016262:	d002      	beq.n	801626a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f001 f9b5 	bl	80175d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	691b      	ldr	r3, [r3, #16]
 801626e:	2b01      	cmp	r3, #1
 8016270:	d10c      	bne.n	801628c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016278:	f023 010f 	bic.w	r1, r3, #15
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	69db      	ldr	r3, [r3, #28]
 8016280:	1e5a      	subs	r2, r3, #1
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	430a      	orrs	r2, r1
 8016288:	631a      	str	r2, [r3, #48]	; 0x30
 801628a:	e007      	b.n	801629c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	f022 020f 	bic.w	r2, r2, #15
 801629a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162a0:	f023 0303 	bic.w	r3, r3, #3
 80162a4:	f043 0201 	orr.w	r2, r3, #1
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	661a      	str	r2, [r3, #96]	; 0x60
 80162ac:	e007      	b.n	80162be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162b2:	f043 0210 	orr.w	r2, r3, #16
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80162ba:	2301      	movs	r3, #1
 80162bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80162be:	7ffb      	ldrb	r3, [r7, #31]
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3724      	adds	r7, #36	; 0x24
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd90      	pop	{r4, r7, pc}
 80162c8:	ffffbffc 	.word	0xffffbffc
 80162cc:	58026000 	.word	0x58026000
 80162d0:	fc00f81f 	.word	0xfc00f81f
 80162d4:	fc00f81e 	.word	0xfc00f81e

080162d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b086      	sub	sp, #24
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	4a60      	ldr	r2, [pc, #384]	; (801646c <HAL_ADC_Start_DMA+0x194>)
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d004      	beq.n	80162f8 <HAL_ADC_Start_DMA+0x20>
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	4a5f      	ldr	r2, [pc, #380]	; (8016470 <HAL_ADC_Start_DMA+0x198>)
 80162f4:	4293      	cmp	r3, r2
 80162f6:	d101      	bne.n	80162fc <HAL_ADC_Start_DMA+0x24>
 80162f8:	4b5e      	ldr	r3, [pc, #376]	; (8016474 <HAL_ADC_Start_DMA+0x19c>)
 80162fa:	e000      	b.n	80162fe <HAL_ADC_Start_DMA+0x26>
 80162fc:	4b5e      	ldr	r3, [pc, #376]	; (8016478 <HAL_ADC_Start_DMA+0x1a0>)
 80162fe:	4618      	mov	r0, r3
 8016300:	f7ff fd16 	bl	8015d30 <LL_ADC_GetMultimode>
 8016304:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4618      	mov	r0, r3
 801630c:	f7ff fdb6 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	f040 80a2 	bne.w	801645c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801631e:	2b01      	cmp	r3, #1
 8016320:	d101      	bne.n	8016326 <HAL_ADC_Start_DMA+0x4e>
 8016322:	2302      	movs	r3, #2
 8016324:	e09d      	b.n	8016462 <HAL_ADC_Start_DMA+0x18a>
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2201      	movs	r2, #1
 801632a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d006      	beq.n	8016342 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8016334:	693b      	ldr	r3, [r7, #16]
 8016336:	2b05      	cmp	r3, #5
 8016338:	d003      	beq.n	8016342 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	2b09      	cmp	r3, #9
 801633e:	f040 8086 	bne.w	801644e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8016342:	68f8      	ldr	r0, [r7, #12]
 8016344:	f001 f828 	bl	8017398 <ADC_Enable>
 8016348:	4603      	mov	r3, r0
 801634a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801634c:	7dfb      	ldrb	r3, [r7, #23]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d178      	bne.n	8016444 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016356:	4b49      	ldr	r3, [pc, #292]	; (801647c <HAL_ADC_Start_DMA+0x1a4>)
 8016358:	4013      	ands	r3, r2
 801635a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a42      	ldr	r2, [pc, #264]	; (8016470 <HAL_ADC_Start_DMA+0x198>)
 8016368:	4293      	cmp	r3, r2
 801636a:	d002      	beq.n	8016372 <HAL_ADC_Start_DMA+0x9a>
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	e000      	b.n	8016374 <HAL_ADC_Start_DMA+0x9c>
 8016372:	4b3e      	ldr	r3, [pc, #248]	; (801646c <HAL_ADC_Start_DMA+0x194>)
 8016374:	68fa      	ldr	r2, [r7, #12]
 8016376:	6812      	ldr	r2, [r2, #0]
 8016378:	4293      	cmp	r3, r2
 801637a:	d002      	beq.n	8016382 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d105      	bne.n	801638e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016396:	2b00      	cmp	r3, #0
 8016398:	d006      	beq.n	80163a8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801639e:	f023 0206 	bic.w	r2, r3, #6
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	665a      	str	r2, [r3, #100]	; 0x64
 80163a6:	e002      	b.n	80163ae <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	2200      	movs	r2, #0
 80163ac:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163b2:	4a33      	ldr	r2, [pc, #204]	; (8016480 <HAL_ADC_Start_DMA+0x1a8>)
 80163b4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163ba:	4a32      	ldr	r2, [pc, #200]	; (8016484 <HAL_ADC_Start_DMA+0x1ac>)
 80163bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163c2:	4a31      	ldr	r2, [pc, #196]	; (8016488 <HAL_ADC_Start_DMA+0x1b0>)
 80163c4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	221c      	movs	r2, #28
 80163cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2200      	movs	r2, #0
 80163d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	685a      	ldr	r2, [r3, #4]
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	f042 0210 	orr.w	r2, r2, #16
 80163e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	4a28      	ldr	r2, [pc, #160]	; (801648c <HAL_ADC_Start_DMA+0x1b4>)
 80163ec:	4293      	cmp	r3, r2
 80163ee:	d10f      	bne.n	8016410 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	681a      	ldr	r2, [r3, #0]
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	4619      	mov	r1, r3
 80163fe:	4610      	mov	r0, r2
 8016400:	f7ff fbfe 	bl	8015c00 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4618      	mov	r0, r3
 801640a:	f7ff fbe9 	bl	8015be0 <LL_ADC_EnableDMAReq>
 801640e:	e007      	b.n	8016420 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016418:	4619      	mov	r1, r3
 801641a:	4610      	mov	r0, r2
 801641c:	f7ff fbcd 	bl	8015bba <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	3340      	adds	r3, #64	; 0x40
 801642a:	4619      	mov	r1, r3
 801642c:	68ba      	ldr	r2, [r7, #8]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f001 ff62 	bl	80182f8 <HAL_DMA_Start_IT>
 8016434:	4603      	mov	r3, r0
 8016436:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	4618      	mov	r0, r3
 801643e:	f7ff fd09 	bl	8015e54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8016442:	e00d      	b.n	8016460 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2200      	movs	r2, #0
 8016448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 801644c:	e008      	b.n	8016460 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 801644e:	2301      	movs	r3, #1
 8016450:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	2200      	movs	r2, #0
 8016456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801645a:	e001      	b.n	8016460 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801645c:	2302      	movs	r3, #2
 801645e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8016460:	7dfb      	ldrb	r3, [r7, #23]
}
 8016462:	4618      	mov	r0, r3
 8016464:	3718      	adds	r7, #24
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	40022000 	.word	0x40022000
 8016470:	40022100 	.word	0x40022100
 8016474:	40022300 	.word	0x40022300
 8016478:	58026300 	.word	0x58026300
 801647c:	fffff0fe 	.word	0xfffff0fe
 8016480:	080174ad 	.word	0x080174ad
 8016484:	08017585 	.word	0x08017585
 8016488:	080175a1 	.word	0x080175a1
 801648c:	58026000 	.word	0x58026000

08016490 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b08a      	sub	sp, #40	; 0x28
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8016498:	2300      	movs	r3, #0
 801649a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4a87      	ldr	r2, [pc, #540]	; (80166d0 <HAL_ADC_IRQHandler+0x240>)
 80164b2:	4293      	cmp	r3, r2
 80164b4:	d004      	beq.n	80164c0 <HAL_ADC_IRQHandler+0x30>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	4a86      	ldr	r2, [pc, #536]	; (80166d4 <HAL_ADC_IRQHandler+0x244>)
 80164bc:	4293      	cmp	r3, r2
 80164be:	d101      	bne.n	80164c4 <HAL_ADC_IRQHandler+0x34>
 80164c0:	4b85      	ldr	r3, [pc, #532]	; (80166d8 <HAL_ADC_IRQHandler+0x248>)
 80164c2:	e000      	b.n	80164c6 <HAL_ADC_IRQHandler+0x36>
 80164c4:	4b85      	ldr	r3, [pc, #532]	; (80166dc <HAL_ADC_IRQHandler+0x24c>)
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7ff fc32 	bl	8015d30 <LL_ADC_GetMultimode>
 80164cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	f003 0302 	and.w	r3, r3, #2
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d017      	beq.n	8016508 <HAL_ADC_IRQHandler+0x78>
 80164d8:	69bb      	ldr	r3, [r7, #24]
 80164da:	f003 0302 	and.w	r3, r3, #2
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d012      	beq.n	8016508 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164e6:	f003 0310 	and.w	r3, r3, #16
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d105      	bne.n	80164fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f001 f9a6 	bl	801784c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2202      	movs	r2, #2
 8016506:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	f003 0304 	and.w	r3, r3, #4
 801650e:	2b00      	cmp	r3, #0
 8016510:	d004      	beq.n	801651c <HAL_ADC_IRQHandler+0x8c>
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	f003 0304 	and.w	r3, r3, #4
 8016518:	2b00      	cmp	r3, #0
 801651a:	d10a      	bne.n	8016532 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8016522:	2b00      	cmp	r3, #0
 8016524:	f000 8083 	beq.w	801662e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	f003 0308 	and.w	r3, r3, #8
 801652e:	2b00      	cmp	r3, #0
 8016530:	d07d      	beq.n	801662e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016536:	f003 0310 	and.w	r3, r3, #16
 801653a:	2b00      	cmp	r3, #0
 801653c:	d105      	bne.n	801654a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016542:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4618      	mov	r0, r3
 8016550:	f7ff faf4 	bl	8015b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	d062      	beq.n	8016620 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4a5d      	ldr	r2, [pc, #372]	; (80166d4 <HAL_ADC_IRQHandler+0x244>)
 8016560:	4293      	cmp	r3, r2
 8016562:	d002      	beq.n	801656a <HAL_ADC_IRQHandler+0xda>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	e000      	b.n	801656c <HAL_ADC_IRQHandler+0xdc>
 801656a:	4b59      	ldr	r3, [pc, #356]	; (80166d0 <HAL_ADC_IRQHandler+0x240>)
 801656c:	687a      	ldr	r2, [r7, #4]
 801656e:	6812      	ldr	r2, [r2, #0]
 8016570:	4293      	cmp	r3, r2
 8016572:	d008      	beq.n	8016586 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d005      	beq.n	8016586 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	2b05      	cmp	r3, #5
 801657e:	d002      	beq.n	8016586 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	2b09      	cmp	r3, #9
 8016584:	d104      	bne.n	8016590 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	623b      	str	r3, [r7, #32]
 801658e:	e00c      	b.n	80165aa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	4a4f      	ldr	r2, [pc, #316]	; (80166d4 <HAL_ADC_IRQHandler+0x244>)
 8016596:	4293      	cmp	r3, r2
 8016598:	d002      	beq.n	80165a0 <HAL_ADC_IRQHandler+0x110>
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	e000      	b.n	80165a2 <HAL_ADC_IRQHandler+0x112>
 80165a0:	4b4b      	ldr	r3, [pc, #300]	; (80166d0 <HAL_ADC_IRQHandler+0x240>)
 80165a2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d135      	bne.n	8016620 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	f003 0308 	and.w	r3, r3, #8
 80165be:	2b08      	cmp	r3, #8
 80165c0:	d12e      	bne.n	8016620 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7ff fc58 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 80165cc:	4603      	mov	r3, r0
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d11a      	bne.n	8016608 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	685a      	ldr	r2, [r3, #4]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f022 020c 	bic.w	r2, r2, #12
 80165e0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d112      	bne.n	8016620 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165fe:	f043 0201 	orr.w	r2, r3, #1
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	661a      	str	r2, [r3, #96]	; 0x60
 8016606:	e00b      	b.n	8016620 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801660c:	f043 0210 	orr.w	r2, r3, #16
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016618:	f043 0201 	orr.w	r2, r3, #1
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f7f7 fee8 	bl	800e3f6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	220c      	movs	r2, #12
 801662c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	f003 0320 	and.w	r3, r3, #32
 8016634:	2b00      	cmp	r3, #0
 8016636:	d004      	beq.n	8016642 <HAL_ADC_IRQHandler+0x1b2>
 8016638:	69bb      	ldr	r3, [r7, #24]
 801663a:	f003 0320 	and.w	r3, r3, #32
 801663e:	2b00      	cmp	r3, #0
 8016640:	d10b      	bne.n	801665a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016648:	2b00      	cmp	r3, #0
 801664a:	f000 80a0 	beq.w	801678e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016654:	2b00      	cmp	r3, #0
 8016656:	f000 809a 	beq.w	801678e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801665e:	f003 0310 	and.w	r3, r3, #16
 8016662:	2b00      	cmp	r3, #0
 8016664:	d105      	bne.n	8016672 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801666a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	4618      	mov	r0, r3
 8016678:	f7ff fadc 	bl	8015c34 <LL_ADC_INJ_IsTriggerSourceSWStart>
 801667c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	4618      	mov	r0, r3
 8016684:	f7ff fa5a 	bl	8015b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8016688:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	4a11      	ldr	r2, [pc, #68]	; (80166d4 <HAL_ADC_IRQHandler+0x244>)
 8016690:	4293      	cmp	r3, r2
 8016692:	d002      	beq.n	801669a <HAL_ADC_IRQHandler+0x20a>
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	e000      	b.n	801669c <HAL_ADC_IRQHandler+0x20c>
 801669a:	4b0d      	ldr	r3, [pc, #52]	; (80166d0 <HAL_ADC_IRQHandler+0x240>)
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	6812      	ldr	r2, [r2, #0]
 80166a0:	4293      	cmp	r3, r2
 80166a2:	d008      	beq.n	80166b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d005      	beq.n	80166b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	2b06      	cmp	r3, #6
 80166ae:	d002      	beq.n	80166b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	2b07      	cmp	r3, #7
 80166b4:	d104      	bne.n	80166c0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	623b      	str	r3, [r7, #32]
 80166be:	e014      	b.n	80166ea <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4a03      	ldr	r2, [pc, #12]	; (80166d4 <HAL_ADC_IRQHandler+0x244>)
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d00a      	beq.n	80166e0 <HAL_ADC_IRQHandler+0x250>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	e008      	b.n	80166e2 <HAL_ADC_IRQHandler+0x252>
 80166d0:	40022000 	.word	0x40022000
 80166d4:	40022100 	.word	0x40022100
 80166d8:	40022300 	.word	0x40022300
 80166dc:	58026300 	.word	0x58026300
 80166e0:	4b84      	ldr	r3, [pc, #528]	; (80168f4 <HAL_ADC_IRQHandler+0x464>)
 80166e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d047      	beq.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80166f0:	6a3b      	ldr	r3, [r7, #32]
 80166f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d007      	beq.n	801670a <HAL_ADC_IRQHandler+0x27a>
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d03f      	beq.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8016700:	6a3b      	ldr	r3, [r7, #32]
 8016702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8016706:	2b00      	cmp	r3, #0
 8016708:	d13a      	bne.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016714:	2b40      	cmp	r3, #64	; 0x40
 8016716:	d133      	bne.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8016718:	6a3b      	ldr	r3, [r7, #32]
 801671a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801671e:	2b00      	cmp	r3, #0
 8016720:	d12e      	bne.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4618      	mov	r0, r3
 8016728:	f7ff fbbb 	bl	8015ea2 <LL_ADC_INJ_IsConversionOngoing>
 801672c:	4603      	mov	r3, r0
 801672e:	2b00      	cmp	r3, #0
 8016730:	d11a      	bne.n	8016768 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	685a      	ldr	r2, [r3, #4]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016740:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016756:	2b00      	cmp	r3, #0
 8016758:	d112      	bne.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801675e:	f043 0201 	orr.w	r2, r3, #1
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	661a      	str	r2, [r3, #96]	; 0x60
 8016766:	e00b      	b.n	8016780 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801676c:	f043 0210 	orr.w	r2, r3, #16
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016778:	f043 0201 	orr.w	r2, r3, #1
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f001 f83b 	bl	80177fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	2260      	movs	r2, #96	; 0x60
 801678c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801678e:	69fb      	ldr	r3, [r7, #28]
 8016790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016794:	2b00      	cmp	r3, #0
 8016796:	d011      	beq.n	80167bc <HAL_ADC_IRQHandler+0x32c>
 8016798:	69bb      	ldr	r3, [r7, #24]
 801679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d00c      	beq.n	80167bc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f000 f8b2 	bl	8016918 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2280      	movs	r2, #128	; 0x80
 80167ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d012      	beq.n	80167ec <HAL_ADC_IRQHandler+0x35c>
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d00d      	beq.n	80167ec <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f001 f821 	bl	8017824 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d012      	beq.n	801681c <HAL_ADC_IRQHandler+0x38c>
 80167f6:	69bb      	ldr	r3, [r7, #24]
 80167f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00d      	beq.n	801681c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016804:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f001 f813 	bl	8017838 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f44f 7200 	mov.w	r2, #512	; 0x200
 801681a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	f003 0310 	and.w	r3, r3, #16
 8016822:	2b00      	cmp	r3, #0
 8016824:	d043      	beq.n	80168ae <HAL_ADC_IRQHandler+0x41e>
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	f003 0310 	and.w	r3, r3, #16
 801682c:	2b00      	cmp	r3, #0
 801682e:	d03e      	beq.n	80168ae <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016834:	2b00      	cmp	r3, #0
 8016836:	d102      	bne.n	801683e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8016838:	2301      	movs	r3, #1
 801683a:	627b      	str	r3, [r7, #36]	; 0x24
 801683c:	e021      	b.n	8016882 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d015      	beq.n	8016870 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	4a2a      	ldr	r2, [pc, #168]	; (80168f4 <HAL_ADC_IRQHandler+0x464>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d004      	beq.n	8016858 <HAL_ADC_IRQHandler+0x3c8>
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4a29      	ldr	r2, [pc, #164]	; (80168f8 <HAL_ADC_IRQHandler+0x468>)
 8016854:	4293      	cmp	r3, r2
 8016856:	d101      	bne.n	801685c <HAL_ADC_IRQHandler+0x3cc>
 8016858:	4b28      	ldr	r3, [pc, #160]	; (80168fc <HAL_ADC_IRQHandler+0x46c>)
 801685a:	e000      	b.n	801685e <HAL_ADC_IRQHandler+0x3ce>
 801685c:	4b28      	ldr	r3, [pc, #160]	; (8016900 <HAL_ADC_IRQHandler+0x470>)
 801685e:	4618      	mov	r0, r3
 8016860:	f7ff fa74 	bl	8015d4c <LL_ADC_GetMultiDMATransfer>
 8016864:	4603      	mov	r3, r0
 8016866:	2b00      	cmp	r3, #0
 8016868:	d00b      	beq.n	8016882 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 801686a:	2301      	movs	r3, #1
 801686c:	627b      	str	r3, [r7, #36]	; 0x24
 801686e:	e008      	b.n	8016882 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	f003 0303 	and.w	r3, r3, #3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d001      	beq.n	8016882 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 801687e:	2301      	movs	r3, #1
 8016880:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	2b01      	cmp	r3, #1
 8016886:	d10e      	bne.n	80168a6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801688c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016898:	f043 0202 	orr.w	r2, r3, #2
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 f843 	bl	801692c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2210      	movs	r2, #16
 80168ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d018      	beq.n	80168ea <HAL_ADC_IRQHandler+0x45a>
 80168b8:	69bb      	ldr	r3, [r7, #24]
 80168ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d013      	beq.n	80168ea <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80168d2:	f043 0208 	orr.w	r2, r3, #8
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80168e2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 ff93 	bl	8017810 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80168ea:	bf00      	nop
 80168ec:	3728      	adds	r7, #40	; 0x28
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	40022000 	.word	0x40022000
 80168f8:	40022100 	.word	0x40022100
 80168fc:	40022300 	.word	0x40022300
 8016900:	58026300 	.word	0x58026300

08016904 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016904:	b480      	push	{r7}
 8016906:	b083      	sub	sp, #12
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801690c:	bf00      	nop
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8016920:	bf00      	nop
 8016922:	370c      	adds	r7, #12
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr

0801692c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801692c:	b480      	push	{r7}
 801692e:	b083      	sub	sp, #12
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016934:	bf00      	nop
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016940:	b590      	push	{r4, r7, lr}
 8016942:	b0b9      	sub	sp, #228	; 0xe4
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801694a:	2300      	movs	r3, #0
 801694c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016950:	2300      	movs	r3, #0
 8016952:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801695a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	4aa9      	ldr	r2, [pc, #676]	; (8016c08 <HAL_ADC_ConfigChannel+0x2c8>)
 8016962:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801696a:	2b01      	cmp	r3, #1
 801696c:	d102      	bne.n	8016974 <HAL_ADC_ConfigChannel+0x34>
 801696e:	2302      	movs	r3, #2
 8016970:	f000 bcfa 	b.w	8017368 <HAL_ADC_ConfigChannel+0xa28>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2201      	movs	r2, #1
 8016978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4618      	mov	r0, r3
 8016982:	f7ff fa7b 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	f040 84de 	bne.w	801734a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	4a9e      	ldr	r2, [pc, #632]	; (8016c0c <HAL_ADC_ConfigChannel+0x2cc>)
 8016994:	4293      	cmp	r3, r2
 8016996:	d033      	beq.n	8016a00 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d108      	bne.n	80169b6 <HAL_ADC_ConfigChannel+0x76>
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	0e9b      	lsrs	r3, r3, #26
 80169aa:	f003 031f 	and.w	r3, r3, #31
 80169ae:	2201      	movs	r2, #1
 80169b0:	fa02 f303 	lsl.w	r3, r2, r3
 80169b4:	e01d      	b.n	80169f2 <HAL_ADC_ConfigChannel+0xb2>
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80169c2:	fa93 f3a3 	rbit	r3, r3
 80169c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80169ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80169ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80169d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d101      	bne.n	80169de <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80169da:	2320      	movs	r3, #32
 80169dc:	e004      	b.n	80169e8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80169de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80169e2:	fab3 f383 	clz	r3, r3
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	f003 031f 	and.w	r3, r3, #31
 80169ec:	2201      	movs	r2, #1
 80169ee:	fa02 f303 	lsl.w	r3, r2, r3
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	6812      	ldr	r2, [r2, #0]
 80169f6:	69d1      	ldr	r1, [r2, #28]
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	6812      	ldr	r2, [r2, #0]
 80169fc:	430b      	orrs	r3, r1
 80169fe:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6818      	ldr	r0, [r3, #0]
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	6859      	ldr	r1, [r3, #4]
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	f7ff f8a8 	bl	8015b62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7ff fa30 	bl	8015e7c <LL_ADC_REG_IsConversionOngoing>
 8016a1c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7ff fa3c 	bl	8015ea2 <LL_ADC_INJ_IsConversionOngoing>
 8016a2a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f040 8270 	bne.w	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016a38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f040 826b 	bne.w	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6818      	ldr	r0, [r3, #0]
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	6819      	ldr	r1, [r3, #0]
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	689b      	ldr	r3, [r3, #8]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f7ff f903 	bl	8015c5a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	4a6c      	ldr	r2, [pc, #432]	; (8016c0c <HAL_ADC_ConfigChannel+0x2cc>)
 8016a5a:	4293      	cmp	r3, r2
 8016a5c:	d10d      	bne.n	8016a7a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	695a      	ldr	r2, [r3, #20]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	08db      	lsrs	r3, r3, #3
 8016a6a:	f003 0303 	and.w	r3, r3, #3
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	fa02 f303 	lsl.w	r3, r2, r3
 8016a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016a78:	e032      	b.n	8016ae0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016a7a:	4b65      	ldr	r3, [pc, #404]	; (8016c10 <HAL_ADC_ConfigChannel+0x2d0>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016a86:	d10b      	bne.n	8016aa0 <HAL_ADC_ConfigChannel+0x160>
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	695a      	ldr	r2, [r3, #20]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	68db      	ldr	r3, [r3, #12]
 8016a92:	089b      	lsrs	r3, r3, #2
 8016a94:	f003 0307 	and.w	r3, r3, #7
 8016a98:	005b      	lsls	r3, r3, #1
 8016a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a9e:	e01d      	b.n	8016adc <HAL_ADC_ConfigChannel+0x19c>
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	f003 0310 	and.w	r3, r3, #16
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d10b      	bne.n	8016ac6 <HAL_ADC_ConfigChannel+0x186>
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	695a      	ldr	r2, [r3, #20]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	089b      	lsrs	r3, r3, #2
 8016aba:	f003 0307 	and.w	r3, r3, #7
 8016abe:	005b      	lsls	r3, r3, #1
 8016ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ac4:	e00a      	b.n	8016adc <HAL_ADC_ConfigChannel+0x19c>
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	695a      	ldr	r2, [r3, #20]
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	089b      	lsrs	r3, r3, #2
 8016ad2:	f003 0304 	and.w	r3, r3, #4
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8016adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	691b      	ldr	r3, [r3, #16]
 8016ae4:	2b04      	cmp	r3, #4
 8016ae6:	d048      	beq.n	8016b7a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6818      	ldr	r0, [r3, #0]
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	6919      	ldr	r1, [r3, #16]
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016af8:	f7fe ff2e 	bl	8015958 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4a42      	ldr	r2, [pc, #264]	; (8016c0c <HAL_ADC_ConfigChannel+0x2cc>)
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d119      	bne.n	8016b3a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6818      	ldr	r0, [r3, #0]
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	6919      	ldr	r1, [r3, #16]
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	69db      	ldr	r3, [r3, #28]
 8016b12:	461a      	mov	r2, r3
 8016b14:	f7fe ffc6 	bl	8015aa4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6818      	ldr	r0, [r3, #0]
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	6919      	ldr	r1, [r3, #16]
 8016b20:	683b      	ldr	r3, [r7, #0]
 8016b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	d102      	bne.n	8016b30 <HAL_ADC_ConfigChannel+0x1f0>
 8016b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016b2e:	e000      	b.n	8016b32 <HAL_ADC_ConfigChannel+0x1f2>
 8016b30:	2300      	movs	r3, #0
 8016b32:	461a      	mov	r2, r3
 8016b34:	f7fe ff94 	bl	8015a60 <LL_ADC_SetOffsetSaturation>
 8016b38:	e1ee      	b.n	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6818      	ldr	r0, [r3, #0]
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	6919      	ldr	r1, [r3, #16]
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d102      	bne.n	8016b52 <HAL_ADC_ConfigChannel+0x212>
 8016b4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016b50:	e000      	b.n	8016b54 <HAL_ADC_ConfigChannel+0x214>
 8016b52:	2300      	movs	r3, #0
 8016b54:	461a      	mov	r2, r3
 8016b56:	f7fe ff61 	bl	8015a1c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6818      	ldr	r0, [r3, #0]
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	6919      	ldr	r1, [r3, #16]
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	7e1b      	ldrb	r3, [r3, #24]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d102      	bne.n	8016b70 <HAL_ADC_ConfigChannel+0x230>
 8016b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b6e:	e000      	b.n	8016b72 <HAL_ADC_ConfigChannel+0x232>
 8016b70:	2300      	movs	r3, #0
 8016b72:	461a      	mov	r2, r3
 8016b74:	f7fe ff38 	bl	80159e8 <LL_ADC_SetDataRightShift>
 8016b78:	e1ce      	b.n	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	4a23      	ldr	r2, [pc, #140]	; (8016c0c <HAL_ADC_ConfigChannel+0x2cc>)
 8016b80:	4293      	cmp	r3, r2
 8016b82:	f040 8181 	bne.w	8016e88 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2100      	movs	r1, #0
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fe ff15 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016b92:	4603      	mov	r3, r0
 8016b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d10a      	bne.n	8016bb2 <HAL_ADC_ConfigChannel+0x272>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7fe ff0a 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	0e9b      	lsrs	r3, r3, #26
 8016bac:	f003 021f 	and.w	r2, r3, #31
 8016bb0:	e01e      	b.n	8016bf0 <HAL_ADC_ConfigChannel+0x2b0>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fe feff 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016bc8:	fa93 f3a3 	rbit	r3, r3
 8016bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8016bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8016bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d101      	bne.n	8016be4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8016be0:	2320      	movs	r3, #32
 8016be2:	e004      	b.n	8016bee <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8016be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016be8:	fab3 f383 	clz	r3, r3
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	461a      	mov	r2, r3
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d10b      	bne.n	8016c14 <HAL_ADC_ConfigChannel+0x2d4>
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	0e9b      	lsrs	r3, r3, #26
 8016c02:	f003 031f 	and.w	r3, r3, #31
 8016c06:	e01e      	b.n	8016c46 <HAL_ADC_ConfigChannel+0x306>
 8016c08:	47ff0000 	.word	0x47ff0000
 8016c0c:	58026000 	.word	0x58026000
 8016c10:	5c001000 	.word	0x5c001000
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c20:	fa93 f3a3 	rbit	r3, r3
 8016c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8016c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8016c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d101      	bne.n	8016c3c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8016c38:	2320      	movs	r3, #32
 8016c3a:	e004      	b.n	8016c46 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8016c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c40:	fab3 f383 	clz	r3, r3
 8016c44:	b2db      	uxtb	r3, r3
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d106      	bne.n	8016c58 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	2100      	movs	r1, #0
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fe ff48 	bl	8015ae8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2101      	movs	r1, #1
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7fe feac 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016c64:	4603      	mov	r3, r0
 8016c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d10a      	bne.n	8016c84 <HAL_ADC_ConfigChannel+0x344>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	2101      	movs	r1, #1
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fe fea1 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	0e9b      	lsrs	r3, r3, #26
 8016c7e:	f003 021f 	and.w	r2, r3, #31
 8016c82:	e01e      	b.n	8016cc2 <HAL_ADC_ConfigChannel+0x382>
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2101      	movs	r1, #1
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fe96 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016c90:	4603      	mov	r3, r0
 8016c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c9a:	fa93 f3a3 	rbit	r3, r3
 8016c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8016ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8016caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d101      	bne.n	8016cb6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8016cb2:	2320      	movs	r3, #32
 8016cb4:	e004      	b.n	8016cc0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8016cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016cba:	fab3 f383 	clz	r3, r3
 8016cbe:	b2db      	uxtb	r3, r3
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d105      	bne.n	8016cda <HAL_ADC_ConfigChannel+0x39a>
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	0e9b      	lsrs	r3, r3, #26
 8016cd4:	f003 031f 	and.w	r3, r3, #31
 8016cd8:	e018      	b.n	8016d0c <HAL_ADC_ConfigChannel+0x3cc>
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ce2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016ce6:	fa93 f3a3 	rbit	r3, r3
 8016cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8016cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8016cf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d101      	bne.n	8016d02 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8016cfe:	2320      	movs	r3, #32
 8016d00:	e004      	b.n	8016d0c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8016d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016d06:	fab3 f383 	clz	r3, r3
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d106      	bne.n	8016d1e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	2200      	movs	r2, #0
 8016d16:	2101      	movs	r1, #1
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7fe fee5 	bl	8015ae8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2102      	movs	r1, #2
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7fe fe49 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d10a      	bne.n	8016d4a <HAL_ADC_ConfigChannel+0x40a>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2102      	movs	r1, #2
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe fe3e 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016d40:	4603      	mov	r3, r0
 8016d42:	0e9b      	lsrs	r3, r3, #26
 8016d44:	f003 021f 	and.w	r2, r3, #31
 8016d48:	e01e      	b.n	8016d88 <HAL_ADC_ConfigChannel+0x448>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2102      	movs	r1, #2
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7fe fe33 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016d56:	4603      	mov	r3, r0
 8016d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d60:	fa93 f3a3 	rbit	r3, r3
 8016d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8016d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8016d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d101      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8016d78:	2320      	movs	r3, #32
 8016d7a:	e004      	b.n	8016d86 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8016d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d80:	fab3 f383 	clz	r3, r3
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	461a      	mov	r2, r3
 8016d88:	683b      	ldr	r3, [r7, #0]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d105      	bne.n	8016da0 <HAL_ADC_ConfigChannel+0x460>
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	0e9b      	lsrs	r3, r3, #26
 8016d9a:	f003 031f 	and.w	r3, r3, #31
 8016d9e:	e014      	b.n	8016dca <HAL_ADC_ConfigChannel+0x48a>
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016da8:	fa93 f3a3 	rbit	r3, r3
 8016dac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8016dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8016db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d101      	bne.n	8016dc0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8016dbc:	2320      	movs	r3, #32
 8016dbe:	e004      	b.n	8016dca <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8016dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016dc4:	fab3 f383 	clz	r3, r3
 8016dc8:	b2db      	uxtb	r3, r3
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d106      	bne.n	8016ddc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	2102      	movs	r1, #2
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7fe fe86 	bl	8015ae8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2103      	movs	r1, #3
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe fdea 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016de8:	4603      	mov	r3, r0
 8016dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d10a      	bne.n	8016e08 <HAL_ADC_ConfigChannel+0x4c8>
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2103      	movs	r1, #3
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fe fddf 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	0e9b      	lsrs	r3, r3, #26
 8016e02:	f003 021f 	and.w	r2, r3, #31
 8016e06:	e017      	b.n	8016e38 <HAL_ADC_ConfigChannel+0x4f8>
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2103      	movs	r1, #3
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7fe fdd4 	bl	80159bc <LL_ADC_GetOffsetChannel>
 8016e14:	4603      	mov	r3, r0
 8016e16:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e1a:	fa93 f3a3 	rbit	r3, r3
 8016e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8016e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e22:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8016e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d101      	bne.n	8016e2e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8016e2a:	2320      	movs	r3, #32
 8016e2c:	e003      	b.n	8016e36 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8016e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016e30:	fab3 f383 	clz	r3, r3
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	461a      	mov	r2, r3
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d105      	bne.n	8016e50 <HAL_ADC_ConfigChannel+0x510>
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	0e9b      	lsrs	r3, r3, #26
 8016e4a:	f003 031f 	and.w	r3, r3, #31
 8016e4e:	e011      	b.n	8016e74 <HAL_ADC_ConfigChannel+0x534>
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e58:	fa93 f3a3 	rbit	r3, r3
 8016e5c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8016e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e60:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8016e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d101      	bne.n	8016e6c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8016e68:	2320      	movs	r3, #32
 8016e6a:	e003      	b.n	8016e74 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8016e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016e6e:	fab3 f383 	clz	r3, r3
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d14f      	bne.n	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	2103      	movs	r1, #3
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7fe fe31 	bl	8015ae8 <LL_ADC_SetOffsetState>
 8016e86:	e047      	b.n	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	069b      	lsls	r3, r3, #26
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d107      	bne.n	8016eac <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016eaa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	069b      	lsls	r3, r3, #26
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d107      	bne.n	8016ed0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016ece:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	069b      	lsls	r3, r3, #26
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d107      	bne.n	8016ef4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016ef2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	069b      	lsls	r3, r3, #26
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d107      	bne.n	8016f18 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016f16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fe ff85 	bl	8015e2c <LL_ADC_IsEnabled>
 8016f22:	4603      	mov	r3, r0
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	f040 8219 	bne.w	801735c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6818      	ldr	r0, [r3, #0]
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	6819      	ldr	r1, [r3, #0]
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	68db      	ldr	r3, [r3, #12]
 8016f36:	461a      	mov	r2, r3
 8016f38:	f7fe feba 	bl	8015cb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	68db      	ldr	r3, [r3, #12]
 8016f40:	4aa1      	ldr	r2, [pc, #644]	; (80171c8 <HAL_ADC_ConfigChannel+0x888>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	f040 812e 	bne.w	80171a4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d10b      	bne.n	8016f70 <HAL_ADC_ConfigChannel+0x630>
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	0e9b      	lsrs	r3, r3, #26
 8016f5e:	3301      	adds	r3, #1
 8016f60:	f003 031f 	and.w	r3, r3, #31
 8016f64:	2b09      	cmp	r3, #9
 8016f66:	bf94      	ite	ls
 8016f68:	2301      	movls	r3, #1
 8016f6a:	2300      	movhi	r3, #0
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	e019      	b.n	8016fa4 <HAL_ADC_ConfigChannel+0x664>
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f78:	fa93 f3a3 	rbit	r3, r3
 8016f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8016f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8016f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d101      	bne.n	8016f8c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8016f88:	2320      	movs	r3, #32
 8016f8a:	e003      	b.n	8016f94 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8016f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f8e:	fab3 f383 	clz	r3, r3
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	3301      	adds	r3, #1
 8016f96:	f003 031f 	and.w	r3, r3, #31
 8016f9a:	2b09      	cmp	r3, #9
 8016f9c:	bf94      	ite	ls
 8016f9e:	2301      	movls	r3, #1
 8016fa0:	2300      	movhi	r3, #0
 8016fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d079      	beq.n	801709c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d107      	bne.n	8016fc4 <HAL_ADC_ConfigChannel+0x684>
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	0e9b      	lsrs	r3, r3, #26
 8016fba:	3301      	adds	r3, #1
 8016fbc:	069b      	lsls	r3, r3, #26
 8016fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016fc2:	e015      	b.n	8016ff0 <HAL_ADC_ConfigChannel+0x6b0>
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fcc:	fa93 f3a3 	rbit	r3, r3
 8016fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8016fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8016fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d101      	bne.n	8016fe0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8016fdc:	2320      	movs	r3, #32
 8016fde:	e003      	b.n	8016fe8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8016fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fe2:	fab3 f383 	clz	r3, r3
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	3301      	adds	r3, #1
 8016fea:	069b      	lsls	r3, r3, #26
 8016fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d109      	bne.n	8017010 <HAL_ADC_ConfigChannel+0x6d0>
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	0e9b      	lsrs	r3, r3, #26
 8017002:	3301      	adds	r3, #1
 8017004:	f003 031f 	and.w	r3, r3, #31
 8017008:	2101      	movs	r1, #1
 801700a:	fa01 f303 	lsl.w	r3, r1, r3
 801700e:	e017      	b.n	8017040 <HAL_ADC_ConfigChannel+0x700>
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017018:	fa93 f3a3 	rbit	r3, r3
 801701c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 801701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017020:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8017022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017024:	2b00      	cmp	r3, #0
 8017026:	d101      	bne.n	801702c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8017028:	2320      	movs	r3, #32
 801702a:	e003      	b.n	8017034 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 801702c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801702e:	fab3 f383 	clz	r3, r3
 8017032:	b2db      	uxtb	r3, r3
 8017034:	3301      	adds	r3, #1
 8017036:	f003 031f 	and.w	r3, r3, #31
 801703a:	2101      	movs	r1, #1
 801703c:	fa01 f303 	lsl.w	r3, r1, r3
 8017040:	ea42 0103 	orr.w	r1, r2, r3
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10a      	bne.n	8017066 <HAL_ADC_ConfigChannel+0x726>
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	0e9b      	lsrs	r3, r3, #26
 8017056:	3301      	adds	r3, #1
 8017058:	f003 021f 	and.w	r2, r3, #31
 801705c:	4613      	mov	r3, r2
 801705e:	005b      	lsls	r3, r3, #1
 8017060:	4413      	add	r3, r2
 8017062:	051b      	lsls	r3, r3, #20
 8017064:	e018      	b.n	8017098 <HAL_ADC_ConfigChannel+0x758>
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801706c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801706e:	fa93 f3a3 	rbit	r3, r3
 8017072:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8017074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017076:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8017078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801707a:	2b00      	cmp	r3, #0
 801707c:	d101      	bne.n	8017082 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 801707e:	2320      	movs	r3, #32
 8017080:	e003      	b.n	801708a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8017082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017084:	fab3 f383 	clz	r3, r3
 8017088:	b2db      	uxtb	r3, r3
 801708a:	3301      	adds	r3, #1
 801708c:	f003 021f 	and.w	r2, r3, #31
 8017090:	4613      	mov	r3, r2
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	4413      	add	r3, r2
 8017096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017098:	430b      	orrs	r3, r1
 801709a:	e07e      	b.n	801719a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d107      	bne.n	80170b8 <HAL_ADC_ConfigChannel+0x778>
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	0e9b      	lsrs	r3, r3, #26
 80170ae:	3301      	adds	r3, #1
 80170b0:	069b      	lsls	r3, r3, #26
 80170b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80170b6:	e015      	b.n	80170e4 <HAL_ADC_ConfigChannel+0x7a4>
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80170be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c0:	fa93 f3a3 	rbit	r3, r3
 80170c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80170c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80170ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d101      	bne.n	80170d4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80170d0:	2320      	movs	r3, #32
 80170d2:	e003      	b.n	80170dc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	fab3 f383 	clz	r3, r3
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	3301      	adds	r3, #1
 80170de:	069b      	lsls	r3, r3, #26
 80170e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d109      	bne.n	8017104 <HAL_ADC_ConfigChannel+0x7c4>
 80170f0:	683b      	ldr	r3, [r7, #0]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	0e9b      	lsrs	r3, r3, #26
 80170f6:	3301      	adds	r3, #1
 80170f8:	f003 031f 	and.w	r3, r3, #31
 80170fc:	2101      	movs	r1, #1
 80170fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017102:	e017      	b.n	8017134 <HAL_ADC_ConfigChannel+0x7f4>
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	fa93 f3a3 	rbit	r3, r3
 8017110:	61bb      	str	r3, [r7, #24]
  return result;
 8017112:	69bb      	ldr	r3, [r7, #24]
 8017114:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d101      	bne.n	8017120 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 801711c:	2320      	movs	r3, #32
 801711e:	e003      	b.n	8017128 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8017120:	6a3b      	ldr	r3, [r7, #32]
 8017122:	fab3 f383 	clz	r3, r3
 8017126:	b2db      	uxtb	r3, r3
 8017128:	3301      	adds	r3, #1
 801712a:	f003 031f 	and.w	r3, r3, #31
 801712e:	2101      	movs	r1, #1
 8017130:	fa01 f303 	lsl.w	r3, r1, r3
 8017134:	ea42 0103 	orr.w	r1, r2, r3
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017140:	2b00      	cmp	r3, #0
 8017142:	d10d      	bne.n	8017160 <HAL_ADC_ConfigChannel+0x820>
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	0e9b      	lsrs	r3, r3, #26
 801714a:	3301      	adds	r3, #1
 801714c:	f003 021f 	and.w	r2, r3, #31
 8017150:	4613      	mov	r3, r2
 8017152:	005b      	lsls	r3, r3, #1
 8017154:	4413      	add	r3, r2
 8017156:	3b1e      	subs	r3, #30
 8017158:	051b      	lsls	r3, r3, #20
 801715a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801715e:	e01b      	b.n	8017198 <HAL_ADC_ConfigChannel+0x858>
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	fa93 f3a3 	rbit	r3, r3
 801716c:	60fb      	str	r3, [r7, #12]
  return result;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d101      	bne.n	801717c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8017178:	2320      	movs	r3, #32
 801717a:	e003      	b.n	8017184 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	fab3 f383 	clz	r3, r3
 8017182:	b2db      	uxtb	r3, r3
 8017184:	3301      	adds	r3, #1
 8017186:	f003 021f 	and.w	r2, r3, #31
 801718a:	4613      	mov	r3, r2
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	4413      	add	r3, r2
 8017190:	3b1e      	subs	r3, #30
 8017192:	051b      	lsls	r3, r3, #20
 8017194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017198:	430b      	orrs	r3, r1
 801719a:	683a      	ldr	r2, [r7, #0]
 801719c:	6892      	ldr	r2, [r2, #8]
 801719e:	4619      	mov	r1, r3
 80171a0:	f7fe fd5b 	bl	8015c5a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f280 80d7 	bge.w	801735c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	4a06      	ldr	r2, [pc, #24]	; (80171cc <HAL_ADC_ConfigChannel+0x88c>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d004      	beq.n	80171c2 <HAL_ADC_ConfigChannel+0x882>
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	4a04      	ldr	r2, [pc, #16]	; (80171d0 <HAL_ADC_ConfigChannel+0x890>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d10a      	bne.n	80171d8 <HAL_ADC_ConfigChannel+0x898>
 80171c2:	4b04      	ldr	r3, [pc, #16]	; (80171d4 <HAL_ADC_ConfigChannel+0x894>)
 80171c4:	e009      	b.n	80171da <HAL_ADC_ConfigChannel+0x89a>
 80171c6:	bf00      	nop
 80171c8:	47ff0000 	.word	0x47ff0000
 80171cc:	40022000 	.word	0x40022000
 80171d0:	40022100 	.word	0x40022100
 80171d4:	40022300 	.word	0x40022300
 80171d8:	4b65      	ldr	r3, [pc, #404]	; (8017370 <HAL_ADC_ConfigChannel+0xa30>)
 80171da:	4618      	mov	r0, r3
 80171dc:	f7fe fbae 	bl	801593c <LL_ADC_GetCommonPathInternalCh>
 80171e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	4a62      	ldr	r2, [pc, #392]	; (8017374 <HAL_ADC_ConfigChannel+0xa34>)
 80171ea:	4293      	cmp	r3, r2
 80171ec:	d004      	beq.n	80171f8 <HAL_ADC_ConfigChannel+0x8b8>
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	4a61      	ldr	r2, [pc, #388]	; (8017378 <HAL_ADC_ConfigChannel+0xa38>)
 80171f4:	4293      	cmp	r3, r2
 80171f6:	d10e      	bne.n	8017216 <HAL_ADC_ConfigChannel+0x8d6>
 80171f8:	485e      	ldr	r0, [pc, #376]	; (8017374 <HAL_ADC_ConfigChannel+0xa34>)
 80171fa:	f7fe fe17 	bl	8015e2c <LL_ADC_IsEnabled>
 80171fe:	4604      	mov	r4, r0
 8017200:	485d      	ldr	r0, [pc, #372]	; (8017378 <HAL_ADC_ConfigChannel+0xa38>)
 8017202:	f7fe fe13 	bl	8015e2c <LL_ADC_IsEnabled>
 8017206:	4603      	mov	r3, r0
 8017208:	4323      	orrs	r3, r4
 801720a:	2b00      	cmp	r3, #0
 801720c:	bf0c      	ite	eq
 801720e:	2301      	moveq	r3, #1
 8017210:	2300      	movne	r3, #0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	e008      	b.n	8017228 <HAL_ADC_ConfigChannel+0x8e8>
 8017216:	4859      	ldr	r0, [pc, #356]	; (801737c <HAL_ADC_ConfigChannel+0xa3c>)
 8017218:	f7fe fe08 	bl	8015e2c <LL_ADC_IsEnabled>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	bf0c      	ite	eq
 8017222:	2301      	moveq	r3, #1
 8017224:	2300      	movne	r3, #0
 8017226:	b2db      	uxtb	r3, r3
 8017228:	2b00      	cmp	r3, #0
 801722a:	f000 8084 	beq.w	8017336 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	4a53      	ldr	r2, [pc, #332]	; (8017380 <HAL_ADC_ConfigChannel+0xa40>)
 8017234:	4293      	cmp	r3, r2
 8017236:	d132      	bne.n	801729e <HAL_ADC_ConfigChannel+0x95e>
 8017238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801723c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017240:	2b00      	cmp	r3, #0
 8017242:	d12c      	bne.n	801729e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	4a4c      	ldr	r2, [pc, #304]	; (801737c <HAL_ADC_ConfigChannel+0xa3c>)
 801724a:	4293      	cmp	r3, r2
 801724c:	f040 8086 	bne.w	801735c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	4a47      	ldr	r2, [pc, #284]	; (8017374 <HAL_ADC_ConfigChannel+0xa34>)
 8017256:	4293      	cmp	r3, r2
 8017258:	d004      	beq.n	8017264 <HAL_ADC_ConfigChannel+0x924>
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	4a46      	ldr	r2, [pc, #280]	; (8017378 <HAL_ADC_ConfigChannel+0xa38>)
 8017260:	4293      	cmp	r3, r2
 8017262:	d101      	bne.n	8017268 <HAL_ADC_ConfigChannel+0x928>
 8017264:	4a47      	ldr	r2, [pc, #284]	; (8017384 <HAL_ADC_ConfigChannel+0xa44>)
 8017266:	e000      	b.n	801726a <HAL_ADC_ConfigChannel+0x92a>
 8017268:	4a41      	ldr	r2, [pc, #260]	; (8017370 <HAL_ADC_ConfigChannel+0xa30>)
 801726a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801726e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017272:	4619      	mov	r1, r3
 8017274:	4610      	mov	r0, r2
 8017276:	f7fe fb4e 	bl	8015916 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801727a:	4b43      	ldr	r3, [pc, #268]	; (8017388 <HAL_ADC_ConfigChannel+0xa48>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	099b      	lsrs	r3, r3, #6
 8017280:	4a42      	ldr	r2, [pc, #264]	; (801738c <HAL_ADC_ConfigChannel+0xa4c>)
 8017282:	fba2 2303 	umull	r2, r3, r2, r3
 8017286:	099b      	lsrs	r3, r3, #6
 8017288:	3301      	adds	r3, #1
 801728a:	005b      	lsls	r3, r3, #1
 801728c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 801728e:	e002      	b.n	8017296 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	3b01      	subs	r3, #1
 8017294:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d1f9      	bne.n	8017290 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801729c:	e05e      	b.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	4a3b      	ldr	r2, [pc, #236]	; (8017390 <HAL_ADC_ConfigChannel+0xa50>)
 80172a4:	4293      	cmp	r3, r2
 80172a6:	d120      	bne.n	80172ea <HAL_ADC_ConfigChannel+0x9aa>
 80172a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80172ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d11a      	bne.n	80172ea <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	4a30      	ldr	r2, [pc, #192]	; (801737c <HAL_ADC_ConfigChannel+0xa3c>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d14e      	bne.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	4a2c      	ldr	r2, [pc, #176]	; (8017374 <HAL_ADC_ConfigChannel+0xa34>)
 80172c4:	4293      	cmp	r3, r2
 80172c6:	d004      	beq.n	80172d2 <HAL_ADC_ConfigChannel+0x992>
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	4a2a      	ldr	r2, [pc, #168]	; (8017378 <HAL_ADC_ConfigChannel+0xa38>)
 80172ce:	4293      	cmp	r3, r2
 80172d0:	d101      	bne.n	80172d6 <HAL_ADC_ConfigChannel+0x996>
 80172d2:	4a2c      	ldr	r2, [pc, #176]	; (8017384 <HAL_ADC_ConfigChannel+0xa44>)
 80172d4:	e000      	b.n	80172d8 <HAL_ADC_ConfigChannel+0x998>
 80172d6:	4a26      	ldr	r2, [pc, #152]	; (8017370 <HAL_ADC_ConfigChannel+0xa30>)
 80172d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80172dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80172e0:	4619      	mov	r1, r3
 80172e2:	4610      	mov	r0, r2
 80172e4:	f7fe fb17 	bl	8015916 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80172e8:	e038      	b.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	4a29      	ldr	r2, [pc, #164]	; (8017394 <HAL_ADC_ConfigChannel+0xa54>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d133      	bne.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
 80172f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80172f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d12d      	bne.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4a1d      	ldr	r2, [pc, #116]	; (801737c <HAL_ADC_ConfigChannel+0xa3c>)
 8017306:	4293      	cmp	r3, r2
 8017308:	d128      	bne.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	4a19      	ldr	r2, [pc, #100]	; (8017374 <HAL_ADC_ConfigChannel+0xa34>)
 8017310:	4293      	cmp	r3, r2
 8017312:	d004      	beq.n	801731e <HAL_ADC_ConfigChannel+0x9de>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	4a17      	ldr	r2, [pc, #92]	; (8017378 <HAL_ADC_ConfigChannel+0xa38>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d101      	bne.n	8017322 <HAL_ADC_ConfigChannel+0x9e2>
 801731e:	4a19      	ldr	r2, [pc, #100]	; (8017384 <HAL_ADC_ConfigChannel+0xa44>)
 8017320:	e000      	b.n	8017324 <HAL_ADC_ConfigChannel+0x9e4>
 8017322:	4a13      	ldr	r2, [pc, #76]	; (8017370 <HAL_ADC_ConfigChannel+0xa30>)
 8017324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801732c:	4619      	mov	r1, r3
 801732e:	4610      	mov	r0, r2
 8017330:	f7fe faf1 	bl	8015916 <LL_ADC_SetCommonPathInternalCh>
 8017334:	e012      	b.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801733a:	f043 0220 	orr.w	r2, r3, #32
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8017342:	2301      	movs	r3, #1
 8017344:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017348:	e008      	b.n	801735c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801734e:	f043 0220 	orr.w	r2, r3, #32
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017356:	2301      	movs	r3, #1
 8017358:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2200      	movs	r2, #0
 8017360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017364:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8017368:	4618      	mov	r0, r3
 801736a:	37e4      	adds	r7, #228	; 0xe4
 801736c:	46bd      	mov	sp, r7
 801736e:	bd90      	pop	{r4, r7, pc}
 8017370:	58026300 	.word	0x58026300
 8017374:	40022000 	.word	0x40022000
 8017378:	40022100 	.word	0x40022100
 801737c:	58026000 	.word	0x58026000
 8017380:	c7520000 	.word	0xc7520000
 8017384:	40022300 	.word	0x40022300
 8017388:	24000004 	.word	0x24000004
 801738c:	053e2d63 	.word	0x053e2d63
 8017390:	c3210000 	.word	0xc3210000
 8017394:	cb840000 	.word	0xcb840000

08017398 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b084      	sub	sp, #16
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7fe fd41 	bl	8015e2c <LL_ADC_IsEnabled>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d16e      	bne.n	801748e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	689a      	ldr	r2, [r3, #8]
 80173b6:	4b38      	ldr	r3, [pc, #224]	; (8017498 <ADC_Enable+0x100>)
 80173b8:	4013      	ands	r3, r2
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d00d      	beq.n	80173da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80173c2:	f043 0210 	orr.w	r2, r3, #16
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80173ce:	f043 0201 	orr.w	r2, r3, #1
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80173d6:	2301      	movs	r3, #1
 80173d8:	e05a      	b.n	8017490 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7fe fd10 	bl	8015e04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80173e4:	f7fe fa78 	bl	80158d8 <HAL_GetTick>
 80173e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	4a2b      	ldr	r2, [pc, #172]	; (801749c <ADC_Enable+0x104>)
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d004      	beq.n	80173fe <ADC_Enable+0x66>
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	4a29      	ldr	r2, [pc, #164]	; (80174a0 <ADC_Enable+0x108>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d101      	bne.n	8017402 <ADC_Enable+0x6a>
 80173fe:	4b29      	ldr	r3, [pc, #164]	; (80174a4 <ADC_Enable+0x10c>)
 8017400:	e000      	b.n	8017404 <ADC_Enable+0x6c>
 8017402:	4b29      	ldr	r3, [pc, #164]	; (80174a8 <ADC_Enable+0x110>)
 8017404:	4618      	mov	r0, r3
 8017406:	f7fe fc93 	bl	8015d30 <LL_ADC_GetMultimode>
 801740a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	4a23      	ldr	r2, [pc, #140]	; (80174a0 <ADC_Enable+0x108>)
 8017412:	4293      	cmp	r3, r2
 8017414:	d002      	beq.n	801741c <ADC_Enable+0x84>
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	e000      	b.n	801741e <ADC_Enable+0x86>
 801741c:	4b1f      	ldr	r3, [pc, #124]	; (801749c <ADC_Enable+0x104>)
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	6812      	ldr	r2, [r2, #0]
 8017422:	4293      	cmp	r3, r2
 8017424:	d02c      	beq.n	8017480 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d130      	bne.n	801748e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801742c:	e028      	b.n	8017480 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	4618      	mov	r0, r3
 8017434:	f7fe fcfa 	bl	8015e2c <LL_ADC_IsEnabled>
 8017438:	4603      	mov	r3, r0
 801743a:	2b00      	cmp	r3, #0
 801743c:	d104      	bne.n	8017448 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	4618      	mov	r0, r3
 8017444:	f7fe fcde 	bl	8015e04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8017448:	f7fe fa46 	bl	80158d8 <HAL_GetTick>
 801744c:	4602      	mov	r2, r0
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	1ad3      	subs	r3, r2, r3
 8017452:	2b02      	cmp	r3, #2
 8017454:	d914      	bls.n	8017480 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f003 0301 	and.w	r3, r3, #1
 8017460:	2b01      	cmp	r3, #1
 8017462:	d00d      	beq.n	8017480 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017468:	f043 0210 	orr.w	r2, r3, #16
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017474:	f043 0201 	orr.w	r2, r3, #1
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 801747c:	2301      	movs	r3, #1
 801747e:	e007      	b.n	8017490 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	f003 0301 	and.w	r3, r3, #1
 801748a:	2b01      	cmp	r3, #1
 801748c:	d1cf      	bne.n	801742e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801748e:	2300      	movs	r3, #0
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	8000003f 	.word	0x8000003f
 801749c:	40022000 	.word	0x40022000
 80174a0:	40022100 	.word	0x40022100
 80174a4:	40022300 	.word	0x40022300
 80174a8:	58026300 	.word	0x58026300

080174ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d14b      	bne.n	801755e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	f003 0308 	and.w	r3, r3, #8
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d021      	beq.n	8017524 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7fe fb29 	bl	8015b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d032      	beq.n	8017556 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	68db      	ldr	r3, [r3, #12]
 80174f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d12b      	bne.n	8017556 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801750e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017512:	2b00      	cmp	r3, #0
 8017514:	d11f      	bne.n	8017556 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801751a:	f043 0201 	orr.w	r2, r3, #1
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	661a      	str	r2, [r3, #96]	; 0x60
 8017522:	e018      	b.n	8017556 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	68db      	ldr	r3, [r3, #12]
 801752a:	f003 0303 	and.w	r3, r3, #3
 801752e:	2b00      	cmp	r3, #0
 8017530:	d111      	bne.n	8017556 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801754e:	f043 0201 	orr.w	r2, r3, #1
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8017556:	68f8      	ldr	r0, [r7, #12]
 8017558:	f7f6 ff4d 	bl	800e3f6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801755c:	e00e      	b.n	801757c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017562:	f003 0310 	and.w	r3, r3, #16
 8017566:	2b00      	cmp	r3, #0
 8017568:	d003      	beq.n	8017572 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801756a:	68f8      	ldr	r0, [r7, #12]
 801756c:	f7ff f9de 	bl	801692c <HAL_ADC_ErrorCallback>
}
 8017570:	e004      	b.n	801757c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	4798      	blx	r3
}
 801757c:	bf00      	nop
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017590:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f7ff f9b6 	bl	8016904 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017598:	bf00      	nop
 801759a:	3710      	adds	r7, #16
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80175be:	f043 0204 	orr.w	r2, r3, #4
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80175c6:	68f8      	ldr	r0, [r7, #12]
 80175c8:	f7ff f9b0 	bl	801692c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80175cc:	bf00      	nop
 80175ce:	3710      	adds	r7, #16
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	4a6c      	ldr	r2, [pc, #432]	; (8017794 <ADC_ConfigureBoostMode+0x1c0>)
 80175e2:	4293      	cmp	r3, r2
 80175e4:	d004      	beq.n	80175f0 <ADC_ConfigureBoostMode+0x1c>
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	4a6b      	ldr	r2, [pc, #428]	; (8017798 <ADC_ConfigureBoostMode+0x1c4>)
 80175ec:	4293      	cmp	r3, r2
 80175ee:	d109      	bne.n	8017604 <ADC_ConfigureBoostMode+0x30>
 80175f0:	4b6a      	ldr	r3, [pc, #424]	; (801779c <ADC_ConfigureBoostMode+0x1c8>)
 80175f2:	689b      	ldr	r3, [r3, #8]
 80175f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	bf14      	ite	ne
 80175fc:	2301      	movne	r3, #1
 80175fe:	2300      	moveq	r3, #0
 8017600:	b2db      	uxtb	r3, r3
 8017602:	e008      	b.n	8017616 <ADC_ConfigureBoostMode+0x42>
 8017604:	4b66      	ldr	r3, [pc, #408]	; (80177a0 <ADC_ConfigureBoostMode+0x1cc>)
 8017606:	689b      	ldr	r3, [r3, #8]
 8017608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801760c:	2b00      	cmp	r3, #0
 801760e:	bf14      	ite	ne
 8017610:	2301      	movne	r3, #1
 8017612:	2300      	moveq	r3, #0
 8017614:	b2db      	uxtb	r3, r3
 8017616:	2b00      	cmp	r3, #0
 8017618:	d01c      	beq.n	8017654 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 801761a:	f004 fe7b 	bl	801c314 <HAL_RCC_GetHCLKFreq>
 801761e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017628:	d010      	beq.n	801764c <ADC_ConfigureBoostMode+0x78>
 801762a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801762e:	d873      	bhi.n	8017718 <ADC_ConfigureBoostMode+0x144>
 8017630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017634:	d002      	beq.n	801763c <ADC_ConfigureBoostMode+0x68>
 8017636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801763a:	d16d      	bne.n	8017718 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	0c1b      	lsrs	r3, r3, #16
 8017642:	68fa      	ldr	r2, [r7, #12]
 8017644:	fbb2 f3f3 	udiv	r3, r2, r3
 8017648:	60fb      	str	r3, [r7, #12]
        break;
 801764a:	e068      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	089b      	lsrs	r3, r3, #2
 8017650:	60fb      	str	r3, [r7, #12]
        break;
 8017652:	e064      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8017654:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017658:	f04f 0100 	mov.w	r1, #0
 801765c:	f006 f840 	bl	801d6e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8017660:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 801766a:	d051      	beq.n	8017710 <ADC_ConfigureBoostMode+0x13c>
 801766c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017670:	d854      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 8017672:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017676:	d047      	beq.n	8017708 <ADC_ConfigureBoostMode+0x134>
 8017678:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 801767c:	d84e      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 801767e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017682:	d03d      	beq.n	8017700 <ADC_ConfigureBoostMode+0x12c>
 8017684:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017688:	d848      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 801768a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801768e:	d033      	beq.n	80176f8 <ADC_ConfigureBoostMode+0x124>
 8017690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017694:	d842      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 8017696:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 801769a:	d029      	beq.n	80176f0 <ADC_ConfigureBoostMode+0x11c>
 801769c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80176a0:	d83c      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 80176a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80176a6:	d01a      	beq.n	80176de <ADC_ConfigureBoostMode+0x10a>
 80176a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80176ac:	d836      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 80176ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80176b2:	d014      	beq.n	80176de <ADC_ConfigureBoostMode+0x10a>
 80176b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80176b8:	d830      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 80176ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80176be:	d00e      	beq.n	80176de <ADC_ConfigureBoostMode+0x10a>
 80176c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80176c4:	d82a      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 80176c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80176ca:	d008      	beq.n	80176de <ADC_ConfigureBoostMode+0x10a>
 80176cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80176d0:	d824      	bhi.n	801771c <ADC_ConfigureBoostMode+0x148>
 80176d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80176d6:	d002      	beq.n	80176de <ADC_ConfigureBoostMode+0x10a>
 80176d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80176dc:	d11e      	bne.n	801771c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	685b      	ldr	r3, [r3, #4]
 80176e2:	0c9b      	lsrs	r3, r3, #18
 80176e4:	005b      	lsls	r3, r3, #1
 80176e6:	68fa      	ldr	r2, [r7, #12]
 80176e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80176ec:	60fb      	str	r3, [r7, #12]
        break;
 80176ee:	e016      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	091b      	lsrs	r3, r3, #4
 80176f4:	60fb      	str	r3, [r7, #12]
        break;
 80176f6:	e012      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	095b      	lsrs	r3, r3, #5
 80176fc:	60fb      	str	r3, [r7, #12]
        break;
 80176fe:	e00e      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	099b      	lsrs	r3, r3, #6
 8017704:	60fb      	str	r3, [r7, #12]
        break;
 8017706:	e00a      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	09db      	lsrs	r3, r3, #7
 801770c:	60fb      	str	r3, [r7, #12]
        break;
 801770e:	e006      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	0a1b      	lsrs	r3, r3, #8
 8017714:	60fb      	str	r3, [r7, #12]
        break;
 8017716:	e002      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
        break;
 8017718:	bf00      	nop
 801771a:	e000      	b.n	801771e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 801771c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	085b      	lsrs	r3, r3, #1
 8017722:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	4a1f      	ldr	r2, [pc, #124]	; (80177a4 <ADC_ConfigureBoostMode+0x1d0>)
 8017728:	4293      	cmp	r3, r2
 801772a:	d808      	bhi.n	801773e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	689a      	ldr	r2, [r3, #8]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801773a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 801773c:	e025      	b.n	801778a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	4a19      	ldr	r2, [pc, #100]	; (80177a8 <ADC_ConfigureBoostMode+0x1d4>)
 8017742:	4293      	cmp	r3, r2
 8017744:	d80a      	bhi.n	801775c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	689b      	ldr	r3, [r3, #8]
 801774c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017758:	609a      	str	r2, [r3, #8]
}
 801775a:	e016      	b.n	801778a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	4a13      	ldr	r2, [pc, #76]	; (80177ac <ADC_ConfigureBoostMode+0x1d8>)
 8017760:	4293      	cmp	r3, r2
 8017762:	d80a      	bhi.n	801777a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	689b      	ldr	r3, [r3, #8]
 801776a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017776:	609a      	str	r2, [r3, #8]
}
 8017778:	e007      	b.n	801778a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	689a      	ldr	r2, [r3, #8]
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017788:	609a      	str	r2, [r3, #8]
}
 801778a:	bf00      	nop
 801778c:	3710      	adds	r7, #16
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	40022000 	.word	0x40022000
 8017798:	40022100 	.word	0x40022100
 801779c:	40022300 	.word	0x40022300
 80177a0:	58026300 	.word	0x58026300
 80177a4:	005f5e10 	.word	0x005f5e10
 80177a8:	00bebc20 	.word	0x00bebc20
 80177ac:	017d7840 	.word	0x017d7840

080177b0 <LL_ADC_IsEnabled>:
{
 80177b0:	b480      	push	{r7}
 80177b2:	b083      	sub	sp, #12
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	689b      	ldr	r3, [r3, #8]
 80177bc:	f003 0301 	and.w	r3, r3, #1
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	d101      	bne.n	80177c8 <LL_ADC_IsEnabled+0x18>
 80177c4:	2301      	movs	r3, #1
 80177c6:	e000      	b.n	80177ca <LL_ADC_IsEnabled+0x1a>
 80177c8:	2300      	movs	r3, #0
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	370c      	adds	r7, #12
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80177d6:	b480      	push	{r7}
 80177d8:	b083      	sub	sp, #12
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	689b      	ldr	r3, [r3, #8]
 80177e2:	f003 0304 	and.w	r3, r3, #4
 80177e6:	2b04      	cmp	r3, #4
 80177e8:	d101      	bne.n	80177ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80177ea:	2301      	movs	r3, #1
 80177ec:	e000      	b.n	80177f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80177ee:	2300      	movs	r3, #0
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	370c      	adds	r7, #12
 80177f4:	46bd      	mov	sp, r7
 80177f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fa:	4770      	bx	lr

080177fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80177fc:	b480      	push	{r7}
 80177fe:	b083      	sub	sp, #12
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8017804:	bf00      	nop
 8017806:	370c      	adds	r7, #12
 8017808:	46bd      	mov	sp, r7
 801780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780e:	4770      	bx	lr

08017810 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8017810:	b480      	push	{r7}
 8017812:	b083      	sub	sp, #12
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8017818:	bf00      	nop
 801781a:	370c      	adds	r7, #12
 801781c:	46bd      	mov	sp, r7
 801781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017822:	4770      	bx	lr

08017824 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8017824:	b480      	push	{r7}
 8017826:	b083      	sub	sp, #12
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801782c:	bf00      	nop
 801782e:	370c      	adds	r7, #12
 8017830:	46bd      	mov	sp, r7
 8017832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017836:	4770      	bx	lr

08017838 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8017838:	b480      	push	{r7}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8017840:	bf00      	nop
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr

0801784c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801784c:	b480      	push	{r7}
 801784e:	b083      	sub	sp, #12
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8017854:	bf00      	nop
 8017856:	370c      	adds	r7, #12
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr

08017860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8017860:	b590      	push	{r4, r7, lr}
 8017862:	b0a3      	sub	sp, #140	; 0x8c
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801786a:	2300      	movs	r3, #0
 801786c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017876:	2b01      	cmp	r3, #1
 8017878:	d101      	bne.n	801787e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801787a:	2302      	movs	r3, #2
 801787c:	e0c1      	b.n	8017a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	2201      	movs	r2, #1
 8017882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8017886:	2300      	movs	r3, #0
 8017888:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 801788a:	2300      	movs	r3, #0
 801788c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	4a5e      	ldr	r2, [pc, #376]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017894:	4293      	cmp	r3, r2
 8017896:	d102      	bne.n	801789e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8017898:	4b5d      	ldr	r3, [pc, #372]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801789a:	60fb      	str	r3, [r7, #12]
 801789c:	e001      	b.n	80178a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801789e:	2300      	movs	r3, #0
 80178a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d10b      	bne.n	80178c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80178ac:	f043 0220 	orr.w	r2, r3, #32
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2200      	movs	r2, #0
 80178b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80178bc:	2301      	movs	r3, #1
 80178be:	e0a0      	b.n	8017a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7ff ff87 	bl	80177d6 <LL_ADC_REG_IsConversionOngoing>
 80178c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7ff ff80 	bl	80177d6 <LL_ADC_REG_IsConversionOngoing>
 80178d6:	4603      	mov	r3, r0
 80178d8:	2b00      	cmp	r3, #0
 80178da:	f040 8081 	bne.w	80179e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80178de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d17c      	bne.n	80179e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	4a48      	ldr	r2, [pc, #288]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d004      	beq.n	80178fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a46      	ldr	r2, [pc, #280]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d101      	bne.n	80178fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80178fa:	4b46      	ldr	r3, [pc, #280]	; (8017a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80178fc:	e000      	b.n	8017900 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80178fe:	4b46      	ldr	r3, [pc, #280]	; (8017a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8017900:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d039      	beq.n	801797e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 801790a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801790c:	689b      	ldr	r3, [r3, #8]
 801790e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	431a      	orrs	r2, r3
 8017918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801791a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	4a3a      	ldr	r2, [pc, #232]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017922:	4293      	cmp	r3, r2
 8017924:	d004      	beq.n	8017930 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4a39      	ldr	r2, [pc, #228]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801792c:	4293      	cmp	r3, r2
 801792e:	d10e      	bne.n	801794e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8017930:	4836      	ldr	r0, [pc, #216]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017932:	f7ff ff3d 	bl	80177b0 <LL_ADC_IsEnabled>
 8017936:	4604      	mov	r4, r0
 8017938:	4835      	ldr	r0, [pc, #212]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801793a:	f7ff ff39 	bl	80177b0 <LL_ADC_IsEnabled>
 801793e:	4603      	mov	r3, r0
 8017940:	4323      	orrs	r3, r4
 8017942:	2b00      	cmp	r3, #0
 8017944:	bf0c      	ite	eq
 8017946:	2301      	moveq	r3, #1
 8017948:	2300      	movne	r3, #0
 801794a:	b2db      	uxtb	r3, r3
 801794c:	e008      	b.n	8017960 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 801794e:	4833      	ldr	r0, [pc, #204]	; (8017a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017950:	f7ff ff2e 	bl	80177b0 <LL_ADC_IsEnabled>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	bf0c      	ite	eq
 801795a:	2301      	moveq	r3, #1
 801795c:	2300      	movne	r3, #0
 801795e:	b2db      	uxtb	r3, r3
 8017960:	2b00      	cmp	r3, #0
 8017962:	d047      	beq.n	80179f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8017964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017966:	689a      	ldr	r2, [r3, #8]
 8017968:	4b2d      	ldr	r3, [pc, #180]	; (8017a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801796a:	4013      	ands	r3, r2
 801796c:	683a      	ldr	r2, [r7, #0]
 801796e:	6811      	ldr	r1, [r2, #0]
 8017970:	683a      	ldr	r2, [r7, #0]
 8017972:	6892      	ldr	r2, [r2, #8]
 8017974:	430a      	orrs	r2, r1
 8017976:	431a      	orrs	r2, r3
 8017978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801797a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801797c:	e03a      	b.n	80179f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 801797e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017980:	689b      	ldr	r3, [r3, #8]
 8017982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017988:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	4a1f      	ldr	r2, [pc, #124]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017990:	4293      	cmp	r3, r2
 8017992:	d004      	beq.n	801799e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	4a1d      	ldr	r2, [pc, #116]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801799a:	4293      	cmp	r3, r2
 801799c:	d10e      	bne.n	80179bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 801799e:	481b      	ldr	r0, [pc, #108]	; (8017a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80179a0:	f7ff ff06 	bl	80177b0 <LL_ADC_IsEnabled>
 80179a4:	4604      	mov	r4, r0
 80179a6:	481a      	ldr	r0, [pc, #104]	; (8017a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80179a8:	f7ff ff02 	bl	80177b0 <LL_ADC_IsEnabled>
 80179ac:	4603      	mov	r3, r0
 80179ae:	4323      	orrs	r3, r4
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	bf0c      	ite	eq
 80179b4:	2301      	moveq	r3, #1
 80179b6:	2300      	movne	r3, #0
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	e008      	b.n	80179ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80179bc:	4817      	ldr	r0, [pc, #92]	; (8017a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80179be:	f7ff fef7 	bl	80177b0 <LL_ADC_IsEnabled>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	bf0c      	ite	eq
 80179c8:	2301      	moveq	r3, #1
 80179ca:	2300      	movne	r3, #0
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d010      	beq.n	80179f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80179d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80179d4:	689a      	ldr	r2, [r3, #8]
 80179d6:	4b12      	ldr	r3, [pc, #72]	; (8017a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80179d8:	4013      	ands	r3, r2
 80179da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80179dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80179de:	e009      	b.n	80179f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80179e4:	f043 0220 	orr.w	r2, r3, #32
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80179ec:	2301      	movs	r3, #1
 80179ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80179f2:	e000      	b.n	80179f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80179f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2200      	movs	r2, #0
 80179fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80179fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	378c      	adds	r7, #140	; 0x8c
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd90      	pop	{r4, r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	40022000 	.word	0x40022000
 8017a10:	40022100 	.word	0x40022100
 8017a14:	40022300 	.word	0x40022300
 8017a18:	58026300 	.word	0x58026300
 8017a1c:	58026000 	.word	0x58026000
 8017a20:	fffff0e0 	.word	0xfffff0e0

08017a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f003 0307 	and.w	r3, r3, #7
 8017a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017a34:	4b0b      	ldr	r3, [pc, #44]	; (8017a64 <__NVIC_SetPriorityGrouping+0x40>)
 8017a36:	68db      	ldr	r3, [r3, #12]
 8017a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017a3a:	68ba      	ldr	r2, [r7, #8]
 8017a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017a40:	4013      	ands	r3, r2
 8017a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8017a4c:	4b06      	ldr	r3, [pc, #24]	; (8017a68 <__NVIC_SetPriorityGrouping+0x44>)
 8017a4e:	4313      	orrs	r3, r2
 8017a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017a52:	4a04      	ldr	r2, [pc, #16]	; (8017a64 <__NVIC_SetPriorityGrouping+0x40>)
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	60d3      	str	r3, [r2, #12]
}
 8017a58:	bf00      	nop
 8017a5a:	3714      	adds	r7, #20
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a62:	4770      	bx	lr
 8017a64:	e000ed00 	.word	0xe000ed00
 8017a68:	05fa0000 	.word	0x05fa0000

08017a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017a70:	4b04      	ldr	r3, [pc, #16]	; (8017a84 <__NVIC_GetPriorityGrouping+0x18>)
 8017a72:	68db      	ldr	r3, [r3, #12]
 8017a74:	0a1b      	lsrs	r3, r3, #8
 8017a76:	f003 0307 	and.w	r3, r3, #7
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a82:	4770      	bx	lr
 8017a84:	e000ed00 	.word	0xe000ed00

08017a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017a88:	b480      	push	{r7}
 8017a8a:	b083      	sub	sp, #12
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	4603      	mov	r3, r0
 8017a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	db0b      	blt.n	8017ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017a9a:	88fb      	ldrh	r3, [r7, #6]
 8017a9c:	f003 021f 	and.w	r2, r3, #31
 8017aa0:	4907      	ldr	r1, [pc, #28]	; (8017ac0 <__NVIC_EnableIRQ+0x38>)
 8017aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017aa6:	095b      	lsrs	r3, r3, #5
 8017aa8:	2001      	movs	r0, #1
 8017aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8017aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8017ab2:	bf00      	nop
 8017ab4:	370c      	adds	r7, #12
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abc:	4770      	bx	lr
 8017abe:	bf00      	nop
 8017ac0:	e000e100 	.word	0xe000e100

08017ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	b083      	sub	sp, #12
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	4603      	mov	r3, r0
 8017acc:	6039      	str	r1, [r7, #0]
 8017ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	db0a      	blt.n	8017aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017ad8:	683b      	ldr	r3, [r7, #0]
 8017ada:	b2da      	uxtb	r2, r3
 8017adc:	490c      	ldr	r1, [pc, #48]	; (8017b10 <__NVIC_SetPriority+0x4c>)
 8017ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017ae2:	0112      	lsls	r2, r2, #4
 8017ae4:	b2d2      	uxtb	r2, r2
 8017ae6:	440b      	add	r3, r1
 8017ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8017aec:	e00a      	b.n	8017b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	b2da      	uxtb	r2, r3
 8017af2:	4908      	ldr	r1, [pc, #32]	; (8017b14 <__NVIC_SetPriority+0x50>)
 8017af4:	88fb      	ldrh	r3, [r7, #6]
 8017af6:	f003 030f 	and.w	r3, r3, #15
 8017afa:	3b04      	subs	r3, #4
 8017afc:	0112      	lsls	r2, r2, #4
 8017afe:	b2d2      	uxtb	r2, r2
 8017b00:	440b      	add	r3, r1
 8017b02:	761a      	strb	r2, [r3, #24]
}
 8017b04:	bf00      	nop
 8017b06:	370c      	adds	r7, #12
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr
 8017b10:	e000e100 	.word	0xe000e100
 8017b14:	e000ed00 	.word	0xe000ed00

08017b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017b18:	b480      	push	{r7}
 8017b1a:	b089      	sub	sp, #36	; 0x24
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	60f8      	str	r0, [r7, #12]
 8017b20:	60b9      	str	r1, [r7, #8]
 8017b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	f003 0307 	and.w	r3, r3, #7
 8017b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017b2c:	69fb      	ldr	r3, [r7, #28]
 8017b2e:	f1c3 0307 	rsb	r3, r3, #7
 8017b32:	2b04      	cmp	r3, #4
 8017b34:	bf28      	it	cs
 8017b36:	2304      	movcs	r3, #4
 8017b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	2b06      	cmp	r3, #6
 8017b40:	d902      	bls.n	8017b48 <NVIC_EncodePriority+0x30>
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	3b03      	subs	r3, #3
 8017b46:	e000      	b.n	8017b4a <NVIC_EncodePriority+0x32>
 8017b48:	2300      	movs	r3, #0
 8017b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b50:	69bb      	ldr	r3, [r7, #24]
 8017b52:	fa02 f303 	lsl.w	r3, r2, r3
 8017b56:	43da      	mvns	r2, r3
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	401a      	ands	r2, r3
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017b64:	697b      	ldr	r3, [r7, #20]
 8017b66:	fa01 f303 	lsl.w	r3, r1, r3
 8017b6a:	43d9      	mvns	r1, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017b70:	4313      	orrs	r3, r2
         );
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	3724      	adds	r7, #36	; 0x24
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr
	...

08017b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	3b01      	subs	r3, #1
 8017b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017b90:	d301      	bcc.n	8017b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017b92:	2301      	movs	r3, #1
 8017b94:	e00f      	b.n	8017bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017b96:	4a0a      	ldr	r2, [pc, #40]	; (8017bc0 <SysTick_Config+0x40>)
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	3b01      	subs	r3, #1
 8017b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017b9e:	210f      	movs	r1, #15
 8017ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ba4:	f7ff ff8e 	bl	8017ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017ba8:	4b05      	ldr	r3, [pc, #20]	; (8017bc0 <SysTick_Config+0x40>)
 8017baa:	2200      	movs	r2, #0
 8017bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017bae:	4b04      	ldr	r3, [pc, #16]	; (8017bc0 <SysTick_Config+0x40>)
 8017bb0:	2207      	movs	r2, #7
 8017bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017bb4:	2300      	movs	r3, #0
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3708      	adds	r7, #8
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	e000e010 	.word	0xe000e010

08017bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f7ff ff29 	bl	8017a24 <__NVIC_SetPriorityGrouping>
}
 8017bd2:	bf00      	nop
 8017bd4:	3708      	adds	r7, #8
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bd80      	pop	{r7, pc}

08017bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017bda:	b580      	push	{r7, lr}
 8017bdc:	b086      	sub	sp, #24
 8017bde:	af00      	add	r7, sp, #0
 8017be0:	4603      	mov	r3, r0
 8017be2:	60b9      	str	r1, [r7, #8]
 8017be4:	607a      	str	r2, [r7, #4]
 8017be6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8017be8:	f7ff ff40 	bl	8017a6c <__NVIC_GetPriorityGrouping>
 8017bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	68b9      	ldr	r1, [r7, #8]
 8017bf2:	6978      	ldr	r0, [r7, #20]
 8017bf4:	f7ff ff90 	bl	8017b18 <NVIC_EncodePriority>
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017bfe:	4611      	mov	r1, r2
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7ff ff5f 	bl	8017ac4 <__NVIC_SetPriority>
}
 8017c06:	bf00      	nop
 8017c08:	3718      	adds	r7, #24
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b082      	sub	sp, #8
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	4603      	mov	r3, r0
 8017c16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ff ff33 	bl	8017a88 <__NVIC_EnableIRQ>
}
 8017c22:	bf00      	nop
 8017c24:	3708      	adds	r7, #8
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b082      	sub	sp, #8
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7ff ffa4 	bl	8017b80 <SysTick_Config>
 8017c38:	4603      	mov	r3, r0
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
	...

08017c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b086      	sub	sp, #24
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8017c4c:	f7fd fe44 	bl	80158d8 <HAL_GetTick>
 8017c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d101      	bne.n	8017c5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8017c58:	2301      	movs	r3, #1
 8017c5a:	e314      	b.n	8018286 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	4a66      	ldr	r2, [pc, #408]	; (8017dfc <HAL_DMA_Init+0x1b8>)
 8017c62:	4293      	cmp	r3, r2
 8017c64:	d04a      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	4a65      	ldr	r2, [pc, #404]	; (8017e00 <HAL_DMA_Init+0x1bc>)
 8017c6c:	4293      	cmp	r3, r2
 8017c6e:	d045      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4a63      	ldr	r2, [pc, #396]	; (8017e04 <HAL_DMA_Init+0x1c0>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d040      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4a62      	ldr	r2, [pc, #392]	; (8017e08 <HAL_DMA_Init+0x1c4>)
 8017c80:	4293      	cmp	r3, r2
 8017c82:	d03b      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4a60      	ldr	r2, [pc, #384]	; (8017e0c <HAL_DMA_Init+0x1c8>)
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d036      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	4a5f      	ldr	r2, [pc, #380]	; (8017e10 <HAL_DMA_Init+0x1cc>)
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d031      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4a5d      	ldr	r2, [pc, #372]	; (8017e14 <HAL_DMA_Init+0x1d0>)
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d02c      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	4a5c      	ldr	r2, [pc, #368]	; (8017e18 <HAL_DMA_Init+0x1d4>)
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	d027      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4a5a      	ldr	r2, [pc, #360]	; (8017e1c <HAL_DMA_Init+0x1d8>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d022      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a59      	ldr	r2, [pc, #356]	; (8017e20 <HAL_DMA_Init+0x1dc>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d01d      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a57      	ldr	r2, [pc, #348]	; (8017e24 <HAL_DMA_Init+0x1e0>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d018      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a56      	ldr	r2, [pc, #344]	; (8017e28 <HAL_DMA_Init+0x1e4>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d013      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	4a54      	ldr	r2, [pc, #336]	; (8017e2c <HAL_DMA_Init+0x1e8>)
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	d00e      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a53      	ldr	r2, [pc, #332]	; (8017e30 <HAL_DMA_Init+0x1ec>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d009      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4a51      	ldr	r2, [pc, #324]	; (8017e34 <HAL_DMA_Init+0x1f0>)
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d004      	beq.n	8017cfc <HAL_DMA_Init+0xb8>
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4a50      	ldr	r2, [pc, #320]	; (8017e38 <HAL_DMA_Init+0x1f4>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d101      	bne.n	8017d00 <HAL_DMA_Init+0xbc>
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	e000      	b.n	8017d02 <HAL_DMA_Init+0xbe>
 8017d00:	2300      	movs	r3, #0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	f000 813c 	beq.w	8017f80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2202      	movs	r2, #2
 8017d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2200      	movs	r2, #0
 8017d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4a37      	ldr	r2, [pc, #220]	; (8017dfc <HAL_DMA_Init+0x1b8>)
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	d04a      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	4a36      	ldr	r2, [pc, #216]	; (8017e00 <HAL_DMA_Init+0x1bc>)
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d045      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a34      	ldr	r2, [pc, #208]	; (8017e04 <HAL_DMA_Init+0x1c0>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d040      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4a33      	ldr	r2, [pc, #204]	; (8017e08 <HAL_DMA_Init+0x1c4>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d03b      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a31      	ldr	r2, [pc, #196]	; (8017e0c <HAL_DMA_Init+0x1c8>)
 8017d46:	4293      	cmp	r3, r2
 8017d48:	d036      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4a30      	ldr	r2, [pc, #192]	; (8017e10 <HAL_DMA_Init+0x1cc>)
 8017d50:	4293      	cmp	r3, r2
 8017d52:	d031      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4a2e      	ldr	r2, [pc, #184]	; (8017e14 <HAL_DMA_Init+0x1d0>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d02c      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	4a2d      	ldr	r2, [pc, #180]	; (8017e18 <HAL_DMA_Init+0x1d4>)
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d027      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	4a2b      	ldr	r2, [pc, #172]	; (8017e1c <HAL_DMA_Init+0x1d8>)
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d022      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4a2a      	ldr	r2, [pc, #168]	; (8017e20 <HAL_DMA_Init+0x1dc>)
 8017d78:	4293      	cmp	r3, r2
 8017d7a:	d01d      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a28      	ldr	r2, [pc, #160]	; (8017e24 <HAL_DMA_Init+0x1e0>)
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d018      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a27      	ldr	r2, [pc, #156]	; (8017e28 <HAL_DMA_Init+0x1e4>)
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d013      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4a25      	ldr	r2, [pc, #148]	; (8017e2c <HAL_DMA_Init+0x1e8>)
 8017d96:	4293      	cmp	r3, r2
 8017d98:	d00e      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4a24      	ldr	r2, [pc, #144]	; (8017e30 <HAL_DMA_Init+0x1ec>)
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d009      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a22      	ldr	r2, [pc, #136]	; (8017e34 <HAL_DMA_Init+0x1f0>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d004      	beq.n	8017db8 <HAL_DMA_Init+0x174>
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4a21      	ldr	r2, [pc, #132]	; (8017e38 <HAL_DMA_Init+0x1f4>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d108      	bne.n	8017dca <HAL_DMA_Init+0x186>
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	681a      	ldr	r2, [r3, #0]
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	f022 0201 	bic.w	r2, r2, #1
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	e007      	b.n	8017dda <HAL_DMA_Init+0x196>
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	681a      	ldr	r2, [r3, #0]
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f022 0201 	bic.w	r2, r2, #1
 8017dd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017dda:	e02f      	b.n	8017e3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017ddc:	f7fd fd7c 	bl	80158d8 <HAL_GetTick>
 8017de0:	4602      	mov	r2, r0
 8017de2:	693b      	ldr	r3, [r7, #16]
 8017de4:	1ad3      	subs	r3, r2, r3
 8017de6:	2b05      	cmp	r3, #5
 8017de8:	d928      	bls.n	8017e3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2220      	movs	r2, #32
 8017dee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2203      	movs	r2, #3
 8017df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	e244      	b.n	8018286 <HAL_DMA_Init+0x642>
 8017dfc:	40020010 	.word	0x40020010
 8017e00:	40020028 	.word	0x40020028
 8017e04:	40020040 	.word	0x40020040
 8017e08:	40020058 	.word	0x40020058
 8017e0c:	40020070 	.word	0x40020070
 8017e10:	40020088 	.word	0x40020088
 8017e14:	400200a0 	.word	0x400200a0
 8017e18:	400200b8 	.word	0x400200b8
 8017e1c:	40020410 	.word	0x40020410
 8017e20:	40020428 	.word	0x40020428
 8017e24:	40020440 	.word	0x40020440
 8017e28:	40020458 	.word	0x40020458
 8017e2c:	40020470 	.word	0x40020470
 8017e30:	40020488 	.word	0x40020488
 8017e34:	400204a0 	.word	0x400204a0
 8017e38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	f003 0301 	and.w	r3, r3, #1
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d1c8      	bne.n	8017ddc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	4b84      	ldr	r3, [pc, #528]	; (8018068 <HAL_DMA_Init+0x424>)
 8017e56:	4013      	ands	r3, r2
 8017e58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8017e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	691b      	ldr	r3, [r3, #16]
 8017e68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6a1b      	ldr	r3, [r3, #32]
 8017e80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8017e82:	697a      	ldr	r2, [r7, #20]
 8017e84:	4313      	orrs	r3, r2
 8017e86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e8c:	2b04      	cmp	r3, #4
 8017e8e:	d107      	bne.n	8017ea0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	697a      	ldr	r2, [r7, #20]
 8017e9c:	4313      	orrs	r3, r2
 8017e9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	2b28      	cmp	r3, #40	; 0x28
 8017ea6:	d903      	bls.n	8017eb0 <HAL_DMA_Init+0x26c>
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	2b2e      	cmp	r3, #46	; 0x2e
 8017eae:	d91f      	bls.n	8017ef0 <HAL_DMA_Init+0x2ac>
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8017eb6:	d903      	bls.n	8017ec0 <HAL_DMA_Init+0x27c>
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	2b42      	cmp	r3, #66	; 0x42
 8017ebe:	d917      	bls.n	8017ef0 <HAL_DMA_Init+0x2ac>
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	2b46      	cmp	r3, #70	; 0x46
 8017ec6:	d903      	bls.n	8017ed0 <HAL_DMA_Init+0x28c>
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	2b48      	cmp	r3, #72	; 0x48
 8017ece:	d90f      	bls.n	8017ef0 <HAL_DMA_Init+0x2ac>
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	2b4e      	cmp	r3, #78	; 0x4e
 8017ed6:	d903      	bls.n	8017ee0 <HAL_DMA_Init+0x29c>
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	2b52      	cmp	r3, #82	; 0x52
 8017ede:	d907      	bls.n	8017ef0 <HAL_DMA_Init+0x2ac>
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	2b73      	cmp	r3, #115	; 0x73
 8017ee6:	d905      	bls.n	8017ef4 <HAL_DMA_Init+0x2b0>
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	2b77      	cmp	r3, #119	; 0x77
 8017eee:	d801      	bhi.n	8017ef4 <HAL_DMA_Init+0x2b0>
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	e000      	b.n	8017ef6 <HAL_DMA_Init+0x2b2>
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d003      	beq.n	8017f02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	697a      	ldr	r2, [r7, #20]
 8017f08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	695b      	ldr	r3, [r3, #20]
 8017f10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	f023 0307 	bic.w	r3, r3, #7
 8017f18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f1e:	697a      	ldr	r2, [r7, #20]
 8017f20:	4313      	orrs	r3, r2
 8017f22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f28:	2b04      	cmp	r3, #4
 8017f2a:	d117      	bne.n	8017f5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f30:	697a      	ldr	r2, [r7, #20]
 8017f32:	4313      	orrs	r3, r2
 8017f34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d00e      	beq.n	8017f5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f001 fdcc 	bl	8019adc <DMA_CheckFifoParam>
 8017f44:	4603      	mov	r3, r0
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d008      	beq.n	8017f5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2240      	movs	r2, #64	; 0x40
 8017f4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2201      	movs	r2, #1
 8017f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8017f58:	2301      	movs	r3, #1
 8017f5a:	e194      	b.n	8018286 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f001 fd07 	bl	8019978 <DMA_CalcBaseAndBitshift>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f72:	f003 031f 	and.w	r3, r3, #31
 8017f76:	223f      	movs	r2, #63	; 0x3f
 8017f78:	409a      	lsls	r2, r3
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	609a      	str	r2, [r3, #8]
 8017f7e:	e0ca      	b.n	8018116 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	4a39      	ldr	r2, [pc, #228]	; (801806c <HAL_DMA_Init+0x428>)
 8017f86:	4293      	cmp	r3, r2
 8017f88:	d022      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	4a38      	ldr	r2, [pc, #224]	; (8018070 <HAL_DMA_Init+0x42c>)
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d01d      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4a36      	ldr	r2, [pc, #216]	; (8018074 <HAL_DMA_Init+0x430>)
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d018      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	4a35      	ldr	r2, [pc, #212]	; (8018078 <HAL_DMA_Init+0x434>)
 8017fa4:	4293      	cmp	r3, r2
 8017fa6:	d013      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	4a33      	ldr	r2, [pc, #204]	; (801807c <HAL_DMA_Init+0x438>)
 8017fae:	4293      	cmp	r3, r2
 8017fb0:	d00e      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	4a32      	ldr	r2, [pc, #200]	; (8018080 <HAL_DMA_Init+0x43c>)
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	d009      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	4a30      	ldr	r2, [pc, #192]	; (8018084 <HAL_DMA_Init+0x440>)
 8017fc2:	4293      	cmp	r3, r2
 8017fc4:	d004      	beq.n	8017fd0 <HAL_DMA_Init+0x38c>
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	4a2f      	ldr	r2, [pc, #188]	; (8018088 <HAL_DMA_Init+0x444>)
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d101      	bne.n	8017fd4 <HAL_DMA_Init+0x390>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e000      	b.n	8017fd6 <HAL_DMA_Init+0x392>
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	f000 8094 	beq.w	8018104 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	4a22      	ldr	r2, [pc, #136]	; (801806c <HAL_DMA_Init+0x428>)
 8017fe2:	4293      	cmp	r3, r2
 8017fe4:	d021      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4a21      	ldr	r2, [pc, #132]	; (8018070 <HAL_DMA_Init+0x42c>)
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d01c      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	4a1f      	ldr	r2, [pc, #124]	; (8018074 <HAL_DMA_Init+0x430>)
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d017      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	4a1e      	ldr	r2, [pc, #120]	; (8018078 <HAL_DMA_Init+0x434>)
 8018000:	4293      	cmp	r3, r2
 8018002:	d012      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	4a1c      	ldr	r2, [pc, #112]	; (801807c <HAL_DMA_Init+0x438>)
 801800a:	4293      	cmp	r3, r2
 801800c:	d00d      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	4a1b      	ldr	r2, [pc, #108]	; (8018080 <HAL_DMA_Init+0x43c>)
 8018014:	4293      	cmp	r3, r2
 8018016:	d008      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	4a19      	ldr	r2, [pc, #100]	; (8018084 <HAL_DMA_Init+0x440>)
 801801e:	4293      	cmp	r3, r2
 8018020:	d003      	beq.n	801802a <HAL_DMA_Init+0x3e6>
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	4a18      	ldr	r2, [pc, #96]	; (8018088 <HAL_DMA_Init+0x444>)
 8018028:	4293      	cmp	r3, r2
 801802a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2202      	movs	r2, #2
 8018030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2200      	movs	r2, #0
 8018038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8018044:	697a      	ldr	r2, [r7, #20]
 8018046:	4b11      	ldr	r3, [pc, #68]	; (801808c <HAL_DMA_Init+0x448>)
 8018048:	4013      	ands	r3, r2
 801804a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	689b      	ldr	r3, [r3, #8]
 8018050:	2b40      	cmp	r3, #64	; 0x40
 8018052:	d01d      	beq.n	8018090 <HAL_DMA_Init+0x44c>
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	689b      	ldr	r3, [r3, #8]
 8018058:	2b80      	cmp	r3, #128	; 0x80
 801805a:	d102      	bne.n	8018062 <HAL_DMA_Init+0x41e>
 801805c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018060:	e017      	b.n	8018092 <HAL_DMA_Init+0x44e>
 8018062:	2300      	movs	r3, #0
 8018064:	e015      	b.n	8018092 <HAL_DMA_Init+0x44e>
 8018066:	bf00      	nop
 8018068:	fe10803f 	.word	0xfe10803f
 801806c:	58025408 	.word	0x58025408
 8018070:	5802541c 	.word	0x5802541c
 8018074:	58025430 	.word	0x58025430
 8018078:	58025444 	.word	0x58025444
 801807c:	58025458 	.word	0x58025458
 8018080:	5802546c 	.word	0x5802546c
 8018084:	58025480 	.word	0x58025480
 8018088:	58025494 	.word	0x58025494
 801808c:	fffe000f 	.word	0xfffe000f
 8018090:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	68d2      	ldr	r2, [r2, #12]
 8018096:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018098:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	691b      	ldr	r3, [r3, #16]
 801809e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80180a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	695b      	ldr	r3, [r3, #20]
 80180a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80180a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	699b      	ldr	r3, [r3, #24]
 80180ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80180b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	69db      	ldr	r3, [r3, #28]
 80180b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80180b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6a1b      	ldr	r3, [r3, #32]
 80180be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80180c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80180c2:	697a      	ldr	r2, [r7, #20]
 80180c4:	4313      	orrs	r3, r2
 80180c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	697a      	ldr	r2, [r7, #20]
 80180ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	461a      	mov	r2, r3
 80180d6:	4b6e      	ldr	r3, [pc, #440]	; (8018290 <HAL_DMA_Init+0x64c>)
 80180d8:	4413      	add	r3, r2
 80180da:	4a6e      	ldr	r2, [pc, #440]	; (8018294 <HAL_DMA_Init+0x650>)
 80180dc:	fba2 2303 	umull	r2, r3, r2, r3
 80180e0:	091b      	lsrs	r3, r3, #4
 80180e2:	009a      	lsls	r2, r3, #2
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f001 fc45 	bl	8019978 <DMA_CalcBaseAndBitshift>
 80180ee:	4603      	mov	r3, r0
 80180f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180f6:	f003 031f 	and.w	r3, r3, #31
 80180fa:	2201      	movs	r2, #1
 80180fc:	409a      	lsls	r2, r3
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	605a      	str	r2, [r3, #4]
 8018102:	e008      	b.n	8018116 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	2240      	movs	r2, #64	; 0x40
 8018108:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2203      	movs	r2, #3
 801810e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8018112:	2301      	movs	r3, #1
 8018114:	e0b7      	b.n	8018286 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4a5f      	ldr	r2, [pc, #380]	; (8018298 <HAL_DMA_Init+0x654>)
 801811c:	4293      	cmp	r3, r2
 801811e:	d072      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	4a5d      	ldr	r2, [pc, #372]	; (801829c <HAL_DMA_Init+0x658>)
 8018126:	4293      	cmp	r3, r2
 8018128:	d06d      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	4a5c      	ldr	r2, [pc, #368]	; (80182a0 <HAL_DMA_Init+0x65c>)
 8018130:	4293      	cmp	r3, r2
 8018132:	d068      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	4a5a      	ldr	r2, [pc, #360]	; (80182a4 <HAL_DMA_Init+0x660>)
 801813a:	4293      	cmp	r3, r2
 801813c:	d063      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	4a59      	ldr	r2, [pc, #356]	; (80182a8 <HAL_DMA_Init+0x664>)
 8018144:	4293      	cmp	r3, r2
 8018146:	d05e      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	4a57      	ldr	r2, [pc, #348]	; (80182ac <HAL_DMA_Init+0x668>)
 801814e:	4293      	cmp	r3, r2
 8018150:	d059      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	4a56      	ldr	r2, [pc, #344]	; (80182b0 <HAL_DMA_Init+0x66c>)
 8018158:	4293      	cmp	r3, r2
 801815a:	d054      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a54      	ldr	r2, [pc, #336]	; (80182b4 <HAL_DMA_Init+0x670>)
 8018162:	4293      	cmp	r3, r2
 8018164:	d04f      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	4a53      	ldr	r2, [pc, #332]	; (80182b8 <HAL_DMA_Init+0x674>)
 801816c:	4293      	cmp	r3, r2
 801816e:	d04a      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4a51      	ldr	r2, [pc, #324]	; (80182bc <HAL_DMA_Init+0x678>)
 8018176:	4293      	cmp	r3, r2
 8018178:	d045      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	4a50      	ldr	r2, [pc, #320]	; (80182c0 <HAL_DMA_Init+0x67c>)
 8018180:	4293      	cmp	r3, r2
 8018182:	d040      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4a4e      	ldr	r2, [pc, #312]	; (80182c4 <HAL_DMA_Init+0x680>)
 801818a:	4293      	cmp	r3, r2
 801818c:	d03b      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	4a4d      	ldr	r2, [pc, #308]	; (80182c8 <HAL_DMA_Init+0x684>)
 8018194:	4293      	cmp	r3, r2
 8018196:	d036      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	4a4b      	ldr	r2, [pc, #300]	; (80182cc <HAL_DMA_Init+0x688>)
 801819e:	4293      	cmp	r3, r2
 80181a0:	d031      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4a4a      	ldr	r2, [pc, #296]	; (80182d0 <HAL_DMA_Init+0x68c>)
 80181a8:	4293      	cmp	r3, r2
 80181aa:	d02c      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	4a48      	ldr	r2, [pc, #288]	; (80182d4 <HAL_DMA_Init+0x690>)
 80181b2:	4293      	cmp	r3, r2
 80181b4:	d027      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	4a47      	ldr	r2, [pc, #284]	; (80182d8 <HAL_DMA_Init+0x694>)
 80181bc:	4293      	cmp	r3, r2
 80181be:	d022      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	4a45      	ldr	r2, [pc, #276]	; (80182dc <HAL_DMA_Init+0x698>)
 80181c6:	4293      	cmp	r3, r2
 80181c8:	d01d      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	4a44      	ldr	r2, [pc, #272]	; (80182e0 <HAL_DMA_Init+0x69c>)
 80181d0:	4293      	cmp	r3, r2
 80181d2:	d018      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4a42      	ldr	r2, [pc, #264]	; (80182e4 <HAL_DMA_Init+0x6a0>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	d013      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	4a41      	ldr	r2, [pc, #260]	; (80182e8 <HAL_DMA_Init+0x6a4>)
 80181e4:	4293      	cmp	r3, r2
 80181e6:	d00e      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	4a3f      	ldr	r2, [pc, #252]	; (80182ec <HAL_DMA_Init+0x6a8>)
 80181ee:	4293      	cmp	r3, r2
 80181f0:	d009      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	4a3e      	ldr	r2, [pc, #248]	; (80182f0 <HAL_DMA_Init+0x6ac>)
 80181f8:	4293      	cmp	r3, r2
 80181fa:	d004      	beq.n	8018206 <HAL_DMA_Init+0x5c2>
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	4a3c      	ldr	r2, [pc, #240]	; (80182f4 <HAL_DMA_Init+0x6b0>)
 8018202:	4293      	cmp	r3, r2
 8018204:	d101      	bne.n	801820a <HAL_DMA_Init+0x5c6>
 8018206:	2301      	movs	r3, #1
 8018208:	e000      	b.n	801820c <HAL_DMA_Init+0x5c8>
 801820a:	2300      	movs	r3, #0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d032      	beq.n	8018276 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f001 fcdf 	bl	8019bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	689b      	ldr	r3, [r3, #8]
 801821a:	2b80      	cmp	r3, #128	; 0x80
 801821c:	d102      	bne.n	8018224 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	2200      	movs	r2, #0
 8018222:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	685a      	ldr	r2, [r3, #4]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801822c:	b2d2      	uxtb	r2, r2
 801822e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8018238:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d010      	beq.n	8018264 <HAL_DMA_Init+0x620>
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	2b08      	cmp	r3, #8
 8018248:	d80c      	bhi.n	8018264 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801824a:	6878      	ldr	r0, [r7, #4]
 801824c:	f001 fd5c 	bl	8019d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018254:	2200      	movs	r2, #0
 8018256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801825c:	687a      	ldr	r2, [r7, #4]
 801825e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8018260:	605a      	str	r2, [r3, #4]
 8018262:	e008      	b.n	8018276 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	2200      	movs	r2, #0
 8018268:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2200      	movs	r2, #0
 801826e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2200      	movs	r2, #0
 8018274:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2200      	movs	r2, #0
 801827a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2201      	movs	r2, #1
 8018280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018284:	2300      	movs	r3, #0
}
 8018286:	4618      	mov	r0, r3
 8018288:	3718      	adds	r7, #24
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	a7fdabf8 	.word	0xa7fdabf8
 8018294:	cccccccd 	.word	0xcccccccd
 8018298:	40020010 	.word	0x40020010
 801829c:	40020028 	.word	0x40020028
 80182a0:	40020040 	.word	0x40020040
 80182a4:	40020058 	.word	0x40020058
 80182a8:	40020070 	.word	0x40020070
 80182ac:	40020088 	.word	0x40020088
 80182b0:	400200a0 	.word	0x400200a0
 80182b4:	400200b8 	.word	0x400200b8
 80182b8:	40020410 	.word	0x40020410
 80182bc:	40020428 	.word	0x40020428
 80182c0:	40020440 	.word	0x40020440
 80182c4:	40020458 	.word	0x40020458
 80182c8:	40020470 	.word	0x40020470
 80182cc:	40020488 	.word	0x40020488
 80182d0:	400204a0 	.word	0x400204a0
 80182d4:	400204b8 	.word	0x400204b8
 80182d8:	58025408 	.word	0x58025408
 80182dc:	5802541c 	.word	0x5802541c
 80182e0:	58025430 	.word	0x58025430
 80182e4:	58025444 	.word	0x58025444
 80182e8:	58025458 	.word	0x58025458
 80182ec:	5802546c 	.word	0x5802546c
 80182f0:	58025480 	.word	0x58025480
 80182f4:	58025494 	.word	0x58025494

080182f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b086      	sub	sp, #24
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	60f8      	str	r0, [r7, #12]
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	607a      	str	r2, [r7, #4]
 8018304:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018306:	2300      	movs	r3, #0
 8018308:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d101      	bne.n	8018314 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8018310:	2301      	movs	r3, #1
 8018312:	e226      	b.n	8018762 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801831a:	2b01      	cmp	r3, #1
 801831c:	d101      	bne.n	8018322 <HAL_DMA_Start_IT+0x2a>
 801831e:	2302      	movs	r3, #2
 8018320:	e21f      	b.n	8018762 <HAL_DMA_Start_IT+0x46a>
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2201      	movs	r2, #1
 8018326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018330:	b2db      	uxtb	r3, r3
 8018332:	2b01      	cmp	r3, #1
 8018334:	f040 820a 	bne.w	801874c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2202      	movs	r2, #2
 801833c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	2200      	movs	r2, #0
 8018344:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4a68      	ldr	r2, [pc, #416]	; (80184ec <HAL_DMA_Start_IT+0x1f4>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d04a      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a66      	ldr	r2, [pc, #408]	; (80184f0 <HAL_DMA_Start_IT+0x1f8>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d045      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4a65      	ldr	r2, [pc, #404]	; (80184f4 <HAL_DMA_Start_IT+0x1fc>)
 8018360:	4293      	cmp	r3, r2
 8018362:	d040      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a63      	ldr	r2, [pc, #396]	; (80184f8 <HAL_DMA_Start_IT+0x200>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d03b      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a62      	ldr	r2, [pc, #392]	; (80184fc <HAL_DMA_Start_IT+0x204>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d036      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a60      	ldr	r2, [pc, #384]	; (8018500 <HAL_DMA_Start_IT+0x208>)
 801837e:	4293      	cmp	r3, r2
 8018380:	d031      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4a5f      	ldr	r2, [pc, #380]	; (8018504 <HAL_DMA_Start_IT+0x20c>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d02c      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4a5d      	ldr	r2, [pc, #372]	; (8018508 <HAL_DMA_Start_IT+0x210>)
 8018392:	4293      	cmp	r3, r2
 8018394:	d027      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a5c      	ldr	r2, [pc, #368]	; (801850c <HAL_DMA_Start_IT+0x214>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d022      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a5a      	ldr	r2, [pc, #360]	; (8018510 <HAL_DMA_Start_IT+0x218>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d01d      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a59      	ldr	r2, [pc, #356]	; (8018514 <HAL_DMA_Start_IT+0x21c>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d018      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4a57      	ldr	r2, [pc, #348]	; (8018518 <HAL_DMA_Start_IT+0x220>)
 80183ba:	4293      	cmp	r3, r2
 80183bc:	d013      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	4a56      	ldr	r2, [pc, #344]	; (801851c <HAL_DMA_Start_IT+0x224>)
 80183c4:	4293      	cmp	r3, r2
 80183c6:	d00e      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	4a54      	ldr	r2, [pc, #336]	; (8018520 <HAL_DMA_Start_IT+0x228>)
 80183ce:	4293      	cmp	r3, r2
 80183d0:	d009      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	4a53      	ldr	r2, [pc, #332]	; (8018524 <HAL_DMA_Start_IT+0x22c>)
 80183d8:	4293      	cmp	r3, r2
 80183da:	d004      	beq.n	80183e6 <HAL_DMA_Start_IT+0xee>
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	4a51      	ldr	r2, [pc, #324]	; (8018528 <HAL_DMA_Start_IT+0x230>)
 80183e2:	4293      	cmp	r3, r2
 80183e4:	d108      	bne.n	80183f8 <HAL_DMA_Start_IT+0x100>
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	f022 0201 	bic.w	r2, r2, #1
 80183f4:	601a      	str	r2, [r3, #0]
 80183f6:	e007      	b.n	8018408 <HAL_DMA_Start_IT+0x110>
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	f022 0201 	bic.w	r2, r2, #1
 8018406:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	687a      	ldr	r2, [r7, #4]
 801840c:	68b9      	ldr	r1, [r7, #8]
 801840e:	68f8      	ldr	r0, [r7, #12]
 8018410:	f001 f906 	bl	8019620 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a34      	ldr	r2, [pc, #208]	; (80184ec <HAL_DMA_Start_IT+0x1f4>)
 801841a:	4293      	cmp	r3, r2
 801841c:	d04a      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	4a33      	ldr	r2, [pc, #204]	; (80184f0 <HAL_DMA_Start_IT+0x1f8>)
 8018424:	4293      	cmp	r3, r2
 8018426:	d045      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	4a31      	ldr	r2, [pc, #196]	; (80184f4 <HAL_DMA_Start_IT+0x1fc>)
 801842e:	4293      	cmp	r3, r2
 8018430:	d040      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	4a30      	ldr	r2, [pc, #192]	; (80184f8 <HAL_DMA_Start_IT+0x200>)
 8018438:	4293      	cmp	r3, r2
 801843a:	d03b      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	4a2e      	ldr	r2, [pc, #184]	; (80184fc <HAL_DMA_Start_IT+0x204>)
 8018442:	4293      	cmp	r3, r2
 8018444:	d036      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	4a2d      	ldr	r2, [pc, #180]	; (8018500 <HAL_DMA_Start_IT+0x208>)
 801844c:	4293      	cmp	r3, r2
 801844e:	d031      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	4a2b      	ldr	r2, [pc, #172]	; (8018504 <HAL_DMA_Start_IT+0x20c>)
 8018456:	4293      	cmp	r3, r2
 8018458:	d02c      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4a2a      	ldr	r2, [pc, #168]	; (8018508 <HAL_DMA_Start_IT+0x210>)
 8018460:	4293      	cmp	r3, r2
 8018462:	d027      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	4a28      	ldr	r2, [pc, #160]	; (801850c <HAL_DMA_Start_IT+0x214>)
 801846a:	4293      	cmp	r3, r2
 801846c:	d022      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	4a27      	ldr	r2, [pc, #156]	; (8018510 <HAL_DMA_Start_IT+0x218>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d01d      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	4a25      	ldr	r2, [pc, #148]	; (8018514 <HAL_DMA_Start_IT+0x21c>)
 801847e:	4293      	cmp	r3, r2
 8018480:	d018      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4a24      	ldr	r2, [pc, #144]	; (8018518 <HAL_DMA_Start_IT+0x220>)
 8018488:	4293      	cmp	r3, r2
 801848a:	d013      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4a22      	ldr	r2, [pc, #136]	; (801851c <HAL_DMA_Start_IT+0x224>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d00e      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	4a21      	ldr	r2, [pc, #132]	; (8018520 <HAL_DMA_Start_IT+0x228>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d009      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a1f      	ldr	r2, [pc, #124]	; (8018524 <HAL_DMA_Start_IT+0x22c>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d004      	beq.n	80184b4 <HAL_DMA_Start_IT+0x1bc>
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	4a1e      	ldr	r2, [pc, #120]	; (8018528 <HAL_DMA_Start_IT+0x230>)
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d101      	bne.n	80184b8 <HAL_DMA_Start_IT+0x1c0>
 80184b4:	2301      	movs	r3, #1
 80184b6:	e000      	b.n	80184ba <HAL_DMA_Start_IT+0x1c2>
 80184b8:	2300      	movs	r3, #0
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d036      	beq.n	801852c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	f023 021e 	bic.w	r2, r3, #30
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	f042 0216 	orr.w	r2, r2, #22
 80184d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d03e      	beq.n	8018558 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	681a      	ldr	r2, [r3, #0]
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f042 0208 	orr.w	r2, r2, #8
 80184e8:	601a      	str	r2, [r3, #0]
 80184ea:	e035      	b.n	8018558 <HAL_DMA_Start_IT+0x260>
 80184ec:	40020010 	.word	0x40020010
 80184f0:	40020028 	.word	0x40020028
 80184f4:	40020040 	.word	0x40020040
 80184f8:	40020058 	.word	0x40020058
 80184fc:	40020070 	.word	0x40020070
 8018500:	40020088 	.word	0x40020088
 8018504:	400200a0 	.word	0x400200a0
 8018508:	400200b8 	.word	0x400200b8
 801850c:	40020410 	.word	0x40020410
 8018510:	40020428 	.word	0x40020428
 8018514:	40020440 	.word	0x40020440
 8018518:	40020458 	.word	0x40020458
 801851c:	40020470 	.word	0x40020470
 8018520:	40020488 	.word	0x40020488
 8018524:	400204a0 	.word	0x400204a0
 8018528:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	f023 020e 	bic.w	r2, r3, #14
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	f042 020a 	orr.w	r2, r2, #10
 801853e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018544:	2b00      	cmp	r3, #0
 8018546:	d007      	beq.n	8018558 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	681a      	ldr	r2, [r3, #0]
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	f042 0204 	orr.w	r2, r2, #4
 8018556:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a83      	ldr	r2, [pc, #524]	; (801876c <HAL_DMA_Start_IT+0x474>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d072      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	4a82      	ldr	r2, [pc, #520]	; (8018770 <HAL_DMA_Start_IT+0x478>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d06d      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a80      	ldr	r2, [pc, #512]	; (8018774 <HAL_DMA_Start_IT+0x47c>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d068      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a7f      	ldr	r2, [pc, #508]	; (8018778 <HAL_DMA_Start_IT+0x480>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d063      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a7d      	ldr	r2, [pc, #500]	; (801877c <HAL_DMA_Start_IT+0x484>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d05e      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a7c      	ldr	r2, [pc, #496]	; (8018780 <HAL_DMA_Start_IT+0x488>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d059      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a7a      	ldr	r2, [pc, #488]	; (8018784 <HAL_DMA_Start_IT+0x48c>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d054      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4a79      	ldr	r2, [pc, #484]	; (8018788 <HAL_DMA_Start_IT+0x490>)
 80185a4:	4293      	cmp	r3, r2
 80185a6:	d04f      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4a77      	ldr	r2, [pc, #476]	; (801878c <HAL_DMA_Start_IT+0x494>)
 80185ae:	4293      	cmp	r3, r2
 80185b0:	d04a      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a76      	ldr	r2, [pc, #472]	; (8018790 <HAL_DMA_Start_IT+0x498>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d045      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a74      	ldr	r2, [pc, #464]	; (8018794 <HAL_DMA_Start_IT+0x49c>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d040      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a73      	ldr	r2, [pc, #460]	; (8018798 <HAL_DMA_Start_IT+0x4a0>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d03b      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	4a71      	ldr	r2, [pc, #452]	; (801879c <HAL_DMA_Start_IT+0x4a4>)
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d036      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	4a70      	ldr	r2, [pc, #448]	; (80187a0 <HAL_DMA_Start_IT+0x4a8>)
 80185e0:	4293      	cmp	r3, r2
 80185e2:	d031      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	4a6e      	ldr	r2, [pc, #440]	; (80187a4 <HAL_DMA_Start_IT+0x4ac>)
 80185ea:	4293      	cmp	r3, r2
 80185ec:	d02c      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	4a6d      	ldr	r2, [pc, #436]	; (80187a8 <HAL_DMA_Start_IT+0x4b0>)
 80185f4:	4293      	cmp	r3, r2
 80185f6:	d027      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a6b      	ldr	r2, [pc, #428]	; (80187ac <HAL_DMA_Start_IT+0x4b4>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d022      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	4a6a      	ldr	r2, [pc, #424]	; (80187b0 <HAL_DMA_Start_IT+0x4b8>)
 8018608:	4293      	cmp	r3, r2
 801860a:	d01d      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4a68      	ldr	r2, [pc, #416]	; (80187b4 <HAL_DMA_Start_IT+0x4bc>)
 8018612:	4293      	cmp	r3, r2
 8018614:	d018      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	4a67      	ldr	r2, [pc, #412]	; (80187b8 <HAL_DMA_Start_IT+0x4c0>)
 801861c:	4293      	cmp	r3, r2
 801861e:	d013      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	4a65      	ldr	r2, [pc, #404]	; (80187bc <HAL_DMA_Start_IT+0x4c4>)
 8018626:	4293      	cmp	r3, r2
 8018628:	d00e      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	4a64      	ldr	r2, [pc, #400]	; (80187c0 <HAL_DMA_Start_IT+0x4c8>)
 8018630:	4293      	cmp	r3, r2
 8018632:	d009      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	4a62      	ldr	r2, [pc, #392]	; (80187c4 <HAL_DMA_Start_IT+0x4cc>)
 801863a:	4293      	cmp	r3, r2
 801863c:	d004      	beq.n	8018648 <HAL_DMA_Start_IT+0x350>
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	4a61      	ldr	r2, [pc, #388]	; (80187c8 <HAL_DMA_Start_IT+0x4d0>)
 8018644:	4293      	cmp	r3, r2
 8018646:	d101      	bne.n	801864c <HAL_DMA_Start_IT+0x354>
 8018648:	2301      	movs	r3, #1
 801864a:	e000      	b.n	801864e <HAL_DMA_Start_IT+0x356>
 801864c:	2300      	movs	r3, #0
 801864e:	2b00      	cmp	r3, #0
 8018650:	d01a      	beq.n	8018688 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801865c:	2b00      	cmp	r3, #0
 801865e:	d007      	beq.n	8018670 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801866a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801866e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018674:	2b00      	cmp	r3, #0
 8018676:	d007      	beq.n	8018688 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801867c:	681a      	ldr	r2, [r3, #0]
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018686:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	4a37      	ldr	r2, [pc, #220]	; (801876c <HAL_DMA_Start_IT+0x474>)
 801868e:	4293      	cmp	r3, r2
 8018690:	d04a      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4a36      	ldr	r2, [pc, #216]	; (8018770 <HAL_DMA_Start_IT+0x478>)
 8018698:	4293      	cmp	r3, r2
 801869a:	d045      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4a34      	ldr	r2, [pc, #208]	; (8018774 <HAL_DMA_Start_IT+0x47c>)
 80186a2:	4293      	cmp	r3, r2
 80186a4:	d040      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	4a33      	ldr	r2, [pc, #204]	; (8018778 <HAL_DMA_Start_IT+0x480>)
 80186ac:	4293      	cmp	r3, r2
 80186ae:	d03b      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a31      	ldr	r2, [pc, #196]	; (801877c <HAL_DMA_Start_IT+0x484>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d036      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4a30      	ldr	r2, [pc, #192]	; (8018780 <HAL_DMA_Start_IT+0x488>)
 80186c0:	4293      	cmp	r3, r2
 80186c2:	d031      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a2e      	ldr	r2, [pc, #184]	; (8018784 <HAL_DMA_Start_IT+0x48c>)
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d02c      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	4a2d      	ldr	r2, [pc, #180]	; (8018788 <HAL_DMA_Start_IT+0x490>)
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d027      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4a2b      	ldr	r2, [pc, #172]	; (801878c <HAL_DMA_Start_IT+0x494>)
 80186de:	4293      	cmp	r3, r2
 80186e0:	d022      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	4a2a      	ldr	r2, [pc, #168]	; (8018790 <HAL_DMA_Start_IT+0x498>)
 80186e8:	4293      	cmp	r3, r2
 80186ea:	d01d      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	4a28      	ldr	r2, [pc, #160]	; (8018794 <HAL_DMA_Start_IT+0x49c>)
 80186f2:	4293      	cmp	r3, r2
 80186f4:	d018      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	4a27      	ldr	r2, [pc, #156]	; (8018798 <HAL_DMA_Start_IT+0x4a0>)
 80186fc:	4293      	cmp	r3, r2
 80186fe:	d013      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	4a25      	ldr	r2, [pc, #148]	; (801879c <HAL_DMA_Start_IT+0x4a4>)
 8018706:	4293      	cmp	r3, r2
 8018708:	d00e      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	4a24      	ldr	r2, [pc, #144]	; (80187a0 <HAL_DMA_Start_IT+0x4a8>)
 8018710:	4293      	cmp	r3, r2
 8018712:	d009      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	4a22      	ldr	r2, [pc, #136]	; (80187a4 <HAL_DMA_Start_IT+0x4ac>)
 801871a:	4293      	cmp	r3, r2
 801871c:	d004      	beq.n	8018728 <HAL_DMA_Start_IT+0x430>
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	4a21      	ldr	r2, [pc, #132]	; (80187a8 <HAL_DMA_Start_IT+0x4b0>)
 8018724:	4293      	cmp	r3, r2
 8018726:	d108      	bne.n	801873a <HAL_DMA_Start_IT+0x442>
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	f042 0201 	orr.w	r2, r2, #1
 8018736:	601a      	str	r2, [r3, #0]
 8018738:	e012      	b.n	8018760 <HAL_DMA_Start_IT+0x468>
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	f042 0201 	orr.w	r2, r2, #1
 8018748:	601a      	str	r2, [r3, #0]
 801874a:	e009      	b.n	8018760 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018752:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2200      	movs	r2, #0
 8018758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 801875c:	2301      	movs	r3, #1
 801875e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8018760:	7dfb      	ldrb	r3, [r7, #23]
}
 8018762:	4618      	mov	r0, r3
 8018764:	3718      	adds	r7, #24
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	40020010 	.word	0x40020010
 8018770:	40020028 	.word	0x40020028
 8018774:	40020040 	.word	0x40020040
 8018778:	40020058 	.word	0x40020058
 801877c:	40020070 	.word	0x40020070
 8018780:	40020088 	.word	0x40020088
 8018784:	400200a0 	.word	0x400200a0
 8018788:	400200b8 	.word	0x400200b8
 801878c:	40020410 	.word	0x40020410
 8018790:	40020428 	.word	0x40020428
 8018794:	40020440 	.word	0x40020440
 8018798:	40020458 	.word	0x40020458
 801879c:	40020470 	.word	0x40020470
 80187a0:	40020488 	.word	0x40020488
 80187a4:	400204a0 	.word	0x400204a0
 80187a8:	400204b8 	.word	0x400204b8
 80187ac:	58025408 	.word	0x58025408
 80187b0:	5802541c 	.word	0x5802541c
 80187b4:	58025430 	.word	0x58025430
 80187b8:	58025444 	.word	0x58025444
 80187bc:	58025458 	.word	0x58025458
 80187c0:	5802546c 	.word	0x5802546c
 80187c4:	58025480 	.word	0x58025480
 80187c8:	58025494 	.word	0x58025494

080187cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b08a      	sub	sp, #40	; 0x28
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80187d4:	2300      	movs	r3, #0
 80187d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80187d8:	4b67      	ldr	r3, [pc, #412]	; (8018978 <HAL_DMA_IRQHandler+0x1ac>)
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	4a67      	ldr	r2, [pc, #412]	; (801897c <HAL_DMA_IRQHandler+0x1b0>)
 80187de:	fba2 2303 	umull	r2, r3, r2, r3
 80187e2:	0a9b      	lsrs	r3, r3, #10
 80187e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80187f8:	69fb      	ldr	r3, [r7, #28]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	4a5f      	ldr	r2, [pc, #380]	; (8018980 <HAL_DMA_IRQHandler+0x1b4>)
 8018804:	4293      	cmp	r3, r2
 8018806:	d04a      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	4a5d      	ldr	r2, [pc, #372]	; (8018984 <HAL_DMA_IRQHandler+0x1b8>)
 801880e:	4293      	cmp	r3, r2
 8018810:	d045      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	4a5c      	ldr	r2, [pc, #368]	; (8018988 <HAL_DMA_IRQHandler+0x1bc>)
 8018818:	4293      	cmp	r3, r2
 801881a:	d040      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	4a5a      	ldr	r2, [pc, #360]	; (801898c <HAL_DMA_IRQHandler+0x1c0>)
 8018822:	4293      	cmp	r3, r2
 8018824:	d03b      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	4a59      	ldr	r2, [pc, #356]	; (8018990 <HAL_DMA_IRQHandler+0x1c4>)
 801882c:	4293      	cmp	r3, r2
 801882e:	d036      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4a57      	ldr	r2, [pc, #348]	; (8018994 <HAL_DMA_IRQHandler+0x1c8>)
 8018836:	4293      	cmp	r3, r2
 8018838:	d031      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	4a56      	ldr	r2, [pc, #344]	; (8018998 <HAL_DMA_IRQHandler+0x1cc>)
 8018840:	4293      	cmp	r3, r2
 8018842:	d02c      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4a54      	ldr	r2, [pc, #336]	; (801899c <HAL_DMA_IRQHandler+0x1d0>)
 801884a:	4293      	cmp	r3, r2
 801884c:	d027      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	4a53      	ldr	r2, [pc, #332]	; (80189a0 <HAL_DMA_IRQHandler+0x1d4>)
 8018854:	4293      	cmp	r3, r2
 8018856:	d022      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	4a51      	ldr	r2, [pc, #324]	; (80189a4 <HAL_DMA_IRQHandler+0x1d8>)
 801885e:	4293      	cmp	r3, r2
 8018860:	d01d      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	4a50      	ldr	r2, [pc, #320]	; (80189a8 <HAL_DMA_IRQHandler+0x1dc>)
 8018868:	4293      	cmp	r3, r2
 801886a:	d018      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a4e      	ldr	r2, [pc, #312]	; (80189ac <HAL_DMA_IRQHandler+0x1e0>)
 8018872:	4293      	cmp	r3, r2
 8018874:	d013      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	4a4d      	ldr	r2, [pc, #308]	; (80189b0 <HAL_DMA_IRQHandler+0x1e4>)
 801887c:	4293      	cmp	r3, r2
 801887e:	d00e      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	4a4b      	ldr	r2, [pc, #300]	; (80189b4 <HAL_DMA_IRQHandler+0x1e8>)
 8018886:	4293      	cmp	r3, r2
 8018888:	d009      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4a4a      	ldr	r2, [pc, #296]	; (80189b8 <HAL_DMA_IRQHandler+0x1ec>)
 8018890:	4293      	cmp	r3, r2
 8018892:	d004      	beq.n	801889e <HAL_DMA_IRQHandler+0xd2>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	4a48      	ldr	r2, [pc, #288]	; (80189bc <HAL_DMA_IRQHandler+0x1f0>)
 801889a:	4293      	cmp	r3, r2
 801889c:	d101      	bne.n	80188a2 <HAL_DMA_IRQHandler+0xd6>
 801889e:	2301      	movs	r3, #1
 80188a0:	e000      	b.n	80188a4 <HAL_DMA_IRQHandler+0xd8>
 80188a2:	2300      	movs	r3, #0
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	f000 842b 	beq.w	8019100 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188ae:	f003 031f 	and.w	r3, r3, #31
 80188b2:	2208      	movs	r2, #8
 80188b4:	409a      	lsls	r2, r3
 80188b6:	69bb      	ldr	r3, [r7, #24]
 80188b8:	4013      	ands	r3, r2
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	f000 80a2 	beq.w	8018a04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	4a2e      	ldr	r2, [pc, #184]	; (8018980 <HAL_DMA_IRQHandler+0x1b4>)
 80188c6:	4293      	cmp	r3, r2
 80188c8:	d04a      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	4a2d      	ldr	r2, [pc, #180]	; (8018984 <HAL_DMA_IRQHandler+0x1b8>)
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d045      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	4a2b      	ldr	r2, [pc, #172]	; (8018988 <HAL_DMA_IRQHandler+0x1bc>)
 80188da:	4293      	cmp	r3, r2
 80188dc:	d040      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	4a2a      	ldr	r2, [pc, #168]	; (801898c <HAL_DMA_IRQHandler+0x1c0>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d03b      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a28      	ldr	r2, [pc, #160]	; (8018990 <HAL_DMA_IRQHandler+0x1c4>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d036      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	4a27      	ldr	r2, [pc, #156]	; (8018994 <HAL_DMA_IRQHandler+0x1c8>)
 80188f8:	4293      	cmp	r3, r2
 80188fa:	d031      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	4a25      	ldr	r2, [pc, #148]	; (8018998 <HAL_DMA_IRQHandler+0x1cc>)
 8018902:	4293      	cmp	r3, r2
 8018904:	d02c      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4a24      	ldr	r2, [pc, #144]	; (801899c <HAL_DMA_IRQHandler+0x1d0>)
 801890c:	4293      	cmp	r3, r2
 801890e:	d027      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	4a22      	ldr	r2, [pc, #136]	; (80189a0 <HAL_DMA_IRQHandler+0x1d4>)
 8018916:	4293      	cmp	r3, r2
 8018918:	d022      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	4a21      	ldr	r2, [pc, #132]	; (80189a4 <HAL_DMA_IRQHandler+0x1d8>)
 8018920:	4293      	cmp	r3, r2
 8018922:	d01d      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	4a1f      	ldr	r2, [pc, #124]	; (80189a8 <HAL_DMA_IRQHandler+0x1dc>)
 801892a:	4293      	cmp	r3, r2
 801892c:	d018      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	4a1e      	ldr	r2, [pc, #120]	; (80189ac <HAL_DMA_IRQHandler+0x1e0>)
 8018934:	4293      	cmp	r3, r2
 8018936:	d013      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	4a1c      	ldr	r2, [pc, #112]	; (80189b0 <HAL_DMA_IRQHandler+0x1e4>)
 801893e:	4293      	cmp	r3, r2
 8018940:	d00e      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	4a1b      	ldr	r2, [pc, #108]	; (80189b4 <HAL_DMA_IRQHandler+0x1e8>)
 8018948:	4293      	cmp	r3, r2
 801894a:	d009      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	4a19      	ldr	r2, [pc, #100]	; (80189b8 <HAL_DMA_IRQHandler+0x1ec>)
 8018952:	4293      	cmp	r3, r2
 8018954:	d004      	beq.n	8018960 <HAL_DMA_IRQHandler+0x194>
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	4a18      	ldr	r2, [pc, #96]	; (80189bc <HAL_DMA_IRQHandler+0x1f0>)
 801895c:	4293      	cmp	r3, r2
 801895e:	d12f      	bne.n	80189c0 <HAL_DMA_IRQHandler+0x1f4>
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	f003 0304 	and.w	r3, r3, #4
 801896a:	2b00      	cmp	r3, #0
 801896c:	bf14      	ite	ne
 801896e:	2301      	movne	r3, #1
 8018970:	2300      	moveq	r3, #0
 8018972:	b2db      	uxtb	r3, r3
 8018974:	e02e      	b.n	80189d4 <HAL_DMA_IRQHandler+0x208>
 8018976:	bf00      	nop
 8018978:	24000004 	.word	0x24000004
 801897c:	1b4e81b5 	.word	0x1b4e81b5
 8018980:	40020010 	.word	0x40020010
 8018984:	40020028 	.word	0x40020028
 8018988:	40020040 	.word	0x40020040
 801898c:	40020058 	.word	0x40020058
 8018990:	40020070 	.word	0x40020070
 8018994:	40020088 	.word	0x40020088
 8018998:	400200a0 	.word	0x400200a0
 801899c:	400200b8 	.word	0x400200b8
 80189a0:	40020410 	.word	0x40020410
 80189a4:	40020428 	.word	0x40020428
 80189a8:	40020440 	.word	0x40020440
 80189ac:	40020458 	.word	0x40020458
 80189b0:	40020470 	.word	0x40020470
 80189b4:	40020488 	.word	0x40020488
 80189b8:	400204a0 	.word	0x400204a0
 80189bc:	400204b8 	.word	0x400204b8
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	f003 0308 	and.w	r3, r3, #8
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	bf14      	ite	ne
 80189ce:	2301      	movne	r3, #1
 80189d0:	2300      	moveq	r3, #0
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d015      	beq.n	8018a04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	f022 0204 	bic.w	r2, r2, #4
 80189e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189ec:	f003 031f 	and.w	r3, r3, #31
 80189f0:	2208      	movs	r2, #8
 80189f2:	409a      	lsls	r2, r3
 80189f4:	6a3b      	ldr	r3, [r7, #32]
 80189f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189fc:	f043 0201 	orr.w	r2, r3, #1
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a08:	f003 031f 	and.w	r3, r3, #31
 8018a0c:	69ba      	ldr	r2, [r7, #24]
 8018a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8018a12:	f003 0301 	and.w	r3, r3, #1
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d06e      	beq.n	8018af8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	4a69      	ldr	r2, [pc, #420]	; (8018bc4 <HAL_DMA_IRQHandler+0x3f8>)
 8018a20:	4293      	cmp	r3, r2
 8018a22:	d04a      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	4a67      	ldr	r2, [pc, #412]	; (8018bc8 <HAL_DMA_IRQHandler+0x3fc>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d045      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	4a66      	ldr	r2, [pc, #408]	; (8018bcc <HAL_DMA_IRQHandler+0x400>)
 8018a34:	4293      	cmp	r3, r2
 8018a36:	d040      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4a64      	ldr	r2, [pc, #400]	; (8018bd0 <HAL_DMA_IRQHandler+0x404>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d03b      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4a63      	ldr	r2, [pc, #396]	; (8018bd4 <HAL_DMA_IRQHandler+0x408>)
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d036      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a61      	ldr	r2, [pc, #388]	; (8018bd8 <HAL_DMA_IRQHandler+0x40c>)
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d031      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	4a60      	ldr	r2, [pc, #384]	; (8018bdc <HAL_DMA_IRQHandler+0x410>)
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d02c      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	4a5e      	ldr	r2, [pc, #376]	; (8018be0 <HAL_DMA_IRQHandler+0x414>)
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d027      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4a5d      	ldr	r2, [pc, #372]	; (8018be4 <HAL_DMA_IRQHandler+0x418>)
 8018a70:	4293      	cmp	r3, r2
 8018a72:	d022      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4a5b      	ldr	r2, [pc, #364]	; (8018be8 <HAL_DMA_IRQHandler+0x41c>)
 8018a7a:	4293      	cmp	r3, r2
 8018a7c:	d01d      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	4a5a      	ldr	r2, [pc, #360]	; (8018bec <HAL_DMA_IRQHandler+0x420>)
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d018      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4a58      	ldr	r2, [pc, #352]	; (8018bf0 <HAL_DMA_IRQHandler+0x424>)
 8018a8e:	4293      	cmp	r3, r2
 8018a90:	d013      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	4a57      	ldr	r2, [pc, #348]	; (8018bf4 <HAL_DMA_IRQHandler+0x428>)
 8018a98:	4293      	cmp	r3, r2
 8018a9a:	d00e      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	4a55      	ldr	r2, [pc, #340]	; (8018bf8 <HAL_DMA_IRQHandler+0x42c>)
 8018aa2:	4293      	cmp	r3, r2
 8018aa4:	d009      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a54      	ldr	r2, [pc, #336]	; (8018bfc <HAL_DMA_IRQHandler+0x430>)
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d004      	beq.n	8018aba <HAL_DMA_IRQHandler+0x2ee>
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	4a52      	ldr	r2, [pc, #328]	; (8018c00 <HAL_DMA_IRQHandler+0x434>)
 8018ab6:	4293      	cmp	r3, r2
 8018ab8:	d10a      	bne.n	8018ad0 <HAL_DMA_IRQHandler+0x304>
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	695b      	ldr	r3, [r3, #20]
 8018ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	bf14      	ite	ne
 8018ac8:	2301      	movne	r3, #1
 8018aca:	2300      	moveq	r3, #0
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	e003      	b.n	8018ad8 <HAL_DMA_IRQHandler+0x30c>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d00d      	beq.n	8018af8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ae0:	f003 031f 	and.w	r3, r3, #31
 8018ae4:	2201      	movs	r2, #1
 8018ae6:	409a      	lsls	r2, r3
 8018ae8:	6a3b      	ldr	r3, [r7, #32]
 8018aea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018af0:	f043 0202 	orr.w	r2, r3, #2
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018afc:	f003 031f 	and.w	r3, r3, #31
 8018b00:	2204      	movs	r2, #4
 8018b02:	409a      	lsls	r2, r3
 8018b04:	69bb      	ldr	r3, [r7, #24]
 8018b06:	4013      	ands	r3, r2
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	f000 808f 	beq.w	8018c2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	4a2c      	ldr	r2, [pc, #176]	; (8018bc4 <HAL_DMA_IRQHandler+0x3f8>)
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d04a      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	4a2a      	ldr	r2, [pc, #168]	; (8018bc8 <HAL_DMA_IRQHandler+0x3fc>)
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	d045      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	4a29      	ldr	r2, [pc, #164]	; (8018bcc <HAL_DMA_IRQHandler+0x400>)
 8018b28:	4293      	cmp	r3, r2
 8018b2a:	d040      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	4a27      	ldr	r2, [pc, #156]	; (8018bd0 <HAL_DMA_IRQHandler+0x404>)
 8018b32:	4293      	cmp	r3, r2
 8018b34:	d03b      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	4a26      	ldr	r2, [pc, #152]	; (8018bd4 <HAL_DMA_IRQHandler+0x408>)
 8018b3c:	4293      	cmp	r3, r2
 8018b3e:	d036      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	4a24      	ldr	r2, [pc, #144]	; (8018bd8 <HAL_DMA_IRQHandler+0x40c>)
 8018b46:	4293      	cmp	r3, r2
 8018b48:	d031      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	4a23      	ldr	r2, [pc, #140]	; (8018bdc <HAL_DMA_IRQHandler+0x410>)
 8018b50:	4293      	cmp	r3, r2
 8018b52:	d02c      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4a21      	ldr	r2, [pc, #132]	; (8018be0 <HAL_DMA_IRQHandler+0x414>)
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d027      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4a20      	ldr	r2, [pc, #128]	; (8018be4 <HAL_DMA_IRQHandler+0x418>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d022      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4a1e      	ldr	r2, [pc, #120]	; (8018be8 <HAL_DMA_IRQHandler+0x41c>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d01d      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a1d      	ldr	r2, [pc, #116]	; (8018bec <HAL_DMA_IRQHandler+0x420>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d018      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a1b      	ldr	r2, [pc, #108]	; (8018bf0 <HAL_DMA_IRQHandler+0x424>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d013      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a1a      	ldr	r2, [pc, #104]	; (8018bf4 <HAL_DMA_IRQHandler+0x428>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d00e      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4a18      	ldr	r2, [pc, #96]	; (8018bf8 <HAL_DMA_IRQHandler+0x42c>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d009      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	4a17      	ldr	r2, [pc, #92]	; (8018bfc <HAL_DMA_IRQHandler+0x430>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d004      	beq.n	8018bae <HAL_DMA_IRQHandler+0x3e2>
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	4a15      	ldr	r2, [pc, #84]	; (8018c00 <HAL_DMA_IRQHandler+0x434>)
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d12a      	bne.n	8018c04 <HAL_DMA_IRQHandler+0x438>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f003 0302 	and.w	r3, r3, #2
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	bf14      	ite	ne
 8018bbc:	2301      	movne	r3, #1
 8018bbe:	2300      	moveq	r3, #0
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	e023      	b.n	8018c0c <HAL_DMA_IRQHandler+0x440>
 8018bc4:	40020010 	.word	0x40020010
 8018bc8:	40020028 	.word	0x40020028
 8018bcc:	40020040 	.word	0x40020040
 8018bd0:	40020058 	.word	0x40020058
 8018bd4:	40020070 	.word	0x40020070
 8018bd8:	40020088 	.word	0x40020088
 8018bdc:	400200a0 	.word	0x400200a0
 8018be0:	400200b8 	.word	0x400200b8
 8018be4:	40020410 	.word	0x40020410
 8018be8:	40020428 	.word	0x40020428
 8018bec:	40020440 	.word	0x40020440
 8018bf0:	40020458 	.word	0x40020458
 8018bf4:	40020470 	.word	0x40020470
 8018bf8:	40020488 	.word	0x40020488
 8018bfc:	400204a0 	.word	0x400204a0
 8018c00:	400204b8 	.word	0x400204b8
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00d      	beq.n	8018c2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c14:	f003 031f 	and.w	r3, r3, #31
 8018c18:	2204      	movs	r2, #4
 8018c1a:	409a      	lsls	r2, r3
 8018c1c:	6a3b      	ldr	r3, [r7, #32]
 8018c1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c24:	f043 0204 	orr.w	r2, r3, #4
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c30:	f003 031f 	and.w	r3, r3, #31
 8018c34:	2210      	movs	r2, #16
 8018c36:	409a      	lsls	r2, r3
 8018c38:	69bb      	ldr	r3, [r7, #24]
 8018c3a:	4013      	ands	r3, r2
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	f000 80a6 	beq.w	8018d8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4a85      	ldr	r2, [pc, #532]	; (8018e5c <HAL_DMA_IRQHandler+0x690>)
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	d04a      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a83      	ldr	r2, [pc, #524]	; (8018e60 <HAL_DMA_IRQHandler+0x694>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d045      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a82      	ldr	r2, [pc, #520]	; (8018e64 <HAL_DMA_IRQHandler+0x698>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d040      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a80      	ldr	r2, [pc, #512]	; (8018e68 <HAL_DMA_IRQHandler+0x69c>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d03b      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	4a7f      	ldr	r2, [pc, #508]	; (8018e6c <HAL_DMA_IRQHandler+0x6a0>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d036      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a7d      	ldr	r2, [pc, #500]	; (8018e70 <HAL_DMA_IRQHandler+0x6a4>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d031      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4a7c      	ldr	r2, [pc, #496]	; (8018e74 <HAL_DMA_IRQHandler+0x6a8>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d02c      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4a7a      	ldr	r2, [pc, #488]	; (8018e78 <HAL_DMA_IRQHandler+0x6ac>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d027      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a79      	ldr	r2, [pc, #484]	; (8018e7c <HAL_DMA_IRQHandler+0x6b0>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d022      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a77      	ldr	r2, [pc, #476]	; (8018e80 <HAL_DMA_IRQHandler+0x6b4>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d01d      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a76      	ldr	r2, [pc, #472]	; (8018e84 <HAL_DMA_IRQHandler+0x6b8>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d018      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a74      	ldr	r2, [pc, #464]	; (8018e88 <HAL_DMA_IRQHandler+0x6bc>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d013      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4a73      	ldr	r2, [pc, #460]	; (8018e8c <HAL_DMA_IRQHandler+0x6c0>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d00e      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a71      	ldr	r2, [pc, #452]	; (8018e90 <HAL_DMA_IRQHandler+0x6c4>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d009      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a70      	ldr	r2, [pc, #448]	; (8018e94 <HAL_DMA_IRQHandler+0x6c8>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d004      	beq.n	8018ce2 <HAL_DMA_IRQHandler+0x516>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a6e      	ldr	r2, [pc, #440]	; (8018e98 <HAL_DMA_IRQHandler+0x6cc>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d10a      	bne.n	8018cf8 <HAL_DMA_IRQHandler+0x52c>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	f003 0308 	and.w	r3, r3, #8
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	bf14      	ite	ne
 8018cf0:	2301      	movne	r3, #1
 8018cf2:	2300      	moveq	r3, #0
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	e009      	b.n	8018d0c <HAL_DMA_IRQHandler+0x540>
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f003 0304 	and.w	r3, r3, #4
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	bf14      	ite	ne
 8018d06:	2301      	movne	r3, #1
 8018d08:	2300      	moveq	r3, #0
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d03e      	beq.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d14:	f003 031f 	and.w	r3, r3, #31
 8018d18:	2210      	movs	r2, #16
 8018d1a:	409a      	lsls	r2, r3
 8018d1c:	6a3b      	ldr	r3, [r7, #32]
 8018d1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d018      	beq.n	8018d60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d108      	bne.n	8018d4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d024      	beq.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	4798      	blx	r3
 8018d4c:	e01f      	b.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d01b      	beq.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	4798      	blx	r3
 8018d5e:	e016      	b.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d107      	bne.n	8018d7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	681a      	ldr	r2, [r3, #0]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	f022 0208 	bic.w	r2, r2, #8
 8018d7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d003      	beq.n	8018d8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d8a:	6878      	ldr	r0, [r7, #4]
 8018d8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d92:	f003 031f 	and.w	r3, r3, #31
 8018d96:	2220      	movs	r2, #32
 8018d98:	409a      	lsls	r2, r3
 8018d9a:	69bb      	ldr	r3, [r7, #24]
 8018d9c:	4013      	ands	r3, r2
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	f000 8110 	beq.w	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	4a2c      	ldr	r2, [pc, #176]	; (8018e5c <HAL_DMA_IRQHandler+0x690>)
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d04a      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	4a2b      	ldr	r2, [pc, #172]	; (8018e60 <HAL_DMA_IRQHandler+0x694>)
 8018db4:	4293      	cmp	r3, r2
 8018db6:	d045      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4a29      	ldr	r2, [pc, #164]	; (8018e64 <HAL_DMA_IRQHandler+0x698>)
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	d040      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4a28      	ldr	r2, [pc, #160]	; (8018e68 <HAL_DMA_IRQHandler+0x69c>)
 8018dc8:	4293      	cmp	r3, r2
 8018dca:	d03b      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4a26      	ldr	r2, [pc, #152]	; (8018e6c <HAL_DMA_IRQHandler+0x6a0>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d036      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	4a25      	ldr	r2, [pc, #148]	; (8018e70 <HAL_DMA_IRQHandler+0x6a4>)
 8018ddc:	4293      	cmp	r3, r2
 8018dde:	d031      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4a23      	ldr	r2, [pc, #140]	; (8018e74 <HAL_DMA_IRQHandler+0x6a8>)
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d02c      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	4a22      	ldr	r2, [pc, #136]	; (8018e78 <HAL_DMA_IRQHandler+0x6ac>)
 8018df0:	4293      	cmp	r3, r2
 8018df2:	d027      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	4a20      	ldr	r2, [pc, #128]	; (8018e7c <HAL_DMA_IRQHandler+0x6b0>)
 8018dfa:	4293      	cmp	r3, r2
 8018dfc:	d022      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	4a1f      	ldr	r2, [pc, #124]	; (8018e80 <HAL_DMA_IRQHandler+0x6b4>)
 8018e04:	4293      	cmp	r3, r2
 8018e06:	d01d      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	4a1d      	ldr	r2, [pc, #116]	; (8018e84 <HAL_DMA_IRQHandler+0x6b8>)
 8018e0e:	4293      	cmp	r3, r2
 8018e10:	d018      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	4a1c      	ldr	r2, [pc, #112]	; (8018e88 <HAL_DMA_IRQHandler+0x6bc>)
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	d013      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a1a      	ldr	r2, [pc, #104]	; (8018e8c <HAL_DMA_IRQHandler+0x6c0>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d00e      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4a19      	ldr	r2, [pc, #100]	; (8018e90 <HAL_DMA_IRQHandler+0x6c4>)
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	d009      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	4a17      	ldr	r2, [pc, #92]	; (8018e94 <HAL_DMA_IRQHandler+0x6c8>)
 8018e36:	4293      	cmp	r3, r2
 8018e38:	d004      	beq.n	8018e44 <HAL_DMA_IRQHandler+0x678>
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4a16      	ldr	r2, [pc, #88]	; (8018e98 <HAL_DMA_IRQHandler+0x6cc>)
 8018e40:	4293      	cmp	r3, r2
 8018e42:	d12b      	bne.n	8018e9c <HAL_DMA_IRQHandler+0x6d0>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f003 0310 	and.w	r3, r3, #16
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	bf14      	ite	ne
 8018e52:	2301      	movne	r3, #1
 8018e54:	2300      	moveq	r3, #0
 8018e56:	b2db      	uxtb	r3, r3
 8018e58:	e02a      	b.n	8018eb0 <HAL_DMA_IRQHandler+0x6e4>
 8018e5a:	bf00      	nop
 8018e5c:	40020010 	.word	0x40020010
 8018e60:	40020028 	.word	0x40020028
 8018e64:	40020040 	.word	0x40020040
 8018e68:	40020058 	.word	0x40020058
 8018e6c:	40020070 	.word	0x40020070
 8018e70:	40020088 	.word	0x40020088
 8018e74:	400200a0 	.word	0x400200a0
 8018e78:	400200b8 	.word	0x400200b8
 8018e7c:	40020410 	.word	0x40020410
 8018e80:	40020428 	.word	0x40020428
 8018e84:	40020440 	.word	0x40020440
 8018e88:	40020458 	.word	0x40020458
 8018e8c:	40020470 	.word	0x40020470
 8018e90:	40020488 	.word	0x40020488
 8018e94:	400204a0 	.word	0x400204a0
 8018e98:	400204b8 	.word	0x400204b8
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	f003 0302 	and.w	r3, r3, #2
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	bf14      	ite	ne
 8018eaa:	2301      	movne	r3, #1
 8018eac:	2300      	moveq	r3, #0
 8018eae:	b2db      	uxtb	r3, r3
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	f000 8087 	beq.w	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018eba:	f003 031f 	and.w	r3, r3, #31
 8018ebe:	2220      	movs	r2, #32
 8018ec0:	409a      	lsls	r2, r3
 8018ec2:	6a3b      	ldr	r3, [r7, #32]
 8018ec4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018ecc:	b2db      	uxtb	r3, r3
 8018ece:	2b04      	cmp	r3, #4
 8018ed0:	d139      	bne.n	8018f46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	681a      	ldr	r2, [r3, #0]
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	f022 0216 	bic.w	r2, r2, #22
 8018ee0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	695a      	ldr	r2, [r3, #20]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018ef0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d103      	bne.n	8018f02 <HAL_DMA_IRQHandler+0x736>
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d007      	beq.n	8018f12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	f022 0208 	bic.w	r2, r2, #8
 8018f10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f16:	f003 031f 	and.w	r3, r3, #31
 8018f1a:	223f      	movs	r2, #63	; 0x3f
 8018f1c:	409a      	lsls	r2, r3
 8018f1e:	6a3b      	ldr	r3, [r7, #32]
 8018f20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2201      	movs	r2, #1
 8018f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	f000 834a 	beq.w	80195d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	4798      	blx	r3
          }
          return;
 8018f44:	e344      	b.n	80195d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d018      	beq.n	8018f86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d108      	bne.n	8018f74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d02c      	beq.n	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	4798      	blx	r3
 8018f72:	e027      	b.n	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d023      	beq.n	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	4798      	blx	r3
 8018f84:	e01e      	b.n	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d10f      	bne.n	8018fb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	681a      	ldr	r2, [r3, #0]
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	f022 0210 	bic.w	r2, r2, #16
 8018fa2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2201      	movs	r2, #1
 8018fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	2200      	movs	r2, #0
 8018fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d003      	beq.n	8018fc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	f000 8306 	beq.w	80195da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fd2:	f003 0301 	and.w	r3, r3, #1
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	f000 8088 	beq.w	80190ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2204      	movs	r2, #4
 8018fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	4a7a      	ldr	r2, [pc, #488]	; (80191d4 <HAL_DMA_IRQHandler+0xa08>)
 8018fea:	4293      	cmp	r3, r2
 8018fec:	d04a      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	4a79      	ldr	r2, [pc, #484]	; (80191d8 <HAL_DMA_IRQHandler+0xa0c>)
 8018ff4:	4293      	cmp	r3, r2
 8018ff6:	d045      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	4a77      	ldr	r2, [pc, #476]	; (80191dc <HAL_DMA_IRQHandler+0xa10>)
 8018ffe:	4293      	cmp	r3, r2
 8019000:	d040      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	4a76      	ldr	r2, [pc, #472]	; (80191e0 <HAL_DMA_IRQHandler+0xa14>)
 8019008:	4293      	cmp	r3, r2
 801900a:	d03b      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	4a74      	ldr	r2, [pc, #464]	; (80191e4 <HAL_DMA_IRQHandler+0xa18>)
 8019012:	4293      	cmp	r3, r2
 8019014:	d036      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4a73      	ldr	r2, [pc, #460]	; (80191e8 <HAL_DMA_IRQHandler+0xa1c>)
 801901c:	4293      	cmp	r3, r2
 801901e:	d031      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	4a71      	ldr	r2, [pc, #452]	; (80191ec <HAL_DMA_IRQHandler+0xa20>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d02c      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	4a70      	ldr	r2, [pc, #448]	; (80191f0 <HAL_DMA_IRQHandler+0xa24>)
 8019030:	4293      	cmp	r3, r2
 8019032:	d027      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	4a6e      	ldr	r2, [pc, #440]	; (80191f4 <HAL_DMA_IRQHandler+0xa28>)
 801903a:	4293      	cmp	r3, r2
 801903c:	d022      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	4a6d      	ldr	r2, [pc, #436]	; (80191f8 <HAL_DMA_IRQHandler+0xa2c>)
 8019044:	4293      	cmp	r3, r2
 8019046:	d01d      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4a6b      	ldr	r2, [pc, #428]	; (80191fc <HAL_DMA_IRQHandler+0xa30>)
 801904e:	4293      	cmp	r3, r2
 8019050:	d018      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	4a6a      	ldr	r2, [pc, #424]	; (8019200 <HAL_DMA_IRQHandler+0xa34>)
 8019058:	4293      	cmp	r3, r2
 801905a:	d013      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	4a68      	ldr	r2, [pc, #416]	; (8019204 <HAL_DMA_IRQHandler+0xa38>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d00e      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	4a67      	ldr	r2, [pc, #412]	; (8019208 <HAL_DMA_IRQHandler+0xa3c>)
 801906c:	4293      	cmp	r3, r2
 801906e:	d009      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4a65      	ldr	r2, [pc, #404]	; (801920c <HAL_DMA_IRQHandler+0xa40>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d004      	beq.n	8019084 <HAL_DMA_IRQHandler+0x8b8>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	4a64      	ldr	r2, [pc, #400]	; (8019210 <HAL_DMA_IRQHandler+0xa44>)
 8019080:	4293      	cmp	r3, r2
 8019082:	d108      	bne.n	8019096 <HAL_DMA_IRQHandler+0x8ca>
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	681a      	ldr	r2, [r3, #0]
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	f022 0201 	bic.w	r2, r2, #1
 8019092:	601a      	str	r2, [r3, #0]
 8019094:	e007      	b.n	80190a6 <HAL_DMA_IRQHandler+0x8da>
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f022 0201 	bic.w	r2, r2, #1
 80190a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	3301      	adds	r3, #1
 80190aa:	60fb      	str	r3, [r7, #12]
 80190ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d307      	bcc.n	80190c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	f003 0301 	and.w	r3, r3, #1
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d1f2      	bne.n	80190a6 <HAL_DMA_IRQHandler+0x8da>
 80190c0:	e000      	b.n	80190c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80190c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	f003 0301 	and.w	r3, r3, #1
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d004      	beq.n	80190dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2203      	movs	r2, #3
 80190d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80190da:	e003      	b.n	80190e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2201      	movs	r2, #1
 80190e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	2200      	movs	r2, #0
 80190e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	f000 8272 	beq.w	80195da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	4798      	blx	r3
 80190fe:	e26c      	b.n	80195da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	4a43      	ldr	r2, [pc, #268]	; (8019214 <HAL_DMA_IRQHandler+0xa48>)
 8019106:	4293      	cmp	r3, r2
 8019108:	d022      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4a42      	ldr	r2, [pc, #264]	; (8019218 <HAL_DMA_IRQHandler+0xa4c>)
 8019110:	4293      	cmp	r3, r2
 8019112:	d01d      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	4a40      	ldr	r2, [pc, #256]	; (801921c <HAL_DMA_IRQHandler+0xa50>)
 801911a:	4293      	cmp	r3, r2
 801911c:	d018      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	4a3f      	ldr	r2, [pc, #252]	; (8019220 <HAL_DMA_IRQHandler+0xa54>)
 8019124:	4293      	cmp	r3, r2
 8019126:	d013      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	4a3d      	ldr	r2, [pc, #244]	; (8019224 <HAL_DMA_IRQHandler+0xa58>)
 801912e:	4293      	cmp	r3, r2
 8019130:	d00e      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	4a3c      	ldr	r2, [pc, #240]	; (8019228 <HAL_DMA_IRQHandler+0xa5c>)
 8019138:	4293      	cmp	r3, r2
 801913a:	d009      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	4a3a      	ldr	r2, [pc, #232]	; (801922c <HAL_DMA_IRQHandler+0xa60>)
 8019142:	4293      	cmp	r3, r2
 8019144:	d004      	beq.n	8019150 <HAL_DMA_IRQHandler+0x984>
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	4a39      	ldr	r2, [pc, #228]	; (8019230 <HAL_DMA_IRQHandler+0xa64>)
 801914c:	4293      	cmp	r3, r2
 801914e:	d101      	bne.n	8019154 <HAL_DMA_IRQHandler+0x988>
 8019150:	2301      	movs	r3, #1
 8019152:	e000      	b.n	8019156 <HAL_DMA_IRQHandler+0x98a>
 8019154:	2300      	movs	r3, #0
 8019156:	2b00      	cmp	r3, #0
 8019158:	f000 823f 	beq.w	80195da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019168:	f003 031f 	and.w	r3, r3, #31
 801916c:	2204      	movs	r2, #4
 801916e:	409a      	lsls	r2, r3
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	4013      	ands	r3, r2
 8019174:	2b00      	cmp	r3, #0
 8019176:	f000 80cd 	beq.w	8019314 <HAL_DMA_IRQHandler+0xb48>
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	f003 0304 	and.w	r3, r3, #4
 8019180:	2b00      	cmp	r3, #0
 8019182:	f000 80c7 	beq.w	8019314 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801918a:	f003 031f 	and.w	r3, r3, #31
 801918e:	2204      	movs	r2, #4
 8019190:	409a      	lsls	r2, r3
 8019192:	69fb      	ldr	r3, [r7, #28]
 8019194:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019196:	693b      	ldr	r3, [r7, #16]
 8019198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801919c:	2b00      	cmp	r3, #0
 801919e:	d049      	beq.n	8019234 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d109      	bne.n	80191be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f000 8210 	beq.w	80195d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191b8:	6878      	ldr	r0, [r7, #4]
 80191ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80191bc:	e20a      	b.n	80195d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	f000 8206 	beq.w	80195d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80191d0:	e200      	b.n	80195d4 <HAL_DMA_IRQHandler+0xe08>
 80191d2:	bf00      	nop
 80191d4:	40020010 	.word	0x40020010
 80191d8:	40020028 	.word	0x40020028
 80191dc:	40020040 	.word	0x40020040
 80191e0:	40020058 	.word	0x40020058
 80191e4:	40020070 	.word	0x40020070
 80191e8:	40020088 	.word	0x40020088
 80191ec:	400200a0 	.word	0x400200a0
 80191f0:	400200b8 	.word	0x400200b8
 80191f4:	40020410 	.word	0x40020410
 80191f8:	40020428 	.word	0x40020428
 80191fc:	40020440 	.word	0x40020440
 8019200:	40020458 	.word	0x40020458
 8019204:	40020470 	.word	0x40020470
 8019208:	40020488 	.word	0x40020488
 801920c:	400204a0 	.word	0x400204a0
 8019210:	400204b8 	.word	0x400204b8
 8019214:	58025408 	.word	0x58025408
 8019218:	5802541c 	.word	0x5802541c
 801921c:	58025430 	.word	0x58025430
 8019220:	58025444 	.word	0x58025444
 8019224:	58025458 	.word	0x58025458
 8019228:	5802546c 	.word	0x5802546c
 801922c:	58025480 	.word	0x58025480
 8019230:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8019234:	693b      	ldr	r3, [r7, #16]
 8019236:	f003 0320 	and.w	r3, r3, #32
 801923a:	2b00      	cmp	r3, #0
 801923c:	d160      	bne.n	8019300 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	4a7f      	ldr	r2, [pc, #508]	; (8019440 <HAL_DMA_IRQHandler+0xc74>)
 8019244:	4293      	cmp	r3, r2
 8019246:	d04a      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	4a7d      	ldr	r2, [pc, #500]	; (8019444 <HAL_DMA_IRQHandler+0xc78>)
 801924e:	4293      	cmp	r3, r2
 8019250:	d045      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	4a7c      	ldr	r2, [pc, #496]	; (8019448 <HAL_DMA_IRQHandler+0xc7c>)
 8019258:	4293      	cmp	r3, r2
 801925a:	d040      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	4a7a      	ldr	r2, [pc, #488]	; (801944c <HAL_DMA_IRQHandler+0xc80>)
 8019262:	4293      	cmp	r3, r2
 8019264:	d03b      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	4a79      	ldr	r2, [pc, #484]	; (8019450 <HAL_DMA_IRQHandler+0xc84>)
 801926c:	4293      	cmp	r3, r2
 801926e:	d036      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	4a77      	ldr	r2, [pc, #476]	; (8019454 <HAL_DMA_IRQHandler+0xc88>)
 8019276:	4293      	cmp	r3, r2
 8019278:	d031      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	4a76      	ldr	r2, [pc, #472]	; (8019458 <HAL_DMA_IRQHandler+0xc8c>)
 8019280:	4293      	cmp	r3, r2
 8019282:	d02c      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	4a74      	ldr	r2, [pc, #464]	; (801945c <HAL_DMA_IRQHandler+0xc90>)
 801928a:	4293      	cmp	r3, r2
 801928c:	d027      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	4a73      	ldr	r2, [pc, #460]	; (8019460 <HAL_DMA_IRQHandler+0xc94>)
 8019294:	4293      	cmp	r3, r2
 8019296:	d022      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	4a71      	ldr	r2, [pc, #452]	; (8019464 <HAL_DMA_IRQHandler+0xc98>)
 801929e:	4293      	cmp	r3, r2
 80192a0:	d01d      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	4a70      	ldr	r2, [pc, #448]	; (8019468 <HAL_DMA_IRQHandler+0xc9c>)
 80192a8:	4293      	cmp	r3, r2
 80192aa:	d018      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	4a6e      	ldr	r2, [pc, #440]	; (801946c <HAL_DMA_IRQHandler+0xca0>)
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d013      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4a6d      	ldr	r2, [pc, #436]	; (8019470 <HAL_DMA_IRQHandler+0xca4>)
 80192bc:	4293      	cmp	r3, r2
 80192be:	d00e      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	4a6b      	ldr	r2, [pc, #428]	; (8019474 <HAL_DMA_IRQHandler+0xca8>)
 80192c6:	4293      	cmp	r3, r2
 80192c8:	d009      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	4a6a      	ldr	r2, [pc, #424]	; (8019478 <HAL_DMA_IRQHandler+0xcac>)
 80192d0:	4293      	cmp	r3, r2
 80192d2:	d004      	beq.n	80192de <HAL_DMA_IRQHandler+0xb12>
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	4a68      	ldr	r2, [pc, #416]	; (801947c <HAL_DMA_IRQHandler+0xcb0>)
 80192da:	4293      	cmp	r3, r2
 80192dc:	d108      	bne.n	80192f0 <HAL_DMA_IRQHandler+0xb24>
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	f022 0208 	bic.w	r2, r2, #8
 80192ec:	601a      	str	r2, [r3, #0]
 80192ee:	e007      	b.n	8019300 <HAL_DMA_IRQHandler+0xb34>
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	681a      	ldr	r2, [r3, #0]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f022 0204 	bic.w	r2, r2, #4
 80192fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019304:	2b00      	cmp	r3, #0
 8019306:	f000 8165 	beq.w	80195d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019312:	e15f      	b.n	80195d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019318:	f003 031f 	and.w	r3, r3, #31
 801931c:	2202      	movs	r2, #2
 801931e:	409a      	lsls	r2, r3
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	4013      	ands	r3, r2
 8019324:	2b00      	cmp	r3, #0
 8019326:	f000 80c5 	beq.w	80194b4 <HAL_DMA_IRQHandler+0xce8>
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	f003 0302 	and.w	r3, r3, #2
 8019330:	2b00      	cmp	r3, #0
 8019332:	f000 80bf 	beq.w	80194b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801933a:	f003 031f 	and.w	r3, r3, #31
 801933e:	2202      	movs	r2, #2
 8019340:	409a      	lsls	r2, r3
 8019342:	69fb      	ldr	r3, [r7, #28]
 8019344:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801934c:	2b00      	cmp	r3, #0
 801934e:	d018      	beq.n	8019382 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8019350:	693b      	ldr	r3, [r7, #16]
 8019352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019356:	2b00      	cmp	r3, #0
 8019358:	d109      	bne.n	801936e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801935e:	2b00      	cmp	r3, #0
 8019360:	f000 813a 	beq.w	80195d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019368:	6878      	ldr	r0, [r7, #4]
 801936a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801936c:	e134      	b.n	80195d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019372:	2b00      	cmp	r3, #0
 8019374:	f000 8130 	beq.w	80195d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801937c:	6878      	ldr	r0, [r7, #4]
 801937e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019380:	e12a      	b.n	80195d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8019382:	693b      	ldr	r3, [r7, #16]
 8019384:	f003 0320 	and.w	r3, r3, #32
 8019388:	2b00      	cmp	r3, #0
 801938a:	f040 8089 	bne.w	80194a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	4a2b      	ldr	r2, [pc, #172]	; (8019440 <HAL_DMA_IRQHandler+0xc74>)
 8019394:	4293      	cmp	r3, r2
 8019396:	d04a      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	4a29      	ldr	r2, [pc, #164]	; (8019444 <HAL_DMA_IRQHandler+0xc78>)
 801939e:	4293      	cmp	r3, r2
 80193a0:	d045      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4a28      	ldr	r2, [pc, #160]	; (8019448 <HAL_DMA_IRQHandler+0xc7c>)
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d040      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4a26      	ldr	r2, [pc, #152]	; (801944c <HAL_DMA_IRQHandler+0xc80>)
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d03b      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	4a25      	ldr	r2, [pc, #148]	; (8019450 <HAL_DMA_IRQHandler+0xc84>)
 80193bc:	4293      	cmp	r3, r2
 80193be:	d036      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	4a23      	ldr	r2, [pc, #140]	; (8019454 <HAL_DMA_IRQHandler+0xc88>)
 80193c6:	4293      	cmp	r3, r2
 80193c8:	d031      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4a22      	ldr	r2, [pc, #136]	; (8019458 <HAL_DMA_IRQHandler+0xc8c>)
 80193d0:	4293      	cmp	r3, r2
 80193d2:	d02c      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a20      	ldr	r2, [pc, #128]	; (801945c <HAL_DMA_IRQHandler+0xc90>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d027      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4a1f      	ldr	r2, [pc, #124]	; (8019460 <HAL_DMA_IRQHandler+0xc94>)
 80193e4:	4293      	cmp	r3, r2
 80193e6:	d022      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a1d      	ldr	r2, [pc, #116]	; (8019464 <HAL_DMA_IRQHandler+0xc98>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	d01d      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	4a1c      	ldr	r2, [pc, #112]	; (8019468 <HAL_DMA_IRQHandler+0xc9c>)
 80193f8:	4293      	cmp	r3, r2
 80193fa:	d018      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4a1a      	ldr	r2, [pc, #104]	; (801946c <HAL_DMA_IRQHandler+0xca0>)
 8019402:	4293      	cmp	r3, r2
 8019404:	d013      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4a19      	ldr	r2, [pc, #100]	; (8019470 <HAL_DMA_IRQHandler+0xca4>)
 801940c:	4293      	cmp	r3, r2
 801940e:	d00e      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a17      	ldr	r2, [pc, #92]	; (8019474 <HAL_DMA_IRQHandler+0xca8>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d009      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	4a16      	ldr	r2, [pc, #88]	; (8019478 <HAL_DMA_IRQHandler+0xcac>)
 8019420:	4293      	cmp	r3, r2
 8019422:	d004      	beq.n	801942e <HAL_DMA_IRQHandler+0xc62>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4a14      	ldr	r2, [pc, #80]	; (801947c <HAL_DMA_IRQHandler+0xcb0>)
 801942a:	4293      	cmp	r3, r2
 801942c:	d128      	bne.n	8019480 <HAL_DMA_IRQHandler+0xcb4>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	681a      	ldr	r2, [r3, #0]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	f022 0214 	bic.w	r2, r2, #20
 801943c:	601a      	str	r2, [r3, #0]
 801943e:	e027      	b.n	8019490 <HAL_DMA_IRQHandler+0xcc4>
 8019440:	40020010 	.word	0x40020010
 8019444:	40020028 	.word	0x40020028
 8019448:	40020040 	.word	0x40020040
 801944c:	40020058 	.word	0x40020058
 8019450:	40020070 	.word	0x40020070
 8019454:	40020088 	.word	0x40020088
 8019458:	400200a0 	.word	0x400200a0
 801945c:	400200b8 	.word	0x400200b8
 8019460:	40020410 	.word	0x40020410
 8019464:	40020428 	.word	0x40020428
 8019468:	40020440 	.word	0x40020440
 801946c:	40020458 	.word	0x40020458
 8019470:	40020470 	.word	0x40020470
 8019474:	40020488 	.word	0x40020488
 8019478:	400204a0 	.word	0x400204a0
 801947c:	400204b8 	.word	0x400204b8
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	681a      	ldr	r2, [r3, #0]
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	f022 020a 	bic.w	r2, r2, #10
 801948e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2201      	movs	r2, #1
 8019494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	2200      	movs	r2, #0
 801949c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	f000 8097 	beq.w	80195d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194ae:	6878      	ldr	r0, [r7, #4]
 80194b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80194b2:	e091      	b.n	80195d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194b8:	f003 031f 	and.w	r3, r3, #31
 80194bc:	2208      	movs	r2, #8
 80194be:	409a      	lsls	r2, r3
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	4013      	ands	r3, r2
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f000 8088 	beq.w	80195da <HAL_DMA_IRQHandler+0xe0e>
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	f003 0308 	and.w	r3, r3, #8
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	f000 8082 	beq.w	80195da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a41      	ldr	r2, [pc, #260]	; (80195e0 <HAL_DMA_IRQHandler+0xe14>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d04a      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a3f      	ldr	r2, [pc, #252]	; (80195e4 <HAL_DMA_IRQHandler+0xe18>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d045      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	4a3e      	ldr	r2, [pc, #248]	; (80195e8 <HAL_DMA_IRQHandler+0xe1c>)
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d040      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4a3c      	ldr	r2, [pc, #240]	; (80195ec <HAL_DMA_IRQHandler+0xe20>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d03b      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4a3b      	ldr	r2, [pc, #236]	; (80195f0 <HAL_DMA_IRQHandler+0xe24>)
 8019504:	4293      	cmp	r3, r2
 8019506:	d036      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	4a39      	ldr	r2, [pc, #228]	; (80195f4 <HAL_DMA_IRQHandler+0xe28>)
 801950e:	4293      	cmp	r3, r2
 8019510:	d031      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	4a38      	ldr	r2, [pc, #224]	; (80195f8 <HAL_DMA_IRQHandler+0xe2c>)
 8019518:	4293      	cmp	r3, r2
 801951a:	d02c      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4a36      	ldr	r2, [pc, #216]	; (80195fc <HAL_DMA_IRQHandler+0xe30>)
 8019522:	4293      	cmp	r3, r2
 8019524:	d027      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	4a35      	ldr	r2, [pc, #212]	; (8019600 <HAL_DMA_IRQHandler+0xe34>)
 801952c:	4293      	cmp	r3, r2
 801952e:	d022      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	4a33      	ldr	r2, [pc, #204]	; (8019604 <HAL_DMA_IRQHandler+0xe38>)
 8019536:	4293      	cmp	r3, r2
 8019538:	d01d      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	4a32      	ldr	r2, [pc, #200]	; (8019608 <HAL_DMA_IRQHandler+0xe3c>)
 8019540:	4293      	cmp	r3, r2
 8019542:	d018      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	4a30      	ldr	r2, [pc, #192]	; (801960c <HAL_DMA_IRQHandler+0xe40>)
 801954a:	4293      	cmp	r3, r2
 801954c:	d013      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	4a2f      	ldr	r2, [pc, #188]	; (8019610 <HAL_DMA_IRQHandler+0xe44>)
 8019554:	4293      	cmp	r3, r2
 8019556:	d00e      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	4a2d      	ldr	r2, [pc, #180]	; (8019614 <HAL_DMA_IRQHandler+0xe48>)
 801955e:	4293      	cmp	r3, r2
 8019560:	d009      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	4a2c      	ldr	r2, [pc, #176]	; (8019618 <HAL_DMA_IRQHandler+0xe4c>)
 8019568:	4293      	cmp	r3, r2
 801956a:	d004      	beq.n	8019576 <HAL_DMA_IRQHandler+0xdaa>
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	4a2a      	ldr	r2, [pc, #168]	; (801961c <HAL_DMA_IRQHandler+0xe50>)
 8019572:	4293      	cmp	r3, r2
 8019574:	d108      	bne.n	8019588 <HAL_DMA_IRQHandler+0xdbc>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	681a      	ldr	r2, [r3, #0]
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	f022 021c 	bic.w	r2, r2, #28
 8019584:	601a      	str	r2, [r3, #0]
 8019586:	e007      	b.n	8019598 <HAL_DMA_IRQHandler+0xdcc>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	681a      	ldr	r2, [r3, #0]
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	f022 020e 	bic.w	r2, r2, #14
 8019596:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801959c:	f003 031f 	and.w	r3, r3, #31
 80195a0:	2201      	movs	r2, #1
 80195a2:	409a      	lsls	r2, r3
 80195a4:	69fb      	ldr	r3, [r7, #28]
 80195a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	2201      	movs	r2, #1
 80195ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	2201      	movs	r2, #1
 80195b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2200      	movs	r2, #0
 80195ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d009      	beq.n	80195da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	4798      	blx	r3
 80195ce:	e004      	b.n	80195da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80195d0:	bf00      	nop
 80195d2:	e002      	b.n	80195da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80195d4:	bf00      	nop
 80195d6:	e000      	b.n	80195da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80195d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80195da:	3728      	adds	r7, #40	; 0x28
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}
 80195e0:	40020010 	.word	0x40020010
 80195e4:	40020028 	.word	0x40020028
 80195e8:	40020040 	.word	0x40020040
 80195ec:	40020058 	.word	0x40020058
 80195f0:	40020070 	.word	0x40020070
 80195f4:	40020088 	.word	0x40020088
 80195f8:	400200a0 	.word	0x400200a0
 80195fc:	400200b8 	.word	0x400200b8
 8019600:	40020410 	.word	0x40020410
 8019604:	40020428 	.word	0x40020428
 8019608:	40020440 	.word	0x40020440
 801960c:	40020458 	.word	0x40020458
 8019610:	40020470 	.word	0x40020470
 8019614:	40020488 	.word	0x40020488
 8019618:	400204a0 	.word	0x400204a0
 801961c:	400204b8 	.word	0x400204b8

08019620 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019620:	b480      	push	{r7}
 8019622:	b087      	sub	sp, #28
 8019624:	af00      	add	r7, sp, #0
 8019626:	60f8      	str	r0, [r7, #12]
 8019628:	60b9      	str	r1, [r7, #8]
 801962a:	607a      	str	r2, [r7, #4]
 801962c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019632:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019638:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	4a7f      	ldr	r2, [pc, #508]	; (801983c <DMA_SetConfig+0x21c>)
 8019640:	4293      	cmp	r3, r2
 8019642:	d072      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	4a7d      	ldr	r2, [pc, #500]	; (8019840 <DMA_SetConfig+0x220>)
 801964a:	4293      	cmp	r3, r2
 801964c:	d06d      	beq.n	801972a <DMA_SetConfig+0x10a>
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	4a7c      	ldr	r2, [pc, #496]	; (8019844 <DMA_SetConfig+0x224>)
 8019654:	4293      	cmp	r3, r2
 8019656:	d068      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	4a7a      	ldr	r2, [pc, #488]	; (8019848 <DMA_SetConfig+0x228>)
 801965e:	4293      	cmp	r3, r2
 8019660:	d063      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	4a79      	ldr	r2, [pc, #484]	; (801984c <DMA_SetConfig+0x22c>)
 8019668:	4293      	cmp	r3, r2
 801966a:	d05e      	beq.n	801972a <DMA_SetConfig+0x10a>
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	4a77      	ldr	r2, [pc, #476]	; (8019850 <DMA_SetConfig+0x230>)
 8019672:	4293      	cmp	r3, r2
 8019674:	d059      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	4a76      	ldr	r2, [pc, #472]	; (8019854 <DMA_SetConfig+0x234>)
 801967c:	4293      	cmp	r3, r2
 801967e:	d054      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	4a74      	ldr	r2, [pc, #464]	; (8019858 <DMA_SetConfig+0x238>)
 8019686:	4293      	cmp	r3, r2
 8019688:	d04f      	beq.n	801972a <DMA_SetConfig+0x10a>
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	4a73      	ldr	r2, [pc, #460]	; (801985c <DMA_SetConfig+0x23c>)
 8019690:	4293      	cmp	r3, r2
 8019692:	d04a      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	4a71      	ldr	r2, [pc, #452]	; (8019860 <DMA_SetConfig+0x240>)
 801969a:	4293      	cmp	r3, r2
 801969c:	d045      	beq.n	801972a <DMA_SetConfig+0x10a>
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	4a70      	ldr	r2, [pc, #448]	; (8019864 <DMA_SetConfig+0x244>)
 80196a4:	4293      	cmp	r3, r2
 80196a6:	d040      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	4a6e      	ldr	r2, [pc, #440]	; (8019868 <DMA_SetConfig+0x248>)
 80196ae:	4293      	cmp	r3, r2
 80196b0:	d03b      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	4a6d      	ldr	r2, [pc, #436]	; (801986c <DMA_SetConfig+0x24c>)
 80196b8:	4293      	cmp	r3, r2
 80196ba:	d036      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	4a6b      	ldr	r2, [pc, #428]	; (8019870 <DMA_SetConfig+0x250>)
 80196c2:	4293      	cmp	r3, r2
 80196c4:	d031      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	4a6a      	ldr	r2, [pc, #424]	; (8019874 <DMA_SetConfig+0x254>)
 80196cc:	4293      	cmp	r3, r2
 80196ce:	d02c      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	4a68      	ldr	r2, [pc, #416]	; (8019878 <DMA_SetConfig+0x258>)
 80196d6:	4293      	cmp	r3, r2
 80196d8:	d027      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	4a67      	ldr	r2, [pc, #412]	; (801987c <DMA_SetConfig+0x25c>)
 80196e0:	4293      	cmp	r3, r2
 80196e2:	d022      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4a65      	ldr	r2, [pc, #404]	; (8019880 <DMA_SetConfig+0x260>)
 80196ea:	4293      	cmp	r3, r2
 80196ec:	d01d      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	4a64      	ldr	r2, [pc, #400]	; (8019884 <DMA_SetConfig+0x264>)
 80196f4:	4293      	cmp	r3, r2
 80196f6:	d018      	beq.n	801972a <DMA_SetConfig+0x10a>
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	4a62      	ldr	r2, [pc, #392]	; (8019888 <DMA_SetConfig+0x268>)
 80196fe:	4293      	cmp	r3, r2
 8019700:	d013      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	4a61      	ldr	r2, [pc, #388]	; (801988c <DMA_SetConfig+0x26c>)
 8019708:	4293      	cmp	r3, r2
 801970a:	d00e      	beq.n	801972a <DMA_SetConfig+0x10a>
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	4a5f      	ldr	r2, [pc, #380]	; (8019890 <DMA_SetConfig+0x270>)
 8019712:	4293      	cmp	r3, r2
 8019714:	d009      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	4a5e      	ldr	r2, [pc, #376]	; (8019894 <DMA_SetConfig+0x274>)
 801971c:	4293      	cmp	r3, r2
 801971e:	d004      	beq.n	801972a <DMA_SetConfig+0x10a>
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	4a5c      	ldr	r2, [pc, #368]	; (8019898 <DMA_SetConfig+0x278>)
 8019726:	4293      	cmp	r3, r2
 8019728:	d101      	bne.n	801972e <DMA_SetConfig+0x10e>
 801972a:	2301      	movs	r3, #1
 801972c:	e000      	b.n	8019730 <DMA_SetConfig+0x110>
 801972e:	2300      	movs	r3, #0
 8019730:	2b00      	cmp	r3, #0
 8019732:	d00d      	beq.n	8019750 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019738:	68fa      	ldr	r2, [r7, #12]
 801973a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801973c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019742:	2b00      	cmp	r3, #0
 8019744:	d004      	beq.n	8019750 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801974a:	68fa      	ldr	r2, [r7, #12]
 801974c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801974e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	4a39      	ldr	r2, [pc, #228]	; (801983c <DMA_SetConfig+0x21c>)
 8019756:	4293      	cmp	r3, r2
 8019758:	d04a      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	4a38      	ldr	r2, [pc, #224]	; (8019840 <DMA_SetConfig+0x220>)
 8019760:	4293      	cmp	r3, r2
 8019762:	d045      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4a36      	ldr	r2, [pc, #216]	; (8019844 <DMA_SetConfig+0x224>)
 801976a:	4293      	cmp	r3, r2
 801976c:	d040      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	4a35      	ldr	r2, [pc, #212]	; (8019848 <DMA_SetConfig+0x228>)
 8019774:	4293      	cmp	r3, r2
 8019776:	d03b      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4a33      	ldr	r2, [pc, #204]	; (801984c <DMA_SetConfig+0x22c>)
 801977e:	4293      	cmp	r3, r2
 8019780:	d036      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	4a32      	ldr	r2, [pc, #200]	; (8019850 <DMA_SetConfig+0x230>)
 8019788:	4293      	cmp	r3, r2
 801978a:	d031      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a30      	ldr	r2, [pc, #192]	; (8019854 <DMA_SetConfig+0x234>)
 8019792:	4293      	cmp	r3, r2
 8019794:	d02c      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a2f      	ldr	r2, [pc, #188]	; (8019858 <DMA_SetConfig+0x238>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d027      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	4a2d      	ldr	r2, [pc, #180]	; (801985c <DMA_SetConfig+0x23c>)
 80197a6:	4293      	cmp	r3, r2
 80197a8:	d022      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4a2c      	ldr	r2, [pc, #176]	; (8019860 <DMA_SetConfig+0x240>)
 80197b0:	4293      	cmp	r3, r2
 80197b2:	d01d      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	4a2a      	ldr	r2, [pc, #168]	; (8019864 <DMA_SetConfig+0x244>)
 80197ba:	4293      	cmp	r3, r2
 80197bc:	d018      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4a29      	ldr	r2, [pc, #164]	; (8019868 <DMA_SetConfig+0x248>)
 80197c4:	4293      	cmp	r3, r2
 80197c6:	d013      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4a27      	ldr	r2, [pc, #156]	; (801986c <DMA_SetConfig+0x24c>)
 80197ce:	4293      	cmp	r3, r2
 80197d0:	d00e      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	4a26      	ldr	r2, [pc, #152]	; (8019870 <DMA_SetConfig+0x250>)
 80197d8:	4293      	cmp	r3, r2
 80197da:	d009      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	4a24      	ldr	r2, [pc, #144]	; (8019874 <DMA_SetConfig+0x254>)
 80197e2:	4293      	cmp	r3, r2
 80197e4:	d004      	beq.n	80197f0 <DMA_SetConfig+0x1d0>
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4a23      	ldr	r2, [pc, #140]	; (8019878 <DMA_SetConfig+0x258>)
 80197ec:	4293      	cmp	r3, r2
 80197ee:	d101      	bne.n	80197f4 <DMA_SetConfig+0x1d4>
 80197f0:	2301      	movs	r3, #1
 80197f2:	e000      	b.n	80197f6 <DMA_SetConfig+0x1d6>
 80197f4:	2300      	movs	r3, #0
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d059      	beq.n	80198ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197fe:	f003 031f 	and.w	r3, r3, #31
 8019802:	223f      	movs	r2, #63	; 0x3f
 8019804:	409a      	lsls	r2, r3
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	681a      	ldr	r2, [r3, #0]
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8019818:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	683a      	ldr	r2, [r7, #0]
 8019820:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	689b      	ldr	r3, [r3, #8]
 8019826:	2b40      	cmp	r3, #64	; 0x40
 8019828:	d138      	bne.n	801989c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	68ba      	ldr	r2, [r7, #8]
 8019838:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801983a:	e086      	b.n	801994a <DMA_SetConfig+0x32a>
 801983c:	40020010 	.word	0x40020010
 8019840:	40020028 	.word	0x40020028
 8019844:	40020040 	.word	0x40020040
 8019848:	40020058 	.word	0x40020058
 801984c:	40020070 	.word	0x40020070
 8019850:	40020088 	.word	0x40020088
 8019854:	400200a0 	.word	0x400200a0
 8019858:	400200b8 	.word	0x400200b8
 801985c:	40020410 	.word	0x40020410
 8019860:	40020428 	.word	0x40020428
 8019864:	40020440 	.word	0x40020440
 8019868:	40020458 	.word	0x40020458
 801986c:	40020470 	.word	0x40020470
 8019870:	40020488 	.word	0x40020488
 8019874:	400204a0 	.word	0x400204a0
 8019878:	400204b8 	.word	0x400204b8
 801987c:	58025408 	.word	0x58025408
 8019880:	5802541c 	.word	0x5802541c
 8019884:	58025430 	.word	0x58025430
 8019888:	58025444 	.word	0x58025444
 801988c:	58025458 	.word	0x58025458
 8019890:	5802546c 	.word	0x5802546c
 8019894:	58025480 	.word	0x58025480
 8019898:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	68ba      	ldr	r2, [r7, #8]
 80198a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	60da      	str	r2, [r3, #12]
}
 80198ac:	e04d      	b.n	801994a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	4a29      	ldr	r2, [pc, #164]	; (8019958 <DMA_SetConfig+0x338>)
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d022      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	4a27      	ldr	r2, [pc, #156]	; (801995c <DMA_SetConfig+0x33c>)
 80198be:	4293      	cmp	r3, r2
 80198c0:	d01d      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4a26      	ldr	r2, [pc, #152]	; (8019960 <DMA_SetConfig+0x340>)
 80198c8:	4293      	cmp	r3, r2
 80198ca:	d018      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	4a24      	ldr	r2, [pc, #144]	; (8019964 <DMA_SetConfig+0x344>)
 80198d2:	4293      	cmp	r3, r2
 80198d4:	d013      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	4a23      	ldr	r2, [pc, #140]	; (8019968 <DMA_SetConfig+0x348>)
 80198dc:	4293      	cmp	r3, r2
 80198de:	d00e      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	4a21      	ldr	r2, [pc, #132]	; (801996c <DMA_SetConfig+0x34c>)
 80198e6:	4293      	cmp	r3, r2
 80198e8:	d009      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	4a20      	ldr	r2, [pc, #128]	; (8019970 <DMA_SetConfig+0x350>)
 80198f0:	4293      	cmp	r3, r2
 80198f2:	d004      	beq.n	80198fe <DMA_SetConfig+0x2de>
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	4a1e      	ldr	r2, [pc, #120]	; (8019974 <DMA_SetConfig+0x354>)
 80198fa:	4293      	cmp	r3, r2
 80198fc:	d101      	bne.n	8019902 <DMA_SetConfig+0x2e2>
 80198fe:	2301      	movs	r3, #1
 8019900:	e000      	b.n	8019904 <DMA_SetConfig+0x2e4>
 8019902:	2300      	movs	r3, #0
 8019904:	2b00      	cmp	r3, #0
 8019906:	d020      	beq.n	801994a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801990c:	f003 031f 	and.w	r3, r3, #31
 8019910:	2201      	movs	r2, #1
 8019912:	409a      	lsls	r2, r3
 8019914:	693b      	ldr	r3, [r7, #16]
 8019916:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	683a      	ldr	r2, [r7, #0]
 801991e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	689b      	ldr	r3, [r3, #8]
 8019924:	2b40      	cmp	r3, #64	; 0x40
 8019926:	d108      	bne.n	801993a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	68ba      	ldr	r2, [r7, #8]
 8019936:	60da      	str	r2, [r3, #12]
}
 8019938:	e007      	b.n	801994a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	68ba      	ldr	r2, [r7, #8]
 8019940:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	60da      	str	r2, [r3, #12]
}
 801994a:	bf00      	nop
 801994c:	371c      	adds	r7, #28
 801994e:	46bd      	mov	sp, r7
 8019950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019954:	4770      	bx	lr
 8019956:	bf00      	nop
 8019958:	58025408 	.word	0x58025408
 801995c:	5802541c 	.word	0x5802541c
 8019960:	58025430 	.word	0x58025430
 8019964:	58025444 	.word	0x58025444
 8019968:	58025458 	.word	0x58025458
 801996c:	5802546c 	.word	0x5802546c
 8019970:	58025480 	.word	0x58025480
 8019974:	58025494 	.word	0x58025494

08019978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019978:	b480      	push	{r7}
 801997a:	b085      	sub	sp, #20
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4a42      	ldr	r2, [pc, #264]	; (8019a90 <DMA_CalcBaseAndBitshift+0x118>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d04a      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4a41      	ldr	r2, [pc, #260]	; (8019a94 <DMA_CalcBaseAndBitshift+0x11c>)
 8019990:	4293      	cmp	r3, r2
 8019992:	d045      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	4a3f      	ldr	r2, [pc, #252]	; (8019a98 <DMA_CalcBaseAndBitshift+0x120>)
 801999a:	4293      	cmp	r3, r2
 801999c:	d040      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	4a3e      	ldr	r2, [pc, #248]	; (8019a9c <DMA_CalcBaseAndBitshift+0x124>)
 80199a4:	4293      	cmp	r3, r2
 80199a6:	d03b      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	4a3c      	ldr	r2, [pc, #240]	; (8019aa0 <DMA_CalcBaseAndBitshift+0x128>)
 80199ae:	4293      	cmp	r3, r2
 80199b0:	d036      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	4a3b      	ldr	r2, [pc, #236]	; (8019aa4 <DMA_CalcBaseAndBitshift+0x12c>)
 80199b8:	4293      	cmp	r3, r2
 80199ba:	d031      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	4a39      	ldr	r2, [pc, #228]	; (8019aa8 <DMA_CalcBaseAndBitshift+0x130>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d02c      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	4a38      	ldr	r2, [pc, #224]	; (8019aac <DMA_CalcBaseAndBitshift+0x134>)
 80199cc:	4293      	cmp	r3, r2
 80199ce:	d027      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	4a36      	ldr	r2, [pc, #216]	; (8019ab0 <DMA_CalcBaseAndBitshift+0x138>)
 80199d6:	4293      	cmp	r3, r2
 80199d8:	d022      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	4a35      	ldr	r2, [pc, #212]	; (8019ab4 <DMA_CalcBaseAndBitshift+0x13c>)
 80199e0:	4293      	cmp	r3, r2
 80199e2:	d01d      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	4a33      	ldr	r2, [pc, #204]	; (8019ab8 <DMA_CalcBaseAndBitshift+0x140>)
 80199ea:	4293      	cmp	r3, r2
 80199ec:	d018      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	4a32      	ldr	r2, [pc, #200]	; (8019abc <DMA_CalcBaseAndBitshift+0x144>)
 80199f4:	4293      	cmp	r3, r2
 80199f6:	d013      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	4a30      	ldr	r2, [pc, #192]	; (8019ac0 <DMA_CalcBaseAndBitshift+0x148>)
 80199fe:	4293      	cmp	r3, r2
 8019a00:	d00e      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	4a2f      	ldr	r2, [pc, #188]	; (8019ac4 <DMA_CalcBaseAndBitshift+0x14c>)
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	d009      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	4a2d      	ldr	r2, [pc, #180]	; (8019ac8 <DMA_CalcBaseAndBitshift+0x150>)
 8019a12:	4293      	cmp	r3, r2
 8019a14:	d004      	beq.n	8019a20 <DMA_CalcBaseAndBitshift+0xa8>
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4a2c      	ldr	r2, [pc, #176]	; (8019acc <DMA_CalcBaseAndBitshift+0x154>)
 8019a1c:	4293      	cmp	r3, r2
 8019a1e:	d101      	bne.n	8019a24 <DMA_CalcBaseAndBitshift+0xac>
 8019a20:	2301      	movs	r3, #1
 8019a22:	e000      	b.n	8019a26 <DMA_CalcBaseAndBitshift+0xae>
 8019a24:	2300      	movs	r3, #0
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d024      	beq.n	8019a74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	b2db      	uxtb	r3, r3
 8019a30:	3b10      	subs	r3, #16
 8019a32:	4a27      	ldr	r2, [pc, #156]	; (8019ad0 <DMA_CalcBaseAndBitshift+0x158>)
 8019a34:	fba2 2303 	umull	r2, r3, r2, r3
 8019a38:	091b      	lsrs	r3, r3, #4
 8019a3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	f003 0307 	and.w	r3, r3, #7
 8019a42:	4a24      	ldr	r2, [pc, #144]	; (8019ad4 <DMA_CalcBaseAndBitshift+0x15c>)
 8019a44:	5cd3      	ldrb	r3, [r2, r3]
 8019a46:	461a      	mov	r2, r3
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	2b03      	cmp	r3, #3
 8019a50:	d908      	bls.n	8019a64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	461a      	mov	r2, r3
 8019a58:	4b1f      	ldr	r3, [pc, #124]	; (8019ad8 <DMA_CalcBaseAndBitshift+0x160>)
 8019a5a:	4013      	ands	r3, r2
 8019a5c:	1d1a      	adds	r2, r3, #4
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	659a      	str	r2, [r3, #88]	; 0x58
 8019a62:	e00d      	b.n	8019a80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	461a      	mov	r2, r3
 8019a6a:	4b1b      	ldr	r3, [pc, #108]	; (8019ad8 <DMA_CalcBaseAndBitshift+0x160>)
 8019a6c:	4013      	ands	r3, r2
 8019a6e:	687a      	ldr	r2, [r7, #4]
 8019a70:	6593      	str	r3, [r2, #88]	; 0x58
 8019a72:	e005      	b.n	8019a80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3714      	adds	r7, #20
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8e:	4770      	bx	lr
 8019a90:	40020010 	.word	0x40020010
 8019a94:	40020028 	.word	0x40020028
 8019a98:	40020040 	.word	0x40020040
 8019a9c:	40020058 	.word	0x40020058
 8019aa0:	40020070 	.word	0x40020070
 8019aa4:	40020088 	.word	0x40020088
 8019aa8:	400200a0 	.word	0x400200a0
 8019aac:	400200b8 	.word	0x400200b8
 8019ab0:	40020410 	.word	0x40020410
 8019ab4:	40020428 	.word	0x40020428
 8019ab8:	40020440 	.word	0x40020440
 8019abc:	40020458 	.word	0x40020458
 8019ac0:	40020470 	.word	0x40020470
 8019ac4:	40020488 	.word	0x40020488
 8019ac8:	400204a0 	.word	0x400204a0
 8019acc:	400204b8 	.word	0x400204b8
 8019ad0:	aaaaaaab 	.word	0xaaaaaaab
 8019ad4:	08021308 	.word	0x08021308
 8019ad8:	fffffc00 	.word	0xfffffc00

08019adc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019adc:	b480      	push	{r7}
 8019ade:	b085      	sub	sp, #20
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	699b      	ldr	r3, [r3, #24]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d120      	bne.n	8019b32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019af4:	2b03      	cmp	r3, #3
 8019af6:	d858      	bhi.n	8019baa <DMA_CheckFifoParam+0xce>
 8019af8:	a201      	add	r2, pc, #4	; (adr r2, 8019b00 <DMA_CheckFifoParam+0x24>)
 8019afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019afe:	bf00      	nop
 8019b00:	08019b11 	.word	0x08019b11
 8019b04:	08019b23 	.word	0x08019b23
 8019b08:	08019b11 	.word	0x08019b11
 8019b0c:	08019bab 	.word	0x08019bab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d048      	beq.n	8019bae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019b20:	e045      	b.n	8019bae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019b2a:	d142      	bne.n	8019bb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019b30:	e03f      	b.n	8019bb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	699b      	ldr	r3, [r3, #24]
 8019b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019b3a:	d123      	bne.n	8019b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b40:	2b03      	cmp	r3, #3
 8019b42:	d838      	bhi.n	8019bb6 <DMA_CheckFifoParam+0xda>
 8019b44:	a201      	add	r2, pc, #4	; (adr r2, 8019b4c <DMA_CheckFifoParam+0x70>)
 8019b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b4a:	bf00      	nop
 8019b4c:	08019b5d 	.word	0x08019b5d
 8019b50:	08019b63 	.word	0x08019b63
 8019b54:	08019b5d 	.word	0x08019b5d
 8019b58:	08019b75 	.word	0x08019b75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8019b5c:	2301      	movs	r3, #1
 8019b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8019b60:	e030      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d025      	beq.n	8019bba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019b72:	e022      	b.n	8019bba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019b7c:	d11f      	bne.n	8019bbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8019b7e:	2301      	movs	r3, #1
 8019b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019b82:	e01c      	b.n	8019bbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b88:	2b02      	cmp	r3, #2
 8019b8a:	d902      	bls.n	8019b92 <DMA_CheckFifoParam+0xb6>
 8019b8c:	2b03      	cmp	r3, #3
 8019b8e:	d003      	beq.n	8019b98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8019b90:	e018      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8019b92:	2301      	movs	r3, #1
 8019b94:	73fb      	strb	r3, [r7, #15]
        break;
 8019b96:	e015      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d00e      	beq.n	8019bc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8019ba4:	2301      	movs	r3, #1
 8019ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ba8:	e00b      	b.n	8019bc2 <DMA_CheckFifoParam+0xe6>
        break;
 8019baa:	bf00      	nop
 8019bac:	e00a      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8019bae:	bf00      	nop
 8019bb0:	e008      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8019bb2:	bf00      	nop
 8019bb4:	e006      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8019bb6:	bf00      	nop
 8019bb8:	e004      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8019bba:	bf00      	nop
 8019bbc:	e002      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8019bbe:	bf00      	nop
 8019bc0:	e000      	b.n	8019bc4 <DMA_CheckFifoParam+0xe8>
    break;
 8019bc2:	bf00      	nop
    }
  }

  return status;
 8019bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3714      	adds	r7, #20
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd0:	4770      	bx	lr
 8019bd2:	bf00      	nop

08019bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b085      	sub	sp, #20
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4a38      	ldr	r2, [pc, #224]	; (8019cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8019be8:	4293      	cmp	r3, r2
 8019bea:	d022      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	4a36      	ldr	r2, [pc, #216]	; (8019ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8019bf2:	4293      	cmp	r3, r2
 8019bf4:	d01d      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	4a35      	ldr	r2, [pc, #212]	; (8019cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8019bfc:	4293      	cmp	r3, r2
 8019bfe:	d018      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	4a33      	ldr	r2, [pc, #204]	; (8019cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8019c06:	4293      	cmp	r3, r2
 8019c08:	d013      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	4a32      	ldr	r2, [pc, #200]	; (8019cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8019c10:	4293      	cmp	r3, r2
 8019c12:	d00e      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	4a30      	ldr	r2, [pc, #192]	; (8019cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	d009      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	4a2f      	ldr	r2, [pc, #188]	; (8019ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019c24:	4293      	cmp	r3, r2
 8019c26:	d004      	beq.n	8019c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	4a2d      	ldr	r2, [pc, #180]	; (8019ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8019c2e:	4293      	cmp	r3, r2
 8019c30:	d101      	bne.n	8019c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8019c32:	2301      	movs	r3, #1
 8019c34:	e000      	b.n	8019c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8019c36:	2300      	movs	r3, #0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d01a      	beq.n	8019c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	b2db      	uxtb	r3, r3
 8019c42:	3b08      	subs	r3, #8
 8019c44:	4a28      	ldr	r2, [pc, #160]	; (8019ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8019c46:	fba2 2303 	umull	r2, r3, r2, r3
 8019c4a:	091b      	lsrs	r3, r3, #4
 8019c4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8019c4e:	68fa      	ldr	r2, [r7, #12]
 8019c50:	4b26      	ldr	r3, [pc, #152]	; (8019cec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8019c52:	4413      	add	r3, r2
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	461a      	mov	r2, r3
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	4a24      	ldr	r2, [pc, #144]	; (8019cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8019c60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	f003 031f 	and.w	r3, r3, #31
 8019c68:	2201      	movs	r2, #1
 8019c6a:	409a      	lsls	r2, r3
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8019c70:	e024      	b.n	8019cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	b2db      	uxtb	r3, r3
 8019c78:	3b10      	subs	r3, #16
 8019c7a:	4a1e      	ldr	r2, [pc, #120]	; (8019cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8019c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8019c80:	091b      	lsrs	r3, r3, #4
 8019c82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	4a1c      	ldr	r2, [pc, #112]	; (8019cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8019c88:	4293      	cmp	r3, r2
 8019c8a:	d806      	bhi.n	8019c9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	4a1b      	ldr	r2, [pc, #108]	; (8019cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8019c90:	4293      	cmp	r3, r2
 8019c92:	d902      	bls.n	8019c9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	3308      	adds	r3, #8
 8019c98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8019c9a:	68fa      	ldr	r2, [r7, #12]
 8019c9c:	4b18      	ldr	r3, [pc, #96]	; (8019d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8019c9e:	4413      	add	r3, r2
 8019ca0:	009b      	lsls	r3, r3, #2
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	4a16      	ldr	r2, [pc, #88]	; (8019d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8019cac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	f003 031f 	and.w	r3, r3, #31
 8019cb4:	2201      	movs	r2, #1
 8019cb6:	409a      	lsls	r2, r3
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8019cbc:	bf00      	nop
 8019cbe:	3714      	adds	r7, #20
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr
 8019cc8:	58025408 	.word	0x58025408
 8019ccc:	5802541c 	.word	0x5802541c
 8019cd0:	58025430 	.word	0x58025430
 8019cd4:	58025444 	.word	0x58025444
 8019cd8:	58025458 	.word	0x58025458
 8019cdc:	5802546c 	.word	0x5802546c
 8019ce0:	58025480 	.word	0x58025480
 8019ce4:	58025494 	.word	0x58025494
 8019ce8:	cccccccd 	.word	0xcccccccd
 8019cec:	16009600 	.word	0x16009600
 8019cf0:	58025880 	.word	0x58025880
 8019cf4:	aaaaaaab 	.word	0xaaaaaaab
 8019cf8:	400204b8 	.word	0x400204b8
 8019cfc:	4002040f 	.word	0x4002040f
 8019d00:	10008200 	.word	0x10008200
 8019d04:	40020880 	.word	0x40020880

08019d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019d08:	b480      	push	{r7}
 8019d0a:	b085      	sub	sp, #20
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d04a      	beq.n	8019db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	2b08      	cmp	r3, #8
 8019d22:	d847      	bhi.n	8019db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4a25      	ldr	r2, [pc, #148]	; (8019dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	d022      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4a24      	ldr	r2, [pc, #144]	; (8019dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d01d      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	4a22      	ldr	r2, [pc, #136]	; (8019dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d018      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	4a21      	ldr	r2, [pc, #132]	; (8019dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	d013      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4a1f      	ldr	r2, [pc, #124]	; (8019dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8019d52:	4293      	cmp	r3, r2
 8019d54:	d00e      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	4a1e      	ldr	r2, [pc, #120]	; (8019dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8019d5c:	4293      	cmp	r3, r2
 8019d5e:	d009      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	4a1c      	ldr	r2, [pc, #112]	; (8019dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8019d66:	4293      	cmp	r3, r2
 8019d68:	d004      	beq.n	8019d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4a1b      	ldr	r2, [pc, #108]	; (8019ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d101      	bne.n	8019d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8019d74:	2301      	movs	r3, #1
 8019d76:	e000      	b.n	8019d7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8019d78:	2300      	movs	r3, #0
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d00a      	beq.n	8019d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8019d7e:	68fa      	ldr	r2, [r7, #12]
 8019d80:	4b17      	ldr	r3, [pc, #92]	; (8019de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8019d82:	4413      	add	r3, r2
 8019d84:	009b      	lsls	r3, r3, #2
 8019d86:	461a      	mov	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	4a15      	ldr	r2, [pc, #84]	; (8019de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8019d90:	671a      	str	r2, [r3, #112]	; 0x70
 8019d92:	e009      	b.n	8019da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019d94:	68fa      	ldr	r2, [r7, #12]
 8019d96:	4b14      	ldr	r3, [pc, #80]	; (8019de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8019d98:	4413      	add	r3, r2
 8019d9a:	009b      	lsls	r3, r3, #2
 8019d9c:	461a      	mov	r2, r3
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	4a11      	ldr	r2, [pc, #68]	; (8019dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8019da6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	3b01      	subs	r3, #1
 8019dac:	2201      	movs	r2, #1
 8019dae:	409a      	lsls	r2, r3
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8019db4:	bf00      	nop
 8019db6:	3714      	adds	r7, #20
 8019db8:	46bd      	mov	sp, r7
 8019dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbe:	4770      	bx	lr
 8019dc0:	58025408 	.word	0x58025408
 8019dc4:	5802541c 	.word	0x5802541c
 8019dc8:	58025430 	.word	0x58025430
 8019dcc:	58025444 	.word	0x58025444
 8019dd0:	58025458 	.word	0x58025458
 8019dd4:	5802546c 	.word	0x5802546c
 8019dd8:	58025480 	.word	0x58025480
 8019ddc:	58025494 	.word	0x58025494
 8019de0:	1600963f 	.word	0x1600963f
 8019de4:	58025940 	.word	0x58025940
 8019de8:	1000823f 	.word	0x1000823f
 8019dec:	40020940 	.word	0x40020940

08019df0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b098      	sub	sp, #96	; 0x60
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8019df8:	4a84      	ldr	r2, [pc, #528]	; (801a00c <HAL_FDCAN_Init+0x21c>)
 8019dfa:	f107 030c 	add.w	r3, r7, #12
 8019dfe:	4611      	mov	r1, r2
 8019e00:	224c      	movs	r2, #76	; 0x4c
 8019e02:	4618      	mov	r0, r3
 8019e04:	f006 ffa4 	bl	8020d50 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d101      	bne.n	8019e12 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e1c6      	b.n	801a1a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	4a7e      	ldr	r2, [pc, #504]	; (801a010 <HAL_FDCAN_Init+0x220>)
 8019e18:	4293      	cmp	r3, r2
 8019e1a:	d106      	bne.n	8019e2a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019e24:	461a      	mov	r2, r3
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d106      	bne.n	8019e44 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	2200      	movs	r2, #0
 8019e3a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8019e3e:	6878      	ldr	r0, [r7, #4]
 8019e40:	f7fa fef4 	bl	8014c2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	699a      	ldr	r2, [r3, #24]
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	f022 0210 	bic.w	r2, r2, #16
 8019e52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019e54:	f7fb fd40 	bl	80158d8 <HAL_GetTick>
 8019e58:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019e5a:	e014      	b.n	8019e86 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019e5c:	f7fb fd3c 	bl	80158d8 <HAL_GetTick>
 8019e60:	4602      	mov	r2, r0
 8019e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019e64:	1ad3      	subs	r3, r2, r3
 8019e66:	2b0a      	cmp	r3, #10
 8019e68:	d90d      	bls.n	8019e86 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e70:	f043 0201 	orr.w	r2, r3, #1
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2203      	movs	r2, #3
 8019e7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8019e82:	2301      	movs	r3, #1
 8019e84:	e18c      	b.n	801a1a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	699b      	ldr	r3, [r3, #24]
 8019e8c:	f003 0308 	and.w	r3, r3, #8
 8019e90:	2b08      	cmp	r3, #8
 8019e92:	d0e3      	beq.n	8019e5c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	699a      	ldr	r2, [r3, #24]
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	f042 0201 	orr.w	r2, r2, #1
 8019ea2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019ea4:	f7fb fd18 	bl	80158d8 <HAL_GetTick>
 8019ea8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8019eaa:	e014      	b.n	8019ed6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019eac:	f7fb fd14 	bl	80158d8 <HAL_GetTick>
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019eb4:	1ad3      	subs	r3, r2, r3
 8019eb6:	2b0a      	cmp	r3, #10
 8019eb8:	d90d      	bls.n	8019ed6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ec0:	f043 0201 	orr.w	r2, r3, #1
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	2203      	movs	r2, #3
 8019ece:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	e164      	b.n	801a1a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	699b      	ldr	r3, [r3, #24]
 8019edc:	f003 0301 	and.w	r3, r3, #1
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d0e3      	beq.n	8019eac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	699a      	ldr	r2, [r3, #24]
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	f042 0202 	orr.w	r2, r2, #2
 8019ef2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	7c1b      	ldrb	r3, [r3, #16]
 8019ef8:	2b01      	cmp	r3, #1
 8019efa:	d108      	bne.n	8019f0e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	699a      	ldr	r2, [r3, #24]
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019f0a:	619a      	str	r2, [r3, #24]
 8019f0c:	e007      	b.n	8019f1e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	699a      	ldr	r2, [r3, #24]
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019f1c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	7c5b      	ldrb	r3, [r3, #17]
 8019f22:	2b01      	cmp	r3, #1
 8019f24:	d108      	bne.n	8019f38 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	699a      	ldr	r2, [r3, #24]
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019f34:	619a      	str	r2, [r3, #24]
 8019f36:	e007      	b.n	8019f48 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	699a      	ldr	r2, [r3, #24]
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019f46:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	7c9b      	ldrb	r3, [r3, #18]
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d108      	bne.n	8019f62 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	699a      	ldr	r2, [r3, #24]
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019f5e:	619a      	str	r2, [r3, #24]
 8019f60:	e007      	b.n	8019f72 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	699a      	ldr	r2, [r3, #24]
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019f70:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	699b      	ldr	r3, [r3, #24]
 8019f78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	689a      	ldr	r2, [r3, #8]
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	430a      	orrs	r2, r1
 8019f86:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	699a      	ldr	r2, [r3, #24]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8019f96:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	691a      	ldr	r2, [r3, #16]
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	f022 0210 	bic.w	r2, r2, #16
 8019fa6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	2b01      	cmp	r3, #1
 8019fae:	d108      	bne.n	8019fc2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	699a      	ldr	r2, [r3, #24]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	f042 0204 	orr.w	r2, r2, #4
 8019fbe:	619a      	str	r2, [r3, #24]
 8019fc0:	e030      	b.n	801a024 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	68db      	ldr	r3, [r3, #12]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d02c      	beq.n	801a024 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	68db      	ldr	r3, [r3, #12]
 8019fce:	2b02      	cmp	r3, #2
 8019fd0:	d020      	beq.n	801a014 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	699a      	ldr	r2, [r3, #24]
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019fe0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	691a      	ldr	r2, [r3, #16]
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	f042 0210 	orr.w	r2, r2, #16
 8019ff0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	68db      	ldr	r3, [r3, #12]
 8019ff6:	2b03      	cmp	r3, #3
 8019ff8:	d114      	bne.n	801a024 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	699a      	ldr	r2, [r3, #24]
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	f042 0220 	orr.w	r2, r2, #32
 801a008:	619a      	str	r2, [r3, #24]
 801a00a:	e00b      	b.n	801a024 <HAL_FDCAN_Init+0x234>
 801a00c:	08021258 	.word	0x08021258
 801a010:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	699a      	ldr	r2, [r3, #24]
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	f042 0220 	orr.w	r2, r2, #32
 801a022:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	699b      	ldr	r3, [r3, #24]
 801a028:	3b01      	subs	r3, #1
 801a02a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	69db      	ldr	r3, [r3, #28]
 801a030:	3b01      	subs	r3, #1
 801a032:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a034:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6a1b      	ldr	r3, [r3, #32]
 801a03a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801a03c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	695b      	ldr	r3, [r3, #20]
 801a044:	3b01      	subs	r3, #1
 801a046:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801a04c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801a04e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	689b      	ldr	r3, [r3, #8]
 801a054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a058:	d115      	bne.n	801a086 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a05e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a064:	3b01      	subs	r3, #1
 801a066:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a068:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a06e:	3b01      	subs	r3, #1
 801a070:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 801a072:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07a:	3b01      	subs	r3, #1
 801a07c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 801a082:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801a084:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d00a      	beq.n	801a0a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	430a      	orrs	r2, r1
 801a0a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a0ac:	4413      	add	r3, r2
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d011      	beq.n	801a0d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a0ba:	f023 0107 	bic.w	r1, r3, #7
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a0c2:	009b      	lsls	r3, r3, #2
 801a0c4:	3360      	adds	r3, #96	; 0x60
 801a0c6:	443b      	add	r3, r7
 801a0c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	430a      	orrs	r2, r1
 801a0d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d011      	beq.n	801a102 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a0e6:	f023 0107 	bic.w	r1, r3, #7
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ee:	009b      	lsls	r3, r3, #2
 801a0f0:	3360      	adds	r3, #96	; 0x60
 801a0f2:	443b      	add	r3, r7
 801a0f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	430a      	orrs	r2, r1
 801a0fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a106:	2b00      	cmp	r3, #0
 801a108:	d012      	beq.n	801a130 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a112:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a11a:	009b      	lsls	r3, r3, #2
 801a11c:	3360      	adds	r3, #96	; 0x60
 801a11e:	443b      	add	r3, r7
 801a120:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801a124:	011a      	lsls	r2, r3, #4
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	430a      	orrs	r2, r1
 801a12c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a134:	2b00      	cmp	r3, #0
 801a136:	d012      	beq.n	801a15e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a140:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a148:	009b      	lsls	r3, r3, #2
 801a14a:	3360      	adds	r3, #96	; 0x60
 801a14c:	443b      	add	r3, r7
 801a14e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801a152:	021a      	lsls	r2, r3, #8
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	430a      	orrs	r2, r1
 801a15a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	4a11      	ldr	r2, [pc, #68]	; (801a1a8 <HAL_FDCAN_Init+0x3b8>)
 801a164:	4293      	cmp	r3, r2
 801a166:	d107      	bne.n	801a178 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	689a      	ldr	r2, [r3, #8]
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	685b      	ldr	r3, [r3, #4]
 801a172:	f022 0203 	bic.w	r2, r2, #3
 801a176:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2200      	movs	r2, #0
 801a17c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2200      	movs	r2, #0
 801a184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	2201      	movs	r2, #1
 801a18c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 801a190:	6878      	ldr	r0, [r7, #4]
 801a192:	f000 fd83 	bl	801ac9c <FDCAN_CalcultateRamBlockAddresses>
 801a196:	4603      	mov	r3, r0
 801a198:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 801a19c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3760      	adds	r7, #96	; 0x60
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	4000a000 	.word	0x4000a000

0801a1ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b083      	sub	sp, #12
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a1ba:	b2db      	uxtb	r3, r3
 801a1bc:	2b01      	cmp	r3, #1
 801a1be:	d111      	bne.n	801a1e4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	2202      	movs	r2, #2
 801a1c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	699a      	ldr	r2, [r3, #24]
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	f022 0201 	bic.w	r2, r2, #1
 801a1d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2200      	movs	r2, #0
 801a1dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e008      	b.n	801a1f6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a1ea:	f043 0204 	orr.w	r2, r3, #4
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a1f4:	2301      	movs	r3, #1
  }
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	370c      	adds	r7, #12
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a200:	4770      	bx	lr

0801a202 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 801a202:	b580      	push	{r7, lr}
 801a204:	b086      	sub	sp, #24
 801a206:	af00      	add	r7, sp, #0
 801a208:	60f8      	str	r0, [r7, #12]
 801a20a:	60b9      	str	r1, [r7, #8]
 801a20c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a214:	b2db      	uxtb	r3, r3
 801a216:	2b02      	cmp	r3, #2
 801a218:	d141      	bne.n	801a29e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a222:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 801a226:	2b00      	cmp	r3, #0
 801a228:	d109      	bne.n	801a23e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a230:	f043 0220 	orr.w	r2, r3, #32
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 801a23a:	2301      	movs	r3, #1
 801a23c:	e038      	b.n	801a2b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d009      	beq.n	801a262 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 801a25e:	2301      	movs	r3, #1
 801a260:	e026      	b.n	801a2b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a26a:	0c1b      	lsrs	r3, r3, #16
 801a26c:	f003 031f 	and.w	r3, r3, #31
 801a270:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	687a      	ldr	r2, [r7, #4]
 801a276:	68b9      	ldr	r1, [r7, #8]
 801a278:	68f8      	ldr	r0, [r7, #12]
 801a27a:	f000 fe95 	bl	801afa8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	2101      	movs	r1, #1
 801a284:	697a      	ldr	r2, [r7, #20]
 801a286:	fa01 f202 	lsl.w	r2, r1, r2
 801a28a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 801a28e:	2201      	movs	r2, #1
 801a290:	697b      	ldr	r3, [r7, #20]
 801a292:	409a      	lsls	r2, r3
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 801a29a:	2300      	movs	r3, #0
 801a29c:	e008      	b.n	801a2b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a2a4:	f043 0208 	orr.w	r2, r3, #8
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a2ae:	2301      	movs	r3, #1
  }
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3718      	adds	r7, #24
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b08b      	sub	sp, #44	; 0x2c
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
 801a2c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a2d0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 801a2d2:	7efb      	ldrb	r3, [r7, #27]
 801a2d4:	2b02      	cmp	r3, #2
 801a2d6:	f040 814b 	bne.w	801a570 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801a2da:	68bb      	ldr	r3, [r7, #8]
 801a2dc:	2b40      	cmp	r3, #64	; 0x40
 801a2de:	d14d      	bne.n	801a37c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a2e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d109      	bne.n	801a304 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a2f6:	f043 0220 	orr.w	r2, r3, #32
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a300:	2301      	movs	r3, #1
 801a302:	e13e      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a310:	2b00      	cmp	r3, #0
 801a312:	d109      	bne.n	801a328 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a31a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a324:	2301      	movs	r3, #1
 801a326:	e12c      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a330:	0e1b      	lsrs	r3, r3, #24
 801a332:	f003 0301 	and.w	r3, r3, #1
 801a336:	2b01      	cmp	r3, #1
 801a338:	d10b      	bne.n	801a352 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a342:	0fdb      	lsrs	r3, r3, #31
 801a344:	f003 0301 	and.w	r3, r3, #1
 801a348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a34c:	d101      	bne.n	801a352 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 801a34e:	2301      	movs	r3, #1
 801a350:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a35a:	0a1b      	lsrs	r3, r3, #8
 801a35c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a360:	69fa      	ldr	r2, [r7, #28]
 801a362:	4413      	add	r3, r2
 801a364:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a36e:	69f9      	ldr	r1, [r7, #28]
 801a370:	fb01 f303 	mul.w	r3, r1, r3
 801a374:	009b      	lsls	r3, r3, #2
 801a376:	4413      	add	r3, r2
 801a378:	627b      	str	r3, [r7, #36]	; 0x24
 801a37a:	e069      	b.n	801a450 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 801a37c:	68bb      	ldr	r3, [r7, #8]
 801a37e:	2b41      	cmp	r3, #65	; 0x41
 801a380:	d14d      	bne.n	801a41e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a38a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d109      	bne.n	801a3a6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a398:	f043 0220 	orr.w	r2, r3, #32
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	e0ed      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d109      	bne.n	801a3ca <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a3bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a3c6:	2301      	movs	r3, #1
 801a3c8:	e0db      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a3d2:	0e1b      	lsrs	r3, r3, #24
 801a3d4:	f003 0301 	and.w	r3, r3, #1
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d10b      	bne.n	801a3f4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a3e4:	0fdb      	lsrs	r3, r3, #31
 801a3e6:	f003 0301 	and.w	r3, r3, #1
 801a3ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a3ee:	d101      	bne.n	801a3f4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 801a3f0:	2301      	movs	r3, #1
 801a3f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a3fc:	0a1b      	lsrs	r3, r3, #8
 801a3fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a402:	69fa      	ldr	r2, [r7, #28]
 801a404:	4413      	add	r3, r2
 801a406:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a410:	69f9      	ldr	r1, [r7, #28]
 801a412:	fb01 f303 	mul.w	r3, r1, r3
 801a416:	009b      	lsls	r3, r3, #2
 801a418:	4413      	add	r3, r2
 801a41a:	627b      	str	r3, [r7, #36]	; 0x24
 801a41c:	e018      	b.n	801a450 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a422:	68ba      	ldr	r2, [r7, #8]
 801a424:	429a      	cmp	r2, r3
 801a426:	d309      	bcc.n	801a43c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a42e:	f043 0220 	orr.w	r2, r3, #32
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801a438:	2301      	movs	r3, #1
 801a43a:	e0a2      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a444:	68b9      	ldr	r1, [r7, #8]
 801a446:	fb01 f303 	mul.w	r3, r1, r3
 801a44a:	009b      	lsls	r3, r3, #2
 801a44c:	4413      	add	r3, r2
 801a44e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 801a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d107      	bne.n	801a474 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 801a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	0c9b      	lsrs	r3, r3, #18
 801a46a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	601a      	str	r2, [r3, #0]
 801a472:	e005      	b.n	801a480 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 801a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 801a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 801a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 801a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49a:	3304      	adds	r3, #4
 801a49c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 801a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 801a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 801a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 801a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	0e1b      	lsrs	r3, r3, #24
 801a4d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 801a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	0fda      	lsrs	r2, r3, #31
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 801a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e6:	3304      	adds	r3, #4
 801a4e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 801a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	623b      	str	r3, [r7, #32]
 801a4f2:	e00a      	b.n	801a50a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 801a4f4:	697a      	ldr	r2, [r7, #20]
 801a4f6:	6a3b      	ldr	r3, [r7, #32]
 801a4f8:	441a      	add	r2, r3
 801a4fa:	6839      	ldr	r1, [r7, #0]
 801a4fc:	6a3b      	ldr	r3, [r7, #32]
 801a4fe:	440b      	add	r3, r1
 801a500:	7812      	ldrb	r2, [r2, #0]
 801a502:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801a504:	6a3b      	ldr	r3, [r7, #32]
 801a506:	3301      	adds	r3, #1
 801a508:	623b      	str	r3, [r7, #32]
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	68db      	ldr	r3, [r3, #12]
 801a50e:	0c1b      	lsrs	r3, r3, #16
 801a510:	4a1f      	ldr	r2, [pc, #124]	; (801a590 <HAL_FDCAN_GetRxMessage+0x2d8>)
 801a512:	5cd3      	ldrb	r3, [r2, r3]
 801a514:	461a      	mov	r2, r3
 801a516:	6a3b      	ldr	r3, [r7, #32]
 801a518:	4293      	cmp	r3, r2
 801a51a:	d3eb      	bcc.n	801a4f4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	2b40      	cmp	r3, #64	; 0x40
 801a520:	d105      	bne.n	801a52e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	69fa      	ldr	r2, [r7, #28]
 801a528:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801a52c:	e01e      	b.n	801a56c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 801a52e:	68bb      	ldr	r3, [r7, #8]
 801a530:	2b41      	cmp	r3, #65	; 0x41
 801a532:	d105      	bne.n	801a540 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	69fa      	ldr	r2, [r7, #28]
 801a53a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801a53e:	e015      	b.n	801a56c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 801a540:	68bb      	ldr	r3, [r7, #8]
 801a542:	2b1f      	cmp	r3, #31
 801a544:	d808      	bhi.n	801a558 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2101      	movs	r1, #1
 801a54c:	68ba      	ldr	r2, [r7, #8]
 801a54e:	fa01 f202 	lsl.w	r2, r1, r2
 801a552:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801a556:	e009      	b.n	801a56c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	f003 021f 	and.w	r2, r3, #31
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	2101      	movs	r1, #1
 801a564:	fa01 f202 	lsl.w	r2, r1, r2
 801a568:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 801a56c:	2300      	movs	r3, #0
 801a56e:	e008      	b.n	801a582 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a576:	f043 0208 	orr.w	r2, r3, #8
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a580:	2301      	movs	r3, #1
  }
}
 801a582:	4618      	mov	r0, r3
 801a584:	372c      	adds	r7, #44	; 0x2c
 801a586:	46bd      	mov	sp, r7
 801a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58c:	4770      	bx	lr
 801a58e:	bf00      	nop
 801a590:	08021310 	.word	0x08021310

0801a594 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 801a594:	b480      	push	{r7}
 801a596:	b087      	sub	sp, #28
 801a598:	af00      	add	r7, sp, #0
 801a59a:	60f8      	str	r0, [r7, #12]
 801a59c:	60b9      	str	r1, [r7, #8]
 801a59e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a5a6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 801a5a8:	7dfb      	ldrb	r3, [r7, #23]
 801a5aa:	2b01      	cmp	r3, #1
 801a5ac:	d002      	beq.n	801a5b4 <HAL_FDCAN_ActivateNotification+0x20>
 801a5ae:	7dfb      	ldrb	r3, [r7, #23]
 801a5b0:	2b02      	cmp	r3, #2
 801a5b2:	d155      	bne.n	801a660 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a5ba:	68bb      	ldr	r3, [r7, #8]
 801a5bc:	4013      	ands	r3, r2
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d108      	bne.n	801a5d4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	f042 0201 	orr.w	r2, r2, #1
 801a5d0:	65da      	str	r2, [r3, #92]	; 0x5c
 801a5d2:	e014      	b.n	801a5fe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a5da:	68bb      	ldr	r3, [r7, #8]
 801a5dc:	4013      	ands	r3, r2
 801a5de:	68ba      	ldr	r2, [r7, #8]
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	d108      	bne.n	801a5f6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f042 0202 	orr.w	r2, r2, #2
 801a5f2:	65da      	str	r2, [r3, #92]	; 0x5c
 801a5f4:	e003      	b.n	801a5fe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	2203      	movs	r2, #3
 801a5fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a604:	2b00      	cmp	r3, #0
 801a606:	d009      	beq.n	801a61c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	687a      	ldr	r2, [r7, #4]
 801a616:	430a      	orrs	r2, r1
 801a618:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a622:	2b00      	cmp	r3, #0
 801a624:	d009      	beq.n	801a63a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	687a      	ldr	r2, [r7, #4]
 801a634:	430a      	orrs	r2, r1
 801a636:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a640:	68ba      	ldr	r2, [r7, #8]
 801a642:	4b0f      	ldr	r3, [pc, #60]	; (801a680 <HAL_FDCAN_ActivateNotification+0xec>)
 801a644:	4013      	ands	r3, r2
 801a646:	68fa      	ldr	r2, [r7, #12]
 801a648:	6812      	ldr	r2, [r2, #0]
 801a64a:	430b      	orrs	r3, r1
 801a64c:	6553      	str	r3, [r2, #84]	; 0x54
 801a64e:	4b0d      	ldr	r3, [pc, #52]	; (801a684 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a650:	695a      	ldr	r2, [r3, #20]
 801a652:	68bb      	ldr	r3, [r7, #8]
 801a654:	0f9b      	lsrs	r3, r3, #30
 801a656:	490b      	ldr	r1, [pc, #44]	; (801a684 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a658:	4313      	orrs	r3, r2
 801a65a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801a65c:	2300      	movs	r3, #0
 801a65e:	e008      	b.n	801a672 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a666:	f043 0202 	orr.w	r2, r3, #2
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a670:	2301      	movs	r3, #1
  }
}
 801a672:	4618      	mov	r0, r3
 801a674:	371c      	adds	r7, #28
 801a676:	46bd      	mov	sp, r7
 801a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67c:	4770      	bx	lr
 801a67e:	bf00      	nop
 801a680:	3fcfffff 	.word	0x3fcfffff
 801a684:	4000a800 	.word	0x4000a800

0801a688 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b096      	sub	sp, #88	; 0x58
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801a690:	4b9a      	ldr	r3, [pc, #616]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a692:	691b      	ldr	r3, [r3, #16]
 801a694:	079b      	lsls	r3, r3, #30
 801a696:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801a698:	4b98      	ldr	r3, [pc, #608]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a69a:	695b      	ldr	r3, [r3, #20]
 801a69c:	079b      	lsls	r3, r3, #30
 801a69e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a6a0:	4013      	ands	r3, r2
 801a6a2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a6ae:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a6b8:	4013      	ands	r3, r2
 801a6ba:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6c2:	f003 030f 	and.w	r3, r3, #15
 801a6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a6d0:	4013      	ands	r3, r2
 801a6d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a6de:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a6e8:	4013      	ands	r3, r2
 801a6ea:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6f2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801a6f6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a700:	4013      	ands	r3, r2
 801a702:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a70a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a70e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a718:	4013      	ands	r3, r2
 801a71a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a722:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a72a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a72e:	0a1b      	lsrs	r3, r3, #8
 801a730:	f003 0301 	and.w	r3, r3, #1
 801a734:	2b00      	cmp	r3, #0
 801a736:	d010      	beq.n	801a75a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a73a:	0a1b      	lsrs	r3, r3, #8
 801a73c:	f003 0301 	and.w	r3, r3, #1
 801a740:	2b00      	cmp	r3, #0
 801a742:	d00a      	beq.n	801a75a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a74c:	651a      	str	r2, [r3, #80]	; 0x50
 801a74e:	4b6b      	ldr	r3, [pc, #428]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a750:	2200      	movs	r2, #0
 801a752:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f000 fa54 	bl	801ac02 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a75c:	0a9b      	lsrs	r3, r3, #10
 801a75e:	f003 0301 	and.w	r3, r3, #1
 801a762:	2b00      	cmp	r3, #0
 801a764:	d01d      	beq.n	801a7a2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a768:	0a9b      	lsrs	r3, r3, #10
 801a76a:	f003 0301 	and.w	r3, r3, #1
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d017      	beq.n	801a7a2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a77a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a786:	4013      	ands	r3, r2
 801a788:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a792:	651a      	str	r2, [r3, #80]	; 0x50
 801a794:	4b59      	ldr	r3, [pc, #356]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a796:	2200      	movs	r2, #0
 801a798:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a79a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f000 fa07 	bl	801abb0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d00d      	beq.n	801a7c4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681a      	ldr	r2, [r3, #0]
 801a7ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a7ae:	4b54      	ldr	r3, [pc, #336]	; (801a900 <HAL_FDCAN_IRQHandler+0x278>)
 801a7b0:	400b      	ands	r3, r1
 801a7b2:	6513      	str	r3, [r2, #80]	; 0x50
 801a7b4:	4a51      	ldr	r2, [pc, #324]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7b8:	0f9b      	lsrs	r3, r3, #30
 801a7ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a7bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a7be:	6878      	ldr	r0, [r7, #4]
 801a7c0:	f000 f9c0 	bl	801ab44 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a7c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d00d      	beq.n	801a7e6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681a      	ldr	r2, [r3, #0]
 801a7ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a7d0:	4b4b      	ldr	r3, [pc, #300]	; (801a900 <HAL_FDCAN_IRQHandler+0x278>)
 801a7d2:	400b      	ands	r3, r1
 801a7d4:	6513      	str	r3, [r2, #80]	; 0x50
 801a7d6:	4a49      	ldr	r2, [pc, #292]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7da:	0f9b      	lsrs	r3, r3, #30
 801a7dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a7de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a7e0:	6878      	ldr	r0, [r7, #4]
 801a7e2:	f000 f9ba 	bl	801ab5a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d00d      	beq.n	801a808 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681a      	ldr	r2, [r3, #0]
 801a7f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a7f2:	4b43      	ldr	r3, [pc, #268]	; (801a900 <HAL_FDCAN_IRQHandler+0x278>)
 801a7f4:	400b      	ands	r3, r1
 801a7f6:	6513      	str	r3, [r2, #80]	; 0x50
 801a7f8:	4a40      	ldr	r2, [pc, #256]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7fc:	0f9b      	lsrs	r3, r3, #30
 801a7fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a800:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f7f3 fe0c 	bl	800e420 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d00d      	beq.n	801a82a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a814:	4b3a      	ldr	r3, [pc, #232]	; (801a900 <HAL_FDCAN_IRQHandler+0x278>)
 801a816:	400b      	ands	r3, r1
 801a818:	6513      	str	r3, [r2, #80]	; 0x50
 801a81a:	4a38      	ldr	r2, [pc, #224]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a81e:	0f9b      	lsrs	r3, r3, #30
 801a820:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a822:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a824:	6878      	ldr	r0, [r7, #4]
 801a826:	f000 f9a3 	bl	801ab70 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a82c:	0adb      	lsrs	r3, r3, #11
 801a82e:	f003 0301 	and.w	r3, r3, #1
 801a832:	2b00      	cmp	r3, #0
 801a834:	d010      	beq.n	801a858 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a838:	0adb      	lsrs	r3, r3, #11
 801a83a:	f003 0301 	and.w	r3, r3, #1
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d00a      	beq.n	801a858 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a84a:	651a      	str	r2, [r3, #80]	; 0x50
 801a84c:	4b2b      	ldr	r3, [pc, #172]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a84e:	2200      	movs	r2, #0
 801a850:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a852:	6878      	ldr	r0, [r7, #4]
 801a854:	f000 f997 	bl	801ab86 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a85a:	0a5b      	lsrs	r3, r3, #9
 801a85c:	f003 0301 	and.w	r3, r3, #1
 801a860:	2b00      	cmp	r3, #0
 801a862:	d01d      	beq.n	801a8a0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a866:	0a5b      	lsrs	r3, r3, #9
 801a868:	f003 0301 	and.w	r3, r3, #1
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d017      	beq.n	801a8a0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a878:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a884:	4013      	ands	r3, r2
 801a886:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a890:	651a      	str	r2, [r3, #80]	; 0x50
 801a892:	4b1a      	ldr	r3, [pc, #104]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a894:	2200      	movs	r2, #0
 801a896:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f000 f97d 	bl	801ab9a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8a2:	0cdb      	lsrs	r3, r3, #19
 801a8a4:	f003 0301 	and.w	r3, r3, #1
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d010      	beq.n	801a8ce <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8ae:	0cdb      	lsrs	r3, r3, #19
 801a8b0:	f003 0301 	and.w	r3, r3, #1
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d00a      	beq.n	801a8ce <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a8c0:	651a      	str	r2, [r3, #80]	; 0x50
 801a8c2:	4b0e      	ldr	r3, [pc, #56]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f000 f97c 	bl	801abc6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8d0:	0c1b      	lsrs	r3, r3, #16
 801a8d2:	f003 0301 	and.w	r3, r3, #1
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d016      	beq.n	801a908 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8dc:	0c1b      	lsrs	r3, r3, #16
 801a8de:	f003 0301 	and.w	r3, r3, #1
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d010      	beq.n	801a908 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a8ee:	651a      	str	r2, [r3, #80]	; 0x50
 801a8f0:	4b02      	ldr	r3, [pc, #8]	; (801a8fc <HAL_FDCAN_IRQHandler+0x274>)
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	e004      	b.n	801a904 <HAL_FDCAN_IRQHandler+0x27c>
 801a8fa:	bf00      	nop
 801a8fc:	4000a800 	.word	0x4000a800
 801a900:	3fcfffff 	.word	0x3fcfffff
 801a904:	f000 f969 	bl	801abda <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a90a:	0c9b      	lsrs	r3, r3, #18
 801a90c:	f003 0301 	and.w	r3, r3, #1
 801a910:	2b00      	cmp	r3, #0
 801a912:	d010      	beq.n	801a936 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a916:	0c9b      	lsrs	r3, r3, #18
 801a918:	f003 0301 	and.w	r3, r3, #1
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d00a      	beq.n	801a936 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a928:	651a      	str	r2, [r3, #80]	; 0x50
 801a92a:	4b83      	ldr	r3, [pc, #524]	; (801ab38 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a92c:	2200      	movs	r2, #0
 801a92e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a930:	6878      	ldr	r0, [r7, #4]
 801a932:	f000 f95c 	bl	801abee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a938:	0c5b      	lsrs	r3, r3, #17
 801a93a:	f003 0301 	and.w	r3, r3, #1
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d015      	beq.n	801a96e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a944:	0c5b      	lsrs	r3, r3, #17
 801a946:	f003 0301 	and.w	r3, r3, #1
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d00f      	beq.n	801a96e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a956:	651a      	str	r2, [r3, #80]	; 0x50
 801a958:	4b77      	ldr	r3, [pc, #476]	; (801ab38 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a95a:	2200      	movs	r2, #0
 801a95c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a970:	2b00      	cmp	r3, #0
 801a972:	d00d      	beq.n	801a990 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	681a      	ldr	r2, [r3, #0]
 801a978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a97a:	4b70      	ldr	r3, [pc, #448]	; (801ab3c <HAL_FDCAN_IRQHandler+0x4b4>)
 801a97c:	400b      	ands	r3, r1
 801a97e:	6513      	str	r3, [r2, #80]	; 0x50
 801a980:	4a6d      	ldr	r2, [pc, #436]	; (801ab38 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a984:	0f9b      	lsrs	r3, r3, #30
 801a986:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f000 f94d 	bl	801ac2a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a992:	2b00      	cmp	r3, #0
 801a994:	d011      	beq.n	801a9ba <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681a      	ldr	r2, [r3, #0]
 801a99a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a99c:	4b67      	ldr	r3, [pc, #412]	; (801ab3c <HAL_FDCAN_IRQHandler+0x4b4>)
 801a99e:	400b      	ands	r3, r1
 801a9a0:	6513      	str	r3, [r2, #80]	; 0x50
 801a9a2:	4a65      	ldr	r2, [pc, #404]	; (801ab38 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9a6:	0f9b      	lsrs	r3, r3, #30
 801a9a8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9b2:	431a      	orrs	r2, r3
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4a60      	ldr	r2, [pc, #384]	; (801ab40 <HAL_FDCAN_IRQHandler+0x4b8>)
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	f040 80ac 	bne.w	801ab1e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	685b      	ldr	r3, [r3, #4]
 801a9ca:	689b      	ldr	r3, [r3, #8]
 801a9cc:	f003 0303 	and.w	r3, r3, #3
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f000 80a4 	beq.w	801ab1e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	685b      	ldr	r3, [r3, #4]
 801a9da:	6a1b      	ldr	r3, [r3, #32]
 801a9dc:	f003 030f 	and.w	r3, r3, #15
 801a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a9ea:	4013      	ands	r3, r2
 801a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	685b      	ldr	r3, [r3, #4]
 801a9f2:	6a1b      	ldr	r3, [r3, #32]
 801a9f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa02:	4013      	ands	r3, r2
 801aa04:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	685b      	ldr	r3, [r3, #4]
 801aa0a:	6a1b      	ldr	r3, [r3, #32]
 801aa0c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801aa10:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	685b      	ldr	r3, [r3, #4]
 801aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa1a:	4013      	ands	r3, r2
 801aa1c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	6a1b      	ldr	r3, [r3, #32]
 801aa24:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801aa28:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa30:	6a3a      	ldr	r2, [r7, #32]
 801aa32:	4013      	ands	r3, r2
 801aa34:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	685b      	ldr	r3, [r3, #4]
 801aa3a:	6a1b      	ldr	r3, [r3, #32]
 801aa3c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801aa40:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	685b      	ldr	r3, [r3, #4]
 801aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa48:	69fa      	ldr	r2, [r7, #28]
 801aa4a:	4013      	ands	r3, r2
 801aa4c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa54:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	685b      	ldr	r3, [r3, #4]
 801aa5a:	6a1b      	ldr	r3, [r3, #32]
 801aa5c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d007      	beq.n	801aa74 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	685b      	ldr	r3, [r3, #4]
 801aa68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa6a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801aa6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa6e:	6878      	ldr	r0, [r7, #4]
 801aa70:	f000 f8e6 	bl	801ac40 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d007      	beq.n	801aa8a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	685b      	ldr	r3, [r3, #4]
 801aa7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa80:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801aa82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	f000 f8e6 	bl	801ac56 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801aa8a:	69bb      	ldr	r3, [r7, #24]
 801aa8c:	099b      	lsrs	r3, r3, #6
 801aa8e:	f003 0301 	and.w	r3, r3, #1
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d01a      	beq.n	801aacc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801aa96:	697b      	ldr	r3, [r7, #20]
 801aa98:	099b      	lsrs	r3, r3, #6
 801aa9a:	f003 0301 	and.w	r3, r3, #1
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d014      	beq.n	801aacc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	685b      	ldr	r3, [r3, #4]
 801aaa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aaa8:	0c1b      	lsrs	r3, r3, #16
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	685b      	ldr	r3, [r3, #4]
 801aab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aab8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	685b      	ldr	r3, [r3, #4]
 801aabe:	2240      	movs	r2, #64	; 0x40
 801aac0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801aac2:	68fa      	ldr	r2, [r7, #12]
 801aac4:	6939      	ldr	r1, [r7, #16]
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f000 f8d0 	bl	801ac6c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d007      	beq.n	801aae2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aad8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801aada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	f000 f8d1 	bl	801ac84 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801aae2:	6a3b      	ldr	r3, [r7, #32]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d00b      	beq.n	801ab00 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	685b      	ldr	r3, [r3, #4]
 801aaec:	6a3a      	ldr	r2, [r7, #32]
 801aaee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801aaf6:	6a3b      	ldr	r3, [r7, #32]
 801aaf8:	431a      	orrs	r2, r3
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d00b      	beq.n	801ab1e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	69fa      	ldr	r2, [r7, #28]
 801ab0c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801ab14:	69fb      	ldr	r3, [r7, #28]
 801ab16:	431a      	orrs	r2, r3
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d002      	beq.n	801ab2e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801ab28:	6878      	ldr	r0, [r7, #4]
 801ab2a:	f000 f874 	bl	801ac16 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801ab2e:	bf00      	nop
 801ab30:	3758      	adds	r7, #88	; 0x58
 801ab32:	46bd      	mov	sp, r7
 801ab34:	bd80      	pop	{r7, pc}
 801ab36:	bf00      	nop
 801ab38:	4000a800 	.word	0x4000a800
 801ab3c:	3fcfffff 	.word	0x3fcfffff
 801ab40:	4000a000 	.word	0x4000a000

0801ab44 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801ab44:	b480      	push	{r7}
 801ab46:	b083      	sub	sp, #12
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
 801ab4c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801ab4e:	bf00      	nop
 801ab50:	370c      	adds	r7, #12
 801ab52:	46bd      	mov	sp, r7
 801ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab58:	4770      	bx	lr

0801ab5a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801ab5a:	b480      	push	{r7}
 801ab5c:	b083      	sub	sp, #12
 801ab5e:	af00      	add	r7, sp, #0
 801ab60:	6078      	str	r0, [r7, #4]
 801ab62:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801ab64:	bf00      	nop
 801ab66:	370c      	adds	r7, #12
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab6e:	4770      	bx	lr

0801ab70 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801ab70:	b480      	push	{r7}
 801ab72:	b083      	sub	sp, #12
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
 801ab78:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801ab7a:	bf00      	nop
 801ab7c:	370c      	adds	r7, #12
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab84:	4770      	bx	lr

0801ab86 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801ab86:	b480      	push	{r7}
 801ab88:	b083      	sub	sp, #12
 801ab8a:	af00      	add	r7, sp, #0
 801ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801ab8e:	bf00      	nop
 801ab90:	370c      	adds	r7, #12
 801ab92:	46bd      	mov	sp, r7
 801ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab98:	4770      	bx	lr

0801ab9a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801ab9a:	b480      	push	{r7}
 801ab9c:	b083      	sub	sp, #12
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	6078      	str	r0, [r7, #4]
 801aba2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801aba4:	bf00      	nop
 801aba6:	370c      	adds	r7, #12
 801aba8:	46bd      	mov	sp, r7
 801abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abae:	4770      	bx	lr

0801abb0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801abb0:	b480      	push	{r7}
 801abb2:	b083      	sub	sp, #12
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
 801abb8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801abba:	bf00      	nop
 801abbc:	370c      	adds	r7, #12
 801abbe:	46bd      	mov	sp, r7
 801abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc4:	4770      	bx	lr

0801abc6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801abc6:	b480      	push	{r7}
 801abc8:	b083      	sub	sp, #12
 801abca:	af00      	add	r7, sp, #0
 801abcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801abce:	bf00      	nop
 801abd0:	370c      	adds	r7, #12
 801abd2:	46bd      	mov	sp, r7
 801abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd8:	4770      	bx	lr

0801abda <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801abda:	b480      	push	{r7}
 801abdc:	b083      	sub	sp, #12
 801abde:	af00      	add	r7, sp, #0
 801abe0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801abe2:	bf00      	nop
 801abe4:	370c      	adds	r7, #12
 801abe6:	46bd      	mov	sp, r7
 801abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abec:	4770      	bx	lr

0801abee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801abee:	b480      	push	{r7}
 801abf0:	b083      	sub	sp, #12
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801abf6:	bf00      	nop
 801abf8:	370c      	adds	r7, #12
 801abfa:	46bd      	mov	sp, r7
 801abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac00:	4770      	bx	lr

0801ac02 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801ac02:	b480      	push	{r7}
 801ac04:	b083      	sub	sp, #12
 801ac06:	af00      	add	r7, sp, #0
 801ac08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801ac0a:	bf00      	nop
 801ac0c:	370c      	adds	r7, #12
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801ac16:	b480      	push	{r7}
 801ac18:	b083      	sub	sp, #12
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801ac1e:	bf00      	nop
 801ac20:	370c      	adds	r7, #12
 801ac22:	46bd      	mov	sp, r7
 801ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac28:	4770      	bx	lr

0801ac2a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801ac2a:	b480      	push	{r7}
 801ac2c:	b083      	sub	sp, #12
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	6078      	str	r0, [r7, #4]
 801ac32:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801ac34:	bf00      	nop
 801ac36:	370c      	adds	r7, #12
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3e:	4770      	bx	lr

0801ac40 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801ac40:	b480      	push	{r7}
 801ac42:	b083      	sub	sp, #12
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
 801ac48:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801ac4a:	bf00      	nop
 801ac4c:	370c      	adds	r7, #12
 801ac4e:	46bd      	mov	sp, r7
 801ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac54:	4770      	bx	lr

0801ac56 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801ac56:	b480      	push	{r7}
 801ac58:	b083      	sub	sp, #12
 801ac5a:	af00      	add	r7, sp, #0
 801ac5c:	6078      	str	r0, [r7, #4]
 801ac5e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801ac60:	bf00      	nop
 801ac62:	370c      	adds	r7, #12
 801ac64:	46bd      	mov	sp, r7
 801ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac6a:	4770      	bx	lr

0801ac6c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801ac6c:	b480      	push	{r7}
 801ac6e:	b085      	sub	sp, #20
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	60f8      	str	r0, [r7, #12]
 801ac74:	60b9      	str	r1, [r7, #8]
 801ac76:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801ac78:	bf00      	nop
 801ac7a:	3714      	adds	r7, #20
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac82:	4770      	bx	lr

0801ac84 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801ac84:	b480      	push	{r7}
 801ac86:	b083      	sub	sp, #12
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
 801ac8c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801ac8e:	bf00      	nop
 801ac90:	370c      	adds	r7, #12
 801ac92:	46bd      	mov	sp, r7
 801ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac98:	4770      	bx	lr
	...

0801ac9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801ac9c:	b480      	push	{r7}
 801ac9e:	b085      	sub	sp, #20
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aca8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801acb2:	4ba7      	ldr	r3, [pc, #668]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801acb4:	4013      	ands	r3, r2
 801acb6:	68ba      	ldr	r2, [r7, #8]
 801acb8:	0091      	lsls	r1, r2, #2
 801acba:	687a      	ldr	r2, [r7, #4]
 801acbc:	6812      	ldr	r2, [r2, #0]
 801acbe:	430b      	orrs	r3, r1
 801acc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801accc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acd4:	041a      	lsls	r2, r3, #16
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	430a      	orrs	r2, r1
 801acdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ace4:	68ba      	ldr	r2, [r7, #8]
 801ace6:	4413      	add	r3, r2
 801ace8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801acf2:	4b97      	ldr	r3, [pc, #604]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801acf4:	4013      	ands	r3, r2
 801acf6:	68ba      	ldr	r2, [r7, #8]
 801acf8:	0091      	lsls	r1, r2, #2
 801acfa:	687a      	ldr	r2, [r7, #4]
 801acfc:	6812      	ldr	r2, [r2, #0]
 801acfe:	430b      	orrs	r3, r1
 801ad00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ad0c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad14:	041a      	lsls	r2, r3, #16
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	430a      	orrs	r2, r1
 801ad1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad24:	005b      	lsls	r3, r3, #1
 801ad26:	68ba      	ldr	r2, [r7, #8]
 801ad28:	4413      	add	r3, r2
 801ad2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801ad34:	4b86      	ldr	r3, [pc, #536]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801ad36:	4013      	ands	r3, r2
 801ad38:	68ba      	ldr	r2, [r7, #8]
 801ad3a:	0091      	lsls	r1, r2, #2
 801ad3c:	687a      	ldr	r2, [r7, #4]
 801ad3e:	6812      	ldr	r2, [r2, #0]
 801ad40:	430b      	orrs	r3, r1
 801ad42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ad4e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad56:	041a      	lsls	r2, r3, #16
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	430a      	orrs	r2, r1
 801ad5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801ad6a:	fb02 f303 	mul.w	r3, r2, r3
 801ad6e:	68ba      	ldr	r2, [r7, #8]
 801ad70:	4413      	add	r3, r2
 801ad72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801ad7c:	4b74      	ldr	r3, [pc, #464]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801ad7e:	4013      	ands	r3, r2
 801ad80:	68ba      	ldr	r2, [r7, #8]
 801ad82:	0091      	lsls	r1, r2, #2
 801ad84:	687a      	ldr	r2, [r7, #4]
 801ad86:	6812      	ldr	r2, [r2, #0]
 801ad88:	430b      	orrs	r3, r1
 801ad8a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad9e:	041a      	lsls	r2, r3, #16
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	430a      	orrs	r2, r1
 801ada6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801adae:	687a      	ldr	r2, [r7, #4]
 801adb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801adb2:	fb02 f303 	mul.w	r3, r2, r3
 801adb6:	68ba      	ldr	r2, [r7, #8]
 801adb8:	4413      	add	r3, r2
 801adba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801adc4:	4b62      	ldr	r3, [pc, #392]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801adc6:	4013      	ands	r3, r2
 801adc8:	68ba      	ldr	r2, [r7, #8]
 801adca:	0091      	lsls	r1, r2, #2
 801adcc:	687a      	ldr	r2, [r7, #4]
 801adce:	6812      	ldr	r2, [r2, #0]
 801add0:	430b      	orrs	r3, r1
 801add2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adda:	687a      	ldr	r2, [r7, #4]
 801addc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801adde:	fb02 f303 	mul.w	r3, r2, r3
 801ade2:	68ba      	ldr	r2, [r7, #8]
 801ade4:	4413      	add	r3, r2
 801ade6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801adf0:	4b57      	ldr	r3, [pc, #348]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801adf2:	4013      	ands	r3, r2
 801adf4:	68ba      	ldr	r2, [r7, #8]
 801adf6:	0091      	lsls	r1, r2, #2
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	6812      	ldr	r2, [r2, #0]
 801adfc:	430b      	orrs	r3, r1
 801adfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801ae0a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae12:	041a      	lsls	r2, r3, #16
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	430a      	orrs	r2, r1
 801ae1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae22:	005b      	lsls	r3, r3, #1
 801ae24:	68ba      	ldr	r2, [r7, #8]
 801ae26:	4413      	add	r3, r2
 801ae28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801ae32:	4b47      	ldr	r3, [pc, #284]	; (801af50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801ae34:	4013      	ands	r3, r2
 801ae36:	68ba      	ldr	r2, [r7, #8]
 801ae38:	0091      	lsls	r1, r2, #2
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	6812      	ldr	r2, [r2, #0]
 801ae3e:	430b      	orrs	r3, r1
 801ae40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801ae4c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae54:	041a      	lsls	r2, r3, #16
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	430a      	orrs	r2, r1
 801ae5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801ae68:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae70:	061a      	lsls	r2, r3, #24
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	430a      	orrs	r2, r1
 801ae78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ae80:	4b34      	ldr	r3, [pc, #208]	; (801af54 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801ae82:	4413      	add	r3, r2
 801ae84:	009a      	lsls	r2, r3, #2
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae92:	009b      	lsls	r3, r3, #2
 801ae94:	441a      	add	r2, r3
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aea2:	00db      	lsls	r3, r3, #3
 801aea4:	441a      	add	r2, r3
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aeb2:	6879      	ldr	r1, [r7, #4]
 801aeb4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801aeb6:	fb01 f303 	mul.w	r3, r1, r3
 801aeba:	009b      	lsls	r3, r3, #2
 801aebc:	441a      	add	r2, r3
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aeca:	6879      	ldr	r1, [r7, #4]
 801aecc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801aece:	fb01 f303 	mul.w	r3, r1, r3
 801aed2:	009b      	lsls	r3, r3, #2
 801aed4:	441a      	add	r2, r3
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aee2:	6879      	ldr	r1, [r7, #4]
 801aee4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801aee6:	fb01 f303 	mul.w	r3, r1, r3
 801aeea:	009b      	lsls	r3, r3, #2
 801aeec:	441a      	add	r2, r3
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aefe:	00db      	lsls	r3, r3, #3
 801af00:	441a      	add	r2, r3
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af12:	6879      	ldr	r1, [r7, #4]
 801af14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801af16:	fb01 f303 	mul.w	r3, r1, r3
 801af1a:	009b      	lsls	r3, r3, #2
 801af1c:	441a      	add	r2, r3
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801af2e:	6879      	ldr	r1, [r7, #4]
 801af30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801af32:	fb01 f303 	mul.w	r3, r1, r3
 801af36:	009b      	lsls	r3, r3, #2
 801af38:	441a      	add	r2, r3
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801af46:	4a04      	ldr	r2, [pc, #16]	; (801af58 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d915      	bls.n	801af78 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801af4c:	e006      	b.n	801af5c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801af4e:	bf00      	nop
 801af50:	ffff0003 	.word	0xffff0003
 801af54:	10002b00 	.word	0x10002b00
 801af58:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801af62:	f043 0220 	orr.w	r2, r3, #32
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	2203      	movs	r2, #3
 801af70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801af74:	2301      	movs	r3, #1
 801af76:	e010      	b.n	801af9a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af7c:	60fb      	str	r3, [r7, #12]
 801af7e:	e005      	b.n	801af8c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	2200      	movs	r2, #0
 801af84:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	3304      	adds	r3, #4
 801af8a:	60fb      	str	r3, [r7, #12]
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801af92:	68fa      	ldr	r2, [r7, #12]
 801af94:	429a      	cmp	r2, r3
 801af96:	d3f3      	bcc.n	801af80 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801af98:	2300      	movs	r3, #0
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	3714      	adds	r7, #20
 801af9e:	46bd      	mov	sp, r7
 801afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa4:	4770      	bx	lr
 801afa6:	bf00      	nop

0801afa8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801afa8:	b480      	push	{r7}
 801afaa:	b089      	sub	sp, #36	; 0x24
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	60b9      	str	r1, [r7, #8]
 801afb2:	607a      	str	r2, [r7, #4]
 801afb4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801afb6:	68bb      	ldr	r3, [r7, #8]
 801afb8:	685b      	ldr	r3, [r3, #4]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d10a      	bne.n	801afd4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801afc2:	68bb      	ldr	r3, [r7, #8]
 801afc4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801afc6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801afc8:	68bb      	ldr	r3, [r7, #8]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801afce:	4313      	orrs	r3, r2
 801afd0:	61fb      	str	r3, [r7, #28]
 801afd2:	e00a      	b.n	801afea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801afd4:	68bb      	ldr	r3, [r7, #8]
 801afd6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801afdc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801afe2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801afe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801afe8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801afea:	68bb      	ldr	r3, [r7, #8]
 801afec:	6a1b      	ldr	r3, [r3, #32]
 801afee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aff4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801affa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801b000:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801b002:	68bb      	ldr	r3, [r7, #8]
 801b004:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801b006:	4313      	orrs	r3, r2
 801b008:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b014:	6839      	ldr	r1, [r7, #0]
 801b016:	fb01 f303 	mul.w	r3, r1, r3
 801b01a:	009b      	lsls	r3, r3, #2
 801b01c:	4413      	add	r3, r2
 801b01e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801b020:	69bb      	ldr	r3, [r7, #24]
 801b022:	69fa      	ldr	r2, [r7, #28]
 801b024:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801b026:	69bb      	ldr	r3, [r7, #24]
 801b028:	3304      	adds	r3, #4
 801b02a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	693a      	ldr	r2, [r7, #16]
 801b030:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801b032:	69bb      	ldr	r3, [r7, #24]
 801b034:	3304      	adds	r3, #4
 801b036:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801b038:	2300      	movs	r3, #0
 801b03a:	617b      	str	r3, [r7, #20]
 801b03c:	e020      	b.n	801b080 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b03e:	697b      	ldr	r3, [r7, #20]
 801b040:	3303      	adds	r3, #3
 801b042:	687a      	ldr	r2, [r7, #4]
 801b044:	4413      	add	r3, r2
 801b046:	781b      	ldrb	r3, [r3, #0]
 801b048:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	3302      	adds	r3, #2
 801b04e:	6879      	ldr	r1, [r7, #4]
 801b050:	440b      	add	r3, r1
 801b052:	781b      	ldrb	r3, [r3, #0]
 801b054:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b056:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801b058:	697b      	ldr	r3, [r7, #20]
 801b05a:	3301      	adds	r3, #1
 801b05c:	6879      	ldr	r1, [r7, #4]
 801b05e:	440b      	add	r3, r1
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801b064:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801b066:	6879      	ldr	r1, [r7, #4]
 801b068:	697a      	ldr	r2, [r7, #20]
 801b06a:	440a      	add	r2, r1
 801b06c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801b06e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801b070:	69bb      	ldr	r3, [r7, #24]
 801b072:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801b074:	69bb      	ldr	r3, [r7, #24]
 801b076:	3304      	adds	r3, #4
 801b078:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801b07a:	697b      	ldr	r3, [r7, #20]
 801b07c:	3304      	adds	r3, #4
 801b07e:	617b      	str	r3, [r7, #20]
 801b080:	68bb      	ldr	r3, [r7, #8]
 801b082:	68db      	ldr	r3, [r3, #12]
 801b084:	0c1b      	lsrs	r3, r3, #16
 801b086:	4a06      	ldr	r2, [pc, #24]	; (801b0a0 <FDCAN_CopyMessageToRAM+0xf8>)
 801b088:	5cd3      	ldrb	r3, [r2, r3]
 801b08a:	461a      	mov	r2, r3
 801b08c:	697b      	ldr	r3, [r7, #20]
 801b08e:	4293      	cmp	r3, r2
 801b090:	d3d5      	bcc.n	801b03e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801b092:	bf00      	nop
 801b094:	bf00      	nop
 801b096:	3724      	adds	r7, #36	; 0x24
 801b098:	46bd      	mov	sp, r7
 801b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09e:	4770      	bx	lr
 801b0a0:	08021310 	.word	0x08021310

0801b0a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b0a4:	b480      	push	{r7}
 801b0a6:	b089      	sub	sp, #36	; 0x24
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	6078      	str	r0, [r7, #4]
 801b0ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b0b2:	4b86      	ldr	r3, [pc, #536]	; (801b2cc <HAL_GPIO_Init+0x228>)
 801b0b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b0b6:	e18c      	b.n	801b3d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	681a      	ldr	r2, [r3, #0]
 801b0bc:	2101      	movs	r1, #1
 801b0be:	69fb      	ldr	r3, [r7, #28]
 801b0c0:	fa01 f303 	lsl.w	r3, r1, r3
 801b0c4:	4013      	ands	r3, r2
 801b0c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	f000 817e 	beq.w	801b3cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	685b      	ldr	r3, [r3, #4]
 801b0d4:	f003 0303 	and.w	r3, r3, #3
 801b0d8:	2b01      	cmp	r3, #1
 801b0da:	d005      	beq.n	801b0e8 <HAL_GPIO_Init+0x44>
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	685b      	ldr	r3, [r3, #4]
 801b0e0:	f003 0303 	and.w	r3, r3, #3
 801b0e4:	2b02      	cmp	r3, #2
 801b0e6:	d130      	bne.n	801b14a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	689b      	ldr	r3, [r3, #8]
 801b0ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b0ee:	69fb      	ldr	r3, [r7, #28]
 801b0f0:	005b      	lsls	r3, r3, #1
 801b0f2:	2203      	movs	r2, #3
 801b0f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b0f8:	43db      	mvns	r3, r3
 801b0fa:	69ba      	ldr	r2, [r7, #24]
 801b0fc:	4013      	ands	r3, r2
 801b0fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	68da      	ldr	r2, [r3, #12]
 801b104:	69fb      	ldr	r3, [r7, #28]
 801b106:	005b      	lsls	r3, r3, #1
 801b108:	fa02 f303 	lsl.w	r3, r2, r3
 801b10c:	69ba      	ldr	r2, [r7, #24]
 801b10e:	4313      	orrs	r3, r2
 801b110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	69ba      	ldr	r2, [r7, #24]
 801b116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	685b      	ldr	r3, [r3, #4]
 801b11c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b11e:	2201      	movs	r2, #1
 801b120:	69fb      	ldr	r3, [r7, #28]
 801b122:	fa02 f303 	lsl.w	r3, r2, r3
 801b126:	43db      	mvns	r3, r3
 801b128:	69ba      	ldr	r2, [r7, #24]
 801b12a:	4013      	ands	r3, r2
 801b12c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	685b      	ldr	r3, [r3, #4]
 801b132:	091b      	lsrs	r3, r3, #4
 801b134:	f003 0201 	and.w	r2, r3, #1
 801b138:	69fb      	ldr	r3, [r7, #28]
 801b13a:	fa02 f303 	lsl.w	r3, r2, r3
 801b13e:	69ba      	ldr	r2, [r7, #24]
 801b140:	4313      	orrs	r3, r2
 801b142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	69ba      	ldr	r2, [r7, #24]
 801b148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b14a:	683b      	ldr	r3, [r7, #0]
 801b14c:	685b      	ldr	r3, [r3, #4]
 801b14e:	f003 0303 	and.w	r3, r3, #3
 801b152:	2b03      	cmp	r3, #3
 801b154:	d017      	beq.n	801b186 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	68db      	ldr	r3, [r3, #12]
 801b15a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b15c:	69fb      	ldr	r3, [r7, #28]
 801b15e:	005b      	lsls	r3, r3, #1
 801b160:	2203      	movs	r2, #3
 801b162:	fa02 f303 	lsl.w	r3, r2, r3
 801b166:	43db      	mvns	r3, r3
 801b168:	69ba      	ldr	r2, [r7, #24]
 801b16a:	4013      	ands	r3, r2
 801b16c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b16e:	683b      	ldr	r3, [r7, #0]
 801b170:	689a      	ldr	r2, [r3, #8]
 801b172:	69fb      	ldr	r3, [r7, #28]
 801b174:	005b      	lsls	r3, r3, #1
 801b176:	fa02 f303 	lsl.w	r3, r2, r3
 801b17a:	69ba      	ldr	r2, [r7, #24]
 801b17c:	4313      	orrs	r3, r2
 801b17e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	69ba      	ldr	r2, [r7, #24]
 801b184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	685b      	ldr	r3, [r3, #4]
 801b18a:	f003 0303 	and.w	r3, r3, #3
 801b18e:	2b02      	cmp	r3, #2
 801b190:	d123      	bne.n	801b1da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b192:	69fb      	ldr	r3, [r7, #28]
 801b194:	08da      	lsrs	r2, r3, #3
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	3208      	adds	r2, #8
 801b19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b19e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b1a0:	69fb      	ldr	r3, [r7, #28]
 801b1a2:	f003 0307 	and.w	r3, r3, #7
 801b1a6:	009b      	lsls	r3, r3, #2
 801b1a8:	220f      	movs	r2, #15
 801b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 801b1ae:	43db      	mvns	r3, r3
 801b1b0:	69ba      	ldr	r2, [r7, #24]
 801b1b2:	4013      	ands	r3, r2
 801b1b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	691a      	ldr	r2, [r3, #16]
 801b1ba:	69fb      	ldr	r3, [r7, #28]
 801b1bc:	f003 0307 	and.w	r3, r3, #7
 801b1c0:	009b      	lsls	r3, r3, #2
 801b1c2:	fa02 f303 	lsl.w	r3, r2, r3
 801b1c6:	69ba      	ldr	r2, [r7, #24]
 801b1c8:	4313      	orrs	r3, r2
 801b1ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b1cc:	69fb      	ldr	r3, [r7, #28]
 801b1ce:	08da      	lsrs	r2, r3, #3
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	3208      	adds	r2, #8
 801b1d4:	69b9      	ldr	r1, [r7, #24]
 801b1d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b1e0:	69fb      	ldr	r3, [r7, #28]
 801b1e2:	005b      	lsls	r3, r3, #1
 801b1e4:	2203      	movs	r2, #3
 801b1e6:	fa02 f303 	lsl.w	r3, r2, r3
 801b1ea:	43db      	mvns	r3, r3
 801b1ec:	69ba      	ldr	r2, [r7, #24]
 801b1ee:	4013      	ands	r3, r2
 801b1f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	f003 0203 	and.w	r2, r3, #3
 801b1fa:	69fb      	ldr	r3, [r7, #28]
 801b1fc:	005b      	lsls	r3, r3, #1
 801b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 801b202:	69ba      	ldr	r2, [r7, #24]
 801b204:	4313      	orrs	r3, r2
 801b206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	69ba      	ldr	r2, [r7, #24]
 801b20c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	685b      	ldr	r3, [r3, #4]
 801b212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b216:	2b00      	cmp	r3, #0
 801b218:	f000 80d8 	beq.w	801b3cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b21c:	4b2c      	ldr	r3, [pc, #176]	; (801b2d0 <HAL_GPIO_Init+0x22c>)
 801b21e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b222:	4a2b      	ldr	r2, [pc, #172]	; (801b2d0 <HAL_GPIO_Init+0x22c>)
 801b224:	f043 0302 	orr.w	r3, r3, #2
 801b228:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801b22c:	4b28      	ldr	r3, [pc, #160]	; (801b2d0 <HAL_GPIO_Init+0x22c>)
 801b22e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b232:	f003 0302 	and.w	r3, r3, #2
 801b236:	60fb      	str	r3, [r7, #12]
 801b238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b23a:	4a26      	ldr	r2, [pc, #152]	; (801b2d4 <HAL_GPIO_Init+0x230>)
 801b23c:	69fb      	ldr	r3, [r7, #28]
 801b23e:	089b      	lsrs	r3, r3, #2
 801b240:	3302      	adds	r3, #2
 801b242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b248:	69fb      	ldr	r3, [r7, #28]
 801b24a:	f003 0303 	and.w	r3, r3, #3
 801b24e:	009b      	lsls	r3, r3, #2
 801b250:	220f      	movs	r2, #15
 801b252:	fa02 f303 	lsl.w	r3, r2, r3
 801b256:	43db      	mvns	r3, r3
 801b258:	69ba      	ldr	r2, [r7, #24]
 801b25a:	4013      	ands	r3, r2
 801b25c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	4a1d      	ldr	r2, [pc, #116]	; (801b2d8 <HAL_GPIO_Init+0x234>)
 801b262:	4293      	cmp	r3, r2
 801b264:	d04a      	beq.n	801b2fc <HAL_GPIO_Init+0x258>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	4a1c      	ldr	r2, [pc, #112]	; (801b2dc <HAL_GPIO_Init+0x238>)
 801b26a:	4293      	cmp	r3, r2
 801b26c:	d02b      	beq.n	801b2c6 <HAL_GPIO_Init+0x222>
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	4a1b      	ldr	r2, [pc, #108]	; (801b2e0 <HAL_GPIO_Init+0x23c>)
 801b272:	4293      	cmp	r3, r2
 801b274:	d025      	beq.n	801b2c2 <HAL_GPIO_Init+0x21e>
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	4a1a      	ldr	r2, [pc, #104]	; (801b2e4 <HAL_GPIO_Init+0x240>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d01f      	beq.n	801b2be <HAL_GPIO_Init+0x21a>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	4a19      	ldr	r2, [pc, #100]	; (801b2e8 <HAL_GPIO_Init+0x244>)
 801b282:	4293      	cmp	r3, r2
 801b284:	d019      	beq.n	801b2ba <HAL_GPIO_Init+0x216>
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	4a18      	ldr	r2, [pc, #96]	; (801b2ec <HAL_GPIO_Init+0x248>)
 801b28a:	4293      	cmp	r3, r2
 801b28c:	d013      	beq.n	801b2b6 <HAL_GPIO_Init+0x212>
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	4a17      	ldr	r2, [pc, #92]	; (801b2f0 <HAL_GPIO_Init+0x24c>)
 801b292:	4293      	cmp	r3, r2
 801b294:	d00d      	beq.n	801b2b2 <HAL_GPIO_Init+0x20e>
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	4a16      	ldr	r2, [pc, #88]	; (801b2f4 <HAL_GPIO_Init+0x250>)
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d007      	beq.n	801b2ae <HAL_GPIO_Init+0x20a>
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	4a15      	ldr	r2, [pc, #84]	; (801b2f8 <HAL_GPIO_Init+0x254>)
 801b2a2:	4293      	cmp	r3, r2
 801b2a4:	d101      	bne.n	801b2aa <HAL_GPIO_Init+0x206>
 801b2a6:	2309      	movs	r3, #9
 801b2a8:	e029      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2aa:	230a      	movs	r3, #10
 801b2ac:	e027      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2ae:	2307      	movs	r3, #7
 801b2b0:	e025      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2b2:	2306      	movs	r3, #6
 801b2b4:	e023      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2b6:	2305      	movs	r3, #5
 801b2b8:	e021      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2ba:	2304      	movs	r3, #4
 801b2bc:	e01f      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2be:	2303      	movs	r3, #3
 801b2c0:	e01d      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2c2:	2302      	movs	r3, #2
 801b2c4:	e01b      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2c6:	2301      	movs	r3, #1
 801b2c8:	e019      	b.n	801b2fe <HAL_GPIO_Init+0x25a>
 801b2ca:	bf00      	nop
 801b2cc:	58000080 	.word	0x58000080
 801b2d0:	58024400 	.word	0x58024400
 801b2d4:	58000400 	.word	0x58000400
 801b2d8:	58020000 	.word	0x58020000
 801b2dc:	58020400 	.word	0x58020400
 801b2e0:	58020800 	.word	0x58020800
 801b2e4:	58020c00 	.word	0x58020c00
 801b2e8:	58021000 	.word	0x58021000
 801b2ec:	58021400 	.word	0x58021400
 801b2f0:	58021800 	.word	0x58021800
 801b2f4:	58021c00 	.word	0x58021c00
 801b2f8:	58022400 	.word	0x58022400
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	69fa      	ldr	r2, [r7, #28]
 801b300:	f002 0203 	and.w	r2, r2, #3
 801b304:	0092      	lsls	r2, r2, #2
 801b306:	4093      	lsls	r3, r2
 801b308:	69ba      	ldr	r2, [r7, #24]
 801b30a:	4313      	orrs	r3, r2
 801b30c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b30e:	4938      	ldr	r1, [pc, #224]	; (801b3f0 <HAL_GPIO_Init+0x34c>)
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	089b      	lsrs	r3, r3, #2
 801b314:	3302      	adds	r3, #2
 801b316:	69ba      	ldr	r2, [r7, #24]
 801b318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b324:	693b      	ldr	r3, [r7, #16]
 801b326:	43db      	mvns	r3, r3
 801b328:	69ba      	ldr	r2, [r7, #24]
 801b32a:	4013      	ands	r3, r2
 801b32c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	685b      	ldr	r3, [r3, #4]
 801b332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b336:	2b00      	cmp	r3, #0
 801b338:	d003      	beq.n	801b342 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801b33a:	69ba      	ldr	r2, [r7, #24]
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	4313      	orrs	r3, r2
 801b340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801b342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b346:	69bb      	ldr	r3, [r7, #24]
 801b348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b34a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b352:	693b      	ldr	r3, [r7, #16]
 801b354:	43db      	mvns	r3, r3
 801b356:	69ba      	ldr	r2, [r7, #24]
 801b358:	4013      	ands	r3, r2
 801b35a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801b35c:	683b      	ldr	r3, [r7, #0]
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b364:	2b00      	cmp	r3, #0
 801b366:	d003      	beq.n	801b370 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801b368:	69ba      	ldr	r2, [r7, #24]
 801b36a:	693b      	ldr	r3, [r7, #16]
 801b36c:	4313      	orrs	r3, r2
 801b36e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801b370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b374:	69bb      	ldr	r3, [r7, #24]
 801b376:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801b378:	697b      	ldr	r3, [r7, #20]
 801b37a:	685b      	ldr	r3, [r3, #4]
 801b37c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b37e:	693b      	ldr	r3, [r7, #16]
 801b380:	43db      	mvns	r3, r3
 801b382:	69ba      	ldr	r2, [r7, #24]
 801b384:	4013      	ands	r3, r2
 801b386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	685b      	ldr	r3, [r3, #4]
 801b38c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b390:	2b00      	cmp	r3, #0
 801b392:	d003      	beq.n	801b39c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801b394:	69ba      	ldr	r2, [r7, #24]
 801b396:	693b      	ldr	r3, [r7, #16]
 801b398:	4313      	orrs	r3, r2
 801b39a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	69ba      	ldr	r2, [r7, #24]
 801b3a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	43db      	mvns	r3, r3
 801b3ac:	69ba      	ldr	r2, [r7, #24]
 801b3ae:	4013      	ands	r3, r2
 801b3b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801b3b2:	683b      	ldr	r3, [r7, #0]
 801b3b4:	685b      	ldr	r3, [r3, #4]
 801b3b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d003      	beq.n	801b3c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801b3be:	69ba      	ldr	r2, [r7, #24]
 801b3c0:	693b      	ldr	r3, [r7, #16]
 801b3c2:	4313      	orrs	r3, r2
 801b3c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	69ba      	ldr	r2, [r7, #24]
 801b3ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801b3cc:	69fb      	ldr	r3, [r7, #28]
 801b3ce:	3301      	adds	r3, #1
 801b3d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	681a      	ldr	r2, [r3, #0]
 801b3d6:	69fb      	ldr	r3, [r7, #28]
 801b3d8:	fa22 f303 	lsr.w	r3, r2, r3
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f47f ae6b 	bne.w	801b0b8 <HAL_GPIO_Init+0x14>
  }
}
 801b3e2:	bf00      	nop
 801b3e4:	bf00      	nop
 801b3e6:	3724      	adds	r7, #36	; 0x24
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr
 801b3f0:	58000400 	.word	0x58000400

0801b3f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b085      	sub	sp, #20
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	460b      	mov	r3, r1
 801b3fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	691a      	ldr	r2, [r3, #16]
 801b404:	887b      	ldrh	r3, [r7, #2]
 801b406:	4013      	ands	r3, r2
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d002      	beq.n	801b412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801b40c:	2301      	movs	r3, #1
 801b40e:	73fb      	strb	r3, [r7, #15]
 801b410:	e001      	b.n	801b416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801b412:	2300      	movs	r3, #0
 801b414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801b416:	7bfb      	ldrb	r3, [r7, #15]
}
 801b418:	4618      	mov	r0, r3
 801b41a:	3714      	adds	r7, #20
 801b41c:	46bd      	mov	sp, r7
 801b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b422:	4770      	bx	lr

0801b424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801b424:	b480      	push	{r7}
 801b426:	b083      	sub	sp, #12
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
 801b42c:	460b      	mov	r3, r1
 801b42e:	807b      	strh	r3, [r7, #2]
 801b430:	4613      	mov	r3, r2
 801b432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801b434:	787b      	ldrb	r3, [r7, #1]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d003      	beq.n	801b442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801b43a:	887a      	ldrh	r2, [r7, #2]
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801b440:	e003      	b.n	801b44a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801b442:	887b      	ldrh	r3, [r7, #2]
 801b444:	041a      	lsls	r2, r3, #16
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	619a      	str	r2, [r3, #24]
}
 801b44a:	bf00      	nop
 801b44c:	370c      	adds	r7, #12
 801b44e:	46bd      	mov	sp, r7
 801b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b454:	4770      	bx	lr

0801b456 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801b456:	b480      	push	{r7}
 801b458:	b085      	sub	sp, #20
 801b45a:	af00      	add	r7, sp, #0
 801b45c:	6078      	str	r0, [r7, #4]
 801b45e:	460b      	mov	r3, r1
 801b460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	695b      	ldr	r3, [r3, #20]
 801b466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801b468:	887a      	ldrh	r2, [r7, #2]
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	4013      	ands	r3, r2
 801b46e:	041a      	lsls	r2, r3, #16
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	43d9      	mvns	r1, r3
 801b474:	887b      	ldrh	r3, [r7, #2]
 801b476:	400b      	ands	r3, r1
 801b478:	431a      	orrs	r2, r3
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	619a      	str	r2, [r3, #24]
}
 801b47e:	bf00      	nop
 801b480:	3714      	adds	r7, #20
 801b482:	46bd      	mov	sp, r7
 801b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b488:	4770      	bx	lr
	...

0801b48c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801b494:	4b19      	ldr	r3, [pc, #100]	; (801b4fc <HAL_PWREx_ConfigSupply+0x70>)
 801b496:	68db      	ldr	r3, [r3, #12]
 801b498:	f003 0304 	and.w	r3, r3, #4
 801b49c:	2b04      	cmp	r3, #4
 801b49e:	d00a      	beq.n	801b4b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b4a0:	4b16      	ldr	r3, [pc, #88]	; (801b4fc <HAL_PWREx_ConfigSupply+0x70>)
 801b4a2:	68db      	ldr	r3, [r3, #12]
 801b4a4:	f003 0307 	and.w	r3, r3, #7
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	429a      	cmp	r2, r3
 801b4ac:	d001      	beq.n	801b4b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	e01f      	b.n	801b4f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	e01d      	b.n	801b4f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b4b6:	4b11      	ldr	r3, [pc, #68]	; (801b4fc <HAL_PWREx_ConfigSupply+0x70>)
 801b4b8:	68db      	ldr	r3, [r3, #12]
 801b4ba:	f023 0207 	bic.w	r2, r3, #7
 801b4be:	490f      	ldr	r1, [pc, #60]	; (801b4fc <HAL_PWREx_ConfigSupply+0x70>)
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	4313      	orrs	r3, r2
 801b4c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801b4c6:	f7fa fa07 	bl	80158d8 <HAL_GetTick>
 801b4ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b4cc:	e009      	b.n	801b4e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b4ce:	f7fa fa03 	bl	80158d8 <HAL_GetTick>
 801b4d2:	4602      	mov	r2, r0
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	1ad3      	subs	r3, r2, r3
 801b4d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b4dc:	d901      	bls.n	801b4e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801b4de:	2301      	movs	r3, #1
 801b4e0:	e007      	b.n	801b4f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b4e2:	4b06      	ldr	r3, [pc, #24]	; (801b4fc <HAL_PWREx_ConfigSupply+0x70>)
 801b4e4:	685b      	ldr	r3, [r3, #4]
 801b4e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b4ee:	d1ee      	bne.n	801b4ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801b4f0:	2300      	movs	r3, #0
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3710      	adds	r7, #16
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	58024800 	.word	0x58024800

0801b500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b08c      	sub	sp, #48	; 0x30
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d101      	bne.n	801b512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b50e:	2301      	movs	r3, #1
 801b510:	e3c8      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f003 0301 	and.w	r3, r3, #1
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	f000 8087 	beq.w	801b62e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b520:	4b88      	ldr	r3, [pc, #544]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b522:	691b      	ldr	r3, [r3, #16]
 801b524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b528:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b52a:	4b86      	ldr	r3, [pc, #536]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b52e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b532:	2b10      	cmp	r3, #16
 801b534:	d007      	beq.n	801b546 <HAL_RCC_OscConfig+0x46>
 801b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b538:	2b18      	cmp	r3, #24
 801b53a:	d110      	bne.n	801b55e <HAL_RCC_OscConfig+0x5e>
 801b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b53e:	f003 0303 	and.w	r3, r3, #3
 801b542:	2b02      	cmp	r3, #2
 801b544:	d10b      	bne.n	801b55e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b546:	4b7f      	ldr	r3, [pc, #508]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d06c      	beq.n	801b62c <HAL_RCC_OscConfig+0x12c>
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	685b      	ldr	r3, [r3, #4]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d168      	bne.n	801b62c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801b55a:	2301      	movs	r3, #1
 801b55c:	e3a2      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	685b      	ldr	r3, [r3, #4]
 801b562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b566:	d106      	bne.n	801b576 <HAL_RCC_OscConfig+0x76>
 801b568:	4b76      	ldr	r3, [pc, #472]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	4a75      	ldr	r2, [pc, #468]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b56e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b572:	6013      	str	r3, [r2, #0]
 801b574:	e02e      	b.n	801b5d4 <HAL_RCC_OscConfig+0xd4>
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	685b      	ldr	r3, [r3, #4]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d10c      	bne.n	801b598 <HAL_RCC_OscConfig+0x98>
 801b57e:	4b71      	ldr	r3, [pc, #452]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	4a70      	ldr	r2, [pc, #448]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b588:	6013      	str	r3, [r2, #0]
 801b58a:	4b6e      	ldr	r3, [pc, #440]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	4a6d      	ldr	r2, [pc, #436]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b594:	6013      	str	r3, [r2, #0]
 801b596:	e01d      	b.n	801b5d4 <HAL_RCC_OscConfig+0xd4>
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	685b      	ldr	r3, [r3, #4]
 801b59c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b5a0:	d10c      	bne.n	801b5bc <HAL_RCC_OscConfig+0xbc>
 801b5a2:	4b68      	ldr	r3, [pc, #416]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	4a67      	ldr	r2, [pc, #412]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b5ac:	6013      	str	r3, [r2, #0]
 801b5ae:	4b65      	ldr	r3, [pc, #404]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	4a64      	ldr	r2, [pc, #400]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b5b8:	6013      	str	r3, [r2, #0]
 801b5ba:	e00b      	b.n	801b5d4 <HAL_RCC_OscConfig+0xd4>
 801b5bc:	4b61      	ldr	r3, [pc, #388]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4a60      	ldr	r2, [pc, #384]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b5c6:	6013      	str	r3, [r2, #0]
 801b5c8:	4b5e      	ldr	r3, [pc, #376]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a5d      	ldr	r2, [pc, #372]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b5d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	685b      	ldr	r3, [r3, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d013      	beq.n	801b604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5dc:	f7fa f97c 	bl	80158d8 <HAL_GetTick>
 801b5e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b5e2:	e008      	b.n	801b5f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b5e4:	f7fa f978 	bl	80158d8 <HAL_GetTick>
 801b5e8:	4602      	mov	r2, r0
 801b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	2b64      	cmp	r3, #100	; 0x64
 801b5f0:	d901      	bls.n	801b5f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801b5f2:	2303      	movs	r3, #3
 801b5f4:	e356      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b5f6:	4b53      	ldr	r3, [pc, #332]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d0f0      	beq.n	801b5e4 <HAL_RCC_OscConfig+0xe4>
 801b602:	e014      	b.n	801b62e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b604:	f7fa f968 	bl	80158d8 <HAL_GetTick>
 801b608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b60a:	e008      	b.n	801b61e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b60c:	f7fa f964 	bl	80158d8 <HAL_GetTick>
 801b610:	4602      	mov	r2, r0
 801b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b614:	1ad3      	subs	r3, r2, r3
 801b616:	2b64      	cmp	r3, #100	; 0x64
 801b618:	d901      	bls.n	801b61e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801b61a:	2303      	movs	r3, #3
 801b61c:	e342      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b61e:	4b49      	ldr	r3, [pc, #292]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b626:	2b00      	cmp	r3, #0
 801b628:	d1f0      	bne.n	801b60c <HAL_RCC_OscConfig+0x10c>
 801b62a:	e000      	b.n	801b62e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b62c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	f003 0302 	and.w	r3, r3, #2
 801b636:	2b00      	cmp	r3, #0
 801b638:	f000 808c 	beq.w	801b754 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b63c:	4b41      	ldr	r3, [pc, #260]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b63e:	691b      	ldr	r3, [r3, #16]
 801b640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b644:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b646:	4b3f      	ldr	r3, [pc, #252]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b64a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b64c:	6a3b      	ldr	r3, [r7, #32]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d007      	beq.n	801b662 <HAL_RCC_OscConfig+0x162>
 801b652:	6a3b      	ldr	r3, [r7, #32]
 801b654:	2b18      	cmp	r3, #24
 801b656:	d137      	bne.n	801b6c8 <HAL_RCC_OscConfig+0x1c8>
 801b658:	69fb      	ldr	r3, [r7, #28]
 801b65a:	f003 0303 	and.w	r3, r3, #3
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d132      	bne.n	801b6c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b662:	4b38      	ldr	r3, [pc, #224]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	f003 0304 	and.w	r3, r3, #4
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d005      	beq.n	801b67a <HAL_RCC_OscConfig+0x17a>
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	68db      	ldr	r3, [r3, #12]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d101      	bne.n	801b67a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b676:	2301      	movs	r3, #1
 801b678:	e314      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b67a:	4b32      	ldr	r3, [pc, #200]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	f023 0219 	bic.w	r2, r3, #25
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	68db      	ldr	r3, [r3, #12]
 801b686:	492f      	ldr	r1, [pc, #188]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b688:	4313      	orrs	r3, r2
 801b68a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b68c:	f7fa f924 	bl	80158d8 <HAL_GetTick>
 801b690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b692:	e008      	b.n	801b6a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b694:	f7fa f920 	bl	80158d8 <HAL_GetTick>
 801b698:	4602      	mov	r2, r0
 801b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b69c:	1ad3      	subs	r3, r2, r3
 801b69e:	2b02      	cmp	r3, #2
 801b6a0:	d901      	bls.n	801b6a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801b6a2:	2303      	movs	r3, #3
 801b6a4:	e2fe      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b6a6:	4b27      	ldr	r3, [pc, #156]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	f003 0304 	and.w	r3, r3, #4
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d0f0      	beq.n	801b694 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b6b2:	4b24      	ldr	r3, [pc, #144]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	691b      	ldr	r3, [r3, #16]
 801b6be:	061b      	lsls	r3, r3, #24
 801b6c0:	4920      	ldr	r1, [pc, #128]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6c2:	4313      	orrs	r3, r2
 801b6c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b6c6:	e045      	b.n	801b754 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	68db      	ldr	r3, [r3, #12]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d026      	beq.n	801b71e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b6d0:	4b1c      	ldr	r3, [pc, #112]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	f023 0219 	bic.w	r2, r3, #25
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	68db      	ldr	r3, [r3, #12]
 801b6dc:	4919      	ldr	r1, [pc, #100]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6de:	4313      	orrs	r3, r2
 801b6e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6e2:	f7fa f8f9 	bl	80158d8 <HAL_GetTick>
 801b6e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b6e8:	e008      	b.n	801b6fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b6ea:	f7fa f8f5 	bl	80158d8 <HAL_GetTick>
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6f2:	1ad3      	subs	r3, r2, r3
 801b6f4:	2b02      	cmp	r3, #2
 801b6f6:	d901      	bls.n	801b6fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801b6f8:	2303      	movs	r3, #3
 801b6fa:	e2d3      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b6fc:	4b11      	ldr	r3, [pc, #68]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	f003 0304 	and.w	r3, r3, #4
 801b704:	2b00      	cmp	r3, #0
 801b706:	d0f0      	beq.n	801b6ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b708:	4b0e      	ldr	r3, [pc, #56]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b70a:	685b      	ldr	r3, [r3, #4]
 801b70c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	691b      	ldr	r3, [r3, #16]
 801b714:	061b      	lsls	r3, r3, #24
 801b716:	490b      	ldr	r1, [pc, #44]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b718:	4313      	orrs	r3, r2
 801b71a:	604b      	str	r3, [r1, #4]
 801b71c:	e01a      	b.n	801b754 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b71e:	4b09      	ldr	r3, [pc, #36]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	4a08      	ldr	r2, [pc, #32]	; (801b744 <HAL_RCC_OscConfig+0x244>)
 801b724:	f023 0301 	bic.w	r3, r3, #1
 801b728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b72a:	f7fa f8d5 	bl	80158d8 <HAL_GetTick>
 801b72e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b730:	e00a      	b.n	801b748 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b732:	f7fa f8d1 	bl	80158d8 <HAL_GetTick>
 801b736:	4602      	mov	r2, r0
 801b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b73a:	1ad3      	subs	r3, r2, r3
 801b73c:	2b02      	cmp	r3, #2
 801b73e:	d903      	bls.n	801b748 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b740:	2303      	movs	r3, #3
 801b742:	e2af      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
 801b744:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b748:	4b96      	ldr	r3, [pc, #600]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	f003 0304 	and.w	r3, r3, #4
 801b750:	2b00      	cmp	r3, #0
 801b752:	d1ee      	bne.n	801b732 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	f003 0310 	and.w	r3, r3, #16
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d06a      	beq.n	801b836 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b760:	4b90      	ldr	r3, [pc, #576]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b762:	691b      	ldr	r3, [r3, #16]
 801b764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b768:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b76a:	4b8e      	ldr	r3, [pc, #568]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b76e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	2b08      	cmp	r3, #8
 801b774:	d007      	beq.n	801b786 <HAL_RCC_OscConfig+0x286>
 801b776:	69bb      	ldr	r3, [r7, #24]
 801b778:	2b18      	cmp	r3, #24
 801b77a:	d11b      	bne.n	801b7b4 <HAL_RCC_OscConfig+0x2b4>
 801b77c:	697b      	ldr	r3, [r7, #20]
 801b77e:	f003 0303 	and.w	r3, r3, #3
 801b782:	2b01      	cmp	r3, #1
 801b784:	d116      	bne.n	801b7b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b786:	4b87      	ldr	r3, [pc, #540]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d005      	beq.n	801b79e <HAL_RCC_OscConfig+0x29e>
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	69db      	ldr	r3, [r3, #28]
 801b796:	2b80      	cmp	r3, #128	; 0x80
 801b798:	d001      	beq.n	801b79e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b79a:	2301      	movs	r3, #1
 801b79c:	e282      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b79e:	4b81      	ldr	r3, [pc, #516]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7a0:	68db      	ldr	r3, [r3, #12]
 801b7a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	6a1b      	ldr	r3, [r3, #32]
 801b7aa:	061b      	lsls	r3, r3, #24
 801b7ac:	497d      	ldr	r1, [pc, #500]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7ae:	4313      	orrs	r3, r2
 801b7b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b7b2:	e040      	b.n	801b836 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	69db      	ldr	r3, [r3, #28]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d023      	beq.n	801b804 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b7bc:	4b79      	ldr	r3, [pc, #484]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4a78      	ldr	r2, [pc, #480]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b7c8:	f7fa f886 	bl	80158d8 <HAL_GetTick>
 801b7cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b7ce:	e008      	b.n	801b7e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b7d0:	f7fa f882 	bl	80158d8 <HAL_GetTick>
 801b7d4:	4602      	mov	r2, r0
 801b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d8:	1ad3      	subs	r3, r2, r3
 801b7da:	2b02      	cmp	r3, #2
 801b7dc:	d901      	bls.n	801b7e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b7de:	2303      	movs	r3, #3
 801b7e0:	e260      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b7e2:	4b70      	ldr	r3, [pc, #448]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d0f0      	beq.n	801b7d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b7ee:	4b6d      	ldr	r3, [pc, #436]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7f0:	68db      	ldr	r3, [r3, #12]
 801b7f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	6a1b      	ldr	r3, [r3, #32]
 801b7fa:	061b      	lsls	r3, r3, #24
 801b7fc:	4969      	ldr	r1, [pc, #420]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b7fe:	4313      	orrs	r3, r2
 801b800:	60cb      	str	r3, [r1, #12]
 801b802:	e018      	b.n	801b836 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b804:	4b67      	ldr	r3, [pc, #412]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	4a66      	ldr	r2, [pc, #408]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b80e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b810:	f7fa f862 	bl	80158d8 <HAL_GetTick>
 801b814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b816:	e008      	b.n	801b82a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b818:	f7fa f85e 	bl	80158d8 <HAL_GetTick>
 801b81c:	4602      	mov	r2, r0
 801b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	2b02      	cmp	r3, #2
 801b824:	d901      	bls.n	801b82a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b826:	2303      	movs	r3, #3
 801b828:	e23c      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b82a:	4b5e      	ldr	r3, [pc, #376]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b832:	2b00      	cmp	r3, #0
 801b834:	d1f0      	bne.n	801b818 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	f003 0308 	and.w	r3, r3, #8
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d036      	beq.n	801b8b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	695b      	ldr	r3, [r3, #20]
 801b846:	2b00      	cmp	r3, #0
 801b848:	d019      	beq.n	801b87e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b84a:	4b56      	ldr	r3, [pc, #344]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b84e:	4a55      	ldr	r2, [pc, #340]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b850:	f043 0301 	orr.w	r3, r3, #1
 801b854:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b856:	f7fa f83f 	bl	80158d8 <HAL_GetTick>
 801b85a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b85c:	e008      	b.n	801b870 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b85e:	f7fa f83b 	bl	80158d8 <HAL_GetTick>
 801b862:	4602      	mov	r2, r0
 801b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b866:	1ad3      	subs	r3, r2, r3
 801b868:	2b02      	cmp	r3, #2
 801b86a:	d901      	bls.n	801b870 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b86c:	2303      	movs	r3, #3
 801b86e:	e219      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b870:	4b4c      	ldr	r3, [pc, #304]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b874:	f003 0302 	and.w	r3, r3, #2
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d0f0      	beq.n	801b85e <HAL_RCC_OscConfig+0x35e>
 801b87c:	e018      	b.n	801b8b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b87e:	4b49      	ldr	r3, [pc, #292]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b882:	4a48      	ldr	r2, [pc, #288]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b884:	f023 0301 	bic.w	r3, r3, #1
 801b888:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b88a:	f7fa f825 	bl	80158d8 <HAL_GetTick>
 801b88e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b890:	e008      	b.n	801b8a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b892:	f7fa f821 	bl	80158d8 <HAL_GetTick>
 801b896:	4602      	mov	r2, r0
 801b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b89a:	1ad3      	subs	r3, r2, r3
 801b89c:	2b02      	cmp	r3, #2
 801b89e:	d901      	bls.n	801b8a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b8a0:	2303      	movs	r3, #3
 801b8a2:	e1ff      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b8a4:	4b3f      	ldr	r3, [pc, #252]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8a8:	f003 0302 	and.w	r3, r3, #2
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d1f0      	bne.n	801b892 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	f003 0320 	and.w	r3, r3, #32
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d036      	beq.n	801b92a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	699b      	ldr	r3, [r3, #24]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d019      	beq.n	801b8f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b8c4:	4b37      	ldr	r3, [pc, #220]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	4a36      	ldr	r2, [pc, #216]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b8ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b8d0:	f7fa f802 	bl	80158d8 <HAL_GetTick>
 801b8d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b8d6:	e008      	b.n	801b8ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8d8:	f7f9 fffe 	bl	80158d8 <HAL_GetTick>
 801b8dc:	4602      	mov	r2, r0
 801b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e0:	1ad3      	subs	r3, r2, r3
 801b8e2:	2b02      	cmp	r3, #2
 801b8e4:	d901      	bls.n	801b8ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b8e6:	2303      	movs	r3, #3
 801b8e8:	e1dc      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b8ea:	4b2e      	ldr	r3, [pc, #184]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d0f0      	beq.n	801b8d8 <HAL_RCC_OscConfig+0x3d8>
 801b8f6:	e018      	b.n	801b92a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b8f8:	4b2a      	ldr	r3, [pc, #168]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	4a29      	ldr	r2, [pc, #164]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b902:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b904:	f7f9 ffe8 	bl	80158d8 <HAL_GetTick>
 801b908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b90a:	e008      	b.n	801b91e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b90c:	f7f9 ffe4 	bl	80158d8 <HAL_GetTick>
 801b910:	4602      	mov	r2, r0
 801b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b914:	1ad3      	subs	r3, r2, r3
 801b916:	2b02      	cmp	r3, #2
 801b918:	d901      	bls.n	801b91e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b91a:	2303      	movs	r3, #3
 801b91c:	e1c2      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b91e:	4b21      	ldr	r3, [pc, #132]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b926:	2b00      	cmp	r3, #0
 801b928:	d1f0      	bne.n	801b90c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	f003 0304 	and.w	r3, r3, #4
 801b932:	2b00      	cmp	r3, #0
 801b934:	f000 8086 	beq.w	801ba44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b938:	4b1b      	ldr	r3, [pc, #108]	; (801b9a8 <HAL_RCC_OscConfig+0x4a8>)
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	4a1a      	ldr	r2, [pc, #104]	; (801b9a8 <HAL_RCC_OscConfig+0x4a8>)
 801b93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b944:	f7f9 ffc8 	bl	80158d8 <HAL_GetTick>
 801b948:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b94a:	e008      	b.n	801b95e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b94c:	f7f9 ffc4 	bl	80158d8 <HAL_GetTick>
 801b950:	4602      	mov	r2, r0
 801b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b954:	1ad3      	subs	r3, r2, r3
 801b956:	2b64      	cmp	r3, #100	; 0x64
 801b958:	d901      	bls.n	801b95e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b95a:	2303      	movs	r3, #3
 801b95c:	e1a2      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b95e:	4b12      	ldr	r3, [pc, #72]	; (801b9a8 <HAL_RCC_OscConfig+0x4a8>)
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b966:	2b00      	cmp	r3, #0
 801b968:	d0f0      	beq.n	801b94c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	689b      	ldr	r3, [r3, #8]
 801b96e:	2b01      	cmp	r3, #1
 801b970:	d106      	bne.n	801b980 <HAL_RCC_OscConfig+0x480>
 801b972:	4b0c      	ldr	r3, [pc, #48]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b976:	4a0b      	ldr	r2, [pc, #44]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b978:	f043 0301 	orr.w	r3, r3, #1
 801b97c:	6713      	str	r3, [r2, #112]	; 0x70
 801b97e:	e032      	b.n	801b9e6 <HAL_RCC_OscConfig+0x4e6>
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	689b      	ldr	r3, [r3, #8]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d111      	bne.n	801b9ac <HAL_RCC_OscConfig+0x4ac>
 801b988:	4b06      	ldr	r3, [pc, #24]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b98c:	4a05      	ldr	r2, [pc, #20]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b98e:	f023 0301 	bic.w	r3, r3, #1
 801b992:	6713      	str	r3, [r2, #112]	; 0x70
 801b994:	4b03      	ldr	r3, [pc, #12]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b998:	4a02      	ldr	r2, [pc, #8]	; (801b9a4 <HAL_RCC_OscConfig+0x4a4>)
 801b99a:	f023 0304 	bic.w	r3, r3, #4
 801b99e:	6713      	str	r3, [r2, #112]	; 0x70
 801b9a0:	e021      	b.n	801b9e6 <HAL_RCC_OscConfig+0x4e6>
 801b9a2:	bf00      	nop
 801b9a4:	58024400 	.word	0x58024400
 801b9a8:	58024800 	.word	0x58024800
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	689b      	ldr	r3, [r3, #8]
 801b9b0:	2b05      	cmp	r3, #5
 801b9b2:	d10c      	bne.n	801b9ce <HAL_RCC_OscConfig+0x4ce>
 801b9b4:	4b83      	ldr	r3, [pc, #524]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9b8:	4a82      	ldr	r2, [pc, #520]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9ba:	f043 0304 	orr.w	r3, r3, #4
 801b9be:	6713      	str	r3, [r2, #112]	; 0x70
 801b9c0:	4b80      	ldr	r3, [pc, #512]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9c4:	4a7f      	ldr	r2, [pc, #508]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9c6:	f043 0301 	orr.w	r3, r3, #1
 801b9ca:	6713      	str	r3, [r2, #112]	; 0x70
 801b9cc:	e00b      	b.n	801b9e6 <HAL_RCC_OscConfig+0x4e6>
 801b9ce:	4b7d      	ldr	r3, [pc, #500]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9d2:	4a7c      	ldr	r2, [pc, #496]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9d4:	f023 0301 	bic.w	r3, r3, #1
 801b9d8:	6713      	str	r3, [r2, #112]	; 0x70
 801b9da:	4b7a      	ldr	r3, [pc, #488]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9de:	4a79      	ldr	r2, [pc, #484]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801b9e0:	f023 0304 	bic.w	r3, r3, #4
 801b9e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	689b      	ldr	r3, [r3, #8]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d015      	beq.n	801ba1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b9ee:	f7f9 ff73 	bl	80158d8 <HAL_GetTick>
 801b9f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b9f4:	e00a      	b.n	801ba0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b9f6:	f7f9 ff6f 	bl	80158d8 <HAL_GetTick>
 801b9fa:	4602      	mov	r2, r0
 801b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9fe:	1ad3      	subs	r3, r2, r3
 801ba00:	f241 3288 	movw	r2, #5000	; 0x1388
 801ba04:	4293      	cmp	r3, r2
 801ba06:	d901      	bls.n	801ba0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801ba08:	2303      	movs	r3, #3
 801ba0a:	e14b      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ba0c:	4b6d      	ldr	r3, [pc, #436]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba10:	f003 0302 	and.w	r3, r3, #2
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d0ee      	beq.n	801b9f6 <HAL_RCC_OscConfig+0x4f6>
 801ba18:	e014      	b.n	801ba44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba1a:	f7f9 ff5d 	bl	80158d8 <HAL_GetTick>
 801ba1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ba20:	e00a      	b.n	801ba38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ba22:	f7f9 ff59 	bl	80158d8 <HAL_GetTick>
 801ba26:	4602      	mov	r2, r0
 801ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba2a:	1ad3      	subs	r3, r2, r3
 801ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 801ba30:	4293      	cmp	r3, r2
 801ba32:	d901      	bls.n	801ba38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801ba34:	2303      	movs	r3, #3
 801ba36:	e135      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ba38:	4b62      	ldr	r3, [pc, #392]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba3c:	f003 0302 	and.w	r3, r3, #2
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d1ee      	bne.n	801ba22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	f000 812a 	beq.w	801bca2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801ba4e:	4b5d      	ldr	r3, [pc, #372]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba50:	691b      	ldr	r3, [r3, #16]
 801ba52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba56:	2b18      	cmp	r3, #24
 801ba58:	f000 80ba 	beq.w	801bbd0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba60:	2b02      	cmp	r3, #2
 801ba62:	f040 8095 	bne.w	801bb90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ba66:	4b57      	ldr	r3, [pc, #348]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	4a56      	ldr	r2, [pc, #344]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ba70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba72:	f7f9 ff31 	bl	80158d8 <HAL_GetTick>
 801ba76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ba78:	e008      	b.n	801ba8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ba7a:	f7f9 ff2d 	bl	80158d8 <HAL_GetTick>
 801ba7e:	4602      	mov	r2, r0
 801ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba82:	1ad3      	subs	r3, r2, r3
 801ba84:	2b02      	cmp	r3, #2
 801ba86:	d901      	bls.n	801ba8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801ba88:	2303      	movs	r3, #3
 801ba8a:	e10b      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ba8c:	4b4d      	ldr	r3, [pc, #308]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d1f0      	bne.n	801ba7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ba98:	4b4a      	ldr	r3, [pc, #296]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801ba9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ba9c:	4b4a      	ldr	r3, [pc, #296]	; (801bbc8 <HAL_RCC_OscConfig+0x6c8>)
 801ba9e:	4013      	ands	r3, r2
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801baa4:	687a      	ldr	r2, [r7, #4]
 801baa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801baa8:	0112      	lsls	r2, r2, #4
 801baaa:	430a      	orrs	r2, r1
 801baac:	4945      	ldr	r1, [pc, #276]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801baae:	4313      	orrs	r3, r2
 801bab0:	628b      	str	r3, [r1, #40]	; 0x28
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bab6:	3b01      	subs	r3, #1
 801bab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bac0:	3b01      	subs	r3, #1
 801bac2:	025b      	lsls	r3, r3, #9
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	431a      	orrs	r2, r3
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bacc:	3b01      	subs	r3, #1
 801bace:	041b      	lsls	r3, r3, #16
 801bad0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801bad4:	431a      	orrs	r2, r3
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bada:	3b01      	subs	r3, #1
 801badc:	061b      	lsls	r3, r3, #24
 801bade:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801bae2:	4938      	ldr	r1, [pc, #224]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bae4:	4313      	orrs	r3, r2
 801bae6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801bae8:	4b36      	ldr	r3, [pc, #216]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baec:	4a35      	ldr	r2, [pc, #212]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801baee:	f023 0301 	bic.w	r3, r3, #1
 801baf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801baf4:	4b33      	ldr	r3, [pc, #204]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801baf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801baf8:	4b34      	ldr	r3, [pc, #208]	; (801bbcc <HAL_RCC_OscConfig+0x6cc>)
 801bafa:	4013      	ands	r3, r2
 801bafc:	687a      	ldr	r2, [r7, #4]
 801bafe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801bb00:	00d2      	lsls	r2, r2, #3
 801bb02:	4930      	ldr	r1, [pc, #192]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb04:	4313      	orrs	r3, r2
 801bb06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801bb08:	4b2e      	ldr	r3, [pc, #184]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb0c:	f023 020c 	bic.w	r2, r3, #12
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb14:	492b      	ldr	r1, [pc, #172]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb16:	4313      	orrs	r3, r2
 801bb18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801bb1a:	4b2a      	ldr	r3, [pc, #168]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb1e:	f023 0202 	bic.w	r2, r3, #2
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb26:	4927      	ldr	r1, [pc, #156]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb28:	4313      	orrs	r3, r2
 801bb2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801bb2c:	4b25      	ldr	r3, [pc, #148]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb30:	4a24      	ldr	r2, [pc, #144]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bb38:	4b22      	ldr	r3, [pc, #136]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb3c:	4a21      	ldr	r2, [pc, #132]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bb42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801bb44:	4b1f      	ldr	r3, [pc, #124]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb48:	4a1e      	ldr	r2, [pc, #120]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801bb50:	4b1c      	ldr	r3, [pc, #112]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb54:	4a1b      	ldr	r2, [pc, #108]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb56:	f043 0301 	orr.w	r3, r3, #1
 801bb5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bb5c:	4b19      	ldr	r3, [pc, #100]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4a18      	ldr	r2, [pc, #96]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801bb66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb68:	f7f9 feb6 	bl	80158d8 <HAL_GetTick>
 801bb6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bb6e:	e008      	b.n	801bb82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bb70:	f7f9 feb2 	bl	80158d8 <HAL_GetTick>
 801bb74:	4602      	mov	r2, r0
 801bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb78:	1ad3      	subs	r3, r2, r3
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	d901      	bls.n	801bb82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801bb7e:	2303      	movs	r3, #3
 801bb80:	e090      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bb82:	4b10      	ldr	r3, [pc, #64]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d0f0      	beq.n	801bb70 <HAL_RCC_OscConfig+0x670>
 801bb8e:	e088      	b.n	801bca2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bb90:	4b0c      	ldr	r3, [pc, #48]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a0b      	ldr	r2, [pc, #44]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bb96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bb9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb9c:	f7f9 fe9c 	bl	80158d8 <HAL_GetTick>
 801bba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bba2:	e008      	b.n	801bbb6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bba4:	f7f9 fe98 	bl	80158d8 <HAL_GetTick>
 801bba8:	4602      	mov	r2, r0
 801bbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbac:	1ad3      	subs	r3, r2, r3
 801bbae:	2b02      	cmp	r3, #2
 801bbb0:	d901      	bls.n	801bbb6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801bbb2:	2303      	movs	r3, #3
 801bbb4:	e076      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bbb6:	4b03      	ldr	r3, [pc, #12]	; (801bbc4 <HAL_RCC_OscConfig+0x6c4>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d1f0      	bne.n	801bba4 <HAL_RCC_OscConfig+0x6a4>
 801bbc2:	e06e      	b.n	801bca2 <HAL_RCC_OscConfig+0x7a2>
 801bbc4:	58024400 	.word	0x58024400
 801bbc8:	fffffc0c 	.word	0xfffffc0c
 801bbcc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801bbd0:	4b36      	ldr	r3, [pc, #216]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801bbd6:	4b35      	ldr	r3, [pc, #212]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbe0:	2b01      	cmp	r3, #1
 801bbe2:	d031      	beq.n	801bc48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	f003 0203 	and.w	r2, r3, #3
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bbee:	429a      	cmp	r2, r3
 801bbf0:	d12a      	bne.n	801bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bbf2:	693b      	ldr	r3, [r7, #16]
 801bbf4:	091b      	lsrs	r3, r3, #4
 801bbf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	d122      	bne.n	801bc48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bc0e:	429a      	cmp	r2, r3
 801bc10:	d11a      	bne.n	801bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	0a5b      	lsrs	r3, r3, #9
 801bc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bc20:	429a      	cmp	r2, r3
 801bc22:	d111      	bne.n	801bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801bc24:	68fb      	ldr	r3, [r7, #12]
 801bc26:	0c1b      	lsrs	r3, r3, #16
 801bc28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801bc32:	429a      	cmp	r2, r3
 801bc34:	d108      	bne.n	801bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	0e1b      	lsrs	r3, r3, #24
 801bc3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801bc44:	429a      	cmp	r2, r3
 801bc46:	d001      	beq.n	801bc4c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801bc48:	2301      	movs	r3, #1
 801bc4a:	e02b      	b.n	801bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801bc4c:	4b17      	ldr	r3, [pc, #92]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc50:	08db      	lsrs	r3, r3, #3
 801bc52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc5c:	693a      	ldr	r2, [r7, #16]
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d01f      	beq.n	801bca2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801bc62:	4b12      	ldr	r3, [pc, #72]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc66:	4a11      	ldr	r2, [pc, #68]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc68:	f023 0301 	bic.w	r3, r3, #1
 801bc6c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801bc6e:	f7f9 fe33 	bl	80158d8 <HAL_GetTick>
 801bc72:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801bc74:	bf00      	nop
 801bc76:	f7f9 fe2f 	bl	80158d8 <HAL_GetTick>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d0f9      	beq.n	801bc76 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801bc82:	4b0a      	ldr	r3, [pc, #40]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bc86:	4b0a      	ldr	r3, [pc, #40]	; (801bcb0 <HAL_RCC_OscConfig+0x7b0>)
 801bc88:	4013      	ands	r3, r2
 801bc8a:	687a      	ldr	r2, [r7, #4]
 801bc8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801bc8e:	00d2      	lsls	r2, r2, #3
 801bc90:	4906      	ldr	r1, [pc, #24]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc92:	4313      	orrs	r3, r2
 801bc94:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801bc96:	4b05      	ldr	r3, [pc, #20]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc9a:	4a04      	ldr	r2, [pc, #16]	; (801bcac <HAL_RCC_OscConfig+0x7ac>)
 801bc9c:	f043 0301 	orr.w	r3, r3, #1
 801bca0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801bca2:	2300      	movs	r3, #0
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	3730      	adds	r7, #48	; 0x30
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd80      	pop	{r7, pc}
 801bcac:	58024400 	.word	0x58024400
 801bcb0:	ffff0007 	.word	0xffff0007

0801bcb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b086      	sub	sp, #24
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
 801bcbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d101      	bne.n	801bcc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bcc4:	2301      	movs	r3, #1
 801bcc6:	e19c      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801bcc8:	4b8a      	ldr	r3, [pc, #552]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	f003 030f 	and.w	r3, r3, #15
 801bcd0:	683a      	ldr	r2, [r7, #0]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d910      	bls.n	801bcf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bcd6:	4b87      	ldr	r3, [pc, #540]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f023 020f 	bic.w	r2, r3, #15
 801bcde:	4985      	ldr	r1, [pc, #532]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	4313      	orrs	r3, r2
 801bce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bce6:	4b83      	ldr	r3, [pc, #524]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f003 030f 	and.w	r3, r3, #15
 801bcee:	683a      	ldr	r2, [r7, #0]
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d001      	beq.n	801bcf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e184      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	f003 0304 	and.w	r3, r3, #4
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d010      	beq.n	801bd26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	691a      	ldr	r2, [r3, #16]
 801bd08:	4b7b      	ldr	r3, [pc, #492]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd0a:	699b      	ldr	r3, [r3, #24]
 801bd0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bd10:	429a      	cmp	r2, r3
 801bd12:	d908      	bls.n	801bd26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801bd14:	4b78      	ldr	r3, [pc, #480]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd16:	699b      	ldr	r3, [r3, #24]
 801bd18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	691b      	ldr	r3, [r3, #16]
 801bd20:	4975      	ldr	r1, [pc, #468]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd22:	4313      	orrs	r3, r2
 801bd24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	f003 0308 	and.w	r3, r3, #8
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d010      	beq.n	801bd54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	695a      	ldr	r2, [r3, #20]
 801bd36:	4b70      	ldr	r3, [pc, #448]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd38:	69db      	ldr	r3, [r3, #28]
 801bd3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bd3e:	429a      	cmp	r2, r3
 801bd40:	d908      	bls.n	801bd54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801bd42:	4b6d      	ldr	r3, [pc, #436]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd44:	69db      	ldr	r3, [r3, #28]
 801bd46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	695b      	ldr	r3, [r3, #20]
 801bd4e:	496a      	ldr	r1, [pc, #424]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd50:	4313      	orrs	r3, r2
 801bd52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	f003 0310 	and.w	r3, r3, #16
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d010      	beq.n	801bd82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	699a      	ldr	r2, [r3, #24]
 801bd64:	4b64      	ldr	r3, [pc, #400]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd66:	69db      	ldr	r3, [r3, #28]
 801bd68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	d908      	bls.n	801bd82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801bd70:	4b61      	ldr	r3, [pc, #388]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd72:	69db      	ldr	r3, [r3, #28]
 801bd74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	699b      	ldr	r3, [r3, #24]
 801bd7c:	495e      	ldr	r1, [pc, #376]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd7e:	4313      	orrs	r3, r2
 801bd80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	f003 0320 	and.w	r3, r3, #32
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d010      	beq.n	801bdb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	69da      	ldr	r2, [r3, #28]
 801bd92:	4b59      	ldr	r3, [pc, #356]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bd94:	6a1b      	ldr	r3, [r3, #32]
 801bd96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	d908      	bls.n	801bdb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801bd9e:	4b56      	ldr	r3, [pc, #344]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bda0:	6a1b      	ldr	r3, [r3, #32]
 801bda2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	69db      	ldr	r3, [r3, #28]
 801bdaa:	4953      	ldr	r1, [pc, #332]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdac:	4313      	orrs	r3, r2
 801bdae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	f003 0302 	and.w	r3, r3, #2
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d010      	beq.n	801bdde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	68da      	ldr	r2, [r3, #12]
 801bdc0:	4b4d      	ldr	r3, [pc, #308]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdc2:	699b      	ldr	r3, [r3, #24]
 801bdc4:	f003 030f 	and.w	r3, r3, #15
 801bdc8:	429a      	cmp	r2, r3
 801bdca:	d908      	bls.n	801bdde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bdcc:	4b4a      	ldr	r3, [pc, #296]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdce:	699b      	ldr	r3, [r3, #24]
 801bdd0:	f023 020f 	bic.w	r2, r3, #15
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	68db      	ldr	r3, [r3, #12]
 801bdd8:	4947      	ldr	r1, [pc, #284]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdda:	4313      	orrs	r3, r2
 801bddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	f003 0301 	and.w	r3, r3, #1
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d055      	beq.n	801be96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801bdea:	4b43      	ldr	r3, [pc, #268]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdec:	699b      	ldr	r3, [r3, #24]
 801bdee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	689b      	ldr	r3, [r3, #8]
 801bdf6:	4940      	ldr	r1, [pc, #256]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bdf8:	4313      	orrs	r3, r2
 801bdfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	685b      	ldr	r3, [r3, #4]
 801be00:	2b02      	cmp	r3, #2
 801be02:	d107      	bne.n	801be14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801be04:	4b3c      	ldr	r3, [pc, #240]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d121      	bne.n	801be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801be10:	2301      	movs	r3, #1
 801be12:	e0f6      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	685b      	ldr	r3, [r3, #4]
 801be18:	2b03      	cmp	r3, #3
 801be1a:	d107      	bne.n	801be2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801be1c:	4b36      	ldr	r3, [pc, #216]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801be24:	2b00      	cmp	r3, #0
 801be26:	d115      	bne.n	801be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801be28:	2301      	movs	r3, #1
 801be2a:	e0ea      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	2b01      	cmp	r3, #1
 801be32:	d107      	bne.n	801be44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801be34:	4b30      	ldr	r3, [pc, #192]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d109      	bne.n	801be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801be40:	2301      	movs	r3, #1
 801be42:	e0de      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801be44:	4b2c      	ldr	r3, [pc, #176]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	f003 0304 	and.w	r3, r3, #4
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d101      	bne.n	801be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801be50:	2301      	movs	r3, #1
 801be52:	e0d6      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801be54:	4b28      	ldr	r3, [pc, #160]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be56:	691b      	ldr	r3, [r3, #16]
 801be58:	f023 0207 	bic.w	r2, r3, #7
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	685b      	ldr	r3, [r3, #4]
 801be60:	4925      	ldr	r1, [pc, #148]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be62:	4313      	orrs	r3, r2
 801be64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801be66:	f7f9 fd37 	bl	80158d8 <HAL_GetTick>
 801be6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801be6c:	e00a      	b.n	801be84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801be6e:	f7f9 fd33 	bl	80158d8 <HAL_GetTick>
 801be72:	4602      	mov	r2, r0
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	1ad3      	subs	r3, r2, r3
 801be78:	f241 3288 	movw	r2, #5000	; 0x1388
 801be7c:	4293      	cmp	r3, r2
 801be7e:	d901      	bls.n	801be84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801be80:	2303      	movs	r3, #3
 801be82:	e0be      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801be84:	4b1c      	ldr	r3, [pc, #112]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801be86:	691b      	ldr	r3, [r3, #16]
 801be88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	685b      	ldr	r3, [r3, #4]
 801be90:	00db      	lsls	r3, r3, #3
 801be92:	429a      	cmp	r2, r3
 801be94:	d1eb      	bne.n	801be6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	f003 0302 	and.w	r3, r3, #2
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d010      	beq.n	801bec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	68da      	ldr	r2, [r3, #12]
 801bea6:	4b14      	ldr	r3, [pc, #80]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bea8:	699b      	ldr	r3, [r3, #24]
 801beaa:	f003 030f 	and.w	r3, r3, #15
 801beae:	429a      	cmp	r2, r3
 801beb0:	d208      	bcs.n	801bec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801beb2:	4b11      	ldr	r3, [pc, #68]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801beb4:	699b      	ldr	r3, [r3, #24]
 801beb6:	f023 020f 	bic.w	r2, r3, #15
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	68db      	ldr	r3, [r3, #12]
 801bebe:	490e      	ldr	r1, [pc, #56]	; (801bef8 <HAL_RCC_ClockConfig+0x244>)
 801bec0:	4313      	orrs	r3, r2
 801bec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801bec4:	4b0b      	ldr	r3, [pc, #44]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	f003 030f 	and.w	r3, r3, #15
 801becc:	683a      	ldr	r2, [r7, #0]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d214      	bcs.n	801befc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bed2:	4b08      	ldr	r3, [pc, #32]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	f023 020f 	bic.w	r2, r3, #15
 801beda:	4906      	ldr	r1, [pc, #24]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bedc:	683b      	ldr	r3, [r7, #0]
 801bede:	4313      	orrs	r3, r2
 801bee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bee2:	4b04      	ldr	r3, [pc, #16]	; (801bef4 <HAL_RCC_ClockConfig+0x240>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	f003 030f 	and.w	r3, r3, #15
 801beea:	683a      	ldr	r2, [r7, #0]
 801beec:	429a      	cmp	r2, r3
 801beee:	d005      	beq.n	801befc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801bef0:	2301      	movs	r3, #1
 801bef2:	e086      	b.n	801c002 <HAL_RCC_ClockConfig+0x34e>
 801bef4:	52002000 	.word	0x52002000
 801bef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	f003 0304 	and.w	r3, r3, #4
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d010      	beq.n	801bf2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	691a      	ldr	r2, [r3, #16]
 801bf0c:	4b3f      	ldr	r3, [pc, #252]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf0e:	699b      	ldr	r3, [r3, #24]
 801bf10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bf14:	429a      	cmp	r2, r3
 801bf16:	d208      	bcs.n	801bf2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801bf18:	4b3c      	ldr	r3, [pc, #240]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf1a:	699b      	ldr	r3, [r3, #24]
 801bf1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	691b      	ldr	r3, [r3, #16]
 801bf24:	4939      	ldr	r1, [pc, #228]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf26:	4313      	orrs	r3, r2
 801bf28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	f003 0308 	and.w	r3, r3, #8
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d010      	beq.n	801bf58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	695a      	ldr	r2, [r3, #20]
 801bf3a:	4b34      	ldr	r3, [pc, #208]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf3c:	69db      	ldr	r3, [r3, #28]
 801bf3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bf42:	429a      	cmp	r2, r3
 801bf44:	d208      	bcs.n	801bf58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801bf46:	4b31      	ldr	r3, [pc, #196]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf48:	69db      	ldr	r3, [r3, #28]
 801bf4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	695b      	ldr	r3, [r3, #20]
 801bf52:	492e      	ldr	r1, [pc, #184]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf54:	4313      	orrs	r3, r2
 801bf56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	f003 0310 	and.w	r3, r3, #16
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d010      	beq.n	801bf86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	699a      	ldr	r2, [r3, #24]
 801bf68:	4b28      	ldr	r3, [pc, #160]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf6a:	69db      	ldr	r3, [r3, #28]
 801bf6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bf70:	429a      	cmp	r2, r3
 801bf72:	d208      	bcs.n	801bf86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801bf74:	4b25      	ldr	r3, [pc, #148]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf76:	69db      	ldr	r3, [r3, #28]
 801bf78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	699b      	ldr	r3, [r3, #24]
 801bf80:	4922      	ldr	r1, [pc, #136]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf82:	4313      	orrs	r3, r2
 801bf84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	f003 0320 	and.w	r3, r3, #32
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d010      	beq.n	801bfb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	69da      	ldr	r2, [r3, #28]
 801bf96:	4b1d      	ldr	r3, [pc, #116]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bf98:	6a1b      	ldr	r3, [r3, #32]
 801bf9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	d208      	bcs.n	801bfb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801bfa2:	4b1a      	ldr	r3, [pc, #104]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bfa4:	6a1b      	ldr	r3, [r3, #32]
 801bfa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	69db      	ldr	r3, [r3, #28]
 801bfae:	4917      	ldr	r1, [pc, #92]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bfb0:	4313      	orrs	r3, r2
 801bfb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801bfb4:	f000 f834 	bl	801c020 <HAL_RCC_GetSysClockFreq>
 801bfb8:	4602      	mov	r2, r0
 801bfba:	4b14      	ldr	r3, [pc, #80]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bfbc:	699b      	ldr	r3, [r3, #24]
 801bfbe:	0a1b      	lsrs	r3, r3, #8
 801bfc0:	f003 030f 	and.w	r3, r3, #15
 801bfc4:	4912      	ldr	r1, [pc, #72]	; (801c010 <HAL_RCC_ClockConfig+0x35c>)
 801bfc6:	5ccb      	ldrb	r3, [r1, r3]
 801bfc8:	f003 031f 	and.w	r3, r3, #31
 801bfcc:	fa22 f303 	lsr.w	r3, r2, r3
 801bfd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bfd2:	4b0e      	ldr	r3, [pc, #56]	; (801c00c <HAL_RCC_ClockConfig+0x358>)
 801bfd4:	699b      	ldr	r3, [r3, #24]
 801bfd6:	f003 030f 	and.w	r3, r3, #15
 801bfda:	4a0d      	ldr	r2, [pc, #52]	; (801c010 <HAL_RCC_ClockConfig+0x35c>)
 801bfdc:	5cd3      	ldrb	r3, [r2, r3]
 801bfde:	f003 031f 	and.w	r3, r3, #31
 801bfe2:	693a      	ldr	r2, [r7, #16]
 801bfe4:	fa22 f303 	lsr.w	r3, r2, r3
 801bfe8:	4a0a      	ldr	r2, [pc, #40]	; (801c014 <HAL_RCC_ClockConfig+0x360>)
 801bfea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bfec:	4a0a      	ldr	r2, [pc, #40]	; (801c018 <HAL_RCC_ClockConfig+0x364>)
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801bff2:	4b0a      	ldr	r3, [pc, #40]	; (801c01c <HAL_RCC_ClockConfig+0x368>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	4618      	mov	r0, r3
 801bff8:	f7f9 fc24 	bl	8015844 <HAL_InitTick>
 801bffc:	4603      	mov	r3, r0
 801bffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c000:	7bfb      	ldrb	r3, [r7, #15]
}
 801c002:	4618      	mov	r0, r3
 801c004:	3718      	adds	r7, #24
 801c006:	46bd      	mov	sp, r7
 801c008:	bd80      	pop	{r7, pc}
 801c00a:	bf00      	nop
 801c00c:	58024400 	.word	0x58024400
 801c010:	080212f8 	.word	0x080212f8
 801c014:	24000008 	.word	0x24000008
 801c018:	24000004 	.word	0x24000004
 801c01c:	2400000c 	.word	0x2400000c

0801c020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c020:	b480      	push	{r7}
 801c022:	b089      	sub	sp, #36	; 0x24
 801c024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c026:	4bb3      	ldr	r3, [pc, #716]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c028:	691b      	ldr	r3, [r3, #16]
 801c02a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c02e:	2b18      	cmp	r3, #24
 801c030:	f200 8155 	bhi.w	801c2de <HAL_RCC_GetSysClockFreq+0x2be>
 801c034:	a201      	add	r2, pc, #4	; (adr r2, 801c03c <HAL_RCC_GetSysClockFreq+0x1c>)
 801c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c03a:	bf00      	nop
 801c03c:	0801c0a1 	.word	0x0801c0a1
 801c040:	0801c2df 	.word	0x0801c2df
 801c044:	0801c2df 	.word	0x0801c2df
 801c048:	0801c2df 	.word	0x0801c2df
 801c04c:	0801c2df 	.word	0x0801c2df
 801c050:	0801c2df 	.word	0x0801c2df
 801c054:	0801c2df 	.word	0x0801c2df
 801c058:	0801c2df 	.word	0x0801c2df
 801c05c:	0801c0c7 	.word	0x0801c0c7
 801c060:	0801c2df 	.word	0x0801c2df
 801c064:	0801c2df 	.word	0x0801c2df
 801c068:	0801c2df 	.word	0x0801c2df
 801c06c:	0801c2df 	.word	0x0801c2df
 801c070:	0801c2df 	.word	0x0801c2df
 801c074:	0801c2df 	.word	0x0801c2df
 801c078:	0801c2df 	.word	0x0801c2df
 801c07c:	0801c0cd 	.word	0x0801c0cd
 801c080:	0801c2df 	.word	0x0801c2df
 801c084:	0801c2df 	.word	0x0801c2df
 801c088:	0801c2df 	.word	0x0801c2df
 801c08c:	0801c2df 	.word	0x0801c2df
 801c090:	0801c2df 	.word	0x0801c2df
 801c094:	0801c2df 	.word	0x0801c2df
 801c098:	0801c2df 	.word	0x0801c2df
 801c09c:	0801c0d3 	.word	0x0801c0d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c0a0:	4b94      	ldr	r3, [pc, #592]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	f003 0320 	and.w	r3, r3, #32
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d009      	beq.n	801c0c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c0ac:	4b91      	ldr	r3, [pc, #580]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	08db      	lsrs	r3, r3, #3
 801c0b2:	f003 0303 	and.w	r3, r3, #3
 801c0b6:	4a90      	ldr	r2, [pc, #576]	; (801c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c0b8:	fa22 f303 	lsr.w	r3, r2, r3
 801c0bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c0be:	e111      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c0c0:	4b8d      	ldr	r3, [pc, #564]	; (801c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c0c2:	61bb      	str	r3, [r7, #24]
      break;
 801c0c4:	e10e      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c0c6:	4b8d      	ldr	r3, [pc, #564]	; (801c2fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c0c8:	61bb      	str	r3, [r7, #24]
      break;
 801c0ca:	e10b      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c0cc:	4b8c      	ldr	r3, [pc, #560]	; (801c300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c0ce:	61bb      	str	r3, [r7, #24]
      break;
 801c0d0:	e108      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c0d2:	4b88      	ldr	r3, [pc, #544]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0d6:	f003 0303 	and.w	r3, r3, #3
 801c0da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c0dc:	4b85      	ldr	r3, [pc, #532]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0e0:	091b      	lsrs	r3, r3, #4
 801c0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c0e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c0e8:	4b82      	ldr	r3, [pc, #520]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0ec:	f003 0301 	and.w	r3, r3, #1
 801c0f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c0f2:	4b80      	ldr	r3, [pc, #512]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0f6:	08db      	lsrs	r3, r3, #3
 801c0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c0fc:	68fa      	ldr	r2, [r7, #12]
 801c0fe:	fb02 f303 	mul.w	r3, r2, r3
 801c102:	ee07 3a90 	vmov	s15, r3
 801c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c10a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c10e:	693b      	ldr	r3, [r7, #16]
 801c110:	2b00      	cmp	r3, #0
 801c112:	f000 80e1 	beq.w	801c2d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 801c116:	697b      	ldr	r3, [r7, #20]
 801c118:	2b02      	cmp	r3, #2
 801c11a:	f000 8083 	beq.w	801c224 <HAL_RCC_GetSysClockFreq+0x204>
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	2b02      	cmp	r3, #2
 801c122:	f200 80a1 	bhi.w	801c268 <HAL_RCC_GetSysClockFreq+0x248>
 801c126:	697b      	ldr	r3, [r7, #20]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d003      	beq.n	801c134 <HAL_RCC_GetSysClockFreq+0x114>
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	2b01      	cmp	r3, #1
 801c130:	d056      	beq.n	801c1e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 801c132:	e099      	b.n	801c268 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c134:	4b6f      	ldr	r3, [pc, #444]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	f003 0320 	and.w	r3, r3, #32
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d02d      	beq.n	801c19c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c140:	4b6c      	ldr	r3, [pc, #432]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	08db      	lsrs	r3, r3, #3
 801c146:	f003 0303 	and.w	r3, r3, #3
 801c14a:	4a6b      	ldr	r2, [pc, #428]	; (801c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c14c:	fa22 f303 	lsr.w	r3, r2, r3
 801c150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	ee07 3a90 	vmov	s15, r3
 801c158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c15c:	693b      	ldr	r3, [r7, #16]
 801c15e:	ee07 3a90 	vmov	s15, r3
 801c162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c16a:	4b62      	ldr	r3, [pc, #392]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c172:	ee07 3a90 	vmov	s15, r3
 801c176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c17a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c17e:	eddf 5a61 	vldr	s11, [pc, #388]	; 801c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c192:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c19a:	e087      	b.n	801c2ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c19c:	693b      	ldr	r3, [r7, #16]
 801c19e:	ee07 3a90 	vmov	s15, r3
 801c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c1a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 801c308 <HAL_RCC_GetSysClockFreq+0x2e8>
 801c1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c1ae:	4b51      	ldr	r3, [pc, #324]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1b6:	ee07 3a90 	vmov	s15, r3
 801c1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c1be:	ed97 6a02 	vldr	s12, [r7, #8]
 801c1c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 801c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c1da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c1de:	e065      	b.n	801c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c1e0:	693b      	ldr	r3, [r7, #16]
 801c1e2:	ee07 3a90 	vmov	s15, r3
 801c1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c1ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 801c30c <HAL_RCC_GetSysClockFreq+0x2ec>
 801c1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c1f2:	4b40      	ldr	r3, [pc, #256]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1fa:	ee07 3a90 	vmov	s15, r3
 801c1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c202:	ed97 6a02 	vldr	s12, [r7, #8]
 801c206:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c21e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c222:	e043      	b.n	801c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	ee07 3a90 	vmov	s15, r3
 801c22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c22e:	eddf 6a38 	vldr	s13, [pc, #224]	; 801c310 <HAL_RCC_GetSysClockFreq+0x2f0>
 801c232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c236:	4b2f      	ldr	r3, [pc, #188]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c23e:	ee07 3a90 	vmov	s15, r3
 801c242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c246:	ed97 6a02 	vldr	s12, [r7, #8]
 801c24a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c266:	e021      	b.n	801c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c268:	693b      	ldr	r3, [r7, #16]
 801c26a:	ee07 3a90 	vmov	s15, r3
 801c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c272:	eddf 6a26 	vldr	s13, [pc, #152]	; 801c30c <HAL_RCC_GetSysClockFreq+0x2ec>
 801c276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c27a:	4b1e      	ldr	r3, [pc, #120]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c282:	ee07 3a90 	vmov	s15, r3
 801c286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c28a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c28e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c2a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c2aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c2ac:	4b11      	ldr	r3, [pc, #68]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2b0:	0a5b      	lsrs	r3, r3, #9
 801c2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	ee07 3a90 	vmov	s15, r3
 801c2c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c2c4:	edd7 6a07 	vldr	s13, [r7, #28]
 801c2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c2d0:	ee17 3a90 	vmov	r3, s15
 801c2d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c2d6:	e005      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	61bb      	str	r3, [r7, #24]
      break;
 801c2dc:	e002      	b.n	801c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c2de:	4b07      	ldr	r3, [pc, #28]	; (801c2fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c2e0:	61bb      	str	r3, [r7, #24]
      break;
 801c2e2:	bf00      	nop
  }

  return sysclockfreq;
 801c2e4:	69bb      	ldr	r3, [r7, #24]
}
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	3724      	adds	r7, #36	; 0x24
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f0:	4770      	bx	lr
 801c2f2:	bf00      	nop
 801c2f4:	58024400 	.word	0x58024400
 801c2f8:	03d09000 	.word	0x03d09000
 801c2fc:	003d0900 	.word	0x003d0900
 801c300:	007a1200 	.word	0x007a1200
 801c304:	46000000 	.word	0x46000000
 801c308:	4c742400 	.word	0x4c742400
 801c30c:	4a742400 	.word	0x4a742400
 801c310:	4af42400 	.word	0x4af42400

0801c314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c314:	b580      	push	{r7, lr}
 801c316:	b082      	sub	sp, #8
 801c318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c31a:	f7ff fe81 	bl	801c020 <HAL_RCC_GetSysClockFreq>
 801c31e:	4602      	mov	r2, r0
 801c320:	4b10      	ldr	r3, [pc, #64]	; (801c364 <HAL_RCC_GetHCLKFreq+0x50>)
 801c322:	699b      	ldr	r3, [r3, #24]
 801c324:	0a1b      	lsrs	r3, r3, #8
 801c326:	f003 030f 	and.w	r3, r3, #15
 801c32a:	490f      	ldr	r1, [pc, #60]	; (801c368 <HAL_RCC_GetHCLKFreq+0x54>)
 801c32c:	5ccb      	ldrb	r3, [r1, r3]
 801c32e:	f003 031f 	and.w	r3, r3, #31
 801c332:	fa22 f303 	lsr.w	r3, r2, r3
 801c336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c338:	4b0a      	ldr	r3, [pc, #40]	; (801c364 <HAL_RCC_GetHCLKFreq+0x50>)
 801c33a:	699b      	ldr	r3, [r3, #24]
 801c33c:	f003 030f 	and.w	r3, r3, #15
 801c340:	4a09      	ldr	r2, [pc, #36]	; (801c368 <HAL_RCC_GetHCLKFreq+0x54>)
 801c342:	5cd3      	ldrb	r3, [r2, r3]
 801c344:	f003 031f 	and.w	r3, r3, #31
 801c348:	687a      	ldr	r2, [r7, #4]
 801c34a:	fa22 f303 	lsr.w	r3, r2, r3
 801c34e:	4a07      	ldr	r2, [pc, #28]	; (801c36c <HAL_RCC_GetHCLKFreq+0x58>)
 801c350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c352:	4a07      	ldr	r2, [pc, #28]	; (801c370 <HAL_RCC_GetHCLKFreq+0x5c>)
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c358:	4b04      	ldr	r3, [pc, #16]	; (801c36c <HAL_RCC_GetHCLKFreq+0x58>)
 801c35a:	681b      	ldr	r3, [r3, #0]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3708      	adds	r7, #8
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}
 801c364:	58024400 	.word	0x58024400
 801c368:	080212f8 	.word	0x080212f8
 801c36c:	24000008 	.word	0x24000008
 801c370:	24000004 	.word	0x24000004

0801c374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c378:	f7ff ffcc 	bl	801c314 <HAL_RCC_GetHCLKFreq>
 801c37c:	4602      	mov	r2, r0
 801c37e:	4b06      	ldr	r3, [pc, #24]	; (801c398 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c380:	69db      	ldr	r3, [r3, #28]
 801c382:	091b      	lsrs	r3, r3, #4
 801c384:	f003 0307 	and.w	r3, r3, #7
 801c388:	4904      	ldr	r1, [pc, #16]	; (801c39c <HAL_RCC_GetPCLK1Freq+0x28>)
 801c38a:	5ccb      	ldrb	r3, [r1, r3]
 801c38c:	f003 031f 	and.w	r3, r3, #31
 801c390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c394:	4618      	mov	r0, r3
 801c396:	bd80      	pop	{r7, pc}
 801c398:	58024400 	.word	0x58024400
 801c39c:	080212f8 	.word	0x080212f8

0801c3a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c3a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c3a4:	b0c6      	sub	sp, #280	; 0x118
 801c3a6:	af00      	add	r7, sp, #0
 801c3a8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801c3c4:	2500      	movs	r5, #0
 801c3c6:	ea54 0305 	orrs.w	r3, r4, r5
 801c3ca:	d049      	beq.n	801c460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801c3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c3d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c3d6:	d02f      	beq.n	801c438 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801c3d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c3dc:	d828      	bhi.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c3de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c3e2:	d01a      	beq.n	801c41a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801c3e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c3e8:	d822      	bhi.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d003      	beq.n	801c3f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801c3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3f2:	d007      	beq.n	801c404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801c3f4:	e01c      	b.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c3f6:	4bab      	ldr	r3, [pc, #684]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3fa:	4aaa      	ldr	r2, [pc, #680]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c3fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c402:	e01a      	b.n	801c43a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c408:	3308      	adds	r3, #8
 801c40a:	2102      	movs	r1, #2
 801c40c:	4618      	mov	r0, r3
 801c40e:	f002 fa49 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c412:	4603      	mov	r3, r0
 801c414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c418:	e00f      	b.n	801c43a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c41e:	3328      	adds	r3, #40	; 0x28
 801c420:	2102      	movs	r1, #2
 801c422:	4618      	mov	r0, r3
 801c424:	f002 faf0 	bl	801ea08 <RCCEx_PLL3_Config>
 801c428:	4603      	mov	r3, r0
 801c42a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c42e:	e004      	b.n	801c43a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c430:	2301      	movs	r3, #1
 801c432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c436:	e000      	b.n	801c43a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801c438:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c43a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d10a      	bne.n	801c458 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c442:	4b98      	ldr	r3, [pc, #608]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c446:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801c44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c450:	4a94      	ldr	r2, [pc, #592]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c452:	430b      	orrs	r3, r1
 801c454:	6513      	str	r3, [r2, #80]	; 0x50
 801c456:	e003      	b.n	801c460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c458:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c45c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c468:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801c46c:	f04f 0900 	mov.w	r9, #0
 801c470:	ea58 0309 	orrs.w	r3, r8, r9
 801c474:	d047      	beq.n	801c506 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801c476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c47c:	2b04      	cmp	r3, #4
 801c47e:	d82a      	bhi.n	801c4d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801c480:	a201      	add	r2, pc, #4	; (adr r2, 801c488 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801c482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c486:	bf00      	nop
 801c488:	0801c49d 	.word	0x0801c49d
 801c48c:	0801c4ab 	.word	0x0801c4ab
 801c490:	0801c4c1 	.word	0x0801c4c1
 801c494:	0801c4df 	.word	0x0801c4df
 801c498:	0801c4df 	.word	0x0801c4df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c49c:	4b81      	ldr	r3, [pc, #516]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4a0:	4a80      	ldr	r2, [pc, #512]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c4a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c4a8:	e01a      	b.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4ae:	3308      	adds	r3, #8
 801c4b0:	2100      	movs	r1, #0
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f002 f9f6 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c4b8:	4603      	mov	r3, r0
 801c4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c4be:	e00f      	b.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4c4:	3328      	adds	r3, #40	; 0x28
 801c4c6:	2100      	movs	r1, #0
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	f002 fa9d 	bl	801ea08 <RCCEx_PLL3_Config>
 801c4ce:	4603      	mov	r3, r0
 801c4d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c4d4:	e004      	b.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c4dc:	e000      	b.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801c4de:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c4e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d10a      	bne.n	801c4fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c4e8:	4b6e      	ldr	r3, [pc, #440]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4ec:	f023 0107 	bic.w	r1, r3, #7
 801c4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4f6:	4a6b      	ldr	r2, [pc, #428]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c4f8:	430b      	orrs	r3, r1
 801c4fa:	6513      	str	r3, [r2, #80]	; 0x50
 801c4fc:	e003      	b.n	801c506 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c502:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801c512:	f04f 0b00 	mov.w	fp, #0
 801c516:	ea5a 030b 	orrs.w	r3, sl, fp
 801c51a:	d05b      	beq.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c520:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c524:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801c528:	d03b      	beq.n	801c5a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801c52a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801c52e:	d834      	bhi.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c534:	d037      	beq.n	801c5a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801c536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c53a:	d82e      	bhi.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c53c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c540:	d033      	beq.n	801c5aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801c542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c546:	d828      	bhi.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c54c:	d01a      	beq.n	801c584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801c54e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c552:	d822      	bhi.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801c554:	2b00      	cmp	r3, #0
 801c556:	d003      	beq.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801c558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c55c:	d007      	beq.n	801c56e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801c55e:	e01c      	b.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c560:	4b50      	ldr	r3, [pc, #320]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c564:	4a4f      	ldr	r2, [pc, #316]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c56a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c56c:	e01e      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c572:	3308      	adds	r3, #8
 801c574:	2100      	movs	r1, #0
 801c576:	4618      	mov	r0, r3
 801c578:	f002 f994 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c57c:	4603      	mov	r3, r0
 801c57e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c582:	e013      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c588:	3328      	adds	r3, #40	; 0x28
 801c58a:	2100      	movs	r1, #0
 801c58c:	4618      	mov	r0, r3
 801c58e:	f002 fa3b 	bl	801ea08 <RCCEx_PLL3_Config>
 801c592:	4603      	mov	r3, r0
 801c594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c598:	e008      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c59a:	2301      	movs	r3, #1
 801c59c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c5a0:	e004      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c5a2:	bf00      	nop
 801c5a4:	e002      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c5a6:	bf00      	nop
 801c5a8:	e000      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801c5aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d10b      	bne.n	801c5cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c5b4:	4b3b      	ldr	r3, [pc, #236]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5b8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c5c4:	4a37      	ldr	r2, [pc, #220]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c5c6:	430b      	orrs	r3, r1
 801c5c8:	6593      	str	r3, [r2, #88]	; 0x58
 801c5ca:	e003      	b.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801c5e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801c5ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801c5ee:	460b      	mov	r3, r1
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	d05d      	beq.n	801c6b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c5fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c600:	d03b      	beq.n	801c67a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801c602:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c606:	d834      	bhi.n	801c672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c60c:	d037      	beq.n	801c67e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801c60e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c612:	d82e      	bhi.n	801c672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c618:	d033      	beq.n	801c682 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801c61a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c61e:	d828      	bhi.n	801c672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c624:	d01a      	beq.n	801c65c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801c626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c62a:	d822      	bhi.n	801c672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d003      	beq.n	801c638 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c634:	d007      	beq.n	801c646 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801c636:	e01c      	b.n	801c672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c638:	4b1a      	ldr	r3, [pc, #104]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c63c:	4a19      	ldr	r2, [pc, #100]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c644:	e01e      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c64a:	3308      	adds	r3, #8
 801c64c:	2100      	movs	r1, #0
 801c64e:	4618      	mov	r0, r3
 801c650:	f002 f928 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c654:	4603      	mov	r3, r0
 801c656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c65a:	e013      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c660:	3328      	adds	r3, #40	; 0x28
 801c662:	2100      	movs	r1, #0
 801c664:	4618      	mov	r0, r3
 801c666:	f002 f9cf 	bl	801ea08 <RCCEx_PLL3_Config>
 801c66a:	4603      	mov	r3, r0
 801c66c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c670:	e008      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c672:	2301      	movs	r3, #1
 801c674:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c678:	e004      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c67a:	bf00      	nop
 801c67c:	e002      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c67e:	bf00      	nop
 801c680:	e000      	b.n	801c684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c682:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c684:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d10d      	bne.n	801c6a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c68c:	4b05      	ldr	r3, [pc, #20]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c690:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c69c:	4a01      	ldr	r2, [pc, #4]	; (801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c69e:	430b      	orrs	r3, r1
 801c6a0:	6593      	str	r3, [r2, #88]	; 0x58
 801c6a2:	e005      	b.n	801c6b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801c6a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c6ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801c6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801c6bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c6c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801c6ca:	460b      	mov	r3, r1
 801c6cc:	4313      	orrs	r3, r2
 801c6ce:	d03a      	beq.n	801c746 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6d6:	2b30      	cmp	r3, #48	; 0x30
 801c6d8:	d01f      	beq.n	801c71a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801c6da:	2b30      	cmp	r3, #48	; 0x30
 801c6dc:	d819      	bhi.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c6de:	2b20      	cmp	r3, #32
 801c6e0:	d00c      	beq.n	801c6fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801c6e2:	2b20      	cmp	r3, #32
 801c6e4:	d815      	bhi.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d019      	beq.n	801c71e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c6ea:	2b10      	cmp	r3, #16
 801c6ec:	d111      	bne.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c6ee:	4baa      	ldr	r3, [pc, #680]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6f2:	4aa9      	ldr	r2, [pc, #676]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c6f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c6fa:	e011      	b.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c700:	3308      	adds	r3, #8
 801c702:	2102      	movs	r1, #2
 801c704:	4618      	mov	r0, r3
 801c706:	f002 f8cd 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c70a:	4603      	mov	r3, r0
 801c70c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c710:	e006      	b.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c712:	2301      	movs	r3, #1
 801c714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c718:	e002      	b.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c71a:	bf00      	nop
 801c71c:	e000      	b.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c71e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c724:	2b00      	cmp	r3, #0
 801c726:	d10a      	bne.n	801c73e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c728:	4b9b      	ldr	r3, [pc, #620]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c72c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c736:	4a98      	ldr	r2, [pc, #608]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c738:	430b      	orrs	r3, r1
 801c73a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c73c:	e003      	b.n	801c746 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c73e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c742:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c74e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c756:	2300      	movs	r3, #0
 801c758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c75c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c760:	460b      	mov	r3, r1
 801c762:	4313      	orrs	r3, r2
 801c764:	d051      	beq.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c76c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c770:	d035      	beq.n	801c7de <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c776:	d82e      	bhi.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c77c:	d031      	beq.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c77e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c782:	d828      	bhi.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c788:	d01a      	beq.n	801c7c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c78a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c78e:	d822      	bhi.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c790:	2b00      	cmp	r3, #0
 801c792:	d003      	beq.n	801c79c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c798:	d007      	beq.n	801c7aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c79a:	e01c      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c79c:	4b7e      	ldr	r3, [pc, #504]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7a0:	4a7d      	ldr	r2, [pc, #500]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c7a8:	e01c      	b.n	801c7e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7ae:	3308      	adds	r3, #8
 801c7b0:	2100      	movs	r1, #0
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	f002 f876 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c7be:	e011      	b.n	801c7e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7c4:	3328      	adds	r3, #40	; 0x28
 801c7c6:	2100      	movs	r1, #0
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f002 f91d 	bl	801ea08 <RCCEx_PLL3_Config>
 801c7ce:	4603      	mov	r3, r0
 801c7d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c7d4:	e006      	b.n	801c7e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c7d6:	2301      	movs	r3, #1
 801c7d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c7dc:	e002      	b.n	801c7e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c7de:	bf00      	nop
 801c7e0:	e000      	b.n	801c7e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c7e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d10a      	bne.n	801c802 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c7ec:	4b6a      	ldr	r3, [pc, #424]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c7f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c7fa:	4a67      	ldr	r2, [pc, #412]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c7fc:	430b      	orrs	r3, r1
 801c7fe:	6513      	str	r3, [r2, #80]	; 0x50
 801c800:	e003      	b.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c806:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c812:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c816:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c81a:	2300      	movs	r3, #0
 801c81c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c820:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c824:	460b      	mov	r3, r1
 801c826:	4313      	orrs	r3, r2
 801c828:	d053      	beq.n	801c8d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c82e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c834:	d033      	beq.n	801c89e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c83a:	d82c      	bhi.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c83c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c840:	d02f      	beq.n	801c8a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c846:	d826      	bhi.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c84c:	d02b      	beq.n	801c8a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c84e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c852:	d820      	bhi.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c858:	d012      	beq.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c85a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c85e:	d81a      	bhi.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c860:	2b00      	cmp	r3, #0
 801c862:	d022      	beq.n	801c8aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c868:	d115      	bne.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c86e:	3308      	adds	r3, #8
 801c870:	2101      	movs	r1, #1
 801c872:	4618      	mov	r0, r3
 801c874:	f002 f816 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c878:	4603      	mov	r3, r0
 801c87a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c87e:	e015      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c884:	3328      	adds	r3, #40	; 0x28
 801c886:	2101      	movs	r1, #1
 801c888:	4618      	mov	r0, r3
 801c88a:	f002 f8bd 	bl	801ea08 <RCCEx_PLL3_Config>
 801c88e:	4603      	mov	r3, r0
 801c890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c894:	e00a      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c896:	2301      	movs	r3, #1
 801c898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c89c:	e006      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c89e:	bf00      	nop
 801c8a0:	e004      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c8a2:	bf00      	nop
 801c8a4:	e002      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c8a6:	bf00      	nop
 801c8a8:	e000      	b.n	801c8ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d10a      	bne.n	801c8ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c8b4:	4b38      	ldr	r3, [pc, #224]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c8b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8c2:	4a35      	ldr	r2, [pc, #212]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c8c4:	430b      	orrs	r3, r1
 801c8c6:	6513      	str	r3, [r2, #80]	; 0x50
 801c8c8:	e003      	b.n	801c8d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8da:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c8de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c8e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c8ec:	460b      	mov	r3, r1
 801c8ee:	4313      	orrs	r3, r2
 801c8f0:	d058      	beq.n	801c9a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c8fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c8fe:	d033      	beq.n	801c968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c904:	d82c      	bhi.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c90a:	d02f      	beq.n	801c96c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c910:	d826      	bhi.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c916:	d02b      	beq.n	801c970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c91c:	d820      	bhi.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c91e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c922:	d012      	beq.n	801c94a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c928:	d81a      	bhi.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d022      	beq.n	801c974 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c92e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c932:	d115      	bne.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c938:	3308      	adds	r3, #8
 801c93a:	2101      	movs	r1, #1
 801c93c:	4618      	mov	r0, r3
 801c93e:	f001 ffb1 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c942:	4603      	mov	r3, r0
 801c944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c948:	e015      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c94e:	3328      	adds	r3, #40	; 0x28
 801c950:	2101      	movs	r1, #1
 801c952:	4618      	mov	r0, r3
 801c954:	f002 f858 	bl	801ea08 <RCCEx_PLL3_Config>
 801c958:	4603      	mov	r3, r0
 801c95a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c95e:	e00a      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c960:	2301      	movs	r3, #1
 801c962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c966:	e006      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c968:	bf00      	nop
 801c96a:	e004      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c96c:	bf00      	nop
 801c96e:	e002      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c970:	bf00      	nop
 801c972:	e000      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c974:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d10e      	bne.n	801c99c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c97e:	4b06      	ldr	r3, [pc, #24]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c982:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c98a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c98e:	4a02      	ldr	r2, [pc, #8]	; (801c998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c990:	430b      	orrs	r3, r1
 801c992:	6593      	str	r3, [r2, #88]	; 0x58
 801c994:	e006      	b.n	801c9a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c996:	bf00      	nop
 801c998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c9b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c9ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c9be:	460b      	mov	r3, r1
 801c9c0:	4313      	orrs	r3, r2
 801c9c2:	d037      	beq.n	801ca34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c9ce:	d00e      	beq.n	801c9ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c9d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c9d4:	d816      	bhi.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d018      	beq.n	801ca0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c9da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c9de:	d111      	bne.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c9e0:	4bc4      	ldr	r3, [pc, #784]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9e4:	4ac3      	ldr	r2, [pc, #780]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c9e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c9ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c9ec:	e00f      	b.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9f2:	3308      	adds	r3, #8
 801c9f4:	2101      	movs	r1, #1
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f001 ff54 	bl	801e8a4 <RCCEx_PLL2_Config>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801ca02:	e004      	b.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca04:	2301      	movs	r3, #1
 801ca06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca0a:	e000      	b.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801ca0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d10a      	bne.n	801ca2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801ca16:	4bb7      	ldr	r3, [pc, #732]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801ca18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801ca1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca24:	4ab3      	ldr	r2, [pc, #716]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801ca26:	430b      	orrs	r3, r1
 801ca28:	6513      	str	r3, [r2, #80]	; 0x50
 801ca2a:	e003      	b.n	801ca34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801ca40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801ca44:	2300      	movs	r3, #0
 801ca46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801ca4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801ca4e:	460b      	mov	r3, r1
 801ca50:	4313      	orrs	r3, r2
 801ca52:	d039      	beq.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801ca54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca5a:	2b03      	cmp	r3, #3
 801ca5c:	d81c      	bhi.n	801ca98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801ca5e:	a201      	add	r2, pc, #4	; (adr r2, 801ca64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801ca60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca64:	0801caa1 	.word	0x0801caa1
 801ca68:	0801ca75 	.word	0x0801ca75
 801ca6c:	0801ca83 	.word	0x0801ca83
 801ca70:	0801caa1 	.word	0x0801caa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca74:	4b9f      	ldr	r3, [pc, #636]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca78:	4a9e      	ldr	r2, [pc, #632]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801ca7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ca7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801ca80:	e00f      	b.n	801caa2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ca82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca86:	3308      	adds	r3, #8
 801ca88:	2102      	movs	r1, #2
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f001 ff0a 	bl	801e8a4 <RCCEx_PLL2_Config>
 801ca90:	4603      	mov	r3, r0
 801ca92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801ca96:	e004      	b.n	801caa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801ca98:	2301      	movs	r3, #1
 801ca9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca9e:	e000      	b.n	801caa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801caa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801caa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d10a      	bne.n	801cac0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801caaa:	4b92      	ldr	r3, [pc, #584]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801caac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801caae:	f023 0103 	bic.w	r1, r3, #3
 801cab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cab8:	4a8e      	ldr	r2, [pc, #568]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801caba:	430b      	orrs	r3, r1
 801cabc:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cabe:	e003      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cac4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801cad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cad8:	2300      	movs	r3, #0
 801cada:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801cade:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801cae2:	460b      	mov	r3, r1
 801cae4:	4313      	orrs	r3, r2
 801cae6:	f000 8099 	beq.w	801cc1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801caea:	4b83      	ldr	r3, [pc, #524]	; (801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	4a82      	ldr	r2, [pc, #520]	; (801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801caf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801caf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801caf6:	f7f8 feef 	bl	80158d8 <HAL_GetTick>
 801cafa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cafe:	e00b      	b.n	801cb18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cb00:	f7f8 feea 	bl	80158d8 <HAL_GetTick>
 801cb04:	4602      	mov	r2, r0
 801cb06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb0a:	1ad3      	subs	r3, r2, r3
 801cb0c:	2b64      	cmp	r3, #100	; 0x64
 801cb0e:	d903      	bls.n	801cb18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801cb10:	2303      	movs	r3, #3
 801cb12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cb16:	e005      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cb18:	4b77      	ldr	r3, [pc, #476]	; (801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d0ed      	beq.n	801cb00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801cb24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d173      	bne.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801cb2c:	4b71      	ldr	r3, [pc, #452]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801cb30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801cb38:	4053      	eors	r3, r2
 801cb3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d015      	beq.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801cb42:	4b6c      	ldr	r3, [pc, #432]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cb4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cb4e:	4b69      	ldr	r3, [pc, #420]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb52:	4a68      	ldr	r2, [pc, #416]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cb58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cb5a:	4b66      	ldr	r3, [pc, #408]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb5e:	4a65      	ldr	r2, [pc, #404]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cb64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801cb66:	4a63      	ldr	r2, [pc, #396]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cb6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801cb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801cb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb7a:	d118      	bne.n	801cbae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb7c:	f7f8 feac 	bl	80158d8 <HAL_GetTick>
 801cb80:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cb84:	e00d      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cb86:	f7f8 fea7 	bl	80158d8 <HAL_GetTick>
 801cb8a:	4602      	mov	r2, r0
 801cb8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb90:	1ad2      	subs	r2, r2, r3
 801cb92:	f241 3388 	movw	r3, #5000	; 0x1388
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d903      	bls.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801cb9a:	2303      	movs	r3, #3
 801cb9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801cba0:	e005      	b.n	801cbae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cba2:	4b54      	ldr	r3, [pc, #336]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cba6:	f003 0302 	and.w	r3, r3, #2
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d0eb      	beq.n	801cb86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801cbae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d129      	bne.n	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801cbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cbc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cbc6:	d10e      	bne.n	801cbe6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801cbc8:	4b4a      	ldr	r3, [pc, #296]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cbca:	691b      	ldr	r3, [r3, #16]
 801cbcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801cbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801cbd8:	091a      	lsrs	r2, r3, #4
 801cbda:	4b48      	ldr	r3, [pc, #288]	; (801ccfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801cbdc:	4013      	ands	r3, r2
 801cbde:	4a45      	ldr	r2, [pc, #276]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cbe0:	430b      	orrs	r3, r1
 801cbe2:	6113      	str	r3, [r2, #16]
 801cbe4:	e005      	b.n	801cbf2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 801cbe6:	4b43      	ldr	r3, [pc, #268]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cbe8:	691b      	ldr	r3, [r3, #16]
 801cbea:	4a42      	ldr	r2, [pc, #264]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cbec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cbf0:	6113      	str	r3, [r2, #16]
 801cbf2:	4b40      	ldr	r3, [pc, #256]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cbf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801cbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801cbfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cc02:	4a3c      	ldr	r2, [pc, #240]	; (801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801cc04:	430b      	orrs	r3, r1
 801cc06:	6713      	str	r3, [r2, #112]	; 0x70
 801cc08:	e008      	b.n	801cc1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cc0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801cc12:	e003      	b.n	801cc1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801cc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc24:	f002 0301 	and.w	r3, r2, #1
 801cc28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801cc32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801cc36:	460b      	mov	r3, r1
 801cc38:	4313      	orrs	r3, r2
 801cc3a:	f000 808f 	beq.w	801cd5c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801cc3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cc44:	2b28      	cmp	r3, #40	; 0x28
 801cc46:	d871      	bhi.n	801cd2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801cc48:	a201      	add	r2, pc, #4	; (adr r2, 801cc50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801cc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc4e:	bf00      	nop
 801cc50:	0801cd35 	.word	0x0801cd35
 801cc54:	0801cd2d 	.word	0x0801cd2d
 801cc58:	0801cd2d 	.word	0x0801cd2d
 801cc5c:	0801cd2d 	.word	0x0801cd2d
 801cc60:	0801cd2d 	.word	0x0801cd2d
 801cc64:	0801cd2d 	.word	0x0801cd2d
 801cc68:	0801cd2d 	.word	0x0801cd2d
 801cc6c:	0801cd2d 	.word	0x0801cd2d
 801cc70:	0801cd01 	.word	0x0801cd01
 801cc74:	0801cd2d 	.word	0x0801cd2d
 801cc78:	0801cd2d 	.word	0x0801cd2d
 801cc7c:	0801cd2d 	.word	0x0801cd2d
 801cc80:	0801cd2d 	.word	0x0801cd2d
 801cc84:	0801cd2d 	.word	0x0801cd2d
 801cc88:	0801cd2d 	.word	0x0801cd2d
 801cc8c:	0801cd2d 	.word	0x0801cd2d
 801cc90:	0801cd17 	.word	0x0801cd17
 801cc94:	0801cd2d 	.word	0x0801cd2d
 801cc98:	0801cd2d 	.word	0x0801cd2d
 801cc9c:	0801cd2d 	.word	0x0801cd2d
 801cca0:	0801cd2d 	.word	0x0801cd2d
 801cca4:	0801cd2d 	.word	0x0801cd2d
 801cca8:	0801cd2d 	.word	0x0801cd2d
 801ccac:	0801cd2d 	.word	0x0801cd2d
 801ccb0:	0801cd35 	.word	0x0801cd35
 801ccb4:	0801cd2d 	.word	0x0801cd2d
 801ccb8:	0801cd2d 	.word	0x0801cd2d
 801ccbc:	0801cd2d 	.word	0x0801cd2d
 801ccc0:	0801cd2d 	.word	0x0801cd2d
 801ccc4:	0801cd2d 	.word	0x0801cd2d
 801ccc8:	0801cd2d 	.word	0x0801cd2d
 801cccc:	0801cd2d 	.word	0x0801cd2d
 801ccd0:	0801cd35 	.word	0x0801cd35
 801ccd4:	0801cd2d 	.word	0x0801cd2d
 801ccd8:	0801cd2d 	.word	0x0801cd2d
 801ccdc:	0801cd2d 	.word	0x0801cd2d
 801cce0:	0801cd2d 	.word	0x0801cd2d
 801cce4:	0801cd2d 	.word	0x0801cd2d
 801cce8:	0801cd2d 	.word	0x0801cd2d
 801ccec:	0801cd2d 	.word	0x0801cd2d
 801ccf0:	0801cd35 	.word	0x0801cd35
 801ccf4:	58024400 	.word	0x58024400
 801ccf8:	58024800 	.word	0x58024800
 801ccfc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd04:	3308      	adds	r3, #8
 801cd06:	2101      	movs	r1, #1
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f001 fdcb 	bl	801e8a4 <RCCEx_PLL2_Config>
 801cd0e:	4603      	mov	r3, r0
 801cd10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801cd14:	e00f      	b.n	801cd36 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd1a:	3328      	adds	r3, #40	; 0x28
 801cd1c:	2101      	movs	r1, #1
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f001 fe72 	bl	801ea08 <RCCEx_PLL3_Config>
 801cd24:	4603      	mov	r3, r0
 801cd26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801cd2a:	e004      	b.n	801cd36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd2c:	2301      	movs	r3, #1
 801cd2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd32:	e000      	b.n	801cd36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801cd34:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d10a      	bne.n	801cd54 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801cd3e:	4bbf      	ldr	r3, [pc, #764]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801cd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cd4c:	4abb      	ldr	r2, [pc, #748]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cd4e:	430b      	orrs	r3, r1
 801cd50:	6553      	str	r3, [r2, #84]	; 0x54
 801cd52:	e003      	b.n	801cd5c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801cd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd64:	f002 0302 	and.w	r3, r2, #2
 801cd68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cd72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801cd76:	460b      	mov	r3, r1
 801cd78:	4313      	orrs	r3, r2
 801cd7a:	d041      	beq.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd82:	2b05      	cmp	r3, #5
 801cd84:	d824      	bhi.n	801cdd0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801cd86:	a201      	add	r2, pc, #4	; (adr r2, 801cd8c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801cd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd8c:	0801cdd9 	.word	0x0801cdd9
 801cd90:	0801cda5 	.word	0x0801cda5
 801cd94:	0801cdbb 	.word	0x0801cdbb
 801cd98:	0801cdd9 	.word	0x0801cdd9
 801cd9c:	0801cdd9 	.word	0x0801cdd9
 801cda0:	0801cdd9 	.word	0x0801cdd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cda8:	3308      	adds	r3, #8
 801cdaa:	2101      	movs	r1, #1
 801cdac:	4618      	mov	r0, r3
 801cdae:	f001 fd79 	bl	801e8a4 <RCCEx_PLL2_Config>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801cdb8:	e00f      	b.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdbe:	3328      	adds	r3, #40	; 0x28
 801cdc0:	2101      	movs	r1, #1
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f001 fe20 	bl	801ea08 <RCCEx_PLL3_Config>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801cdce:	e004      	b.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cdd6:	e000      	b.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801cdd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cdda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d10a      	bne.n	801cdf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801cde2:	4b96      	ldr	r3, [pc, #600]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cde6:	f023 0107 	bic.w	r1, r3, #7
 801cdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cdf0:	4a92      	ldr	r2, [pc, #584]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cdf2:	430b      	orrs	r3, r1
 801cdf4:	6553      	str	r3, [r2, #84]	; 0x54
 801cdf6:	e003      	b.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ce00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce08:	f002 0304 	and.w	r3, r2, #4
 801ce0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801ce10:	2300      	movs	r3, #0
 801ce12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ce16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801ce1a:	460b      	mov	r3, r1
 801ce1c:	4313      	orrs	r3, r2
 801ce1e:	d044      	beq.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801ce20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce28:	2b05      	cmp	r3, #5
 801ce2a:	d825      	bhi.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801ce2c:	a201      	add	r2, pc, #4	; (adr r2, 801ce34 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801ce2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce32:	bf00      	nop
 801ce34:	0801ce81 	.word	0x0801ce81
 801ce38:	0801ce4d 	.word	0x0801ce4d
 801ce3c:	0801ce63 	.word	0x0801ce63
 801ce40:	0801ce81 	.word	0x0801ce81
 801ce44:	0801ce81 	.word	0x0801ce81
 801ce48:	0801ce81 	.word	0x0801ce81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ce4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce50:	3308      	adds	r3, #8
 801ce52:	2101      	movs	r1, #1
 801ce54:	4618      	mov	r0, r3
 801ce56:	f001 fd25 	bl	801e8a4 <RCCEx_PLL2_Config>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801ce60:	e00f      	b.n	801ce82 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce66:	3328      	adds	r3, #40	; 0x28
 801ce68:	2101      	movs	r1, #1
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f001 fdcc 	bl	801ea08 <RCCEx_PLL3_Config>
 801ce70:	4603      	mov	r3, r0
 801ce72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801ce76:	e004      	b.n	801ce82 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ce78:	2301      	movs	r3, #1
 801ce7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ce7e:	e000      	b.n	801ce82 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801ce80:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d10b      	bne.n	801cea2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801ce8a:	4b6c      	ldr	r3, [pc, #432]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ce8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce8e:	f023 0107 	bic.w	r1, r3, #7
 801ce92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce9a:	4a68      	ldr	r2, [pc, #416]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ce9c:	430b      	orrs	r3, r1
 801ce9e:	6593      	str	r3, [r2, #88]	; 0x58
 801cea0:	e003      	b.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cea2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cea6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ceaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceb2:	f002 0320 	and.w	r3, r2, #32
 801ceb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801ceba:	2300      	movs	r3, #0
 801cebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cec0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801cec4:	460b      	mov	r3, r1
 801cec6:	4313      	orrs	r3, r2
 801cec8:	d055      	beq.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801ceca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ced2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ced6:	d033      	beq.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801ced8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cedc:	d82c      	bhi.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801cede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cee2:	d02f      	beq.n	801cf44 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801cee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cee8:	d826      	bhi.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801ceea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801ceee:	d02b      	beq.n	801cf48 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801cef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801cef4:	d820      	bhi.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801cef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cefa:	d012      	beq.n	801cf22 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801cefc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cf00:	d81a      	bhi.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d022      	beq.n	801cf4c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801cf06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cf0a:	d115      	bne.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf10:	3308      	adds	r3, #8
 801cf12:	2100      	movs	r1, #0
 801cf14:	4618      	mov	r0, r3
 801cf16:	f001 fcc5 	bl	801e8a4 <RCCEx_PLL2_Config>
 801cf1a:	4603      	mov	r3, r0
 801cf1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801cf20:	e015      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf26:	3328      	adds	r3, #40	; 0x28
 801cf28:	2102      	movs	r1, #2
 801cf2a:	4618      	mov	r0, r3
 801cf2c:	f001 fd6c 	bl	801ea08 <RCCEx_PLL3_Config>
 801cf30:	4603      	mov	r3, r0
 801cf32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801cf36:	e00a      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cf3e:	e006      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801cf40:	bf00      	nop
 801cf42:	e004      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801cf44:	bf00      	nop
 801cf46:	e002      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801cf48:	bf00      	nop
 801cf4a:	e000      	b.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801cf4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cf4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d10b      	bne.n	801cf6e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cf56:	4b39      	ldr	r3, [pc, #228]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801cf5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cf66:	4a35      	ldr	r2, [pc, #212]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801cf68:	430b      	orrs	r3, r1
 801cf6a:	6553      	str	r3, [r2, #84]	; 0x54
 801cf6c:	e003      	b.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801cf76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801cf82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801cf86:	2300      	movs	r3, #0
 801cf88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cf8c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801cf90:	460b      	mov	r3, r1
 801cf92:	4313      	orrs	r3, r2
 801cf94:	d058      	beq.n	801d048 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801cf96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cf9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801cfa2:	d033      	beq.n	801d00c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801cfa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801cfa8:	d82c      	bhi.n	801d004 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cfae:	d02f      	beq.n	801d010 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801cfb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cfb4:	d826      	bhi.n	801d004 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cfb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cfba:	d02b      	beq.n	801d014 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801cfbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cfc0:	d820      	bhi.n	801d004 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cfc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cfc6:	d012      	beq.n	801cfee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801cfc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cfcc:	d81a      	bhi.n	801d004 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d022      	beq.n	801d018 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801cfd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cfd6:	d115      	bne.n	801d004 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfdc:	3308      	adds	r3, #8
 801cfde:	2100      	movs	r1, #0
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f001 fc5f 	bl	801e8a4 <RCCEx_PLL2_Config>
 801cfe6:	4603      	mov	r3, r0
 801cfe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801cfec:	e015      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cff2:	3328      	adds	r3, #40	; 0x28
 801cff4:	2102      	movs	r1, #2
 801cff6:	4618      	mov	r0, r3
 801cff8:	f001 fd06 	bl	801ea08 <RCCEx_PLL3_Config>
 801cffc:	4603      	mov	r3, r0
 801cffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d002:	e00a      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d004:	2301      	movs	r3, #1
 801d006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d00a:	e006      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d00c:	bf00      	nop
 801d00e:	e004      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d010:	bf00      	nop
 801d012:	e002      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d014:	bf00      	nop
 801d016:	e000      	b.n	801d01a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801d018:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d01a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d10e      	bne.n	801d040 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d022:	4b06      	ldr	r3, [pc, #24]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d026:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801d02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d032:	4a02      	ldr	r2, [pc, #8]	; (801d03c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801d034:	430b      	orrs	r3, r1
 801d036:	6593      	str	r3, [r2, #88]	; 0x58
 801d038:	e006      	b.n	801d048 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801d03a:	bf00      	nop
 801d03c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d050:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801d054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d058:	2300      	movs	r3, #0
 801d05a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d05e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801d062:	460b      	mov	r3, r1
 801d064:	4313      	orrs	r3, r2
 801d066:	d055      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d06c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d070:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801d074:	d033      	beq.n	801d0de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801d076:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801d07a:	d82c      	bhi.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d07c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d080:	d02f      	beq.n	801d0e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801d082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d086:	d826      	bhi.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d088:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801d08c:	d02b      	beq.n	801d0e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801d08e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801d092:	d820      	bhi.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d098:	d012      	beq.n	801d0c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801d09a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d09e:	d81a      	bhi.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d022      	beq.n	801d0ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801d0a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d0a8:	d115      	bne.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0ae:	3308      	adds	r3, #8
 801d0b0:	2100      	movs	r1, #0
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f001 fbf6 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d0be:	e015      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0c4:	3328      	adds	r3, #40	; 0x28
 801d0c6:	2102      	movs	r1, #2
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f001 fc9d 	bl	801ea08 <RCCEx_PLL3_Config>
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d0d4:	e00a      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d0d6:	2301      	movs	r3, #1
 801d0d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d0dc:	e006      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d0de:	bf00      	nop
 801d0e0:	e004      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d0e2:	bf00      	nop
 801d0e4:	e002      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d0e6:	bf00      	nop
 801d0e8:	e000      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801d0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d0ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d10b      	bne.n	801d10c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d0f4:	4ba0      	ldr	r3, [pc, #640]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d0f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801d0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d104:	4a9c      	ldr	r2, [pc, #624]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d106:	430b      	orrs	r3, r1
 801d108:	6593      	str	r3, [r2, #88]	; 0x58
 801d10a:	e003      	b.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d10c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801d114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d11c:	f002 0308 	and.w	r3, r2, #8
 801d120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d124:	2300      	movs	r3, #0
 801d126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d12a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801d12e:	460b      	mov	r3, r1
 801d130:	4313      	orrs	r3, r2
 801d132:	d01e      	beq.n	801d172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801d134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d140:	d10c      	bne.n	801d15c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d146:	3328      	adds	r3, #40	; 0x28
 801d148:	2102      	movs	r1, #2
 801d14a:	4618      	mov	r0, r3
 801d14c:	f001 fc5c 	bl	801ea08 <RCCEx_PLL3_Config>
 801d150:	4603      	mov	r3, r0
 801d152:	2b00      	cmp	r3, #0
 801d154:	d002      	beq.n	801d15c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801d156:	2301      	movs	r3, #1
 801d158:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801d15c:	4b86      	ldr	r3, [pc, #536]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d16c:	4a82      	ldr	r2, [pc, #520]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d16e:	430b      	orrs	r3, r1
 801d170:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d17a:	f002 0310 	and.w	r3, r2, #16
 801d17e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d182:	2300      	movs	r3, #0
 801d184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d188:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801d18c:	460b      	mov	r3, r1
 801d18e:	4313      	orrs	r3, r2
 801d190:	d01e      	beq.n	801d1d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d19e:	d10c      	bne.n	801d1ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1a4:	3328      	adds	r3, #40	; 0x28
 801d1a6:	2102      	movs	r1, #2
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f001 fc2d 	bl	801ea08 <RCCEx_PLL3_Config>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d002      	beq.n	801d1ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801d1b4:	2301      	movs	r3, #1
 801d1b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d1ba:	4b6f      	ldr	r3, [pc, #444]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d1be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801d1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d1ca:	4a6b      	ldr	r2, [pc, #428]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d1cc:	430b      	orrs	r3, r1
 801d1ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801d1dc:	67bb      	str	r3, [r7, #120]	; 0x78
 801d1de:	2300      	movs	r3, #0
 801d1e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d1e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801d1e6:	460b      	mov	r3, r1
 801d1e8:	4313      	orrs	r3, r2
 801d1ea:	d03e      	beq.n	801d26a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d1f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d1f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d1f8:	d022      	beq.n	801d240 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801d1fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d1fe:	d81b      	bhi.n	801d238 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801d200:	2b00      	cmp	r3, #0
 801d202:	d003      	beq.n	801d20c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801d204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d208:	d00b      	beq.n	801d222 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801d20a:	e015      	b.n	801d238 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d210:	3308      	adds	r3, #8
 801d212:	2100      	movs	r1, #0
 801d214:	4618      	mov	r0, r3
 801d216:	f001 fb45 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d21a:	4603      	mov	r3, r0
 801d21c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d220:	e00f      	b.n	801d242 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d226:	3328      	adds	r3, #40	; 0x28
 801d228:	2102      	movs	r1, #2
 801d22a:	4618      	mov	r0, r3
 801d22c:	f001 fbec 	bl	801ea08 <RCCEx_PLL3_Config>
 801d230:	4603      	mov	r3, r0
 801d232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d236:	e004      	b.n	801d242 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d238:	2301      	movs	r3, #1
 801d23a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d23e:	e000      	b.n	801d242 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801d240:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d246:	2b00      	cmp	r3, #0
 801d248:	d10b      	bne.n	801d262 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d24a:	4b4b      	ldr	r3, [pc, #300]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d24e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801d252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d25a:	4a47      	ldr	r2, [pc, #284]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d25c:	430b      	orrs	r3, r1
 801d25e:	6593      	str	r3, [r2, #88]	; 0x58
 801d260:	e003      	b.n	801d26a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d262:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d266:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d272:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801d276:	673b      	str	r3, [r7, #112]	; 0x70
 801d278:	2300      	movs	r3, #0
 801d27a:	677b      	str	r3, [r7, #116]	; 0x74
 801d27c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801d280:	460b      	mov	r3, r1
 801d282:	4313      	orrs	r3, r2
 801d284:	d03b      	beq.n	801d2fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801d286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d28e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801d292:	d01f      	beq.n	801d2d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801d294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801d298:	d818      	bhi.n	801d2cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801d29a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d29e:	d003      	beq.n	801d2a8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801d2a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d2a4:	d007      	beq.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801d2a6:	e011      	b.n	801d2cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d2a8:	4b33      	ldr	r3, [pc, #204]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2ac:	4a32      	ldr	r2, [pc, #200]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801d2b4:	e00f      	b.n	801d2d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d2ba:	3328      	adds	r3, #40	; 0x28
 801d2bc:	2101      	movs	r1, #1
 801d2be:	4618      	mov	r0, r3
 801d2c0:	f001 fba2 	bl	801ea08 <RCCEx_PLL3_Config>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801d2ca:	e004      	b.n	801d2d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d2d2:	e000      	b.n	801d2d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801d2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d2d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d10b      	bne.n	801d2f6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d2de:	4b26      	ldr	r3, [pc, #152]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d2e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801d2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d2ee:	4a22      	ldr	r2, [pc, #136]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d2f0:	430b      	orrs	r3, r1
 801d2f2:	6553      	str	r3, [r2, #84]	; 0x54
 801d2f4:	e003      	b.n	801d2fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d2fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d306:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801d30a:	66bb      	str	r3, [r7, #104]	; 0x68
 801d30c:	2300      	movs	r3, #0
 801d30e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d310:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801d314:	460b      	mov	r3, r1
 801d316:	4313      	orrs	r3, r2
 801d318:	d034      	beq.n	801d384 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801d31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d320:	2b00      	cmp	r3, #0
 801d322:	d003      	beq.n	801d32c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801d324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d328:	d007      	beq.n	801d33a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801d32a:	e011      	b.n	801d350 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d32c:	4b12      	ldr	r3, [pc, #72]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d330:	4a11      	ldr	r2, [pc, #68]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d338:	e00e      	b.n	801d358 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d33e:	3308      	adds	r3, #8
 801d340:	2102      	movs	r1, #2
 801d342:	4618      	mov	r0, r3
 801d344:	f001 faae 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d348:	4603      	mov	r3, r0
 801d34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d34e:	e003      	b.n	801d358 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801d350:	2301      	movs	r3, #1
 801d352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d356:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d10d      	bne.n	801d37c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801d360:	4b05      	ldr	r3, [pc, #20]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801d368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d36e:	4a02      	ldr	r2, [pc, #8]	; (801d378 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801d370:	430b      	orrs	r3, r1
 801d372:	64d3      	str	r3, [r2, #76]	; 0x4c
 801d374:	e006      	b.n	801d384 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801d376:	bf00      	nop
 801d378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d37c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d380:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d38c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801d390:	663b      	str	r3, [r7, #96]	; 0x60
 801d392:	2300      	movs	r3, #0
 801d394:	667b      	str	r3, [r7, #100]	; 0x64
 801d396:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801d39a:	460b      	mov	r3, r1
 801d39c:	4313      	orrs	r3, r2
 801d39e:	d00c      	beq.n	801d3ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3a4:	3328      	adds	r3, #40	; 0x28
 801d3a6:	2102      	movs	r1, #2
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f001 fb2d 	bl	801ea08 <RCCEx_PLL3_Config>
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d002      	beq.n	801d3ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801d3b4:	2301      	movs	r3, #1
 801d3b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801d3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801d3c6:	65bb      	str	r3, [r7, #88]	; 0x58
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d3cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801d3d0:	460b      	mov	r3, r1
 801d3d2:	4313      	orrs	r3, r2
 801d3d4:	d036      	beq.n	801d444 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801d3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d3e0:	d018      	beq.n	801d414 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801d3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d3e6:	d811      	bhi.n	801d40c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801d3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d3ec:	d014      	beq.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801d3ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d3f2:	d80b      	bhi.n	801d40c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d011      	beq.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801d3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d3fc:	d106      	bne.n	801d40c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3fe:	4bb7      	ldr	r3, [pc, #732]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d402:	4ab6      	ldr	r2, [pc, #728]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d408:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801d40a:	e008      	b.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d40c:	2301      	movs	r3, #1
 801d40e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801d412:	e004      	b.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d414:	bf00      	nop
 801d416:	e002      	b.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d418:	bf00      	nop
 801d41a:	e000      	b.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801d41c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d41e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d422:	2b00      	cmp	r3, #0
 801d424:	d10a      	bne.n	801d43c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d426:	4bad      	ldr	r3, [pc, #692]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d42a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801d42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d434:	4aa9      	ldr	r2, [pc, #676]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d436:	430b      	orrs	r3, r1
 801d438:	6553      	str	r3, [r2, #84]	; 0x54
 801d43a:	e003      	b.n	801d444 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d43c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d44c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801d450:	653b      	str	r3, [r7, #80]	; 0x50
 801d452:	2300      	movs	r3, #0
 801d454:	657b      	str	r3, [r7, #84]	; 0x54
 801d456:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801d45a:	460b      	mov	r3, r1
 801d45c:	4313      	orrs	r3, r2
 801d45e:	d009      	beq.n	801d474 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d460:	4b9e      	ldr	r3, [pc, #632]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d464:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d46e:	4a9b      	ldr	r2, [pc, #620]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d470:	430b      	orrs	r3, r1
 801d472:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801d480:	64bb      	str	r3, [r7, #72]	; 0x48
 801d482:	2300      	movs	r3, #0
 801d484:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d486:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801d48a:	460b      	mov	r3, r1
 801d48c:	4313      	orrs	r3, r2
 801d48e:	d009      	beq.n	801d4a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d490:	4b92      	ldr	r3, [pc, #584]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d494:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801d498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d49c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d49e:	4a8f      	ldr	r2, [pc, #572]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4a0:	430b      	orrs	r3, r1
 801d4a2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801d4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801d4b0:	643b      	str	r3, [r7, #64]	; 0x40
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	647b      	str	r3, [r7, #68]	; 0x44
 801d4b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801d4ba:	460b      	mov	r3, r1
 801d4bc:	4313      	orrs	r3, r2
 801d4be:	d00e      	beq.n	801d4de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d4c0:	4b86      	ldr	r3, [pc, #536]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4c2:	691b      	ldr	r3, [r3, #16]
 801d4c4:	4a85      	ldr	r2, [pc, #532]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801d4ca:	6113      	str	r3, [r2, #16]
 801d4cc:	4b83      	ldr	r3, [pc, #524]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4ce:	6919      	ldr	r1, [r3, #16]
 801d4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d4d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801d4d8:	4a80      	ldr	r2, [pc, #512]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4da:	430b      	orrs	r3, r1
 801d4dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801d4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801d4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801d4f4:	460b      	mov	r3, r1
 801d4f6:	4313      	orrs	r3, r2
 801d4f8:	d009      	beq.n	801d50e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801d4fa:	4b78      	ldr	r3, [pc, #480]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d4fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801d502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d508:	4a74      	ldr	r2, [pc, #464]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d50a:	430b      	orrs	r3, r1
 801d50c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d516:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801d51a:	633b      	str	r3, [r7, #48]	; 0x30
 801d51c:	2300      	movs	r3, #0
 801d51e:	637b      	str	r3, [r7, #52]	; 0x34
 801d520:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801d524:	460b      	mov	r3, r1
 801d526:	4313      	orrs	r3, r2
 801d528:	d00a      	beq.n	801d540 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d52a:	4b6c      	ldr	r3, [pc, #432]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d52e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801d532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d53a:	4a68      	ldr	r2, [pc, #416]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801d53c:	430b      	orrs	r3, r1
 801d53e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801d540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d548:	2100      	movs	r1, #0
 801d54a:	62b9      	str	r1, [r7, #40]	; 0x28
 801d54c:	f003 0301 	and.w	r3, r3, #1
 801d550:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d552:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801d556:	460b      	mov	r3, r1
 801d558:	4313      	orrs	r3, r2
 801d55a:	d011      	beq.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d560:	3308      	adds	r3, #8
 801d562:	2100      	movs	r1, #0
 801d564:	4618      	mov	r0, r3
 801d566:	f001 f99d 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d56a:	4603      	mov	r3, r0
 801d56c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d574:	2b00      	cmp	r3, #0
 801d576:	d003      	beq.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d57c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801d580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d588:	2100      	movs	r1, #0
 801d58a:	6239      	str	r1, [r7, #32]
 801d58c:	f003 0302 	and.w	r3, r3, #2
 801d590:	627b      	str	r3, [r7, #36]	; 0x24
 801d592:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d596:	460b      	mov	r3, r1
 801d598:	4313      	orrs	r3, r2
 801d59a:	d011      	beq.n	801d5c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5a0:	3308      	adds	r3, #8
 801d5a2:	2101      	movs	r1, #1
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	f001 f97d 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d5b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d003      	beq.n	801d5c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d5bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801d5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5c8:	2100      	movs	r1, #0
 801d5ca:	61b9      	str	r1, [r7, #24]
 801d5cc:	f003 0304 	and.w	r3, r3, #4
 801d5d0:	61fb      	str	r3, [r7, #28]
 801d5d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d5d6:	460b      	mov	r3, r1
 801d5d8:	4313      	orrs	r3, r2
 801d5da:	d011      	beq.n	801d600 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d5e0:	3308      	adds	r3, #8
 801d5e2:	2102      	movs	r1, #2
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	f001 f95d 	bl	801e8a4 <RCCEx_PLL2_Config>
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d003      	beq.n	801d600 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d5fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d608:	2100      	movs	r1, #0
 801d60a:	6139      	str	r1, [r7, #16]
 801d60c:	f003 0308 	and.w	r3, r3, #8
 801d610:	617b      	str	r3, [r7, #20]
 801d612:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d616:	460b      	mov	r3, r1
 801d618:	4313      	orrs	r3, r2
 801d61a:	d011      	beq.n	801d640 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d620:	3328      	adds	r3, #40	; 0x28
 801d622:	2100      	movs	r1, #0
 801d624:	4618      	mov	r0, r3
 801d626:	f001 f9ef 	bl	801ea08 <RCCEx_PLL3_Config>
 801d62a:	4603      	mov	r3, r0
 801d62c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801d630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d634:	2b00      	cmp	r3, #0
 801d636:	d003      	beq.n	801d640 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d63c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d648:	2100      	movs	r1, #0
 801d64a:	60b9      	str	r1, [r7, #8]
 801d64c:	f003 0310 	and.w	r3, r3, #16
 801d650:	60fb      	str	r3, [r7, #12]
 801d652:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d656:	460b      	mov	r3, r1
 801d658:	4313      	orrs	r3, r2
 801d65a:	d011      	beq.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d660:	3328      	adds	r3, #40	; 0x28
 801d662:	2101      	movs	r1, #1
 801d664:	4618      	mov	r0, r3
 801d666:	f001 f9cf 	bl	801ea08 <RCCEx_PLL3_Config>
 801d66a:	4603      	mov	r3, r0
 801d66c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d674:	2b00      	cmp	r3, #0
 801d676:	d003      	beq.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d67c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d688:	2100      	movs	r1, #0
 801d68a:	6039      	str	r1, [r7, #0]
 801d68c:	f003 0320 	and.w	r3, r3, #32
 801d690:	607b      	str	r3, [r7, #4]
 801d692:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d696:	460b      	mov	r3, r1
 801d698:	4313      	orrs	r3, r2
 801d69a:	d011      	beq.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d6a0:	3328      	adds	r3, #40	; 0x28
 801d6a2:	2102      	movs	r1, #2
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f001 f9af 	bl	801ea08 <RCCEx_PLL3_Config>
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d6b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d003      	beq.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d6bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801d6c0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d101      	bne.n	801d6cc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	e000      	b.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801d6cc:	2301      	movs	r3, #1
}
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801d6d4:	46bd      	mov	sp, r7
 801d6d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d6da:	bf00      	nop
 801d6dc:	58024400 	.word	0x58024400

0801d6e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	b090      	sub	sp, #64	; 0x40
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d6ee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801d6f2:	430b      	orrs	r3, r1
 801d6f4:	f040 8094 	bne.w	801d820 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801d6f8:	4b9b      	ldr	r3, [pc, #620]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d6fc:	f003 0307 	and.w	r3, r3, #7
 801d700:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d704:	2b04      	cmp	r3, #4
 801d706:	f200 8087 	bhi.w	801d818 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d70a:	a201      	add	r2, pc, #4	; (adr r2, 801d710 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d710:	0801d725 	.word	0x0801d725
 801d714:	0801d74d 	.word	0x0801d74d
 801d718:	0801d775 	.word	0x0801d775
 801d71c:	0801d811 	.word	0x0801d811
 801d720:	0801d79d 	.word	0x0801d79d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d724:	4b90      	ldr	r3, [pc, #576]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d72c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d730:	d108      	bne.n	801d744 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d736:	4618      	mov	r0, r3
 801d738:	f000 ff62 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d740:	f000 bc93 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d744:	2300      	movs	r3, #0
 801d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d748:	f000 bc8f 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d74c:	4b86      	ldr	r3, [pc, #536]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d758:	d108      	bne.n	801d76c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d75a:	f107 0318 	add.w	r3, r7, #24
 801d75e:	4618      	mov	r0, r3
 801d760:	f000 fca6 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d764:	69bb      	ldr	r3, [r7, #24]
 801d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d768:	f000 bc7f 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d76c:	2300      	movs	r3, #0
 801d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d770:	f000 bc7b 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d774:	4b7c      	ldr	r3, [pc, #496]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d77c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d780:	d108      	bne.n	801d794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d782:	f107 030c 	add.w	r3, r7, #12
 801d786:	4618      	mov	r0, r3
 801d788:	f000 fde6 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d790:	f000 bc6b 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d794:	2300      	movs	r3, #0
 801d796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d798:	f000 bc67 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d79c:	4b72      	ldr	r3, [pc, #456]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d7a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d7a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d7a6:	4b70      	ldr	r3, [pc, #448]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	f003 0304 	and.w	r3, r3, #4
 801d7ae:	2b04      	cmp	r3, #4
 801d7b0:	d10c      	bne.n	801d7cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d109      	bne.n	801d7cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d7b8:	4b6b      	ldr	r3, [pc, #428]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	08db      	lsrs	r3, r3, #3
 801d7be:	f003 0303 	and.w	r3, r3, #3
 801d7c2:	4a6a      	ldr	r2, [pc, #424]	; (801d96c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d7c4:	fa22 f303 	lsr.w	r3, r2, r3
 801d7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7ca:	e01f      	b.n	801d80c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d7cc:	4b66      	ldr	r3, [pc, #408]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d7d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d7d8:	d106      	bne.n	801d7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d7e0:	d102      	bne.n	801d7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d7e2:	4b63      	ldr	r3, [pc, #396]	; (801d970 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7e6:	e011      	b.n	801d80c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d7e8:	4b5f      	ldr	r3, [pc, #380]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7f4:	d106      	bne.n	801d804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7fc:	d102      	bne.n	801d804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d7fe:	4b5d      	ldr	r3, [pc, #372]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d800:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d802:	e003      	b.n	801d80c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d804:	2300      	movs	r3, #0
 801d806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d808:	f000 bc2f 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d80c:	f000 bc2d 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d810:	4b59      	ldr	r3, [pc, #356]	; (801d978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d814:	f000 bc29 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d818:	2300      	movs	r3, #0
 801d81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d81c:	f000 bc25 	b.w	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d820:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d824:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d828:	430b      	orrs	r3, r1
 801d82a:	f040 80a7 	bne.w	801d97c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d82e:	4b4e      	ldr	r3, [pc, #312]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d832:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d836:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d83a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d83e:	d054      	beq.n	801d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d846:	f200 808b 	bhi.w	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d84c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d850:	f000 8083 	beq.w	801d95a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d856:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d85a:	f200 8081 	bhi.w	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d864:	d02f      	beq.n	801d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d86c:	d878      	bhi.n	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d870:	2b00      	cmp	r3, #0
 801d872:	d004      	beq.n	801d87e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d87a:	d012      	beq.n	801d8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d87c:	e070      	b.n	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d87e:	4b3a      	ldr	r3, [pc, #232]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d88a:	d107      	bne.n	801d89c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d88c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d890:	4618      	mov	r0, r3
 801d892:	f000 feb5 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d89a:	e3e6      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d89c:	2300      	movs	r3, #0
 801d89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8a0:	e3e3      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d8a2:	4b31      	ldr	r3, [pc, #196]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d8aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d8ae:	d107      	bne.n	801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d8b0:	f107 0318 	add.w	r3, r7, #24
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	f000 fbfb 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d8ba:	69bb      	ldr	r3, [r7, #24]
 801d8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8be:	e3d4      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8c4:	e3d1      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d8c6:	4b28      	ldr	r3, [pc, #160]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d8ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8d2:	d107      	bne.n	801d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d8d4:	f107 030c 	add.w	r3, r7, #12
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f000 fd3d 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8e2:	e3c2      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8e8:	e3bf      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d8ea:	4b1f      	ldr	r3, [pc, #124]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d8ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d8f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d8f4:	4b1c      	ldr	r3, [pc, #112]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	f003 0304 	and.w	r3, r3, #4
 801d8fc:	2b04      	cmp	r3, #4
 801d8fe:	d10c      	bne.n	801d91a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d902:	2b00      	cmp	r3, #0
 801d904:	d109      	bne.n	801d91a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d906:	4b18      	ldr	r3, [pc, #96]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	08db      	lsrs	r3, r3, #3
 801d90c:	f003 0303 	and.w	r3, r3, #3
 801d910:	4a16      	ldr	r2, [pc, #88]	; (801d96c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d912:	fa22 f303 	lsr.w	r3, r2, r3
 801d916:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d918:	e01e      	b.n	801d958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d91a:	4b13      	ldr	r3, [pc, #76]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d926:	d106      	bne.n	801d936 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d92a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d92e:	d102      	bne.n	801d936 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d930:	4b0f      	ldr	r3, [pc, #60]	; (801d970 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d932:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d934:	e010      	b.n	801d958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d936:	4b0c      	ldr	r3, [pc, #48]	; (801d968 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d93e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d942:	d106      	bne.n	801d952 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d94a:	d102      	bne.n	801d952 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d94c:	4b09      	ldr	r3, [pc, #36]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d94e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d950:	e002      	b.n	801d958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d952:	2300      	movs	r3, #0
 801d954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d956:	e388      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d958:	e387      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d95a:	4b07      	ldr	r3, [pc, #28]	; (801d978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d95e:	e384      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d960:	2300      	movs	r3, #0
 801d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d964:	e381      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d966:	bf00      	nop
 801d968:	58024400 	.word	0x58024400
 801d96c:	03d09000 	.word	0x03d09000
 801d970:	003d0900 	.word	0x003d0900
 801d974:	007a1200 	.word	0x007a1200
 801d978:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d980:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d984:	430b      	orrs	r3, r1
 801d986:	f040 809c 	bne.w	801dac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d98a:	4b9e      	ldr	r3, [pc, #632]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d98e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d992:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d99a:	d054      	beq.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d99e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d9a2:	f200 808b 	bhi.w	801dabc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d9ac:	f000 8083 	beq.w	801dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d9b6:	f200 8081 	bhi.w	801dabc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d9c0:	d02f      	beq.n	801da22 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d9c8:	d878      	bhi.n	801dabc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d004      	beq.n	801d9da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d9d6:	d012      	beq.n	801d9fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d9d8:	e070      	b.n	801dabc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d9da:	4b8a      	ldr	r3, [pc, #552]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d9e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d9e6:	d107      	bne.n	801d9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f000 fe07 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9f6:	e338      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9fc:	e335      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d9fe:	4b81      	ldr	r3, [pc, #516]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da0a:	d107      	bne.n	801da1c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801da0c:	f107 0318 	add.w	r3, r7, #24
 801da10:	4618      	mov	r0, r3
 801da12:	f000 fb4d 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801da16:	69bb      	ldr	r3, [r7, #24]
 801da18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da1a:	e326      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da1c:	2300      	movs	r3, #0
 801da1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da20:	e323      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801da22:	4b78      	ldr	r3, [pc, #480]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801da2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da2e:	d107      	bne.n	801da40 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801da30:	f107 030c 	add.w	r3, r7, #12
 801da34:	4618      	mov	r0, r3
 801da36:	f000 fc8f 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da3e:	e314      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da40:	2300      	movs	r3, #0
 801da42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da44:	e311      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801da46:	4b6f      	ldr	r3, [pc, #444]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801da4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801da4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801da50:	4b6c      	ldr	r3, [pc, #432]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	f003 0304 	and.w	r3, r3, #4
 801da58:	2b04      	cmp	r3, #4
 801da5a:	d10c      	bne.n	801da76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801da5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d109      	bne.n	801da76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801da62:	4b68      	ldr	r3, [pc, #416]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	08db      	lsrs	r3, r3, #3
 801da68:	f003 0303 	and.w	r3, r3, #3
 801da6c:	4a66      	ldr	r2, [pc, #408]	; (801dc08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801da6e:	fa22 f303 	lsr.w	r3, r2, r3
 801da72:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da74:	e01e      	b.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801da76:	4b63      	ldr	r3, [pc, #396]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801da82:	d106      	bne.n	801da92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801da84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801da8a:	d102      	bne.n	801da92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801da8c:	4b5f      	ldr	r3, [pc, #380]	; (801dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801da8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da90:	e010      	b.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801da92:	4b5c      	ldr	r3, [pc, #368]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801da9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801da9e:	d106      	bne.n	801daae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801daa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801daa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801daa6:	d102      	bne.n	801daae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801daa8:	4b59      	ldr	r3, [pc, #356]	; (801dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801daaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801daac:	e002      	b.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801daae:	2300      	movs	r3, #0
 801dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801dab2:	e2da      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801dab4:	e2d9      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801dab6:	4b57      	ldr	r3, [pc, #348]	; (801dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801dab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801daba:	e2d6      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801dabc:	2300      	movs	r3, #0
 801dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dac0:	e2d3      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801dac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dac6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801daca:	430b      	orrs	r3, r1
 801dacc:	f040 80a7 	bne.w	801dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801dad0:	4b4c      	ldr	r3, [pc, #304]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dad4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801dad8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dadc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dae0:	d055      	beq.n	801db8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dae8:	f200 8096 	bhi.w	801dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801daf2:	f000 8084 	beq.w	801dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801dafc:	f200 808c 	bhi.w	801dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801db06:	d030      	beq.n	801db6a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801db0e:	f200 8083 	bhi.w	801dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db14:	2b00      	cmp	r3, #0
 801db16:	d004      	beq.n	801db22 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801db1e:	d012      	beq.n	801db46 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801db20:	e07a      	b.n	801dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801db22:	4b38      	ldr	r3, [pc, #224]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801db24:	681b      	ldr	r3, [r3, #0]
 801db26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801db2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801db2e:	d107      	bne.n	801db40 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801db30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db34:	4618      	mov	r0, r3
 801db36:	f000 fd63 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db3e:	e294      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db40:	2300      	movs	r3, #0
 801db42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db44:	e291      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801db46:	4b2f      	ldr	r3, [pc, #188]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801db4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801db52:	d107      	bne.n	801db64 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801db54:	f107 0318 	add.w	r3, r7, #24
 801db58:	4618      	mov	r0, r3
 801db5a:	f000 faa9 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801db5e:	69bb      	ldr	r3, [r7, #24]
 801db60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db62:	e282      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db64:	2300      	movs	r3, #0
 801db66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db68:	e27f      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801db6a:	4b26      	ldr	r3, [pc, #152]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801db72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801db76:	d107      	bne.n	801db88 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801db78:	f107 030c 	add.w	r3, r7, #12
 801db7c:	4618      	mov	r0, r3
 801db7e:	f000 fbeb 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801db86:	e270      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801db88:	2300      	movs	r3, #0
 801db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801db8c:	e26d      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801db8e:	4b1d      	ldr	r3, [pc, #116]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801db90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801db96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801db98:	4b1a      	ldr	r3, [pc, #104]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	f003 0304 	and.w	r3, r3, #4
 801dba0:	2b04      	cmp	r3, #4
 801dba2:	d10c      	bne.n	801dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801dba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d109      	bne.n	801dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dbaa:	4b16      	ldr	r3, [pc, #88]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	08db      	lsrs	r3, r3, #3
 801dbb0:	f003 0303 	and.w	r3, r3, #3
 801dbb4:	4a14      	ldr	r2, [pc, #80]	; (801dc08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801dbb6:	fa22 f303 	lsr.w	r3, r2, r3
 801dbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dbbc:	e01e      	b.n	801dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dbbe:	4b11      	ldr	r3, [pc, #68]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dbc0:	681b      	ldr	r3, [r3, #0]
 801dbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dbca:	d106      	bne.n	801dbda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801dbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801dbd2:	d102      	bne.n	801dbda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801dbd4:	4b0d      	ldr	r3, [pc, #52]	; (801dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dbd8:	e010      	b.n	801dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801dbda:	4b0a      	ldr	r3, [pc, #40]	; (801dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dbe6:	d106      	bne.n	801dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801dbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dbee:	d102      	bne.n	801dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801dbf0:	4b07      	ldr	r3, [pc, #28]	; (801dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801dbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dbf4:	e002      	b.n	801dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801dbfa:	e236      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801dbfc:	e235      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801dbfe:	4b05      	ldr	r3, [pc, #20]	; (801dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801dc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dc02:	e232      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801dc04:	58024400 	.word	0x58024400
 801dc08:	03d09000 	.word	0x03d09000
 801dc0c:	003d0900 	.word	0x003d0900
 801dc10:	007a1200 	.word	0x007a1200
 801dc14:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801dc18:	2300      	movs	r3, #0
 801dc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dc1c:	e225      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801dc1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dc22:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801dc26:	430b      	orrs	r3, r1
 801dc28:	f040 8085 	bne.w	801dd36 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801dc2c:	4b9c      	ldr	r3, [pc, #624]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801dc34:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801dc3c:	d06b      	beq.n	801dd16 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801dc44:	d874      	bhi.n	801dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801dc4c:	d056      	beq.n	801dcfc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801dc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801dc54:	d86c      	bhi.n	801dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801dc5c:	d03b      	beq.n	801dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801dc64:	d864      	bhi.n	801dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dc6c:	d021      	beq.n	801dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dc74:	d85c      	bhi.n	801dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d004      	beq.n	801dc86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801dc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dc82:	d004      	beq.n	801dc8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801dc84:	e054      	b.n	801dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801dc86:	f7fe fb75 	bl	801c374 <HAL_RCC_GetPCLK1Freq>
 801dc8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801dc8c:	e1ed      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801dc8e:	4b84      	ldr	r3, [pc, #528]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dc96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dc9a:	d107      	bne.n	801dcac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801dc9c:	f107 0318 	add.w	r3, r7, #24
 801dca0:	4618      	mov	r0, r3
 801dca2:	f000 fa05 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dcaa:	e1de      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dcac:	2300      	movs	r3, #0
 801dcae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dcb0:	e1db      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801dcb2:	4b7b      	ldr	r3, [pc, #492]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dcba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dcbe:	d107      	bne.n	801dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dcc0:	f107 030c 	add.w	r3, r7, #12
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f000 fb47 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801dcca:	693b      	ldr	r3, [r7, #16]
 801dccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dcce:	e1cc      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dcd4:	e1c9      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801dcd6:	4b72      	ldr	r3, [pc, #456]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	f003 0304 	and.w	r3, r3, #4
 801dcde:	2b04      	cmp	r3, #4
 801dce0:	d109      	bne.n	801dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dce2:	4b6f      	ldr	r3, [pc, #444]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	08db      	lsrs	r3, r3, #3
 801dce8:	f003 0303 	and.w	r3, r3, #3
 801dcec:	4a6d      	ldr	r2, [pc, #436]	; (801dea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801dcee:	fa22 f303 	lsr.w	r3, r2, r3
 801dcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dcf4:	e1b9      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dcfa:	e1b6      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801dcfc:	4b68      	ldr	r3, [pc, #416]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dd08:	d102      	bne.n	801dd10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801dd0a:	4b67      	ldr	r3, [pc, #412]	; (801dea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801dd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd0e:	e1ac      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd10:	2300      	movs	r3, #0
 801dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd14:	e1a9      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801dd16:	4b62      	ldr	r3, [pc, #392]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dd1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dd22:	d102      	bne.n	801dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801dd24:	4b61      	ldr	r3, [pc, #388]	; (801deac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd28:	e19f      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd2e:	e19c      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801dd30:	2300      	movs	r3, #0
 801dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd34:	e199      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801dd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dd3a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801dd3e:	430b      	orrs	r3, r1
 801dd40:	d173      	bne.n	801de2a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801dd42:	4b57      	ldr	r3, [pc, #348]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dd46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801dd4a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801dd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dd52:	d02f      	beq.n	801ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dd5a:	d863      	bhi.n	801de24 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d004      	beq.n	801dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dd68:	d012      	beq.n	801dd90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801dd6a:	e05b      	b.n	801de24 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801dd6c:	4b4c      	ldr	r3, [pc, #304]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dd74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dd78:	d107      	bne.n	801dd8a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801dd7a:	f107 0318 	add.w	r3, r7, #24
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f000 f996 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801dd84:	69bb      	ldr	r3, [r7, #24]
 801dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dd88:	e16f      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dd8e:	e16c      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801dd90:	4b43      	ldr	r3, [pc, #268]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dd98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dd9c:	d107      	bne.n	801ddae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dd9e:	f107 030c 	add.w	r3, r7, #12
 801dda2:	4618      	mov	r0, r3
 801dda4:	f000 fad8 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801dda8:	697b      	ldr	r3, [r7, #20]
 801ddaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ddac:	e15d      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801ddae:	2300      	movs	r3, #0
 801ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ddb2:	e15a      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801ddb4:	4b3a      	ldr	r3, [pc, #232]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801ddb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ddb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ddbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801ddbe:	4b38      	ldr	r3, [pc, #224]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	f003 0304 	and.w	r3, r3, #4
 801ddc6:	2b04      	cmp	r3, #4
 801ddc8:	d10c      	bne.n	801dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801ddca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d109      	bne.n	801dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ddd0:	4b33      	ldr	r3, [pc, #204]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	08db      	lsrs	r3, r3, #3
 801ddd6:	f003 0303 	and.w	r3, r3, #3
 801ddda:	4a32      	ldr	r2, [pc, #200]	; (801dea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801dddc:	fa22 f303 	lsr.w	r3, r2, r3
 801dde0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dde2:	e01e      	b.n	801de22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dde4:	4b2e      	ldr	r3, [pc, #184]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ddec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ddf0:	d106      	bne.n	801de00 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801ddf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ddf8:	d102      	bne.n	801de00 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ddfa:	4b2b      	ldr	r3, [pc, #172]	; (801dea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddfe:	e010      	b.n	801de22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801de00:	4b27      	ldr	r3, [pc, #156]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801de08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801de0c:	d106      	bne.n	801de1c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801de0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801de14:	d102      	bne.n	801de1c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801de16:	4b25      	ldr	r3, [pc, #148]	; (801deac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801de18:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de1a:	e002      	b.n	801de22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801de1c:	2300      	movs	r3, #0
 801de1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801de20:	e123      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801de22:	e122      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801de24:	2300      	movs	r3, #0
 801de26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de28:	e11f      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801de2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de2e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801de32:	430b      	orrs	r3, r1
 801de34:	d13c      	bne.n	801deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801de36:	4b1a      	ldr	r3, [pc, #104]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801de38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801de3e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de42:	2b00      	cmp	r3, #0
 801de44:	d004      	beq.n	801de50 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801de4c:	d012      	beq.n	801de74 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801de4e:	e023      	b.n	801de98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801de50:	4b13      	ldr	r3, [pc, #76]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801de58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801de5c:	d107      	bne.n	801de6e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801de5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801de62:	4618      	mov	r0, r3
 801de64:	f000 fbcc 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de6c:	e0fd      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801de6e:	2300      	movs	r3, #0
 801de70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de72:	e0fa      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801de74:	4b0a      	ldr	r3, [pc, #40]	; (801dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801de7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801de80:	d107      	bne.n	801de92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801de82:	f107 0318 	add.w	r3, r7, #24
 801de86:	4618      	mov	r0, r3
 801de88:	f000 f912 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801de8c:	6a3b      	ldr	r3, [r7, #32]
 801de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de90:	e0eb      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801de92:	2300      	movs	r3, #0
 801de94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de96:	e0e8      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801de98:	2300      	movs	r3, #0
 801de9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801de9c:	e0e5      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801de9e:	bf00      	nop
 801dea0:	58024400 	.word	0x58024400
 801dea4:	03d09000 	.word	0x03d09000
 801dea8:	003d0900 	.word	0x003d0900
 801deac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801deb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801deb4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801deb8:	430b      	orrs	r3, r1
 801deba:	f040 8085 	bne.w	801dfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801debe:	4b6d      	ldr	r3, [pc, #436]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801dec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dec2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801dec6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801dec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801dece:	d06b      	beq.n	801dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ded2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ded6:	d874      	bhi.n	801dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dede:	d056      	beq.n	801df8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dee6:	d86c      	bhi.n	801dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801deee:	d03b      	beq.n	801df68 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801def0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801def2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801def6:	d864      	bhi.n	801dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801defa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801defe:	d021      	beq.n	801df44 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801df06:	d85c      	bhi.n	801dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d004      	beq.n	801df18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801df14:	d004      	beq.n	801df20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801df16:	e054      	b.n	801dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801df18:	f000 f8b4 	bl	801e084 <HAL_RCCEx_GetD3PCLK1Freq>
 801df1c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801df1e:	e0a4      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801df20:	4b54      	ldr	r3, [pc, #336]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801df28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801df2c:	d107      	bne.n	801df3e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801df2e:	f107 0318 	add.w	r3, r7, #24
 801df32:	4618      	mov	r0, r3
 801df34:	f000 f8bc 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801df38:	69fb      	ldr	r3, [r7, #28]
 801df3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df3c:	e095      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801df3e:	2300      	movs	r3, #0
 801df40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801df42:	e092      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801df44:	4b4b      	ldr	r3, [pc, #300]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801df4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801df50:	d107      	bne.n	801df62 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801df52:	f107 030c 	add.w	r3, r7, #12
 801df56:	4618      	mov	r0, r3
 801df58:	f000 f9fe 	bl	801e358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801df5c:	693b      	ldr	r3, [r7, #16]
 801df5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df60:	e083      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801df62:	2300      	movs	r3, #0
 801df64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801df66:	e080      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801df68:	4b42      	ldr	r3, [pc, #264]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	f003 0304 	and.w	r3, r3, #4
 801df70:	2b04      	cmp	r3, #4
 801df72:	d109      	bne.n	801df88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801df74:	4b3f      	ldr	r3, [pc, #252]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	08db      	lsrs	r3, r3, #3
 801df7a:	f003 0303 	and.w	r3, r3, #3
 801df7e:	4a3e      	ldr	r2, [pc, #248]	; (801e078 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801df80:	fa22 f303 	lsr.w	r3, r2, r3
 801df84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df86:	e070      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801df88:	2300      	movs	r3, #0
 801df8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801df8c:	e06d      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801df8e:	4b39      	ldr	r3, [pc, #228]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801df9a:	d102      	bne.n	801dfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801df9c:	4b37      	ldr	r3, [pc, #220]	; (801e07c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801df9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfa0:	e063      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dfa6:	e060      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801dfa8:	4b32      	ldr	r3, [pc, #200]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dfb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801dfb4:	d102      	bne.n	801dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801dfb6:	4b32      	ldr	r3, [pc, #200]	; (801e080 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801dfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfba:	e056      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dfc0:	e053      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dfc6:	e050      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801dfc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dfcc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801dfd0:	430b      	orrs	r3, r1
 801dfd2:	d148      	bne.n	801e066 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801dfd4:	4b27      	ldr	r3, [pc, #156]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801dfd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dfd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801dfdc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dfe4:	d02a      	beq.n	801e03c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dfec:	d838      	bhi.n	801e060 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801dfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	d004      	beq.n	801dffe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801dffa:	d00d      	beq.n	801e018 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801dffc:	e030      	b.n	801e060 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801dffe:	4b1d      	ldr	r3, [pc, #116]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801e00a:	d102      	bne.n	801e012 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801e00c:	4b1c      	ldr	r3, [pc, #112]	; (801e080 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801e00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e010:	e02b      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e012:	2300      	movs	r3, #0
 801e014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e016:	e028      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e018:	4b16      	ldr	r3, [pc, #88]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801e024:	d107      	bne.n	801e036 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e02a:	4618      	mov	r0, r3
 801e02c:	f000 fae8 	bl	801e600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e034:	e019      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e036:	2300      	movs	r3, #0
 801e038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e03a:	e016      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e03c:	4b0d      	ldr	r3, [pc, #52]	; (801e074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e048:	d107      	bne.n	801e05a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e04a:	f107 0318 	add.w	r3, r7, #24
 801e04e:	4618      	mov	r0, r3
 801e050:	f000 f82e 	bl	801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e054:	69fb      	ldr	r3, [r7, #28]
 801e056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e058:	e007      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801e05a:	2300      	movs	r3, #0
 801e05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e05e:	e004      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801e060:	2300      	movs	r3, #0
 801e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801e064:	e001      	b.n	801e06a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801e066:	2300      	movs	r3, #0
 801e068:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801e06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801e06c:	4618      	mov	r0, r3
 801e06e:	3740      	adds	r7, #64	; 0x40
 801e070:	46bd      	mov	sp, r7
 801e072:	bd80      	pop	{r7, pc}
 801e074:	58024400 	.word	0x58024400
 801e078:	03d09000 	.word	0x03d09000
 801e07c:	003d0900 	.word	0x003d0900
 801e080:	007a1200 	.word	0x007a1200

0801e084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e084:	b580      	push	{r7, lr}
 801e086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e088:	f7fe f944 	bl	801c314 <HAL_RCC_GetHCLKFreq>
 801e08c:	4602      	mov	r2, r0
 801e08e:	4b06      	ldr	r3, [pc, #24]	; (801e0a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e090:	6a1b      	ldr	r3, [r3, #32]
 801e092:	091b      	lsrs	r3, r3, #4
 801e094:	f003 0307 	and.w	r3, r3, #7
 801e098:	4904      	ldr	r1, [pc, #16]	; (801e0ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e09a:	5ccb      	ldrb	r3, [r1, r3]
 801e09c:	f003 031f 	and.w	r3, r3, #31
 801e0a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	bd80      	pop	{r7, pc}
 801e0a8:	58024400 	.word	0x58024400
 801e0ac:	080212f8 	.word	0x080212f8

0801e0b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e0b0:	b480      	push	{r7}
 801e0b2:	b089      	sub	sp, #36	; 0x24
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e0b8:	4ba1      	ldr	r3, [pc, #644]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0bc:	f003 0303 	and.w	r3, r3, #3
 801e0c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e0c2:	4b9f      	ldr	r3, [pc, #636]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0c6:	0b1b      	lsrs	r3, r3, #12
 801e0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e0cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e0ce:	4b9c      	ldr	r3, [pc, #624]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0d2:	091b      	lsrs	r3, r3, #4
 801e0d4:	f003 0301 	and.w	r3, r3, #1
 801e0d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e0da:	4b99      	ldr	r3, [pc, #612]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e0de:	08db      	lsrs	r3, r3, #3
 801e0e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e0e4:	693a      	ldr	r2, [r7, #16]
 801e0e6:	fb02 f303 	mul.w	r3, r2, r3
 801e0ea:	ee07 3a90 	vmov	s15, r3
 801e0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e0f6:	697b      	ldr	r3, [r7, #20]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	f000 8111 	beq.w	801e320 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e0fe:	69bb      	ldr	r3, [r7, #24]
 801e100:	2b02      	cmp	r3, #2
 801e102:	f000 8083 	beq.w	801e20c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e106:	69bb      	ldr	r3, [r7, #24]
 801e108:	2b02      	cmp	r3, #2
 801e10a:	f200 80a1 	bhi.w	801e250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e10e:	69bb      	ldr	r3, [r7, #24]
 801e110:	2b00      	cmp	r3, #0
 801e112:	d003      	beq.n	801e11c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e114:	69bb      	ldr	r3, [r7, #24]
 801e116:	2b01      	cmp	r3, #1
 801e118:	d056      	beq.n	801e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e11a:	e099      	b.n	801e250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e11c:	4b88      	ldr	r3, [pc, #544]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	f003 0320 	and.w	r3, r3, #32
 801e124:	2b00      	cmp	r3, #0
 801e126:	d02d      	beq.n	801e184 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e128:	4b85      	ldr	r3, [pc, #532]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	08db      	lsrs	r3, r3, #3
 801e12e:	f003 0303 	and.w	r3, r3, #3
 801e132:	4a84      	ldr	r2, [pc, #528]	; (801e344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e134:	fa22 f303 	lsr.w	r3, r2, r3
 801e138:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e13a:	68bb      	ldr	r3, [r7, #8]
 801e13c:	ee07 3a90 	vmov	s15, r3
 801e140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e144:	697b      	ldr	r3, [r7, #20]
 801e146:	ee07 3a90 	vmov	s15, r3
 801e14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e152:	4b7b      	ldr	r3, [pc, #492]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e15a:	ee07 3a90 	vmov	s15, r3
 801e15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e162:	ed97 6a03 	vldr	s12, [r7, #12]
 801e166:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e17e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e182:	e087      	b.n	801e294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e184:	697b      	ldr	r3, [r7, #20]
 801e186:	ee07 3a90 	vmov	s15, r3
 801e18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e18e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e34c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e196:	4b6a      	ldr	r3, [pc, #424]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e19e:	ee07 3a90 	vmov	s15, r3
 801e1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e1c6:	e065      	b.n	801e294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	ee07 3a90 	vmov	s15, r3
 801e1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1da:	4b59      	ldr	r3, [pc, #356]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1e2:	ee07 3a90 	vmov	s15, r3
 801e1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e202:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e20a:	e043      	b.n	801e294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e20c:	697b      	ldr	r3, [r7, #20]
 801e20e:	ee07 3a90 	vmov	s15, r3
 801e212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e216:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e21e:	4b48      	ldr	r3, [pc, #288]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e226:	ee07 3a90 	vmov	s15, r3
 801e22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e22e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e232:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e246:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e24e:	e021      	b.n	801e294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e250:	697b      	ldr	r3, [r7, #20]
 801e252:	ee07 3a90 	vmov	s15, r3
 801e256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e25a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e262:	4b37      	ldr	r3, [pc, #220]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e26a:	ee07 3a90 	vmov	s15, r3
 801e26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e272:	ed97 6a03 	vldr	s12, [r7, #12]
 801e276:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e28e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e292:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e294:	4b2a      	ldr	r3, [pc, #168]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e298:	0a5b      	lsrs	r3, r3, #9
 801e29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e29e:	ee07 3a90 	vmov	s15, r3
 801e2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e2aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e2ae:	edd7 6a07 	vldr	s13, [r7, #28]
 801e2b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e2b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e2ba:	ee17 2a90 	vmov	r2, s15
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e2c2:	4b1f      	ldr	r3, [pc, #124]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2c6:	0c1b      	lsrs	r3, r3, #16
 801e2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e2cc:	ee07 3a90 	vmov	s15, r3
 801e2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e2d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e2dc:	edd7 6a07 	vldr	s13, [r7, #28]
 801e2e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e2e8:	ee17 2a90 	vmov	r2, s15
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e2f0:	4b13      	ldr	r3, [pc, #76]	; (801e340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2f4:	0e1b      	lsrs	r3, r3, #24
 801e2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e2fa:	ee07 3a90 	vmov	s15, r3
 801e2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e306:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e30a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e30e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e316:	ee17 2a90 	vmov	r2, s15
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e31e:	e008      	b.n	801e332 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	2200      	movs	r2, #0
 801e324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	2200      	movs	r2, #0
 801e32a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	2200      	movs	r2, #0
 801e330:	609a      	str	r2, [r3, #8]
}
 801e332:	bf00      	nop
 801e334:	3724      	adds	r7, #36	; 0x24
 801e336:	46bd      	mov	sp, r7
 801e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e33c:	4770      	bx	lr
 801e33e:	bf00      	nop
 801e340:	58024400 	.word	0x58024400
 801e344:	03d09000 	.word	0x03d09000
 801e348:	46000000 	.word	0x46000000
 801e34c:	4c742400 	.word	0x4c742400
 801e350:	4a742400 	.word	0x4a742400
 801e354:	4af42400 	.word	0x4af42400

0801e358 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e358:	b480      	push	{r7}
 801e35a:	b089      	sub	sp, #36	; 0x24
 801e35c:	af00      	add	r7, sp, #0
 801e35e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e360:	4ba1      	ldr	r3, [pc, #644]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e364:	f003 0303 	and.w	r3, r3, #3
 801e368:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e36a:	4b9f      	ldr	r3, [pc, #636]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e36e:	0d1b      	lsrs	r3, r3, #20
 801e370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e374:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e376:	4b9c      	ldr	r3, [pc, #624]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e37a:	0a1b      	lsrs	r3, r3, #8
 801e37c:	f003 0301 	and.w	r3, r3, #1
 801e380:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e382:	4b99      	ldr	r3, [pc, #612]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e386:	08db      	lsrs	r3, r3, #3
 801e388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e38c:	693a      	ldr	r2, [r7, #16]
 801e38e:	fb02 f303 	mul.w	r3, r2, r3
 801e392:	ee07 3a90 	vmov	s15, r3
 801e396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e39a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e39e:	697b      	ldr	r3, [r7, #20]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	f000 8111 	beq.w	801e5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e3a6:	69bb      	ldr	r3, [r7, #24]
 801e3a8:	2b02      	cmp	r3, #2
 801e3aa:	f000 8083 	beq.w	801e4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e3ae:	69bb      	ldr	r3, [r7, #24]
 801e3b0:	2b02      	cmp	r3, #2
 801e3b2:	f200 80a1 	bhi.w	801e4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e3b6:	69bb      	ldr	r3, [r7, #24]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d003      	beq.n	801e3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e3bc:	69bb      	ldr	r3, [r7, #24]
 801e3be:	2b01      	cmp	r3, #1
 801e3c0:	d056      	beq.n	801e470 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e3c2:	e099      	b.n	801e4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e3c4:	4b88      	ldr	r3, [pc, #544]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	f003 0320 	and.w	r3, r3, #32
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d02d      	beq.n	801e42c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e3d0:	4b85      	ldr	r3, [pc, #532]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3d2:	681b      	ldr	r3, [r3, #0]
 801e3d4:	08db      	lsrs	r3, r3, #3
 801e3d6:	f003 0303 	and.w	r3, r3, #3
 801e3da:	4a84      	ldr	r2, [pc, #528]	; (801e5ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e3dc:	fa22 f303 	lsr.w	r3, r2, r3
 801e3e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e3e2:	68bb      	ldr	r3, [r7, #8]
 801e3e4:	ee07 3a90 	vmov	s15, r3
 801e3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e3ec:	697b      	ldr	r3, [r7, #20]
 801e3ee:	ee07 3a90 	vmov	s15, r3
 801e3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e3fa:	4b7b      	ldr	r3, [pc, #492]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e402:	ee07 3a90 	vmov	s15, r3
 801e406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e40a:	ed97 6a03 	vldr	s12, [r7, #12]
 801e40e:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e422:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e42a:	e087      	b.n	801e53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e42c:	697b      	ldr	r3, [r7, #20]
 801e42e:	ee07 3a90 	vmov	s15, r3
 801e432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801e43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e43e:	4b6a      	ldr	r3, [pc, #424]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e446:	ee07 3a90 	vmov	s15, r3
 801e44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e44e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e452:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e466:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e46e:	e065      	b.n	801e53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e470:	697b      	ldr	r3, [r7, #20]
 801e472:	ee07 3a90 	vmov	s15, r3
 801e476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e47a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e482:	4b59      	ldr	r3, [pc, #356]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e48a:	ee07 3a90 	vmov	s15, r3
 801e48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e492:	ed97 6a03 	vldr	s12, [r7, #12]
 801e496:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e4b2:	e043      	b.n	801e53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e4b4:	697b      	ldr	r3, [r7, #20]
 801e4b6:	ee07 3a90 	vmov	s15, r3
 801e4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801e4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e4c6:	4b48      	ldr	r3, [pc, #288]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e4ce:	ee07 3a90 	vmov	s15, r3
 801e4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e4da:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e4f6:	e021      	b.n	801e53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e4f8:	697b      	ldr	r3, [r7, #20]
 801e4fa:	ee07 3a90 	vmov	s15, r3
 801e4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e50a:	4b37      	ldr	r3, [pc, #220]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e512:	ee07 3a90 	vmov	s15, r3
 801e516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e51a:	ed97 6a03 	vldr	s12, [r7, #12]
 801e51e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e532:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e53a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801e53c:	4b2a      	ldr	r3, [pc, #168]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e540:	0a5b      	lsrs	r3, r3, #9
 801e542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e546:	ee07 3a90 	vmov	s15, r3
 801e54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e552:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e556:	edd7 6a07 	vldr	s13, [r7, #28]
 801e55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e55e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e562:	ee17 2a90 	vmov	r2, s15
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801e56a:	4b1f      	ldr	r3, [pc, #124]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e56e:	0c1b      	lsrs	r3, r3, #16
 801e570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e574:	ee07 3a90 	vmov	s15, r3
 801e578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e580:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e584:	edd7 6a07 	vldr	s13, [r7, #28]
 801e588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e590:	ee17 2a90 	vmov	r2, s15
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801e598:	4b13      	ldr	r3, [pc, #76]	; (801e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e59c:	0e1b      	lsrs	r3, r3, #24
 801e59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e5a2:	ee07 3a90 	vmov	s15, r3
 801e5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e5ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e5b2:	edd7 6a07 	vldr	s13, [r7, #28]
 801e5b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e5ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e5be:	ee17 2a90 	vmov	r2, s15
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e5c6:	e008      	b.n	801e5da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	2200      	movs	r2, #0
 801e5d8:	609a      	str	r2, [r3, #8]
}
 801e5da:	bf00      	nop
 801e5dc:	3724      	adds	r7, #36	; 0x24
 801e5de:	46bd      	mov	sp, r7
 801e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5e4:	4770      	bx	lr
 801e5e6:	bf00      	nop
 801e5e8:	58024400 	.word	0x58024400
 801e5ec:	03d09000 	.word	0x03d09000
 801e5f0:	46000000 	.word	0x46000000
 801e5f4:	4c742400 	.word	0x4c742400
 801e5f8:	4a742400 	.word	0x4a742400
 801e5fc:	4af42400 	.word	0x4af42400

0801e600 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801e600:	b480      	push	{r7}
 801e602:	b089      	sub	sp, #36	; 0x24
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e608:	4ba0      	ldr	r3, [pc, #640]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e60c:	f003 0303 	and.w	r3, r3, #3
 801e610:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801e612:	4b9e      	ldr	r3, [pc, #632]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e616:	091b      	lsrs	r3, r3, #4
 801e618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e61c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801e61e:	4b9b      	ldr	r3, [pc, #620]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e622:	f003 0301 	and.w	r3, r3, #1
 801e626:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801e628:	4b98      	ldr	r3, [pc, #608]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e62c:	08db      	lsrs	r3, r3, #3
 801e62e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e632:	693a      	ldr	r2, [r7, #16]
 801e634:	fb02 f303 	mul.w	r3, r2, r3
 801e638:	ee07 3a90 	vmov	s15, r3
 801e63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e640:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801e644:	697b      	ldr	r3, [r7, #20]
 801e646:	2b00      	cmp	r3, #0
 801e648:	f000 8111 	beq.w	801e86e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801e64c:	69bb      	ldr	r3, [r7, #24]
 801e64e:	2b02      	cmp	r3, #2
 801e650:	f000 8083 	beq.w	801e75a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801e654:	69bb      	ldr	r3, [r7, #24]
 801e656:	2b02      	cmp	r3, #2
 801e658:	f200 80a1 	bhi.w	801e79e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801e65c:	69bb      	ldr	r3, [r7, #24]
 801e65e:	2b00      	cmp	r3, #0
 801e660:	d003      	beq.n	801e66a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801e662:	69bb      	ldr	r3, [r7, #24]
 801e664:	2b01      	cmp	r3, #1
 801e666:	d056      	beq.n	801e716 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801e668:	e099      	b.n	801e79e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e66a:	4b88      	ldr	r3, [pc, #544]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	f003 0320 	and.w	r3, r3, #32
 801e672:	2b00      	cmp	r3, #0
 801e674:	d02d      	beq.n	801e6d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e676:	4b85      	ldr	r3, [pc, #532]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	08db      	lsrs	r3, r3, #3
 801e67c:	f003 0303 	and.w	r3, r3, #3
 801e680:	4a83      	ldr	r2, [pc, #524]	; (801e890 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801e682:	fa22 f303 	lsr.w	r3, r2, r3
 801e686:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e688:	68bb      	ldr	r3, [r7, #8]
 801e68a:	ee07 3a90 	vmov	s15, r3
 801e68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e692:	697b      	ldr	r3, [r7, #20]
 801e694:	ee07 3a90 	vmov	s15, r3
 801e698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e6a0:	4b7a      	ldr	r3, [pc, #488]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e6a8:	ee07 3a90 	vmov	s15, r3
 801e6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e6b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e6c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e6d0:	e087      	b.n	801e7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e6d2:	697b      	ldr	r3, [r7, #20]
 801e6d4:	ee07 3a90 	vmov	s15, r3
 801e6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e898 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e6e4:	4b69      	ldr	r3, [pc, #420]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e6ec:	ee07 3a90 	vmov	s15, r3
 801e6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 801e6f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e714:	e065      	b.n	801e7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e716:	697b      	ldr	r3, [r7, #20]
 801e718:	ee07 3a90 	vmov	s15, r3
 801e71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e720:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e89c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e728:	4b58      	ldr	r3, [pc, #352]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e730:	ee07 3a90 	vmov	s15, r3
 801e734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e738:	ed97 6a03 	vldr	s12, [r7, #12]
 801e73c:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e750:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e758:	e043      	b.n	801e7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e75a:	697b      	ldr	r3, [r7, #20]
 801e75c:	ee07 3a90 	vmov	s15, r3
 801e760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e764:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e76c:	4b47      	ldr	r3, [pc, #284]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e774:	ee07 3a90 	vmov	s15, r3
 801e778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e77c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e780:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e78c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e794:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e79c:	e021      	b.n	801e7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e79e:	697b      	ldr	r3, [r7, #20]
 801e7a0:	ee07 3a90 	vmov	s15, r3
 801e7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e898 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e7b0:	4b36      	ldr	r3, [pc, #216]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e7b8:	ee07 3a90 	vmov	s15, r3
 801e7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e7c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e7d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e7dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e7e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e7e2:	4b2a      	ldr	r3, [pc, #168]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e7e6:	0a5b      	lsrs	r3, r3, #9
 801e7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e7ec:	ee07 3a90 	vmov	s15, r3
 801e7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 801e800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e808:	ee17 2a90 	vmov	r2, s15
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e810:	4b1e      	ldr	r3, [pc, #120]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e814:	0c1b      	lsrs	r3, r3, #16
 801e816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e81a:	ee07 3a90 	vmov	s15, r3
 801e81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e826:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e82a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e836:	ee17 2a90 	vmov	r2, s15
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e83e:	4b13      	ldr	r3, [pc, #76]	; (801e88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e842:	0e1b      	lsrs	r3, r3, #24
 801e844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e848:	ee07 3a90 	vmov	s15, r3
 801e84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e854:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e858:	edd7 6a07 	vldr	s13, [r7, #28]
 801e85c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e864:	ee17 2a90 	vmov	r2, s15
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e86c:	e008      	b.n	801e880 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	2200      	movs	r2, #0
 801e872:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	2200      	movs	r2, #0
 801e878:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	2200      	movs	r2, #0
 801e87e:	609a      	str	r2, [r3, #8]
}
 801e880:	bf00      	nop
 801e882:	3724      	adds	r7, #36	; 0x24
 801e884:	46bd      	mov	sp, r7
 801e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e88a:	4770      	bx	lr
 801e88c:	58024400 	.word	0x58024400
 801e890:	03d09000 	.word	0x03d09000
 801e894:	46000000 	.word	0x46000000
 801e898:	4c742400 	.word	0x4c742400
 801e89c:	4a742400 	.word	0x4a742400
 801e8a0:	4af42400 	.word	0x4af42400

0801e8a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e8a4:	b580      	push	{r7, lr}
 801e8a6:	b084      	sub	sp, #16
 801e8a8:	af00      	add	r7, sp, #0
 801e8aa:	6078      	str	r0, [r7, #4]
 801e8ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e8b2:	4b53      	ldr	r3, [pc, #332]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8b6:	f003 0303 	and.w	r3, r3, #3
 801e8ba:	2b03      	cmp	r3, #3
 801e8bc:	d101      	bne.n	801e8c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e8be:	2301      	movs	r3, #1
 801e8c0:	e099      	b.n	801e9f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e8c2:	4b4f      	ldr	r3, [pc, #316]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	4a4e      	ldr	r2, [pc, #312]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e8c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e8ce:	f7f7 f803 	bl	80158d8 <HAL_GetTick>
 801e8d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e8d4:	e008      	b.n	801e8e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e8d6:	f7f6 ffff 	bl	80158d8 <HAL_GetTick>
 801e8da:	4602      	mov	r2, r0
 801e8dc:	68bb      	ldr	r3, [r7, #8]
 801e8de:	1ad3      	subs	r3, r2, r3
 801e8e0:	2b02      	cmp	r3, #2
 801e8e2:	d901      	bls.n	801e8e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e8e4:	2303      	movs	r3, #3
 801e8e6:	e086      	b.n	801e9f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e8e8:	4b45      	ldr	r3, [pc, #276]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d1f0      	bne.n	801e8d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e8f4:	4b42      	ldr	r3, [pc, #264]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	031b      	lsls	r3, r3, #12
 801e902:	493f      	ldr	r1, [pc, #252]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e904:	4313      	orrs	r3, r2
 801e906:	628b      	str	r3, [r1, #40]	; 0x28
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	685b      	ldr	r3, [r3, #4]
 801e90c:	3b01      	subs	r3, #1
 801e90e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	689b      	ldr	r3, [r3, #8]
 801e916:	3b01      	subs	r3, #1
 801e918:	025b      	lsls	r3, r3, #9
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	431a      	orrs	r2, r3
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	68db      	ldr	r3, [r3, #12]
 801e922:	3b01      	subs	r3, #1
 801e924:	041b      	lsls	r3, r3, #16
 801e926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e92a:	431a      	orrs	r2, r3
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	691b      	ldr	r3, [r3, #16]
 801e930:	3b01      	subs	r3, #1
 801e932:	061b      	lsls	r3, r3, #24
 801e934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e938:	4931      	ldr	r1, [pc, #196]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e93a:	4313      	orrs	r3, r2
 801e93c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e93e:	4b30      	ldr	r3, [pc, #192]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	695b      	ldr	r3, [r3, #20]
 801e94a:	492d      	ldr	r1, [pc, #180]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e94c:	4313      	orrs	r3, r2
 801e94e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e950:	4b2b      	ldr	r3, [pc, #172]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e954:	f023 0220 	bic.w	r2, r3, #32
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	699b      	ldr	r3, [r3, #24]
 801e95c:	4928      	ldr	r1, [pc, #160]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e95e:	4313      	orrs	r3, r2
 801e960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e962:	4b27      	ldr	r3, [pc, #156]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e966:	4a26      	ldr	r2, [pc, #152]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e968:	f023 0310 	bic.w	r3, r3, #16
 801e96c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e96e:	4b24      	ldr	r3, [pc, #144]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e972:	4b24      	ldr	r3, [pc, #144]	; (801ea04 <RCCEx_PLL2_Config+0x160>)
 801e974:	4013      	ands	r3, r2
 801e976:	687a      	ldr	r2, [r7, #4]
 801e978:	69d2      	ldr	r2, [r2, #28]
 801e97a:	00d2      	lsls	r2, r2, #3
 801e97c:	4920      	ldr	r1, [pc, #128]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e97e:	4313      	orrs	r3, r2
 801e980:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e982:	4b1f      	ldr	r3, [pc, #124]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e986:	4a1e      	ldr	r2, [pc, #120]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e988:	f043 0310 	orr.w	r3, r3, #16
 801e98c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e98e:	683b      	ldr	r3, [r7, #0]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d106      	bne.n	801e9a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e994:	4b1a      	ldr	r3, [pc, #104]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e998:	4a19      	ldr	r2, [pc, #100]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e99a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e99e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e9a0:	e00f      	b.n	801e9c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e9a2:	683b      	ldr	r3, [r7, #0]
 801e9a4:	2b01      	cmp	r3, #1
 801e9a6:	d106      	bne.n	801e9b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e9a8:	4b15      	ldr	r3, [pc, #84]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9ac:	4a14      	ldr	r2, [pc, #80]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e9b4:	e005      	b.n	801e9c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e9b6:	4b12      	ldr	r3, [pc, #72]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9ba:	4a11      	ldr	r2, [pc, #68]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e9c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e9c2:	4b0f      	ldr	r3, [pc, #60]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	4a0e      	ldr	r2, [pc, #56]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e9cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e9ce:	f7f6 ff83 	bl	80158d8 <HAL_GetTick>
 801e9d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e9d4:	e008      	b.n	801e9e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e9d6:	f7f6 ff7f 	bl	80158d8 <HAL_GetTick>
 801e9da:	4602      	mov	r2, r0
 801e9dc:	68bb      	ldr	r3, [r7, #8]
 801e9de:	1ad3      	subs	r3, r2, r3
 801e9e0:	2b02      	cmp	r3, #2
 801e9e2:	d901      	bls.n	801e9e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e9e4:	2303      	movs	r3, #3
 801e9e6:	e006      	b.n	801e9f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e9e8:	4b05      	ldr	r3, [pc, #20]	; (801ea00 <RCCEx_PLL2_Config+0x15c>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d0f0      	beq.n	801e9d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	3710      	adds	r7, #16
 801e9fa:	46bd      	mov	sp, r7
 801e9fc:	bd80      	pop	{r7, pc}
 801e9fe:	bf00      	nop
 801ea00:	58024400 	.word	0x58024400
 801ea04:	ffff0007 	.word	0xffff0007

0801ea08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b084      	sub	sp, #16
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ea12:	2300      	movs	r3, #0
 801ea14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ea16:	4b53      	ldr	r3, [pc, #332]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea1a:	f003 0303 	and.w	r3, r3, #3
 801ea1e:	2b03      	cmp	r3, #3
 801ea20:	d101      	bne.n	801ea26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801ea22:	2301      	movs	r3, #1
 801ea24:	e099      	b.n	801eb5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801ea26:	4b4f      	ldr	r3, [pc, #316]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	4a4e      	ldr	r2, [pc, #312]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ea30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ea32:	f7f6 ff51 	bl	80158d8 <HAL_GetTick>
 801ea36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ea38:	e008      	b.n	801ea4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ea3a:	f7f6 ff4d 	bl	80158d8 <HAL_GetTick>
 801ea3e:	4602      	mov	r2, r0
 801ea40:	68bb      	ldr	r3, [r7, #8]
 801ea42:	1ad3      	subs	r3, r2, r3
 801ea44:	2b02      	cmp	r3, #2
 801ea46:	d901      	bls.n	801ea4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ea48:	2303      	movs	r3, #3
 801ea4a:	e086      	b.n	801eb5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ea4c:	4b45      	ldr	r3, [pc, #276]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d1f0      	bne.n	801ea3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ea58:	4b42      	ldr	r3, [pc, #264]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	051b      	lsls	r3, r3, #20
 801ea66:	493f      	ldr	r1, [pc, #252]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea68:	4313      	orrs	r3, r2
 801ea6a:	628b      	str	r3, [r1, #40]	; 0x28
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	685b      	ldr	r3, [r3, #4]
 801ea70:	3b01      	subs	r3, #1
 801ea72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	689b      	ldr	r3, [r3, #8]
 801ea7a:	3b01      	subs	r3, #1
 801ea7c:	025b      	lsls	r3, r3, #9
 801ea7e:	b29b      	uxth	r3, r3
 801ea80:	431a      	orrs	r2, r3
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	68db      	ldr	r3, [r3, #12]
 801ea86:	3b01      	subs	r3, #1
 801ea88:	041b      	lsls	r3, r3, #16
 801ea8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801ea8e:	431a      	orrs	r2, r3
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	691b      	ldr	r3, [r3, #16]
 801ea94:	3b01      	subs	r3, #1
 801ea96:	061b      	lsls	r3, r3, #24
 801ea98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801ea9c:	4931      	ldr	r1, [pc, #196]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ea9e:	4313      	orrs	r3, r2
 801eaa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801eaa2:	4b30      	ldr	r3, [pc, #192]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eaa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	695b      	ldr	r3, [r3, #20]
 801eaae:	492d      	ldr	r1, [pc, #180]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eab0:	4313      	orrs	r3, r2
 801eab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801eab4:	4b2b      	ldr	r3, [pc, #172]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eab8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	699b      	ldr	r3, [r3, #24]
 801eac0:	4928      	ldr	r1, [pc, #160]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eac2:	4313      	orrs	r3, r2
 801eac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801eac6:	4b27      	ldr	r3, [pc, #156]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eaca:	4a26      	ldr	r2, [pc, #152]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ead0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801ead2:	4b24      	ldr	r3, [pc, #144]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801ead4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ead6:	4b24      	ldr	r3, [pc, #144]	; (801eb68 <RCCEx_PLL3_Config+0x160>)
 801ead8:	4013      	ands	r3, r2
 801eada:	687a      	ldr	r2, [r7, #4]
 801eadc:	69d2      	ldr	r2, [r2, #28]
 801eade:	00d2      	lsls	r2, r2, #3
 801eae0:	4920      	ldr	r1, [pc, #128]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eae2:	4313      	orrs	r3, r2
 801eae4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801eae6:	4b1f      	ldr	r3, [pc, #124]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eaea:	4a1e      	ldr	r2, [pc, #120]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eaec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801eaf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d106      	bne.n	801eb06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801eaf8:	4b1a      	ldr	r3, [pc, #104]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eafc:	4a19      	ldr	r2, [pc, #100]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eafe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801eb02:	62d3      	str	r3, [r2, #44]	; 0x2c
 801eb04:	e00f      	b.n	801eb26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801eb06:	683b      	ldr	r3, [r7, #0]
 801eb08:	2b01      	cmp	r3, #1
 801eb0a:	d106      	bne.n	801eb1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801eb0c:	4b15      	ldr	r3, [pc, #84]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb10:	4a14      	ldr	r2, [pc, #80]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801eb16:	62d3      	str	r3, [r2, #44]	; 0x2c
 801eb18:	e005      	b.n	801eb26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801eb1a:	4b12      	ldr	r3, [pc, #72]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb1e:	4a11      	ldr	r2, [pc, #68]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801eb24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801eb26:	4b0f      	ldr	r3, [pc, #60]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	4a0e      	ldr	r2, [pc, #56]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eb32:	f7f6 fed1 	bl	80158d8 <HAL_GetTick>
 801eb36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801eb38:	e008      	b.n	801eb4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801eb3a:	f7f6 fecd 	bl	80158d8 <HAL_GetTick>
 801eb3e:	4602      	mov	r2, r0
 801eb40:	68bb      	ldr	r3, [r7, #8]
 801eb42:	1ad3      	subs	r3, r2, r3
 801eb44:	2b02      	cmp	r3, #2
 801eb46:	d901      	bls.n	801eb4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eb48:	2303      	movs	r3, #3
 801eb4a:	e006      	b.n	801eb5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801eb4c:	4b05      	ldr	r3, [pc, #20]	; (801eb64 <RCCEx_PLL3_Config+0x15c>)
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d0f0      	beq.n	801eb3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801eb58:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	3710      	adds	r7, #16
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	bd80      	pop	{r7, pc}
 801eb62:	bf00      	nop
 801eb64:	58024400 	.word	0x58024400
 801eb68:	ffff0007 	.word	0xffff0007

0801eb6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b082      	sub	sp, #8
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d101      	bne.n	801eb7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801eb7a:	2301      	movs	r3, #1
 801eb7c:	e049      	b.n	801ec12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb84:	b2db      	uxtb	r3, r3
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d106      	bne.n	801eb98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	2200      	movs	r2, #0
 801eb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801eb92:	6878      	ldr	r0, [r7, #4]
 801eb94:	f7f6 f8a4 	bl	8014ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	2202      	movs	r2, #2
 801eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	681a      	ldr	r2, [r3, #0]
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	3304      	adds	r3, #4
 801eba8:	4619      	mov	r1, r3
 801ebaa:	4610      	mov	r0, r2
 801ebac:	f001 f8d0 	bl	801fd50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2201      	movs	r2, #1
 801ebb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	2201      	movs	r2, #1
 801ebbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2201      	movs	r2, #1
 801ebc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	2201      	movs	r2, #1
 801ebcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	2201      	movs	r2, #1
 801ebd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	2201      	movs	r2, #1
 801ebdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	2201      	movs	r2, #1
 801ebe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	2201      	movs	r2, #1
 801ebec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	2201      	movs	r2, #1
 801ebf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2201      	movs	r2, #1
 801ebfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	2201      	movs	r2, #1
 801ec04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	2201      	movs	r2, #1
 801ec0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ec10:	2300      	movs	r3, #0
}
 801ec12:	4618      	mov	r0, r3
 801ec14:	3708      	adds	r7, #8
 801ec16:	46bd      	mov	sp, r7
 801ec18:	bd80      	pop	{r7, pc}
	...

0801ec1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ec1c:	b480      	push	{r7}
 801ec1e:	b085      	sub	sp, #20
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ec2a:	b2db      	uxtb	r3, r3
 801ec2c:	2b01      	cmp	r3, #1
 801ec2e:	d001      	beq.n	801ec34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ec30:	2301      	movs	r3, #1
 801ec32:	e056      	b.n	801ece2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	2202      	movs	r2, #2
 801ec38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	4a2b      	ldr	r2, [pc, #172]	; (801ecf0 <HAL_TIM_Base_Start+0xd4>)
 801ec42:	4293      	cmp	r3, r2
 801ec44:	d02c      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ec4e:	d027      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	4a27      	ldr	r2, [pc, #156]	; (801ecf4 <HAL_TIM_Base_Start+0xd8>)
 801ec56:	4293      	cmp	r3, r2
 801ec58:	d022      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	4a26      	ldr	r2, [pc, #152]	; (801ecf8 <HAL_TIM_Base_Start+0xdc>)
 801ec60:	4293      	cmp	r3, r2
 801ec62:	d01d      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	4a24      	ldr	r2, [pc, #144]	; (801ecfc <HAL_TIM_Base_Start+0xe0>)
 801ec6a:	4293      	cmp	r3, r2
 801ec6c:	d018      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	681b      	ldr	r3, [r3, #0]
 801ec72:	4a23      	ldr	r2, [pc, #140]	; (801ed00 <HAL_TIM_Base_Start+0xe4>)
 801ec74:	4293      	cmp	r3, r2
 801ec76:	d013      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	4a21      	ldr	r2, [pc, #132]	; (801ed04 <HAL_TIM_Base_Start+0xe8>)
 801ec7e:	4293      	cmp	r3, r2
 801ec80:	d00e      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	4a20      	ldr	r2, [pc, #128]	; (801ed08 <HAL_TIM_Base_Start+0xec>)
 801ec88:	4293      	cmp	r3, r2
 801ec8a:	d009      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	4a1e      	ldr	r2, [pc, #120]	; (801ed0c <HAL_TIM_Base_Start+0xf0>)
 801ec92:	4293      	cmp	r3, r2
 801ec94:	d004      	beq.n	801eca0 <HAL_TIM_Base_Start+0x84>
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	4a1d      	ldr	r2, [pc, #116]	; (801ed10 <HAL_TIM_Base_Start+0xf4>)
 801ec9c:	4293      	cmp	r3, r2
 801ec9e:	d115      	bne.n	801eccc <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	689a      	ldr	r2, [r3, #8]
 801eca6:	4b1b      	ldr	r3, [pc, #108]	; (801ed14 <HAL_TIM_Base_Start+0xf8>)
 801eca8:	4013      	ands	r3, r2
 801ecaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecac:	68fb      	ldr	r3, [r7, #12]
 801ecae:	2b06      	cmp	r3, #6
 801ecb0:	d015      	beq.n	801ecde <HAL_TIM_Base_Start+0xc2>
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ecb8:	d011      	beq.n	801ecde <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	681a      	ldr	r2, [r3, #0]
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	f042 0201 	orr.w	r2, r2, #1
 801ecc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecca:	e008      	b.n	801ecde <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	681a      	ldr	r2, [r3, #0]
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	f042 0201 	orr.w	r2, r2, #1
 801ecda:	601a      	str	r2, [r3, #0]
 801ecdc:	e000      	b.n	801ece0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ece0:	2300      	movs	r3, #0
}
 801ece2:	4618      	mov	r0, r3
 801ece4:	3714      	adds	r7, #20
 801ece6:	46bd      	mov	sp, r7
 801ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecec:	4770      	bx	lr
 801ecee:	bf00      	nop
 801ecf0:	40010000 	.word	0x40010000
 801ecf4:	40000400 	.word	0x40000400
 801ecf8:	40000800 	.word	0x40000800
 801ecfc:	40000c00 	.word	0x40000c00
 801ed00:	40010400 	.word	0x40010400
 801ed04:	40001800 	.word	0x40001800
 801ed08:	40014000 	.word	0x40014000
 801ed0c:	4000e000 	.word	0x4000e000
 801ed10:	4000e400 	.word	0x4000e400
 801ed14:	00010007 	.word	0x00010007

0801ed18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ed18:	b480      	push	{r7}
 801ed1a:	b085      	sub	sp, #20
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed26:	b2db      	uxtb	r3, r3
 801ed28:	2b01      	cmp	r3, #1
 801ed2a:	d001      	beq.n	801ed30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ed2c:	2301      	movs	r3, #1
 801ed2e:	e05e      	b.n	801edee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	2202      	movs	r2, #2
 801ed34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	68da      	ldr	r2, [r3, #12]
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	f042 0201 	orr.w	r2, r2, #1
 801ed46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	4a2b      	ldr	r2, [pc, #172]	; (801edfc <HAL_TIM_Base_Start_IT+0xe4>)
 801ed4e:	4293      	cmp	r3, r2
 801ed50:	d02c      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ed5a:	d027      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	4a27      	ldr	r2, [pc, #156]	; (801ee00 <HAL_TIM_Base_Start_IT+0xe8>)
 801ed62:	4293      	cmp	r3, r2
 801ed64:	d022      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	4a26      	ldr	r2, [pc, #152]	; (801ee04 <HAL_TIM_Base_Start_IT+0xec>)
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	d01d      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	4a24      	ldr	r2, [pc, #144]	; (801ee08 <HAL_TIM_Base_Start_IT+0xf0>)
 801ed76:	4293      	cmp	r3, r2
 801ed78:	d018      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	4a23      	ldr	r2, [pc, #140]	; (801ee0c <HAL_TIM_Base_Start_IT+0xf4>)
 801ed80:	4293      	cmp	r3, r2
 801ed82:	d013      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	4a21      	ldr	r2, [pc, #132]	; (801ee10 <HAL_TIM_Base_Start_IT+0xf8>)
 801ed8a:	4293      	cmp	r3, r2
 801ed8c:	d00e      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	4a20      	ldr	r2, [pc, #128]	; (801ee14 <HAL_TIM_Base_Start_IT+0xfc>)
 801ed94:	4293      	cmp	r3, r2
 801ed96:	d009      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	4a1e      	ldr	r2, [pc, #120]	; (801ee18 <HAL_TIM_Base_Start_IT+0x100>)
 801ed9e:	4293      	cmp	r3, r2
 801eda0:	d004      	beq.n	801edac <HAL_TIM_Base_Start_IT+0x94>
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	4a1d      	ldr	r2, [pc, #116]	; (801ee1c <HAL_TIM_Base_Start_IT+0x104>)
 801eda8:	4293      	cmp	r3, r2
 801edaa:	d115      	bne.n	801edd8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	689a      	ldr	r2, [r3, #8]
 801edb2:	4b1b      	ldr	r3, [pc, #108]	; (801ee20 <HAL_TIM_Base_Start_IT+0x108>)
 801edb4:	4013      	ands	r3, r2
 801edb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	2b06      	cmp	r3, #6
 801edbc:	d015      	beq.n	801edea <HAL_TIM_Base_Start_IT+0xd2>
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801edc4:	d011      	beq.n	801edea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	681a      	ldr	r2, [r3, #0]
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	f042 0201 	orr.w	r2, r2, #1
 801edd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801edd6:	e008      	b.n	801edea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	681a      	ldr	r2, [r3, #0]
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	f042 0201 	orr.w	r2, r2, #1
 801ede6:	601a      	str	r2, [r3, #0]
 801ede8:	e000      	b.n	801edec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801edea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801edec:	2300      	movs	r3, #0
}
 801edee:	4618      	mov	r0, r3
 801edf0:	3714      	adds	r7, #20
 801edf2:	46bd      	mov	sp, r7
 801edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edf8:	4770      	bx	lr
 801edfa:	bf00      	nop
 801edfc:	40010000 	.word	0x40010000
 801ee00:	40000400 	.word	0x40000400
 801ee04:	40000800 	.word	0x40000800
 801ee08:	40000c00 	.word	0x40000c00
 801ee0c:	40010400 	.word	0x40010400
 801ee10:	40001800 	.word	0x40001800
 801ee14:	40014000 	.word	0x40014000
 801ee18:	4000e000 	.word	0x4000e000
 801ee1c:	4000e400 	.word	0x4000e400
 801ee20:	00010007 	.word	0x00010007

0801ee24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801ee24:	b480      	push	{r7}
 801ee26:	b083      	sub	sp, #12
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	68da      	ldr	r2, [r3, #12]
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	f022 0201 	bic.w	r2, r2, #1
 801ee3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	6a1a      	ldr	r2, [r3, #32]
 801ee42:	f241 1311 	movw	r3, #4369	; 0x1111
 801ee46:	4013      	ands	r3, r2
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d10f      	bne.n	801ee6c <HAL_TIM_Base_Stop_IT+0x48>
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	6a1a      	ldr	r2, [r3, #32]
 801ee52:	f240 4344 	movw	r3, #1092	; 0x444
 801ee56:	4013      	ands	r3, r2
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d107      	bne.n	801ee6c <HAL_TIM_Base_Stop_IT+0x48>
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	681a      	ldr	r2, [r3, #0]
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	f022 0201 	bic.w	r2, r2, #1
 801ee6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	2201      	movs	r2, #1
 801ee70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801ee74:	2300      	movs	r3, #0
}
 801ee76:	4618      	mov	r0, r3
 801ee78:	370c      	adds	r7, #12
 801ee7a:	46bd      	mov	sp, r7
 801ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee80:	4770      	bx	lr

0801ee82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ee82:	b580      	push	{r7, lr}
 801ee84:	b082      	sub	sp, #8
 801ee86:	af00      	add	r7, sp, #0
 801ee88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	d101      	bne.n	801ee94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ee90:	2301      	movs	r3, #1
 801ee92:	e049      	b.n	801ef28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ee9a:	b2db      	uxtb	r3, r3
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	d106      	bne.n	801eeae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	2200      	movs	r2, #0
 801eea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801eea8:	6878      	ldr	r0, [r7, #4]
 801eeaa:	f000 f841 	bl	801ef30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	2202      	movs	r2, #2
 801eeb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681a      	ldr	r2, [r3, #0]
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	3304      	adds	r3, #4
 801eebe:	4619      	mov	r1, r3
 801eec0:	4610      	mov	r0, r2
 801eec2:	f000 ff45 	bl	801fd50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	2201      	movs	r2, #1
 801eeca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	2201      	movs	r2, #1
 801eed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	2201      	movs	r2, #1
 801eeda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	2201      	movs	r2, #1
 801eee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2201      	movs	r2, #1
 801eeea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	2201      	movs	r2, #1
 801eef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	2201      	movs	r2, #1
 801eefa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	2201      	movs	r2, #1
 801ef02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	2201      	movs	r2, #1
 801ef0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	2201      	movs	r2, #1
 801ef12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	2201      	movs	r2, #1
 801ef1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	2201      	movs	r2, #1
 801ef22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ef26:	2300      	movs	r3, #0
}
 801ef28:	4618      	mov	r0, r3
 801ef2a:	3708      	adds	r7, #8
 801ef2c:	46bd      	mov	sp, r7
 801ef2e:	bd80      	pop	{r7, pc}

0801ef30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ef30:	b480      	push	{r7}
 801ef32:	b083      	sub	sp, #12
 801ef34:	af00      	add	r7, sp, #0
 801ef36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ef38:	bf00      	nop
 801ef3a:	370c      	adds	r7, #12
 801ef3c:	46bd      	mov	sp, r7
 801ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef42:	4770      	bx	lr

0801ef44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ef44:	b580      	push	{r7, lr}
 801ef46:	b084      	sub	sp, #16
 801ef48:	af00      	add	r7, sp, #0
 801ef4a:	6078      	str	r0, [r7, #4]
 801ef4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ef4e:	683b      	ldr	r3, [r7, #0]
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d109      	bne.n	801ef68 <HAL_TIM_PWM_Start+0x24>
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ef5a:	b2db      	uxtb	r3, r3
 801ef5c:	2b01      	cmp	r3, #1
 801ef5e:	bf14      	ite	ne
 801ef60:	2301      	movne	r3, #1
 801ef62:	2300      	moveq	r3, #0
 801ef64:	b2db      	uxtb	r3, r3
 801ef66:	e03c      	b.n	801efe2 <HAL_TIM_PWM_Start+0x9e>
 801ef68:	683b      	ldr	r3, [r7, #0]
 801ef6a:	2b04      	cmp	r3, #4
 801ef6c:	d109      	bne.n	801ef82 <HAL_TIM_PWM_Start+0x3e>
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ef74:	b2db      	uxtb	r3, r3
 801ef76:	2b01      	cmp	r3, #1
 801ef78:	bf14      	ite	ne
 801ef7a:	2301      	movne	r3, #1
 801ef7c:	2300      	moveq	r3, #0
 801ef7e:	b2db      	uxtb	r3, r3
 801ef80:	e02f      	b.n	801efe2 <HAL_TIM_PWM_Start+0x9e>
 801ef82:	683b      	ldr	r3, [r7, #0]
 801ef84:	2b08      	cmp	r3, #8
 801ef86:	d109      	bne.n	801ef9c <HAL_TIM_PWM_Start+0x58>
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ef8e:	b2db      	uxtb	r3, r3
 801ef90:	2b01      	cmp	r3, #1
 801ef92:	bf14      	ite	ne
 801ef94:	2301      	movne	r3, #1
 801ef96:	2300      	moveq	r3, #0
 801ef98:	b2db      	uxtb	r3, r3
 801ef9a:	e022      	b.n	801efe2 <HAL_TIM_PWM_Start+0x9e>
 801ef9c:	683b      	ldr	r3, [r7, #0]
 801ef9e:	2b0c      	cmp	r3, #12
 801efa0:	d109      	bne.n	801efb6 <HAL_TIM_PWM_Start+0x72>
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801efa8:	b2db      	uxtb	r3, r3
 801efaa:	2b01      	cmp	r3, #1
 801efac:	bf14      	ite	ne
 801efae:	2301      	movne	r3, #1
 801efb0:	2300      	moveq	r3, #0
 801efb2:	b2db      	uxtb	r3, r3
 801efb4:	e015      	b.n	801efe2 <HAL_TIM_PWM_Start+0x9e>
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	2b10      	cmp	r3, #16
 801efba:	d109      	bne.n	801efd0 <HAL_TIM_PWM_Start+0x8c>
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801efc2:	b2db      	uxtb	r3, r3
 801efc4:	2b01      	cmp	r3, #1
 801efc6:	bf14      	ite	ne
 801efc8:	2301      	movne	r3, #1
 801efca:	2300      	moveq	r3, #0
 801efcc:	b2db      	uxtb	r3, r3
 801efce:	e008      	b.n	801efe2 <HAL_TIM_PWM_Start+0x9e>
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801efd6:	b2db      	uxtb	r3, r3
 801efd8:	2b01      	cmp	r3, #1
 801efda:	bf14      	ite	ne
 801efdc:	2301      	movne	r3, #1
 801efde:	2300      	moveq	r3, #0
 801efe0:	b2db      	uxtb	r3, r3
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d001      	beq.n	801efea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801efe6:	2301      	movs	r3, #1
 801efe8:	e0ab      	b.n	801f142 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	2b00      	cmp	r3, #0
 801efee:	d104      	bne.n	801effa <HAL_TIM_PWM_Start+0xb6>
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	2202      	movs	r2, #2
 801eff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eff8:	e023      	b.n	801f042 <HAL_TIM_PWM_Start+0xfe>
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	2b04      	cmp	r3, #4
 801effe:	d104      	bne.n	801f00a <HAL_TIM_PWM_Start+0xc6>
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	2202      	movs	r2, #2
 801f004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f008:	e01b      	b.n	801f042 <HAL_TIM_PWM_Start+0xfe>
 801f00a:	683b      	ldr	r3, [r7, #0]
 801f00c:	2b08      	cmp	r3, #8
 801f00e:	d104      	bne.n	801f01a <HAL_TIM_PWM_Start+0xd6>
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	2202      	movs	r2, #2
 801f014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f018:	e013      	b.n	801f042 <HAL_TIM_PWM_Start+0xfe>
 801f01a:	683b      	ldr	r3, [r7, #0]
 801f01c:	2b0c      	cmp	r3, #12
 801f01e:	d104      	bne.n	801f02a <HAL_TIM_PWM_Start+0xe6>
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2202      	movs	r2, #2
 801f024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f028:	e00b      	b.n	801f042 <HAL_TIM_PWM_Start+0xfe>
 801f02a:	683b      	ldr	r3, [r7, #0]
 801f02c:	2b10      	cmp	r3, #16
 801f02e:	d104      	bne.n	801f03a <HAL_TIM_PWM_Start+0xf6>
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	2202      	movs	r2, #2
 801f034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f038:	e003      	b.n	801f042 <HAL_TIM_PWM_Start+0xfe>
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	2202      	movs	r2, #2
 801f03e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	2201      	movs	r2, #1
 801f048:	6839      	ldr	r1, [r7, #0]
 801f04a:	4618      	mov	r0, r3
 801f04c:	f001 fbd0 	bl	80207f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	4a3d      	ldr	r2, [pc, #244]	; (801f14c <HAL_TIM_PWM_Start+0x208>)
 801f056:	4293      	cmp	r3, r2
 801f058:	d013      	beq.n	801f082 <HAL_TIM_PWM_Start+0x13e>
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	4a3c      	ldr	r2, [pc, #240]	; (801f150 <HAL_TIM_PWM_Start+0x20c>)
 801f060:	4293      	cmp	r3, r2
 801f062:	d00e      	beq.n	801f082 <HAL_TIM_PWM_Start+0x13e>
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	4a3a      	ldr	r2, [pc, #232]	; (801f154 <HAL_TIM_PWM_Start+0x210>)
 801f06a:	4293      	cmp	r3, r2
 801f06c:	d009      	beq.n	801f082 <HAL_TIM_PWM_Start+0x13e>
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	4a39      	ldr	r2, [pc, #228]	; (801f158 <HAL_TIM_PWM_Start+0x214>)
 801f074:	4293      	cmp	r3, r2
 801f076:	d004      	beq.n	801f082 <HAL_TIM_PWM_Start+0x13e>
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	4a37      	ldr	r2, [pc, #220]	; (801f15c <HAL_TIM_PWM_Start+0x218>)
 801f07e:	4293      	cmp	r3, r2
 801f080:	d101      	bne.n	801f086 <HAL_TIM_PWM_Start+0x142>
 801f082:	2301      	movs	r3, #1
 801f084:	e000      	b.n	801f088 <HAL_TIM_PWM_Start+0x144>
 801f086:	2300      	movs	r3, #0
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d007      	beq.n	801f09c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801f09a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	681b      	ldr	r3, [r3, #0]
 801f0a0:	4a2a      	ldr	r2, [pc, #168]	; (801f14c <HAL_TIM_PWM_Start+0x208>)
 801f0a2:	4293      	cmp	r3, r2
 801f0a4:	d02c      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f0ae:	d027      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	4a2a      	ldr	r2, [pc, #168]	; (801f160 <HAL_TIM_PWM_Start+0x21c>)
 801f0b6:	4293      	cmp	r3, r2
 801f0b8:	d022      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	4a29      	ldr	r2, [pc, #164]	; (801f164 <HAL_TIM_PWM_Start+0x220>)
 801f0c0:	4293      	cmp	r3, r2
 801f0c2:	d01d      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	4a27      	ldr	r2, [pc, #156]	; (801f168 <HAL_TIM_PWM_Start+0x224>)
 801f0ca:	4293      	cmp	r3, r2
 801f0cc:	d018      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	4a1f      	ldr	r2, [pc, #124]	; (801f150 <HAL_TIM_PWM_Start+0x20c>)
 801f0d4:	4293      	cmp	r3, r2
 801f0d6:	d013      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	4a23      	ldr	r2, [pc, #140]	; (801f16c <HAL_TIM_PWM_Start+0x228>)
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	d00e      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	4a1b      	ldr	r2, [pc, #108]	; (801f154 <HAL_TIM_PWM_Start+0x210>)
 801f0e8:	4293      	cmp	r3, r2
 801f0ea:	d009      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	4a1f      	ldr	r2, [pc, #124]	; (801f170 <HAL_TIM_PWM_Start+0x22c>)
 801f0f2:	4293      	cmp	r3, r2
 801f0f4:	d004      	beq.n	801f100 <HAL_TIM_PWM_Start+0x1bc>
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	4a1e      	ldr	r2, [pc, #120]	; (801f174 <HAL_TIM_PWM_Start+0x230>)
 801f0fc:	4293      	cmp	r3, r2
 801f0fe:	d115      	bne.n	801f12c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	689a      	ldr	r2, [r3, #8]
 801f106:	4b1c      	ldr	r3, [pc, #112]	; (801f178 <HAL_TIM_PWM_Start+0x234>)
 801f108:	4013      	ands	r3, r2
 801f10a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	2b06      	cmp	r3, #6
 801f110:	d015      	beq.n	801f13e <HAL_TIM_PWM_Start+0x1fa>
 801f112:	68fb      	ldr	r3, [r7, #12]
 801f114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f118:	d011      	beq.n	801f13e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	681a      	ldr	r2, [r3, #0]
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	f042 0201 	orr.w	r2, r2, #1
 801f128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f12a:	e008      	b.n	801f13e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	681a      	ldr	r2, [r3, #0]
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	f042 0201 	orr.w	r2, r2, #1
 801f13a:	601a      	str	r2, [r3, #0]
 801f13c:	e000      	b.n	801f140 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f13e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f140:	2300      	movs	r3, #0
}
 801f142:	4618      	mov	r0, r3
 801f144:	3710      	adds	r7, #16
 801f146:	46bd      	mov	sp, r7
 801f148:	bd80      	pop	{r7, pc}
 801f14a:	bf00      	nop
 801f14c:	40010000 	.word	0x40010000
 801f150:	40010400 	.word	0x40010400
 801f154:	40014000 	.word	0x40014000
 801f158:	40014400 	.word	0x40014400
 801f15c:	40014800 	.word	0x40014800
 801f160:	40000400 	.word	0x40000400
 801f164:	40000800 	.word	0x40000800
 801f168:	40000c00 	.word	0x40000c00
 801f16c:	40001800 	.word	0x40001800
 801f170:	4000e000 	.word	0x4000e000
 801f174:	4000e400 	.word	0x4000e400
 801f178:	00010007 	.word	0x00010007

0801f17c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b082      	sub	sp, #8
 801f180:	af00      	add	r7, sp, #0
 801f182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	2b00      	cmp	r3, #0
 801f188:	d101      	bne.n	801f18e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801f18a:	2301      	movs	r3, #1
 801f18c:	e049      	b.n	801f222 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f194:	b2db      	uxtb	r3, r3
 801f196:	2b00      	cmp	r3, #0
 801f198:	d106      	bne.n	801f1a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	2200      	movs	r2, #0
 801f19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801f1a2:	6878      	ldr	r0, [r7, #4]
 801f1a4:	f000 f841 	bl	801f22a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	2202      	movs	r2, #2
 801f1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	681a      	ldr	r2, [r3, #0]
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	3304      	adds	r3, #4
 801f1b8:	4619      	mov	r1, r3
 801f1ba:	4610      	mov	r0, r2
 801f1bc:	f000 fdc8 	bl	801fd50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	2201      	movs	r2, #1
 801f1c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	2201      	movs	r2, #1
 801f1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	2201      	movs	r2, #1
 801f1d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	2201      	movs	r2, #1
 801f1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	2201      	movs	r2, #1
 801f1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	2201      	movs	r2, #1
 801f1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	2201      	movs	r2, #1
 801f1f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	2201      	movs	r2, #1
 801f1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	2201      	movs	r2, #1
 801f204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	2201      	movs	r2, #1
 801f20c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2201      	movs	r2, #1
 801f214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	2201      	movs	r2, #1
 801f21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f220:	2300      	movs	r3, #0
}
 801f222:	4618      	mov	r0, r3
 801f224:	3708      	adds	r7, #8
 801f226:	46bd      	mov	sp, r7
 801f228:	bd80      	pop	{r7, pc}

0801f22a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801f22a:	b480      	push	{r7}
 801f22c:	b083      	sub	sp, #12
 801f22e:	af00      	add	r7, sp, #0
 801f230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801f232:	bf00      	nop
 801f234:	370c      	adds	r7, #12
 801f236:	46bd      	mov	sp, r7
 801f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f23c:	4770      	bx	lr
	...

0801f240 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f240:	b580      	push	{r7, lr}
 801f242:	b084      	sub	sp, #16
 801f244:	af00      	add	r7, sp, #0
 801f246:	6078      	str	r0, [r7, #4]
 801f248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f24a:	2300      	movs	r3, #0
 801f24c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801f24e:	683b      	ldr	r3, [r7, #0]
 801f250:	2b00      	cmp	r3, #0
 801f252:	d104      	bne.n	801f25e <HAL_TIM_IC_Start_IT+0x1e>
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f25a:	b2db      	uxtb	r3, r3
 801f25c:	e023      	b.n	801f2a6 <HAL_TIM_IC_Start_IT+0x66>
 801f25e:	683b      	ldr	r3, [r7, #0]
 801f260:	2b04      	cmp	r3, #4
 801f262:	d104      	bne.n	801f26e <HAL_TIM_IC_Start_IT+0x2e>
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f26a:	b2db      	uxtb	r3, r3
 801f26c:	e01b      	b.n	801f2a6 <HAL_TIM_IC_Start_IT+0x66>
 801f26e:	683b      	ldr	r3, [r7, #0]
 801f270:	2b08      	cmp	r3, #8
 801f272:	d104      	bne.n	801f27e <HAL_TIM_IC_Start_IT+0x3e>
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f27a:	b2db      	uxtb	r3, r3
 801f27c:	e013      	b.n	801f2a6 <HAL_TIM_IC_Start_IT+0x66>
 801f27e:	683b      	ldr	r3, [r7, #0]
 801f280:	2b0c      	cmp	r3, #12
 801f282:	d104      	bne.n	801f28e <HAL_TIM_IC_Start_IT+0x4e>
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f28a:	b2db      	uxtb	r3, r3
 801f28c:	e00b      	b.n	801f2a6 <HAL_TIM_IC_Start_IT+0x66>
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	2b10      	cmp	r3, #16
 801f292:	d104      	bne.n	801f29e <HAL_TIM_IC_Start_IT+0x5e>
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f29a:	b2db      	uxtb	r3, r3
 801f29c:	e003      	b.n	801f2a6 <HAL_TIM_IC_Start_IT+0x66>
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801f2a4:	b2db      	uxtb	r3, r3
 801f2a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d104      	bne.n	801f2b8 <HAL_TIM_IC_Start_IT+0x78>
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f2b4:	b2db      	uxtb	r3, r3
 801f2b6:	e013      	b.n	801f2e0 <HAL_TIM_IC_Start_IT+0xa0>
 801f2b8:	683b      	ldr	r3, [r7, #0]
 801f2ba:	2b04      	cmp	r3, #4
 801f2bc:	d104      	bne.n	801f2c8 <HAL_TIM_IC_Start_IT+0x88>
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f2c4:	b2db      	uxtb	r3, r3
 801f2c6:	e00b      	b.n	801f2e0 <HAL_TIM_IC_Start_IT+0xa0>
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	2b08      	cmp	r3, #8
 801f2cc:	d104      	bne.n	801f2d8 <HAL_TIM_IC_Start_IT+0x98>
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801f2d4:	b2db      	uxtb	r3, r3
 801f2d6:	e003      	b.n	801f2e0 <HAL_TIM_IC_Start_IT+0xa0>
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801f2de:	b2db      	uxtb	r3, r3
 801f2e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801f2e2:	7bbb      	ldrb	r3, [r7, #14]
 801f2e4:	2b01      	cmp	r3, #1
 801f2e6:	d102      	bne.n	801f2ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801f2e8:	7b7b      	ldrb	r3, [r7, #13]
 801f2ea:	2b01      	cmp	r3, #1
 801f2ec:	d001      	beq.n	801f2f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801f2ee:	2301      	movs	r3, #1
 801f2f0:	e0ec      	b.n	801f4cc <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f2f2:	683b      	ldr	r3, [r7, #0]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d104      	bne.n	801f302 <HAL_TIM_IC_Start_IT+0xc2>
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	2202      	movs	r2, #2
 801f2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f300:	e023      	b.n	801f34a <HAL_TIM_IC_Start_IT+0x10a>
 801f302:	683b      	ldr	r3, [r7, #0]
 801f304:	2b04      	cmp	r3, #4
 801f306:	d104      	bne.n	801f312 <HAL_TIM_IC_Start_IT+0xd2>
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	2202      	movs	r2, #2
 801f30c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f310:	e01b      	b.n	801f34a <HAL_TIM_IC_Start_IT+0x10a>
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	2b08      	cmp	r3, #8
 801f316:	d104      	bne.n	801f322 <HAL_TIM_IC_Start_IT+0xe2>
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	2202      	movs	r2, #2
 801f31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f320:	e013      	b.n	801f34a <HAL_TIM_IC_Start_IT+0x10a>
 801f322:	683b      	ldr	r3, [r7, #0]
 801f324:	2b0c      	cmp	r3, #12
 801f326:	d104      	bne.n	801f332 <HAL_TIM_IC_Start_IT+0xf2>
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	2202      	movs	r2, #2
 801f32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f330:	e00b      	b.n	801f34a <HAL_TIM_IC_Start_IT+0x10a>
 801f332:	683b      	ldr	r3, [r7, #0]
 801f334:	2b10      	cmp	r3, #16
 801f336:	d104      	bne.n	801f342 <HAL_TIM_IC_Start_IT+0x102>
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	2202      	movs	r2, #2
 801f33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f340:	e003      	b.n	801f34a <HAL_TIM_IC_Start_IT+0x10a>
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	2202      	movs	r2, #2
 801f346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f34a:	683b      	ldr	r3, [r7, #0]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d104      	bne.n	801f35a <HAL_TIM_IC_Start_IT+0x11a>
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	2202      	movs	r2, #2
 801f354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f358:	e013      	b.n	801f382 <HAL_TIM_IC_Start_IT+0x142>
 801f35a:	683b      	ldr	r3, [r7, #0]
 801f35c:	2b04      	cmp	r3, #4
 801f35e:	d104      	bne.n	801f36a <HAL_TIM_IC_Start_IT+0x12a>
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	2202      	movs	r2, #2
 801f364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f368:	e00b      	b.n	801f382 <HAL_TIM_IC_Start_IT+0x142>
 801f36a:	683b      	ldr	r3, [r7, #0]
 801f36c:	2b08      	cmp	r3, #8
 801f36e:	d104      	bne.n	801f37a <HAL_TIM_IC_Start_IT+0x13a>
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	2202      	movs	r2, #2
 801f374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f378:	e003      	b.n	801f382 <HAL_TIM_IC_Start_IT+0x142>
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	2202      	movs	r2, #2
 801f37e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	2b0c      	cmp	r3, #12
 801f386:	d841      	bhi.n	801f40c <HAL_TIM_IC_Start_IT+0x1cc>
 801f388:	a201      	add	r2, pc, #4	; (adr r2, 801f390 <HAL_TIM_IC_Start_IT+0x150>)
 801f38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f38e:	bf00      	nop
 801f390:	0801f3c5 	.word	0x0801f3c5
 801f394:	0801f40d 	.word	0x0801f40d
 801f398:	0801f40d 	.word	0x0801f40d
 801f39c:	0801f40d 	.word	0x0801f40d
 801f3a0:	0801f3d7 	.word	0x0801f3d7
 801f3a4:	0801f40d 	.word	0x0801f40d
 801f3a8:	0801f40d 	.word	0x0801f40d
 801f3ac:	0801f40d 	.word	0x0801f40d
 801f3b0:	0801f3e9 	.word	0x0801f3e9
 801f3b4:	0801f40d 	.word	0x0801f40d
 801f3b8:	0801f40d 	.word	0x0801f40d
 801f3bc:	0801f40d 	.word	0x0801f40d
 801f3c0:	0801f3fb 	.word	0x0801f3fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	68da      	ldr	r2, [r3, #12]
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	f042 0202 	orr.w	r2, r2, #2
 801f3d2:	60da      	str	r2, [r3, #12]
      break;
 801f3d4:	e01d      	b.n	801f412 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	68da      	ldr	r2, [r3, #12]
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	681b      	ldr	r3, [r3, #0]
 801f3e0:	f042 0204 	orr.w	r2, r2, #4
 801f3e4:	60da      	str	r2, [r3, #12]
      break;
 801f3e6:	e014      	b.n	801f412 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	68da      	ldr	r2, [r3, #12]
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	f042 0208 	orr.w	r2, r2, #8
 801f3f6:	60da      	str	r2, [r3, #12]
      break;
 801f3f8:	e00b      	b.n	801f412 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801f3fa:	687b      	ldr	r3, [r7, #4]
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	68da      	ldr	r2, [r3, #12]
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	f042 0210 	orr.w	r2, r2, #16
 801f408:	60da      	str	r2, [r3, #12]
      break;
 801f40a:	e002      	b.n	801f412 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801f40c:	2301      	movs	r3, #1
 801f40e:	73fb      	strb	r3, [r7, #15]
      break;
 801f410:	bf00      	nop
  }

  if (status == HAL_OK)
 801f412:	7bfb      	ldrb	r3, [r7, #15]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d158      	bne.n	801f4ca <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	2201      	movs	r2, #1
 801f41e:	6839      	ldr	r1, [r7, #0]
 801f420:	4618      	mov	r0, r3
 801f422:	f001 f9e5 	bl	80207f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	4a2a      	ldr	r2, [pc, #168]	; (801f4d4 <HAL_TIM_IC_Start_IT+0x294>)
 801f42c:	4293      	cmp	r3, r2
 801f42e:	d02c      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f438:	d027      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	4a26      	ldr	r2, [pc, #152]	; (801f4d8 <HAL_TIM_IC_Start_IT+0x298>)
 801f440:	4293      	cmp	r3, r2
 801f442:	d022      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	4a24      	ldr	r2, [pc, #144]	; (801f4dc <HAL_TIM_IC_Start_IT+0x29c>)
 801f44a:	4293      	cmp	r3, r2
 801f44c:	d01d      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	4a23      	ldr	r2, [pc, #140]	; (801f4e0 <HAL_TIM_IC_Start_IT+0x2a0>)
 801f454:	4293      	cmp	r3, r2
 801f456:	d018      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	4a21      	ldr	r2, [pc, #132]	; (801f4e4 <HAL_TIM_IC_Start_IT+0x2a4>)
 801f45e:	4293      	cmp	r3, r2
 801f460:	d013      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f462:	687b      	ldr	r3, [r7, #4]
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	4a20      	ldr	r2, [pc, #128]	; (801f4e8 <HAL_TIM_IC_Start_IT+0x2a8>)
 801f468:	4293      	cmp	r3, r2
 801f46a:	d00e      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	681b      	ldr	r3, [r3, #0]
 801f470:	4a1e      	ldr	r2, [pc, #120]	; (801f4ec <HAL_TIM_IC_Start_IT+0x2ac>)
 801f472:	4293      	cmp	r3, r2
 801f474:	d009      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	4a1d      	ldr	r2, [pc, #116]	; (801f4f0 <HAL_TIM_IC_Start_IT+0x2b0>)
 801f47c:	4293      	cmp	r3, r2
 801f47e:	d004      	beq.n	801f48a <HAL_TIM_IC_Start_IT+0x24a>
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	4a1b      	ldr	r2, [pc, #108]	; (801f4f4 <HAL_TIM_IC_Start_IT+0x2b4>)
 801f486:	4293      	cmp	r3, r2
 801f488:	d115      	bne.n	801f4b6 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	689a      	ldr	r2, [r3, #8]
 801f490:	4b19      	ldr	r3, [pc, #100]	; (801f4f8 <HAL_TIM_IC_Start_IT+0x2b8>)
 801f492:	4013      	ands	r3, r2
 801f494:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f496:	68bb      	ldr	r3, [r7, #8]
 801f498:	2b06      	cmp	r3, #6
 801f49a:	d015      	beq.n	801f4c8 <HAL_TIM_IC_Start_IT+0x288>
 801f49c:	68bb      	ldr	r3, [r7, #8]
 801f49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f4a2:	d011      	beq.n	801f4c8 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	681a      	ldr	r2, [r3, #0]
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	f042 0201 	orr.w	r2, r2, #1
 801f4b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f4b4:	e008      	b.n	801f4c8 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	681a      	ldr	r2, [r3, #0]
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	f042 0201 	orr.w	r2, r2, #1
 801f4c4:	601a      	str	r2, [r3, #0]
 801f4c6:	e000      	b.n	801f4ca <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f4c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801f4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	3710      	adds	r7, #16
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	bd80      	pop	{r7, pc}
 801f4d4:	40010000 	.word	0x40010000
 801f4d8:	40000400 	.word	0x40000400
 801f4dc:	40000800 	.word	0x40000800
 801f4e0:	40000c00 	.word	0x40000c00
 801f4e4:	40010400 	.word	0x40010400
 801f4e8:	40001800 	.word	0x40001800
 801f4ec:	40014000 	.word	0x40014000
 801f4f0:	4000e000 	.word	0x4000e000
 801f4f4:	4000e400 	.word	0x4000e400
 801f4f8:	00010007 	.word	0x00010007

0801f4fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b082      	sub	sp, #8
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	691b      	ldr	r3, [r3, #16]
 801f50a:	f003 0302 	and.w	r3, r3, #2
 801f50e:	2b02      	cmp	r3, #2
 801f510:	d122      	bne.n	801f558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	68db      	ldr	r3, [r3, #12]
 801f518:	f003 0302 	and.w	r3, r3, #2
 801f51c:	2b02      	cmp	r3, #2
 801f51e:	d11b      	bne.n	801f558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	f06f 0202 	mvn.w	r2, #2
 801f528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	2201      	movs	r2, #1
 801f52e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	699b      	ldr	r3, [r3, #24]
 801f536:	f003 0303 	and.w	r3, r3, #3
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d003      	beq.n	801f546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f53e:	6878      	ldr	r0, [r7, #4]
 801f540:	f7ee ff4e 	bl	800e3e0 <HAL_TIM_IC_CaptureCallback>
 801f544:	e005      	b.n	801f552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f546:	6878      	ldr	r0, [r7, #4]
 801f548:	f000 fbe4 	bl	801fd14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f54c:	6878      	ldr	r0, [r7, #4]
 801f54e:	f000 fbeb 	bl	801fd28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	2200      	movs	r2, #0
 801f556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	691b      	ldr	r3, [r3, #16]
 801f55e:	f003 0304 	and.w	r3, r3, #4
 801f562:	2b04      	cmp	r3, #4
 801f564:	d122      	bne.n	801f5ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	68db      	ldr	r3, [r3, #12]
 801f56c:	f003 0304 	and.w	r3, r3, #4
 801f570:	2b04      	cmp	r3, #4
 801f572:	d11b      	bne.n	801f5ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	f06f 0204 	mvn.w	r2, #4
 801f57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	2202      	movs	r2, #2
 801f582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	699b      	ldr	r3, [r3, #24]
 801f58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d003      	beq.n	801f59a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f592:	6878      	ldr	r0, [r7, #4]
 801f594:	f7ee ff24 	bl	800e3e0 <HAL_TIM_IC_CaptureCallback>
 801f598:	e005      	b.n	801f5a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f59a:	6878      	ldr	r0, [r7, #4]
 801f59c:	f000 fbba 	bl	801fd14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f5a0:	6878      	ldr	r0, [r7, #4]
 801f5a2:	f000 fbc1 	bl	801fd28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	2200      	movs	r2, #0
 801f5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	691b      	ldr	r3, [r3, #16]
 801f5b2:	f003 0308 	and.w	r3, r3, #8
 801f5b6:	2b08      	cmp	r3, #8
 801f5b8:	d122      	bne.n	801f600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	68db      	ldr	r3, [r3, #12]
 801f5c0:	f003 0308 	and.w	r3, r3, #8
 801f5c4:	2b08      	cmp	r3, #8
 801f5c6:	d11b      	bne.n	801f600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	f06f 0208 	mvn.w	r2, #8
 801f5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	2204      	movs	r2, #4
 801f5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	69db      	ldr	r3, [r3, #28]
 801f5de:	f003 0303 	and.w	r3, r3, #3
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d003      	beq.n	801f5ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f5e6:	6878      	ldr	r0, [r7, #4]
 801f5e8:	f7ee fefa 	bl	800e3e0 <HAL_TIM_IC_CaptureCallback>
 801f5ec:	e005      	b.n	801f5fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f5ee:	6878      	ldr	r0, [r7, #4]
 801f5f0:	f000 fb90 	bl	801fd14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f5f4:	6878      	ldr	r0, [r7, #4]
 801f5f6:	f000 fb97 	bl	801fd28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	691b      	ldr	r3, [r3, #16]
 801f606:	f003 0310 	and.w	r3, r3, #16
 801f60a:	2b10      	cmp	r3, #16
 801f60c:	d122      	bne.n	801f654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	68db      	ldr	r3, [r3, #12]
 801f614:	f003 0310 	and.w	r3, r3, #16
 801f618:	2b10      	cmp	r3, #16
 801f61a:	d11b      	bne.n	801f654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	f06f 0210 	mvn.w	r2, #16
 801f624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	2208      	movs	r2, #8
 801f62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	69db      	ldr	r3, [r3, #28]
 801f632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f636:	2b00      	cmp	r3, #0
 801f638:	d003      	beq.n	801f642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f7ee fed0 	bl	800e3e0 <HAL_TIM_IC_CaptureCallback>
 801f640:	e005      	b.n	801f64e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f000 fb66 	bl	801fd14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f648:	6878      	ldr	r0, [r7, #4]
 801f64a:	f000 fb6d 	bl	801fd28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	2200      	movs	r2, #0
 801f652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	691b      	ldr	r3, [r3, #16]
 801f65a:	f003 0301 	and.w	r3, r3, #1
 801f65e:	2b01      	cmp	r3, #1
 801f660:	d10e      	bne.n	801f680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	68db      	ldr	r3, [r3, #12]
 801f668:	f003 0301 	and.w	r3, r3, #1
 801f66c:	2b01      	cmp	r3, #1
 801f66e:	d107      	bne.n	801f680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	f06f 0201 	mvn.w	r2, #1
 801f678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f67a:	6878      	ldr	r0, [r7, #4]
 801f67c:	f7ee fec5 	bl	800e40a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	691b      	ldr	r3, [r3, #16]
 801f686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f68a:	2b80      	cmp	r3, #128	; 0x80
 801f68c:	d10e      	bne.n	801f6ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	68db      	ldr	r3, [r3, #12]
 801f694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f698:	2b80      	cmp	r3, #128	; 0x80
 801f69a:	d107      	bne.n	801f6ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f6a6:	6878      	ldr	r0, [r7, #4]
 801f6a8:	f001 fa0e 	bl	8020ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	691b      	ldr	r3, [r3, #16]
 801f6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f6ba:	d10e      	bne.n	801f6da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	68db      	ldr	r3, [r3, #12]
 801f6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f6c6:	2b80      	cmp	r3, #128	; 0x80
 801f6c8:	d107      	bne.n	801f6da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f6d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f6d4:	6878      	ldr	r0, [r7, #4]
 801f6d6:	f001 fa01 	bl	8020adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	691b      	ldr	r3, [r3, #16]
 801f6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6e4:	2b40      	cmp	r3, #64	; 0x40
 801f6e6:	d10e      	bne.n	801f706 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	68db      	ldr	r3, [r3, #12]
 801f6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6f2:	2b40      	cmp	r3, #64	; 0x40
 801f6f4:	d107      	bne.n	801f706 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f700:	6878      	ldr	r0, [r7, #4]
 801f702:	f000 fb1b 	bl	801fd3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	691b      	ldr	r3, [r3, #16]
 801f70c:	f003 0320 	and.w	r3, r3, #32
 801f710:	2b20      	cmp	r3, #32
 801f712:	d10e      	bne.n	801f732 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	681b      	ldr	r3, [r3, #0]
 801f718:	68db      	ldr	r3, [r3, #12]
 801f71a:	f003 0320 	and.w	r3, r3, #32
 801f71e:	2b20      	cmp	r3, #32
 801f720:	d107      	bne.n	801f732 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	681b      	ldr	r3, [r3, #0]
 801f726:	f06f 0220 	mvn.w	r2, #32
 801f72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f72c:	6878      	ldr	r0, [r7, #4]
 801f72e:	f001 f9c1 	bl	8020ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f732:	bf00      	nop
 801f734:	3708      	adds	r7, #8
 801f736:	46bd      	mov	sp, r7
 801f738:	bd80      	pop	{r7, pc}

0801f73a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f73a:	b580      	push	{r7, lr}
 801f73c:	b086      	sub	sp, #24
 801f73e:	af00      	add	r7, sp, #0
 801f740:	60f8      	str	r0, [r7, #12]
 801f742:	60b9      	str	r1, [r7, #8]
 801f744:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f746:	2300      	movs	r3, #0
 801f748:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f750:	2b01      	cmp	r3, #1
 801f752:	d101      	bne.n	801f758 <HAL_TIM_IC_ConfigChannel+0x1e>
 801f754:	2302      	movs	r3, #2
 801f756:	e088      	b.n	801f86a <HAL_TIM_IC_ConfigChannel+0x130>
 801f758:	68fb      	ldr	r3, [r7, #12]
 801f75a:	2201      	movs	r2, #1
 801f75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	2b00      	cmp	r3, #0
 801f764:	d11b      	bne.n	801f79e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	6818      	ldr	r0, [r3, #0]
 801f76a:	68bb      	ldr	r3, [r7, #8]
 801f76c:	6819      	ldr	r1, [r3, #0]
 801f76e:	68bb      	ldr	r3, [r7, #8]
 801f770:	685a      	ldr	r2, [r3, #4]
 801f772:	68bb      	ldr	r3, [r7, #8]
 801f774:	68db      	ldr	r3, [r3, #12]
 801f776:	f000 fe67 	bl	8020448 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f77a:	68fb      	ldr	r3, [r7, #12]
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	699a      	ldr	r2, [r3, #24]
 801f780:	68fb      	ldr	r3, [r7, #12]
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	f022 020c 	bic.w	r2, r2, #12
 801f788:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	6999      	ldr	r1, [r3, #24]
 801f790:	68bb      	ldr	r3, [r7, #8]
 801f792:	689a      	ldr	r2, [r3, #8]
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	430a      	orrs	r2, r1
 801f79a:	619a      	str	r2, [r3, #24]
 801f79c:	e060      	b.n	801f860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	2b04      	cmp	r3, #4
 801f7a2:	d11c      	bne.n	801f7de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	6818      	ldr	r0, [r3, #0]
 801f7a8:	68bb      	ldr	r3, [r7, #8]
 801f7aa:	6819      	ldr	r1, [r3, #0]
 801f7ac:	68bb      	ldr	r3, [r7, #8]
 801f7ae:	685a      	ldr	r2, [r3, #4]
 801f7b0:	68bb      	ldr	r3, [r7, #8]
 801f7b2:	68db      	ldr	r3, [r3, #12]
 801f7b4:	f000 fef7 	bl	80205a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	699a      	ldr	r2, [r3, #24]
 801f7be:	68fb      	ldr	r3, [r7, #12]
 801f7c0:	681b      	ldr	r3, [r3, #0]
 801f7c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f7c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	6999      	ldr	r1, [r3, #24]
 801f7ce:	68bb      	ldr	r3, [r7, #8]
 801f7d0:	689b      	ldr	r3, [r3, #8]
 801f7d2:	021a      	lsls	r2, r3, #8
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	430a      	orrs	r2, r1
 801f7da:	619a      	str	r2, [r3, #24]
 801f7dc:	e040      	b.n	801f860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2b08      	cmp	r3, #8
 801f7e2:	d11b      	bne.n	801f81c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	6818      	ldr	r0, [r3, #0]
 801f7e8:	68bb      	ldr	r3, [r7, #8]
 801f7ea:	6819      	ldr	r1, [r3, #0]
 801f7ec:	68bb      	ldr	r3, [r7, #8]
 801f7ee:	685a      	ldr	r2, [r3, #4]
 801f7f0:	68bb      	ldr	r3, [r7, #8]
 801f7f2:	68db      	ldr	r3, [r3, #12]
 801f7f4:	f000 ff44 	bl	8020680 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f7f8:	68fb      	ldr	r3, [r7, #12]
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	69da      	ldr	r2, [r3, #28]
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	f022 020c 	bic.w	r2, r2, #12
 801f806:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	69d9      	ldr	r1, [r3, #28]
 801f80e:	68bb      	ldr	r3, [r7, #8]
 801f810:	689a      	ldr	r2, [r3, #8]
 801f812:	68fb      	ldr	r3, [r7, #12]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	430a      	orrs	r2, r1
 801f818:	61da      	str	r2, [r3, #28]
 801f81a:	e021      	b.n	801f860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	2b0c      	cmp	r3, #12
 801f820:	d11c      	bne.n	801f85c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	6818      	ldr	r0, [r3, #0]
 801f826:	68bb      	ldr	r3, [r7, #8]
 801f828:	6819      	ldr	r1, [r3, #0]
 801f82a:	68bb      	ldr	r3, [r7, #8]
 801f82c:	685a      	ldr	r2, [r3, #4]
 801f82e:	68bb      	ldr	r3, [r7, #8]
 801f830:	68db      	ldr	r3, [r3, #12]
 801f832:	f000 ff61 	bl	80206f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f836:	68fb      	ldr	r3, [r7, #12]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	69da      	ldr	r2, [r3, #28]
 801f83c:	68fb      	ldr	r3, [r7, #12]
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f844:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	69d9      	ldr	r1, [r3, #28]
 801f84c:	68bb      	ldr	r3, [r7, #8]
 801f84e:	689b      	ldr	r3, [r3, #8]
 801f850:	021a      	lsls	r2, r3, #8
 801f852:	68fb      	ldr	r3, [r7, #12]
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	430a      	orrs	r2, r1
 801f858:	61da      	str	r2, [r3, #28]
 801f85a:	e001      	b.n	801f860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f85c:	2301      	movs	r3, #1
 801f85e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	2200      	movs	r2, #0
 801f864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f868:	7dfb      	ldrb	r3, [r7, #23]
}
 801f86a:	4618      	mov	r0, r3
 801f86c:	3718      	adds	r7, #24
 801f86e:	46bd      	mov	sp, r7
 801f870:	bd80      	pop	{r7, pc}
	...

0801f874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b086      	sub	sp, #24
 801f878:	af00      	add	r7, sp, #0
 801f87a:	60f8      	str	r0, [r7, #12]
 801f87c:	60b9      	str	r1, [r7, #8]
 801f87e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f880:	2300      	movs	r3, #0
 801f882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f88a:	2b01      	cmp	r3, #1
 801f88c:	d101      	bne.n	801f892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f88e:	2302      	movs	r3, #2
 801f890:	e0ff      	b.n	801fa92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	2201      	movs	r2, #1
 801f896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	2b14      	cmp	r3, #20
 801f89e:	f200 80f0 	bhi.w	801fa82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f8a2:	a201      	add	r2, pc, #4	; (adr r2, 801f8a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f8a8:	0801f8fd 	.word	0x0801f8fd
 801f8ac:	0801fa83 	.word	0x0801fa83
 801f8b0:	0801fa83 	.word	0x0801fa83
 801f8b4:	0801fa83 	.word	0x0801fa83
 801f8b8:	0801f93d 	.word	0x0801f93d
 801f8bc:	0801fa83 	.word	0x0801fa83
 801f8c0:	0801fa83 	.word	0x0801fa83
 801f8c4:	0801fa83 	.word	0x0801fa83
 801f8c8:	0801f97f 	.word	0x0801f97f
 801f8cc:	0801fa83 	.word	0x0801fa83
 801f8d0:	0801fa83 	.word	0x0801fa83
 801f8d4:	0801fa83 	.word	0x0801fa83
 801f8d8:	0801f9bf 	.word	0x0801f9bf
 801f8dc:	0801fa83 	.word	0x0801fa83
 801f8e0:	0801fa83 	.word	0x0801fa83
 801f8e4:	0801fa83 	.word	0x0801fa83
 801f8e8:	0801fa01 	.word	0x0801fa01
 801f8ec:	0801fa83 	.word	0x0801fa83
 801f8f0:	0801fa83 	.word	0x0801fa83
 801f8f4:	0801fa83 	.word	0x0801fa83
 801f8f8:	0801fa41 	.word	0x0801fa41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	68b9      	ldr	r1, [r7, #8]
 801f902:	4618      	mov	r0, r3
 801f904:	f000 faca 	bl	801fe9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	699a      	ldr	r2, [r3, #24]
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	f042 0208 	orr.w	r2, r2, #8
 801f916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	699a      	ldr	r2, [r3, #24]
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	f022 0204 	bic.w	r2, r2, #4
 801f926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	6999      	ldr	r1, [r3, #24]
 801f92e:	68bb      	ldr	r3, [r7, #8]
 801f930:	691a      	ldr	r2, [r3, #16]
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	430a      	orrs	r2, r1
 801f938:	619a      	str	r2, [r3, #24]
      break;
 801f93a:	e0a5      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f93c:	68fb      	ldr	r3, [r7, #12]
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	68b9      	ldr	r1, [r7, #8]
 801f942:	4618      	mov	r0, r3
 801f944:	f000 fb3a 	bl	801ffbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	699a      	ldr	r2, [r3, #24]
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f958:	68fb      	ldr	r3, [r7, #12]
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	699a      	ldr	r2, [r3, #24]
 801f95e:	68fb      	ldr	r3, [r7, #12]
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	6999      	ldr	r1, [r3, #24]
 801f96e:	68bb      	ldr	r3, [r7, #8]
 801f970:	691b      	ldr	r3, [r3, #16]
 801f972:	021a      	lsls	r2, r3, #8
 801f974:	68fb      	ldr	r3, [r7, #12]
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	430a      	orrs	r2, r1
 801f97a:	619a      	str	r2, [r3, #24]
      break;
 801f97c:	e084      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	68b9      	ldr	r1, [r7, #8]
 801f984:	4618      	mov	r0, r3
 801f986:	f000 fba3 	bl	80200d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	69da      	ldr	r2, [r3, #28]
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	f042 0208 	orr.w	r2, r2, #8
 801f998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	681b      	ldr	r3, [r3, #0]
 801f99e:	69da      	ldr	r2, [r3, #28]
 801f9a0:	68fb      	ldr	r3, [r7, #12]
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	f022 0204 	bic.w	r2, r2, #4
 801f9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	69d9      	ldr	r1, [r3, #28]
 801f9b0:	68bb      	ldr	r3, [r7, #8]
 801f9b2:	691a      	ldr	r2, [r3, #16]
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	430a      	orrs	r2, r1
 801f9ba:	61da      	str	r2, [r3, #28]
      break;
 801f9bc:	e064      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	68b9      	ldr	r1, [r7, #8]
 801f9c4:	4618      	mov	r0, r3
 801f9c6:	f000 fc0b 	bl	80201e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	69da      	ldr	r2, [r3, #28]
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f9da:	68fb      	ldr	r3, [r7, #12]
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	69da      	ldr	r2, [r3, #28]
 801f9e0:	68fb      	ldr	r3, [r7, #12]
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f9ea:	68fb      	ldr	r3, [r7, #12]
 801f9ec:	681b      	ldr	r3, [r3, #0]
 801f9ee:	69d9      	ldr	r1, [r3, #28]
 801f9f0:	68bb      	ldr	r3, [r7, #8]
 801f9f2:	691b      	ldr	r3, [r3, #16]
 801f9f4:	021a      	lsls	r2, r3, #8
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	430a      	orrs	r2, r1
 801f9fc:	61da      	str	r2, [r3, #28]
      break;
 801f9fe:	e043      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801fa00:	68fb      	ldr	r3, [r7, #12]
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	68b9      	ldr	r1, [r7, #8]
 801fa06:	4618      	mov	r0, r3
 801fa08:	f000 fc54 	bl	80202b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	f042 0208 	orr.w	r2, r2, #8
 801fa1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801fa1c:	68fb      	ldr	r3, [r7, #12]
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fa22:	68fb      	ldr	r3, [r7, #12]
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	f022 0204 	bic.w	r2, r2, #4
 801fa2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	681b      	ldr	r3, [r3, #0]
 801fa30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fa32:	68bb      	ldr	r3, [r7, #8]
 801fa34:	691a      	ldr	r2, [r3, #16]
 801fa36:	68fb      	ldr	r3, [r7, #12]
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	430a      	orrs	r2, r1
 801fa3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fa3e:	e023      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	68b9      	ldr	r1, [r7, #8]
 801fa46:	4618      	mov	r0, r3
 801fa48:	f000 fc98 	bl	802037c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fa5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fa6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	681b      	ldr	r3, [r3, #0]
 801fa70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fa72:	68bb      	ldr	r3, [r7, #8]
 801fa74:	691b      	ldr	r3, [r3, #16]
 801fa76:	021a      	lsls	r2, r3, #8
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	430a      	orrs	r2, r1
 801fa7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fa80:	e002      	b.n	801fa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801fa82:	2301      	movs	r3, #1
 801fa84:	75fb      	strb	r3, [r7, #23]
      break;
 801fa86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801fa88:	68fb      	ldr	r3, [r7, #12]
 801fa8a:	2200      	movs	r2, #0
 801fa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801fa90:	7dfb      	ldrb	r3, [r7, #23]
}
 801fa92:	4618      	mov	r0, r3
 801fa94:	3718      	adds	r7, #24
 801fa96:	46bd      	mov	sp, r7
 801fa98:	bd80      	pop	{r7, pc}
 801fa9a:	bf00      	nop

0801fa9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801fa9c:	b580      	push	{r7, lr}
 801fa9e:	b084      	sub	sp, #16
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	6078      	str	r0, [r7, #4]
 801faa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801faa6:	2300      	movs	r3, #0
 801faa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fab0:	2b01      	cmp	r3, #1
 801fab2:	d101      	bne.n	801fab8 <HAL_TIM_ConfigClockSource+0x1c>
 801fab4:	2302      	movs	r3, #2
 801fab6:	e0dc      	b.n	801fc72 <HAL_TIM_ConfigClockSource+0x1d6>
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	2201      	movs	r2, #1
 801fabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	2202      	movs	r2, #2
 801fac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	689b      	ldr	r3, [r3, #8]
 801face:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801fad0:	68ba      	ldr	r2, [r7, #8]
 801fad2:	4b6a      	ldr	r3, [pc, #424]	; (801fc7c <HAL_TIM_ConfigClockSource+0x1e0>)
 801fad4:	4013      	ands	r3, r2
 801fad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fad8:	68bb      	ldr	r3, [r7, #8]
 801fada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801fade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	68ba      	ldr	r2, [r7, #8]
 801fae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fae8:	683b      	ldr	r3, [r7, #0]
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	4a64      	ldr	r2, [pc, #400]	; (801fc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 801faee:	4293      	cmp	r3, r2
 801faf0:	f000 80a9 	beq.w	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801faf4:	4a62      	ldr	r2, [pc, #392]	; (801fc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 801faf6:	4293      	cmp	r3, r2
 801faf8:	f200 80ae 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fafc:	4a61      	ldr	r2, [pc, #388]	; (801fc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 801fafe:	4293      	cmp	r3, r2
 801fb00:	f000 80a1 	beq.w	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb04:	4a5f      	ldr	r2, [pc, #380]	; (801fc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 801fb06:	4293      	cmp	r3, r2
 801fb08:	f200 80a6 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb0c:	4a5e      	ldr	r2, [pc, #376]	; (801fc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 801fb0e:	4293      	cmp	r3, r2
 801fb10:	f000 8099 	beq.w	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb14:	4a5c      	ldr	r2, [pc, #368]	; (801fc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 801fb16:	4293      	cmp	r3, r2
 801fb18:	f200 809e 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801fb20:	f000 8091 	beq.w	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801fb28:	f200 8096 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fb30:	f000 8089 	beq.w	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fb38:	f200 808e 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fb40:	d03e      	beq.n	801fbc0 <HAL_TIM_ConfigClockSource+0x124>
 801fb42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fb46:	f200 8087 	bhi.w	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fb4e:	f000 8086 	beq.w	801fc5e <HAL_TIM_ConfigClockSource+0x1c2>
 801fb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fb56:	d87f      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb58:	2b70      	cmp	r3, #112	; 0x70
 801fb5a:	d01a      	beq.n	801fb92 <HAL_TIM_ConfigClockSource+0xf6>
 801fb5c:	2b70      	cmp	r3, #112	; 0x70
 801fb5e:	d87b      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb60:	2b60      	cmp	r3, #96	; 0x60
 801fb62:	d050      	beq.n	801fc06 <HAL_TIM_ConfigClockSource+0x16a>
 801fb64:	2b60      	cmp	r3, #96	; 0x60
 801fb66:	d877      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb68:	2b50      	cmp	r3, #80	; 0x50
 801fb6a:	d03c      	beq.n	801fbe6 <HAL_TIM_ConfigClockSource+0x14a>
 801fb6c:	2b50      	cmp	r3, #80	; 0x50
 801fb6e:	d873      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb70:	2b40      	cmp	r3, #64	; 0x40
 801fb72:	d058      	beq.n	801fc26 <HAL_TIM_ConfigClockSource+0x18a>
 801fb74:	2b40      	cmp	r3, #64	; 0x40
 801fb76:	d86f      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb78:	2b30      	cmp	r3, #48	; 0x30
 801fb7a:	d064      	beq.n	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb7c:	2b30      	cmp	r3, #48	; 0x30
 801fb7e:	d86b      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb80:	2b20      	cmp	r3, #32
 801fb82:	d060      	beq.n	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb84:	2b20      	cmp	r3, #32
 801fb86:	d867      	bhi.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d05c      	beq.n	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb8c:	2b10      	cmp	r3, #16
 801fb8e:	d05a      	beq.n	801fc46 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb90:	e062      	b.n	801fc58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6818      	ldr	r0, [r3, #0]
 801fb96:	683b      	ldr	r3, [r7, #0]
 801fb98:	6899      	ldr	r1, [r3, #8]
 801fb9a:	683b      	ldr	r3, [r7, #0]
 801fb9c:	685a      	ldr	r2, [r3, #4]
 801fb9e:	683b      	ldr	r3, [r7, #0]
 801fba0:	68db      	ldr	r3, [r3, #12]
 801fba2:	f000 fe05 	bl	80207b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	689b      	ldr	r3, [r3, #8]
 801fbac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fbae:	68bb      	ldr	r3, [r7, #8]
 801fbb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801fbb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	68ba      	ldr	r2, [r7, #8]
 801fbbc:	609a      	str	r2, [r3, #8]
      break;
 801fbbe:	e04f      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fbc0:	687b      	ldr	r3, [r7, #4]
 801fbc2:	6818      	ldr	r0, [r3, #0]
 801fbc4:	683b      	ldr	r3, [r7, #0]
 801fbc6:	6899      	ldr	r1, [r3, #8]
 801fbc8:	683b      	ldr	r3, [r7, #0]
 801fbca:	685a      	ldr	r2, [r3, #4]
 801fbcc:	683b      	ldr	r3, [r7, #0]
 801fbce:	68db      	ldr	r3, [r3, #12]
 801fbd0:	f000 fdee 	bl	80207b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	689a      	ldr	r2, [r3, #8]
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801fbe2:	609a      	str	r2, [r3, #8]
      break;
 801fbe4:	e03c      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	6818      	ldr	r0, [r3, #0]
 801fbea:	683b      	ldr	r3, [r7, #0]
 801fbec:	6859      	ldr	r1, [r3, #4]
 801fbee:	683b      	ldr	r3, [r7, #0]
 801fbf0:	68db      	ldr	r3, [r3, #12]
 801fbf2:	461a      	mov	r2, r3
 801fbf4:	f000 fca8 	bl	8020548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	2150      	movs	r1, #80	; 0x50
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f000 fdb8 	bl	8020774 <TIM_ITRx_SetConfig>
      break;
 801fc04:	e02c      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	6818      	ldr	r0, [r3, #0]
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	6859      	ldr	r1, [r3, #4]
 801fc0e:	683b      	ldr	r3, [r7, #0]
 801fc10:	68db      	ldr	r3, [r3, #12]
 801fc12:	461a      	mov	r2, r3
 801fc14:	f000 fd04 	bl	8020620 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	2160      	movs	r1, #96	; 0x60
 801fc1e:	4618      	mov	r0, r3
 801fc20:	f000 fda8 	bl	8020774 <TIM_ITRx_SetConfig>
      break;
 801fc24:	e01c      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	6818      	ldr	r0, [r3, #0]
 801fc2a:	683b      	ldr	r3, [r7, #0]
 801fc2c:	6859      	ldr	r1, [r3, #4]
 801fc2e:	683b      	ldr	r3, [r7, #0]
 801fc30:	68db      	ldr	r3, [r3, #12]
 801fc32:	461a      	mov	r2, r3
 801fc34:	f000 fc88 	bl	8020548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	2140      	movs	r1, #64	; 0x40
 801fc3e:	4618      	mov	r0, r3
 801fc40:	f000 fd98 	bl	8020774 <TIM_ITRx_SetConfig>
      break;
 801fc44:	e00c      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	681a      	ldr	r2, [r3, #0]
 801fc4a:	683b      	ldr	r3, [r7, #0]
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	4619      	mov	r1, r3
 801fc50:	4610      	mov	r0, r2
 801fc52:	f000 fd8f 	bl	8020774 <TIM_ITRx_SetConfig>
      break;
 801fc56:	e003      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801fc58:	2301      	movs	r3, #1
 801fc5a:	73fb      	strb	r3, [r7, #15]
      break;
 801fc5c:	e000      	b.n	801fc60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801fc5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	2201      	movs	r2, #1
 801fc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	2200      	movs	r2, #0
 801fc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801fc70:	7bfb      	ldrb	r3, [r7, #15]
}
 801fc72:	4618      	mov	r0, r3
 801fc74:	3710      	adds	r7, #16
 801fc76:	46bd      	mov	sp, r7
 801fc78:	bd80      	pop	{r7, pc}
 801fc7a:	bf00      	nop
 801fc7c:	ffceff88 	.word	0xffceff88
 801fc80:	00100040 	.word	0x00100040
 801fc84:	00100030 	.word	0x00100030
 801fc88:	00100020 	.word	0x00100020

0801fc8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fc8c:	b480      	push	{r7}
 801fc8e:	b085      	sub	sp, #20
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
 801fc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801fc96:	2300      	movs	r3, #0
 801fc98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801fc9a:	683b      	ldr	r3, [r7, #0]
 801fc9c:	2b0c      	cmp	r3, #12
 801fc9e:	d831      	bhi.n	801fd04 <HAL_TIM_ReadCapturedValue+0x78>
 801fca0:	a201      	add	r2, pc, #4	; (adr r2, 801fca8 <HAL_TIM_ReadCapturedValue+0x1c>)
 801fca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fca6:	bf00      	nop
 801fca8:	0801fcdd 	.word	0x0801fcdd
 801fcac:	0801fd05 	.word	0x0801fd05
 801fcb0:	0801fd05 	.word	0x0801fd05
 801fcb4:	0801fd05 	.word	0x0801fd05
 801fcb8:	0801fce7 	.word	0x0801fce7
 801fcbc:	0801fd05 	.word	0x0801fd05
 801fcc0:	0801fd05 	.word	0x0801fd05
 801fcc4:	0801fd05 	.word	0x0801fd05
 801fcc8:	0801fcf1 	.word	0x0801fcf1
 801fccc:	0801fd05 	.word	0x0801fd05
 801fcd0:	0801fd05 	.word	0x0801fd05
 801fcd4:	0801fd05 	.word	0x0801fd05
 801fcd8:	0801fcfb 	.word	0x0801fcfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fce2:	60fb      	str	r3, [r7, #12]

      break;
 801fce4:	e00f      	b.n	801fd06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fcec:	60fb      	str	r3, [r7, #12]

      break;
 801fcee:	e00a      	b.n	801fd06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fcf6:	60fb      	str	r3, [r7, #12]

      break;
 801fcf8:	e005      	b.n	801fd06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd00:	60fb      	str	r3, [r7, #12]

      break;
 801fd02:	e000      	b.n	801fd06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801fd04:	bf00      	nop
  }

  return tmpreg;
 801fd06:	68fb      	ldr	r3, [r7, #12]
}
 801fd08:	4618      	mov	r0, r3
 801fd0a:	3714      	adds	r7, #20
 801fd0c:	46bd      	mov	sp, r7
 801fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd12:	4770      	bx	lr

0801fd14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801fd14:	b480      	push	{r7}
 801fd16:	b083      	sub	sp, #12
 801fd18:	af00      	add	r7, sp, #0
 801fd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801fd1c:	bf00      	nop
 801fd1e:	370c      	adds	r7, #12
 801fd20:	46bd      	mov	sp, r7
 801fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd26:	4770      	bx	lr

0801fd28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801fd28:	b480      	push	{r7}
 801fd2a:	b083      	sub	sp, #12
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801fd30:	bf00      	nop
 801fd32:	370c      	adds	r7, #12
 801fd34:	46bd      	mov	sp, r7
 801fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd3a:	4770      	bx	lr

0801fd3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801fd3c:	b480      	push	{r7}
 801fd3e:	b083      	sub	sp, #12
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801fd44:	bf00      	nop
 801fd46:	370c      	adds	r7, #12
 801fd48:	46bd      	mov	sp, r7
 801fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd4e:	4770      	bx	lr

0801fd50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fd50:	b480      	push	{r7}
 801fd52:	b085      	sub	sp, #20
 801fd54:	af00      	add	r7, sp, #0
 801fd56:	6078      	str	r0, [r7, #4]
 801fd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	4a44      	ldr	r2, [pc, #272]	; (801fe74 <TIM_Base_SetConfig+0x124>)
 801fd64:	4293      	cmp	r3, r2
 801fd66:	d013      	beq.n	801fd90 <TIM_Base_SetConfig+0x40>
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fd6e:	d00f      	beq.n	801fd90 <TIM_Base_SetConfig+0x40>
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	4a41      	ldr	r2, [pc, #260]	; (801fe78 <TIM_Base_SetConfig+0x128>)
 801fd74:	4293      	cmp	r3, r2
 801fd76:	d00b      	beq.n	801fd90 <TIM_Base_SetConfig+0x40>
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	4a40      	ldr	r2, [pc, #256]	; (801fe7c <TIM_Base_SetConfig+0x12c>)
 801fd7c:	4293      	cmp	r3, r2
 801fd7e:	d007      	beq.n	801fd90 <TIM_Base_SetConfig+0x40>
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	4a3f      	ldr	r2, [pc, #252]	; (801fe80 <TIM_Base_SetConfig+0x130>)
 801fd84:	4293      	cmp	r3, r2
 801fd86:	d003      	beq.n	801fd90 <TIM_Base_SetConfig+0x40>
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	4a3e      	ldr	r2, [pc, #248]	; (801fe84 <TIM_Base_SetConfig+0x134>)
 801fd8c:	4293      	cmp	r3, r2
 801fd8e:	d108      	bne.n	801fda2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fd96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fd98:	683b      	ldr	r3, [r7, #0]
 801fd9a:	685b      	ldr	r3, [r3, #4]
 801fd9c:	68fa      	ldr	r2, [r7, #12]
 801fd9e:	4313      	orrs	r3, r2
 801fda0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	4a33      	ldr	r2, [pc, #204]	; (801fe74 <TIM_Base_SetConfig+0x124>)
 801fda6:	4293      	cmp	r3, r2
 801fda8:	d027      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fdb0:	d023      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	4a30      	ldr	r2, [pc, #192]	; (801fe78 <TIM_Base_SetConfig+0x128>)
 801fdb6:	4293      	cmp	r3, r2
 801fdb8:	d01f      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	4a2f      	ldr	r2, [pc, #188]	; (801fe7c <TIM_Base_SetConfig+0x12c>)
 801fdbe:	4293      	cmp	r3, r2
 801fdc0:	d01b      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	4a2e      	ldr	r2, [pc, #184]	; (801fe80 <TIM_Base_SetConfig+0x130>)
 801fdc6:	4293      	cmp	r3, r2
 801fdc8:	d017      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	4a2d      	ldr	r2, [pc, #180]	; (801fe84 <TIM_Base_SetConfig+0x134>)
 801fdce:	4293      	cmp	r3, r2
 801fdd0:	d013      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	4a2c      	ldr	r2, [pc, #176]	; (801fe88 <TIM_Base_SetConfig+0x138>)
 801fdd6:	4293      	cmp	r3, r2
 801fdd8:	d00f      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	4a2b      	ldr	r2, [pc, #172]	; (801fe8c <TIM_Base_SetConfig+0x13c>)
 801fdde:	4293      	cmp	r3, r2
 801fde0:	d00b      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	4a2a      	ldr	r2, [pc, #168]	; (801fe90 <TIM_Base_SetConfig+0x140>)
 801fde6:	4293      	cmp	r3, r2
 801fde8:	d007      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	4a29      	ldr	r2, [pc, #164]	; (801fe94 <TIM_Base_SetConfig+0x144>)
 801fdee:	4293      	cmp	r3, r2
 801fdf0:	d003      	beq.n	801fdfa <TIM_Base_SetConfig+0xaa>
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	4a28      	ldr	r2, [pc, #160]	; (801fe98 <TIM_Base_SetConfig+0x148>)
 801fdf6:	4293      	cmp	r3, r2
 801fdf8:	d108      	bne.n	801fe0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fe00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fe02:	683b      	ldr	r3, [r7, #0]
 801fe04:	68db      	ldr	r3, [r3, #12]
 801fe06:	68fa      	ldr	r2, [r7, #12]
 801fe08:	4313      	orrs	r3, r2
 801fe0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801fe12:	683b      	ldr	r3, [r7, #0]
 801fe14:	695b      	ldr	r3, [r3, #20]
 801fe16:	4313      	orrs	r3, r2
 801fe18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	68fa      	ldr	r2, [r7, #12]
 801fe1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801fe20:	683b      	ldr	r3, [r7, #0]
 801fe22:	689a      	ldr	r2, [r3, #8]
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801fe28:	683b      	ldr	r3, [r7, #0]
 801fe2a:	681a      	ldr	r2, [r3, #0]
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	4a10      	ldr	r2, [pc, #64]	; (801fe74 <TIM_Base_SetConfig+0x124>)
 801fe34:	4293      	cmp	r3, r2
 801fe36:	d00f      	beq.n	801fe58 <TIM_Base_SetConfig+0x108>
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	4a12      	ldr	r2, [pc, #72]	; (801fe84 <TIM_Base_SetConfig+0x134>)
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	d00b      	beq.n	801fe58 <TIM_Base_SetConfig+0x108>
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	4a11      	ldr	r2, [pc, #68]	; (801fe88 <TIM_Base_SetConfig+0x138>)
 801fe44:	4293      	cmp	r3, r2
 801fe46:	d007      	beq.n	801fe58 <TIM_Base_SetConfig+0x108>
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	4a10      	ldr	r2, [pc, #64]	; (801fe8c <TIM_Base_SetConfig+0x13c>)
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d003      	beq.n	801fe58 <TIM_Base_SetConfig+0x108>
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	4a0f      	ldr	r2, [pc, #60]	; (801fe90 <TIM_Base_SetConfig+0x140>)
 801fe54:	4293      	cmp	r3, r2
 801fe56:	d103      	bne.n	801fe60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	691a      	ldr	r2, [r3, #16]
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	2201      	movs	r2, #1
 801fe64:	615a      	str	r2, [r3, #20]
}
 801fe66:	bf00      	nop
 801fe68:	3714      	adds	r7, #20
 801fe6a:	46bd      	mov	sp, r7
 801fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe70:	4770      	bx	lr
 801fe72:	bf00      	nop
 801fe74:	40010000 	.word	0x40010000
 801fe78:	40000400 	.word	0x40000400
 801fe7c:	40000800 	.word	0x40000800
 801fe80:	40000c00 	.word	0x40000c00
 801fe84:	40010400 	.word	0x40010400
 801fe88:	40014000 	.word	0x40014000
 801fe8c:	40014400 	.word	0x40014400
 801fe90:	40014800 	.word	0x40014800
 801fe94:	4000e000 	.word	0x4000e000
 801fe98:	4000e400 	.word	0x4000e400

0801fe9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fe9c:	b480      	push	{r7}
 801fe9e:	b087      	sub	sp, #28
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	6078      	str	r0, [r7, #4]
 801fea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	6a1b      	ldr	r3, [r3, #32]
 801feaa:	f023 0201 	bic.w	r2, r3, #1
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	6a1b      	ldr	r3, [r3, #32]
 801feb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	685b      	ldr	r3, [r3, #4]
 801febc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	699b      	ldr	r3, [r3, #24]
 801fec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fec4:	68fa      	ldr	r2, [r7, #12]
 801fec6:	4b37      	ldr	r3, [pc, #220]	; (801ffa4 <TIM_OC1_SetConfig+0x108>)
 801fec8:	4013      	ands	r3, r2
 801feca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	f023 0303 	bic.w	r3, r3, #3
 801fed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fed4:	683b      	ldr	r3, [r7, #0]
 801fed6:	681b      	ldr	r3, [r3, #0]
 801fed8:	68fa      	ldr	r2, [r7, #12]
 801feda:	4313      	orrs	r3, r2
 801fedc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fede:	697b      	ldr	r3, [r7, #20]
 801fee0:	f023 0302 	bic.w	r3, r3, #2
 801fee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fee6:	683b      	ldr	r3, [r7, #0]
 801fee8:	689b      	ldr	r3, [r3, #8]
 801feea:	697a      	ldr	r2, [r7, #20]
 801feec:	4313      	orrs	r3, r2
 801feee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	4a2d      	ldr	r2, [pc, #180]	; (801ffa8 <TIM_OC1_SetConfig+0x10c>)
 801fef4:	4293      	cmp	r3, r2
 801fef6:	d00f      	beq.n	801ff18 <TIM_OC1_SetConfig+0x7c>
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	4a2c      	ldr	r2, [pc, #176]	; (801ffac <TIM_OC1_SetConfig+0x110>)
 801fefc:	4293      	cmp	r3, r2
 801fefe:	d00b      	beq.n	801ff18 <TIM_OC1_SetConfig+0x7c>
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	4a2b      	ldr	r2, [pc, #172]	; (801ffb0 <TIM_OC1_SetConfig+0x114>)
 801ff04:	4293      	cmp	r3, r2
 801ff06:	d007      	beq.n	801ff18 <TIM_OC1_SetConfig+0x7c>
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	4a2a      	ldr	r2, [pc, #168]	; (801ffb4 <TIM_OC1_SetConfig+0x118>)
 801ff0c:	4293      	cmp	r3, r2
 801ff0e:	d003      	beq.n	801ff18 <TIM_OC1_SetConfig+0x7c>
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	4a29      	ldr	r2, [pc, #164]	; (801ffb8 <TIM_OC1_SetConfig+0x11c>)
 801ff14:	4293      	cmp	r3, r2
 801ff16:	d10c      	bne.n	801ff32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ff18:	697b      	ldr	r3, [r7, #20]
 801ff1a:	f023 0308 	bic.w	r3, r3, #8
 801ff1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ff20:	683b      	ldr	r3, [r7, #0]
 801ff22:	68db      	ldr	r3, [r3, #12]
 801ff24:	697a      	ldr	r2, [r7, #20]
 801ff26:	4313      	orrs	r3, r2
 801ff28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ff2a:	697b      	ldr	r3, [r7, #20]
 801ff2c:	f023 0304 	bic.w	r3, r3, #4
 801ff30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	4a1c      	ldr	r2, [pc, #112]	; (801ffa8 <TIM_OC1_SetConfig+0x10c>)
 801ff36:	4293      	cmp	r3, r2
 801ff38:	d00f      	beq.n	801ff5a <TIM_OC1_SetConfig+0xbe>
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	4a1b      	ldr	r2, [pc, #108]	; (801ffac <TIM_OC1_SetConfig+0x110>)
 801ff3e:	4293      	cmp	r3, r2
 801ff40:	d00b      	beq.n	801ff5a <TIM_OC1_SetConfig+0xbe>
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	4a1a      	ldr	r2, [pc, #104]	; (801ffb0 <TIM_OC1_SetConfig+0x114>)
 801ff46:	4293      	cmp	r3, r2
 801ff48:	d007      	beq.n	801ff5a <TIM_OC1_SetConfig+0xbe>
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	4a19      	ldr	r2, [pc, #100]	; (801ffb4 <TIM_OC1_SetConfig+0x118>)
 801ff4e:	4293      	cmp	r3, r2
 801ff50:	d003      	beq.n	801ff5a <TIM_OC1_SetConfig+0xbe>
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	4a18      	ldr	r2, [pc, #96]	; (801ffb8 <TIM_OC1_SetConfig+0x11c>)
 801ff56:	4293      	cmp	r3, r2
 801ff58:	d111      	bne.n	801ff7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ff5a:	693b      	ldr	r3, [r7, #16]
 801ff5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ff60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ff62:	693b      	ldr	r3, [r7, #16]
 801ff64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ff68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	695b      	ldr	r3, [r3, #20]
 801ff6e:	693a      	ldr	r2, [r7, #16]
 801ff70:	4313      	orrs	r3, r2
 801ff72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ff74:	683b      	ldr	r3, [r7, #0]
 801ff76:	699b      	ldr	r3, [r3, #24]
 801ff78:	693a      	ldr	r2, [r7, #16]
 801ff7a:	4313      	orrs	r3, r2
 801ff7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	693a      	ldr	r2, [r7, #16]
 801ff82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	68fa      	ldr	r2, [r7, #12]
 801ff88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ff8a:	683b      	ldr	r3, [r7, #0]
 801ff8c:	685a      	ldr	r2, [r3, #4]
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	697a      	ldr	r2, [r7, #20]
 801ff96:	621a      	str	r2, [r3, #32]
}
 801ff98:	bf00      	nop
 801ff9a:	371c      	adds	r7, #28
 801ff9c:	46bd      	mov	sp, r7
 801ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa2:	4770      	bx	lr
 801ffa4:	fffeff8f 	.word	0xfffeff8f
 801ffa8:	40010000 	.word	0x40010000
 801ffac:	40010400 	.word	0x40010400
 801ffb0:	40014000 	.word	0x40014000
 801ffb4:	40014400 	.word	0x40014400
 801ffb8:	40014800 	.word	0x40014800

0801ffbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ffbc:	b480      	push	{r7}
 801ffbe:	b087      	sub	sp, #28
 801ffc0:	af00      	add	r7, sp, #0
 801ffc2:	6078      	str	r0, [r7, #4]
 801ffc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	6a1b      	ldr	r3, [r3, #32]
 801ffca:	f023 0210 	bic.w	r2, r3, #16
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6a1b      	ldr	r3, [r3, #32]
 801ffd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	685b      	ldr	r3, [r3, #4]
 801ffdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	699b      	ldr	r3, [r3, #24]
 801ffe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ffe4:	68fa      	ldr	r2, [r7, #12]
 801ffe6:	4b34      	ldr	r3, [pc, #208]	; (80200b8 <TIM_OC2_SetConfig+0xfc>)
 801ffe8:	4013      	ands	r3, r2
 801ffea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fff4:	683b      	ldr	r3, [r7, #0]
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	021b      	lsls	r3, r3, #8
 801fffa:	68fa      	ldr	r2, [r7, #12]
 801fffc:	4313      	orrs	r3, r2
 801fffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020000:	697b      	ldr	r3, [r7, #20]
 8020002:	f023 0320 	bic.w	r3, r3, #32
 8020006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020008:	683b      	ldr	r3, [r7, #0]
 802000a:	689b      	ldr	r3, [r3, #8]
 802000c:	011b      	lsls	r3, r3, #4
 802000e:	697a      	ldr	r2, [r7, #20]
 8020010:	4313      	orrs	r3, r2
 8020012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	4a29      	ldr	r2, [pc, #164]	; (80200bc <TIM_OC2_SetConfig+0x100>)
 8020018:	4293      	cmp	r3, r2
 802001a:	d003      	beq.n	8020024 <TIM_OC2_SetConfig+0x68>
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	4a28      	ldr	r2, [pc, #160]	; (80200c0 <TIM_OC2_SetConfig+0x104>)
 8020020:	4293      	cmp	r3, r2
 8020022:	d10d      	bne.n	8020040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020024:	697b      	ldr	r3, [r7, #20]
 8020026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802002a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802002c:	683b      	ldr	r3, [r7, #0]
 802002e:	68db      	ldr	r3, [r3, #12]
 8020030:	011b      	lsls	r3, r3, #4
 8020032:	697a      	ldr	r2, [r7, #20]
 8020034:	4313      	orrs	r3, r2
 8020036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020038:	697b      	ldr	r3, [r7, #20]
 802003a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802003e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	4a1e      	ldr	r2, [pc, #120]	; (80200bc <TIM_OC2_SetConfig+0x100>)
 8020044:	4293      	cmp	r3, r2
 8020046:	d00f      	beq.n	8020068 <TIM_OC2_SetConfig+0xac>
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	4a1d      	ldr	r2, [pc, #116]	; (80200c0 <TIM_OC2_SetConfig+0x104>)
 802004c:	4293      	cmp	r3, r2
 802004e:	d00b      	beq.n	8020068 <TIM_OC2_SetConfig+0xac>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	4a1c      	ldr	r2, [pc, #112]	; (80200c4 <TIM_OC2_SetConfig+0x108>)
 8020054:	4293      	cmp	r3, r2
 8020056:	d007      	beq.n	8020068 <TIM_OC2_SetConfig+0xac>
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	4a1b      	ldr	r2, [pc, #108]	; (80200c8 <TIM_OC2_SetConfig+0x10c>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d003      	beq.n	8020068 <TIM_OC2_SetConfig+0xac>
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	4a1a      	ldr	r2, [pc, #104]	; (80200cc <TIM_OC2_SetConfig+0x110>)
 8020064:	4293      	cmp	r3, r2
 8020066:	d113      	bne.n	8020090 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020068:	693b      	ldr	r3, [r7, #16]
 802006a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802006e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020070:	693b      	ldr	r3, [r7, #16]
 8020072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020078:	683b      	ldr	r3, [r7, #0]
 802007a:	695b      	ldr	r3, [r3, #20]
 802007c:	009b      	lsls	r3, r3, #2
 802007e:	693a      	ldr	r2, [r7, #16]
 8020080:	4313      	orrs	r3, r2
 8020082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020084:	683b      	ldr	r3, [r7, #0]
 8020086:	699b      	ldr	r3, [r3, #24]
 8020088:	009b      	lsls	r3, r3, #2
 802008a:	693a      	ldr	r2, [r7, #16]
 802008c:	4313      	orrs	r3, r2
 802008e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	693a      	ldr	r2, [r7, #16]
 8020094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	68fa      	ldr	r2, [r7, #12]
 802009a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802009c:	683b      	ldr	r3, [r7, #0]
 802009e:	685a      	ldr	r2, [r3, #4]
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	697a      	ldr	r2, [r7, #20]
 80200a8:	621a      	str	r2, [r3, #32]
}
 80200aa:	bf00      	nop
 80200ac:	371c      	adds	r7, #28
 80200ae:	46bd      	mov	sp, r7
 80200b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b4:	4770      	bx	lr
 80200b6:	bf00      	nop
 80200b8:	feff8fff 	.word	0xfeff8fff
 80200bc:	40010000 	.word	0x40010000
 80200c0:	40010400 	.word	0x40010400
 80200c4:	40014000 	.word	0x40014000
 80200c8:	40014400 	.word	0x40014400
 80200cc:	40014800 	.word	0x40014800

080200d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80200d0:	b480      	push	{r7}
 80200d2:	b087      	sub	sp, #28
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
 80200d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	6a1b      	ldr	r3, [r3, #32]
 80200de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	6a1b      	ldr	r3, [r3, #32]
 80200ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	685b      	ldr	r3, [r3, #4]
 80200f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	69db      	ldr	r3, [r3, #28]
 80200f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80200f8:	68fa      	ldr	r2, [r7, #12]
 80200fa:	4b33      	ldr	r3, [pc, #204]	; (80201c8 <TIM_OC3_SetConfig+0xf8>)
 80200fc:	4013      	ands	r3, r2
 80200fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020100:	68fb      	ldr	r3, [r7, #12]
 8020102:	f023 0303 	bic.w	r3, r3, #3
 8020106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020108:	683b      	ldr	r3, [r7, #0]
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	68fa      	ldr	r2, [r7, #12]
 802010e:	4313      	orrs	r3, r2
 8020110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020112:	697b      	ldr	r3, [r7, #20]
 8020114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802011a:	683b      	ldr	r3, [r7, #0]
 802011c:	689b      	ldr	r3, [r3, #8]
 802011e:	021b      	lsls	r3, r3, #8
 8020120:	697a      	ldr	r2, [r7, #20]
 8020122:	4313      	orrs	r3, r2
 8020124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	4a28      	ldr	r2, [pc, #160]	; (80201cc <TIM_OC3_SetConfig+0xfc>)
 802012a:	4293      	cmp	r3, r2
 802012c:	d003      	beq.n	8020136 <TIM_OC3_SetConfig+0x66>
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	4a27      	ldr	r2, [pc, #156]	; (80201d0 <TIM_OC3_SetConfig+0x100>)
 8020132:	4293      	cmp	r3, r2
 8020134:	d10d      	bne.n	8020152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020136:	697b      	ldr	r3, [r7, #20]
 8020138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802013c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802013e:	683b      	ldr	r3, [r7, #0]
 8020140:	68db      	ldr	r3, [r3, #12]
 8020142:	021b      	lsls	r3, r3, #8
 8020144:	697a      	ldr	r2, [r7, #20]
 8020146:	4313      	orrs	r3, r2
 8020148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802014a:	697b      	ldr	r3, [r7, #20]
 802014c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	4a1d      	ldr	r2, [pc, #116]	; (80201cc <TIM_OC3_SetConfig+0xfc>)
 8020156:	4293      	cmp	r3, r2
 8020158:	d00f      	beq.n	802017a <TIM_OC3_SetConfig+0xaa>
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	4a1c      	ldr	r2, [pc, #112]	; (80201d0 <TIM_OC3_SetConfig+0x100>)
 802015e:	4293      	cmp	r3, r2
 8020160:	d00b      	beq.n	802017a <TIM_OC3_SetConfig+0xaa>
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	4a1b      	ldr	r2, [pc, #108]	; (80201d4 <TIM_OC3_SetConfig+0x104>)
 8020166:	4293      	cmp	r3, r2
 8020168:	d007      	beq.n	802017a <TIM_OC3_SetConfig+0xaa>
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	4a1a      	ldr	r2, [pc, #104]	; (80201d8 <TIM_OC3_SetConfig+0x108>)
 802016e:	4293      	cmp	r3, r2
 8020170:	d003      	beq.n	802017a <TIM_OC3_SetConfig+0xaa>
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	4a19      	ldr	r2, [pc, #100]	; (80201dc <TIM_OC3_SetConfig+0x10c>)
 8020176:	4293      	cmp	r3, r2
 8020178:	d113      	bne.n	80201a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802017a:	693b      	ldr	r3, [r7, #16]
 802017c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020182:	693b      	ldr	r3, [r7, #16]
 8020184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	695b      	ldr	r3, [r3, #20]
 802018e:	011b      	lsls	r3, r3, #4
 8020190:	693a      	ldr	r2, [r7, #16]
 8020192:	4313      	orrs	r3, r2
 8020194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	699b      	ldr	r3, [r3, #24]
 802019a:	011b      	lsls	r3, r3, #4
 802019c:	693a      	ldr	r2, [r7, #16]
 802019e:	4313      	orrs	r3, r2
 80201a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	693a      	ldr	r2, [r7, #16]
 80201a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	68fa      	ldr	r2, [r7, #12]
 80201ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80201ae:	683b      	ldr	r3, [r7, #0]
 80201b0:	685a      	ldr	r2, [r3, #4]
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	697a      	ldr	r2, [r7, #20]
 80201ba:	621a      	str	r2, [r3, #32]
}
 80201bc:	bf00      	nop
 80201be:	371c      	adds	r7, #28
 80201c0:	46bd      	mov	sp, r7
 80201c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201c6:	4770      	bx	lr
 80201c8:	fffeff8f 	.word	0xfffeff8f
 80201cc:	40010000 	.word	0x40010000
 80201d0:	40010400 	.word	0x40010400
 80201d4:	40014000 	.word	0x40014000
 80201d8:	40014400 	.word	0x40014400
 80201dc:	40014800 	.word	0x40014800

080201e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80201e0:	b480      	push	{r7}
 80201e2:	b087      	sub	sp, #28
 80201e4:	af00      	add	r7, sp, #0
 80201e6:	6078      	str	r0, [r7, #4]
 80201e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	6a1b      	ldr	r3, [r3, #32]
 80201ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	6a1b      	ldr	r3, [r3, #32]
 80201fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	685b      	ldr	r3, [r3, #4]
 8020200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	69db      	ldr	r3, [r3, #28]
 8020206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020208:	68fa      	ldr	r2, [r7, #12]
 802020a:	4b24      	ldr	r3, [pc, #144]	; (802029c <TIM_OC4_SetConfig+0xbc>)
 802020c:	4013      	ands	r3, r2
 802020e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020218:	683b      	ldr	r3, [r7, #0]
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	021b      	lsls	r3, r3, #8
 802021e:	68fa      	ldr	r2, [r7, #12]
 8020220:	4313      	orrs	r3, r2
 8020222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020224:	693b      	ldr	r3, [r7, #16]
 8020226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802022a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	689b      	ldr	r3, [r3, #8]
 8020230:	031b      	lsls	r3, r3, #12
 8020232:	693a      	ldr	r2, [r7, #16]
 8020234:	4313      	orrs	r3, r2
 8020236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	4a19      	ldr	r2, [pc, #100]	; (80202a0 <TIM_OC4_SetConfig+0xc0>)
 802023c:	4293      	cmp	r3, r2
 802023e:	d00f      	beq.n	8020260 <TIM_OC4_SetConfig+0x80>
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	4a18      	ldr	r2, [pc, #96]	; (80202a4 <TIM_OC4_SetConfig+0xc4>)
 8020244:	4293      	cmp	r3, r2
 8020246:	d00b      	beq.n	8020260 <TIM_OC4_SetConfig+0x80>
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	4a17      	ldr	r2, [pc, #92]	; (80202a8 <TIM_OC4_SetConfig+0xc8>)
 802024c:	4293      	cmp	r3, r2
 802024e:	d007      	beq.n	8020260 <TIM_OC4_SetConfig+0x80>
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	4a16      	ldr	r2, [pc, #88]	; (80202ac <TIM_OC4_SetConfig+0xcc>)
 8020254:	4293      	cmp	r3, r2
 8020256:	d003      	beq.n	8020260 <TIM_OC4_SetConfig+0x80>
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	4a15      	ldr	r2, [pc, #84]	; (80202b0 <TIM_OC4_SetConfig+0xd0>)
 802025c:	4293      	cmp	r3, r2
 802025e:	d109      	bne.n	8020274 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020260:	697b      	ldr	r3, [r7, #20]
 8020262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020268:	683b      	ldr	r3, [r7, #0]
 802026a:	695b      	ldr	r3, [r3, #20]
 802026c:	019b      	lsls	r3, r3, #6
 802026e:	697a      	ldr	r2, [r7, #20]
 8020270:	4313      	orrs	r3, r2
 8020272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	697a      	ldr	r2, [r7, #20]
 8020278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	68fa      	ldr	r2, [r7, #12]
 802027e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020280:	683b      	ldr	r3, [r7, #0]
 8020282:	685a      	ldr	r2, [r3, #4]
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	693a      	ldr	r2, [r7, #16]
 802028c:	621a      	str	r2, [r3, #32]
}
 802028e:	bf00      	nop
 8020290:	371c      	adds	r7, #28
 8020292:	46bd      	mov	sp, r7
 8020294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020298:	4770      	bx	lr
 802029a:	bf00      	nop
 802029c:	feff8fff 	.word	0xfeff8fff
 80202a0:	40010000 	.word	0x40010000
 80202a4:	40010400 	.word	0x40010400
 80202a8:	40014000 	.word	0x40014000
 80202ac:	40014400 	.word	0x40014400
 80202b0:	40014800 	.word	0x40014800

080202b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80202b4:	b480      	push	{r7}
 80202b6:	b087      	sub	sp, #28
 80202b8:	af00      	add	r7, sp, #0
 80202ba:	6078      	str	r0, [r7, #4]
 80202bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	6a1b      	ldr	r3, [r3, #32]
 80202c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	6a1b      	ldr	r3, [r3, #32]
 80202ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	685b      	ldr	r3, [r3, #4]
 80202d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80202da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80202dc:	68fa      	ldr	r2, [r7, #12]
 80202de:	4b21      	ldr	r3, [pc, #132]	; (8020364 <TIM_OC5_SetConfig+0xb0>)
 80202e0:	4013      	ands	r3, r2
 80202e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	68fa      	ldr	r2, [r7, #12]
 80202ea:	4313      	orrs	r3, r2
 80202ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80202ee:	693b      	ldr	r3, [r7, #16]
 80202f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80202f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80202f6:	683b      	ldr	r3, [r7, #0]
 80202f8:	689b      	ldr	r3, [r3, #8]
 80202fa:	041b      	lsls	r3, r3, #16
 80202fc:	693a      	ldr	r2, [r7, #16]
 80202fe:	4313      	orrs	r3, r2
 8020300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	4a18      	ldr	r2, [pc, #96]	; (8020368 <TIM_OC5_SetConfig+0xb4>)
 8020306:	4293      	cmp	r3, r2
 8020308:	d00f      	beq.n	802032a <TIM_OC5_SetConfig+0x76>
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	4a17      	ldr	r2, [pc, #92]	; (802036c <TIM_OC5_SetConfig+0xb8>)
 802030e:	4293      	cmp	r3, r2
 8020310:	d00b      	beq.n	802032a <TIM_OC5_SetConfig+0x76>
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	4a16      	ldr	r2, [pc, #88]	; (8020370 <TIM_OC5_SetConfig+0xbc>)
 8020316:	4293      	cmp	r3, r2
 8020318:	d007      	beq.n	802032a <TIM_OC5_SetConfig+0x76>
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	4a15      	ldr	r2, [pc, #84]	; (8020374 <TIM_OC5_SetConfig+0xc0>)
 802031e:	4293      	cmp	r3, r2
 8020320:	d003      	beq.n	802032a <TIM_OC5_SetConfig+0x76>
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	4a14      	ldr	r2, [pc, #80]	; (8020378 <TIM_OC5_SetConfig+0xc4>)
 8020326:	4293      	cmp	r3, r2
 8020328:	d109      	bne.n	802033e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 802032a:	697b      	ldr	r3, [r7, #20]
 802032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8020332:	683b      	ldr	r3, [r7, #0]
 8020334:	695b      	ldr	r3, [r3, #20]
 8020336:	021b      	lsls	r3, r3, #8
 8020338:	697a      	ldr	r2, [r7, #20]
 802033a:	4313      	orrs	r3, r2
 802033c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	697a      	ldr	r2, [r7, #20]
 8020342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	68fa      	ldr	r2, [r7, #12]
 8020348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	685a      	ldr	r2, [r3, #4]
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	693a      	ldr	r2, [r7, #16]
 8020356:	621a      	str	r2, [r3, #32]
}
 8020358:	bf00      	nop
 802035a:	371c      	adds	r7, #28
 802035c:	46bd      	mov	sp, r7
 802035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020362:	4770      	bx	lr
 8020364:	fffeff8f 	.word	0xfffeff8f
 8020368:	40010000 	.word	0x40010000
 802036c:	40010400 	.word	0x40010400
 8020370:	40014000 	.word	0x40014000
 8020374:	40014400 	.word	0x40014400
 8020378:	40014800 	.word	0x40014800

0802037c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 802037c:	b480      	push	{r7}
 802037e:	b087      	sub	sp, #28
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
 8020384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	6a1b      	ldr	r3, [r3, #32]
 802038a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	6a1b      	ldr	r3, [r3, #32]
 8020396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	685b      	ldr	r3, [r3, #4]
 802039c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80203a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80203a4:	68fa      	ldr	r2, [r7, #12]
 80203a6:	4b22      	ldr	r3, [pc, #136]	; (8020430 <TIM_OC6_SetConfig+0xb4>)
 80203a8:	4013      	ands	r3, r2
 80203aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80203ac:	683b      	ldr	r3, [r7, #0]
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	021b      	lsls	r3, r3, #8
 80203b2:	68fa      	ldr	r2, [r7, #12]
 80203b4:	4313      	orrs	r3, r2
 80203b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80203b8:	693b      	ldr	r3, [r7, #16]
 80203ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80203be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	689b      	ldr	r3, [r3, #8]
 80203c4:	051b      	lsls	r3, r3, #20
 80203c6:	693a      	ldr	r2, [r7, #16]
 80203c8:	4313      	orrs	r3, r2
 80203ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	4a19      	ldr	r2, [pc, #100]	; (8020434 <TIM_OC6_SetConfig+0xb8>)
 80203d0:	4293      	cmp	r3, r2
 80203d2:	d00f      	beq.n	80203f4 <TIM_OC6_SetConfig+0x78>
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	4a18      	ldr	r2, [pc, #96]	; (8020438 <TIM_OC6_SetConfig+0xbc>)
 80203d8:	4293      	cmp	r3, r2
 80203da:	d00b      	beq.n	80203f4 <TIM_OC6_SetConfig+0x78>
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	4a17      	ldr	r2, [pc, #92]	; (802043c <TIM_OC6_SetConfig+0xc0>)
 80203e0:	4293      	cmp	r3, r2
 80203e2:	d007      	beq.n	80203f4 <TIM_OC6_SetConfig+0x78>
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	4a16      	ldr	r2, [pc, #88]	; (8020440 <TIM_OC6_SetConfig+0xc4>)
 80203e8:	4293      	cmp	r3, r2
 80203ea:	d003      	beq.n	80203f4 <TIM_OC6_SetConfig+0x78>
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	4a15      	ldr	r2, [pc, #84]	; (8020444 <TIM_OC6_SetConfig+0xc8>)
 80203f0:	4293      	cmp	r3, r2
 80203f2:	d109      	bne.n	8020408 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80203f4:	697b      	ldr	r3, [r7, #20]
 80203f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80203fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80203fc:	683b      	ldr	r3, [r7, #0]
 80203fe:	695b      	ldr	r3, [r3, #20]
 8020400:	029b      	lsls	r3, r3, #10
 8020402:	697a      	ldr	r2, [r7, #20]
 8020404:	4313      	orrs	r3, r2
 8020406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	697a      	ldr	r2, [r7, #20]
 802040c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	68fa      	ldr	r2, [r7, #12]
 8020412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020414:	683b      	ldr	r3, [r7, #0]
 8020416:	685a      	ldr	r2, [r3, #4]
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	693a      	ldr	r2, [r7, #16]
 8020420:	621a      	str	r2, [r3, #32]
}
 8020422:	bf00      	nop
 8020424:	371c      	adds	r7, #28
 8020426:	46bd      	mov	sp, r7
 8020428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802042c:	4770      	bx	lr
 802042e:	bf00      	nop
 8020430:	feff8fff 	.word	0xfeff8fff
 8020434:	40010000 	.word	0x40010000
 8020438:	40010400 	.word	0x40010400
 802043c:	40014000 	.word	0x40014000
 8020440:	40014400 	.word	0x40014400
 8020444:	40014800 	.word	0x40014800

08020448 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8020448:	b480      	push	{r7}
 802044a:	b087      	sub	sp, #28
 802044c:	af00      	add	r7, sp, #0
 802044e:	60f8      	str	r0, [r7, #12]
 8020450:	60b9      	str	r1, [r7, #8]
 8020452:	607a      	str	r2, [r7, #4]
 8020454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	6a1b      	ldr	r3, [r3, #32]
 802045a:	f023 0201 	bic.w	r2, r3, #1
 802045e:	68fb      	ldr	r3, [r7, #12]
 8020460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020462:	68fb      	ldr	r3, [r7, #12]
 8020464:	699b      	ldr	r3, [r3, #24]
 8020466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	6a1b      	ldr	r3, [r3, #32]
 802046c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 802046e:	68fb      	ldr	r3, [r7, #12]
 8020470:	4a2c      	ldr	r2, [pc, #176]	; (8020524 <TIM_TI1_SetConfig+0xdc>)
 8020472:	4293      	cmp	r3, r2
 8020474:	d023      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802047c:	d01f      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	4a29      	ldr	r2, [pc, #164]	; (8020528 <TIM_TI1_SetConfig+0xe0>)
 8020482:	4293      	cmp	r3, r2
 8020484:	d01b      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 8020486:	68fb      	ldr	r3, [r7, #12]
 8020488:	4a28      	ldr	r2, [pc, #160]	; (802052c <TIM_TI1_SetConfig+0xe4>)
 802048a:	4293      	cmp	r3, r2
 802048c:	d017      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	4a27      	ldr	r2, [pc, #156]	; (8020530 <TIM_TI1_SetConfig+0xe8>)
 8020492:	4293      	cmp	r3, r2
 8020494:	d013      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 8020496:	68fb      	ldr	r3, [r7, #12]
 8020498:	4a26      	ldr	r2, [pc, #152]	; (8020534 <TIM_TI1_SetConfig+0xec>)
 802049a:	4293      	cmp	r3, r2
 802049c:	d00f      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 802049e:	68fb      	ldr	r3, [r7, #12]
 80204a0:	4a25      	ldr	r2, [pc, #148]	; (8020538 <TIM_TI1_SetConfig+0xf0>)
 80204a2:	4293      	cmp	r3, r2
 80204a4:	d00b      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 80204a6:	68fb      	ldr	r3, [r7, #12]
 80204a8:	4a24      	ldr	r2, [pc, #144]	; (802053c <TIM_TI1_SetConfig+0xf4>)
 80204aa:	4293      	cmp	r3, r2
 80204ac:	d007      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 80204ae:	68fb      	ldr	r3, [r7, #12]
 80204b0:	4a23      	ldr	r2, [pc, #140]	; (8020540 <TIM_TI1_SetConfig+0xf8>)
 80204b2:	4293      	cmp	r3, r2
 80204b4:	d003      	beq.n	80204be <TIM_TI1_SetConfig+0x76>
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	4a22      	ldr	r2, [pc, #136]	; (8020544 <TIM_TI1_SetConfig+0xfc>)
 80204ba:	4293      	cmp	r3, r2
 80204bc:	d101      	bne.n	80204c2 <TIM_TI1_SetConfig+0x7a>
 80204be:	2301      	movs	r3, #1
 80204c0:	e000      	b.n	80204c4 <TIM_TI1_SetConfig+0x7c>
 80204c2:	2300      	movs	r3, #0
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d008      	beq.n	80204da <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80204c8:	697b      	ldr	r3, [r7, #20]
 80204ca:	f023 0303 	bic.w	r3, r3, #3
 80204ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80204d0:	697a      	ldr	r2, [r7, #20]
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	4313      	orrs	r3, r2
 80204d6:	617b      	str	r3, [r7, #20]
 80204d8:	e003      	b.n	80204e2 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80204da:	697b      	ldr	r3, [r7, #20]
 80204dc:	f043 0301 	orr.w	r3, r3, #1
 80204e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80204e2:	697b      	ldr	r3, [r7, #20]
 80204e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80204e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80204ea:	683b      	ldr	r3, [r7, #0]
 80204ec:	011b      	lsls	r3, r3, #4
 80204ee:	b2db      	uxtb	r3, r3
 80204f0:	697a      	ldr	r2, [r7, #20]
 80204f2:	4313      	orrs	r3, r2
 80204f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80204f6:	693b      	ldr	r3, [r7, #16]
 80204f8:	f023 030a 	bic.w	r3, r3, #10
 80204fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80204fe:	68bb      	ldr	r3, [r7, #8]
 8020500:	f003 030a 	and.w	r3, r3, #10
 8020504:	693a      	ldr	r2, [r7, #16]
 8020506:	4313      	orrs	r3, r2
 8020508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802050a:	68fb      	ldr	r3, [r7, #12]
 802050c:	697a      	ldr	r2, [r7, #20]
 802050e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	693a      	ldr	r2, [r7, #16]
 8020514:	621a      	str	r2, [r3, #32]
}
 8020516:	bf00      	nop
 8020518:	371c      	adds	r7, #28
 802051a:	46bd      	mov	sp, r7
 802051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020520:	4770      	bx	lr
 8020522:	bf00      	nop
 8020524:	40010000 	.word	0x40010000
 8020528:	40000400 	.word	0x40000400
 802052c:	40000800 	.word	0x40000800
 8020530:	40000c00 	.word	0x40000c00
 8020534:	40010400 	.word	0x40010400
 8020538:	40001800 	.word	0x40001800
 802053c:	40014000 	.word	0x40014000
 8020540:	4000e000 	.word	0x4000e000
 8020544:	4000e400 	.word	0x4000e400

08020548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020548:	b480      	push	{r7}
 802054a:	b087      	sub	sp, #28
 802054c:	af00      	add	r7, sp, #0
 802054e:	60f8      	str	r0, [r7, #12]
 8020550:	60b9      	str	r1, [r7, #8]
 8020552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	6a1b      	ldr	r3, [r3, #32]
 8020558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802055a:	68fb      	ldr	r3, [r7, #12]
 802055c:	6a1b      	ldr	r3, [r3, #32]
 802055e:	f023 0201 	bic.w	r2, r3, #1
 8020562:	68fb      	ldr	r3, [r7, #12]
 8020564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	699b      	ldr	r3, [r3, #24]
 802056a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802056c:	693b      	ldr	r3, [r7, #16]
 802056e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	011b      	lsls	r3, r3, #4
 8020578:	693a      	ldr	r2, [r7, #16]
 802057a:	4313      	orrs	r3, r2
 802057c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802057e:	697b      	ldr	r3, [r7, #20]
 8020580:	f023 030a 	bic.w	r3, r3, #10
 8020584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020586:	697a      	ldr	r2, [r7, #20]
 8020588:	68bb      	ldr	r3, [r7, #8]
 802058a:	4313      	orrs	r3, r2
 802058c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	693a      	ldr	r2, [r7, #16]
 8020592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	697a      	ldr	r2, [r7, #20]
 8020598:	621a      	str	r2, [r3, #32]
}
 802059a:	bf00      	nop
 802059c:	371c      	adds	r7, #28
 802059e:	46bd      	mov	sp, r7
 80205a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a4:	4770      	bx	lr

080205a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80205a6:	b480      	push	{r7}
 80205a8:	b087      	sub	sp, #28
 80205aa:	af00      	add	r7, sp, #0
 80205ac:	60f8      	str	r0, [r7, #12]
 80205ae:	60b9      	str	r1, [r7, #8]
 80205b0:	607a      	str	r2, [r7, #4]
 80205b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80205b4:	68fb      	ldr	r3, [r7, #12]
 80205b6:	6a1b      	ldr	r3, [r3, #32]
 80205b8:	f023 0210 	bic.w	r2, r3, #16
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	699b      	ldr	r3, [r3, #24]
 80205c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	6a1b      	ldr	r3, [r3, #32]
 80205ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80205cc:	697b      	ldr	r3, [r7, #20]
 80205ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80205d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	021b      	lsls	r3, r3, #8
 80205d8:	697a      	ldr	r2, [r7, #20]
 80205da:	4313      	orrs	r3, r2
 80205dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80205de:	697b      	ldr	r3, [r7, #20]
 80205e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80205e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80205e6:	683b      	ldr	r3, [r7, #0]
 80205e8:	031b      	lsls	r3, r3, #12
 80205ea:	b29b      	uxth	r3, r3
 80205ec:	697a      	ldr	r2, [r7, #20]
 80205ee:	4313      	orrs	r3, r2
 80205f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80205f2:	693b      	ldr	r3, [r7, #16]
 80205f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80205f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80205fa:	68bb      	ldr	r3, [r7, #8]
 80205fc:	011b      	lsls	r3, r3, #4
 80205fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8020602:	693a      	ldr	r2, [r7, #16]
 8020604:	4313      	orrs	r3, r2
 8020606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020608:	68fb      	ldr	r3, [r7, #12]
 802060a:	697a      	ldr	r2, [r7, #20]
 802060c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	693a      	ldr	r2, [r7, #16]
 8020612:	621a      	str	r2, [r3, #32]
}
 8020614:	bf00      	nop
 8020616:	371c      	adds	r7, #28
 8020618:	46bd      	mov	sp, r7
 802061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802061e:	4770      	bx	lr

08020620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020620:	b480      	push	{r7}
 8020622:	b087      	sub	sp, #28
 8020624:	af00      	add	r7, sp, #0
 8020626:	60f8      	str	r0, [r7, #12]
 8020628:	60b9      	str	r1, [r7, #8]
 802062a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	6a1b      	ldr	r3, [r3, #32]
 8020630:	f023 0210 	bic.w	r2, r3, #16
 8020634:	68fb      	ldr	r3, [r7, #12]
 8020636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	699b      	ldr	r3, [r3, #24]
 802063c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	6a1b      	ldr	r3, [r3, #32]
 8020642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020644:	697b      	ldr	r3, [r7, #20]
 8020646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802064a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	031b      	lsls	r3, r3, #12
 8020650:	697a      	ldr	r2, [r7, #20]
 8020652:	4313      	orrs	r3, r2
 8020654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020656:	693b      	ldr	r3, [r7, #16]
 8020658:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802065c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802065e:	68bb      	ldr	r3, [r7, #8]
 8020660:	011b      	lsls	r3, r3, #4
 8020662:	693a      	ldr	r2, [r7, #16]
 8020664:	4313      	orrs	r3, r2
 8020666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	697a      	ldr	r2, [r7, #20]
 802066c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	693a      	ldr	r2, [r7, #16]
 8020672:	621a      	str	r2, [r3, #32]
}
 8020674:	bf00      	nop
 8020676:	371c      	adds	r7, #28
 8020678:	46bd      	mov	sp, r7
 802067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802067e:	4770      	bx	lr

08020680 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020680:	b480      	push	{r7}
 8020682:	b087      	sub	sp, #28
 8020684:	af00      	add	r7, sp, #0
 8020686:	60f8      	str	r0, [r7, #12]
 8020688:	60b9      	str	r1, [r7, #8]
 802068a:	607a      	str	r2, [r7, #4]
 802068c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	6a1b      	ldr	r3, [r3, #32]
 8020692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020696:	68fb      	ldr	r3, [r7, #12]
 8020698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	69db      	ldr	r3, [r3, #28]
 802069e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80206a0:	68fb      	ldr	r3, [r7, #12]
 80206a2:	6a1b      	ldr	r3, [r3, #32]
 80206a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80206a6:	697b      	ldr	r3, [r7, #20]
 80206a8:	f023 0303 	bic.w	r3, r3, #3
 80206ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80206ae:	697a      	ldr	r2, [r7, #20]
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	4313      	orrs	r3, r2
 80206b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80206b6:	697b      	ldr	r3, [r7, #20]
 80206b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80206bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80206be:	683b      	ldr	r3, [r7, #0]
 80206c0:	011b      	lsls	r3, r3, #4
 80206c2:	b2db      	uxtb	r3, r3
 80206c4:	697a      	ldr	r2, [r7, #20]
 80206c6:	4313      	orrs	r3, r2
 80206c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80206ca:	693b      	ldr	r3, [r7, #16]
 80206cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80206d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80206d2:	68bb      	ldr	r3, [r7, #8]
 80206d4:	021b      	lsls	r3, r3, #8
 80206d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80206da:	693a      	ldr	r2, [r7, #16]
 80206dc:	4313      	orrs	r3, r2
 80206de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	697a      	ldr	r2, [r7, #20]
 80206e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	693a      	ldr	r2, [r7, #16]
 80206ea:	621a      	str	r2, [r3, #32]
}
 80206ec:	bf00      	nop
 80206ee:	371c      	adds	r7, #28
 80206f0:	46bd      	mov	sp, r7
 80206f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f6:	4770      	bx	lr

080206f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80206f8:	b480      	push	{r7}
 80206fa:	b087      	sub	sp, #28
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	60f8      	str	r0, [r7, #12]
 8020700:	60b9      	str	r1, [r7, #8]
 8020702:	607a      	str	r2, [r7, #4]
 8020704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	6a1b      	ldr	r3, [r3, #32]
 802070a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	69db      	ldr	r3, [r3, #28]
 8020716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020718:	68fb      	ldr	r3, [r7, #12]
 802071a:	6a1b      	ldr	r3, [r3, #32]
 802071c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 802071e:	697b      	ldr	r3, [r7, #20]
 8020720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020724:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	021b      	lsls	r3, r3, #8
 802072a:	697a      	ldr	r2, [r7, #20]
 802072c:	4313      	orrs	r3, r2
 802072e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020736:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020738:	683b      	ldr	r3, [r7, #0]
 802073a:	031b      	lsls	r3, r3, #12
 802073c:	b29b      	uxth	r3, r3
 802073e:	697a      	ldr	r2, [r7, #20]
 8020740:	4313      	orrs	r3, r2
 8020742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020744:	693b      	ldr	r3, [r7, #16]
 8020746:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 802074a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 802074c:	68bb      	ldr	r3, [r7, #8]
 802074e:	031b      	lsls	r3, r3, #12
 8020750:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8020754:	693a      	ldr	r2, [r7, #16]
 8020756:	4313      	orrs	r3, r2
 8020758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802075a:	68fb      	ldr	r3, [r7, #12]
 802075c:	697a      	ldr	r2, [r7, #20]
 802075e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8020760:	68fb      	ldr	r3, [r7, #12]
 8020762:	693a      	ldr	r2, [r7, #16]
 8020764:	621a      	str	r2, [r3, #32]
}
 8020766:	bf00      	nop
 8020768:	371c      	adds	r7, #28
 802076a:	46bd      	mov	sp, r7
 802076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020770:	4770      	bx	lr
	...

08020774 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020774:	b480      	push	{r7}
 8020776:	b085      	sub	sp, #20
 8020778:	af00      	add	r7, sp, #0
 802077a:	6078      	str	r0, [r7, #4]
 802077c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	689b      	ldr	r3, [r3, #8]
 8020782:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020784:	68fa      	ldr	r2, [r7, #12]
 8020786:	4b09      	ldr	r3, [pc, #36]	; (80207ac <TIM_ITRx_SetConfig+0x38>)
 8020788:	4013      	ands	r3, r2
 802078a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802078c:	683a      	ldr	r2, [r7, #0]
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	4313      	orrs	r3, r2
 8020792:	f043 0307 	orr.w	r3, r3, #7
 8020796:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	68fa      	ldr	r2, [r7, #12]
 802079c:	609a      	str	r2, [r3, #8]
}
 802079e:	bf00      	nop
 80207a0:	3714      	adds	r7, #20
 80207a2:	46bd      	mov	sp, r7
 80207a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207a8:	4770      	bx	lr
 80207aa:	bf00      	nop
 80207ac:	ffcfff8f 	.word	0xffcfff8f

080207b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80207b0:	b480      	push	{r7}
 80207b2:	b087      	sub	sp, #28
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	60f8      	str	r0, [r7, #12]
 80207b8:	60b9      	str	r1, [r7, #8]
 80207ba:	607a      	str	r2, [r7, #4]
 80207bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	689b      	ldr	r3, [r3, #8]
 80207c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80207c4:	697b      	ldr	r3, [r7, #20]
 80207c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80207ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80207cc:	683b      	ldr	r3, [r7, #0]
 80207ce:	021a      	lsls	r2, r3, #8
 80207d0:	687b      	ldr	r3, [r7, #4]
 80207d2:	431a      	orrs	r2, r3
 80207d4:	68bb      	ldr	r3, [r7, #8]
 80207d6:	4313      	orrs	r3, r2
 80207d8:	697a      	ldr	r2, [r7, #20]
 80207da:	4313      	orrs	r3, r2
 80207dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	697a      	ldr	r2, [r7, #20]
 80207e2:	609a      	str	r2, [r3, #8]
}
 80207e4:	bf00      	nop
 80207e6:	371c      	adds	r7, #28
 80207e8:	46bd      	mov	sp, r7
 80207ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ee:	4770      	bx	lr

080207f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80207f0:	b480      	push	{r7}
 80207f2:	b087      	sub	sp, #28
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	60f8      	str	r0, [r7, #12]
 80207f8:	60b9      	str	r1, [r7, #8]
 80207fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80207fc:	68bb      	ldr	r3, [r7, #8]
 80207fe:	f003 031f 	and.w	r3, r3, #31
 8020802:	2201      	movs	r2, #1
 8020804:	fa02 f303 	lsl.w	r3, r2, r3
 8020808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	6a1a      	ldr	r2, [r3, #32]
 802080e:	697b      	ldr	r3, [r7, #20]
 8020810:	43db      	mvns	r3, r3
 8020812:	401a      	ands	r2, r3
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	6a1a      	ldr	r2, [r3, #32]
 802081c:	68bb      	ldr	r3, [r7, #8]
 802081e:	f003 031f 	and.w	r3, r3, #31
 8020822:	6879      	ldr	r1, [r7, #4]
 8020824:	fa01 f303 	lsl.w	r3, r1, r3
 8020828:	431a      	orrs	r2, r3
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	621a      	str	r2, [r3, #32]
}
 802082e:	bf00      	nop
 8020830:	371c      	adds	r7, #28
 8020832:	46bd      	mov	sp, r7
 8020834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020838:	4770      	bx	lr
	...

0802083c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802083c:	b480      	push	{r7}
 802083e:	b085      	sub	sp, #20
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
 8020844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802084c:	2b01      	cmp	r3, #1
 802084e:	d101      	bne.n	8020854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020850:	2302      	movs	r3, #2
 8020852:	e077      	b.n	8020944 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	2201      	movs	r2, #1
 8020858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	2202      	movs	r2, #2
 8020860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	685b      	ldr	r3, [r3, #4]
 802086a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802086c:	687b      	ldr	r3, [r7, #4]
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	689b      	ldr	r3, [r3, #8]
 8020872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	4a35      	ldr	r2, [pc, #212]	; (8020950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802087a:	4293      	cmp	r3, r2
 802087c:	d004      	beq.n	8020888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	681b      	ldr	r3, [r3, #0]
 8020882:	4a34      	ldr	r2, [pc, #208]	; (8020954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020884:	4293      	cmp	r3, r2
 8020886:	d108      	bne.n	802089a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802088e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020890:	683b      	ldr	r3, [r7, #0]
 8020892:	685b      	ldr	r3, [r3, #4]
 8020894:	68fa      	ldr	r2, [r7, #12]
 8020896:	4313      	orrs	r3, r2
 8020898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802089a:	68fb      	ldr	r3, [r7, #12]
 802089c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80208a2:	683b      	ldr	r3, [r7, #0]
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	68fa      	ldr	r2, [r7, #12]
 80208a8:	4313      	orrs	r3, r2
 80208aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	68fa      	ldr	r2, [r7, #12]
 80208b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	4a25      	ldr	r2, [pc, #148]	; (8020950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80208ba:	4293      	cmp	r3, r2
 80208bc:	d02c      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80208c6:	d027      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	4a22      	ldr	r2, [pc, #136]	; (8020958 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80208ce:	4293      	cmp	r3, r2
 80208d0:	d022      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	4a21      	ldr	r2, [pc, #132]	; (802095c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80208d8:	4293      	cmp	r3, r2
 80208da:	d01d      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	4a1f      	ldr	r2, [pc, #124]	; (8020960 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80208e2:	4293      	cmp	r3, r2
 80208e4:	d018      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	4a1a      	ldr	r2, [pc, #104]	; (8020954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80208ec:	4293      	cmp	r3, r2
 80208ee:	d013      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	681b      	ldr	r3, [r3, #0]
 80208f4:	4a1b      	ldr	r2, [pc, #108]	; (8020964 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80208f6:	4293      	cmp	r3, r2
 80208f8:	d00e      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	4a1a      	ldr	r2, [pc, #104]	; (8020968 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020900:	4293      	cmp	r3, r2
 8020902:	d009      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	4a18      	ldr	r2, [pc, #96]	; (802096c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 802090a:	4293      	cmp	r3, r2
 802090c:	d004      	beq.n	8020918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	4a17      	ldr	r2, [pc, #92]	; (8020970 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020914:	4293      	cmp	r3, r2
 8020916:	d10c      	bne.n	8020932 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020918:	68bb      	ldr	r3, [r7, #8]
 802091a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802091e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	689b      	ldr	r3, [r3, #8]
 8020924:	68ba      	ldr	r2, [r7, #8]
 8020926:	4313      	orrs	r3, r2
 8020928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	68ba      	ldr	r2, [r7, #8]
 8020930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	2201      	movs	r2, #1
 8020936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	2200      	movs	r2, #0
 802093e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020942:	2300      	movs	r3, #0
}
 8020944:	4618      	mov	r0, r3
 8020946:	3714      	adds	r7, #20
 8020948:	46bd      	mov	sp, r7
 802094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094e:	4770      	bx	lr
 8020950:	40010000 	.word	0x40010000
 8020954:	40010400 	.word	0x40010400
 8020958:	40000400 	.word	0x40000400
 802095c:	40000800 	.word	0x40000800
 8020960:	40000c00 	.word	0x40000c00
 8020964:	40001800 	.word	0x40001800
 8020968:	40014000 	.word	0x40014000
 802096c:	4000e000 	.word	0x4000e000
 8020970:	4000e400 	.word	0x4000e400

08020974 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020974:	b480      	push	{r7}
 8020976:	b085      	sub	sp, #20
 8020978:	af00      	add	r7, sp, #0
 802097a:	6078      	str	r0, [r7, #4]
 802097c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802097e:	2300      	movs	r3, #0
 8020980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020988:	2b01      	cmp	r3, #1
 802098a:	d101      	bne.n	8020990 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802098c:	2302      	movs	r3, #2
 802098e:	e087      	b.n	8020aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	2201      	movs	r2, #1
 8020994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8020998:	68fb      	ldr	r3, [r7, #12]
 802099a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	68db      	ldr	r3, [r3, #12]
 80209a2:	4313      	orrs	r3, r2
 80209a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80209ac:	683b      	ldr	r3, [r7, #0]
 80209ae:	689b      	ldr	r3, [r3, #8]
 80209b0:	4313      	orrs	r3, r2
 80209b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80209ba:	683b      	ldr	r3, [r7, #0]
 80209bc:	685b      	ldr	r3, [r3, #4]
 80209be:	4313      	orrs	r3, r2
 80209c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80209c2:	68fb      	ldr	r3, [r7, #12]
 80209c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80209c8:	683b      	ldr	r3, [r7, #0]
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	4313      	orrs	r3, r2
 80209ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80209d0:	68fb      	ldr	r3, [r7, #12]
 80209d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80209d6:	683b      	ldr	r3, [r7, #0]
 80209d8:	691b      	ldr	r3, [r3, #16]
 80209da:	4313      	orrs	r3, r2
 80209dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80209de:	68fb      	ldr	r3, [r7, #12]
 80209e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80209e4:	683b      	ldr	r3, [r7, #0]
 80209e6:	695b      	ldr	r3, [r3, #20]
 80209e8:	4313      	orrs	r3, r2
 80209ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80209f2:	683b      	ldr	r3, [r7, #0]
 80209f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209f6:	4313      	orrs	r3, r2
 80209f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80209fa:	68fb      	ldr	r3, [r7, #12]
 80209fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020a00:	683b      	ldr	r3, [r7, #0]
 8020a02:	699b      	ldr	r3, [r3, #24]
 8020a04:	041b      	lsls	r3, r3, #16
 8020a06:	4313      	orrs	r3, r2
 8020a08:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	4a27      	ldr	r2, [pc, #156]	; (8020aac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020a10:	4293      	cmp	r3, r2
 8020a12:	d004      	beq.n	8020a1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	4a25      	ldr	r2, [pc, #148]	; (8020ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020a1a:	4293      	cmp	r3, r2
 8020a1c:	d106      	bne.n	8020a2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020a24:	683b      	ldr	r3, [r7, #0]
 8020a26:	69db      	ldr	r3, [r3, #28]
 8020a28:	4313      	orrs	r3, r2
 8020a2a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	681b      	ldr	r3, [r3, #0]
 8020a30:	4a1e      	ldr	r2, [pc, #120]	; (8020aac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020a32:	4293      	cmp	r3, r2
 8020a34:	d004      	beq.n	8020a40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	681b      	ldr	r3, [r3, #0]
 8020a3a:	4a1d      	ldr	r2, [pc, #116]	; (8020ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020a3c:	4293      	cmp	r3, r2
 8020a3e:	d126      	bne.n	8020a8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8020a46:	683b      	ldr	r3, [r7, #0]
 8020a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a4a:	051b      	lsls	r3, r3, #20
 8020a4c:	4313      	orrs	r3, r2
 8020a4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020a56:	683b      	ldr	r3, [r7, #0]
 8020a58:	6a1b      	ldr	r3, [r3, #32]
 8020a5a:	4313      	orrs	r3, r2
 8020a5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8020a5e:	68fb      	ldr	r3, [r7, #12]
 8020a60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020a64:	683b      	ldr	r3, [r7, #0]
 8020a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a68:	4313      	orrs	r3, r2
 8020a6a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	4a0e      	ldr	r2, [pc, #56]	; (8020aac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020a72:	4293      	cmp	r3, r2
 8020a74:	d004      	beq.n	8020a80 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	4a0d      	ldr	r2, [pc, #52]	; (8020ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020a7c:	4293      	cmp	r3, r2
 8020a7e:	d106      	bne.n	8020a8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8020a86:	683b      	ldr	r3, [r7, #0]
 8020a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a8a:	4313      	orrs	r3, r2
 8020a8c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	68fa      	ldr	r2, [r7, #12]
 8020a94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	2200      	movs	r2, #0
 8020a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020a9e:	2300      	movs	r3, #0
}
 8020aa0:	4618      	mov	r0, r3
 8020aa2:	3714      	adds	r7, #20
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr
 8020aac:	40010000 	.word	0x40010000
 8020ab0:	40010400 	.word	0x40010400

08020ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020ab4:	b480      	push	{r7}
 8020ab6:	b083      	sub	sp, #12
 8020ab8:	af00      	add	r7, sp, #0
 8020aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020abc:	bf00      	nop
 8020abe:	370c      	adds	r7, #12
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ac6:	4770      	bx	lr

08020ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020ac8:	b480      	push	{r7}
 8020aca:	b083      	sub	sp, #12
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020ad0:	bf00      	nop
 8020ad2:	370c      	adds	r7, #12
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ada:	4770      	bx	lr

08020adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020adc:	b480      	push	{r7}
 8020ade:	b083      	sub	sp, #12
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020ae4:	bf00      	nop
 8020ae6:	370c      	adds	r7, #12
 8020ae8:	46bd      	mov	sp, r7
 8020aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aee:	4770      	bx	lr

08020af0 <_ZdlPv>:
 8020af0:	f000 b926 	b.w	8020d40 <free>

08020af4 <_ZdlPvj>:
 8020af4:	f7ff bffc 	b.w	8020af0 <_ZdlPv>

08020af8 <_Znwj>:
 8020af8:	2801      	cmp	r0, #1
 8020afa:	bf38      	it	cc
 8020afc:	2001      	movcc	r0, #1
 8020afe:	b510      	push	{r4, lr}
 8020b00:	4604      	mov	r4, r0
 8020b02:	4620      	mov	r0, r4
 8020b04:	f000 f914 	bl	8020d30 <malloc>
 8020b08:	b930      	cbnz	r0, 8020b18 <_Znwj+0x20>
 8020b0a:	f000 f8d7 	bl	8020cbc <_ZSt15get_new_handlerv>
 8020b0e:	b908      	cbnz	r0, 8020b14 <_Znwj+0x1c>
 8020b10:	f000 f8dc 	bl	8020ccc <abort>
 8020b14:	4780      	blx	r0
 8020b16:	e7f4      	b.n	8020b02 <_Znwj+0xa>
 8020b18:	bd10      	pop	{r4, pc}

08020b1a <__cxa_pure_virtual>:
 8020b1a:	b508      	push	{r3, lr}
 8020b1c:	f000 f8c8 	bl	8020cb0 <_ZSt9terminatev>

08020b20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8020b20:	68c3      	ldr	r3, [r0, #12]
 8020b22:	689a      	ldr	r2, [r3, #8]
 8020b24:	60c2      	str	r2, [r0, #12]
 8020b26:	b510      	push	{r4, lr}
 8020b28:	b102      	cbz	r2, 8020b2c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8020b2a:	6050      	str	r0, [r2, #4]
 8020b2c:	6842      	ldr	r2, [r0, #4]
 8020b2e:	605a      	str	r2, [r3, #4]
 8020b30:	680c      	ldr	r4, [r1, #0]
 8020b32:	4284      	cmp	r4, r0
 8020b34:	d103      	bne.n	8020b3e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020b36:	600b      	str	r3, [r1, #0]
 8020b38:	6098      	str	r0, [r3, #8]
 8020b3a:	6043      	str	r3, [r0, #4]
 8020b3c:	bd10      	pop	{r4, pc}
 8020b3e:	6891      	ldr	r1, [r2, #8]
 8020b40:	4281      	cmp	r1, r0
 8020b42:	bf0c      	ite	eq
 8020b44:	6093      	streq	r3, [r2, #8]
 8020b46:	60d3      	strne	r3, [r2, #12]
 8020b48:	e7f6      	b.n	8020b38 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08020b4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8020b4a:	6883      	ldr	r3, [r0, #8]
 8020b4c:	68da      	ldr	r2, [r3, #12]
 8020b4e:	6082      	str	r2, [r0, #8]
 8020b50:	b510      	push	{r4, lr}
 8020b52:	b102      	cbz	r2, 8020b56 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8020b54:	6050      	str	r0, [r2, #4]
 8020b56:	6842      	ldr	r2, [r0, #4]
 8020b58:	605a      	str	r2, [r3, #4]
 8020b5a:	680c      	ldr	r4, [r1, #0]
 8020b5c:	4284      	cmp	r4, r0
 8020b5e:	d103      	bne.n	8020b68 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020b60:	600b      	str	r3, [r1, #0]
 8020b62:	60d8      	str	r0, [r3, #12]
 8020b64:	6043      	str	r3, [r0, #4]
 8020b66:	bd10      	pop	{r4, pc}
 8020b68:	68d1      	ldr	r1, [r2, #12]
 8020b6a:	4281      	cmp	r1, r0
 8020b6c:	bf0c      	ite	eq
 8020b6e:	60d3      	streq	r3, [r2, #12]
 8020b70:	6093      	strne	r3, [r2, #8]
 8020b72:	e7f6      	b.n	8020b62 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08020b74 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020b74:	68c3      	ldr	r3, [r0, #12]
 8020b76:	b123      	cbz	r3, 8020b82 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8020b78:	4618      	mov	r0, r3
 8020b7a:	689b      	ldr	r3, [r3, #8]
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d1fb      	bne.n	8020b78 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8020b80:	4770      	bx	lr
 8020b82:	6843      	ldr	r3, [r0, #4]
 8020b84:	68da      	ldr	r2, [r3, #12]
 8020b86:	4282      	cmp	r2, r0
 8020b88:	d102      	bne.n	8020b90 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	685b      	ldr	r3, [r3, #4]
 8020b8e:	e7f9      	b.n	8020b84 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8020b90:	68c2      	ldr	r2, [r0, #12]
 8020b92:	4293      	cmp	r3, r2
 8020b94:	bf18      	it	ne
 8020b96:	4618      	movne	r0, r3
 8020b98:	4770      	bx	lr

08020b9a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8020b9a:	7803      	ldrb	r3, [r0, #0]
 8020b9c:	b933      	cbnz	r3, 8020bac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8020b9e:	6843      	ldr	r3, [r0, #4]
 8020ba0:	685b      	ldr	r3, [r3, #4]
 8020ba2:	4283      	cmp	r3, r0
 8020ba4:	d102      	bne.n	8020bac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8020ba6:	68db      	ldr	r3, [r3, #12]
 8020ba8:	4618      	mov	r0, r3
 8020baa:	4770      	bx	lr
 8020bac:	6882      	ldr	r2, [r0, #8]
 8020bae:	b122      	cbz	r2, 8020bba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8020bb0:	4613      	mov	r3, r2
 8020bb2:	68d2      	ldr	r2, [r2, #12]
 8020bb4:	2a00      	cmp	r2, #0
 8020bb6:	d1fb      	bne.n	8020bb0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8020bb8:	e7f6      	b.n	8020ba8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8020bba:	6843      	ldr	r3, [r0, #4]
 8020bbc:	689a      	ldr	r2, [r3, #8]
 8020bbe:	4282      	cmp	r2, r0
 8020bc0:	d1f2      	bne.n	8020ba8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8020bc2:	4618      	mov	r0, r3
 8020bc4:	685b      	ldr	r3, [r3, #4]
 8020bc6:	e7f9      	b.n	8020bbc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08020bc8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020bc8:	f7ff bfd4 	b.w	8020b74 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08020bcc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8020bcc:	f7ff bfe5 	b.w	8020b9a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08020bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8020bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bd4:	461e      	mov	r6, r3
 8020bd6:	f103 0804 	add.w	r8, r3, #4
 8020bda:	2300      	movs	r3, #0
 8020bdc:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8020be0:	460c      	mov	r4, r1
 8020be2:	604a      	str	r2, [r1, #4]
 8020be4:	700b      	strb	r3, [r1, #0]
 8020be6:	b300      	cbz	r0, 8020c2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8020be8:	4296      	cmp	r6, r2
 8020bea:	6091      	str	r1, [r2, #8]
 8020bec:	d118      	bne.n	8020c20 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8020bee:	6071      	str	r1, [r6, #4]
 8020bf0:	60f4      	str	r4, [r6, #12]
 8020bf2:	2701      	movs	r7, #1
 8020bf4:	f04f 0900 	mov.w	r9, #0
 8020bf8:	6873      	ldr	r3, [r6, #4]
 8020bfa:	42a3      	cmp	r3, r4
 8020bfc:	d03f      	beq.n	8020c7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020bfe:	6860      	ldr	r0, [r4, #4]
 8020c00:	7802      	ldrb	r2, [r0, #0]
 8020c02:	2a00      	cmp	r2, #0
 8020c04:	d13b      	bne.n	8020c7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020c06:	6845      	ldr	r5, [r0, #4]
 8020c08:	68ab      	ldr	r3, [r5, #8]
 8020c0a:	4298      	cmp	r0, r3
 8020c0c:	d123      	bne.n	8020c56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8020c0e:	68eb      	ldr	r3, [r5, #12]
 8020c10:	b183      	cbz	r3, 8020c34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020c12:	781a      	ldrb	r2, [r3, #0]
 8020c14:	b972      	cbnz	r2, 8020c34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020c16:	7007      	strb	r7, [r0, #0]
 8020c18:	701f      	strb	r7, [r3, #0]
 8020c1a:	702a      	strb	r2, [r5, #0]
 8020c1c:	462c      	mov	r4, r5
 8020c1e:	e7eb      	b.n	8020bf8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8020c20:	68b3      	ldr	r3, [r6, #8]
 8020c22:	4293      	cmp	r3, r2
 8020c24:	d1e5      	bne.n	8020bf2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020c26:	60b1      	str	r1, [r6, #8]
 8020c28:	e7e3      	b.n	8020bf2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020c2a:	60d1      	str	r1, [r2, #12]
 8020c2c:	68f3      	ldr	r3, [r6, #12]
 8020c2e:	4293      	cmp	r3, r2
 8020c30:	d1df      	bne.n	8020bf2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020c32:	e7dd      	b.n	8020bf0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020c34:	68c3      	ldr	r3, [r0, #12]
 8020c36:	42a3      	cmp	r3, r4
 8020c38:	d103      	bne.n	8020c42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8020c3a:	4641      	mov	r1, r8
 8020c3c:	f7ff ff70 	bl	8020b20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020c40:	4604      	mov	r4, r0
 8020c42:	6863      	ldr	r3, [r4, #4]
 8020c44:	4641      	mov	r1, r8
 8020c46:	701f      	strb	r7, [r3, #0]
 8020c48:	4628      	mov	r0, r5
 8020c4a:	f885 9000 	strb.w	r9, [r5]
 8020c4e:	f7ff ff7c 	bl	8020b4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020c52:	4625      	mov	r5, r4
 8020c54:	e7e2      	b.n	8020c1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8020c56:	b113      	cbz	r3, 8020c5e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8020c58:	781a      	ldrb	r2, [r3, #0]
 8020c5a:	2a00      	cmp	r2, #0
 8020c5c:	d0db      	beq.n	8020c16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8020c5e:	6883      	ldr	r3, [r0, #8]
 8020c60:	42a3      	cmp	r3, r4
 8020c62:	d103      	bne.n	8020c6c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8020c64:	4641      	mov	r1, r8
 8020c66:	f7ff ff70 	bl	8020b4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020c6a:	4604      	mov	r4, r0
 8020c6c:	6863      	ldr	r3, [r4, #4]
 8020c6e:	4641      	mov	r1, r8
 8020c70:	701f      	strb	r7, [r3, #0]
 8020c72:	4628      	mov	r0, r5
 8020c74:	f885 9000 	strb.w	r9, [r5]
 8020c78:	f7ff ff52 	bl	8020b20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020c7c:	e7e9      	b.n	8020c52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8020c7e:	2201      	movs	r2, #1
 8020c80:	701a      	strb	r2, [r3, #0]
 8020c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020c86 <_ZSt17__throw_bad_allocv>:
 8020c86:	b508      	push	{r3, lr}
 8020c88:	f000 f820 	bl	8020ccc <abort>

08020c8c <_ZSt20__throw_length_errorPKc>:
 8020c8c:	b508      	push	{r3, lr}
 8020c8e:	f000 f81d 	bl	8020ccc <abort>

08020c92 <_ZSt25__throw_bad_function_callv>:
 8020c92:	b508      	push	{r3, lr}
 8020c94:	f000 f81a 	bl	8020ccc <abort>

08020c98 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020c98:	b508      	push	{r3, lr}
 8020c9a:	4780      	blx	r0
 8020c9c:	f000 f816 	bl	8020ccc <abort>

08020ca0 <_ZSt13get_terminatev>:
 8020ca0:	4b02      	ldr	r3, [pc, #8]	; (8020cac <_ZSt13get_terminatev+0xc>)
 8020ca2:	6818      	ldr	r0, [r3, #0]
 8020ca4:	f3bf 8f5b 	dmb	ish
 8020ca8:	4770      	bx	lr
 8020caa:	bf00      	nop
 8020cac:	24000014 	.word	0x24000014

08020cb0 <_ZSt9terminatev>:
 8020cb0:	b508      	push	{r3, lr}
 8020cb2:	f7ff fff5 	bl	8020ca0 <_ZSt13get_terminatev>
 8020cb6:	f7ff ffef 	bl	8020c98 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08020cbc <_ZSt15get_new_handlerv>:
 8020cbc:	4b02      	ldr	r3, [pc, #8]	; (8020cc8 <_ZSt15get_new_handlerv+0xc>)
 8020cbe:	6818      	ldr	r0, [r3, #0]
 8020cc0:	f3bf 8f5b 	dmb	ish
 8020cc4:	4770      	bx	lr
 8020cc6:	bf00      	nop
 8020cc8:	24001300 	.word	0x24001300

08020ccc <abort>:
 8020ccc:	b508      	push	{r3, lr}
 8020cce:	2006      	movs	r0, #6
 8020cd0:	f000 f986 	bl	8020fe0 <raise>
 8020cd4:	2001      	movs	r0, #1
 8020cd6:	f7f4 fc97 	bl	8015608 <_exit>
	...

08020cdc <__errno>:
 8020cdc:	4b01      	ldr	r3, [pc, #4]	; (8020ce4 <__errno+0x8>)
 8020cde:	6818      	ldr	r0, [r3, #0]
 8020ce0:	4770      	bx	lr
 8020ce2:	bf00      	nop
 8020ce4:	24000018 	.word	0x24000018

08020ce8 <__libc_init_array>:
 8020ce8:	b570      	push	{r4, r5, r6, lr}
 8020cea:	4d0d      	ldr	r5, [pc, #52]	; (8020d20 <__libc_init_array+0x38>)
 8020cec:	4c0d      	ldr	r4, [pc, #52]	; (8020d24 <__libc_init_array+0x3c>)
 8020cee:	1b64      	subs	r4, r4, r5
 8020cf0:	10a4      	asrs	r4, r4, #2
 8020cf2:	2600      	movs	r6, #0
 8020cf4:	42a6      	cmp	r6, r4
 8020cf6:	d109      	bne.n	8020d0c <__libc_init_array+0x24>
 8020cf8:	4d0b      	ldr	r5, [pc, #44]	; (8020d28 <__libc_init_array+0x40>)
 8020cfa:	4c0c      	ldr	r4, [pc, #48]	; (8020d2c <__libc_init_array+0x44>)
 8020cfc:	f000 f99a 	bl	8021034 <_init>
 8020d00:	1b64      	subs	r4, r4, r5
 8020d02:	10a4      	asrs	r4, r4, #2
 8020d04:	2600      	movs	r6, #0
 8020d06:	42a6      	cmp	r6, r4
 8020d08:	d105      	bne.n	8020d16 <__libc_init_array+0x2e>
 8020d0a:	bd70      	pop	{r4, r5, r6, pc}
 8020d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d10:	4798      	blx	r3
 8020d12:	3601      	adds	r6, #1
 8020d14:	e7ee      	b.n	8020cf4 <__libc_init_array+0xc>
 8020d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d1a:	4798      	blx	r3
 8020d1c:	3601      	adds	r6, #1
 8020d1e:	e7f2      	b.n	8020d06 <__libc_init_array+0x1e>
 8020d20:	08021320 	.word	0x08021320
 8020d24:	08021320 	.word	0x08021320
 8020d28:	08021320 	.word	0x08021320
 8020d2c:	08021350 	.word	0x08021350

08020d30 <malloc>:
 8020d30:	4b02      	ldr	r3, [pc, #8]	; (8020d3c <malloc+0xc>)
 8020d32:	4601      	mov	r1, r0
 8020d34:	6818      	ldr	r0, [r3, #0]
 8020d36:	f000 b8a7 	b.w	8020e88 <_malloc_r>
 8020d3a:	bf00      	nop
 8020d3c:	24000018 	.word	0x24000018

08020d40 <free>:
 8020d40:	4b02      	ldr	r3, [pc, #8]	; (8020d4c <free+0xc>)
 8020d42:	4601      	mov	r1, r0
 8020d44:	6818      	ldr	r0, [r3, #0]
 8020d46:	f000 b833 	b.w	8020db0 <_free_r>
 8020d4a:	bf00      	nop
 8020d4c:	24000018 	.word	0x24000018

08020d50 <memcpy>:
 8020d50:	440a      	add	r2, r1
 8020d52:	4291      	cmp	r1, r2
 8020d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020d58:	d100      	bne.n	8020d5c <memcpy+0xc>
 8020d5a:	4770      	bx	lr
 8020d5c:	b510      	push	{r4, lr}
 8020d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020d66:	4291      	cmp	r1, r2
 8020d68:	d1f9      	bne.n	8020d5e <memcpy+0xe>
 8020d6a:	bd10      	pop	{r4, pc}

08020d6c <memmove>:
 8020d6c:	4288      	cmp	r0, r1
 8020d6e:	b510      	push	{r4, lr}
 8020d70:	eb01 0402 	add.w	r4, r1, r2
 8020d74:	d902      	bls.n	8020d7c <memmove+0x10>
 8020d76:	4284      	cmp	r4, r0
 8020d78:	4623      	mov	r3, r4
 8020d7a:	d807      	bhi.n	8020d8c <memmove+0x20>
 8020d7c:	1e43      	subs	r3, r0, #1
 8020d7e:	42a1      	cmp	r1, r4
 8020d80:	d008      	beq.n	8020d94 <memmove+0x28>
 8020d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020d8a:	e7f8      	b.n	8020d7e <memmove+0x12>
 8020d8c:	4402      	add	r2, r0
 8020d8e:	4601      	mov	r1, r0
 8020d90:	428a      	cmp	r2, r1
 8020d92:	d100      	bne.n	8020d96 <memmove+0x2a>
 8020d94:	bd10      	pop	{r4, pc}
 8020d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d9e:	e7f7      	b.n	8020d90 <memmove+0x24>

08020da0 <memset>:
 8020da0:	4402      	add	r2, r0
 8020da2:	4603      	mov	r3, r0
 8020da4:	4293      	cmp	r3, r2
 8020da6:	d100      	bne.n	8020daa <memset+0xa>
 8020da8:	4770      	bx	lr
 8020daa:	f803 1b01 	strb.w	r1, [r3], #1
 8020dae:	e7f9      	b.n	8020da4 <memset+0x4>

08020db0 <_free_r>:
 8020db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020db2:	2900      	cmp	r1, #0
 8020db4:	d044      	beq.n	8020e40 <_free_r+0x90>
 8020db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020dba:	9001      	str	r0, [sp, #4]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8020dc2:	bfb8      	it	lt
 8020dc4:	18e4      	addlt	r4, r4, r3
 8020dc6:	f000 f927 	bl	8021018 <__malloc_lock>
 8020dca:	4a1e      	ldr	r2, [pc, #120]	; (8020e44 <_free_r+0x94>)
 8020dcc:	9801      	ldr	r0, [sp, #4]
 8020dce:	6813      	ldr	r3, [r2, #0]
 8020dd0:	b933      	cbnz	r3, 8020de0 <_free_r+0x30>
 8020dd2:	6063      	str	r3, [r4, #4]
 8020dd4:	6014      	str	r4, [r2, #0]
 8020dd6:	b003      	add	sp, #12
 8020dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020ddc:	f000 b922 	b.w	8021024 <__malloc_unlock>
 8020de0:	42a3      	cmp	r3, r4
 8020de2:	d908      	bls.n	8020df6 <_free_r+0x46>
 8020de4:	6825      	ldr	r5, [r4, #0]
 8020de6:	1961      	adds	r1, r4, r5
 8020de8:	428b      	cmp	r3, r1
 8020dea:	bf01      	itttt	eq
 8020dec:	6819      	ldreq	r1, [r3, #0]
 8020dee:	685b      	ldreq	r3, [r3, #4]
 8020df0:	1949      	addeq	r1, r1, r5
 8020df2:	6021      	streq	r1, [r4, #0]
 8020df4:	e7ed      	b.n	8020dd2 <_free_r+0x22>
 8020df6:	461a      	mov	r2, r3
 8020df8:	685b      	ldr	r3, [r3, #4]
 8020dfa:	b10b      	cbz	r3, 8020e00 <_free_r+0x50>
 8020dfc:	42a3      	cmp	r3, r4
 8020dfe:	d9fa      	bls.n	8020df6 <_free_r+0x46>
 8020e00:	6811      	ldr	r1, [r2, #0]
 8020e02:	1855      	adds	r5, r2, r1
 8020e04:	42a5      	cmp	r5, r4
 8020e06:	d10b      	bne.n	8020e20 <_free_r+0x70>
 8020e08:	6824      	ldr	r4, [r4, #0]
 8020e0a:	4421      	add	r1, r4
 8020e0c:	1854      	adds	r4, r2, r1
 8020e0e:	42a3      	cmp	r3, r4
 8020e10:	6011      	str	r1, [r2, #0]
 8020e12:	d1e0      	bne.n	8020dd6 <_free_r+0x26>
 8020e14:	681c      	ldr	r4, [r3, #0]
 8020e16:	685b      	ldr	r3, [r3, #4]
 8020e18:	6053      	str	r3, [r2, #4]
 8020e1a:	4421      	add	r1, r4
 8020e1c:	6011      	str	r1, [r2, #0]
 8020e1e:	e7da      	b.n	8020dd6 <_free_r+0x26>
 8020e20:	d902      	bls.n	8020e28 <_free_r+0x78>
 8020e22:	230c      	movs	r3, #12
 8020e24:	6003      	str	r3, [r0, #0]
 8020e26:	e7d6      	b.n	8020dd6 <_free_r+0x26>
 8020e28:	6825      	ldr	r5, [r4, #0]
 8020e2a:	1961      	adds	r1, r4, r5
 8020e2c:	428b      	cmp	r3, r1
 8020e2e:	bf04      	itt	eq
 8020e30:	6819      	ldreq	r1, [r3, #0]
 8020e32:	685b      	ldreq	r3, [r3, #4]
 8020e34:	6063      	str	r3, [r4, #4]
 8020e36:	bf04      	itt	eq
 8020e38:	1949      	addeq	r1, r1, r5
 8020e3a:	6021      	streq	r1, [r4, #0]
 8020e3c:	6054      	str	r4, [r2, #4]
 8020e3e:	e7ca      	b.n	8020dd6 <_free_r+0x26>
 8020e40:	b003      	add	sp, #12
 8020e42:	bd30      	pop	{r4, r5, pc}
 8020e44:	24001304 	.word	0x24001304

08020e48 <sbrk_aligned>:
 8020e48:	b570      	push	{r4, r5, r6, lr}
 8020e4a:	4e0e      	ldr	r6, [pc, #56]	; (8020e84 <sbrk_aligned+0x3c>)
 8020e4c:	460c      	mov	r4, r1
 8020e4e:	6831      	ldr	r1, [r6, #0]
 8020e50:	4605      	mov	r5, r0
 8020e52:	b911      	cbnz	r1, 8020e5a <sbrk_aligned+0x12>
 8020e54:	f000 f88c 	bl	8020f70 <_sbrk_r>
 8020e58:	6030      	str	r0, [r6, #0]
 8020e5a:	4621      	mov	r1, r4
 8020e5c:	4628      	mov	r0, r5
 8020e5e:	f000 f887 	bl	8020f70 <_sbrk_r>
 8020e62:	1c43      	adds	r3, r0, #1
 8020e64:	d00a      	beq.n	8020e7c <sbrk_aligned+0x34>
 8020e66:	1cc4      	adds	r4, r0, #3
 8020e68:	f024 0403 	bic.w	r4, r4, #3
 8020e6c:	42a0      	cmp	r0, r4
 8020e6e:	d007      	beq.n	8020e80 <sbrk_aligned+0x38>
 8020e70:	1a21      	subs	r1, r4, r0
 8020e72:	4628      	mov	r0, r5
 8020e74:	f000 f87c 	bl	8020f70 <_sbrk_r>
 8020e78:	3001      	adds	r0, #1
 8020e7a:	d101      	bne.n	8020e80 <sbrk_aligned+0x38>
 8020e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020e80:	4620      	mov	r0, r4
 8020e82:	bd70      	pop	{r4, r5, r6, pc}
 8020e84:	24001308 	.word	0x24001308

08020e88 <_malloc_r>:
 8020e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e8c:	1ccd      	adds	r5, r1, #3
 8020e8e:	f025 0503 	bic.w	r5, r5, #3
 8020e92:	3508      	adds	r5, #8
 8020e94:	2d0c      	cmp	r5, #12
 8020e96:	bf38      	it	cc
 8020e98:	250c      	movcc	r5, #12
 8020e9a:	2d00      	cmp	r5, #0
 8020e9c:	4607      	mov	r7, r0
 8020e9e:	db01      	blt.n	8020ea4 <_malloc_r+0x1c>
 8020ea0:	42a9      	cmp	r1, r5
 8020ea2:	d905      	bls.n	8020eb0 <_malloc_r+0x28>
 8020ea4:	230c      	movs	r3, #12
 8020ea6:	603b      	str	r3, [r7, #0]
 8020ea8:	2600      	movs	r6, #0
 8020eaa:	4630      	mov	r0, r6
 8020eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020eb0:	4e2e      	ldr	r6, [pc, #184]	; (8020f6c <_malloc_r+0xe4>)
 8020eb2:	f000 f8b1 	bl	8021018 <__malloc_lock>
 8020eb6:	6833      	ldr	r3, [r6, #0]
 8020eb8:	461c      	mov	r4, r3
 8020eba:	bb34      	cbnz	r4, 8020f0a <_malloc_r+0x82>
 8020ebc:	4629      	mov	r1, r5
 8020ebe:	4638      	mov	r0, r7
 8020ec0:	f7ff ffc2 	bl	8020e48 <sbrk_aligned>
 8020ec4:	1c43      	adds	r3, r0, #1
 8020ec6:	4604      	mov	r4, r0
 8020ec8:	d14d      	bne.n	8020f66 <_malloc_r+0xde>
 8020eca:	6834      	ldr	r4, [r6, #0]
 8020ecc:	4626      	mov	r6, r4
 8020ece:	2e00      	cmp	r6, #0
 8020ed0:	d140      	bne.n	8020f54 <_malloc_r+0xcc>
 8020ed2:	6823      	ldr	r3, [r4, #0]
 8020ed4:	4631      	mov	r1, r6
 8020ed6:	4638      	mov	r0, r7
 8020ed8:	eb04 0803 	add.w	r8, r4, r3
 8020edc:	f000 f848 	bl	8020f70 <_sbrk_r>
 8020ee0:	4580      	cmp	r8, r0
 8020ee2:	d13a      	bne.n	8020f5a <_malloc_r+0xd2>
 8020ee4:	6821      	ldr	r1, [r4, #0]
 8020ee6:	3503      	adds	r5, #3
 8020ee8:	1a6d      	subs	r5, r5, r1
 8020eea:	f025 0503 	bic.w	r5, r5, #3
 8020eee:	3508      	adds	r5, #8
 8020ef0:	2d0c      	cmp	r5, #12
 8020ef2:	bf38      	it	cc
 8020ef4:	250c      	movcc	r5, #12
 8020ef6:	4629      	mov	r1, r5
 8020ef8:	4638      	mov	r0, r7
 8020efa:	f7ff ffa5 	bl	8020e48 <sbrk_aligned>
 8020efe:	3001      	adds	r0, #1
 8020f00:	d02b      	beq.n	8020f5a <_malloc_r+0xd2>
 8020f02:	6823      	ldr	r3, [r4, #0]
 8020f04:	442b      	add	r3, r5
 8020f06:	6023      	str	r3, [r4, #0]
 8020f08:	e00e      	b.n	8020f28 <_malloc_r+0xa0>
 8020f0a:	6822      	ldr	r2, [r4, #0]
 8020f0c:	1b52      	subs	r2, r2, r5
 8020f0e:	d41e      	bmi.n	8020f4e <_malloc_r+0xc6>
 8020f10:	2a0b      	cmp	r2, #11
 8020f12:	d916      	bls.n	8020f42 <_malloc_r+0xba>
 8020f14:	1961      	adds	r1, r4, r5
 8020f16:	42a3      	cmp	r3, r4
 8020f18:	6025      	str	r5, [r4, #0]
 8020f1a:	bf18      	it	ne
 8020f1c:	6059      	strne	r1, [r3, #4]
 8020f1e:	6863      	ldr	r3, [r4, #4]
 8020f20:	bf08      	it	eq
 8020f22:	6031      	streq	r1, [r6, #0]
 8020f24:	5162      	str	r2, [r4, r5]
 8020f26:	604b      	str	r3, [r1, #4]
 8020f28:	4638      	mov	r0, r7
 8020f2a:	f104 060b 	add.w	r6, r4, #11
 8020f2e:	f000 f879 	bl	8021024 <__malloc_unlock>
 8020f32:	f026 0607 	bic.w	r6, r6, #7
 8020f36:	1d23      	adds	r3, r4, #4
 8020f38:	1af2      	subs	r2, r6, r3
 8020f3a:	d0b6      	beq.n	8020eaa <_malloc_r+0x22>
 8020f3c:	1b9b      	subs	r3, r3, r6
 8020f3e:	50a3      	str	r3, [r4, r2]
 8020f40:	e7b3      	b.n	8020eaa <_malloc_r+0x22>
 8020f42:	6862      	ldr	r2, [r4, #4]
 8020f44:	42a3      	cmp	r3, r4
 8020f46:	bf0c      	ite	eq
 8020f48:	6032      	streq	r2, [r6, #0]
 8020f4a:	605a      	strne	r2, [r3, #4]
 8020f4c:	e7ec      	b.n	8020f28 <_malloc_r+0xa0>
 8020f4e:	4623      	mov	r3, r4
 8020f50:	6864      	ldr	r4, [r4, #4]
 8020f52:	e7b2      	b.n	8020eba <_malloc_r+0x32>
 8020f54:	4634      	mov	r4, r6
 8020f56:	6876      	ldr	r6, [r6, #4]
 8020f58:	e7b9      	b.n	8020ece <_malloc_r+0x46>
 8020f5a:	230c      	movs	r3, #12
 8020f5c:	603b      	str	r3, [r7, #0]
 8020f5e:	4638      	mov	r0, r7
 8020f60:	f000 f860 	bl	8021024 <__malloc_unlock>
 8020f64:	e7a1      	b.n	8020eaa <_malloc_r+0x22>
 8020f66:	6025      	str	r5, [r4, #0]
 8020f68:	e7de      	b.n	8020f28 <_malloc_r+0xa0>
 8020f6a:	bf00      	nop
 8020f6c:	24001304 	.word	0x24001304

08020f70 <_sbrk_r>:
 8020f70:	b538      	push	{r3, r4, r5, lr}
 8020f72:	4d06      	ldr	r5, [pc, #24]	; (8020f8c <_sbrk_r+0x1c>)
 8020f74:	2300      	movs	r3, #0
 8020f76:	4604      	mov	r4, r0
 8020f78:	4608      	mov	r0, r1
 8020f7a:	602b      	str	r3, [r5, #0]
 8020f7c:	f7f4 fb4e 	bl	801561c <_sbrk>
 8020f80:	1c43      	adds	r3, r0, #1
 8020f82:	d102      	bne.n	8020f8a <_sbrk_r+0x1a>
 8020f84:	682b      	ldr	r3, [r5, #0]
 8020f86:	b103      	cbz	r3, 8020f8a <_sbrk_r+0x1a>
 8020f88:	6023      	str	r3, [r4, #0]
 8020f8a:	bd38      	pop	{r3, r4, r5, pc}
 8020f8c:	2400130c 	.word	0x2400130c

08020f90 <_raise_r>:
 8020f90:	291f      	cmp	r1, #31
 8020f92:	b538      	push	{r3, r4, r5, lr}
 8020f94:	4604      	mov	r4, r0
 8020f96:	460d      	mov	r5, r1
 8020f98:	d904      	bls.n	8020fa4 <_raise_r+0x14>
 8020f9a:	2316      	movs	r3, #22
 8020f9c:	6003      	str	r3, [r0, #0]
 8020f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020fa2:	bd38      	pop	{r3, r4, r5, pc}
 8020fa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020fa6:	b112      	cbz	r2, 8020fae <_raise_r+0x1e>
 8020fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020fac:	b94b      	cbnz	r3, 8020fc2 <_raise_r+0x32>
 8020fae:	4620      	mov	r0, r4
 8020fb0:	f000 f830 	bl	8021014 <_getpid_r>
 8020fb4:	462a      	mov	r2, r5
 8020fb6:	4601      	mov	r1, r0
 8020fb8:	4620      	mov	r0, r4
 8020fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020fbe:	f000 b817 	b.w	8020ff0 <_kill_r>
 8020fc2:	2b01      	cmp	r3, #1
 8020fc4:	d00a      	beq.n	8020fdc <_raise_r+0x4c>
 8020fc6:	1c59      	adds	r1, r3, #1
 8020fc8:	d103      	bne.n	8020fd2 <_raise_r+0x42>
 8020fca:	2316      	movs	r3, #22
 8020fcc:	6003      	str	r3, [r0, #0]
 8020fce:	2001      	movs	r0, #1
 8020fd0:	e7e7      	b.n	8020fa2 <_raise_r+0x12>
 8020fd2:	2400      	movs	r4, #0
 8020fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020fd8:	4628      	mov	r0, r5
 8020fda:	4798      	blx	r3
 8020fdc:	2000      	movs	r0, #0
 8020fde:	e7e0      	b.n	8020fa2 <_raise_r+0x12>

08020fe0 <raise>:
 8020fe0:	4b02      	ldr	r3, [pc, #8]	; (8020fec <raise+0xc>)
 8020fe2:	4601      	mov	r1, r0
 8020fe4:	6818      	ldr	r0, [r3, #0]
 8020fe6:	f7ff bfd3 	b.w	8020f90 <_raise_r>
 8020fea:	bf00      	nop
 8020fec:	24000018 	.word	0x24000018

08020ff0 <_kill_r>:
 8020ff0:	b538      	push	{r3, r4, r5, lr}
 8020ff2:	4d07      	ldr	r5, [pc, #28]	; (8021010 <_kill_r+0x20>)
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	4604      	mov	r4, r0
 8020ff8:	4608      	mov	r0, r1
 8020ffa:	4611      	mov	r1, r2
 8020ffc:	602b      	str	r3, [r5, #0]
 8020ffe:	f7f4 faf3 	bl	80155e8 <_kill>
 8021002:	1c43      	adds	r3, r0, #1
 8021004:	d102      	bne.n	802100c <_kill_r+0x1c>
 8021006:	682b      	ldr	r3, [r5, #0]
 8021008:	b103      	cbz	r3, 802100c <_kill_r+0x1c>
 802100a:	6023      	str	r3, [r4, #0]
 802100c:	bd38      	pop	{r3, r4, r5, pc}
 802100e:	bf00      	nop
 8021010:	2400130c 	.word	0x2400130c

08021014 <_getpid_r>:
 8021014:	f7f4 bae0 	b.w	80155d8 <_getpid>

08021018 <__malloc_lock>:
 8021018:	4801      	ldr	r0, [pc, #4]	; (8021020 <__malloc_lock+0x8>)
 802101a:	f000 b809 	b.w	8021030 <__retarget_lock_acquire_recursive>
 802101e:	bf00      	nop
 8021020:	24001310 	.word	0x24001310

08021024 <__malloc_unlock>:
 8021024:	4801      	ldr	r0, [pc, #4]	; (802102c <__malloc_unlock+0x8>)
 8021026:	f000 b804 	b.w	8021032 <__retarget_lock_release_recursive>
 802102a:	bf00      	nop
 802102c:	24001310 	.word	0x24001310

08021030 <__retarget_lock_acquire_recursive>:
 8021030:	4770      	bx	lr

08021032 <__retarget_lock_release_recursive>:
 8021032:	4770      	bx	lr

08021034 <_init>:
 8021034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021036:	bf00      	nop
 8021038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802103a:	bc08      	pop	{r3}
 802103c:	469e      	mov	lr, r3
 802103e:	4770      	bx	lr

08021040 <_fini>:
 8021040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021042:	bf00      	nop
 8021044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021046:	bc08      	pop	{r3}
 8021048:	469e      	mov	lr, r3
 802104a:	4770      	bx	lr
